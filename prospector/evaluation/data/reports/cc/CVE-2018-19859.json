{
    "advisory_record": {
        "cve_id": "CVE-2018-19859",
        "description": "OpenRefine before 3.2 beta allows directory traversal via a relative pathname in a ZIP archive.",
        "reserved_timestamp": 1543968000,
        "published_timestamp": 1544007600,
        "updated_timestamp": 1553548393,
        "repository_url": null,
        "references": {
            "": 183,
            "commit::e243e73e4064de87a913946bd320fbbe246da656": 8,
            "https://github.com/OpenRefine/OpenRefine/issues/1840": 5,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "https://github.com/OpenRefine/OpenRefine/pull/1901": 2,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "https://docs.github.com/terms": 2,
            "https://docs.github.com/privacy": 2,
            "https://github.com/advisories/GHSA-f6fv-fjg8-4m6w": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "commit::79994e86da1a3eecc62723f4ba90f14a63ad0e72": 2,
            "https://snyk.io/research/zip-slip-vulnerability": 1,
            "https://github.com/OpenRefine/OpenRefine/files/2600812/openfire_zip_dir_traversal.zip": 1,
            "http://lookslegit.com/cooldata/legitdata.zip": 1,
            "https://github.com/itsacoderepo": 1,
            "commit::08438a2c47112f2fce1e512f6c843c908abed4c7": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19859": 1,
            "https://nvd.nist.gov/vuln/detail/CVE-2018-19859": 1,
            "https://github.com/mdbaehre": 1,
            "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19859": 1,
            "https://github.co/hiddenchars": 1,
            "commit::7f7b71459ca031978c3f8024cb14af13446d6d9c": 1,
            "https://github.com/OpenRefine/OpenRefine/pull/1901#event-2014474828": 1
        },
        "affected_products": [
            "n/a",
            "OpenRefine"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "ZIP",
            "OpenRefine"
        ],
        "keywords": [
            "beta",
            "allow",
            "traversal",
            "directory",
            "archive",
            "openrefine",
            "pathname"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "7f7b71459ca031978c3f8024cb14af13446d6d9c",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544375116,
            "hunks": 0,
            "message": "Merge pull request #1901 from OpenRefine/issue1840 Fix zip slip vulnerability",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1901": "Project import vulnerable to arbitrary file write #1927"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 1901",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 1901 contains some security-related terms: vulnerable",
                    "relevance": 4
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: vulnerability",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1901",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e243e73e4064de87a913946bd320fbbe246da656",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544319693,
            "hunks": 2,
            "message": "Fix zip slip vulnerability. Closes #1840.",
            "diff": [
                "diff --git a/main/src/com/google/refine/importing/ImportingUtilities.java b/main/src/com/google/refine/importing/ImportingUtilities.java",
                "index f73b6936e..8000a0b25 100644",
                "--- a/main/src/com/google/refine/importing/ImportingUtilities.java",
                "+++ b/main/src/com/google/refine/importing/ImportingUtilities.java",
                "@@ -442,3 +442,7 @@ public class ImportingUtilities {",
                "-        File file = new File(dir, name);",
                "+        File file = new File(dir, name);     ",
                "+        // For CVE-2018-19859, issue #1840",
                "+        if (!file.toPath().normalize().startsWith(dir.toPath().normalize())) {",
                "+        \tthrow new IllegalArgumentException(\"Zip archives with files escaping their root directory are not allowed.\");",
                "+        }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java b/main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java",
                "index 8a305224b..b577d3aa4 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java",
                "@@ -38,2 +38,8 @@ public class ImportingUtilitiesTests extends ImporterTest {",
                "+    @Test(expectedExceptions=IllegalArgumentException.class)",
                "+    public void testZipSlip() {",
                "+        // For CVE-2018-19859, issue #1840",
                "+    \tImportingUtilities.allocateFile(workspaceDir, \"../../script.sh\");",
                "+    }",
                "+    ",
                "     private ObjectNode getNestedOptions(ImportingJob job, TreeImportingParserBase parser) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/importing/ImportingUtilities.java",
                "main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1840": "Fix zip slip vulnerability #1901"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 1840",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 8 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 1840 contains some security-related terms: vulnerability",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1840",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "79994e86da1a3eecc62723f4ba90f14a63ad0e72",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544320918,
            "hunks": 4,
            "message": "Create dedicated temporary dir for zip slip test",
            "diff": [
                "diff --git a/main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java b/main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java",
                "index b577d3aa4..de30f8310 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java",
                "@@ -3,2 +3,4 @@ package com.google.refine.tests.importing;",
                "+import java.io.File;",
                "+import java.io.IOException;",
                " import java.util.LinkedList;",
                "@@ -16,2 +18,3 @@ import com.google.refine.importing.ImportingUtilities;",
                " import com.google.refine.tests.importers.ImporterTest;",
                "+import com.google.refine.tests.util.TestUtils;",
                " import com.google.refine.util.JSONUtilities;",
                "@@ -39,5 +42,6 @@ public class ImportingUtilitiesTests extends ImporterTest {",
                "     @Test(expectedExceptions=IllegalArgumentException.class)",
                "-    public void testZipSlip() {",
                "+    public void testZipSlip() throws IOException {",
                "+    \tFile tempDir = TestUtils.createTempDirectory(\"openrefine-zip-slip-test\");",
                "         // For CVE-2018-19859, issue #1840",
                "-    \tImportingUtilities.allocateFile(workspaceDir, \"../../script.sh\");",
                "+    \tImportingUtilities.allocateFile(tempDir, \"../../tmp/script.sh\");",
                "     }"
            ],
            "changed_files": [
                "main/tests/server/src/com/google/refine/tests/importing/ImportingUtilitiesTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                }
            ]
        },
        {
            "commit_id": "142a2d8beba291dadffddb78f20fa18b99696524",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542797011,
            "hunks": 30,
            "message": "Remove all mentions of org.json in Wikidata extension",
            "diff": [
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "index 289ce8962..a7e36be66 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "@@ -32,3 +32,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                " import org.openrefine.wikidata.editing.ConnectionManager;",
                "@@ -60,15 +59,10 @@ public class LoginCommand extends Command {",
                "-        try {",
                "-            writer.writeStartObject();",
                "-            writer.writeBooleanField(\"logged_in\", manager.isLoggedIn());",
                "-            writer.writeStringField(\"username\", manager.getUsername());",
                "-            writer.writeEndObject();",
                "-        } catch (JSONException e) {",
                "-            logger.error(e.getMessage());",
                "-        } finally {",
                "-            writer.flush();",
                "-            writer.close();",
                "-            w.flush();",
                "-            w.close();",
                "-        }",
                "+        writer.writeStartObject();",
                "+        writer.writeBooleanField(\"logged_in\", manager.isLoggedIn());",
                "+        writer.writeStringField(\"username\", manager.getUsername());",
                "+        writer.writeEndObject();",
                "+        writer.flush();",
                "+        writer.close();",
                "+        w.flush();",
                "+        w.close();",
                "     }",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "index ce496df4b..1750841db 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "@@ -36,3 +36,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                " import org.openrefine.wikidata.qa.EditInspector;",
                "@@ -46,2 +45,5 @@ import org.openrefine.wikidata.updates.scheduler.WikibaseAPIUpdateScheduler;",
                " import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import static org.openrefine.wikidata.commands.CommandUtilities.respondError;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -95,3 +97,3 @@ public class PreviewWikibaseSchemaCommand extends Command {",
                "                     schema = WikibaseSchema.reconstruct(jsonString);",
                "-                } catch (JSONException e) {",
                "+                } catch (IOException e) {",
                "                     respondError(response, \"Wikibase schema could not be parsed.\");",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java",
                "index 2470b9426..0115ff8d0 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java",
                "@@ -34,3 +34,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                " import org.openrefine.wikidata.operations.SaveWikibaseSchemaOperation;",
                "@@ -66,3 +65,3 @@ public class SaveWikibaseSchemaCommand extends Command {",
                "-        } catch (JSONException e) {",
                "+        } catch (IOException e) {",
                "             // We do not use respondException here because this is an expected",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/editing/ConnectionManager.java b/extensions/wikidata/src/org/openrefine/wikidata/editing/ConnectionManager.java",
                "index f631be707..490661aa5 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/editing/ConnectionManager.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/editing/ConnectionManager.java",
                "@@ -27,5 +27,2 @@ import java.io.IOException;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -35,4 +32,7 @@ import org.wikidata.wdtk.wikibaseapi.LoginFailedException;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.ProjectManager;",
                " import com.google.refine.preference.PreferenceStore;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -74,12 +74,8 @@ public class ConnectionManager {",
                "         if (rememberCredentials) {",
                "-            try {",
                "-                JSONArray array = new JSONArray();",
                "-                JSONObject obj = new JSONObject();",
                "-                obj.put(\"username\", username);",
                "-                obj.put(\"password\", password);",
                "-                array.put(obj);",
                "-                prefStore.put(PREFERENCE_STORE_KEY, array);",
                "-            } catch (JSONException e) {",
                "-                logger.error(e.getMessage());",
                "-            }",
                "+            ArrayNode array = ParsingUtilities.mapper.createArrayNode();",
                "+            ObjectNode obj = ParsingUtilities.mapper.createObjectNode();",
                "+            obj.put(\"username\", username);",
                "+            obj.put(\"password\", password);",
                "+            array.add(obj);",
                "+            prefStore.put(PREFERENCE_STORE_KEY, array);",
                "         }",
                "@@ -95,3 +91,3 @@ public class ConnectionManager {",
                "     public void restoreSavedConnection() {",
                "-        JSONObject savedCredentials = getStoredCredentials();",
                "+        ObjectNode savedCredentials = getStoredCredentials();",
                "         if (savedCredentials != null) {",
                "@@ -99,7 +95,5 @@ public class ConnectionManager {",
                "             try {",
                "-                connection.login(savedCredentials.getString(\"username\"), savedCredentials.getString(\"password\"));",
                "+                connection.login(savedCredentials.get(\"username\").asText(), savedCredentials.get(\"password\").asText());",
                "             } catch (LoginFailedException e) {",
                "                 connection = null;",
                "-            } catch (JSONException e) {",
                "-                connection = null;",
                "             }",
                "@@ -108,10 +102,6 @@ public class ConnectionManager {",
                "-    public JSONObject getStoredCredentials() {",
                "-        JSONArray array = (JSONArray) prefStore.get(PREFERENCE_STORE_KEY);",
                "-        if (array != null && array.length() > 0) {",
                "-            try {",
                "-                return array.getJSONObject(0);",
                "-            } catch (JSONException e) {",
                "-                logger.error(e.getMessage());",
                "-            }",
                "+    public ObjectNode getStoredCredentials() {",
                "+        ArrayNode array = (ArrayNode) prefStore.get(PREFERENCE_STORE_KEY);",
                "+        if (array != null && array.size() > 0 && array.get(0) instanceof ObjectNode) {",
                "+            return (ObjectNode) array.get(0);",
                "         }",
                "@@ -121,3 +111,3 @@ public class ConnectionManager {",
                "     public void logout() {",
                "-        prefStore.put(PREFERENCE_STORE_KEY, new JSONArray());",
                "+        prefStore.put(PREFERENCE_STORE_KEY, ParsingUtilities.mapper.createArrayNode());",
                "         if (connection != null) {",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/editing/WikibaseCredentials.java b/extensions/wikidata/src/org/openrefine/wikidata/editing/WikibaseCredentials.java",
                "index c8645dcd3..4c27adadc 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/editing/WikibaseCredentials.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/editing/WikibaseCredentials.java",
                "@@ -25,5 +25,3 @@ package org.openrefine.wikidata.editing;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -50,3 +48,8 @@ class WikibaseCredentials  {",
                "-    public WikibaseCredentials(String username, String password) {",
                "+    @JsonCreator",
                "+    public WikibaseCredentials(",
                "+    \t\t@JsonProperty(\"username\")",
                "+    \t\tString username,",
                "+    \t\t@JsonProperty(\"password\")",
                "+    \t\tString password) {",
                "         this.username = username;",
                "@@ -71,8 +74,2 @@ class WikibaseCredentials  {",
                "     }",
                "-",
                "-    public static WikibaseCredentials load(JSONObject obj)",
                "-            throws JSONException {",
                "-        return new WikibaseCredentials(obj.getString(\"username\"), obj.getString(\"password\"));",
                "-    }",
                "-",
                " }",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "index d5f39166d..3d7aa938c 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "@@ -30,3 +30,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                " import org.openrefine.wikidata.schema.WikibaseSchema;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "index 83e61e2bb..413a7dc6b 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "@@ -29,4 +29,2 @@ import java.util.List;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.openrefine.wikidata.qa.QAWarningStore;",
                "@@ -41,6 +39,2 @@ import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-import com.fasterxml.jackson.core.JsonParseException;",
                "-import com.fasterxml.jackson.databind.JsonMappingException;",
                "-import com.fasterxml.jackson.databind.ObjectMapper;",
                "-",
                " import com.google.refine.browsing.Engine;",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/CommandTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/CommandTest.java",
                "index 90ed6ab1a..5475f75ac 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/CommandTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/CommandTest.java",
                "@@ -35,3 +35,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                " import org.openrefine.wikidata.testing.TestingData;",
                "@@ -54,4 +53,3 @@ public abstract class CommandTest extends RefineTest {",
                "     @BeforeMethod(alwaysRun = true)",
                "-    public void setUpProject()",
                "-            throws JSONException {",
                "+    public void setUpProject() {",
                "         project = createCSVProject(TestingData.inceptionWithNewCsv);",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/LoginCommandTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/LoginCommandTest.java",
                "index ae7f8cf58..8699ef3a4 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/LoginCommandTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/LoginCommandTest.java",
                "@@ -8,3 +8,2 @@ import javax.servlet.ServletException;",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeMethod;",
                "@@ -15,4 +14,3 @@ public class LoginCommandTest extends CommandTest {",
                "     @BeforeMethod",
                "-    public void SetUp()",
                "-            throws JSONException {",
                "+    public void SetUp() {",
                "         command = new LoginCommand();",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java",
                "index d5bd18bc7..5c3ac055b 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java",
                "@@ -27,4 +27,2 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "-import java.nio.file.Files;",
                "-import java.nio.file.Paths;",
                " import java.util.Collections;",
                "@@ -32,4 +30,2 @@ import java.util.Collections;",
                " import org.apache.commons.io.IOUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.openrefine.wikidata.schema.WbLanguageConstant;",
                "@@ -50,3 +46,2 @@ import com.google.refine.model.Recon;",
                " import com.google.refine.model.ReconCandidate;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -136,3 +131,3 @@ public class TestingData {",
                "     public static String jsonFromFile(String filename)",
                "-            throws IOException, JSONException {",
                "+            throws IOException {",
                "         InputStream f = TestingData.class.getClassLoader().getResourceAsStream(filename);"
            ],
            "changed_files": [
                "extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java",
                "extensions/wikidata/src/org/openrefine/wikidata/editing/ConnectionManager.java",
                "extensions/wikidata/src/org/openrefine/wikidata/editing/WikibaseCredentials.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/commands/CommandTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/commands/LoginCommandTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "916ede440bad1a9f25374771b6977657d3759836"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/src/org/openrefine/wikidata/editing/ConnectionManager.java, extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java, extensions/wikidata/tests/src/org/openrefine/wikidata/commands/LoginCommandTest.java, extensions/wikidata/src/org/openrefine/wikidata/editing/WikibaseCredentials.java, extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java, extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java, extensions/wikidata/tests/src/org/openrefine/wikidata/commands/CommandTest.java, extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java, extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6baf817f4b7d05b4748cc9c7ac88dd0228968d02",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543504315,
            "hunks": 3,
            "message": "Translated using Weblate (Italian) Currently translated at 100.0% (45 of 45 strings) Translation: OpenRefine/gdata Translate-URL: https://hosted.weblate.org/projects/openrefine/gdata/it/",
            "diff": [
                "diff --git a/extensions/gdata/module/langs/translation-it.json b/extensions/gdata/module/langs/translation-it.json",
                "index 7a5434016..f32724964 100644",
                "--- a/extensions/gdata/module/langs/translation-it.json",
                "+++ b/extensions/gdata/module/langs/translation-it.json",
                "@@ -19,3 +19,3 @@",
                "     \"gdata-parsing/updating-preview\": \"Aggiornando la preview ...\",",
                "-    \"gdata-parsing/worksheet\": \"Worksheets\",",
                "+    \"gdata-parsing/worksheet\": \"Fogli di lavoro\",",
                "     \"gdata-parsing/option\": \"Opzioni\",",
                "@@ -44,3 +44,4 @@",
                "     \"gdata-auth/authorize-label\": \"OpenRefine - Autorizzazione\",",
                "-    \"gdata-auth/authorized-label\": \"Processo di autorizzazione completato. Chiudi questa finestra e torna ad OpenRefine.\"",
                "-}",
                "\\ No newline at end of file",
                "+    \"gdata-auth/authorized-label\": \"Processo di autorizzazione completato. Chiudi questa finestra e torna ad OpenRefine.\",",
                "+    \"gdata-exporter/upload-success\": \"Il progetto \u00c3\u00a8 stato caricato con successo su Google Drive con id \"",
                "+}"
            ],
            "changed_files": [
                "extensions/gdata/module/langs/translation-it.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3f14b3af7f900e72b78347e175f8a6274afc5a14"
                ],
                [
                    "no-tag",
                    "0203a9b8ef3d9829c49b1c0300aabea974ef5283"
                ],
                [
                    "no-tag",
                    "e706447b4fa7f54b10e8bc693fcb35f67f01f4f8"
                ],
                [
                    "no-tag",
                    "3e47ca8010e4b34a049d2ad20b9f6b9e2b12f912"
                ],
                [
                    "no-tag",
                    "bd48ea3c6915de6efebcec0b27be8c6e8df4a7ac"
                ],
                [
                    "no-tag",
                    "0984267ebbf60ac8d6e859334b06caeca1018b38"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: OpenRefine",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "26f3673d89986ce4ab9eb52966361425ac2379b4",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543595903,
            "hunks": 1,
            "message": "Translated using Weblate (Korean) Currently translated at 7.2% (51 of 711 strings) Translation: OpenRefine/Translations Translate-URL: https://hosted.weblate.org/projects/openrefine/translations/ko/",
            "diff": [
                "diff --git a/main/webapp/modules/core/langs/translation-ko.json b/main/webapp/modules/core/langs/translation-ko.json",
                "index 0967ef424..59d54affb 100644",
                "--- a/main/webapp/modules/core/langs/translation-ko.json",
                "+++ b/main/webapp/modules/core/langs/translation-ko.json",
                "@@ -1 +1,53 @@",
                "-{}",
                "+{",
                "+    \"name\": \"\u00ec\u0098\u0081\u00ec\u0096\u00b4\",",
                "+    \"core-index/slogan\": \"\u00eb\u00b3\u00b5\u00ec\u009e\u00a1\u00ed\u0095\u009c \u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0\u00eb\u00a5\u00bc \u00ec\u00b2\u0098\u00eb\u00a6\u00ac\u00ed\u0095\u00a0 \u00ec\u0088\u0098 \u00ec\u009e\u0088\u00eb\u008a\u0094 \u00ea\u00b0\u0095\u00eb\u00a0\u00a5\u00ed\u0095\u009c \u00eb\u008f\u0084\u00ea\u00b5\u00ac\",",
                "+    \"core-index/help\": \"\u00eb\u008f\u0084\u00ec\u009b\u0080\u00eb\u00a7\u0090\",",
                "+    \"core-index/about\": \"\u00ea\u00b4\u0080\u00ed\u0095\u0098\u00ec\u0097\u00ac\",",
                "+    \"core-index/version\": \"\u00eb\u00b2\u0084\u00ec\u00a0\u0084\",",
                "+    \"core-index/new-version\": \"\u00ec\u008b\u00a0\u00ea\u00b7\u009c \u00eb\u00b2\u0084\u00ec\u00a0\u0084\",",
                "+    \"core-index/download\": \"\u00eb\u008b\u00a4\u00ec\u009a\u00b4\u00eb\u00a1\u009c\u00eb\u0093\u009c\",",
                "+    \"core-index/now\": \"\u00ec\u00a7\u0080\u00ea\u00b8\u0088\",",
                "+    \"core-index/change-value\": \"\u00ec\u00b0\u00b8\u00ec\u00a1\u00b0\u00ed\u0082\u00a4 \u00ea\u00b0\u0092\u00ec\u009d\u0084 \u00eb\u00b3\u0080\u00ea\u00b2\u00bd\u00ed\u0095\u0098\u00ec\u0084\u00b8\u00ec\u009a\u0094\",",
                "+    \"core-index/delete-key\": \"\u00ec\u00b0\u00b8\u00ec\u00a1\u00b0\u00ed\u0082\u00a4\u00eb\u00a5\u00bc \u00ec\u0082\u00ad\u00ec\u00a0\u009c\u00ed\u0095\u0098\u00ec\u0084\u00b8\u00ec\u009a\u0094\",",
                "+    \"core-index/preferences\": \"\u00ec\u00b0\u00b8\u00ec\u00a1\u00b0\",",
                "+    \"core-index/key\": \"\u00ed\u0082\u00a4\",",
                "+    \"core-index/value\": \"\u00ea\u00b0\u0092\",",
                "+    \"core-index/add-pref\": \"\u00ec\u00b0\u00b8\u00ec\u00a1\u00b0 \u00ec\u00b6\u0094\u00ea\u00b0\u0080\",",
                "+    \"core-index/pref-key\": \"\u00ec\u00b0\u00b8\u00ec\u00a1\u00b0 \u00ed\u0082\u00a4 \u00ea\u00b0\u0092:\",",
                "+    \"core-index/edit\": \"\u00ed\u008e\u00b8\u00ec\u00a7\u0091\",",
                "+    \"core-index/delete\": \"\u00ec\u0082\u00ad\u00ec\u00a0\u009c\",",
                "+    \"core-index/new-proj-name\": \"\u00ec\u008b\u00a0\u00ea\u00b7\u009c \u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8 \u00ec\u009d\u00b4\u00eb\u00a6\u0084:\",",
                "+    \"core-index/error-rename\": \"\u00ec\u009d\u00b4\u00eb\u00a6\u0084 \u00eb\u00b3\u0080\u00ea\u00b2\u00bd\u00ec\u009d\u0084 \u00ec\u008b\u00a4\u00ed\u008c\u00a8\u00ed\u0095\u009c \u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8:\",",
                "+    \"core-index/no-proj\": \"\u00ec\u00a1\u00b4\u00ec\u009e\u00ac\u00ed\u0095\u0098\u00eb\u008a\u0094 \u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8\u00ea\u00b0\u0080 \u00ec\u0097\u0086\u00ec\u008a\u00b5\u00eb\u008b\u0088\u00eb\u008b\u00a4. \u00ec\u008b\u00a0\u00ea\u00b7\u009c \u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8\u00eb\u00a5\u00bc \u00ec\u0083\u009d\u00ec\u0084\u00b1\u00ed\u0095\u0098\u00ec\u008b\u009c\u00eb\u00a0\u00a4\u00eb\u00a9\u00b4 \u00ec\u0099\u00bc\u00ec\u00aa\u00bd '\u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8 \u00ec\u0083\u009d\u00ec\u0084\u00b1'\u00ec\u009d\u0084 \u00ec\u0084\u00a0\u00ed\u0083\u009d\u00ed\u0095\u0098\u00ec\u0084\u00b8\u00ec\u009a\u0094.\",",
                "+    \"core-index/try-these\": \"\u00ec\u009e\u0091\u00ec\u0097\u0085\u00ed\u0095\u00a0 \u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0\u00ea\u00b0\u0080 \u00ec\u0097\u0086\u00eb\u008b\u00a4\u00eb\u00a9\u00b4, \u00ec\u009d\u00b4\u00ea\u00b2\u0083\u00ec\u009d\u0084 \u00ed\u0095\u00b4\u00eb\u00b3\u00b4\u00ec\u0084\u00b8\u00ec\u009a\u0094\",",
                "+    \"core-index/sample-data\": \"\u00ec\u0083\u0098\u00ed\u0094\u008c \u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0 \u00ec\u0085\u008b\",",
                "+    \"core-index/change-metadata-value\": \"\u00eb\u00a9\u0094\u00ed\u0083\u0080\u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0 \u00ed\u0082\u00a4 \u00ea\u00b0\u0092\u00ec\u009d\u0084 \u00eb\u00b3\u0080\u00ea\u00b2\u00bd\u00ed\u0095\u0098\u00ec\u0084\u00b8\u00ec\u009a\u0094\",",
                "+    \"core-index/name\": \"\u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8 \u00ec\u009d\u00b4\u00eb\u00a6\u0084:\",",
                "+    \"core-index/created\": \"\u00ec\u0083\u009d\u00ec\u0084\u00b1 \u00ec\u008b\u009c\u00ea\u00b0\u0084:\",",
                "+    \"core-index/modified\": \"\u00ec\u00b5\u009c\u00ec\u00a2\u0085 \u00ec\u0088\u0098\u00ec\u00a0\u0095 \u00ec\u008b\u009c\u00ea\u00b0\u0084:\",",
                "+    \"core-index/creator\": \"\u00ec\u0083\u009d\u00ec\u0084\u00b1\u00ec\u009e\u0090:\",",
                "+    \"core-index/contributors\": \"\u00ea\u00b3\u00b5\u00ed\u0097\u008c\u00ec\u009e\u0090:\",",
                "+    \"core-index/subject\": \"\u00ec\u00a3\u00bc\u00ec\u00a0\u009c:\",",
                "+    \"core-index/description\": \"\u00ec\u0084\u00a4\u00eb\u00aa\u0085:\",",
                "+    \"core-index/rowCount\": \"\u00ec\u00a4\u0084 \u00ec\u0088\u0098:\",",
                "+    \"core-index/metaDatas\": \"\u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8 \u00eb\u00a9\u0094\u00ed\u0083\u0080\u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0\",",
                "+    \"core-index/customMetadata\": \"\u00ec\u00bb\u00a4\u00ec\u008a\u00a4\u00ed\u0085\u0080 \u00eb\u00a9\u0094\u00ed\u0083\u0080\u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0(JSON):\",",
                "+    \"core-index/id\": \"\u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8 ID:\",",
                "+    \"core-index/importOptionMetadata\": \"\u00ec\u009e\u0084\u00ed\u008f\u00ac\u00ed\u008a\u00b8 \u00ec\u0098\u00b5\u00ec\u0085\u0098 \u00eb\u00a9\u0094\u00ed\u0083\u0080\u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0(JSON):\",",
                "+    \"core-index-create/create-proj\": \"\u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8 \u00ec\u0083\u009d\u00ec\u0084\u00b1\",",
                "+    \"core-index-create/starting\": \"\u00ec\u008b\u009c\u00ec\u009e\u0091\u00ec\u00a4\u0091\",",
                "+    \"core-index-create/done\": \"\u00ec\u0099\u0084\u00eb\u00a3\u008c.\",",
                "+    \"core-index-create/min-remaining\": \"\u00eb\u00aa\u0087\u00eb\u00b6\u0084\u00ec\u009d\u00b4 \u00eb\u0082\u00a8\u00ec\u0095\u0098\u00ec\u008a\u00b5\u00eb\u008b\u0088\u00eb\u008b\u00a4\",",
                "+    \"core-index-create/sec-remaining\": \"\u00eb\u00aa\u0087\u00ec\u00b4\u0088 \u00eb\u0082\u00a8\u00ec\u0095\u0098\u00ec\u008a\u00b5\u00eb\u008b\u0088\u00eb\u008b\u00a4\",",
                "+    \"core-index-create/almost-done\": \"\u00ea\u00b1\u00b0\u00ec\u009d\u0098 \u00ec\u0099\u0084\u00eb\u00a3\u008c ...\",",
                "+    \"core-index-create/memory-usage\": \"\u00eb\u00a9\u0094\u00eb\u00aa\u00a8\u00eb\u00a6\u00ac \u00ec\u0082\u00ac\u00ec\u009a\u00a9\u00eb\u009f\u0089:\",",
                "+    \"core-index-create/no-details\": \"\u00ec\u0083\u0081\u00ec\u0084\u00b8 \u00ea\u00b8\u00b0\u00ec\u0088\u00a0\u00ec\u009d\u00b4 \u00ec\u0097\u0086\u00ec\u009d\u008c.\",",
                "+    \"core-index-create/question\": \"\u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0\u00eb\u00a5\u00bc \u00ec\u009e\u0084\u00ed\u008f\u00ac\u00ed\u008a\u00b8\u00ed\u0095\u0098\u00ec\u0097\u00ac \u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8\u00eb\u00a5\u00bc \u00ec\u0083\u009d\u00ec\u0084\u00b1\u00ed\u0095\u0098\u00ec\u0084\u00b8\u00ec\u009a\u0094. \u00eb\u0082\u00b4\u00ea\u00b0\u0080 \u00ec\u0096\u00b4\u00eb\u0096\u00a4 \u00ec\u00a2\u0085\u00eb\u00a5\u0098\u00ec\u009d\u0098 \u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0 \u00ed\u008c\u008c\u00ec\u009d\u00bc\u00eb\u0093\u00a4\u00ec\u009d\u0084 \u00ec\u009e\u0084\u00ed\u008f\u00ac\u00ed\u008a\u00b8\u00ed\u0095\u00a0 \u00ec\u0088\u0098 \u00ec\u009e\u0088\u00ec\u008a\u00b5\u00eb\u008b\u0088\u00ea\u00b9\u008c?\",",
                "+    \"core-index-create/formats\": \"TSV, CSV, *SV, Excel (.xls and .xlsx), JSON, XML, RDF as XML, \u00ea\u00b7\u00b8\u00eb\u00a6\u00ac\u00ea\u00b3\u00a0 Google Data documents \u00eb\u00aa\u00a8\u00eb\u0091\u0090 \u00ec\u00a7\u0080\u00ec\u009b\u0090\u00eb\u0090\u00a9\u00eb\u008b\u0088\u00eb\u008b\u00a4. \u00eb\u008b\u00a4\u00eb\u00a5\u00b8 \u00ed\u008f\u00ac\u00eb\u00a7\u00b7\u00ec\u0097\u0090 \u00eb\u008c\u0080\u00ed\u0095\u009c \u00ec\u00a7\u0080\u00ec\u009b\u0090\u00ec\u009d\u0080 OpenRefine extensions \u00eb\u00a5\u00bc \u00ed\u0099\u009c\u00ec\u009a\u00a9\u00ed\u0095\u0098\u00ec\u0097\u00ac \u00ec\u00b6\u0094\u00ea\u00b0\u0080\u00eb\u0090\u00a0 \u00ec\u0088\u0098 \u00ec\u009e\u0088\u00ec\u008a\u00b5\u00eb\u008b\u0088\u00eb\u008b\u00a4.\",",
                "+    \"core-index-create/from\": \"\u00eb\u008d\u00b0\u00ec\u009d\u00b4\u00ed\u0084\u00b0\u00eb\u00a5\u00bc \u00ea\u00b0\u0080\u00ec\u00a0\u00b8\u00ec\u0098\u00a4\u00eb\u008a\u0094 \u00ea\u00b3\u00b3\",",
                "+    \"core-index-import/import-proj\": \"\u00ec\u009e\u0084\u00ed\u008f\u00ac\u00ed\u008a\u00b8 \u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8\",",
                "+    \"core-index-import/locate\": \"\u00ec\u00a1\u00b4\u00ec\u009e\u00ac\u00ed\u0095\u0098\u00eb\u008a\u0094 Refine \u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8 \u00ed\u008c\u008c\u00ec\u009d\u00bc (.tar or .tar.gz) \u00ec\u009c\u0084\u00ec\u00b9\u0098:\",",
                "+    \"core-index-import/file\": \"\u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8 \u00ed\u008c\u008c\u00ec\u009d\u00bc:\",",
                "+    \"core-index-import/rename\": \"\u00ec\u008b\u00a0\u00ea\u00b7\u009c\u00ec\u009d\u00b4\u00eb\u00a6\u0084 \u00ed\u0094\u0084\u00eb\u00a1\u009c\u00ec\u00a0\u009d\u00ed\u008a\u00b8(optional):\",",
                "+    \"core-index-import/inspecting\": \"\u00ec\u0084\u00a0\u00ed\u0083\u009d\u00eb\u0090\u009c \u00ed\u008c\u008c\u00ec\u009d\u00bc\u00eb\u0093\u00a4\u00ec\u009d\u0084 \u00ea\u00b2\u0080\u00ec\u0082\u00ac\u00ec\u00a4\u0091 ...\"",
                "+}"
            ],
            "changed_files": [
                "main/webapp/modules/core/langs/translation-ko.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5ff62760db8a0e04962f587dfd80b74537e555e7"
                ],
                [
                    "no-tag",
                    "b3d197f75abc5dae0b40fea52b8ab22fed3d1818"
                ],
                [
                    "no-tag",
                    "948af451ec2d611bd0944e95f0126ba6c41443e0"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: OpenRefine",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0698b9c84ec65bb3849c8a8d0c3dd804c8efe047",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1539344521,
            "hunks": 6,
            "message": "Unify JSON testing in Wikidata extension",
            "diff": [
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java",
                "index cfc04fb4e..a6969c0f0 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java",
                "@@ -44,2 +44,3 @@ import com.google.refine.operations.OperationRegistry;",
                " import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.tests.util.TestUtils;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -80,3 +81,3 @@ public abstract class OperationTest extends RefineTest {",
                "         ParsingUtilities.defaultWriter.writeValue(writer, op);",
                "-        JacksonSerializationTest.assertJsonEquals(json.toString(), writer.toString());",
                "+        TestUtils.assertEqualAsJson(json.toString(), writer.toString());",
                "     }",
                "diff --git a/main/src/com/google/refine/importing/ImportingJob.java b/main/src/com/google/refine/importing/ImportingJob.java",
                "index 27b0c65e9..a19af621a 100644",
                "--- a/main/src/com/google/refine/importing/ImportingJob.java",
                "+++ b/main/src/com/google/refine/importing/ImportingJob.java",
                "@@ -44,2 +44,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -88,2 +89,3 @@ public class ImportingJob  {",
                "+    @JsonIgnore",
                "     public JSONObject getOrCreateDefaultConfig() {",
                "@@ -139,2 +141,3 @@ public class ImportingJob  {",
                "+    @JsonIgnore",
                "     public JSONObject getRetrievalRecord() {",
                "@@ -154,2 +157,3 @@ public class ImportingJob  {",
                "+    @JsonIgnore",
                "     public List<JSONObject> getSelectedFileRecords() {"
            ],
            "changed_files": [
                "extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java",
                "main/src/com/google/refine/importing/ImportingJob.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1c34b237e413b187e860d2bad009af5d3e69b358"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bd5a8f9ece0624001cbccc712da47ac7fa364532",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538672656,
            "hunks": 21,
            "message": "Fix serialization issues in Wikidata extension",
            "diff": [
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "index 86f0129e1..c92433489 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "@@ -90,3 +90,3 @@ public class PerformWikibaseEditsOperation extends EngineDependentOperation {",
                "     protected String getBriefDescription(Project project) {",
                "-        return \"Peform edits on Wikidata\";",
                "+        return \"Peform Wikibase edits\";",
                "     }",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/PrefetchedEntityIdValue.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/PrefetchedEntityIdValue.java",
                "index ee98c58ab..abe75df96 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/PrefetchedEntityIdValue.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/PrefetchedEntityIdValue.java",
                "@@ -29,2 +29,4 @@ import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " /**",
                "@@ -49,2 +51,3 @@ public interface PrefetchedEntityIdValue extends EntityIdValue {",
                "      */",
                "+    @JsonProperty(\"label\")",
                "     public String getLabel();",
                "@@ -58,2 +61,3 @@ public interface PrefetchedEntityIdValue extends EntityIdValue {",
                "      */",
                "+    @JsonProperty(\"types\")",
                "     public List<String> getTypes();",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                "index f55bc3c8c..56703e9ed 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                "@@ -35,2 +35,3 @@ import org.wikidata.wdtk.datamodel.interfaces.ValueVisitor;",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -74,2 +75,3 @@ public abstract class ReconEntityIdValue implements PrefetchedEntityIdValue {",
                "+    @JsonProperty(\"label\")",
                "     public String getLabel() {",
                "@@ -82,2 +84,3 @@ public abstract class ReconEntityIdValue implements PrefetchedEntityIdValue {",
                "+    @JsonProperty(\"types\")",
                "     public List<String> getTypes() {",
                "@@ -91,2 +94,3 @@ public abstract class ReconEntityIdValue implements PrefetchedEntityIdValue {",
                "     @Override",
                "+    @JsonProperty(\"entityType\")",
                "     public abstract String getEntityType();",
                "@@ -98,2 +102,3 @@ public abstract class ReconEntityIdValue implements PrefetchedEntityIdValue {",
                "      */",
                "+    @JsonProperty(\"reconInternalId\")",
                "     public long getReconInternalId() {",
                "@@ -116,2 +121,3 @@ public abstract class ReconEntityIdValue implements PrefetchedEntityIdValue {",
                "     @Override",
                "+    @JsonProperty(\"id\")",
                "     public String getId() {",
                "@@ -128,2 +134,3 @@ public abstract class ReconEntityIdValue implements PrefetchedEntityIdValue {",
                "     @Override",
                "+    @JsonProperty(\"siteIri\")",
                "     public String getSiteIri() {",
                "@@ -137,2 +144,3 @@ public abstract class ReconEntityIdValue implements PrefetchedEntityIdValue {",
                "     @Override",
                "+    @JsonProperty(\"iri\")",
                "     public String getIri() {",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/SuggestedEntityIdValue.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/SuggestedEntityIdValue.java",
                "index d2b97edea..9898ec3c1 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/SuggestedEntityIdValue.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/SuggestedEntityIdValue.java",
                "@@ -32,2 +32,4 @@ import org.wikidata.wdtk.datamodel.interfaces.ValueVisitor;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " /**",
                "@@ -52,2 +54,3 @@ public abstract class SuggestedEntityIdValue implements PrefetchedEntityIdValue",
                "     @Override",
                "+    @JsonProperty(\"id\")",
                "     public String getId() {",
                "@@ -57,2 +60,3 @@ public abstract class SuggestedEntityIdValue implements PrefetchedEntityIdValue",
                "     @Override",
                "+    @JsonProperty(\"siteIri\")",
                "     public String getSiteIri() {",
                "@@ -62,2 +66,3 @@ public abstract class SuggestedEntityIdValue implements PrefetchedEntityIdValue",
                "     @Override",
                "+    @JsonProperty(\"label\")",
                "     public String getLabel() {",
                "@@ -67,2 +72,3 @@ public abstract class SuggestedEntityIdValue implements PrefetchedEntityIdValue",
                "     @Override",
                "+    @JsonProperty(\"types\")",
                "     public List<String> getTypes() {",
                "@@ -72,2 +78,3 @@ public abstract class SuggestedEntityIdValue implements PrefetchedEntityIdValue",
                "     @Override",
                "+    @JsonProperty(\"iri\")",
                "     public String getIri() {",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java",
                "index 9f608547a..ab61ee7cc 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java",
                "@@ -35,5 +35,7 @@ import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.google.refine.util.ParsingUtilities;",
                "+",
                " public class JacksonSerializationTest {",
                "-    private static ObjectMapper mapper = new ObjectMapper();",
                "+    private static ObjectMapper mapper = ParsingUtilities.mapper;",
                "@@ -43,3 +45,3 @@ public class JacksonSerializationTest {",
                "-            String actualJson = mapper.writeValueAsString(pojo);",
                "+            String actualJson = ParsingUtilities.defaultWriter.writeValueAsString(pojo);",
                "             assertJsonEquals(expectedJson, actualJson);"
            ],
            "changed_files": [
                "extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/PrefetchedEntityIdValue.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/SuggestedEntityIdValue.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java, extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/PrefetchedEntityIdValue.java, extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java, extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/SuggestedEntityIdValue.java, extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c9620a5d9ae3610ffbcdd486697169b441f066d8",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1539254694,
            "hunks": 19,
            "message": "Add missing .flush(); .close() on JsonGenerator",
            "diff": [
                "diff --git a/extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java b/extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java",
                "index 3d821f4d4..3ac87a524 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java",
                "@@ -37,4 +37,2 @@ import javax.servlet.ServletConfig;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -42,3 +40,2 @@ import org.slf4j.LoggerFactory;",
                "-",
                " import edu.mit.simile.butterfly.ButterflyModuleImpl;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "index c92433489..99adcc54d 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "@@ -33,5 +33,3 @@ import java.util.Random;",
                " import org.apache.commons.lang.Validate;",
                "-import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import org.openrefine.wikidata.editing.ConnectionManager;",
                "@@ -58,3 +56,2 @@ import com.google.refine.model.Project;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "-import com.google.refine.operations.OperationRegistry;",
                " import com.google.refine.process.LongRunningProcess;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "index 7eccbbafd..0459ab2b2 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "@@ -30,5 +30,3 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import org.openrefine.wikidata.schema.WikibaseSchema;",
                "@@ -41,3 +39,2 @@ import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "-import com.google.refine.operations.OperationRegistry;",
                " import com.google.refine.util.ParsingUtilities;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "index 5f25306a7..fefbb0f3f 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "@@ -28,3 +28,2 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "-import java.util.Properties;",
                "@@ -32,3 +31,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import org.openrefine.wikidata.qa.QAWarningStore;",
                "diff --git a/main/src/com/google/refine/commands/Command.java b/main/src/com/google/refine/commands/Command.java",
                "index 7664c977c..680b4daa7 100644",
                "--- a/main/src/com/google/refine/commands/Command.java",
                "+++ b/main/src/com/google/refine/commands/Command.java",
                "@@ -297,2 +297,4 @@ public abstract class Command {",
                "         writer.writeEndObject();",
                "+        writer.flush();",
                "+        writer.close();",
                "         w.flush();",
                "@@ -362,2 +364,4 @@ public abstract class Command {",
                "             writer.writeEndObject();",
                "+            writer.flush();",
                "+            writer.close();",
                "             w.flush();",
                "diff --git a/main/src/com/google/refine/commands/HttpUtilities.java b/main/src/com/google/refine/commands/HttpUtilities.java",
                "index b43a2d522..09a8cdd27 100644",
                "--- a/main/src/com/google/refine/commands/HttpUtilities.java",
                "+++ b/main/src/com/google/refine/commands/HttpUtilities.java",
                "@@ -51,2 +51,4 @@ abstract public class HttpUtilities {",
                "             writer.writeEndObject();",
                "+            writer.flush();",
                "+            writer.close();",
                "             w.flush();",
                "@@ -103,2 +105,4 @@ abstract public class HttpUtilities {",
                "             writer.writeEndObject();",
                "+            writer.flush();",
                "+            writer.close();",
                "             w.flush();",
                "diff --git a/main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java b/main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java",
                "index 87e4f5f7d..e8683a124 100644",
                "--- a/main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java",
                "+++ b/main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java",
                "@@ -75,2 +75,4 @@ public class GetColumnsInfoCommand extends Command {",
                "             writer.writeEndArray();",
                "+            writer.flush();",
                "+            writer.close();",
                "         } catch (Exception e) {",
                "diff --git a/main/src/com/google/refine/importing/DefaultImportingController.java b/main/src/com/google/refine/importing/DefaultImportingController.java",
                "index 6c5647261..65fb583ad 100644",
                "--- a/main/src/com/google/refine/importing/DefaultImportingController.java",
                "+++ b/main/src/com/google/refine/importing/DefaultImportingController.java",
                "@@ -203,2 +203,4 @@ public class DefaultImportingController implements ImportingController {",
                "                 writer.writeEndObject();",
                "+                writer.flush();",
                "+                writer.close();",
                "             } catch (IOException e) {",
                "@@ -300,3 +302,3 @@ public class DefaultImportingController implements ImportingController {",
                "         Writer w = response.getWriter();",
                "-        ParsingUtilities.defaultWriter.writeValue(w, job);",
                "+        ParsingUtilities.defaultWriter.writeValue(w, new JobResponse(\"ok\",job));",
                "         w.flush();",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/recon/ReconJudgeOneCellCommandTest.java b/main/tests/server/src/com/google/refine/tests/commands/recon/ReconJudgeOneCellCommandTest.java",
                "index 96cbaf7ac..6f848de51 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/commands/recon/ReconJudgeOneCellCommandTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/recon/ReconJudgeOneCellCommandTest.java",
                "@@ -8,3 +8,2 @@ import java.io.PrintWriter;",
                " import java.util.Collections;",
                "-import java.util.Properties;",
                "@@ -13,3 +12,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONObject;",
                " import org.testng.Assert;"
            ],
            "changed_files": [
                "extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "main/src/com/google/refine/commands/Command.java",
                "main/src/com/google/refine/commands/HttpUtilities.java",
                "main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java",
                "main/src/com/google/refine/importing/DefaultImportingController.java",
                "main/tests/server/src/com/google/refine/tests/commands/recon/ReconJudgeOneCellCommandTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java, extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "98bd03e5f482ffb20b55d26bb293d38ad266f604",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544321979,
            "hunks": 54,
            "message": "Reorganize Java imports",
            "diff": [
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java",
                "index bd3d97294..679090de1 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java",
                "@@ -43,3 +43,2 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                " import com.google.refine.extension.database.DatabaseConfiguration;",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java",
                "index 78ad4b27b..460a3ffc6 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java",
                "@@ -42,3 +42,2 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                " import com.google.refine.extension.database.DatabaseConfiguration;",
                "diff --git a/extensions/jython/src/com/google/refine/jython/JythonEvaluable.java b/extensions/jython/src/com/google/refine/jython/JythonEvaluable.java",
                "index 70bcfdb53..d47ad605e 100644",
                "--- a/extensions/jython/src/com/google/refine/jython/JythonEvaluable.java",
                "+++ b/extensions/jython/src/com/google/refine/jython/JythonEvaluable.java",
                "@@ -35,6 +35,2 @@ package com.google.refine.jython;",
                "-import com.google.refine.expr.*;",
                "-import org.python.core.*;",
                "-import org.python.util.PythonInterpreter;",
                "-",
                " import java.io.File;",
                "@@ -45,2 +41,19 @@ import java.util.Properties;",
                "+import org.python.core.Py;",
                "+import org.python.core.PyException;",
                "+import org.python.core.PyFloat;",
                "+import org.python.core.PyFunction;",
                "+import org.python.core.PyInteger;",
                "+import org.python.core.PyLong;",
                "+import org.python.core.PyNone;",
                "+import org.python.core.PyObject;",
                "+import org.python.core.PyString;",
                "+import org.python.util.PythonInterpreter;",
                "+",
                "+import com.google.refine.expr.EvalError;",
                "+import com.google.refine.expr.Evaluable;",
                "+import com.google.refine.expr.HasFields;",
                "+import com.google.refine.expr.LanguageSpecificParser;",
                "+import com.google.refine.expr.ParsingException;",
                "+",
                " public class JythonEvaluable implements Evaluable {",
                "diff --git a/extensions/jython/tests/src/com/google/refine/jython/JythonEvaluableTest.java b/extensions/jython/tests/src/com/google/refine/jython/JythonEvaluableTest.java",
                "index a9aec0993..196030ba7 100644",
                "--- a/extensions/jython/tests/src/com/google/refine/jython/JythonEvaluableTest.java",
                "+++ b/extensions/jython/tests/src/com/google/refine/jython/JythonEvaluableTest.java",
                "@@ -2,2 +2,7 @@ package com.google.refine.jython;",
                "+import java.util.Properties;",
                "+",
                "+import org.testng.Assert;",
                "+import org.testng.annotations.Test;",
                "+",
                " import com.google.refine.expr.CellTuple;",
                "@@ -7,6 +12,2 @@ import com.google.refine.model.Project;",
                " import com.google.refine.model.Row;",
                "-import org.testng.Assert;",
                "-import org.testng.annotations.Test;",
                "-",
                "-import java.util.Properties;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java",
                "index c82bd4986..540efeaea 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java",
                "@@ -8,3 +8,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                " import com.google.refine.util.ParsingUtilities;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "index a7e36be66..83c194582 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "@@ -35,3 +35,2 @@ import org.openrefine.wikidata.editing.ConnectionManager;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                " import com.google.refine.commands.Command;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "index 70d9bd9af..7c1c25621 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "@@ -45,3 +45,2 @@ import com.google.refine.commands.Command;",
                " import com.google.refine.model.Project;",
                "-import com.google.refine.util.ParsingUtilities;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/editing/NewItemLibrary.java b/extensions/wikidata/src/org/openrefine/wikidata/editing/NewItemLibrary.java",
                "index b84af31cb..abb9fa0f1 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/editing/NewItemLibrary.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/editing/NewItemLibrary.java",
                "@@ -32,3 +32,2 @@ import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-",
                " import com.google.refine.model.Cell;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "index 3154b4fbc..93dad70a0 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "@@ -48,3 +48,2 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.databind.ObjectMapper;",
                "-",
                " import com.google.refine.browsing.Engine;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "index 0ab7fe934..8b8765131 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "@@ -35,3 +35,2 @@ import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-",
                " import com.google.refine.history.Change;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java",
                "index 0e061b6bc..a6b297601 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java",
                "@@ -40,3 +40,2 @@ import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-",
                " import com.google.common.collect.ImmutableMap;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateVariable.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateVariable.java",
                "index 5546d5cfb..355bbd99c 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateVariable.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateVariable.java",
                "@@ -32,3 +32,2 @@ import org.wikidata.wdtk.datamodel.interfaces.TimeValue;",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "-",
                " import com.google.refine.model.Cell;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemVariable.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemVariable.java",
                "index af7d2fd72..84289cc98 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemVariable.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemVariable.java",
                "@@ -32,3 +32,2 @@ import org.wikidata.wdtk.datamodel.interfaces.ItemIdValue;",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "-",
                " import com.google.refine.model.Cell;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbLanguageVariable.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbLanguageVariable.java",
                "index 9107ca193..0e2e37914 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbLanguageVariable.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbLanguageVariable.java",
                "@@ -29,3 +29,2 @@ import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "-",
                " import com.google.refine.model.Cell;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbLocationVariable.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbLocationVariable.java",
                "index c4936df04..3765bf499 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbLocationVariable.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbLocationVariable.java",
                "@@ -32,3 +32,2 @@ import org.wikidata.wdtk.datamodel.interfaces.GlobeCoordinatesValue;",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "-",
                " import com.google.refine.model.Cell;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbSnakExpr.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbSnakExpr.java",
                "index a9b33b952..61d8c4ac4 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbSnakExpr.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbSnakExpr.java",
                "@@ -28,3 +28,2 @@ import org.openrefine.wikidata.schema.entityvalues.FullyPropertySerializingValue",
                " import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException;",
                "-import org.wikidata.wdtk.datamodel.helpers.Datamodel;",
                " import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java",
                "index 4e1ae3bd2..622b1ffad 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java",
                "@@ -30,3 +30,2 @@ import org.wikidata.wdtk.datamodel.interfaces.StringValue;",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "-",
                " import com.google.refine.model.Cell;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbVariableExpr.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbVariableExpr.java",
                "index c86fb540c..99a03f63f 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WbVariableExpr.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WbVariableExpr.java",
                "@@ -30,3 +30,2 @@ import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-",
                " import com.google.refine.model.Cell;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/FullyPropertySerializingValueSnak.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/FullyPropertySerializingValueSnak.java",
                "index 7f969b7dc..0a6b083fa 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/FullyPropertySerializingValueSnak.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/FullyPropertySerializingValueSnak.java",
                "@@ -2,2 +2,3 @@ package org.openrefine.wikidata.schema.entityvalues;",
                "+import org.wikidata.wdtk.datamodel.implementation.SnakImpl;",
                " import org.wikidata.wdtk.datamodel.implementation.ValueSnakImpl;",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                "index 56703e9ed..aec4ca41d 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                "@@ -36,3 +36,2 @@ import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-",
                " import com.google.refine.model.Recon;",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java",
                "index 134794417..2540698f2 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java",
                "@@ -25,2 +25,15 @@ package org.openrefine.wikidata.editing;",
                "+import static org.junit.Assert.assertEquals;",
                "+import static org.mockito.Mockito.mock;",
                "+import static org.mockito.Mockito.times;",
                "+import static org.mockito.Mockito.verify;",
                "+import static org.mockito.Mockito.when;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.stream.Collectors;",
                "+",
                " import org.openrefine.wikidata.testing.TestingData;",
                "@@ -42,16 +55,2 @@ import com.google.refine.tests.RefineTest;",
                "-import static org.junit.Assert.assertEquals;",
                "-import static org.mockito.Mockito.mock;",
                "-import static org.mockito.Mockito.when;",
                "-",
                "-import java.io.IOException;",
                "-import java.util.ArrayList;",
                "-import java.util.Collections;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.stream.Collectors;",
                "-",
                "-import static org.mockito.Mockito.verify;",
                "-import static org.mockito.Mockito.times;",
                "-",
                " public class EditBatchProcessorTest extends RefineTest {",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/WikidataConstraintFetcherTests.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/WikidataConstraintFetcherTests.java",
                "index ed90e9833..de5488090 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/WikidataConstraintFetcherTests.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/WikidataConstraintFetcherTests.java",
                "@@ -25,2 +25,4 @@ package org.openrefine.wikidata.qa;",
                "+import java.util.regex.Pattern;",
                "+",
                " import org.testng.Assert;",
                "@@ -30,4 +32,2 @@ import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;",
                "-import java.util.regex.Pattern;",
                "-",
                " public class WikidataConstraintFetcherTests {",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java",
                "index 79485cbc3..97676504c 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java",
                "@@ -35,3 +35,2 @@ import org.wikidata.wdtk.datamodel.interfaces.QuantityValue;",
                " import com.fasterxml.jackson.core.JsonProcessingException;",
                "-import com.fasterxml.jackson.databind.ObjectMapper;",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java",
                "index e50b975da..b8d41e788 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java",
                "@@ -32,5 +32,3 @@ import org.testng.Assert;",
                " import com.fasterxml.jackson.core.JsonProcessingException;",
                "-import com.fasterxml.jackson.databind.JsonNode;",
                " import com.fasterxml.jackson.databind.ObjectMapper;",
                "-",
                " import com.google.refine.tests.util.TestUtils;",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/updates/ItemUpdateTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/updates/ItemUpdateTest.java",
                "index d7c2d67c2..a157d320d 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/updates/ItemUpdateTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/updates/ItemUpdateTest.java",
                "@@ -39,3 +39,2 @@ import java.util.stream.Collectors;",
                " import org.openrefine.wikidata.testing.TestingData;",
                "-import org.openrefine.wikidata.updates.ItemUpdateBuilder;",
                " import org.testng.annotations.Test;",
                "diff --git a/main/src/com/google/refine/RefineServlet.java b/main/src/com/google/refine/RefineServlet.java",
                "index 6782870b2..397205edc 100644",
                "--- a/main/src/com/google/refine/RefineServlet.java",
                "+++ b/main/src/com/google/refine/RefineServlet.java",
                "@@ -60,3 +60,2 @@ import com.google.refine.importing.ImportingManager;",
                " import com.google.refine.io.FileProjectManager;",
                "-import com.google.refine.util.ParsingUtilities;",
                "diff --git a/main/src/com/google/refine/browsing/filters/ExpressionEqualRowFilter.java b/main/src/com/google/refine/browsing/filters/ExpressionEqualRowFilter.java",
                "index c97861c81..a2701e105 100644",
                "--- a/main/src/com/google/refine/browsing/filters/ExpressionEqualRowFilter.java",
                "+++ b/main/src/com/google/refine/browsing/filters/ExpressionEqualRowFilter.java",
                "@@ -36,3 +36,2 @@ package com.google.refine.browsing.filters;",
                " import java.time.OffsetDateTime;",
                "-",
                " import java.util.Collection;",
                "diff --git a/main/src/com/google/refine/commands/project/GetModelsCommand.java b/main/src/com/google/refine/commands/project/GetModelsCommand.java",
                "index bad853dd6..ebf707d7b 100644",
                "--- a/main/src/com/google/refine/commands/project/GetModelsCommand.java",
                "+++ b/main/src/com/google/refine/commands/project/GetModelsCommand.java",
                "@@ -47,3 +47,2 @@ import com.google.refine.commands.HttpHeadersSupport;",
                " import com.google.refine.commands.HttpHeadersSupport.HttpHeaderInfo;",
                "-import com.google.refine.commands.HttpUtilities;",
                " import com.google.refine.expr.MetaParser;",
                "diff --git a/main/src/com/google/refine/expr/functions/html/ParseHtml.java b/main/src/com/google/refine/expr/functions/html/ParseHtml.java",
                "index 482fd2c7f..d278da6eb 100644",
                "--- a/main/src/com/google/refine/expr/functions/html/ParseHtml.java",
                "+++ b/main/src/com/google/refine/expr/functions/html/ParseHtml.java",
                "@@ -37,4 +37,2 @@ import java.util.Properties;",
                "-import org.jsoup.Jsoup;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "diff --git a/main/src/com/google/refine/grel/ControlFunctionRegistry.java b/main/src/com/google/refine/grel/ControlFunctionRegistry.java",
                "index 1ef16e95c..a51599747 100644",
                "--- a/main/src/com/google/refine/grel/ControlFunctionRegistry.java",
                "+++ b/main/src/com/google/refine/grel/ControlFunctionRegistry.java",
                "@@ -66,8 +66,2 @@ import com.google.refine.expr.functions.html.InnerHtml;",
                " import com.google.refine.expr.functions.html.ParseHtml;",
                "-import com.google.refine.expr.functions.xml.XmlAttr;",
                "-import com.google.refine.expr.functions.xml.XmlText;",
                "-import com.google.refine.expr.functions.xml.InnerXml;",
                "-import com.google.refine.expr.functions.xml.OwnText;",
                "-import com.google.refine.expr.functions.xml.ParseXml;",
                "-import com.google.refine.expr.functions.xml.SelectXml;",
                " import com.google.refine.expr.functions.math.ACos;",
                "@@ -139,2 +133,8 @@ import com.google.refine.expr.functions.strings.Unicode;",
                " import com.google.refine.expr.functions.strings.UnicodeType;",
                "+import com.google.refine.expr.functions.xml.InnerXml;",
                "+import com.google.refine.expr.functions.xml.OwnText;",
                "+import com.google.refine.expr.functions.xml.ParseXml;",
                "+import com.google.refine.expr.functions.xml.SelectXml;",
                "+import com.google.refine.expr.functions.xml.XmlAttr;",
                "+import com.google.refine.expr.functions.xml.XmlText;",
                " import com.google.refine.grel.controls.Filter;",
                "diff --git a/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java b/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "index e942e9023..94dad7616 100644",
                "--- a/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "+++ b/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "@@ -39,3 +39,2 @@ import com.fasterxml.jackson.databind.JsonNode;",
                " import com.fasterxml.jackson.databind.node.ObjectNode;",
                "-import com.google.common.collect.Lists;",
                " import com.google.refine.expr.Evaluable;",
                "diff --git a/main/src/com/google/refine/importers/FixedWidthImporter.java b/main/src/com/google/refine/importers/FixedWidthImporter.java",
                "index b8773907d..237e9a966 100644",
                "--- a/main/src/com/google/refine/importers/FixedWidthImporter.java",
                "+++ b/main/src/com/google/refine/importers/FixedWidthImporter.java",
                "@@ -15,2 +15,3 @@ import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.fasterxml.jackson.databind.node.ObjectNode;",
                "+import com.google.refine.ProjectMetadata;",
                " import com.google.refine.importing.ImportingJob;",
                "@@ -18,5 +19,2 @@ import com.google.refine.importing.ImportingUtilities;",
                " import com.google.refine.model.Project;",
                "-",
                "-import com.google.refine.ProjectMetadata;",
                "-",
                " import com.google.refine.util.JSONUtilities;",
                "diff --git a/main/src/com/google/refine/importers/JsonImporter.java b/main/src/com/google/refine/importers/JsonImporter.java",
                "index 0a7cf39dd..318b60b6e 100644",
                "--- a/main/src/com/google/refine/importers/JsonImporter.java",
                "+++ b/main/src/com/google/refine/importers/JsonImporter.java",
                "@@ -49,3 +49,2 @@ import com.fasterxml.jackson.core.JsonParser.NumberType;",
                " import com.fasterxml.jackson.core.JsonToken;",
                "-",
                " import com.fasterxml.jackson.databind.JsonNode;",
                "@@ -57,3 +56,2 @@ import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.fasterxml.jackson.databind.node.TextNode;",
                "-",
                " import com.google.refine.ProjectMetadata;",
                "@@ -66,3 +64,2 @@ import com.google.refine.importing.ImportingUtilities;",
                " import com.google.refine.model.Project;",
                "-",
                " import com.google.refine.util.JSONUtilities;",
                "diff --git a/main/src/com/google/refine/importers/LineBasedImporter.java b/main/src/com/google/refine/importers/LineBasedImporter.java",
                "index 34ba172a4..c40e64eed 100644",
                "--- a/main/src/com/google/refine/importers/LineBasedImporter.java",
                "+++ b/main/src/com/google/refine/importers/LineBasedImporter.java",
                "@@ -12,5 +12,5 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.databind.node.ObjectNode;",
                "+import com.google.refine.ProjectMetadata;",
                " import com.google.refine.importing.ImportingJob;",
                " import com.google.refine.model.Project;",
                "-import com.google.refine.ProjectMetadata;",
                " import com.google.refine.util.JSONUtilities;",
                "diff --git a/main/src/com/google/refine/importers/WikitextImporter.java b/main/src/com/google/refine/importers/WikitextImporter.java",
                "index 67761a8b4..13b754575 100644",
                "--- a/main/src/com/google/refine/importers/WikitextImporter.java",
                "+++ b/main/src/com/google/refine/importers/WikitextImporter.java",
                "@@ -54,4 +54,2 @@ import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.common.io.CharStreams;",
                "-import xtc.parser.ParseException;",
                "-",
                " import com.google.refine.ProjectMetadata;",
                "@@ -65,3 +63,2 @@ import com.google.refine.model.recon.ReconJob;",
                " import com.google.refine.model.recon.StandardReconConfig;",
                "-",
                " import com.google.refine.model.recon.StandardReconConfig.ColumnDetail;",
                "@@ -70,2 +67,3 @@ import com.google.refine.util.JSONUtilities;",
                " import de.fau.cs.osr.ptk.common.AstVisitor;",
                "+import xtc.parser.ParseException;",
                "diff --git a/main/src/com/google/refine/importers/XmlImporter.java b/main/src/com/google/refine/importers/XmlImporter.java",
                "index 74d7fa58d..dd3b76175 100644",
                "--- a/main/src/com/google/refine/importers/XmlImporter.java",
                "+++ b/main/src/com/google/refine/importers/XmlImporter.java",
                "@@ -54,3 +54,2 @@ import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.ProjectMetadata;",
                "-",
                " import com.google.refine.importers.tree.ImportColumnGroup;",
                "@@ -62,3 +61,2 @@ import com.google.refine.importing.ImportingUtilities;",
                " import com.google.refine.model.Project;",
                "-",
                " import com.google.refine.util.JSONUtilities;",
                "diff --git a/main/src/com/google/refine/importing/ImportingParser.java b/main/src/com/google/refine/importing/ImportingParser.java",
                "index ae4277601..e46f8eb55 100644",
                "--- a/main/src/com/google/refine/importing/ImportingParser.java",
                "+++ b/main/src/com/google/refine/importing/ImportingParser.java",
                "@@ -38,5 +38,4 @@ import java.util.List;",
                " import com.fasterxml.jackson.databind.node.ObjectNode;",
                "-import com.google.refine.model.Project;",
                "-",
                " import com.google.refine.ProjectMetadata;",
                "+import com.google.refine.model.Project;",
                "diff --git a/main/src/com/google/refine/model/recon/ReconConfig.java b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "index fe50f2eb9..272790260 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "@@ -45,4 +45,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonTypeInfo;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;\t",
                " import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java b/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "index f7d3bda32..3fb901a64 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "@@ -43,2 +43,3 @@ import java.util.Set;",
                " import org.apache.commons.lang3.StringUtils;",
                "+",
                " import com.fasterxml.jackson.annotation.JsonCreator;"
            ],
            "changed_files": [
                "extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java",
                "extensions/jython/src/com/google/refine/jython/JythonEvaluable.java",
                "extensions/jython/tests/src/com/google/refine/jython/JythonEvaluableTest.java",
                "extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java",
                "extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "extensions/wikidata/src/org/openrefine/wikidata/editing/NewItemLibrary.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateVariable.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemVariable.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WbLanguageVariable.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WbLocationVariable.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WbSnakExpr.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WbVariableExpr.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/FullyPropertySerializingValueSnak.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/WikidataConstraintFetcherTests.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/updates/ItemUpdateTest.java",
                "main/src/com/google/refine/RefineServlet.java",
                "main/src/com/google/refine/browsing/filters/ExpressionEqualRowFilter.java",
                "main/src/com/google/refine/commands/project/GetModelsCommand.java",
                "main/src/com/google/refine/expr/functions/html/ParseHtml.java",
                "main/src/com/google/refine/grel/ControlFunctionRegistry.java",
                "main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "main/src/com/google/refine/importers/FixedWidthImporter.java",
                "main/src/com/google/refine/importers/JsonImporter.java",
                "main/src/com/google/refine/importers/LineBasedImporter.java",
                "main/src/com/google/refine/importers/WikitextImporter.java",
                "main/src/com/google/refine/importers/XmlImporter.java",
                "main/src/com/google/refine/importing/ImportingParser.java",
                "main/src/com/google/refine/model/recon/ReconConfig.java",
                "main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/tests/src/org/openrefine/wikidata/testing/JacksonSerializationTest.java, extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbQuantityExprTest.java, extensions/wikidata/tests/src/org/openrefine/wikidata/updates/ItemUpdateTest.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemVariable.java, extensions/wikidata/tests/src/org/openrefine/wikidata/qa/WikidataConstraintFetcherTests.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateVariable.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WbLanguageVariable.java, extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WbLocationVariable.java, extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java, extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java, extensions/wikidata/tests/src/org/openrefine/wikidata/editing/EditBatchProcessorTest.java, extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java, extensions/wikidata/src/org/openrefine/wikidata/editing/NewItemLibrary.java, extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WbSnakExpr.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WbVariableExpr.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WbStringVariable.java, extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/FullyPropertySerializingValueSnak.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WbDateConstant.java, extensions/wikidata/src/org/openrefine/wikidata/schema/entityvalues/ReconEntityIdValue.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ebfa59119033164bd01e55700bc9f78bc0d05803",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541438065,
            "hunks": 2,
            "message": "Fix WikibaseSchemaTest",
            "diff": [
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java",
                "index 42ba06c8d..065136cb7 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java",
                "@@ -51,4 +51,2 @@ import org.wikidata.wdtk.datamodel.interfaces.TimeValue;",
                "-import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;",
                "-",
                " import com.google.refine.browsing.Engine;",
                "@@ -102,3 +100,3 @@ public class WikibaseSchemaTest extends RefineTest {",
                "         WikibaseSchema parsed = WikibaseSchema.reconstruct(serialized);",
                "-        TestUtils.isSerializedTo(parsed, TestingData.jsonFromFile(\"data/schema/history_of_medicine_normalized.json\").toString());",
                "+        TestUtils.isSerializedTo(parsed, TestingData.jsonFromFile(\"schema/history_of_medicine_normalized.json\").toString());",
                "     }"
            ],
            "changed_files": [
                "extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6a10765a8399dea3e632de6d352f72d8f5ac10bc",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544145899,
            "hunks": 3,
            "message": "Revert \"Temporary deserialization bug fix for extension operations\" This reverts commit 7ff4a453d369267c618cf32959e0f5afad404713.",
            "diff": [
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "index 3154b4fbc..218d331ac 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "@@ -77,24 +77,2 @@ public class PerformWikibaseEditsOperation extends EngineDependentOperation {",
                "     }",
                "-    ",
                "-    /* The constructor above should be enough for deserialization,",
                "-     * but for some unknown reason it can fail in certain cases",
                "-     * (might be due to caching deserializers across threads?)",
                "-     * ",
                "-     * So we sadly add a default constructor and a setter below.",
                "-     * ",
                "-     * TODO delete the default constructor and setter, make summary final",
                "-     */",
                "-    public PerformWikibaseEditsOperation() {",
                "-    \tsuper(null);",
                "-    }",
                "-    ",
                "-    @JsonProperty(\"engineConfig\")",
                "-    public void setEngineConfig(EngineConfig config) {",
                "-    \tthis._engineConfig = config;",
                "-    }",
                "-    ",
                "-    @JsonProperty(\"summary\")",
                "-    public void setSummary(String summary) {",
                "-    \tthis.summary = summary;",
                "-    }",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "index 0ab7fe934..3d7aa938c 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "@@ -48,3 +48,3 @@ public class SaveWikibaseSchemaOperation extends AbstractOperation {",
                "     @JsonProperty(\"schema\")",
                "-    protected WikibaseSchema _schema;",
                "+    final protected WikibaseSchema _schema;",
                "@@ -55,19 +55,3 @@ public class SaveWikibaseSchemaOperation extends AbstractOperation {",
                "         this._schema = schema;",
                "-    }",
                "-    ",
                "-    /* The constructor above should be enough for deserialization,",
                "-     * but for some unknown reason it can fail in certain cases",
                "-     * (might be due to caching deserializers across threads?)",
                "-     * ",
                "-     * So we sadly add a default constructor and a setter below.",
                "-     * ",
                "-     * TODO delete the default constructor and setter, make schema final",
                "-     */",
                "-    public SaveWikibaseSchemaOperation() {",
                "-    \t",
                "-    }",
                "-    ",
                "-    @JsonProperty(\"schema\")",
                "-    public void setSchema(WikibaseSchema schema) {",
                "-    \tthis._schema = schema;",
                "+",
                "     }"
            ],
            "changed_files": [
                "extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java, extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9c788769afe3968e43c88aa1a33e51c459a9351b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1539337350,
            "hunks": 11,
            "message": "Restore JSON property autodetect",
            "diff": [
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "index fefbb0f3f..48a54d470 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "@@ -38,2 +38,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "@@ -86,2 +87,3 @@ public class WikibaseSchema implements OverlayModel {",
                "      */",
                "+    @JsonIgnore",
                "     public String getBaseIri() {",
                "@@ -93,2 +95,3 @@ public class WikibaseSchema implements OverlayModel {",
                "      */",
                "+    @JsonIgnore",
                "     public List<WbItemDocumentExpr> getItemDocumentExpressions() {",
                "diff --git a/main/src/com/google/refine/browsing/Engine.java b/main/src/com/google/refine/browsing/Engine.java",
                "index 6ff493b1c..dd0249e3a 100644",
                "--- a/main/src/com/google/refine/browsing/Engine.java",
                "+++ b/main/src/com/google/refine/browsing/Engine.java",
                "@@ -70,2 +70,3 @@ public class Engine  {",
                "+    @JsonIgnore",
                "     protected Project _project;",
                "@@ -95,2 +96,3 @@ public class Engine  {",
                "+    @JsonIgnore",
                "     public FilteredRows getAllRows() {",
                "@@ -116,2 +118,3 @@ public class Engine  {",
                "+    @JsonIgnore",
                "     public FilteredRows getAllFilteredRows() {",
                "@@ -138,2 +141,3 @@ public class Engine  {",
                "+    @JsonIgnore",
                "     public FilteredRecords getAllRecords() {",
                "@@ -156,2 +160,3 @@ public class Engine  {",
                "+    @JsonIgnore",
                "     public FilteredRecords getFilteredRecords() {",
                "diff --git a/main/src/com/google/refine/importing/ImportingManager.java b/main/src/com/google/refine/importing/ImportingManager.java",
                "index 39792c34d..ec29caacd 100644",
                "--- a/main/src/com/google/refine/importing/ImportingManager.java",
                "+++ b/main/src/com/google/refine/importing/ImportingManager.java",
                "@@ -54,2 +54,3 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -70,2 +71,3 @@ public class ImportingManager {",
                "         final public String uiClass;",
                "+        @JsonIgnore",
                "         final public ImportingParser parser;",
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index 6b906ce17..06a605729 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -86,3 +86,3 @@ public class ParsingUtilities {",
                "         mapper.registerModule(module);",
                "-        mapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE);",
                "+       // mapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE);",
                "         mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);"
            ],
            "changed_files": [
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "main/src/com/google/refine/browsing/Engine.java",
                "main/src/com/google/refine/importing/ImportingManager.java",
                "main/src/com/google/refine/util/ParsingUtilities.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "790b1fbc6078a938a0759ac5fec3551361d014f0",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1539284131,
            "hunks": 11,
            "message": "Migrate wikidata extension out of JSONWriter",
            "diff": [
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java",
                "index 74f1cbdfd..c82bd4986 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java",
                "@@ -7,3 +7,5 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -23,7 +25,9 @@ public class CommandUtilities {",
                "         Writer w = response.getWriter();",
                "-        JSONWriter writer = new JSONWriter(w);",
                "-        writer.object();",
                "-        writer.key(\"code\"); writer.value(\"error\");",
                "-        writer.key(\"message\"); writer.value(errorMessage);",
                "-        writer.endObject();",
                "+        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "+        writer.writeStartObject();",
                "+        writer.writeStringField(\"code\", \"error\");",
                "+        writer.writeStringField(\"message\", errorMessage);",
                "+        writer.writeEndObject();",
                "+        writer.flush();",
                "+        writer.close();",
                "         w.flush();",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "index 951741ddf..289ce8962 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "@@ -26,3 +26,3 @@ package org.openrefine.wikidata.commands;",
                " import java.io.IOException;",
                "-import java.io.StringWriter;",
                "+import java.io.Writer;",
                "@@ -33,6 +33,8 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.openrefine.wikidata.editing.ConnectionManager;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " import com.google.refine.commands.Command;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -55,16 +57,18 @@ public class LoginCommand extends Command {",
                "-        StringWriter sb = new StringWriter(2048);",
                "-        JSONWriter writer = new JSONWriter(sb);",
                "+        Writer w = response.getWriter();",
                "+        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "         try {",
                "-            writer.object();",
                "-            writer.key(\"logged_in\");",
                "-            writer.value(manager.isLoggedIn());",
                "-            writer.key(\"username\");",
                "-            writer.value(manager.getUsername());",
                "-            writer.endObject();",
                "+            writer.writeStartObject();",
                "+            writer.writeBooleanField(\"logged_in\", manager.isLoggedIn());",
                "+            writer.writeStringField(\"username\", manager.getUsername());",
                "+            writer.writeEndObject();",
                "         } catch (JSONException e) {",
                "             logger.error(e.getMessage());",
                "+        } finally {",
                "+            writer.flush();",
                "+            writer.close();",
                "+            w.flush();",
                "+            w.close();",
                "         }",
                "-        respond(response, sb.toString());",
                "     }",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "index 99adcc54d..9ae696a7a 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "@@ -87,3 +87,3 @@ public class PerformWikibaseEditsOperation extends EngineDependentOperation {",
                "     protected String getBriefDescription(Project project) {",
                "-        return \"Peform Wikibase edits\";",
                "+        return \"Perform Wikibase edits\";",
                "     }"
            ],
            "changed_files": [
                "extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java",
                "extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java, extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java, extensions/wikidata/src/org/openrefine/wikidata/commands/CommandUtilities.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7ff4a453d369267c618cf32959e0f5afad404713",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543707488,
            "hunks": 3,
            "message": "Temporary deserialization bug fix for extension operations",
            "diff": [
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "index 218d331ac..3154b4fbc 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "@@ -77,2 +77,24 @@ public class PerformWikibaseEditsOperation extends EngineDependentOperation {",
                "     }",
                "+    ",
                "+    /* The constructor above should be enough for deserialization,",
                "+     * but for some unknown reason it can fail in certain cases",
                "+     * (might be due to caching deserializers across threads?)",
                "+     * ",
                "+     * So we sadly add a default constructor and a setter below.",
                "+     * ",
                "+     * TODO delete the default constructor and setter, make summary final",
                "+     */",
                "+    public PerformWikibaseEditsOperation() {",
                "+    \tsuper(null);",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"engineConfig\")",
                "+    public void setEngineConfig(EngineConfig config) {",
                "+    \tthis._engineConfig = config;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"summary\")",
                "+    public void setSummary(String summary) {",
                "+    \tthis.summary = summary;",
                "+    }",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "index 3d7aa938c..0ab7fe934 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "@@ -48,3 +48,3 @@ public class SaveWikibaseSchemaOperation extends AbstractOperation {",
                "     @JsonProperty(\"schema\")",
                "-    final protected WikibaseSchema _schema;",
                "+    protected WikibaseSchema _schema;",
                "@@ -55,3 +55,19 @@ public class SaveWikibaseSchemaOperation extends AbstractOperation {",
                "         this._schema = schema;",
                "-",
                "+    }",
                "+    ",
                "+    /* The constructor above should be enough for deserialization,",
                "+     * but for some unknown reason it can fail in certain cases",
                "+     * (might be due to caching deserializers across threads?)",
                "+     * ",
                "+     * So we sadly add a default constructor and a setter below.",
                "+     * ",
                "+     * TODO delete the default constructor and setter, make schema final",
                "+     */",
                "+    public SaveWikibaseSchemaOperation() {",
                "+    \t",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"schema\")",
                "+    public void setSchema(WikibaseSchema schema) {",
                "+    \tthis._schema = schema;",
                "     }"
            ],
            "changed_files": [
                "extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java, extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a4fa1dca77cf2cdc627aaedfb9fe2ae3f34d60ea",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542796093,
            "hunks": 50,
            "message": "Update Wikidata extension after removal of org.json from core",
            "diff": [
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java",
                "index 2dc44a39e..2470b9426 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java",
                "@@ -35,3 +35,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.openrefine.wikidata.operations.SaveWikibaseSchemaOperation;",
                "@@ -60,4 +59,3 @@ public class SaveWikibaseSchemaCommand extends Command {",
                "-            JSONObject json = ParsingUtilities.evaluateJsonStringToObject(jsonString);",
                "-            WikibaseSchema schema = WikibaseSchema.reconstruct(json);",
                "+            WikibaseSchema schema = ParsingUtilities.mapper.readValue(jsonString, WikibaseSchema.class);",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "index 9ae696a7a..218d331ac 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "@@ -33,3 +33,2 @@ import java.util.Random;",
                " import org.apache.commons.lang.Validate;",
                "-import org.json.JSONObject;",
                " import org.openrefine.wikidata.editing.ConnectionManager;",
                "@@ -46,2 +45,3 @@ import org.wikidata.wdtk.wikibaseapi.WikibaseDataFetcher;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -53,3 +53,2 @@ import com.google.refine.history.Change;",
                " import com.google.refine.history.HistoryEntry;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "@@ -67,3 +66,8 @@ public class PerformWikibaseEditsOperation extends EngineDependentOperation {",
                "-    public PerformWikibaseEditsOperation(EngineConfig engineConfig, String summary) {",
                "+    @JsonCreator",
                "+    public PerformWikibaseEditsOperation(",
                "+    \t\t@JsonProperty(\"engineConfig\")",
                "+    \t\tEngineConfig engineConfig,",
                "+    \t\t@JsonProperty(\"summary\")",
                "+    \t\tString summary) {",
                "         super(engineConfig);",
                "@@ -74,13 +78,2 @@ public class PerformWikibaseEditsOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj)",
                "-            throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        String summary = null;",
                "-        if (obj.has(\"summary\")) {",
                "-            summary = obj.getString(\"summary\");",
                "-        }",
                "-        return new PerformWikibaseEditsOperation(",
                "-                EngineConfig.reconstruct(engineConfig), summary);",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "index 13e043bd1..d5f39166d 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "@@ -33,2 +33,3 @@ import org.openrefine.wikidata.schema.WikibaseSchema;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -50,3 +51,6 @@ public class SaveWikibaseSchemaOperation extends AbstractOperation {",
                "-    public SaveWikibaseSchemaOperation(WikibaseSchema schema) {",
                "+    @JsonCreator",
                "+    public SaveWikibaseSchemaOperation(",
                "+    \t\t@JsonProperty(\"schema\")",
                "+    \t\tWikibaseSchema schema) {",
                "         this._schema = schema;",
                "@@ -55,7 +59,2 @@ public class SaveWikibaseSchemaOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj)",
                "-            throws Exception {",
                "-        return new SaveWikibaseSchemaOperation(WikibaseSchema.reconstruct(obj.getJSONObject(\"schema\")));",
                "-    }",
                "-",
                "     @Override",
                "@@ -125,5 +124,5 @@ public class SaveWikibaseSchemaOperation extends AbstractOperation {",
                "                 if (\"oldSchema\".equals(field) && value.length() > 0) {",
                "-                    oldSchema = WikibaseSchema.reconstruct(ParsingUtilities.evaluateJsonStringToObject(value));",
                "+                    oldSchema = ParsingUtilities.mapper.readValue(value, WikibaseSchema.class);",
                "                 } else if (\"newSchema\".equals(field) && value.length() > 0) {",
                "-                    newSchema = WikibaseSchema.reconstruct(ParsingUtilities.evaluateJsonStringToObject(value));",
                "+                    newSchema = ParsingUtilities.mapper.readValue(value, WikibaseSchema.class);",
                "                 }",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "index 48a54d470..83e61e2bb 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "@@ -51,2 +51,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.model.Row;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -184,22 +185,8 @@ public class WikibaseSchema implements OverlayModel {",
                "     }",
                "-",
                "-    static public WikibaseSchema reconstruct(JSONObject o)",
                "-            throws JSONException {",
                "-        return reconstruct(o.toString());",
                "-    }    ",
                "-    static public WikibaseSchema reconstruct(String json) throws JSONException {",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-        try {",
                "-            return mapper.readValue(json, WikibaseSchema.class);",
                "-        } catch (JsonParseException e) {",
                "-            throw new JSONException(e.toString());",
                "-        } catch (JsonMappingException e) {",
                "-            throw new JSONException(e.toString());",
                "-        } catch (IOException e) {",
                "-            throw new JSONException(e.toString());",
                "-        }",
                "+    static public WikibaseSchema reconstruct(String json) throws IOException {",
                "+    \treturn ParsingUtilities.mapper.readValue(json, WikibaseSchema.class);",
                "     }",
                "-    static public WikibaseSchema load(Project project, JSONObject obj)",
                "+    static public WikibaseSchema load(Project project, String obj)",
                "             throws Exception {",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java",
                "index 81596105e..483b9519a 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java",
                "@@ -33,7 +33,2 @@ import javax.servlet.ServletException;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.junit.Assert;",
                "-import org.openrefine.wikidata.testing.TestingData;",
                " import org.testng.annotations.BeforeMethod;",
                "@@ -41,2 +36,4 @@ import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -46,4 +43,3 @@ public class PreviewWikibaseSchemaCommandTest extends SchemaCommandTest {",
                "     @BeforeMethod",
                "-    public void SetUp()",
                "-            throws JSONException {",
                "+    public void SetUp() {",
                "         command = new PreviewWikibaseSchemaCommand();",
                "@@ -53,3 +49,3 @@ public class PreviewWikibaseSchemaCommandTest extends SchemaCommandTest {",
                "     public void testValidSchema()",
                "-            throws JSONException, IOException, ServletException {",
                "+            throws IOException, ServletException {",
                "         String schemaJson = jsonFromFile(\"schema/inception.json\").toString();",
                "@@ -59,5 +55,5 @@ public class PreviewWikibaseSchemaCommandTest extends SchemaCommandTest {",
                "-        JSONObject response = ParsingUtilities.evaluateJsonStringToObject(writer.toString());",
                "-        JSONArray edits = response.getJSONArray(\"edits_preview\");",
                "-        assertEquals(3, edits.length());",
                "+        ObjectNode response = ParsingUtilities.evaluateJsonStringToObjectNode(writer.toString());",
                "+        ArrayNode edits = (ArrayNode) response.get(\"edits_preview\");",
                "+        assertEquals(3, edits.size());",
                "     }",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java",
                "index e85f819c6..84e541d00 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java",
                "@@ -34,2 +34,4 @@ import org.testng.annotations.Test;",
                "+import com.google.refine.util.ParsingUtilities;",
                "+",
                " public abstract class SchemaCommandTest extends CommandTest {",
                "@@ -50,3 +52,3 @@ public abstract class SchemaCommandTest extends CommandTest {",
                "-        assertEquals(\"{\\\"code\\\":\\\"error\\\",\\\"message\\\":\\\"Wikibase schema could not be parsed.\\\"}\", writer.toString());",
                "+        assertEquals(\"error\", ParsingUtilities.mapper.readTree(writer.toString()).get(\"code\").asText());",
                "     }",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java",
                "index b5d56fbbd..7c04de840 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java",
                "@@ -33,4 +33,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.openrefine.wikidata.schema.WikibaseSchema;",
                "@@ -69,6 +67,6 @@ public class QuickStatementsExporterTest extends RefineTest {",
                "     public void testSimpleProject()",
                "-            throws JSONException, IOException {",
                "+            throws IOException {",
                "         Project project = this.createCSVProject(TestingData.inceptionWithNewCsv);",
                "         TestingData.reconcileInceptionCells(project);",
                "-        JSONObject serialized = TestingData.jsonFromFile(\"schema/inception.json\");",
                "+        String serialized = TestingData.jsonFromFile(\"schema/inception.json\");",
                "         WikibaseSchema schema = WikibaseSchema.reconstruct(serialized);",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java",
                "index a6969c0f0..6662ce0aa 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java",
                "@@ -34,4 +34,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                "-import org.openrefine.wikidata.testing.JacksonSerializationTest;",
                " import org.testng.annotations.BeforeMethod;",
                "@@ -71,3 +69,3 @@ public abstract class OperationTest extends RefineTest {",
                "-    public abstract JSONObject getJson()",
                "+    public abstract String getJson()",
                "             throws Exception;",
                "@@ -77,3 +75,3 @@ public abstract class OperationTest extends RefineTest {",
                "             throws Exception {",
                "-        JSONObject json = getJson();",
                "+        String json = getJson();",
                "         AbstractOperation op = reconstruct();",
                "@@ -81,3 +79,3 @@ public abstract class OperationTest extends RefineTest {",
                "         ParsingUtilities.defaultWriter.writeValue(writer, op);",
                "-        TestUtils.assertEqualAsJson(json.toString(), writer.toString());",
                "+        TestUtils.assertEqualAsJson(json, writer.toString());",
                "     }",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java",
                "index 828463780..7a0e10ab0 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java",
                "@@ -29,3 +29,2 @@ import java.io.LineNumberReader;",
                "-import org.json.JSONObject;",
                " import org.openrefine.wikidata.testing.TestingData;",
                "@@ -38,2 +37,3 @@ import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Recon;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -49,4 +49,3 @@ public class PerformWikibaseEditsOperationTest extends OperationTest {",
                "             throws Exception {",
                "-        JSONObject json = getJson();",
                "-        return PerformWikibaseEditsOperation.reconstruct(project, json);",
                "+        return ParsingUtilities.mapper.readValue(getJson(), PerformWikibaseEditsOperation.class);",
                "     }",
                "@@ -54,3 +53,3 @@ public class PerformWikibaseEditsOperationTest extends OperationTest {",
                "     @Override",
                "-    public JSONObject getJson()",
                "+    public String getJson()",
                "             throws Exception {",
                "@@ -61,3 +60,3 @@ public class PerformWikibaseEditsOperationTest extends OperationTest {",
                "     public void testConstructor() {",
                "-        new PerformWikibaseEditsOperation(EngineConfig.reconstruct(new JSONObject(\"{}\")), \"\");",
                "+        new PerformWikibaseEditsOperation(EngineConfig.reconstruct(\"{}\"), \"\");",
                "     }",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperationTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperationTest.java",
                "index 6c5e5db5a..8008cb282 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperationTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperationTest.java",
                "@@ -30,3 +30,2 @@ import java.io.LineNumberReader;",
                "-import org.json.JSONObject;",
                " import org.openrefine.wikidata.schema.WikibaseSchema;",
                "@@ -38,2 +37,3 @@ import com.google.refine.history.Change;",
                " import com.google.refine.model.AbstractOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -49,3 +49,3 @@ public class SaveWikibaseSchemaOperationTest extends OperationTest {",
                "             throws Exception {",
                "-        return SaveWikibaseSchemaOperation.reconstruct(project, getJson());",
                "+        return ParsingUtilities.mapper.readValue(getJson(), SaveWikibaseSchemaOperation.class);",
                "     }",
                "@@ -53,3 +53,3 @@ public class SaveWikibaseSchemaOperationTest extends OperationTest {",
                "     @Override",
                "-    public JSONObject getJson()",
                "+    public String getJson()",
                "             throws Exception {",
                "@@ -61,4 +61,4 @@ public class SaveWikibaseSchemaOperationTest extends OperationTest {",
                "             throws Exception {",
                "-        JSONObject schemaJson = TestingData.jsonFromFile(\"schema/inception.json\");",
                "-        String changeString = \"newSchema=\" + schemaJson.toString() + \"\\n\" + \"oldSchema=\\n\" + \"/ec/\";",
                "+        String schemaJson = TestingData.jsonFromFile(\"schema/inception.json\");",
                "+        String changeString = \"newSchema=\" + schemaJson + \"\\n\" + \"oldSchema=\\n\" + \"/ec/\";",
                "         WikibaseSchema schema = WikibaseSchema.reconstruct(schemaJson);",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java",
                "index 065136cb7..f342e4c73 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java",
                "@@ -33,4 +33,2 @@ import java.util.List;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.openrefine.wikidata.testing.TestingData;",
                "@@ -97,4 +95,4 @@ public class WikibaseSchemaTest extends RefineTest {",
                "     public void testSerialize()",
                "-            throws JSONException, IOException {",
                "-        JSONObject serialized = TestingData.jsonFromFile(\"schema/history_of_medicine.json\");",
                "+            throws IOException {",
                "+        String serialized = TestingData.jsonFromFile(\"schema/history_of_medicine.json\");",
                "         WikibaseSchema parsed = WikibaseSchema.reconstruct(serialized);",
                "@@ -105,6 +103,6 @@ public class WikibaseSchemaTest extends RefineTest {",
                "     public void testDeserialize()",
                "-            throws JSONException, IOException {",
                "+            throws IOException {",
                "         // this json file was generated by an earlier version of the software",
                "         // it contains extra \"type\" fields that are now ignored.",
                "-        JSONObject serialized = TestingData.jsonFromFile(\"schema/roarmap.json\");",
                "+        String serialized = TestingData.jsonFromFile(\"schema/roarmap.json\");",
                "         WikibaseSchema.reconstruct(serialized);",
                "@@ -114,4 +112,4 @@ public class WikibaseSchemaTest extends RefineTest {",
                "     public void testEvaluate()",
                "-            throws JSONException, IOException {",
                "-        JSONObject serialized = TestingData.jsonFromFile(\"schema/inception.json\");",
                "+            throws IOException {",
                "+        String serialized = TestingData.jsonFromFile(\"schema/inception.json\");",
                "         WikibaseSchema schema = WikibaseSchema.reconstruct(serialized);",
                "@@ -127,4 +125,4 @@ public class WikibaseSchemaTest extends RefineTest {",
                "-    @Test(expectedExceptions = JSONException.class)",
                "-    public void testDeserializeEmpty() throws JSONException {",
                "+    @Test(expectedExceptions = IOException.class)",
                "+    public void testDeserializeEmpty() throws IOException {",
                "         String schemaJson = \"{\\\"itemDocuments\\\":[{\\\"statementGroups\\\":[{\\\"statements\\\":[]}],\"",
                "@@ -136,7 +134,7 @@ public class WikibaseSchemaTest extends RefineTest {",
                "     public void testEvaluateRespectsFacets()",
                "-            throws JSONException, IOException {",
                "-        JSONObject serialized = TestingData.jsonFromFile(\"schema/inception.json\");",
                "+            throws IOException {",
                "+        String serialized = TestingData.jsonFromFile(\"schema/inception.json\");",
                "         WikibaseSchema schema = WikibaseSchema.reconstruct(serialized);",
                "         Engine engine = new Engine(project);",
                "-        EngineConfig engineConfig = EngineConfig.reconstruct(new JSONObject(\"{\\n\"",
                "+        EngineConfig engineConfig = EngineConfig.reconstruct(\"{\\n\"",
                "                 + \"      \\\"mode\\\": \\\"row-based\\\",\\n\" ",
                "@@ -153,3 +151,3 @@ public class WikibaseSchemaTest extends RefineTest {",
                "                 + \"      ]\\n\"",
                "-                + \"    }\"));",
                "+                + \"    }\");",
                "         engine.initializeFromConfig(engineConfig);",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java",
                "index efa25756f..d5bd18bc7 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java",
                "@@ -135,3 +135,3 @@ public class TestingData {",
                "-    public static JSONObject jsonFromFile(String filename)",
                "+    public static String jsonFromFile(String filename)",
                "             throws IOException, JSONException {",
                "@@ -139,3 +139,3 @@ public class TestingData {",
                "         String decoded = IOUtils.toString(f);",
                "-        return ParsingUtilities.evaluateJsonStringToObject(decoded);",
                "+        return decoded.trim();",
                "     }"
            ],
            "changed_files": [
                "extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java",
                "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperationTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/tests/src/org/openrefine/wikidata/testing/TestingData.java, extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WikibaseSchemaTest.java, extensions/wikidata/tests/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperationTest.java, extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/QuickStatementsExporterTest.java, extensions/wikidata/tests/src/org/openrefine/wikidata/commands/SchemaCommandTest.java, extensions/wikidata/tests/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommandTest.java, extensions/wikidata/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperation.java, extensions/wikidata/tests/src/org/openrefine/wikidata/operations/OperationTest.java, extensions/wikidata/tests/src/org/openrefine/wikidata/operations/PerformWikibaseEditsOperationTest.java, extensions/wikidata/src/org/openrefine/wikidata/commands/SaveWikibaseSchemaCommand.java, extensions/wikidata/src/org/openrefine/wikidata/operations/SaveWikibaseSchemaOperation.java, extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "49a89c301bf7d3d29f6959b7c83e4aadd45d2dfa",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543285693,
            "hunks": 7,
            "message": "Separate out PreviewResults from Wikidata extension",
            "diff": [
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewResults.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewResults.java",
                "new file mode 100644",
                "index 000000000..950b869fb",
                "--- /dev/null",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewResults.java",
                "@@ -0,0 +1,68 @@",
                "+package org.openrefine.wikidata.commands;",
                "+",
                "+import java.util.List;",
                "+",
                "+import org.openrefine.wikidata.qa.QAWarning;",
                "+import org.openrefine.wikidata.qa.QAWarning.Severity;",
                "+import org.openrefine.wikidata.updates.ItemUpdate;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.core.JsonProcessingException;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+",
                "+public class PreviewResults {",
                "+",
                "+    protected List<QAWarning> warnings;",
                "+    protected Severity maxSeverity;",
                "+    protected int nbWarnings;",
                "+    protected int editCount;",
                "+    protected List<ItemUpdate> editsPreview;",
                "+    ",
                "+    @JsonProperty(\"warnings\")",
                "+    public List<QAWarning> getWarnings() {",
                "+    \treturn warnings;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"max_severity\")",
                "+    public Severity getMaxSeverity() {",
                "+    \treturn maxSeverity;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"nb_warnings\")",
                "+    public int getNbWarnings() {",
                "+    \treturn nbWarnings;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"edit_count\")",
                "+    public int getEditCount() {",
                "+    \treturn editCount;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"edits_preview\")",
                "+    public List<ItemUpdate> getEditsPreview() {",
                "+    \treturn editsPreview;",
                "+    }",
                "+    ",
                "+    protected PreviewResults(",
                "+            List<QAWarning> warnings,",
                "+            Severity maxSeverity,",
                "+            int nbWarnings,",
                "+            int editCount,",
                "+            List<ItemUpdate> editsPreview) {",
                "+        this.warnings = warnings;",
                "+        this.maxSeverity = maxSeverity;",
                "+        this.nbWarnings = nbWarnings;",
                "+        this.editCount = editCount;",
                "+        this.editsPreview = editsPreview;",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String toString() {",
                "+    \ttry {",
                "+    \t\tObjectMapper mapper = new ObjectMapper();",
                "+\t\t\treturn mapper.writeValueAsString(this);",
                "+\t\t} catch (JsonProcessingException e) {",
                "+\t\t\treturn super.toString();",
                "+\t\t}",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "index 1750841db..70d9bd9af 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java",
                "@@ -37,4 +37,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.openrefine.wikidata.qa.EditInspector;",
                "-import org.openrefine.wikidata.qa.QAWarning;",
                "-import org.openrefine.wikidata.qa.QAWarning.Severity;",
                " import org.openrefine.wikidata.qa.QAWarningStore;",
                "@@ -44,7 +42,2 @@ import org.openrefine.wikidata.updates.scheduler.WikibaseAPIUpdateScheduler;",
                "-import com.fasterxml.jackson.databind.ObjectMapper;",
                "-import static org.openrefine.wikidata.commands.CommandUtilities.respondError;",
                "-",
                "-import com.fasterxml.jackson.annotation.JsonProperty;",
                "-",
                " import com.google.refine.browsing.Engine;",
                "@@ -52,2 +45,3 @@ import com.google.refine.commands.Command;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -55,28 +49,2 @@ public class PreviewWikibaseSchemaCommand extends Command {",
                "-    protected static class PreviewResults {",
                "-        @JsonProperty(\"warnings\")",
                "-        List<QAWarning> warnings;",
                "-        @JsonProperty(\"max_severity\")",
                "-        Severity maxSeverity;",
                "-        @JsonProperty(\"nb_warnings\")",
                "-        int nbWarnings;",
                "-        @JsonProperty(\"edit_count\")",
                "-        int editCount;",
                "-        @JsonProperty(\"edits_preview\")",
                "-        List<ItemUpdate> editsPreview;",
                "-        ",
                "-        protected PreviewResults(",
                "-                List<QAWarning> warnings,",
                "-                Severity maxSeverity,",
                "-                int nbWarnings,",
                "-                int editCount,",
                "-                List<ItemUpdate> editsPreview) {",
                "-            this.warnings = warnings;",
                "-            this.maxSeverity = maxSeverity;",
                "-            this.nbWarnings = nbWarnings;",
                "-            this.editCount = editCount;",
                "-            this.editsPreview = editsPreview;",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "@@ -128,3 +96,3 @@ public class PreviewWikibaseSchemaCommand extends Command {",
                "-            respondJSON(response, new PreviewResults(",
                "+            PreviewResults previewResults = new PreviewResults(",
                "                     warningStore.getWarnings(),",
                "@@ -132,3 +100,4 @@ public class PreviewWikibaseSchemaCommand extends Command {",
                "                     warningStore.getNbWarnings(),",
                "-                    nonNullEdits.size(), firstEdits));",
                "+                    nonNullEdits.size(), firstEdits);",
                "+            respondJSON(response, previewResults);",
                "         } catch (Exception e) {"
            ],
            "changed_files": [
                "extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewResults.java",
                "extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java, extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewResults.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f667a7865795821764f43114a4093b7e597ed9f0",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542881622,
            "hunks": 11,
            "message": "Migrate recent PRs to Jackson",
            "diff": [
                "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/exporters/SchemaExporter.java b/extensions/wikidata/src/org/openrefine/wikidata/exporters/SchemaExporter.java",
                "index 59698a3ef..57c8a5db0 100644",
                "--- a/extensions/wikidata/src/org/openrefine/wikidata/exporters/SchemaExporter.java",
                "+++ b/extensions/wikidata/src/org/openrefine/wikidata/exporters/SchemaExporter.java",
                "@@ -6,3 +6,2 @@ import java.util.Properties;",
                "-import org.json.JSONWriter;",
                " import org.openrefine.wikidata.schema.WikibaseSchema;",
                "@@ -12,2 +11,3 @@ import com.google.refine.exporters.WriterExporter;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -26,4 +26,3 @@ public class SchemaExporter implements WriterExporter {",
                "         }",
                "-        JSONWriter jsonWriter = new JSONWriter(writer);",
                "-        schema.write(jsonWriter, new Properties());",
                "+        ParsingUtilities.mapper.writeValue(writer, schema);",
                " \t}",
                "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java",
                "index 16d7740c1..ff875b914 100644",
                "--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java",
                "+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java",
                "@@ -2,4 +2,2 @@ package org.openrefine.wikidata.exporters;",
                "-import static org.openrefine.wikidata.testing.JacksonSerializationTest.assertJsonEquals;",
                "-",
                " import java.io.IOException;",
                "@@ -13,2 +11,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.tests.util.TestUtils;",
                "@@ -26,3 +25,3 @@ public class SchemaExporterTest extends RefineTest {",
                "         exporter.export(project, properties, engine, writer);",
                "-        assertJsonEquals(\"{\\\"itemDocuments\\\":[]}\", writer.toString());",
                "+        TestUtils.assertEqualAsJson(\"{\\\"itemDocuments\\\":[]}\", writer.toString());",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "index a9994954f..644f4ceff 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "@@ -97,3 +97,3 @@ public class ListFacetTests extends RefineTest {",
                "     @Test",
                "-    public void testSelectedEmptyChoice() {",
                "+    public void testSelectedEmptyChoice() throws IOException {",
                "     \tProject project = createCSVProject(\"Column A\\n\" + ",
                "@@ -104,4 +104,3 @@ public class ListFacetTests extends RefineTest {",
                "-    \tListFacetConfig facetConfig = new ListFacetConfig();",
                "-    \tfacetConfig.initializeFromJSON(new JSONObject(jsonConfig));",
                "+    \tListFacetConfig facetConfig = ParsingUtilities.mapper.readValue(jsonConfig, ListFacetConfig.class);",
                "     \tFacet facet = facetConfig.apply(project);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "index 6c08bd2eb..59d89768e 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "@@ -103,3 +103,3 @@ public class BlankDownTests extends RefineTest {",
                "     \tAbstractOperation op = new BlankDownOperation(",
                "-                EngineConfig.reconstruct(new JSONObject(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\")),",
                "+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),",
                "                 \"second\");",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "index f32b08ee3..96503609d 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "@@ -119,3 +119,3 @@ public class FillDownTests extends RefineTest {",
                "     \tAbstractOperation op = new FillDownOperation(",
                "-                EngineConfig.reconstruct(new JSONObject(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\")),",
                "+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),",
                "                 \"second\");",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "index a70bf75eb..a90c27651 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "@@ -275,4 +275,4 @@ public class ExtendDataOperationTests extends RefineTest {",
                "         // Test to be updated as countries change currencies!",
                "-        Assert.assertTrue(Math.round((float)project.rows.get(2).getCellValue(1)) == 2, \"Incorrect number of currencies returned for Tajikistan.\");",
                "-        Assert.assertTrue(Math.round((float)project.rows.get(3).getCellValue(1)) == 1, \"Incorrect number of currencies returned for United States.\");",
                "+        Assert.assertTrue(Math.round((double)project.rows.get(2).getCellValue(1)) == 2, \"Incorrect number of currencies returned for Tajikistan.\");",
                "+        Assert.assertTrue(Math.round((double)project.rows.get(3).getCellValue(1)) == 1, \"Incorrect number of currencies returned for United States.\");"
            ],
            "changed_files": [
                "extensions/wikidata/src/org/openrefine/wikidata/exporters/SchemaExporter.java",
                "extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: extensions/wikidata/src/org/openrefine/wikidata/exporters/SchemaExporter.java, extensions/wikidata/tests/src/org/openrefine/wikidata/exporters/SchemaExporterTest.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7ab00366fcb713db5d763c8c3bf3b60944ccb636",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544321704,
            "hunks": 7,
            "message": "Database extension logging cleanup",
            "diff": [
                "diff --git a/extensions/database/module/MOD-INF/controller.js b/extensions/database/module/MOD-INF/controller.js",
                "index 5df821fbf..b2b0d1e35 100644",
                "--- a/extensions/database/module/MOD-INF/controller.js",
                "+++ b/extensions/database/module/MOD-INF/controller.js",
                "@@ -50,3 +50,3 @@ function registerCommands() {",
                "-  logger.info(\"Registering Database Extension Commands......\");",
                "+  logger.trace(\"Registering Database Extension Commands......\");",
                "   var RS = Packages.com.google.refine.RefineServlet;",
                "@@ -57,3 +57,3 @@ function registerCommands() {",
                "   RS.registerCommand(module, \"test-query\", Packages.com.google.refine.extension.database.cmd.TestQueryCommand());",
                "-  logger.info(\"Database Extension Command Registeration done!!\");",
                "+  logger.trace(\"Database Extension Command Registeration done!!\");",
                " }",
                "@@ -61,3 +61,2 @@ function registerCommands() {",
                " function registerOperations() {",
                "-  logger.info(\"Database Operations Registered successfully...\");",
                " }",
                "@@ -65,3 +64,2 @@ function registerOperations() {",
                " function registerFunctions() {",
                "-  logger.info(\"Database Functions Registered successfully...\");",
                " }",
                "@@ -74,4 +72,4 @@ function init() {",
                "-  logger.info(\"Initializing OpenRefine Database...\");",
                "-  logger.info(\"Database Extension Mount point \" + module.getMountPoint());",
                "+  logger.trace(\"Initializing OpenRefine Database Extension...\");",
                "+  logger.trace(\"Database Extension Mount point \" + module.getMountPoint());",
                "@@ -136,4 +134,3 @@ function process(path, request, response) {",
                "-   logger.info('receiving request for ' + path);\t",
                "-   logger.info('receiving method for ' + method);\t",
                "+   logger.trace('receiving request for ' + path);\t",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java b/extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java",
                "index 3ac87a524..b40805238 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java",
                "@@ -68,3 +68,3 @@ public class DatabaseModuleImpl extends ButterflyModuleImpl {",
                "-        logger.info(\"*** Database Extension Module Initialization Completed!!***\");",
                "+        logger.trace(\"Database Extension module initialization completed\");",
                "     }"
            ],
            "changed_files": [
                "extensions/database/module/MOD-INF/controller.js",
                "extensions/database/src/com/google/refine/extension/database/DatabaseModuleImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: OpenRefine",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "6ef0577df46b15874f794bf4ae5d83eb3393a309",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544390233,
            "hunks": 26,
            "message": "Remove broker, not used anymore",
            "diff": [
                "diff --git a/broker/appengine/.externalToolBuilders/com.google.appengine.eclipse.core.projectValidator.launch b/broker/appengine/.externalToolBuilders/com.google.appengine.eclipse.core.projectValidator.launch",
                "deleted file mode 100644",
                "index 3a3b1b194..000000000",
                "--- a/broker/appengine/.externalToolBuilders/com.google.appengine.eclipse.core.projectValidator.launch",
                "+++ /dev/null",
                "@@ -1,7 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<launchConfiguration type=\"org.eclipse.ui.externaltools.ProgramBuilderLaunchConfigurationType\">",
                "-<booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_BUILDER_ENABLED\" value=\"false\"/>",
                "-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_DISABLED_BUILDER\" value=\"com.google.appengine.eclipse.core.projectValidator\"/>",
                "-<mapAttribute key=\"org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS\"/>",
                "-<booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED\" value=\"true\"/>",
                "-</launchConfiguration>",
                "diff --git a/broker/appengine/.externalToolBuilders/com.google.gdt.eclipse.core.webAppProjectValidator.launch b/broker/appengine/.externalToolBuilders/com.google.gdt.eclipse.core.webAppProjectValidator.launch",
                "deleted file mode 100644",
                "index eb4252719..000000000",
                "--- a/broker/appengine/.externalToolBuilders/com.google.gdt.eclipse.core.webAppProjectValidator.launch",
                "+++ /dev/null",
                "@@ -1,7 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<launchConfiguration type=\"org.eclipse.ui.externaltools.ProgramBuilderLaunchConfigurationType\">",
                "-<booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_BUILDER_ENABLED\" value=\"false\"/>",
                "-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_DISABLED_BUILDER\" value=\"com.google.gdt.eclipse.core.webAppProjectValidator\"/>",
                "-<mapAttribute key=\"org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS\"/>",
                "-<booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED\" value=\"true\"/>",
                "-</launchConfiguration>",
                "diff --git a/broker/appengine/.settings/com.google.appengine.eclipse.core.prefs b/broker/appengine/.settings/com.google.appengine.eclipse.core.prefs",
                "deleted file mode 100644",
                "index 03841005e..000000000",
                "--- a/broker/appengine/.settings/com.google.appengine.eclipse.core.prefs",
                "+++ /dev/null",
                "@@ -1,3 +0,0 @@",
                "-#Tue Aug 03 15:54:32 PDT 2010",
                "-eclipse.preferences.version=1",
                "-validationExclusions=src/com/google/refine/appengine/*ClientConnection*.java",
                "diff --git a/broker/appengine/.settings/com.google.gdt.eclipse.core.prefs b/broker/appengine/.settings/com.google.gdt.eclipse.core.prefs",
                "deleted file mode 100644",
                "index a060470b7..000000000",
                "--- a/broker/appengine/.settings/com.google.gdt.eclipse.core.prefs",
                "+++ /dev/null",
                "@@ -1,5 +0,0 @@",
                "-#Wed May 26 15:11:38 PDT 2010",
                "-eclipse.preferences.version=1",
                "-jarsExcludedFromWebInfLib=",
                "-warSrcDir=",
                "-warSrcDirIsOutput=true",
                "diff --git a/broker/appengine/.settings/org.eclipse.jdt.core.prefs b/broker/appengine/.settings/org.eclipse.jdt.core.prefs",
                "deleted file mode 100644",
                "index 4946c81bb..000000000",
                "--- a/broker/appengine/.settings/org.eclipse.jdt.core.prefs",
                "+++ /dev/null",
                "@@ -1,280 +0,0 @@",
                "-#Tue Aug 02 19:35:05 EDT 2011",
                "-eclipse.preferences.version=1",
                "-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled",
                "-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6",
                "-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve",
                "-org.eclipse.jdt.core.compiler.compliance=1.6",
                "-org.eclipse.jdt.core.compiler.debug.lineNumber=generate",
                "-org.eclipse.jdt.core.compiler.debug.localVariable=generate",
                "-org.eclipse.jdt.core.compiler.debug.sourceFile=generate",
                "-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error",
                "-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error",
                "-org.eclipse.jdt.core.compiler.source=1.6",
                "-org.eclipse.jdt.core.formatter.align_type_members_on_columns=false",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=0",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_assignment=0",
                "-org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_compact_if=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=80",
                "-org.eclipse.jdt.core.formatter.alignment_for_enum_constants=0",
                "-org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0",
                "-org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=33",
                "-org.eclipse.jdt.core.formatter.blank_lines_after_imports=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_after_package=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_field=0",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_imports=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_method=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_package=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1",
                "-org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false",
                "-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false",
                "-org.eclipse.jdt.core.formatter.comment.format_block_comments=true",
                "-org.eclipse.jdt.core.formatter.comment.format_header=false",
                "-org.eclipse.jdt.core.formatter.comment.format_html=true",
                "-org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true",
                "-org.eclipse.jdt.core.formatter.comment.format_line_comments=true",
                "-org.eclipse.jdt.core.formatter.comment.format_source_code=true",
                "-org.eclipse.jdt.core.formatter.comment.indent_parameter_description=true",
                "-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true",
                "-org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert",
                "-org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=insert",
                "-org.eclipse.jdt.core.formatter.comment.line_length=80",
                "-org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true",
                "-org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true",
                "-org.eclipse.jdt.core.formatter.compact_else_if=true",
                "-org.eclipse.jdt.core.formatter.continuation_indentation=2",
                "-org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2",
                "-org.eclipse.jdt.core.formatter.disabling_tag=@formatter\\:off",
                "-org.eclipse.jdt.core.formatter.enabling_tag=@formatter\\:on",
                "-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false",
                "-org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=true",
                "-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true",
                "-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true",
                "-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true",
                "-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true",
                "-org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true",
                "-org.eclipse.jdt.core.formatter.indent_empty_lines=false",
                "-org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true",
                "-org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true",
                "-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true",
                "-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=false",
                "-org.eclipse.jdt.core.formatter.indentation.size=8",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert",
                "-org.eclipse.jdt.core.formatter.join_lines_in_comments=true",
                "-org.eclipse.jdt.core.formatter.join_wrapped_lines=true",
                "-org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false",
                "-org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false",
                "-org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=true",
                "-org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false",
                "-org.eclipse.jdt.core.formatter.lineSplit=120",
                "-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false",
                "-org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=false",
                "-org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0",
                "-org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=1",
                "-org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true",
                "-org.eclipse.jdt.core.formatter.tabulation.char=space",
                "-org.eclipse.jdt.core.formatter.tabulation.size=4",
                "-org.eclipse.jdt.core.formatter.use_on_off_tags=true",
                "-org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false",
                "-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=true",
                "-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true",
                "diff --git a/broker/appengine/.settings/org.eclipse.jdt.ui.prefs b/broker/appengine/.settings/org.eclipse.jdt.ui.prefs",
                "deleted file mode 100644",
                "index b43532a49..000000000",
                "--- a/broker/appengine/.settings/org.eclipse.jdt.ui.prefs",
                "+++ /dev/null",
                "@@ -1,4 +0,0 @@",
                "-#Mon Sep 27 15:02:14 PDT 2010",
                "-eclipse.preferences.version=1",
                "-formatter_profile=_OpenRefine",
                "-formatter_settings_version=11",
                "diff --git a/broker/appengine/WEB-INF/appengine-web.xml b/broker/appengine/WEB-INF/appengine-web.xml",
                "deleted file mode 100644",
                "index 818840528..000000000",
                "--- a/broker/appengine/WEB-INF/appengine-web.xml",
                "+++ /dev/null",
                "@@ -1,9 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                "-<appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">",
                "-\t<application>$APPID</application>",
                "-\t<version>$VERSION</version>",
                "-\t",
                "-\t<system-properties>",
                "-\t\t<property name=\"java.util.logging.config.file\" value=\"WEB-INF/logging.properties\"/>",
                "-\t</system-properties>",
                "-</appengine-web-app>",
                "\\ No newline at end of file",
                "diff --git a/broker/appengine/WEB-INF/cron.xml b/broker/appengine/WEB-INF/cron.xml",
                "deleted file mode 100644",
                "index cabccce61..000000000",
                "--- a/broker/appengine/WEB-INF/cron.xml",
                "+++ /dev/null",
                "@@ -1,7 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<cronentries>",
                "-  <cron>",
                "-    <url>/expire_locks</url>",
                "-    <schedule>every 5 seconds synchronized</schedule>",
                "-  </cron>",
                "-</cronentries>",
                "\\ No newline at end of file",
                "diff --git a/broker/appengine/WEB-INF/jdoconfig.xml b/broker/appengine/WEB-INF/jdoconfig.xml",
                "deleted file mode 100644",
                "index f4d0e1834..000000000",
                "--- a/broker/appengine/WEB-INF/jdoconfig.xml",
                "+++ /dev/null",
                "@@ -1,16 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                "-<jdoconfig xmlns=\"http://java.sun.com/xml/ns/jdo/jdoconfig\"",
                "-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "-    xsi:schemaLocation=\"http://java.sun.com/xml/ns/jdo/jdoconfig http://java.sun.com/xml/ns/jdo/jdoconfig_3_0.xsd\">",
                "-",
                "-    <persistence-manager-factory name=\"transactional\">",
                "-        <property name=\"javax.jdo.PersistenceManagerFactoryClass\"",
                "-            value=\"org.datanucleus.store.appengine.jdo.DatastoreJDOPersistenceManagerFactory\"/>",
                "-        <property name=\"javax.jdo.option.ConnectionURL\" value=\"appengine\"/>",
                "-        <property name=\"javax.jdo.option.NontransactionalRead\" value=\"true\"/>",
                "-        <property name=\"javax.jdo.option.NontransactionalWrite\" value=\"false\"/>",
                "-        <property name=\"javax.jdo.option.RetainValues\" value=\"true\"/>",
                "-        <property name=\"datanucleus.appengine.autoCreateDatastoreTxns\" value=\"true\"/>",
                "-    </persistence-manager-factory>",
                "-",
                "-</jdoconfig>",
                "\\ No newline at end of file",
                "diff --git a/broker/appengine/WEB-INF/lib/slf4j-jdk14-1.5.6.jar b/broker/appengine/WEB-INF/lib/slf4j-jdk14-1.5.6.jar",
                "deleted file mode 100644",
                "index 1ce0a28e7..000000000",
                "Binary files a/broker/appengine/WEB-INF/lib/slf4j-jdk14-1.5.6.jar and /dev/null differ",
                "diff --git a/broker/appengine/WEB-INF/logging.properties b/broker/appengine/WEB-INF/logging.properties",
                "deleted file mode 100644",
                "index 7714de9fe..000000000",
                "--- a/broker/appengine/WEB-INF/logging.properties",
                "+++ /dev/null",
                "@@ -1,13 +0,0 @@",
                "-# A default java.util.logging configuration.",
                "-# (All App Engine logging is through java.util.logging by default).",
                "-#",
                "-# To use this configuration, copy it into your application's WEB-INF",
                "-# folder and add the following to your appengine-web.xml:",
                "-# ",
                "-# <system-properties>",
                "-#   <property name=\"java.util.logging.config.file\" value=\"WEB-INF/logging.properties\"/>",
                "-# </system-properties>",
                "-#",
                "-",
                "-# Set the default logging level for all loggers",
                "-.level = WARN",
                "diff --git a/broker/appengine/module/MOD-INF/module.properties b/broker/appengine/module/MOD-INF/module.properties",
                "deleted file mode 100644",
                "index 26230ac34..000000000",
                "--- a/broker/appengine/module/MOD-INF/module.properties",
                "+++ /dev/null",
                "@@ -1,4 +0,0 @@",
                "-name = broker",
                "-description = Google App Engine implementation of Refine Broker",
                "-module-impl = com.google.refine.broker.AppEngineRefineBrokerImpl",
                "-templating = false",
                "diff --git a/broker/appengine/src/com/google/refine/appengine/AppEngineClientConnection.java b/broker/appengine/src/com/google/refine/appengine/AppEngineClientConnection.java",
                "deleted file mode 100644",
                "index 5d69c0167..000000000",
                "--- a/broker/appengine/src/com/google/refine/appengine/AppEngineClientConnection.java",
                "+++ /dev/null",
                "@@ -1,276 +0,0 @@",
                "-/*",
                "-",
                "-Copyright 2010, Google Inc.",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are",
                "-met:",
                "-",
                "-    * Redistributions of source code must retain the above copyright",
                "-notice, this list of conditions and the following disclaimer.",
                "-    * Redistributions in binary form must reproduce the above",
                "-copyright notice, this list of conditions and the following disclaimer",
                "-in the documentation and/or other materials provided with the",
                "-distribution.",
                "-    * Neither the name of Google Inc. nor the names of its",
                "-contributors may be used to endorse or promote products derived from",
                "-this software without specific prior written permission.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
                "-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
                "-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
                "-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
                "-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           ",
                "-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           ",
                "-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
                "-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "-",
                "-*/",
                "-",
                "-package com.google.refine.appengine;",
                "-",
                "-import static com.google.appengine.api.urlfetch.FetchOptions.Builder.allowTruncate;",
                "-",
                "-import java.io.ByteArrayOutputStream;",
                "-import java.net.InetAddress;",
                "-import java.net.URL;",
                "-import java.util.concurrent.TimeUnit;",
                "-",
                "-import javax.net.ssl.SSLSession;",
                "-",
                "-import org.apache.http.Header;",
                "-import org.apache.http.HttpConnectionMetrics;",
                "-import org.apache.http.HttpHost;",
                "-import org.apache.http.HttpResponse;",
                "-import org.apache.http.ProtocolVersion;",
                "-import org.apache.http.conn.ManagedClientConnection;",
                "-import org.apache.http.conn.routing.HttpRoute;",
                "-import org.apache.http.entity.ByteArrayEntity;",
                "-import org.apache.http.message.BasicHttpResponse;",
                "-import org.apache.http.params.HttpParams;",
                "-import org.apache.http.protocol.HttpContext;",
                "-",
                "-import com.google.appengine.api.urlfetch.HTTPHeader;",
                "-import com.google.appengine.api.urlfetch.HTTPMethod;",
                "-import com.google.appengine.api.urlfetch.HTTPRequest;",
                "-import com.google.appengine.api.urlfetch.HTTPResponse;",
                "-import com.google.appengine.api.urlfetch.URLFetchService;",
                "-import com.google.appengine.api.urlfetch.URLFetchServiceFactory;",
                "-",
                "-class AppEngineClientConnection implements ManagedClientConnection {",
                "-    // Managed is the composition of ConnectionReleaseTrigger,",
                "-    //     HttpClientConnection, HttpConnection, HttpInetConnection",
                "-",
                "-    private HttpRoute _route;",
                "-    private Object _state;",
                "-    private boolean _reuseable;",
                "-",
                "-    public AppEngineClientConnection(HttpRoute route, Object state) {",
                "-        _route = route;",
                "-        _state = state;",
                "-    }",
                "-",
                "-    // ManagedClientConnection methods",
                "-",
                "-    public HttpRoute getRoute() {",
                "-        return _route;",
                "-    }",
                "-",
                "-    public Object getState() {",
                "-        return _state;",
                "-    }",
                "-",
                "-    public SSLSession getSSLSession() {",
                "-        return null;",
                "-    }",
                "-",
                "-    public boolean isSecure() {",
                "-        // XXX maybe parse the url to see if it's https?",
                "-        return false;",
                "-    }",
                "-",
                "-    public boolean isMarkedReusable() {",
                "-        return _reuseable;",
                "-    }",
                "-",
                "-    public void markReusable() {",
                "-        _reuseable = true;",
                "-    }",
                "-",
                "-    public void layerProtocol(HttpContext context, HttpParams params) {",
                "-        return;",
                "-    }",
                "-",
                "-    public void open(HttpRoute route, HttpContext context, HttpParams params) {",
                "-        return;",
                "-    }",
                "-",
                "-    public void setIdleDuration(long duration, TimeUnit unit) {",
                "-        return;",
                "-    }",
                "-",
                "-    public void setState(Object state) {",
                "-        _state = state;",
                "-    }",
                "-",
                "-    public void tunnelProxy(HttpHost next, boolean secure, HttpParams params) {",
                "-        return;",
                "-    }",
                "-",
                "-    public void tunnelTarget(boolean secure, HttpParams params) {",
                "-        return;",
                "-    }",
                "-",
                "-    public void unmarkReusable() {",
                "-        _reuseable = false;",
                "-    }",
                "-",
                "-",
                "-    // ConnectionReleaseTrigger methods",
                "-",
                "-    public void releaseConnection() {",
                "-        return;",
                "-    }",
                "-",
                "-    public void abortConnection() {",
                "-        return;",
                "-    }",
                "-",
                "-    // HttpClientConnection methods",
                "-",
                "-    private HTTPRequest _appengine_hrequest;",
                "-    private HTTPResponse _appengine_hresponse;",
                "-",
                "-    public void flush() {",
                "-        return;",
                "-    }",
                "-",
                "-    public boolean isResponseAvailable(int timeout) {",
                "-        // XXX possibly use Async fetcher",
                "-        return true;",
                "-    }",
                "-",
                "-    public void receiveResponseEntity(org.apache.http.HttpResponse apache_response) {",
                "-        byte[] data = _appengine_hresponse.getContent();",
                "-",
                "-        if (data != null) {",
                "-            apache_response.setEntity(new ByteArrayEntity(data));",
                "-        }",
                "-    }",
                "-",
                "-    public HttpResponse receiveResponseHeader() {",
                "-        URLFetchService ufs = URLFetchServiceFactory.getURLFetchService();",
                "-        try {",
                "-            _appengine_hresponse = ufs.fetch(_appengine_hrequest);",
                "-        } catch (java.io.IOException e) {",
                "-            throw new RuntimeException(e);",
                "-        }",
                "-",
                "-        org.apache.http.HttpResponse apache_response =",
                "-            new BasicHttpResponse(new ProtocolVersion(\"HTTP\", 1, 0),",
                "-                                  _appengine_hresponse.getResponseCode(),",
                "-                                  null);",
                "-",
                "-        for (HTTPHeader h : _appengine_hresponse.getHeaders()) {",
                "-            apache_response.addHeader(h.getName(), h.getValue());",
                "-        }",
                "-",
                "-        return apache_response;",
                "-    }",
                "-",
                "-    public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest request) {",
                "-        ByteArrayOutputStream os = new ByteArrayOutputStream();",
                "-",
                "-        org.apache.http.HttpEntity ent = request.getEntity();",
                "-        if (ent != null) {",
                "-            try {",
                "-                ent.writeTo(os);",
                "-            } catch (java.io.IOException e) {",
                "-                throw new RuntimeException(e);",
                "-            }",
                "-        }",
                "-",
                "-        _appengine_hrequest.setPayload(os.toByteArray());",
                "-    }",
                "-",
                "-    public void sendRequestHeader(org.apache.http.HttpRequest apache_request) {",
                "-        URL request_url;",
                "-",
                "-        HttpHost host = _route.getTargetHost();",
                "-",
                "-        String protocol = host.getSchemeName();",
                "-        String addr = host.getHostName();",
                "-        int port = host.getPort();",
                "-",
                "-        String path = apache_request.getRequestLine().getUri();",
                "-",
                "-        try {",
                "-            request_url = new URL(protocol, addr, port, path);",
                "-        } catch (java.net.MalformedURLException e) {",
                "-            throw new RuntimeException(e);",
                "-        }",
                "-",
                "-        HTTPMethod method = HTTPMethod.valueOf(apache_request.getRequestLine().getMethod());",
                "-        _appengine_hrequest = new HTTPRequest(request_url, method, allowTruncate()",
                "-                                              .doNotFollowRedirects());",
                "-",
                "-        Header[] apache_headers = apache_request.getAllHeaders();",
                "-        for (int i = 0; i < apache_headers.length; i++) {",
                "-            Header h = apache_headers[i];",
                "-            _appengine_hrequest",
                "-                .setHeader(new HTTPHeader(h.getName(), h.getValue()));",
                "-        }",
                "-    }",
                "-",
                "-    // HttpConnection methods",
                "-",
                "-    public void close() {",
                "-        return;",
                "-    }",
                "-",
                "-    public HttpConnectionMetrics getMetrics() {",
                "-        return null;",
                "-    }",
                "-",
                "-    public int getSocketTimeout()  {",
                "-        return -1;",
                "-    }",
                "-",
                "-    public boolean isOpen() {",
                "-        return true;",
                "-    }",
                "-",
                "-    public boolean isStale() {",
                "-        return false;",
                "-    }",
                "-",
                "-    public void setSocketTimeout(int timeout) {",
                "-        return;",
                "-    }",
                "-",
                "-    public void shutdown() {",
                "-        return;",
                "-    }",
                "-",
                "-    // HttpInetConnection methods",
                "-",
                "-    public InetAddress getLocalAddress() {",
                "-        return null;",
                "-    }",
                "-           ",
                "-    public int getLocalPort() {",
                "-        return -1;",
                "-    }",
                "-           ",
                "-    public InetAddress getRemoteAddress() {",
                "-        return null;",
                "-    }",
                "-           ",
                "-    public int getRemotePort() {",
                "-        return -1;",
                "-    }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/broker/appengine/src/com/google/refine/appengine/AppEngineClientConnectionManager.java b/broker/appengine/src/com/google/refine/appengine/AppEngineClientConnectionManager.java",
                "deleted file mode 100644",
                "index 11ad27029..000000000",
                "--- a/broker/appengine/src/com/google/refine/appengine/AppEngineClientConnectionManager.java",
                "+++ /dev/null",
                "@@ -1,109 +0,0 @@",
                "-/*",
                "-",
                "-Copyright 2010, Google Inc.",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are",
                "-met:",
                "-",
                "-    * Redistributions of source code must retain the above copyright",
                "-notice, this list of conditions and the following disclaimer.",
                "-    * Redistributions in binary form must reproduce the above",
                "-copyright notice, this list of conditions and the following disclaimer",
                "-in the documentation and/or other materials provided with the",
                "-distribution.",
                "-    * Neither the name of Google Inc. nor the names of its",
                "-contributors may be used to endorse or promote products derived from",
                "-this software without specific prior written permission.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
                "-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
                "-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
                "-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
                "-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           ",
                "-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           ",
                "-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
                "-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "-",
                "-*/",
                "-",
                "-package com.google.refine.appengine;",
                "-",
                "-import java.net.InetAddress;",
                "-import java.net.Socket;",
                "-import java.util.concurrent.TimeUnit;",
                "-",
                "-import org.apache.http.conn.ClientConnectionManager;",
                "-import org.apache.http.conn.ClientConnectionRequest;",
                "-import org.apache.http.conn.ManagedClientConnection;",
                "-import org.apache.http.conn.routing.HttpRoute;",
                "-import org.apache.http.conn.scheme.Scheme;",
                "-import org.apache.http.conn.scheme.SchemeRegistry;",
                "-import org.apache.http.conn.scheme.SocketFactory;",
                "-import org.apache.http.params.HttpParams;",
                "-",
                "-public class AppEngineClientConnectionManager implements ClientConnectionManager {",
                "-",
                "-    private SchemeRegistry schemes;",
                "-",
                "-    class NoopSocketFactory implements SocketFactory {",
                "-        public Socket connectSocket(Socket sock, String host, int port, InetAddress addr, int lport, HttpParams params) {",
                "-            return null;",
                "-        }",
                "-",
                "-        public Socket createSocket() {",
                "-            return null;",
                "-        }",
                "-",
                "-        public boolean isSecure(Socket sock) {",
                "-            return false;",
                "-        }",
                "-    }",
                "-",
                "-    public AppEngineClientConnectionManager() {",
                "-        SocketFactory noop_sf = new NoopSocketFactory();",
                "-        schemes = new SchemeRegistry();",
                "-        schemes.register(new Scheme(\"http\",  noop_sf, 80));",
                "-        schemes.register(new Scheme(\"https\", noop_sf, 443));",
                "-    }",
                "-",
                "-    public void closeExpiredConnections() {",
                "-        return;",
                "-    }",
                "-",
                "-    public void closeIdleConnections(long idletime, TimeUnit tunit) {",
                "-        return;",
                "-    }",
                "-",
                "-    public ManagedClientConnection getConnection(HttpRoute route, Object state) {",
                "-        return new AppEngineClientConnection(route, state);",
                "-    }",
                "-",
                "-    public SchemeRegistry getSchemeRegistry() {",
                "-        return schemes;",
                "-    }",
                "-",
                "-    public void releaseConnection(ManagedClientConnection conn, long valid, TimeUnit tuint) {",
                "-        return;",
                "-    }",
                "-",
                "-    public ClientConnectionRequest requestConnection(final HttpRoute route, final Object state) {",
                "-        return new ClientConnectionRequest() {",
                "-            public void abortRequest() {",
                "-                return;",
                "-            }",
                "-",
                "-            public ManagedClientConnection getConnection(long idletime, TimeUnit tunit) {",
                "-                return AppEngineClientConnectionManager.this.getConnection(route, state);",
                "-            }",
                "-        };",
                "-    }",
                "-",
                "-    public void shutdown() {",
                "-        return;",
                "-    }",
                "-}",
                "diff --git a/broker/appengine/src/com/google/refine/broker/AppEngineRefineBrokerImpl.java b/broker/appengine/src/com/google/refine/broker/AppEngineRefineBrokerImpl.java",
                "deleted file mode 100644",
                "index 79e1e3802..000000000",
                "--- a/broker/appengine/src/com/google/refine/broker/AppEngineRefineBrokerImpl.java",
                "+++ /dev/null",
                "@@ -1,406 +0,0 @@",
                "-/*",
                "-",
                "-Copyright 2010, Google Inc.",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are",
                "-met:",
                "-",
                "-    * Redistributions of source code must retain the above copyright",
                "-notice, this list of conditions and the following disclaimer.",
                "-    * Redistributions in binary form must reproduce the above",
                "-copyright notice, this list of conditions and the following disclaimer",
                "-in the documentation and/or other materials provided with the",
                "-distribution.",
                "-    * Neither the name of Google Inc. nor the names of its",
                "-contributors may be used to endorse or promote products derived from",
                "-this software without specific prior written permission.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
                "-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
                "-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
                "-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
                "-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           ",
                "-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           ",
                "-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
                "-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "-",
                "-*/",
                "-",
                "-package com.google.refine.broker;",
                "-",
                "-import java.io.Writer;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-",
                "-import javax.jdo.Extent;",
                "-import javax.jdo.JDOHelper;",
                "-import javax.jdo.PersistenceManager;",
                "-import javax.jdo.PersistenceManagerFactory;",
                "-import javax.jdo.Transaction;",
                "-import javax.jdo.annotations.IdGeneratorStrategy;",
                "-import javax.jdo.annotations.PersistenceCapable;",
                "-import javax.jdo.annotations.Persistent;",
                "-import javax.jdo.annotations.PrimaryKey;",
                "-import javax.servlet.ServletConfig;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                "-import org.apache.http.client.HttpClient;",
                "-import org.apache.http.conn.ClientConnectionManager;",
                "-import org.apache.http.impl.client.DefaultHttpClient;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                "-import com.google.appengine.api.datastore.Text;",
                "-import com.google.refine.appengine.AppEngineClientConnectionManager;",
                "-import com.google.refine.broker.RefineBroker;",
                "-",
                "-public class AppEngineRefineBrokerImpl extends RefineBroker {",
                "-                ",
                "-    protected static final Logger logger = LoggerFactory.getLogger(\"refine.broker.appengine\");",
                "-    ",
                "-    PersistenceManagerFactory pmfInstance;",
                "-    ",
                "-    @Override",
                "-    public void init(ServletConfig config) throws Exception {",
                "-        super.init(config);",
                "-        ",
                "-        pmfInstance = JDOHelper.getPersistenceManagerFactory(\"transactional\");",
                "-    }",
                "-    ",
                "-    @Override",
                "-    public void destroy() throws Exception {",
                "-    }",
                "-",
                "-    // ---------------------------------------------------------------------------------",
                "-",
                "-    protected HttpClient getHttpClient() {",
                "-        ClientConnectionManager cm = new AppEngineClientConnectionManager();",
                "-        return new DefaultHttpClient(cm, null);",
                "-    }",
                "-    ",
                "-    // ---------------------------------------------------------------------------------",
                "-    ",
                "-    protected void expire(HttpServletResponse response) throws Exception {",
                "-        // TODO: implement",
                "-    }",
                "-",
                "-    protected void startProject(HttpServletResponse response, String pid, String uid, String lock, byte[] data, String metadata, List<String> transformations) throws Exception {",
                "-        // TODO: implement",
                "-    }",
                "-    ",
                "-    protected void expireLocks(HttpServletResponse response) throws Exception {",
                "-        ",
                "-        PersistenceManager pm = pmfInstance.getPersistenceManager();",
                "-        ",
                "-        try {",
                "-            Extent<Lock> extent = pm.getExtent(Lock.class, false);",
                "-",
                "-            try {",
                "-                for (Lock lock : extent) {",
                "-                    if (lock.timestamp + LOCK_DURATION < System.currentTimeMillis()) {",
                "-                        Transaction tx = pm.currentTransaction();",
                "-                        try {",
                "-                            tx.begin();",
                "-                            pm.deletePersistent(lock);",
                "-                            tx.commit();",
                "-                        } finally {",
                "-                            if (tx.isActive()) {",
                "-                                tx.rollback();",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                }",
                "-            } finally {",
                "-                extent.closeAll();                ",
                "-            }            ",
                "-            ",
                "-            respond(response, OK);",
                "-            ",
                "-        } finally {",
                "-            pm.close();",
                "-        }",
                "-    }",
                "-    ",
                "-    protected void getState(HttpServletResponse response, String pid, String uid, int rev) throws Exception {",
                "-        PersistenceManager pm = pmfInstance.getPersistenceManager();",
                "-        ",
                "-        try {",
                "-            // TODO: implement",
                "-            respond(response, lockToJSON(getLock(pm,pid)));",
                "-        } finally {",
                "-            pm.close();",
                "-        }",
                "-    }",
                "-",
                "-    protected void obtainLock(HttpServletResponse response, String pid, String uid, int locktype, String lockvalue) throws Exception {",
                "-        PersistenceManager pm = pmfInstance.getPersistenceManager();",
                "-        ",
                "-        // TODO: implement",
                "-        ",
                "-        try {",
                "-            Lock lock = getLock(pm, pid);",
                "-            if (lock == null) {",
                "-                Transaction tx = pm.currentTransaction();",
                "-                ",
                "-                try {",
                "-                    tx.begin();",
                "-                    lock = new Lock(Long.toHexString(tx.hashCode()), pid, uid);",
                "-                    pm.makePersistent(lock);",
                "-                    tx.commit();",
                "-                } finally {",
                "-                    if (tx.isActive()) {",
                "-                        tx.rollback();",
                "-                    }",
                "-                }",
                "-            }",
                "-            ",
                "-            respond(response, lockToJSON(lock));",
                "-            ",
                "-        } finally {",
                "-            pm.close();",
                "-        }",
                "-    }",
                "-    ",
                "-    protected void releaseLock(HttpServletResponse response, String pid, String uid, String lid) throws Exception {",
                "-",
                "-        PersistenceManager pm = pmfInstance.getPersistenceManager();",
                "-        ",
                "-        try {",
                "-            Lock lock = getLock(pm, pid);",
                "-            if (lock != null) {",
                "-                if (!lock.id.equals(lid)) {",
                "-                    throw new RuntimeException(\"Lock id doesn't match, can't release the lock\");",
                "-                }",
                "-                if (!lock.uid.equals(uid)) {",
                "-                    throw new RuntimeException(\"User id doesn't match the lock owner, can't release the lock\");",
                "-                }",
                "-",
                "-                Transaction tx = pm.currentTransaction();",
                "-                ",
                "-                try {",
                "-                    tx.begin();",
                "-                    pm.deletePersistent(lock);",
                "-                    tx.commit();",
                "-                } finally {",
                "-                    if (tx.isActive()) {",
                "-                        tx.rollback();",
                "-                    }",
                "-                }",
                "-            }",
                "-            ",
                "-            respond(response, OK);",
                "-            ",
                "-        } finally {",
                "-            pm.close();",
                "-        }",
                "-    }",
                "-    ",
                "-    // ----------------------------------------------------------------------------------------------------",
                "-    ",
                "-    protected void startProject(HttpServletResponse response, String pid, String uid, String lid, String data) throws Exception {",
                "-        PersistenceManager pm = pmfInstance.getPersistenceManager();",
                "-        ",
                "-        try {",
                "-            checkLock(pm, pid, uid, lid);",
                "-            ",
                "-            Project project = getProject(pm, pid);",
                "-            ",
                "-            if (project != null) {",
                "-                throw new RuntimeException(\"Project '\" + pid + \"' already exists\");",
                "-            }",
                "-            ",
                "-            Transaction tx = pm.currentTransaction();",
                "-            ",
                "-            try {",
                "-                tx.begin();",
                "-                project = new Project(pid, data);",
                "-                pm.makePersistent(project);",
                "-                tx.commit();",
                "-            } finally {",
                "-                if (tx.isActive()) {",
                "-                    tx.rollback();",
                "-                }",
                "-            }",
                "-            ",
                "-            respond(response, OK);",
                "-        } finally {",
                "-            pm.close();",
                "-        }",
                "-    }",
                "-",
                "-    protected void addTransformations(HttpServletResponse response, String pid, String uid, String lid, List<String> transformations) throws Exception {",
                "-        PersistenceManager pm = pmfInstance.getPersistenceManager();",
                "-        ",
                "-        try {",
                "-            checkLock(pm, pid, uid, lid);",
                "-",
                "-            Project project = getProject(pm, pid);",
                "-            ",
                "-            if (project == null) {",
                "-                throw new RuntimeException(\"Project '\" + pid + \"' not found\");",
                "-            }",
                "-",
                "-            Transaction tx = pm.currentTransaction();",
                "-",
                "-            try {",
                "-                for (String s : transformations) {",
                "-                    project.transformations.add(new Text(s));",
                "-                }",
                "-                tx.commit();",
                "-            } finally {",
                "-                if (tx.isActive()) {",
                "-                    tx.rollback();",
                "-                }",
                "-            }",
                "-            ",
                "-            respond(response, OK);",
                "-        } finally {",
                "-            pm.close();",
                "-        }",
                "-    }",
                "-",
                "-    // ---------------------------------------------------------------------------------",
                "-    ",
                "-    protected void openProject(HttpServletResponse response, String pid) throws Exception {",
                "-        PersistenceManager pm = pmfInstance.getPersistenceManager();",
                "-        ",
                "-        try {",
                "-            Project project = getProject(pm, pid);",
                "-",
                "-            Writer w = response.getWriter();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "-            writer.object();",
                "-                writer.key(\"data\"); writer.value(project.data.toString());",
                "-                writer.key(\"transformations\"); ",
                "-                writer.array();",
                "-                    for (Text s : project.transformations) {",
                "-                        writer.value(s.toString());",
                "-                    }",
                "-                writer.endArray();",
                "-            writer.endObject();",
                "-            w.flush();",
                "-            w.close();",
                "-        } finally {",
                "-            pm.close();",
                "-        }",
                "-    }",
                "-    ",
                "-    protected void getHistory(HttpServletResponse response, String pid, int tindex) throws Exception {",
                "-        PersistenceManager pm = pmfInstance.getPersistenceManager();",
                "-        ",
                "-        try {",
                "-            Project project = getProject(pm, pid);",
                "-",
                "-            Writer w = response.getWriter();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "-            writer.object();",
                "-            writer.key(\"transformations\"); ",
                "-            writer.array();",
                "-                int size = project.transformations.size();",
                "-                for (int i = tindex; i < size; i++) {",
                "-                    writer.value(project.transformations.get(i).toString());",
                "-                }",
                "-            writer.endArray();",
                "-            writer.endObject();",
                "-            w.flush();",
                "-            w.close();",
                "-        } finally {",
                "-            pm.close();",
                "-        }",
                "-    }",
                "-    ",
                "-    // ---------------------------------------------------------------------------------",
                "-    ",
                "-    Project getProject(PersistenceManager pm, String pid) {",
                "-        Project project = pm.getObjectById(Project.class, pid);",
                "-        if (project == null) {",
                "-            throw new RuntimeException(\"Project '\" + pid + \"' is not managed by this broker\");",
                "-        }",
                "-        return project;",
                "-    }",
                "-        ",
                "-    @PersistenceCapable    ",
                "-    static class Project {",
                "-        ",
                "-        @PrimaryKey",
                "-        @Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)",
                "-        String pid;",
                "-",
                "-        @Persistent",
                "-        List<Text> transformations = new ArrayList<Text>(); ",
                "-",
                "-        @Persistent",
                "-        Text data;",
                "-",
                "-        Project(String pid, String data) {",
                "-            this.pid = pid;",
                "-            this.data = new Text(data);",
                "-        }",
                "-    }",
                "-",
                "-    // ---------------------------------------------------------------------------------",
                "-    ",
                "-    Lock getLock(PersistenceManager pm, String pid) {",
                "-        return pm.getObjectById(Lock.class, pid);",
                "-    }",
                "-",
                "-    void checkLock(PersistenceManager pm, String pid, String uid, String lid) {",
                "-        Lock lock = getLock(pm, pid);",
                "-    ",
                "-        if (lock == null) {",
                "-            throw new RuntimeException(\"No lock was found with the given Lock id '\" + lid + \"', you have to have a valid lock on a project in order to start it\");",
                "-        }",
                "-        ",
                "-        if (!lock.pid.equals(pid)) {",
                "-            throw new RuntimeException(\"Lock '\" + lid + \"' is for another project: \" + pid);",
                "-        }",
                "-        ",
                "-        if (!lock.uid.equals(uid)) {",
                "-            throw new RuntimeException(\"Lock '\" + lid + \"' is owned by another user: \" + uid);",
                "-        }",
                "-    }",
                "-    ",
                "-    JSONObject lockToJSON(Lock lock) throws JSONException {",
                "-        JSONObject o = new JSONObject();",
                "-        if (lock != null) {",
                "-            o.put(\"lock_id\", lock.id);",
                "-            o.put(\"project_id\", lock.pid);",
                "-            o.put(\"user_id\", lock.uid);",
                "-            o.put(\"timestamp\", lock.timestamp);",
                "-        }",
                "-        return o;",
                "-    }",
                "-    ",
                "-    @PersistenceCapable    ",
                "-    static class Lock {",
                "-",
                "-        @Persistent",
                "-        String id;",
                "-        ",
                "-        @PrimaryKey",
                "-        @Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)",
                "-        String pid;",
                "-        ",
                "-        @Persistent",
                "-        String uid;",
                "-        ",
                "-        @Persistent",
                "-        long timestamp;",
                "-        ",
                "-        Lock(String id, String pid, String uid) {",
                "-            this.id = id;",
                "-            this.pid = pid;",
                "-            this.uid = uid;",
                "-            this.timestamp = System.currentTimeMillis();",
                "-        }",
                "-    }",
                "-    ",
                "-}",
                "diff --git a/broker/core/.settings/org.eclipse.jdt.core.prefs b/broker/core/.settings/org.eclipse.jdt.core.prefs",
                "deleted file mode 100644",
                "index 76f5cd98a..000000000",
                "--- a/broker/core/.settings/org.eclipse.jdt.core.prefs",
                "+++ /dev/null",
                "@@ -1,280 +0,0 @@",
                "-#Thu Aug 11 15:13:10 EDT 2011",
                "-eclipse.preferences.version=1",
                "-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled",
                "-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6",
                "-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve",
                "-org.eclipse.jdt.core.compiler.compliance=1.6",
                "-org.eclipse.jdt.core.compiler.debug.lineNumber=generate",
                "-org.eclipse.jdt.core.compiler.debug.localVariable=generate",
                "-org.eclipse.jdt.core.compiler.debug.sourceFile=generate",
                "-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error",
                "-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error",
                "-org.eclipse.jdt.core.compiler.source=1.6",
                "-org.eclipse.jdt.core.formatter.align_type_members_on_columns=false",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=0",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_assignment=0",
                "-org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_compact_if=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=80",
                "-org.eclipse.jdt.core.formatter.alignment_for_enum_constants=0",
                "-org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0",
                "-org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16",
                "-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=33",
                "-org.eclipse.jdt.core.formatter.blank_lines_after_imports=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_after_package=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_field=0",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_imports=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_method=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_before_package=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1",
                "-org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1",
                "-org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line",
                "-org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line",
                "-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false",
                "-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false",
                "-org.eclipse.jdt.core.formatter.comment.format_block_comments=true",
                "-org.eclipse.jdt.core.formatter.comment.format_header=false",
                "-org.eclipse.jdt.core.formatter.comment.format_html=true",
                "-org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true",
                "-org.eclipse.jdt.core.formatter.comment.format_line_comments=true",
                "-org.eclipse.jdt.core.formatter.comment.format_source_code=true",
                "-org.eclipse.jdt.core.formatter.comment.indent_parameter_description=true",
                "-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true",
                "-org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert",
                "-org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=insert",
                "-org.eclipse.jdt.core.formatter.comment.line_length=80",
                "-org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true",
                "-org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true",
                "-org.eclipse.jdt.core.formatter.compact_else_if=true",
                "-org.eclipse.jdt.core.formatter.continuation_indentation=2",
                "-org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2",
                "-org.eclipse.jdt.core.formatter.disabling_tag=@formatter\\:off",
                "-org.eclipse.jdt.core.formatter.enabling_tag=@formatter\\:on",
                "-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false",
                "-org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=true",
                "-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true",
                "-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true",
                "-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true",
                "-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true",
                "-org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true",
                "-org.eclipse.jdt.core.formatter.indent_empty_lines=false",
                "-org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true",
                "-org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true",
                "-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true",
                "-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=false",
                "-org.eclipse.jdt.core.formatter.indentation.size=8",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert",
                "-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert",
                "-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert",
                "-org.eclipse.jdt.core.formatter.join_lines_in_comments=true",
                "-org.eclipse.jdt.core.formatter.join_wrapped_lines=true",
                "-org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false",
                "-org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false",
                "-org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=true",
                "-org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false",
                "-org.eclipse.jdt.core.formatter.lineSplit=120",
                "-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false",
                "-org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=false",
                "-org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0",
                "-org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=1",
                "-org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true",
                "-org.eclipse.jdt.core.formatter.tabulation.char=space",
                "-org.eclipse.jdt.core.formatter.tabulation.size=4",
                "-org.eclipse.jdt.core.formatter.use_on_off_tags=true",
                "-org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false",
                "-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=true",
                "-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true",
                "diff --git a/broker/core/.settings/org.eclipse.jdt.ui.prefs b/broker/core/.settings/org.eclipse.jdt.ui.prefs",
                "deleted file mode 100644",
                "index 0c9f02d0d..000000000",
                "--- a/broker/core/.settings/org.eclipse.jdt.ui.prefs",
                "+++ /dev/null",
                "@@ -1,4 +0,0 @@",
                "-#Mon Sep 27 15:02:27 PDT 2010",
                "-eclipse.preferences.version=1",
                "-formatter_profile=_OpenRefine",
                "-formatter_settings_version=11",
                "diff --git a/broker/core/IDEs/eclipse/RefineBrokerTests.launch b/broker/core/IDEs/eclipse/RefineBrokerTests.launch",
                "deleted file mode 100644",
                "index 2d43e73a3..000000000",
                "--- a/broker/core/IDEs/eclipse/RefineBrokerTests.launch",
                "+++ /dev/null",
                "@@ -1,26 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<launchConfiguration type=\"org.testng.eclipse.launchconfig\">",
                "-<booleanAttribute key=\"com.mountainminds.eclemma.core.INPLACE_INSTRUMENTATION\" value=\"false\"/>",
                "-<listAttribute key=\"com.mountainminds.eclemma.core.INSTRUMENTATION_PATHS\">",
                "-<listEntry value=\"/grefine-broker/module/MOD-INF/classes\"/>",
                "-</listAttribute>",
                "-<stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"org.testng.remote.RemoteTestNG\"/>",
                "-<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"grefine-broker\"/>",
                "-<mapAttribute key=\"org.testng.eclipse.ALL_CLASS_METHODS\">",
                "-<mapEntry key=\"com.google.refine.broker.tests.RefineBrokerTests\" value=\"\"/>",
                "-</mapAttribute>",
                "-<listAttribute key=\"org.testng.eclipse.CLASS_TEST_LIST\">",
                "-<listEntry value=\"com.google.refine.broker.tests.RefineBrokerTests\"/>",
                "-</listAttribute>",
                "-<stringAttribute key=\"org.testng.eclipse.COMPLIANCE_LEVEL\" value=\"JDK\"/>",
                "-<listAttribute key=\"org.testng.eclipse.GROUP_LIST\"/>",
                "-<listAttribute key=\"org.testng.eclipse.GROUP_LIST_CLASS\"/>",
                "-<stringAttribute key=\"org.testng.eclipse.LOG_LEVEL\" value=\"2\"/>",
                "-<listAttribute key=\"org.testng.eclipse.METHOD_TEST_LIST\"/>",
                "-<listAttribute key=\"org.testng.eclipse.PACKAGE_TEST_LIST\"/>",
                "-<mapAttribute key=\"org.testng.eclipse.PARAMETERS\"/>",
                "-<listAttribute key=\"org.testng.eclipse.SUITE_TEST_LIST\">",
                "-<listEntry value=\"tests/conf/tests.xml\"/>",
                "-</listAttribute>",
                "-<intAttribute key=\"org.testng.eclipse.TYPE\" value=\"1\"/>",
                "-</launchConfiguration>",
                "diff --git a/broker/core/WEB-INF/butterfly.properties b/broker/core/WEB-INF/butterfly.properties",
                "deleted file mode 100644",
                "index 89b8d41b0..000000000",
                "--- a/broker/core/WEB-INF/butterfly.properties",
                "+++ /dev/null",
                "@@ -1,29 +0,0 @@",
                "-#",
                "-#  Butterfly Configuration",
                "-#",
                "-# NOTE: properties passed to the JVM using '-Dkey=value' from the command line",
                "-#       override the settings in this file.",
                "-",
                "-# indicates the URL path where butterfly is available in the proxy URL space",
                "-# as there is no way of knowing otherwise as this information is not ",
                "-# transferred thru the HTTP protocol or otherwise (different story if",
                "-# the appserver is connected thru a different protocol such as AJP)",
                "-",
                "-butterfly.url = / ",
                "-",
                "-# ---------- Miscellaneous ----------",
                "-",
                "-#butterfly.locale.language = en",
                "-#butterfly.locale.country = US",
                "-#butterfly.timeZone = GMT+09:00",
                "-",
                "-# ---------- Module ------",
                "-",
                "-butterfly.modules.path = ./",
                "-",
                "-butterfly.modules.wirings = WEB-INF/modules.properties",
                "-",
                "-# ---------- Clustering ----",
                "-",
                "-#butterfly.routing.cookie.maxage = -1",
                "-",
                "diff --git a/broker/core/WEB-INF/modules.properties b/broker/core/WEB-INF/modules.properties",
                "deleted file mode 100644",
                "index 0e3c497e5..000000000",
                "--- a/broker/core/WEB-INF/modules.properties",
                "+++ /dev/null",
                "@@ -1,5 +0,0 @@",
                "-#",
                "-#  Butterfly Modules Configuration",
                "-#",
                "-",
                "-broker = /",
                "diff --git a/broker/core/WEB-INF/web.xml b/broker/core/WEB-INF/web.xml",
                "deleted file mode 100644",
                "index 40b1a547f..000000000",
                "--- a/broker/core/WEB-INF/web.xml",
                "+++ /dev/null",
                "@@ -1,19 +0,0 @@",
                "-<?xml version=\"1.0\"?>",
                "-",
                "-<!DOCTYPE web-app",
                "-    PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN\"",
                "-    \"http://java.sun.com/j2ee/dtds/web-app_2_2.dtd\">",
                "-",
                "-<web-app>",
                "-     ",
                "-    <servlet>",
                "-        <servlet-name>refine-broker</servlet-name>",
                "-        <servlet-class>edu.mit.simile.butterfly.Butterfly</servlet-class>",
                "-    </servlet>",
                "-",
                "-    <servlet-mapping>",
                "-        <servlet-name>refine-broker</servlet-name>",
                "-        <url-pattern>/*</url-pattern>",
                "-    </servlet-mapping>",
                "-        ",
                "-</web-app>",
                "diff --git a/broker/core/module/MOD-INF/lib-src/bdb-je-4.0.103-sources.jar b/broker/core/module/MOD-INF/lib-src/bdb-je-4.0.103-sources.jar",
                "deleted file mode 100644",
                "index b031a8d0e..000000000",
                "Binary files a/broker/core/module/MOD-INF/lib-src/bdb-je-4.0.103-sources.jar and /dev/null differ",
                "diff --git a/broker/core/module/MOD-INF/lib/bdb-je-4.0.103.jar b/broker/core/module/MOD-INF/lib/bdb-je-4.0.103.jar",
                "deleted file mode 100644",
                "index a821080b8..000000000",
                "Binary files a/broker/core/module/MOD-INF/lib/bdb-je-4.0.103.jar and /dev/null differ",
                "diff --git a/broker/core/module/MOD-INF/module.properties b/broker/core/module/MOD-INF/module.properties",
                "deleted file mode 100644",
                "index d6b2fe052..000000000",
                "--- a/broker/core/module/MOD-INF/module.properties",
                "+++ /dev/null",
                "@@ -1,4 +0,0 @@",
                "-name = broker",
                "-description = Local Refine Broker",
                "-module-impl = com.google.refine.broker.RefineBrokerImpl",
                "-templating = false",
                "diff --git a/broker/core/src/com/google/refine/broker/RefineBroker.java b/broker/core/src/com/google/refine/broker/RefineBroker.java",
                "deleted file mode 100644",
                "index ad89d5e9b..000000000",
                "--- a/broker/core/src/com/google/refine/broker/RefineBroker.java",
                "+++ /dev/null",
                "@@ -1,345 +0,0 @@",
                "-/*",
                "-",
                "-Copyright 2010, Google Inc.",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are",
                "-met:",
                "-",
                "-    * Redistributions of source code must retain the above copyright",
                "-notice, this list of conditions and the following disclaimer.",
                "-    * Redistributions in binary form must reproduce the above",
                "-copyright notice, this list of conditions and the following disclaimer",
                "-in the documentation and/or other materials provided with the",
                "-distribution.",
                "-    * Neither the name of Google Inc. nor the names of its",
                "-contributors may be used to endorse or promote products derived from",
                "-this software without specific prior written permission.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
                "-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
                "-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
                "-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
                "-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           ",
                "-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           ",
                "-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
                "-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "-",
                "-*/",
                "-",
                "-",
                "-package com.google.refine.broker;",
                "-",
                "-import java.io.ByteArrayOutputStream;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.io.PrintWriter;",
                "-import java.io.StringWriter;",
                "-import java.io.Writer;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Map.Entry;",
                "-",
                "-import javax.servlet.ServletConfig;",
                "-import javax.servlet.ServletException;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                "-import org.apache.http.NameValuePair;",
                "-import org.apache.http.client.HttpClient;",
                "-import org.apache.http.client.ResponseHandler;",
                "-import org.apache.http.client.entity.UrlEncodedFormEntity;",
                "-import org.apache.http.client.methods.HttpPost;",
                "-import org.apache.http.impl.client.BasicResponseHandler;",
                "-import org.apache.http.message.BasicNameValuePair;",
                "-import org.apache.http.params.CoreProtocolPNames;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                "-import edu.mit.simile.butterfly.ButterflyModuleImpl;",
                "-",
                "-/**",
                "- * This class contains all the code shared by various implementations of a OpenRefine Broker.",
                "- * ",
                "- * A broker is a server used by multiple OpenRefine installations to enable collaborative",
                "- * development over the same project.",
                "- * ",
                "- * Broker implementations differ in how they store their state but all of them are required",
                "- * to extend this abstract class and implement the services that are called via HTTP.",
                "- * ",
                "- */",
                "-public abstract class RefineBroker extends ButterflyModuleImpl {",
                "-    ",
                "-    static final public String GET_STATE = \"get_state\";",
                "-    static final public String EXPIRE = \"expire\";",
                "-    static final public String OBTAIN_LOCK = \"obtain_lock\";",
                "-    static final public String RELEASE_LOCK = \"release_lock\";",
                "-    static final public String TRANSFORM = \"transform\";",
                "-    static final public String START = \"start\";",
                "-    static final public String OPEN = \"open\";",
                "-",
                "-    static final public int ALL = 0;",
                "-    static final public int COL = 1;",
                "-    static final public int CELL = 2;",
                "-    ",
                "-    static final protected Logger logger = LoggerFactory.getLogger(\"refine.broker\");",
                "-    ",
                "-    // TODO: This API is deprecated.",
                "-    static final protected String USER_INFO_URL = \"http://api.freebase.com/api/service/user_info\";",
                "-    static final protected String DELEGATED_OAUTH_HEADER = \"X-Freebase-Credentials\";",
                "-    static final protected String OAUTH_HEADER = \"Authorization\";",
                "-",
                "-    static protected String OK; ",
                "-    ",
                "-    static {",
                "-        try {",
                "-            JSONObject o = new JSONObject();",
                "-            o.put(\"status\",\"ok\");",
                "-            OK = o.toString();",
                "-        } catch (JSONException e) {",
                "-            // not going to happen;",
                "-        }",
                "-    }",
                "-    ",
                "-    static public final long LOCK_DURATION = 60 * 1000; // 1 minute",
                "-    static public final long USER_DURATION = 5 * 60 * 1000; // 1 minute",
                "-    static public final long LOCK_EXPIRATION_CHECK_DELAY = 5 * 1000; // 5 seconds",
                "-    ",
                "-    protected HttpClient httpclient;",
                "-",
                "-    protected boolean developmentMode;",
                "-    ",
                "-    @Override",
                "-    public void init(ServletConfig config) throws Exception {",
                "-        super.init(config);",
                "-        httpclient = getHttpClient();",
                "-        developmentMode = Boolean.parseBoolean(config.getInitParameter(\"refine.development\"));",
                "-        if (developmentMode) logger.warn(\"Running in development mode\");",
                "-    }",
                "-",
                "-    @Override",
                "-    public void destroy() throws Exception {",
                "-        httpclient.getConnectionManager().shutdown();       ",
                "-    }",
                "-    ",
                "-    @Override",
                "-    public boolean process(String path, HttpServletRequest request, HttpServletResponse response) throws Exception {",
                "-        if (logger.isDebugEnabled()) {",
                "-            logger.debug(\"> process '{}'\", path);",
                "-        } else {",
                "-            logger.info(\"process '{}'\", path);",
                "-        }",
                "-",
                "-        try {",
                "-",
                "-            if (GET_STATE.equals(path)) {",
                "-                response.setCharacterEncoding(\"UTF-8\");",
                "-                response.setHeader(\"Content-Type\", \"application/json\");",
                "-                getState(response, getParameter(request, \"pid\"), getUserId(request), getInteger(request, \"rev\"));",
                "-            } else if (EXPIRE.equals(path)) {",
                "-                response.setCharacterEncoding(\"UTF-8\");",
                "-                response.setHeader(\"Content-Type\", \"application/json\");",
                "-                expire(response);",
                "-            } else if (OBTAIN_LOCK.equals(path)) {",
                "-                response.setCharacterEncoding(\"UTF-8\");",
                "-                response.setHeader(\"Content-Type\", \"application/json\");",
                "-                obtainLock(response, getParameter(request, \"pid\"), getUserId(request), getInteger(request, \"locktype\"), getParameter(request, \"lockvalue\"));",
                "-            } else if (RELEASE_LOCK.equals(path)) {",
                "-                response.setCharacterEncoding(\"UTF-8\");",
                "-                response.setHeader(\"Content-Type\", \"application/json\");",
                "-                releaseLock(response, getParameter(request, \"pid\"), getUserId(request), getParameter(request, \"lock\"));",
                "-            } else if (TRANSFORM.equals(path)) {",
                "-                response.setCharacterEncoding(\"UTF-8\");",
                "-                response.setHeader(\"Content-Type\", \"application/json\");",
                "-                addTransformations(response, getParameter(request, \"pid\"), getUserId(request), getParameter(request, \"lock\"), getList(request, \"transformations\"));",
                "-            } else if (START.equals(path)) {",
                "-                response.setCharacterEncoding(\"UTF-8\");",
                "-                response.setHeader(\"Content-Type\", \"application/json\");",
                "-                startProject(response, getParameter(request, \"pid\"), getUserId(request), getParameter(request, \"lock\"), getData(request), getParameter(request, \"metadata\"), getList(request, \"transformations\"));",
                "-            } else if (OPEN.equals(path)) {",
                "-                response.setCharacterEncoding(\"UTF-8\");",
                "-                response.setHeader(\"Content-Type\", \"application/json\");",
                "-                openProject(response, getParameter(request, \"pid\"));",
                "-            } else {",
                "-                boolean value = super.process(path, request, response);",
                "-                if (logger.isDebugEnabled()) logger.debug(\"< process '{}'\", path);",
                "-                return value;",
                "-            }",
                "-                ",
                "-        } catch (RuntimeException e) {",
                "-            logger.error(\"runtime error\", e.getMessage());",
                "-            respondError(response, e.getMessage());",
                "-        } catch (Exception e) {",
                "-            logger.error(\"internal error\", e);",
                "-            respondException(response, e);",
                "-        }",
                "-        ",
                "-        if (logger.isDebugEnabled()) logger.debug(\"< process '{}'\", path);",
                "-        ",
                "-        return true;",
                "-    }",
                "-    ",
                "-    // ----------------------------------------------------------------------------------------",
                "-    ",
                "-    protected abstract HttpClient getHttpClient();",
                "-",
                "-    protected abstract void expire(HttpServletResponse response) throws Exception;",
                "-",
                "-    protected abstract void getState(HttpServletResponse response, String pid, String uid, int rev) throws Exception;",
                "-",
                "-    protected abstract void obtainLock(HttpServletResponse response, String pid, String uid, int locktype, String lockvalue) throws Exception;",
                "-    ",
                "-    protected abstract void releaseLock(HttpServletResponse response, String pid, String uid, String lock) throws Exception;",
                "-",
                "-    protected abstract void startProject(HttpServletResponse response, String pid, String uid, String lock, byte[] data, String metadata, List<String> transformations) throws Exception;",
                "-",
                "-    protected abstract void addTransformations(HttpServletResponse response, String pid, String uid, String lock, List<String> transformations) throws Exception;",
                "-    ",
                "-    protected abstract void openProject(HttpServletResponse response, String pid) throws Exception;",
                "-    ",
                "-    // ----------------------------------------------------------------------------------------",
                "-    ",
                "-    @SuppressWarnings(\"unchecked\")",
                "-    protected String getUserId(HttpServletRequest request) throws Exception {",
                "-",
                "-        // This is useful for testing",
                "-        if (developmentMode) {",
                "-            return getParameter(request, \"uid\");",
                "-        }",
                "-        ",
                "-        String oauth = request.getHeader(DELEGATED_OAUTH_HEADER);",
                "-        if (oauth == null) {",
                "-            throw new RuntimeException(\"The request needs to contain the '\" + DELEGATED_OAUTH_HEADER + \"' header set to obtain user identity via Freebase.\");",
                "-        }",
                "-        ",
                "-        List<NameValuePair> formparams = new ArrayList<NameValuePair>();",
                "-        Map<String,String> params = (Map<String,String>) request.getParameterMap();",
                "-        for (Entry<String,String> e : params.entrySet()) {",
                "-            formparams.add(new BasicNameValuePair((String) e.getKey(), (String) e.getValue()));",
                "-        }",
                "-        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");",
                "-",
                "-        HttpPost httpRequest = new HttpPost(USER_INFO_URL);",
                "-        httpRequest.setHeader(OAUTH_HEADER, oauth);",
                "-        httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT, \"OpenRefine Broker\");",
                "-        httpRequest.setEntity(entity);",
                "-                ",
                "-        ResponseHandler<String> responseHandler = new BasicResponseHandler();",
                "-        String responseBody = httpclient.execute(httpRequest, responseHandler);",
                "-        JSONObject o = new JSONObject(responseBody);",
                "-        ",
                "-        return o.getString(\"username\");",
                "-    }",
                "-",
                "-    // ----------------------------------------------------------------------------------------",
                "-",
                "-    static protected String getParameter(HttpServletRequest request, String name) throws ServletException {",
                "-        String param = request.getParameter(name);",
                "-        if (param == null) {",
                "-            throw new RuntimeException(\"request must come with a '\" + name + \"' parameter\");",
                "-        }",
                "-        return param;",
                "-    }",
                "-    ",
                "-    static protected List<String> getList(HttpServletRequest request, String name) throws ServletException, JSONException {",
                "-        String param = getParameter(request, name);",
                "-        JSONArray a = new JSONArray(param);",
                "-        List<String> result = new ArrayList<String>(a.length());",
                "-        for (int i = 0; i < a.length(); i++) {",
                "-            result.add(a.getString(i));",
                "-        }",
                "-        return result;",
                "-    }",
                "-    ",
                "-    static protected int getInteger(HttpServletRequest request, String name) throws ServletException, JSONException {",
                "-        return Integer.parseInt(getParameter(request, name));",
                "-    }",
                "-    ",
                "-    static protected byte[] getData(HttpServletRequest request) throws ServletException, IOException {",
                "-        ByteArrayOutputStream output = new ByteArrayOutputStream();",
                "-        InputStream input = request.getInputStream();",
                "-        byte[] buffer = new byte[4096];",
                "-        int count = 0;",
                "-        int n = 0;",
                "-        while (-1 != (n = input.read(buffer))) {",
                "-            output.write(buffer, 0, n);",
                "-            count += n;",
                "-        }",
                "-        return output.toByteArray();",
                "-        ",
                "-    }",
                "-    ",
                "-    static protected void respondError(HttpServletResponse response, String error) throws IOException, ServletException {",
                "-",
                "-        if (response == null) {",
                "-            throw new ServletException(\"Response object can't be null\");",
                "-        }",
                "-        ",
                "-        try {",
                "-            JSONObject o = new JSONObject();",
                "-            o.put(\"status\", \"error\");",
                "-            o.put(\"message\", error);",
                "-            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);",
                "-            respond(response, o.toString());",
                "-        } catch (JSONException e) {",
                "-            e.printStackTrace(response.getWriter());",
                "-        }",
                "-    }",
                "-    ",
                "-    static protected void respondException(HttpServletResponse response, Exception e) throws IOException, ServletException {",
                "-",
                "-        if (response == null) {",
                "-            throw new ServletException(\"Response object can't be null\");",
                "-        }",
                "-        ",
                "-        try {",
                "-            JSONObject o = new JSONObject();",
                "-            o.put(\"status\", \"error\");",
                "-            o.put(\"message\", e.getMessage());",
                "-        ",
                "-            StringWriter sw = new StringWriter();",
                "-            PrintWriter pw = new PrintWriter(sw);",
                "-            e.printStackTrace(pw);",
                "-            pw.flush();",
                "-            sw.flush();",
                "-        ",
                "-            o.put(\"stack\", sw.toString());",
                "-        ",
                "-            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);",
                "-            respond(response, o.toString());",
                "-        } catch (JSONException e1) {",
                "-            e.printStackTrace(response.getWriter());",
                "-        }",
                "-    }",
                "-",
                "-    static protected void respond(HttpServletResponse response, JSONObject content) throws IOException, ServletException {",
                "-        if (content == null) {",
                "-            throw new ServletException(\"Content object can't be null\");",
                "-        }",
                "-        ",
                "-        respond(response, content.toString());",
                "-    }",
                "-",
                "-    static protected void respond(HttpServletResponse response, String content) throws IOException, ServletException {",
                "-        if (response == null) {",
                "-            throw new ServletException(\"Response object can't be null\");",
                "-        }",
                "-        ",
                "-        Writer w = response.getWriter();",
                "-        if (w != null) {",
                "-            w.write(content);",
                "-            w.flush();",
                "-            w.close();",
                "-        } else {",
                "-            throw new ServletException(\"response returned a null writer\");",
                "-        }",
                "-    }",
                "-}",
                "diff --git a/broker/core/src/com/google/refine/broker/RefineBrokerImpl.java b/broker/core/src/com/google/refine/broker/RefineBrokerImpl.java",
                "deleted file mode 100644",
                "index 0e9491fcb..000000000",
                "--- a/broker/core/src/com/google/refine/broker/RefineBrokerImpl.java",
                "+++ /dev/null",
                "@@ -1,625 +0,0 @@",
                "-/*",
                "-",
                "-Copyright 2010, Google Inc.",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are",
                "-met:",
                "-",
                "-    * Redistributions of source code must retain the above copyright",
                "-notice, this list of conditions and the following disclaimer.",
                "-    * Redistributions in binary form must reproduce the above",
                "-copyright notice, this list of conditions and the following disclaimer",
                "-in the documentation and/or other materials provided with the",
                "-distribution.",
                "-    * Neither the name of Google Inc. nor the names of its",
                "-contributors may be used to endorse or promote products derived from",
                "-this software without specific prior written permission.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
                "-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
                "-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
                "-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
                "-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           ",
                "-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           ",
                "-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
                "-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "-",
                "-*/",
                "-",
                "-package com.google.refine.broker;",
                "-",
                "-import static com.sleepycat.persist.model.Relationship.MANY_TO_ONE;",
                "-",
                "-import java.io.File;",
                "-import java.io.Writer;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-import java.util.Timer;",
                "-import java.util.TimerTask;",
                "-",
                "-import javax.servlet.ServletConfig;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                "-import org.apache.http.client.HttpClient;",
                "-import org.apache.http.impl.client.DefaultHttpClient;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                "-import com.sleepycat.je.Environment;",
                "-import com.sleepycat.je.EnvironmentConfig;",
                "-import com.sleepycat.je.Transaction;",
                "-import com.sleepycat.persist.EntityCursor;",
                "-import com.sleepycat.persist.EntityStore;",
                "-import com.sleepycat.persist.PrimaryIndex;",
                "-import com.sleepycat.persist.SecondaryIndex;",
                "-import com.sleepycat.persist.StoreConfig;",
                "-import com.sleepycat.persist.model.Entity;",
                "-import com.sleepycat.persist.model.PrimaryKey;",
                "-import com.sleepycat.persist.model.SecondaryKey;",
                "-",
                "-public class RefineBrokerImpl extends RefineBroker {",
                "-                ",
                "-    protected static final Logger logger = LoggerFactory.getLogger(\"refine.broker.local\");",
                "-    ",
                "-    Environment env;",
                "-    ",
                "-    EntityStore projectStore;",
                "-    EntityStore lockStore;",
                "-    EntityStore userStore;",
                "-    ",
                "-    PrimaryIndex<String,Project> projectById;",
                "-    PrimaryIndex<String,Lock> lockById;",
                "-",
                "-    SecondaryIndex<String,String,Lock> locksByProject;",
                "-    ",
                "-    Timer timer;",
                "-    Expirer expirer;",
                "-",
                "-    @Override",
                "-    public void init(ServletConfig config) throws Exception {",
                "-        logger.trace(\"> init\");",
                "-        super.init(config);",
                "-",
                "-        timer = new Timer();",
                "-        expirer = new Expirer();",
                "-        timer.schedule(expirer, 0, LOCK_EXPIRATION_CHECK_DELAY);",
                "-        ",
                "-        String dataDir = config.getInitParameter(\"refine.data\");",
                "-        if (dataDir == null) dataDir = \"data\";",
                "-        File dataPath = new File(dataDir);",
                "-        if (!dataPath.exists()) dataPath.mkdirs();",
                "-        ",
                "-        EnvironmentConfig envConfig = new EnvironmentConfig();",
                "-        envConfig.setAllowCreate(true);",
                "-        envConfig.setTransactional(true);",
                "-        env = new Environment(dataPath, envConfig); ",
                "-",
                "-        StoreConfig storeConfig = new StoreConfig();",
                "-        storeConfig.setAllowCreate(true);",
                "-        storeConfig.setTransactional(true);",
                "-        projectStore = new EntityStore(env, \"ProjectsStore\", storeConfig);",
                "-        lockStore = new EntityStore(env, \"LockStore\", storeConfig);",
                "-        ",
                "-        projectById = projectStore.getPrimaryIndex(String.class, Project.class);",
                "-        lockById = lockStore.getPrimaryIndex(String.class, Lock.class);",
                "-        ",
                "-        locksByProject = lockStore.getSecondaryIndex(lockById, String.class, \"pid\"); ",
                "-        logger.trace(\"< init\");",
                "-    }",
                "-    ",
                "-    @Override",
                "-    public void destroy() throws Exception {",
                "-        logger.trace(\"> destroy\");",
                "-        super.destroy();",
                "-        ",
                "-        if (projectStore != null) {",
                "-            projectStore.close();",
                "-            projectById = null;            ",
                "-        } ",
                "-",
                "-        if (lockStore != null) {",
                "-            lockStore.close();",
                "-            lockById = null;",
                "-        } ",
                "-        ",
                "-        if (timer != null) {",
                "-            timer.cancel();",
                "-            timer.purge();",
                "-            timer = null;",
                "-        }",
                "-        ",
                "-        if (env != null) {",
                "-            env.close();",
                "-            env = null;",
                "-        }",
                "-        logger.trace(\"< destroy\");",
                "-    }",
                "-",
                "-    class Expirer extends TimerTask {",
                "-        public void run() {",
                "-            if (lockById != null) {",
                "-                logger.trace(\"> expire\");",
                "-                Transaction txn = env.beginTransaction(null, null);",
                "-                try {",
                "-                    EntityCursor<Lock> cursor = lockById.entities();",
                "-                    try {",
                "-                        for (Lock lock : cursor) {",
                "-                            if (lock.timestamp + LOCK_DURATION < System.currentTimeMillis()) {",
                "-                                logger.trace(\"Found expired lock {}\", lock.id);",
                "-                                try {",
                "-                                    releaseLock(null, lock.pid, lock.uid, lock.id);",
                "-                                } catch (Exception e) {",
                "-                                    logger.error(\"Exception while expiring lock for project '\" + lock.pid + \"'\", e);",
                "-                                }",
                "-                            }",
                "-                        }",
                "-                    } finally {",
                "-                        cursor.close();",
                "-                    }",
                "-                } finally {",
                "-                    if (txn != null) {",
                "-                        txn.abort();",
                "-                        txn = null;",
                "-                    }",
                "-                }",
                "-                logger.trace(\"< expire\");",
                "-            }",
                "-        }",
                "-    }",
                "-    ",
                "-    // ---------------------------------------------------------------------------------",
                "-",
                "-    @Override",
                "-    protected HttpClient getHttpClient() {",
                "-        return new DefaultHttpClient();",
                "-    }",
                "-    ",
                "-    // ---------------------------------------------------------------------------------",
                "-    ",
                "-    @Override",
                "-    protected void expire(HttpServletResponse response) throws Exception {",
                "-        expirer.run();",
                "-        respond(response, OK);",
                "-    }",
                "-        ",
                "-    @Override",
                "-    protected void obtainLock(HttpServletResponse response, String pid, String uid, int locktype, String lockvalue) throws Exception {",
                "-        logger.trace(\"> obtain lock\");",
                "-        Lock lock = null;",
                "-        Lock blocker = null;",
                "-",
                "-        Transaction txn = env.beginTransaction(null, null);",
                "-",
                "-        try {",
                "-",
                "-            EntityCursor<Lock> cursor = locksByProject.subIndex(pid).entities(); ",
                "-            ",
                "-            /*",
                "-             *  ALL",
                "-             *       blocked -> somebody else's lock",
                "-             *       reuse -> you already have an ALL lock",
                "-             *       new -> else",
                "-             *   ",
                "-             *   COL",
                "-             *       blocked -> somebody else's all lock || a lock on the same col",
                "-             *       reuse -> you have an ALL lock || a lock on the same col ",
                "-             *       new -> else",
                "-             *   ",
                "-             *   CELL",
                "-             *       blocked -> somebody else's all lock || a lock on the same col || a lock on the same cell",
                "-             *       reuse -> you have a lock on the same cell            ",
                "-             *       yes -> (you have a lock on the same cell) && (nobody else has a lock on the same cell || the same col || all)",
                "-             *       new -> else ",
                "-             *       ",
                "-             */",
                "-            ",
                "-            try {",
                "-                if (locktype == ALL) {",
                "-                    if (lockvalue.length() > 0) {",
                "-                        throw new RuntimeException(\"Hmm, seems like you're calling an ALL with a specific value, are you sure you didn't want another type of lock?\");",
                "-                    }",
                "-",
                "-                    for (Lock l : cursor) {",
                "-                        if (!l.uid.equals(uid)) {",
                "-                            blocker = l;",
                "-                            break;",
                "-                        } else {",
                "-                            if (l.type == ALL) {",
                "-                                lock = l;",
                "-                                break;",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                } else if (locktype == COL) {",
                "-                    if (lockvalue.indexOf(',') > -1) {",
                "-                        throw new RuntimeException(\"Hmm, seems like you're calling a COL lock with a CELL value\");",
                "-                    }",
                "-",
                "-                    for (Lock l : cursor) {",
                "-                        if (!l.uid.equals(uid)) {",
                "-                            if (l.type == ALL || ",
                "-                               (l.type == COL && l.value.equals(lockvalue)) ||",
                "-                               (l.type == CELL && l.value.split(\",\")[0].equals(lockvalue))) {",
                "-                                blocker = l;",
                "-                                break;",
                "-                            }",
                "-                        } else {",
                "-                            if (l.type == ALL || ",
                "-                               (l.type == COL && l.value.equals(lockvalue))) {",
                "-                                lock = l;",
                "-                                break;",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                } else if (locktype == CELL) {",
                "-                    if (lockvalue.indexOf(',') == -1) {",
                "-                        throw new RuntimeException(\"Hmm, seems like you're calling a CELL lock without specifying row and column: format must be 'row,column'\");",
                "-                    }",
                "-",
                "-                    for (Lock l : cursor) {",
                "-                        if (!l.uid.equals(uid)) {",
                "-                            if (l.type == ALL || ",
                "-                               (l.type == COL && l.value.equals(lockvalue.split(\",\")[0])) || ",
                "-                               (l.type == CELL && l.value.equals(lockvalue))) {",
                "-                                blocker = l;",
                "-                                break;",
                "-                            }",
                "-                        } else {",
                "-                            if (l.type == ALL || ",
                "-                               (l.type == COL && l.value.equals(lockvalue.split(\",\")[0])) || ",
                "-                               (l.type == CELL && l.value.equals(lockvalue))) {",
                "-                                lock = l;",
                "-                                break;",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                }",
                "-            } finally {",
                "-                cursor.close(); ",
                "-            } ",
                "-    ",
                "-            if (blocker != null) {",
                "-                logger.info(\"found a blocking lock {}\", lockToString(blocker));",
                "-                throw new RuntimeException(\"Can't obtain lock, it is blocked by a type '\" + blocker.type + \"' lock owned by '\" + blocker.uid + \"'\");",
                "-            }",
                "-            ",
                "-            if (lock == null) {",
                "-                logger.info(\"no comparable lock already exists, creating a new one\");",
                "-                lock = new Lock(Long.toHexString(txn.getId()), pid, uid, locktype, lockvalue);",
                "-                lockById.put(txn, lock);",
                "-                txn.commit();",
                "-            }",
                "-",
                "-        } finally {",
                "-            if (txn != null) {",
                "-                txn.abort();",
                "-                txn = null;",
                "-            }",
                "-        }",
                "-        ",
                "-        JSONObject o = lockToJSON(lock, uid);",
                "-        o.put(\"status\", \"ok\");",
                "-        respond(response, o);",
                "-        ",
                "-        logger.trace(\"< obtain lock\");",
                "-    }",
                "-    ",
                "-    @Override",
                "-    protected void releaseLock(HttpServletResponse response, String pid, String uid, String lid) throws Exception {",
                "-",
                "-        Transaction txn = env.beginTransaction(null, null);",
                "-",
                "-        try {",
                "-            Lock lock = getLock(lid, pid, uid);",
                "-            if (lock != null) {",
                "-                if (!lock.uid.equals(uid)) {",
                "-                    throw new RuntimeException(\"User id doesn't match the lock owner, can't release the lock\");",
                "-                }",
                "-                lockById.delete(lid);",
                "-                txn.commit();",
                "-            }",
                "-        } finally {",
                "-            if (txn != null) {",
                "-                txn.abort();",
                "-                txn = null;",
                "-            }",
                "-        }",
                "-                ",
                "-        if (response != null) { // this because the expiration thread can call this method without a real response",
                "-            respond(response, OK);",
                "-        }",
                "-    }",
                "-    ",
                "-    // ----------------------------------------------------------------------------------------------------",
                "-",
                "-    @Override",
                "-    protected void startProject(HttpServletResponse response, String pid, String uid, String lid, byte[] data, String metadata, List<String> transformations) throws Exception {",
                "-        ",
                "-        Transaction txn = env.beginTransaction(null, null);",
                "-",
                "-        try {",
                "-            if (projectById.contains(pid)) {",
                "-                throw new RuntimeException(\"Project '\" + pid + \"' already exists\");",
                "-            }",
                "-            ",
                "-            Lock lock = getLock(lid, pid, uid);",
                "-            ",
                "-            if (lock.type != ALL) {",
                "-                throw new RuntimeException(\"The lock you have is not enough to start a project\");",
                "-            }",
                "-            ",
                "-            projectById.put(txn, new Project(pid, data, metadata, transformations));",
                "-            txn.commit();",
                "-        } finally {",
                "-            if (txn != null) {",
                "-                txn.abort();",
                "-                txn = null;",
                "-            }",
                "-        }",
                "-        ",
                "-        respond(response, OK);",
                "-    }",
                "-    ",
                "-    @Override",
                "-    protected void addTransformations(HttpServletResponse response, String pid, String uid, String lid, List<String> transformations) throws Exception {",
                "-",
                "-        Transaction txn = env.beginTransaction(null, null);",
                "-        ",
                "-        try {",
                "-            Project project = getProject(pid);",
                "-            ",
                "-            if (project == null) {",
                "-                throw new RuntimeException(\"Project '\" + pid + \"' not found\");",
                "-            }",
                "-",
                "-            Lock lock = getLock(lid, pid, uid);",
                "-",
                "-            logger.info(\"obtained lock: {}\", lockToString(lock));",
                "-            ",
                "-            if (lock.type == ALL) {",
                "-                project.transformations.addAll(transformations);",
                "-            } else {",
                "-                for (String s : transformations) {",
                "-                    JSONObject o = new JSONObject(s);",
                "-                    ",
                "-                    int type = o.getInt(\"op_type\");",
                "-                    String value = o.getString(\"op_value\");",
                "-                    if (lock.type == COL) {",
                "-                        if (type == COL) {",
                "-                            if (value != null && value.equals(lock.value)) {",
                "-                               project.transformations.add(s);",
                "-                            } else {",
                "-                                throw new RuntimeException(\"Can't apply '\" + s + \"': you have a lock for column '\" + lock.value + \"' and you're attempting to modify column '\" + value + \"'.\");",
                "-                            }",
                "-                        } else if (type == CELL) {",
                "-                            String column = value.split(\",\")[0];",
                "-                            if (column != null && column.equals(lock.value)) {",
                "-                                project.transformations.add(s);",
                "-                            } else {",
                "-                                throw new RuntimeException(\"Can't apply '\" + s + \"': you have a lock for column '\" + lock.value + \"' and you're attempting to modify cell '\" + value + \"' in another column.\");",
                "-                            }",
                "-                        }",
                "-                    } else if (lock.type == CELL) {",
                "-                        if (type == COL) {",
                "-                            throw new RuntimeException(\"Can't apply '\" + s + \"': you offered a lock for a single cell and you're attempting an operation for the entire column.\");",
                "-                        } else if (type == CELL) {",
                "-                            if (value != null && value.equals(lock.value)) {",
                "-                                project.transformations.add(s);",
                "-                            } else {",
                "-                                throw new RuntimeException(\"Can't apply '\" + s + \"': you have a lock for cell '\" + lock.value + \"' and you're attempting to modify cell '\" + value + \"'.\");",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-",
                "-            projectById.put(txn, project);",
                "-            ",
                "-            txn.commit();",
                "-        } finally {",
                "-            if (txn != null) {",
                "-                txn.abort();",
                "-                txn = null;",
                "-            }",
                "-        }",
                "-        ",
                "-        respond(response, OK);",
                "-    }",
                "-",
                "-    // ---------------------------------------------------------------------------------",
                "-    ",
                "-    @Override",
                "-    protected void openProject(HttpServletResponse response, String pid) throws Exception {",
                "-        Project project = getProject(pid);",
                "-",
                "-        Writer w = response.getWriter();",
                "-        JSONWriter writer = new JSONWriter(w);",
                "-        writer.object();",
                "-            writer.key(\"status\"); writer.value(\"ok\");",
                "-            writer.key(\"data\"); writer.value(project.data);",
                "-            writer.key(\"metadata\"); writer.value(new JSONObject(project.metadata));",
                "-            writer.key(\"transformations\"); ",
                "-            writer.array();",
                "-                for (String s : project.transformations) {",
                "-                    writer.value(new JSONObject(s));",
                "-                }",
                "-            writer.endArray();",
                "-        writer.endObject();",
                "-        w.flush();",
                "-        w.close();",
                "-    }",
                "-        ",
                "-    // ---------------------------------------------------------------------------------",
                "-",
                "-    @Override",
                "-    protected void getState(HttpServletResponse response, String pid, String uid, int rev) throws Exception {",
                "-",
                "-        Project project = getProject(pid);",
                "-        ",
                "-        Writer w = response.getWriter();",
                "-        JSONWriter writer = new JSONWriter(w);",
                "-        ",
                "-        writer.object();",
                "-        writer.key(\"status\"); writer.value(\"ok\");",
                "-        writer.key(\"transformations\"); ",
                "-        writer.array();",
                "-            int size = project.transformations.size();",
                "-            for (int i = rev; i < size; i++) {",
                "-                writer.value(new JSONObject(project.transformations.get(i)));",
                "-            }",
                "-        writer.endArray();",
                "-",
                "-        EntityCursor<Lock> cursor = locksByProject.subIndex(pid).entities(); ",
                "-        ",
                "-        try {",
                "-            writer.key(\"locks\"); ",
                "-            writer.array();",
                "-            for (Lock lock : cursor) {",
                "-                writer.value(lockToJSON(lock, uid));",
                "-            }",
                "-            writer.endArray();",
                "-            writer.endObject();",
                "-            ",
                "-            w.flush();",
                "-            w.close();",
                "-        } finally {",
                "-            cursor.close(); ",
                "-        } ",
                "-    }",
                "-    ",
                "-    // ---------------------------------------------------------------------------------",
                "-",
                "-    Project getProject(String pid) {",
                "-        Project project = projectById.get(pid);",
                "-        if (project == null) {",
                "-            throw new RuntimeException(\"Project '\" + pid + \"' could not be found: are you sure is not managed by another broker?\");",
                "-        }",
                "-        return project;",
                "-    }",
                "-        ",
                "-    @Entity",
                "-    static class Project {",
                "-        ",
                "-        @PrimaryKey",
                "-        String pid;",
                "-",
                "-        List<String> transformations; ",
                "-        ",
                "-        byte[] data;",
                "-",
                "-        String metadata;",
                "-        ",
                "-        int rev;",
                "-",
                "-        Project(String pid, byte[] data, String metadata, List<String> transformations) {",
                "-            this.pid = pid;",
                "-            this.data = data;",
                "-            this.metadata = metadata;",
                "-            this.transformations = (transformations != null) ? transformations : new ArrayList<String>();",
                "-            this.rev = this.transformations.size();",
                "-        }",
                "-        ",
                "-        @SuppressWarnings(\"unused\")",
                "-        private Project() {}",
                "-    }",
                "-    ",
                "-    // ---------------------------------------------------------------------------------",
                "-    ",
                "-    Lock getLock(String lid, String pid, String uid) {",
                "-        Lock lock = lockById.get(lid);",
                "-        checkLock(lock, lid, pid, uid);",
                "-        return lock;",
                "-    }",
                "-",
                "-    void checkLock(Lock lock, String lid, String pid, String uid) {",
                "-        if (lock == null) {",
                "-            throw new RuntimeException(\"No lock was found with the given Lock id '\" + lid + \"', you have to have a valid lock on a project in order to start it\");",
                "-        }",
                "-        ",
                "-        if (!lock.pid.equals(pid)) {",
                "-            throw new RuntimeException(\"Lock '\" + lock.id + \"' is for another project: \" + lock.pid);",
                "-        }",
                "-        ",
                "-        if (!lock.uid.equals(uid)) {",
                "-            throw new RuntimeException(\"Lock '\" + lock.id + \"' is owned by another user: \" + lock.uid);",
                "-        }",
                "-    }",
                "-",
                "-    Lock getLock(String pid, String uid, int locktype) {",
                "-        Lock lock = null;",
                "-        EntityCursor<Lock> cursor = locksByProject.subIndex(pid).entities(); ",
                "-        ",
                "-        try {",
                "-            for (Lock l : cursor) {",
                "-                if (uid.equals(l.uid) && (locktype == l.type)) {",
                "-                    lock = l;",
                "-                    break;",
                "-                }",
                "-            }",
                "-        } finally {",
                "-            cursor.close(); ",
                "-        } ",
                "-        ",
                "-        return lock;",
                "-    }    ",
                "-    ",
                "-    JSONObject lockToJSON(Lock lock, String uid) throws JSONException {",
                "-        JSONObject o = new JSONObject();",
                "-        if (lock != null) {",
                "-            // NOTE: only the owner of the lock should get the ID, ",
                "-            // otherwise others can just fake ownership of other people's locks",
                "-            if (lock.uid.equals(uid)) { ",
                "-                o.put(\"lock\", lock.id);",
                "-            }",
                "-            ",
                "-            o.put(\"pid\", lock.pid);",
                "-            o.put(\"uid\", lock.uid);",
                "-            o.put(\"type\", lock.type);",
                "-            o.put(\"value\", lock.value);",
                "-            o.put(\"timestamp\", lock.timestamp);",
                "-        }",
                "-        return o;",
                "-    }",
                "-    ",
                "-    String lockToString(Lock lock) {",
                "-        return lock.id + \",\" + lock.pid + \",\" + lock.uid + \",\" + lock.type + \",\" + lock.value;",
                "-    }",
                "-    ",
                "-    @Entity",
                "-    static class Lock {",
                "-",
                "-        @PrimaryKey",
                "-        String id;",
                "-        ",
                "-        @SecondaryKey(relate=MANY_TO_ONE)",
                "-        String pid;",
                "-        ",
                "-        String uid;",
                "-        ",
                "-        int type;",
                "-        ",
                "-        String value;",
                "-        ",
                "-        long timestamp;",
                "-        ",
                "-        Lock(String id, String pid, String uid, int type, String value) {",
                "-            this.id = id;",
                "-            this.pid = pid;",
                "-            this.uid = uid;",
                "-            this.type = type;",
                "-            this.value = value;",
                "-            this.timestamp = System.currentTimeMillis();",
                "-        }",
                "-                ",
                "-        @SuppressWarnings(\"unused\")",
                "-        private Lock() {}",
                "-    }",
                "-}",
                "diff --git a/broker/core/tests/conf/tests.xml b/broker/core/tests/conf/tests.xml",
                "deleted file mode 100644",
                "index 22b71232f..000000000",
                "--- a/broker/core/tests/conf/tests.xml",
                "+++ /dev/null",
                "@@ -1,14 +0,0 @@",
                "-<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >",
                "- ",
                "-<suite name=\"OpenRefine Broker Unit Tests\">",
                "-  <test name=\"tests\">",
                "-    <groups>",
                "-      <run>",
                "-        <exclude name=\"broken\" />",
                "-      </run>",
                "-    </groups>",
                "-    <packages>",
                "-      <package name=\"com.google.refine.broker.tests.*\"/>",
                "-    </packages>",
                "-  </test>",
                "-</suite>",
                "diff --git a/broker/core/tests/src/com/google/refine/broker/tests/RefineBrokerTests.java b/broker/core/tests/src/com/google/refine/broker/tests/RefineBrokerTests.java",
                "deleted file mode 100644",
                "index be44254b2..000000000",
                "--- a/broker/core/tests/src/com/google/refine/broker/tests/RefineBrokerTests.java",
                "+++ /dev/null",
                "@@ -1,485 +0,0 @@",
                "-/*",
                "-",
                "-Copyright 2010, Google Inc.",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are",
                "-met:",
                "-",
                "-    * Redistributions of source code must retain the above copyright",
                "-notice, this list of conditions and the following disclaimer.",
                "-    * Redistributions in binary form must reproduce the above",
                "-copyright notice, this list of conditions and the following disclaimer",
                "-in the documentation and/or other materials provided with the",
                "-distribution.",
                "-    * Neither the name of Google Inc. nor the names of its",
                "-contributors may be used to endorse or promote products derived from",
                "-this software without specific prior written permission.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
                "-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
                "-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
                "-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
                "-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           ",
                "-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           ",
                "-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
                "-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "-",
                "-*/",
                "-",
                "-package com.google.refine.broker.tests;",
                "-",
                "-import static com.google.refine.broker.RefineBroker.*;",
                "-import static org.mockito.Mockito.mock;",
                "-import static org.mockito.Mockito.when;",
                "-",
                "-import java.io.ByteArrayInputStream;",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-import java.io.PrintWriter;",
                "-import java.io.StringWriter;",
                "-",
                "-import javax.servlet.ServletConfig;",
                "-import javax.servlet.ServletInputStream;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-import org.testng.Assert;",
                "-import org.testng.annotations.AfterMethod;",
                "-import org.testng.annotations.AfterSuite;",
                "-import org.testng.annotations.AfterTest;",
                "-import org.testng.annotations.BeforeMethod;",
                "-import org.testng.annotations.BeforeSuite;",
                "-import org.testng.annotations.BeforeTest;",
                "-import org.testng.annotations.Test;",
                "-",
                "-import com.google.refine.broker.RefineBroker;",
                "-import com.google.refine.broker.RefineBrokerImpl;",
                "-",
                "-public class RefineBrokerTests {",
                "-",
                "-    Logger logger;",
                "-    File data;",
                "-    ",
                "-    @BeforeSuite public void suite_init() {",
                "-        System.setProperty(\"log4j.configuration\", \"tests.log4j.properties\");",
                "-        data = new File(\"data\");",
                "-        if (!data.exists()) data.mkdirs();",
                "-    }",
                "-",
                "-    @AfterSuite public void suite_destroy() {",
                "-        for (File f : data.listFiles()) {",
                "-            f.delete();",
                "-        }",
                "-        data.delete();",
                "-    }",
                "-",
                "-    // ------------------------------------------------------------------------------------",
                "-    ",
                "-    ServletConfig config = null;",
                "-    RefineBroker broker = null;",
                "-    ",
                "-    @BeforeTest public void test_init() throws Exception {",
                "-        logger = LoggerFactory.getLogger(this.getClass());",
                "-        config = mock(ServletConfig.class);",
                "-        when(config.getInitParameter(\"refine.data\")).thenReturn(data.getAbsolutePath());",
                "-        when(config.getInitParameter(\"refine.development\")).thenReturn(\"true\");",
                "-",
                "-        broker = new RefineBrokerImpl();",
                "-        broker.init(config);",
                "-    }",
                "-",
                "-    @AfterTest public void test_destroy() throws Exception {",
                "-        broker.destroy();",
                "-        broker = null;",
                "-        config = null;",
                "-    }",
                "-    ",
                "-    // ------------------------------------------------------------------------------------",
                "-",
                "-    HttpServletRequest request = null;",
                "-    HttpServletResponse response = null;",
                "-    StringWriter writer = null;",
                "-    ",
                "-    @BeforeMethod public void setup() throws Exception {",
                "-        request = mock(HttpServletRequest.class);",
                "-        response = mock(HttpServletResponse.class);",
                "-    }",
                "-",
                "-    @AfterMethod public void teardown() throws Exception {",
                "-        response = null;",
                "-        request = null;",
                "-    }",
                "-    ",
                "-    // ------------------------------------------------------------------------------------",
                "-",
                "-    @Test public void testLifeCycle() {",
                "-        Assert.assertTrue(true);",
                "-    }",
                "-",
                "-    @Test public void testService() {",
                "-        try {",
                "-            success(broker, request, response, EXPIRE);",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-",
                "-    @Test public void testObtainLockFailure() {",
                "-        try {",
                "-            failure(broker, request, response, OBTAIN_LOCK);",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-",
                "-    @Test public void testReleaseLockFailure() {",
                "-        try {",
                "-            failure(broker, request, response, RELEASE_LOCK);",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-",
                "-    @Test public void testGetStateFailure() {",
                "-        try {",
                "-            failure(broker, request, response, GET_STATE, \"pid\", \"project1934983948\", \"uid\", \"testuser\", \"rev\", \"0\");",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-",
                "-    @Test public void testBrokenAllLockFailure() {",
                "-        try {",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", \"project\", \"uid\", \"testuser\", \"locktype\", Integer.toString(ALL), \"lockvalue\", \"1\");",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-    ",
                "-    @Test public void testBrokenColLockFailure() {",
                "-        try {",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", \"project\", \"uid\", \"testuser\", \"locktype\", Integer.toString(COL), \"lockvalue\", \"1,1\");",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-    ",
                "-    @Test public void testBrokenCellLockFailure() {",
                "-        try {",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", \"project\", \"uid\", \"testuser\", \"locktype\", Integer.toString(CELL), \"lockvalue\", \"1\");",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-    ",
                "-    @Test public void testLockSimple() {",
                "-        String project = \"proj0\";",
                "-        String user = \"testuser\";",
                "-        ",
                "-        try {",
                "-            logger.info(\"--- obtain ALL lock on project ---\");",
                "-            JSONObject result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-            assertJSON(result, \"uid\", \"testuser\");",
                "-            String lock = result.getString(\"lock\");",
                "-    ",
                "-            logger.info(\"--- obtain ALL lock on project ---\");",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user, \"lock\", lock);",
                "-",
                "-            logger.info(\"--- obtain COL lock on project ---\");",
                "-            result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(COL), \"lockvalue\", \"1\");",
                "-            assertJSON(result, \"uid\", \"testuser\");",
                "-            lock = result.getString(\"lock\");",
                "-    ",
                "-            logger.info(\"--- release COL lock on project ---\");",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user, \"lock\", lock);",
                "-",
                "-            logger.info(\"--- obtain CELL lock on project ---\");",
                "-            result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(CELL), \"lockvalue\", \"1,1\");",
                "-            assertJSON(result, \"uid\", \"testuser\");",
                "-            lock = result.getString(\"lock\");",
                "-            ",
                "-            logger.info(\"--- release CELL lock on project ---\");",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user, \"lock\", lock);",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-    ",
                "-    @Test public void testLocksAllBlocks() {",
                "-        String project = \"proj1\";",
                "-        String user = \"testuser\";",
                "-        String user2 = \"testuser2\";",
                "-",
                "-        try {",
                "-            logger.info(\"--- obtain ALL lock on project ---\");",
                "-            JSONObject result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-            assertJSON(result, \"uid\", user);",
                "-            String lock = result.getString(\"lock\");",
                "-",
                "-            logger.info(\"--- another using asking for any lock will fail ---\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(COL), \"lockvalue\", \"1\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(CELL), \"lockvalue\", \"1,1\");",
                "-",
                "-            logger.info(\"--- same user asking for lower capable locks will return the ALL one ---\");",
                "-            result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(COL), \"lockvalue\", \"1\");",
                "-            String lock2 = result.getString(\"lock\");",
                "-            Assert.assertEquals(lock, lock2);",
                "-            ",
                "-            result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(CELL), \"lockvalue\", \"1,1\");",
                "-            lock2 = result.getString(\"lock\");",
                "-            Assert.assertEquals(lock, lock2);",
                "-            ",
                "-            logger.info(\"--- release the ALL lock ---\");",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user, \"lock\", lock);",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-",
                "-    @Test public void testLocksColBlocks() {",
                "-        String project = \"proj2\";",
                "-        String user = \"testuser\";",
                "-        String user2 = \"testuser2\";",
                "-",
                "-        try {",
                "-            logger.info(\"--- obtain COL lock on project ---\");",
                "-            JSONObject result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(COL), \"lockvalue\", \"1\");",
                "-            String lock = result.getString(\"lock\");",
                "-",
                "-            logger.info(\"--- other user must fail to obtain lock on the same COL or ALL ---\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(COL), \"lockvalue\", \"1\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(CELL), \"lockvalue\", \"1,1\");",
                "-            ",
                "-            logger.info(\"--- but succeed in getting a COL lock on another column or cell ---\");",
                "-            result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(COL), \"lockvalue\", \"2\");",
                "-            String lock2 = result.getString(\"lock\");",
                "-            ",
                "-            logger.info(\"--- now it's our first user's turn to fail to get lock ---\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(COL), \"lockvalue\", \"2\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(CELL), \"lockvalue\", \"2,1\");",
                "-            ",
                "-            logger.info(\"--- release the locks ---\");",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user, \"lock\", lock);",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user2, \"lock\", lock2);",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-",
                "-    @Test public void testLocksCellBlocks() {",
                "-        String project = \"proj3\";",
                "-        String user = \"testuser\";",
                "-        String user2 = \"testuser2\";",
                "-",
                "-        try {",
                "-            logger.info(\"--- obtain CELL lock on project ---\");",
                "-            JSONObject result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(CELL), \"lockvalue\", \"1,1\");",
                "-            String lock = result.getString(\"lock\");",
                "-",
                "-            logger.info(\"--- other user must fail to obtain lock on the same CELL, COL or ALL ---\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(COL), \"lockvalue\", \"1\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(CELL), \"lockvalue\", \"1,1\");",
                "-            ",
                "-            logger.info(\"--- but succeed in getting a CELL lock on a cell in another column ---\");",
                "-            result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(CELL), \"lockvalue\", \"2,1\");",
                "-            String lock2 = result.getString(\"lock\");",
                "-            ",
                "-            logger.info(\"--- now it's our first user's turn to fail to get lock ---\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(COL), \"lockvalue\", \"2\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(CELL), \"lockvalue\", \"2,1\");",
                "-            ",
                "-            logger.info(\"--- release the locks ---\");",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user, \"lock\", lock);",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user2, \"lock\", lock2);",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-    ",
                "-    @Test public void testCompleteProjectLifeCycle() {",
                "-        try {",
                "-            String project = \"proj4\";",
                "-            String user = \"testuser\";",
                "-            String user2 = \"testuser2\";",
                "-            String data = \"blah\";",
                "-            String metadata = \"{}\";",
                "-            String transformations = \"[]\";",
                "-            String rev = \"0\";",
                "-            ",
                "-            logger.info(\"--- obtain ALL lock on project ---\");",
                "-            JSONObject result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-            assertJSON(result, \"uid\", user);",
                "-            String lock = result.getString(\"lock\");",
                "-",
                "-            logger.info(\"--- start project ---\");",
                "-            success(broker, request, response, START, \"pid\", project, \"uid\", user, \"lock\", lock, \"data\", data, \"metadata\", metadata, \"transformations\", transformations);",
                "-",
                "-            logger.info(\"--- verify project state contains lock ---\");",
                "-            result = success(broker, request, response, GET_STATE, \"pid\", project, \"uid\", user, \"rev\", rev);",
                "-            JSONArray locks = result.getJSONArray(\"locks\");",
                "-            Assert.assertEquals(locks.length(), 1);",
                "-            JSONObject l = locks.getJSONObject(0);",
                "-            assertJSON(l, \"uid\", \"testuser\");",
                "-            Assert.assertEquals(l.getInt(\"type\"), ALL);",
                "-            ",
                "-            logger.info(\"--- release ALL lock on project ---\");",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user, \"lock\", lock);",
                "-            ",
                "-            logger.info(\"--- verify no locks are present ---\");",
                "-            result = success(broker, request, response, GET_STATE, \"pid\", project, \"uid\", user, \"rev\", rev);",
                "-            locks = result.getJSONArray(\"locks\");",
                "-            Assert.assertEquals(locks.length(), 0);",
                "-            ",
                "-            logger.info(\"--- open project and verify data was loaded correctly ---\");",
                "-            result = success(broker, request, response, OPEN, \"pid\", project, \"uid\", user, \"rev\", rev);",
                "-            JSONArray result_data = result.getJSONArray(\"data\");",
                "-            Assert.assertEquals(result_data.length(),data.getBytes(\"UTF-8\").length);",
                "-",
                "-            JSONArray tt;",
                "-            JSONObject t;",
                "-            ",
                "-            logger.info(\"--- obtain column lock ---\");",
                "-            String column = \"1\";",
                "-            result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(COL), \"lockvalue\", column);",
                "-            String col_lock = result.getString(\"lock\");",
                "-",
                "-            logger.info(\"--- perform column transformation ---\");",
                "-            t = new JSONObject();",
                "-            t.put(\"op_type\", COL);",
                "-            t.put(\"op_value\", column); // operate on col 1",
                "-            t.put(\"value\", new JSONObject());",
                "-            tt = new JSONArray();",
                "-            tt.put(t);",
                "-            result = success(broker, request, response, TRANSFORM, \"pid\", project, \"uid\", user, \"lock\", col_lock, \"transformations\", tt.toString());",
                "-",
                "-            logger.info(\"--- make sure transformation was recorded properly ---\");",
                "-            result = success(broker, request, response, GET_STATE, \"pid\", project, \"uid\", user, \"rev\", \"0\");",
                "-            tt = result.getJSONArray(\"transformations\");",
                "-            Assert.assertEquals(tt.length(), 1);",
                "-            t = tt.getJSONObject(0);",
                "-            assertJSON(t, \"op_value\", column);",
                "-",
                "-            logger.info(\"--- make sure revision numbers in state management work as expected ---\");",
                "-            result = success(broker, request, response, GET_STATE, \"pid\", project, \"uid\", user, \"rev\", \"1\");",
                "-            tt = result.getJSONArray(\"transformations\");",
                "-            Assert.assertEquals(tt.length(), 0);",
                "-            ",
                "-            logger.info(\"--- perform cell transformation ---\");",
                "-            String cell = \"1\";",
                "-            t = new JSONObject();",
                "-            t.put(\"op_type\", CELL);",
                "-            t.put(\"op_value\", column + \",\" + cell); // operate on cell at row 1 column 1",
                "-            t.put(\"value\", new JSONObject());",
                "-            tt = new JSONArray();",
                "-            tt.put(t);",
                "-            result = success(broker, request, response, TRANSFORM, \"pid\", project, \"uid\", user, \"lock\", col_lock, \"transformations\", tt.toString());",
                "-            ",
                "-            logger.info(\"--- make sure transformation was recorded properly ---\");",
                "-            result = success(broker, request, response, GET_STATE, \"pid\", project, \"uid\", user, \"rev\", \"0\");",
                "-            tt = result.getJSONArray(\"transformations\");",
                "-            Assert.assertEquals(tt.length(), 2);",
                "-",
                "-            result = success(broker, request, response, GET_STATE, \"pid\", project, \"uid\", user, \"rev\", \"1\");",
                "-            tt = result.getJSONArray(\"transformations\");",
                "-            Assert.assertEquals(tt.length(), 1);",
                "-            t = tt.getJSONObject(0);",
                "-            assertJSON(t, \"op_value\", column + \",\" + cell);",
                "-            ",
                "-            logger.info(\"--- make sure another user fails to acquire ALL lock ---\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-",
                "-            logger.info(\"--- make sure another user fails to acquire COL lock on the same column ---\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(COL), \"lockvalue\", column);",
                "-",
                "-            logger.info(\"--- make sure another user manages to acquire COL lock on another column ---\");",
                "-            String column2 = \"2\";",
                "-            result = success(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user2, \"locktype\", Integer.toString(COL), \"lockvalue\", column2);",
                "-            String col_lock2 = result.getString(\"lock\");",
                "-            ",
                "-            logger.info(\"--- make sure that both locks are present ---\");",
                "-            result = success(broker, request, response, GET_STATE, \"pid\", project, \"uid\", user, \"rev\", \"2\");",
                "-            locks = result.getJSONArray(\"locks\");",
                "-            Assert.assertEquals(locks.length(), 2);",
                "-            ",
                "-            logger.info(\"--- make sure we can't escalate our current COL lock to an ALL lock ---\");",
                "-            failure(broker, request, response, OBTAIN_LOCK, \"pid\", project, \"uid\", user, \"locktype\", Integer.toString(ALL), \"lockvalue\", \"\");",
                "-            ",
                "-            logger.info(\"--- release column locks ---\");",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user, \"lock\", col_lock);",
                "-            success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user2, \"lock\", col_lock2);",
                "-            ",
                "-            logger.info(\"--- make sure the project has no locks ---\");",
                "-            result = success(broker, request, response, GET_STATE, \"pid\", project, \"uid\", user, \"rev\", \"2\");",
                "-            locks = result.getJSONArray(\"locks\");",
                "-            Assert.assertEquals(locks.length(), 0);",
                "-            ",
                "-        } catch (Exception e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-    ",
                "-    // ------------------------------------------------------------------------------------",
                "-    ",
                "-    private void assertJSON(JSONObject o, String name, String value) throws JSONException {",
                "-        Assert.assertEquals(o.get(name), value);",
                "-    }",
                "-    ",
                "-    private JSONObject success(RefineBroker broker, HttpServletRequest request, HttpServletResponse response, String service, String... params) throws Exception {",
                "-        return call(true, broker, request, response, service, params);",
                "-    }",
                "-",
                "-    private JSONObject failure(RefineBroker broker, HttpServletRequest request, HttpServletResponse response, String service, String... params) throws Exception {",
                "-        return call(false, broker, request, response, service, params);",
                "-    }",
                "-    ",
                "-    private JSONObject call(boolean successful, RefineBroker broker, HttpServletRequest request, HttpServletResponse response, String service, String... params) throws Exception {",
                "-        if (params != null) {",
                "-            for (int i = 0; i < params.length; ) {",
                "-                String name = params[i++];",
                "-                String value = params[i++];",
                "-                if (\"data\".equals(name)) {",
                "-                    final ByteArrayInputStream inputStream = new ByteArrayInputStream(value.getBytes(\"UTF-8\"));",
                "-                    when(request.getInputStream()).thenReturn(new ServletInputStream() {",
                "-                        public int read() throws IOException {",
                "-                            return inputStream.read();",
                "-                        }",
                "-                    });                    ",
                "-                } else {",
                "-                    when(request.getParameter(name)).thenReturn(value);",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        StringWriter writer = new StringWriter();",
                "-        when(response.getWriter()).thenReturn(new PrintWriter(writer));",
                "-        ",
                "-        broker.process(service, request, response);",
                "-",
                "-        JSONObject result = new JSONObject(writer.toString());",
                "-        ",
                "-        if (successful) {",
                "-            assertJSON(result, \"status\", \"ok\");",
                "-        } else {",
                "-            assertJSON(result, \"status\", \"error\");",
                "-        }",
                "-        ",
                "-        logger.info(result.toString());",
                "-",
                "-        return result;",
                "-    }",
                "-}",
                "diff --git a/broker/core/tests/src/tests.log4j.properties b/broker/core/tests/src/tests.log4j.properties",
                "deleted file mode 100644",
                "index d8c0aa370..000000000",
                "--- a/broker/core/tests/src/tests.log4j.properties",
                "+++ /dev/null",
                "@@ -1,6 +0,0 @@",
                "-log4j.rootLogger=INFO, console",
                "-",
                "-log4j.appender.console=org.apache.log4j.ConsoleAppender",
                "-",
                "-log4j.appender.console.layout=org.apache.log4j.PatternLayout",
                "-log4j.appender.console.layout.ConversionPattern=%-4r %-5p [%t] %m%n",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "broker/appengine/.externalToolBuilders/com.google.appengine.eclipse.core.projectValidator.launch",
                "broker/appengine/.externalToolBuilders/com.google.gdt.eclipse.core.webAppProjectValidator.launch",
                "broker/appengine/.settings/com.google.appengine.eclipse.core.prefs",
                "broker/appengine/.settings/com.google.gdt.eclipse.core.prefs",
                "broker/appengine/.settings/org.eclipse.jdt.core.prefs",
                "broker/appengine/.settings/org.eclipse.jdt.ui.prefs",
                "broker/appengine/WEB-INF/appengine-web.xml",
                "broker/appengine/WEB-INF/cron.xml",
                "broker/appengine/WEB-INF/jdoconfig.xml",
                "broker/appengine/WEB-INF/lib/slf4j-jdk14-1.5.6.jar",
                "broker/appengine/WEB-INF/logging.properties",
                "broker/appengine/module/MOD-INF/module.properties",
                "broker/appengine/src/com/google/refine/appengine/AppEngineClientConnection.java",
                "broker/appengine/src/com/google/refine/appengine/AppEngineClientConnectionManager.java",
                "broker/appengine/src/com/google/refine/broker/AppEngineRefineBrokerImpl.java",
                "broker/core/.settings/org.eclipse.jdt.core.prefs",
                "broker/core/.settings/org.eclipse.jdt.ui.prefs",
                "broker/core/IDEs/eclipse/RefineBrokerTests.launch",
                "broker/core/WEB-INF/butterfly.properties",
                "broker/core/WEB-INF/modules.properties",
                "broker/core/WEB-INF/web.xml",
                "broker/core/module/MOD-INF/lib-src/bdb-je-4.0.103-sources.jar",
                "broker/core/module/MOD-INF/lib/bdb-je-4.0.103.jar",
                "broker/core/module/MOD-INF/module.properties",
                "broker/core/src/com/google/refine/broker/RefineBroker.java",
                "broker/core/src/com/google/refine/broker/RefineBrokerImpl.java",
                "broker/core/tests/conf/tests.xml",
                "broker/core/tests/src/com/google/refine/broker/tests/RefineBrokerTests.java",
                "broker/core/tests/src/tests.log4j.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: OpenRefine",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "18c2183cbcf8c254742e26304564681aa67b936d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538240981,
            "hunks": 23,
            "message": "Jackson serialization for preferences",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/Engine.java b/main/src/com/google/refine/browsing/Engine.java",
                "index f0ef66770..4fa193fe1 100644",
                "--- a/main/src/com/google/refine/browsing/Engine.java",
                "+++ b/main/src/com/google/refine/browsing/Engine.java",
                "@@ -46,2 +46,3 @@ import org.json.JSONWriter;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonValue;",
                "@@ -74,2 +75,3 @@ public class Engine implements Jsonizable {",
                "     protected List<Facet> _facets = new LinkedList<Facet>();",
                "+    @JsonValue",
                "     protected EngineConfig _config = new EngineConfig(Collections.emptyList(), Mode.RowBased);",
                "diff --git a/main/src/com/google/refine/preference/PreferenceStore.java b/main/src/com/google/refine/preference/PreferenceStore.java",
                "index e44656c6d..7358ad9d1 100644",
                "--- a/main/src/com/google/refine/preference/PreferenceStore.java",
                "+++ b/main/src/com/google/refine/preference/PreferenceStore.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.preference;",
                "+import java.io.IOException;",
                " import java.lang.reflect.Method;",
                "@@ -42,2 +43,3 @@ import java.util.Set;",
                "+import org.json.JSONArray;",
                " import org.json.JSONException;",
                "@@ -46,2 +48,9 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -56,3 +65,7 @@ public class PreferenceStore implements Jsonizable {",
                "     private boolean dirty = false;",
                "-    protected Map<String, Object> _prefs = new HashMap<String, Object>();",
                "+    protected Map<String, Object> _prefs = new HashMap<>();",
                "+    ",
                "+    // Temporary wrapper while serialization has not been migrated yet.",
                "+    @JsonProperty(\"entries\")",
                "+    protected Map<String, Object> _prefsJackson = new HashMap<>();",
                "@@ -61,4 +74,6 @@ public class PreferenceStore implements Jsonizable {",
                "             _prefs.remove(key);",
                "+            _prefsJackson.remove(key);",
                "         } else {",
                "             _prefs.put(key, value);",
                "+            _prefsJackson.put(key, wrapJSONArray(value));",
                "         }",
                "@@ -67,2 +82,14 @@ public class PreferenceStore implements Jsonizable {",
                "+    private Object wrapJSONArray(Object value) {",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        if(value != null && value instanceof JSONArray) {",
                "+            try {",
                "+                return mapper.readValue(value.toString(), JsonNode.class);",
                "+            } catch (IOException e) {",
                "+                return null;",
                "+            }",
                "+        }",
                "+        return value;",
                "+    }",
                "+",
                "     public Object get(String key) {",
                "@@ -71,2 +98,3 @@ public class PreferenceStore implements Jsonizable {",
                "+    @JsonIgnore",
                "     public Set<String> getKeys() {",
                "@@ -100,2 +128,3 @@ public class PreferenceStore implements Jsonizable {",
                "      */",
                "+    @JsonIgnore",
                "     public boolean isDirty() {",
                "@@ -104,2 +133,15 @@ public class PreferenceStore implements Jsonizable {",
                "+    /**",
                "+     * Mark the object as clean every time it is serialized.",
                "+     * This behaviour is not very clean - it is inherited from",
                "+     * the previous deserialization code.",
                "+     * @return",
                "+     */",
                "+    @JsonProperty(\"makeClean\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Integer markAsClean() {",
                "+        dirty = false;",
                "+        return null;",
                "+    }",
                "+    ",
                "     @SuppressWarnings(\"unchecked\")",
                "@@ -113,4 +155,5 @@ public class PreferenceStore implements Jsonizable {",
                "                 if (!entries.isNull(key)) {",
                "-                    Object o = entries.get(key);",
                "-                    _prefs.put(key, loadObject(o));",
                "+                    Object o = entries.get(key), loaded = loadObject(o);",
                "+                    _prefs.put(key, loaded);",
                "+                    _prefsJackson.put(key, wrapJSONArray(loaded));",
                "                 }",
                "diff --git a/main/src/com/google/refine/preference/TopList.java b/main/src/com/google/refine/preference/TopList.java",
                "index dfc96f9c4..846d579bd 100644",
                "--- a/main/src/com/google/refine/preference/TopList.java",
                "+++ b/main/src/com/google/refine/preference/TopList.java",
                "@@ -46,2 +46,5 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -50,2 +53,3 @@ public class TopList implements Jsonizable, Iterable<String> {",
                "+    @JsonProperty(\"top\")",
                "     final protected int          _top;",
                "@@ -58,2 +62,3 @@ public class TopList implements Jsonizable, Iterable<String> {",
                "     @SuppressWarnings(\"unchecked\")",
                "+    @JsonProperty(\"list\")",
                "     public List<String> getList() {",
                "@@ -74,2 +79,7 @@ public class TopList implements Jsonizable, Iterable<String> {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"class\")",
                "+    public String getClassName() {",
                "+        return this.getClass().getName();",
                "+    }",
                "@@ -78,3 +88,3 @@ public class TopList implements Jsonizable, Iterable<String> {",
                "         writer.object();",
                "-        writer.key(\"class\"); writer.value(this.getClass().getName());",
                "+        writer.key(\"class\"); writer.value(getClassName());",
                "@@ -109,3 +119,4 @@ public class TopList implements Jsonizable, Iterable<String> {",
                "-    @Override  ",
                "+    @Override",
                "+    @JsonIgnore",
                "     public Iterator<String> iterator() {  ",
                "diff --git a/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java b/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "index 42911dfc5..86778c971 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "@@ -2,2 +2,5 @@ package com.google.refine.tests.preference;",
                "+import static org.testng.Assert.assertFalse;",
                "+import static org.testng.Assert.assertTrue;",
                "+",
                " import org.json.JSONObject;",
                "@@ -19,6 +22,20 @@ public class PreferenceStoreTests {",
                "                 + \"}}\";",
                "+        String jsonAfter = \"{\"",
                "+                + \"\\\"entries\\\":{\"",
                "+                + \"   \\\"reconciliation.standardServices\\\":[\"",
                "+                + \"           {\\\"propose_properties\\\":{\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/propose_properties\\\"},\\\"preview\\\":{\\\"width\\\":320,\\\"url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/preview?id={{id}}\\\",\\\"height\\\":90},\\\"view\\\":{\\\"url\\\":\\\"https://www.wikidata.org/wiki/{{id}}\\\"},\\\"ui\\\":{\\\"handler\\\":\\\"ReconStandardServicePanel\\\"},\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\\\"name\\\":\\\"Wikidata Reconciliation for OpenRefine (en)\\\",\\\"suggest\\\":{\\\"property\\\":{\\\"flyout_service_path\\\":\\\"/en/flyout/property?id=${id}\\\",\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/suggest/property\\\"},\\\"type\\\":{\\\"flyout_service_path\\\":\\\"/en/flyout/type?id=${id}\\\",\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/suggest/type\\\"},\\\"entity\\\":{\\\"flyout_service_path\\\":\\\"/en/flyout/entity?id=${id}\\\",\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/suggest/entity\\\"}},\\\"defaultTypes\\\":[{\\\"name\\\":\\\"entity\\\",\\\"id\\\":\\\"Q35120\\\"}],\\\"url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\"}\"",
                "+                + \"        ],\"",
                "+                + \"   \\\"scripting.starred-expressions\\\":{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":2147483647,\\\"list\\\":[]},\"",
                "+                + \"   \\\"scripting.expressions\\\":{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":100,\\\"list\\\":[]},\"",
                "+                + \"   \\\"mypreference\\\":\\\"myvalue\\\"\"",
                "+                + \"}}\";",
                "         PreferenceStore prefStore = new PreferenceStore();",
                "         prefStore.load(new JSONObject(json));",
                "-        TestUtils.isSerializedTo(prefStore, json);",
                "+        assertFalse(prefStore.isDirty());",
                "+        prefStore.put(\"mypreference\", \"myvalue\");",
                "+        assertTrue(prefStore.isDirty());",
                "+        TestUtils.isSerializedTo(prefStore, jsonAfter);",
                "+        assertFalse(prefStore.isDirty());",
                "     }",
                "+    ",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/Engine.java",
                "main/src/com/google/refine/preference/PreferenceStore.java",
                "main/src/com/google/refine/preference/TopList.java",
                "main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: OpenRefine",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "7d3af420cefa9ecf07362d68699d85a6fdb94da6",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538245735,
            "hunks": 19,
            "message": "Jackson serialization for long running processes",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "index 8af2c0dcf..3e623c92b 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "@@ -318,16 +318,3 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "         }",
                "-",
                "-        @Override",
                "-        public void write(JSONWriter writer, Properties options)",
                "-                throws JSONException {",
                "-",
                "-            writer.object();",
                "-            writer.key(\"id\"); writer.value(hashCode());",
                "-            writer.key(\"description\"); writer.value(_description);",
                "-            writer.key(\"immediate\"); writer.value(false);",
                "-            writer.key(\"status\"); writer.value(_thread == null ? \"pending\" : (_thread.isAlive() ? \"running\" : \"done\"));",
                "-            writer.key(\"progress\"); writer.value(_progress);",
                "-            writer.endObject();",
                "-        }",
                "-",
                "+        ",
                "         @Override",
                "diff --git a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "index 4905bc682..3aaa5858c 100644",
                "--- a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "@@ -180,15 +180,2 @@ public class ExtendDataOperation extends EngineDependentOperation {",
                "-        @Override",
                "-        public void write(JSONWriter writer, Properties options)",
                "-                throws JSONException {",
                "-            ",
                "-            writer.object();",
                "-            writer.key(\"id\"); writer.value(hashCode());",
                "-            writer.key(\"description\"); writer.value(_description);",
                "-            writer.key(\"immediate\"); writer.value(false);",
                "-            writer.key(\"status\"); writer.value(_thread == null ? \"pending\" : (_thread.isAlive() ? \"running\" : \"done\"));",
                "-            writer.key(\"progress\"); writer.value(_progress);",
                "-            writer.endObject();",
                "-        }",
                "-        ",
                "         @Override",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconOperation.java b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "index 567fb6cef..278b93e35 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations.recon;",
                "+import java.io.IOException;",
                " import java.util.ArrayList;",
                "@@ -48,2 +49,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "@@ -71,2 +73,3 @@ import com.google.refine.process.LongRunningProcess;",
                " import com.google.refine.process.Process;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -78,3 +81,3 @@ public class ReconOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "+    static public ReconOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "         JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "@@ -161,2 +164,28 @@ public class ReconOperation extends EngineDependentOperation {",
                "+        protected final String _addJudgmentFacetJson =",
                "+                \"{\\n\" + ",
                "+                \"  \\\"action\\\" : \\\"createFacet\\\",\\n\" + ",
                "+                \"  \\\"facetConfig\\\" : {\\n\" + ",
                "+                \"  \\\"columnName\\\" : \\\"researcher\\\",\\n\" + ",
                "+                \"  \\\"expression\\\" : \\\"forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \\\\\\\"(unreconciled)\\\\\\\", \\\\\\\"(blank)\\\\\\\"))\\\",\\n\" + ",
                "+                \"    \\\"name\\\" : \\\"researcher: judgment\\\"\\n\" + ",
                "+                \"    },\\n\" + ",
                "+                \"    \\\"facetOptions\\\" : {\\n\" + ",
                "+                \"      \\\"scroll\\\" : false\\n\" + ",
                "+                \"    },\\n\" + ",
                "+                \"    \\\"facetType\\\" : \\\"list\\\"\\n\" + ",
                "+                \" }\";",
                "+        protected final String _addScoreFacetJson = ",
                "+                \"{\\n\" + ",
                "+                \"  \\\"action\\\" : \\\"createFacet\\\",\\n\" + ",
                "+                \"  \\\"facetConfig\\\" : {\\n\" + ",
                "+                \"    \\\"columnName\\\" : \\\"researcher\\\",\\n\" + ",
                "+                \"    \\\"expression\\\" : \\\"cell.recon.best.score\\\",\\n\" + ",
                "+                \"    \\\"mode\\\" : \\\"range\\\",\\n\" + ",
                "+                \"    \\\"name\\\" : \\\"researcher: best candidate's score\\\"\\n\" + ",
                "+                \"         },\\n\" + ",
                "+                \"         \\\"facetType\\\" : \\\"range\\\"\\n\" + ",
                "+                \"}\";",
                "+        protected JsonNode _addJudgmentFacet, _addScoreFacet;",
                "+        ",
                "         public ReconProcess(",
                "@@ -170,2 +199,8 @@ public class ReconOperation extends EngineDependentOperation {",
                "             _historyEntryID = HistoryEntry.allocateID();",
                "+            try {               ",
                "+                _addJudgmentFacet = ParsingUtilities.mapper.readValue(_addJudgmentFacetJson, JsonNode.class);",
                "+                _addScoreFacet = ParsingUtilities.mapper.readValue(_addScoreFacetJson, JsonNode.class);",
                "+            } catch (IOException e) {",
                "+                e.printStackTrace();",
                "+            }",
                "         }",
                "@@ -216,2 +251,12 @@ public class ReconOperation extends EngineDependentOperation {",
                "+        @JsonProperty(\"onDone\")",
                "+        public List<JsonNode> onDoneActions() {",
                "+            List<JsonNode> onDone = new ArrayList<>();",
                "+            onDone.add(_addJudgmentFacet);",
                "+            if (_reconConfig instanceof StandardReconConfig) {",
                "+                onDone.add(_addScoreFacet);",
                "+            }",
                "+            return onDone;",
                "+        }",
                "+        ",
                "         @Override",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "index 7d29fd608..4697cf37a 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "@@ -51,2 +51,3 @@ import com.google.refine.browsing.EngineConfig;",
                " import com.google.refine.expr.ExpressionUtils;",
                "+import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -69,2 +70,27 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "     static final String ENGINE_JSON_URLS = \"{\\\"mode\\\":\\\"row-based\\\"}\";",
                "+    ",
                "+    private String json = \"{\\\"op\\\":\\\"core/column-addition-by-fetching-urls\\\",\"",
                "+            + \"\\\"description\\\":\\\"Create column employments at index 2 by fetching URLs based on column orcid using expression grel:\\\\\\\"https://pub.orcid.org/\\\\\\\"+value+\\\\\\\"/employments\\\\\\\"\\\",\"",
                "+            + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]},\"",
                "+            + \"\\\"newColumnName\\\":\\\"employments\\\",\"",
                "+            + \"\\\"columnInsertIndex\\\":2,\"",
                "+            + \"\\\"baseColumnName\\\":\\\"orcid\\\",\"",
                "+            + \"\\\"urlExpression\\\":\\\"grel:\\\\\\\"https://pub.orcid.org/\\\\\\\"+value+\\\\\\\"/employments\\\\\\\"\\\",\"",
                "+            + \"\\\"onError\\\":\\\"set-to-blank\\\",\"",
                "+            + \"\\\"delay\\\":500,\"",
                "+            + \"\\\"cacheResponses\\\":true,\"",
                "+            + \"\\\"httpHeadersJson\\\":[\"",
                "+            + \"    {\\\"name\\\":\\\"authorization\\\",\\\"value\\\":\\\"\\\"},\"",
                "+            + \"    {\\\"name\\\":\\\"user-agent\\\",\\\"value\\\":\\\"OpenRefine 3.0 rc.1 [TRUNK]\\\"},\"",
                "+            + \"    {\\\"name\\\":\\\"accept\\\",\\\"value\\\":\\\"application/json\\\"}\"",
                "+            + \"]}\";",
                "+    ",
                "+    private String processJson = \"\"",
                "+            +\"{\\n\" + ",
                "+            \"    \\\"description\\\" : \\\"Create column employments at index 2 by fetching URLs based on column orcid using expression grel:\\\\\\\"https://pub.orcid.org/\\\\\\\"+value+\\\\\\\"/employments\\\\\\\"\\\",\\n\" + ",
                "+            \"    \\\"id\\\" : %d,\\n\" + ",
                "+            \"    \\\"immediate\\\" : false,\\n\" + ",
                "+            \"    \\\"progress\\\" : 0,\\n\" + ",
                "+            \"    \\\"status\\\" : \\\"pending\\\"\\n\" + ",
                "+            \" }\";",
                "@@ -101,17 +127,2 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "     public void serializeColumnAdditionByFetchingURLsOperation() throws JSONException, Exception {",
                "-        String json = \"{\\\"op\\\":\\\"core/column-addition-by-fetching-urls\\\",\"",
                "-                + \"\\\"description\\\":\\\"Create column employments at index 2 by fetching URLs based on column orcid using expression grel:\\\\\\\"https://pub.orcid.org/\\\\\\\"+value+\\\\\\\"/employments\\\\\\\"\\\",\"",
                "-                + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]},\"",
                "-                + \"\\\"newColumnName\\\":\\\"employments\\\",\"",
                "-                + \"\\\"columnInsertIndex\\\":2,\"",
                "-                + \"\\\"baseColumnName\\\":\\\"orcid\\\",\"",
                "-                + \"\\\"urlExpression\\\":\\\"grel:\\\\\\\"https://pub.orcid.org/\\\\\\\"+value+\\\\\\\"/employments\\\\\\\"\\\",\"",
                "-                + \"\\\"onError\\\":\\\"set-to-blank\\\",\"",
                "-                + \"\\\"delay\\\":500,\"",
                "-                + \"\\\"cacheResponses\\\":true,\"",
                "-                + \"\\\"httpHeadersJson\\\":[\"",
                "-                + \"    {\\\"name\\\":\\\"authorization\\\",\\\"value\\\":\\\"\\\"},\"",
                "-                + \"    {\\\"name\\\":\\\"user-agent\\\",\\\"value\\\":\\\"OpenRefine 3.0 rc.1 [TRUNK]\\\"},\"",
                "-                + \"    {\\\"name\\\":\\\"accept\\\",\\\"value\\\":\\\"application/json\\\"}\"",
                "-                + \"]}\";",
                "         TestUtils.isSerializedTo(ColumnAdditionByFetchingURLsOperation.reconstruct(project, new JSONObject(json)), json);",
                "@@ -119,2 +130,9 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "+    @Test",
                "+    public void serializeUrlFetchingProcess() throws Exception {",
                "+        AbstractOperation op = ColumnAdditionByFetchingURLsOperation.reconstruct(project, new JSONObject(json));",
                "+        Process process = op.createProcess(project, new Properties());",
                "+        TestUtils.isSerializedTo(process, String.format(processJson, process.hashCode()));",
                "+    }",
                "+    ",
                "     /**",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "index 111da8f76..528656da4 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "@@ -88,2 +88,30 @@ public class ExtendDataOperationTests extends RefineTest {",
                "+    private String operationJson = \"{\\\"op\\\":\\\"core/extend-reconciled-data\\\",\"",
                "+            + \"\\\"description\\\":\\\"Extend data at index 3 based on column organization_name\\\",\"",
                "+            + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[\"",
                "+            + \"    {\\\"selectNumeric\\\":true,\\\"expression\\\":\\\"cell.recon.best.score\\\",\\\"selectBlank\\\":false,\\\"selectNonNumeric\\\":true,\\\"selectError\\\":true,\\\"name\\\":\\\"organization_name: best candidate's score\\\",\\\"from\\\":13,\\\"to\\\":101,\\\"type\\\":\\\"range\\\",\\\"columnName\\\":\\\"organization_name\\\"},\"",
                "+            + \"    {\\\"selectNonTime\\\":true,\\\"expression\\\":\\\"grel:toDate(value)\\\",\\\"selectBlank\\\":true,\\\"selectError\\\":true,\\\"selectTime\\\":true,\\\"name\\\":\\\"start_year\\\",\\\"from\\\":410242968000,\\\"to\\\":1262309184000,\\\"type\\\":\\\"timerange\\\",\\\"columnName\\\":\\\"start_year\\\"}\"",
                "+            + \"]},\"",
                "+            + \"\\\"columnInsertIndex\\\":3,\"",
                "+            + \"\\\"baseColumnName\\\":\\\"organization_name\\\",\"",
                "+            + \"\\\"endpoint\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"",
                "+            + \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"",
                "+            + \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"",
                "+            + \"\\\"extension\\\":{\"",
                "+            + \"    \\\"properties\\\":[\"",
                "+            + \"        {\\\"name\\\":\\\"inception\\\",\\\"id\\\":\\\"P571\\\"},\"",
                "+            + \"        {\\\"name\\\":\\\"headquarters location\\\",\\\"id\\\":\\\"P159\\\"},\"",
                "+            + \"        {\\\"name\\\":\\\"coordinate location\\\",\\\"id\\\":\\\"P625\\\"}\"",
                "+            + \"     ]\"",
                "+            + \"}}\";",
                "+    ",
                "+    private String processJson = \"\"",
                "+            + \"    {\\n\" + ",
                "+            \"       \\\"description\\\" : \\\"Extend data at index 3 based on column organization_name\\\",\\n\" + ",
                "+            \"       \\\"id\\\" : %d,\\n\" + ",
                "+            \"       \\\"immediate\\\" : false,\\n\" + ",
                "+            \"       \\\"progress\\\" : 0,\\n\" + ",
                "+            \"       \\\"status\\\" : \\\"pending\\\"\\n\" + ",
                "+            \"     }\";",
                "+    ",
                "     static public class ReconciledDataExtensionJobStub extends ReconciledDataExtensionJob {",
                "@@ -139,21 +167,10 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void serializeExtendDataOperation() throws JSONException, Exception {",
                "-        String json = \"{\\\"op\\\":\\\"core/extend-reconciled-data\\\",\"",
                "-                + \"\\\"description\\\":\\\"Extend data at index 3 based on column organization_name\\\",\"",
                "-                + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[\"",
                "-                + \"    {\\\"selectNumeric\\\":true,\\\"expression\\\":\\\"cell.recon.best.score\\\",\\\"selectBlank\\\":false,\\\"selectNonNumeric\\\":true,\\\"selectError\\\":true,\\\"name\\\":\\\"organization_name: best candidate's score\\\",\\\"from\\\":13,\\\"to\\\":101,\\\"type\\\":\\\"range\\\",\\\"columnName\\\":\\\"organization_name\\\"},\"",
                "-                + \"    {\\\"selectNonTime\\\":true,\\\"expression\\\":\\\"grel:toDate(value)\\\",\\\"selectBlank\\\":true,\\\"selectError\\\":true,\\\"selectTime\\\":true,\\\"name\\\":\\\"start_year\\\",\\\"from\\\":410242968000,\\\"to\\\":1262309184000,\\\"type\\\":\\\"timerange\\\",\\\"columnName\\\":\\\"start_year\\\"}\"",
                "-                + \"]},\"",
                "-                + \"\\\"columnInsertIndex\\\":3,\"",
                "-                + \"\\\"baseColumnName\\\":\\\"organization_name\\\",\"",
                "-                + \"\\\"endpoint\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"",
                "-                + \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"",
                "-                + \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"",
                "-                + \"\\\"extension\\\":{\"",
                "-                + \"    \\\"properties\\\":[\"",
                "-                + \"        {\\\"name\\\":\\\"inception\\\",\\\"id\\\":\\\"P571\\\"},\"",
                "-                + \"        {\\\"name\\\":\\\"headquarters location\\\",\\\"id\\\":\\\"P159\\\"},\"",
                "-                + \"        {\\\"name\\\":\\\"coordinate location\\\",\\\"id\\\":\\\"P625\\\"}\"",
                "-                + \"     ]\"",
                "-                + \"}}\";",
                "-        TestUtils.isSerializedTo(ExtendDataOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ExtendDataOperation.reconstruct(project, new JSONObject(operationJson)), operationJson);",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void serializeExtendDataProcess() throws JSONException, Exception {",
                "+        Process p = ExtendDataOperation.reconstruct(project, new JSONObject(operationJson))",
                "+                .createProcess(project, new Properties());",
                "+        TestUtils.isSerializedTo(p, String.format(processJson, p.hashCode()));",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "index 4da313b37..1fed8577f 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "@@ -4,2 +4,4 @@ import static org.mockito.Mockito.mock;",
                "+import java.util.Properties;",
                "+",
                " import org.json.JSONException;",
                "@@ -19,2 +21,49 @@ import com.google.refine.tests.util.TestUtils;",
                " public class ReconOperationTests extends RefineTest {",
                "+    private String json= \"{\"",
                "+            + \"\\\"op\\\":\\\"core/recon\\\",\"",
                "+            + \"\\\"description\\\":\\\"Reconcile cells in column researcher to type Q5\\\",\"",
                "+            + \"\\\"columnName\\\":\\\"researcher\\\",\"",
                "+            + \"\\\"config\\\":{\"",
                "+            + \"   \\\"mode\\\":\\\"standard-service\\\",\"",
                "+            + \"   \\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"",
                "+            + \"   \\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"",
                "+            + \"   \\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"",
                "+            + \"   \\\"type\\\":{\\\"id\\\":\\\"Q5\\\",\\\"name\\\":\\\"human\\\"},\"",
                "+            + \"   \\\"autoMatch\\\":true,\"",
                "+            + \"   \\\"columnDetails\\\":[],\"",
                "+            + \"   \\\"limit\\\":0\"",
                "+            + \"},\"",
                "+            + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}}\";",
                "+    private Project project = mock(Project.class);",
                "+    ",
                "+    private String processJson = \"\"",
                "+            + \"    {\\n\" + ",
                "+            \"       \\\"description\\\" : \\\"Reconcile cells in column researcher to type Q5\\\",\\n\" + ",
                "+            \"       \\\"id\\\" : %d,\\n\" + ",
                "+            \"       \\\"immediate\\\" : false,\\n\" + ",
                "+            \"       \\\"onDone\\\" : [ {\\n\" + ",
                "+            \"         \\\"action\\\" : \\\"createFacet\\\",\\n\" + ",
                "+            \"         \\\"facetConfig\\\" : {\\n\" + ",
                "+            \"           \\\"columnName\\\" : \\\"researcher\\\",\\n\" + ",
                "+            \"           \\\"expression\\\" : \\\"forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \\\\\\\"(unreconciled)\\\\\\\", \\\\\\\"(blank)\\\\\\\"))\\\",\\n\" + ",
                "+            \"           \\\"name\\\" : \\\"researcher: judgment\\\"\\n\" + ",
                "+            \"         },\\n\" + ",
                "+            \"         \\\"facetOptions\\\" : {\\n\" + ",
                "+            \"           \\\"scroll\\\" : false\\n\" + ",
                "+            \"         },\\n\" + ",
                "+            \"         \\\"facetType\\\" : \\\"list\\\"\\n\" + ",
                "+            \"       }, {\\n\" + ",
                "+            \"         \\\"action\\\" : \\\"createFacet\\\",\\n\" + ",
                "+            \"         \\\"facetConfig\\\" : {\\n\" + ",
                "+            \"           \\\"columnName\\\" : \\\"researcher\\\",\\n\" + ",
                "+            \"           \\\"expression\\\" : \\\"cell.recon.best.score\\\",\\n\" + ",
                "+            \"           \\\"mode\\\" : \\\"range\\\",\\n\" + ",
                "+            \"           \\\"name\\\" : \\\"researcher: best candidate's score\\\"\\n\" + ",
                "+            \"         },\\n\" + ",
                "+            \"         \\\"facetType\\\" : \\\"range\\\"\\n\" + ",
                "+            \"       } ],\\n\" + ",
                "+            \"       \\\"progress\\\" : 0,\\n\" + ",
                "+            \"       \\\"status\\\" : \\\"pending\\\"\\n\" + ",
                "+            \"     }\";",
                "+",
                "     @BeforeSuite",
                "@@ -27,20 +76,11 @@ public class ReconOperationTests extends RefineTest {",
                "     public void serializeReconOperation() throws JSONException, Exception {",
                "-        String json = \"{\"",
                "-                + \"\\\"op\\\":\\\"core/recon\\\",\"",
                "-                + \"\\\"description\\\":\\\"Reconcile cells in column researcher to type Q5\\\",\"",
                "-                + \"\\\"columnName\\\":\\\"researcher\\\",\"",
                "-                + \"\\\"config\\\":{\"",
                "-                + \"   \\\"mode\\\":\\\"standard-service\\\",\"",
                "-                + \"   \\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"",
                "-                + \"   \\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"",
                "-                + \"   \\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"",
                "-                + \"   \\\"type\\\":{\\\"id\\\":\\\"Q5\\\",\\\"name\\\":\\\"human\\\"},\"",
                "-                + \"   \\\"autoMatch\\\":true,\"",
                "-                + \"   \\\"columnDetails\\\":[],\"",
                "-                + \"   \\\"limit\\\":0\"",
                "-                + \"},\"",
                "-                + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}}\";",
                "-        Project project = mock(Project.class);",
                "         TestUtils.isSerializedTo(ReconOperation.reconstruct(project, new JSONObject(json)), json);",
                "     }",
                "+    ",
                "+    @Test",
                "+    public void serializeReconProcess() throws JSONException, Exception {",
                "+        ReconOperation op = ReconOperation.reconstruct(project, new JSONObject(json));",
                "+        com.google.refine.process.Process process = op.createProcess(project, new Properties());",
                "+        TestUtils.isSerializedTo(process, String.format(processJson, process.hashCode()));",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "main/src/com/google/refine/operations/recon/ReconOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: OpenRefine",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "987c2d1c80f088d114bbc2b85ec04f8b8d9f2e53",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538303321,
            "hunks": 24,
            "message": "Jackson serialization for project managers",
            "diff": [
                "diff --git a/main/src/com/google/refine/ProjectManager.java b/main/src/com/google/refine/ProjectManager.java",
                "index ee89a7eda..2e90d4624 100644",
                "--- a/main/src/com/google/refine/ProjectManager.java",
                "+++ b/main/src/com/google/refine/ProjectManager.java",
                "@@ -56,2 +56,5 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.history.HistoryEntryManager;",
                "@@ -344,2 +347,3 @@ public abstract class ProjectManager {",
                "      */",
                "+    @JsonIgnore",
                "     public InterProjectModel getInterProjectModel() {",
                "@@ -474,3 +478,3 @@ public abstract class ProjectManager {",
                "      */",
                "-    ",
                "+    @JsonIgnore",
                "     public Map<Long, ProjectMetadata> getAllProjectMetadata() {",
                "@@ -488,2 +492,3 @@ public abstract class ProjectManager {",
                "      */",
                "+    @JsonIgnore",
                "     public Map<String, Integer> getAllProjectTags() {",
                "@@ -519,2 +524,3 @@ public abstract class ProjectManager {",
                "      */",
                "+    @JsonProperty(\"preferences\")",
                "     public PreferenceStore getPreferenceStore() {",
                "@@ -527,2 +533,3 @@ public abstract class ProjectManager {",
                "      */",
                "+    @JsonIgnore",
                "     public List<String> getExpressions() {",
                "@@ -535,2 +542,3 @@ public abstract class ProjectManager {",
                "      */",
                "+    @JsonIgnore",
                "     public abstract HistoryEntryManager getHistoryEntryManager();",
                "diff --git a/main/src/com/google/refine/io/FileProjectManager.java b/main/src/com/google/refine/io/FileProjectManager.java",
                "index a59cad8c8..ac8f75829 100644",
                "--- a/main/src/com/google/refine/io/FileProjectManager.java",
                "+++ b/main/src/com/google/refine/io/FileProjectManager.java",
                "@@ -44,3 +44,5 @@ import java.io.OutputStream;",
                " import java.util.HashMap;",
                "+import java.util.Map.Entry;",
                " import java.util.Properties;",
                "+import java.util.Set;",
                " import java.util.zip.GZIPInputStream;",
                "@@ -59,2 +61,6 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.ProjectManager;",
                "@@ -69,3 +75,3 @@ import com.google.refine.preference.TopList;",
                "-public class FileProjectManager extends ProjectManager {",
                "+public class FileProjectManager extends ProjectManager implements Jsonizable {",
                "     final static protected String PROJECT_DIR_SUFFIX = \".project\";",
                "@@ -97,2 +103,3 @@ public class FileProjectManager extends ProjectManager {",
                "+    @JsonIgnore",
                "     public File getWorkspaceDir() {",
                "@@ -109,2 +116,3 @@ public class FileProjectManager extends ProjectManager {",
                "+    @JsonIgnore",
                "     public File getProjectDir(long projectID) {",
                "@@ -269,2 +277,3 @@ public class FileProjectManager extends ProjectManager {",
                "         synchronized (this) {",
                "+            // TODO refactor this so that we check if the save is needed before writing to the file!",
                "             File tempFile = new File(_workspaceDir, \"workspace.temp.json\");",
                "@@ -296,3 +305,2 @@ public class FileProjectManager extends ProjectManager {",
                "             tempFile.renameTo(file);",
                "-",
                "             logger.info(\"Saved workspace\");",
                "@@ -300,2 +308,17 @@ public class FileProjectManager extends ProjectManager {",
                "     }",
                "+    ",
                "+    protected boolean saveNeeded() {",
                "+        boolean projectSaveNeeded = _projectsMetadata.entrySet().stream()",
                "+                .anyMatch(e -> e.getValue() != null && e.getValue().isDirty());",
                "+        return projectSaveNeeded || _preferenceStore.isDirty();",
                "+    }",
                "+    ",
                "+    protected void saveProjectMetadata() throws JSONException, IOException {",
                "+        for(Entry<Long,ProjectMetadata> entry : _projectsMetadata.entrySet()) {",
                "+            ProjectMetadata metadata = entry.getValue();",
                "+            if (metadata != null && metadata.isDirty()) {",
                "+                ProjectMetadataUtilities.save(metadata, getProjectDir(entry.getKey()));",
                "+            }",
                "+        }",
                "+    }",
                "@@ -303,28 +326,7 @@ public class FileProjectManager extends ProjectManager {",
                "         FileWriter writer = new FileWriter(file);",
                "-        boolean saveWasNeeded = false;",
                "+        boolean saveWasNeeded = saveNeeded();",
                "         try {",
                "             JSONWriter jsonWriter = new JSONWriter(writer);",
                "-            jsonWriter.object();",
                "-            jsonWriter.key(\"projectIDs\");",
                "-            jsonWriter.array();",
                "-            for (Long id : _projectsMetadata.keySet()) {",
                "-                ProjectMetadata metadata = _projectsMetadata.get(id);",
                "-                if (metadata != null) {",
                "-                    jsonWriter.value(id);",
                "-                    if (metadata.isDirty()) {",
                "-                        Project project = ProjectManager.singleton.getProject(id);",
                "-                        metadata.setRowCount(project.rows.size());",
                "-                        ProjectMetadataUtilities.save(metadata, getProjectDir(id));",
                "-                        saveWasNeeded = true;",
                "-                    }",
                "-                }",
                "-            }",
                "-            jsonWriter.endArray();",
                "-            writer.write('\\n');",
                "-",
                "-            jsonWriter.key(\"preferences\");",
                "-            saveWasNeeded |= _preferenceStore.isDirty();",
                "-            _preferenceStore.write(jsonWriter, new Properties());",
                "-",
                "-            jsonWriter.endObject();",
                "+            write(jsonWriter, new Properties());",
                "+            saveProjectMetadata();",
                "         } finally {",
                "@@ -372,3 +374,3 @@ public class FileProjectManager extends ProjectManager {",
                "     }",
                "-",
                "+    ",
                "     protected boolean loadFromFile(File file) {",
                "@@ -486,2 +488,26 @@ public class FileProjectManager extends ProjectManager {",
                "     }",
                "+",
                "+    @Override",
                "+    public void write(JSONWriter jsonWriter, Properties options)",
                "+            throws JSONException {",
                "+        jsonWriter.object();",
                "+        jsonWriter.key(\"projectIDs\");",
                "+        jsonWriter.array();",
                "+        for (Long id : _projectsMetadata.keySet()) {",
                "+            ProjectMetadata metadata = _projectsMetadata.get(id);",
                "+            if (metadata != null) {",
                "+                jsonWriter.value(id);",
                "+            }",
                "+        }",
                "+        jsonWriter.endArray();",
                "+",
                "+        jsonWriter.key(\"preferences\");",
                "+        _preferenceStore.write(jsonWriter, new Properties());",
                "+        jsonWriter.endObject();    ",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"projectIDs\")",
                "+    public Set<Long> getProjectIds() {",
                "+        return _projectsMetadata.keySet();",
                "+    }",
                " }",
                "\\ No newline at end of file",
                "diff --git a/main/tests/server/src/com/google/refine/tests/io/FileProjectManagerTests.java b/main/tests/server/src/com/google/refine/tests/io/FileProjectManagerTests.java",
                "new file mode 100644",
                "index 000000000..80e470c73",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/io/FileProjectManagerTests.java",
                "@@ -0,0 +1,45 @@",
                "+package com.google.refine.tests.io;",
                "+",
                "+import java.io.File;",
                "+",
                "+import org.testng.annotations.Test;",
                "+import static org.mockito.Mockito.mock;",
                "+",
                "+import com.google.refine.io.FileProjectManager;",
                "+import com.google.refine.model.metadata.ProjectMetadata;",
                "+import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class FileProjectManagerTests extends RefineTest {",
                "+    ",
                "+    protected class FileProjectManagerStub extends FileProjectManager {",
                "+",
                "+        protected FileProjectManagerStub(File dir) {",
                "+            super(dir);",
                "+            _projectsMetadata.put(1234L, mock(ProjectMetadata.class));",
                "+        }",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void serializeFileProjectManager() {",
                "+        FileProjectManager manager = new FileProjectManagerStub(workspaceDir);",
                "+        String json = \"{\\n\" + ",
                "+                \"       \\\"preferences\\\" : {\\n\" + ",
                "+                \"         \\\"entries\\\" : {\\n\" + ",
                "+                \"           \\\"scripting.expressions\\\" : {\\n\" + ",
                "+                \"             \\\"class\\\" : \\\"com.google.refine.preference.TopList\\\",\\n\" + ",
                "+                \"             \\\"list\\\" : [ ],\\n\" + ",
                "+                \"             \\\"top\\\" : 100\\n\" + ",
                "+                \"           },\\n\" + ",
                "+                \"           \\\"scripting.starred-expressions\\\" : {\\n\" + ",
                "+                \"             \\\"class\\\" : \\\"com.google.refine.preference.TopList\\\",\\n\" + ",
                "+                \"             \\\"list\\\" : [ ],\\n\" + ",
                "+                \"             \\\"top\\\" : 2147483647\\n\" + ",
                "+                \"           }\\n\" + ",
                "+                \"         }\\n\" + ",
                "+                \"       },\\n\" + ",
                "+                \"       \\\"projectIDs\\\" : [ 1234 ]\\n\" + ",
                "+                \"     }\";",
                "+        TestUtils.isSerializedTo(manager, json);",
                "+    }",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java b/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "index 86778c971..9a5c1af18 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "@@ -9,2 +9,3 @@ import org.testng.annotations.Test;",
                " import com.google.refine.preference.PreferenceStore;",
                "+import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "@@ -12,12 +13,14 @@ import com.google.refine.tests.util.TestUtils;",
                " public class PreferenceStoreTests {",
                "+    public static String json = \"{\"",
                "+            + \"\\\"entries\\\":{\"",
                "+            + \"   \\\"reconciliation.standardServices\\\":[\"",
                "+            + \"           {\\\"propose_properties\\\":{\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/propose_properties\\\"},\\\"preview\\\":{\\\"width\\\":320,\\\"url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/preview?id={{id}}\\\",\\\"height\\\":90},\\\"view\\\":{\\\"url\\\":\\\"https://www.wikidata.org/wiki/{{id}}\\\"},\\\"ui\\\":{\\\"handler\\\":\\\"ReconStandardServicePanel\\\"},\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\\\"name\\\":\\\"Wikidata Reconciliation for OpenRefine (en)\\\",\\\"suggest\\\":{\\\"property\\\":{\\\"flyout_service_path\\\":\\\"/en/flyout/property?id=${id}\\\",\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/suggest/property\\\"},\\\"type\\\":{\\\"flyout_service_path\\\":\\\"/en/flyout/type?id=${id}\\\",\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/suggest/type\\\"},\\\"entity\\\":{\\\"flyout_service_path\\\":\\\"/en/flyout/entity?id=${id}\\\",\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/suggest/entity\\\"}},\\\"defaultTypes\\\":[{\\\"name\\\":\\\"entity\\\",\\\"id\\\":\\\"Q35120\\\"}],\\\"url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\"}\"",
                "+            + \"        ],\"",
                "+            + \"   \\\"scripting.starred-expressions\\\":{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":2147483647,\\\"list\\\":[]},\"",
                "+            + \"   \\\"scripting.expressions\\\":{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":100,\\\"list\\\":[]}\"",
                "+            + \"}}\";",
                "+    ",
                "     @Test",
                "     public void serializePreferenceStore() {",
                "-        String json = \"{\"",
                "-                + \"\\\"entries\\\":{\"",
                "-                + \"   \\\"reconciliation.standardServices\\\":[\"",
                "-                + \"           {\\\"propose_properties\\\":{\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/propose_properties\\\"},\\\"preview\\\":{\\\"width\\\":320,\\\"url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/preview?id={{id}}\\\",\\\"height\\\":90},\\\"view\\\":{\\\"url\\\":\\\"https://www.wikidata.org/wiki/{{id}}\\\"},\\\"ui\\\":{\\\"handler\\\":\\\"ReconStandardServicePanel\\\"},\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\\\"name\\\":\\\"Wikidata Reconciliation for OpenRefine (en)\\\",\\\"suggest\\\":{\\\"property\\\":{\\\"flyout_service_path\\\":\\\"/en/flyout/property?id=${id}\\\",\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/suggest/property\\\"},\\\"type\\\":{\\\"flyout_service_path\\\":\\\"/en/flyout/type?id=${id}\\\",\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/suggest/type\\\"},\\\"entity\\\":{\\\"flyout_service_path\\\":\\\"/en/flyout/entity?id=${id}\\\",\\\"service_url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata\\\",\\\"service_path\\\":\\\"/en/suggest/entity\\\"}},\\\"defaultTypes\\\":[{\\\"name\\\":\\\"entity\\\",\\\"id\\\":\\\"Q35120\\\"}],\\\"url\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\"}\"",
                "-                + \"        ],\"",
                "-                + \"   \\\"scripting.starred-expressions\\\":{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":2147483647,\\\"list\\\":[]},\"",
                "-                + \"   \\\"scripting.expressions\\\":{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":100,\\\"list\\\":[]}\"",
                "-                + \"}}\";",
                "+ ",
                "         String jsonAfter = \"{\""
            ],
            "changed_files": [
                "main/src/com/google/refine/ProjectManager.java",
                "main/src/com/google/refine/io/FileProjectManager.java",
                "main/tests/server/src/com/google/refine/tests/io/FileProjectManagerTests.java",
                "main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ZIP, OpenRefine",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "85887372aea5e09058c704a8ca2967375d8f84a7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543709258,
            "hunks": 0,
            "message": "Merge pull request #1875 from weblate/weblate-openrefine-translations Update from Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1875": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1875",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3498e8bd361359e2fbc4b6dfa084e58d18c4ee18",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544076297,
            "hunks": 0,
            "message": "Merge pull request #1885 from weblate/weblate-openrefine-translations Update from Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1885": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1885",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8eb08f3985e2b42ffbb5a34b4a24f5c86b5047ef",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544480461,
            "hunks": 0,
            "message": "Merge pull request #1905 from OpenRefine/remove_broker Remove broker, not used anymore",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1905": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1905",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3b4c66f788c3b277d195e463ac6bce92fc8c8d67",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543868230,
            "hunks": 1,
            "message": "Translated using Weblate (Japanese) Currently translated at 99.9% (709 of 710 strings) Translation: OpenRefine/Translations Translate-URL: https://hosted.weblate.org/projects/openrefine/translations/ja/",
            "diff": [
                "diff --git a/main/webapp/modules/core/langs/translation-jp.json b/main/webapp/modules/core/langs/translation-jp.json",
                "index 852cf6ad0..feccb5725 100644",
                "--- a/main/webapp/modules/core/langs/translation-jp.json",
                "+++ b/main/webapp/modules/core/langs/translation-jp.json",
                "@@ -24,3 +24,3 @@",
                "     \"core-index/new-version\": \"\u00e6\u0096\u00b0\u00e3\u0083\u0090\u00e3\u0083\u00bc\u00e3\u0082\u00b8\u00e3\u0083\u00a7\u00e3\u0083\u00b3!\",",
                "-    \"core-index/now\": \"\u00e7\u008f\u00be\u00e5\u009c\u00a8\",",
                "+    \"core-index/now\": \"\u00e3\u0081\u0084\u00e3\u0081\u00be\",",
                "     \"core-index/change-value\": \"\u00e8\u00a8\u00ad\u00e5\u00ae\u009a\u00e5\u0080\u00a4\u00e3\u0082\u0092\u00e5\u00a4\u0089\u00e3\u0081\u0088\u00e3\u0082\u008b\","
            ],
            "changed_files": [
                "main/webapp/modules/core/langs/translation-jp.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cac83e91320a9132a36933960b7532ea2387bec0"
                ],
                [
                    "no-tag",
                    "e0a07d2480df15a84e7d0787b5823ad4079b2632"
                ],
                [
                    "no-tag",
                    "032ca32f6da268e17594ac481fac2a590f3e00e9"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7bc2a32e4aef876a2fb0157fb107f72c004d0fdc",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544201665,
            "hunks": 0,
            "message": "Merge pull request #1892 from weblate/weblate-openrefine-translations Update from Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1892": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1892",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d4222c05ef55a13302b669216301eace8a648b4c",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544363260,
            "hunks": 0,
            "message": "Merge pull request #1877 from OpenRefine/issue1876 Fix reconciliation result deserialization",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1877": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1877",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5639f1b2f17303b03026629d763dcb6fef98550b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543708610,
            "hunks": 0,
            "message": "Merge pull request #1755 from OpenRefine/jackson-serialization Jackson serialization",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1755": "Replace ORG.JSON library #1652"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1755",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "39a8ba3eaa9e164d03916360180f9e19d6521aba",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544150019,
            "hunks": 2,
            "message": "Translated using Weblate (Norwegian Bokm\u00c3\u00a5l) Currently translated at 100.0% (46 of 46 strings) Translation: OpenRefine/database Translate-URL: https://hosted.weblate.org/projects/openrefine/database/nb_NO/",
            "diff": [
                "diff --git a/extensions/database/module/langs/translation-nb_NO.json b/extensions/database/module/langs/translation-nb_NO.json",
                "index a678c01ee..423dc6360 100644",
                "--- a/extensions/database/module/langs/translation-nb_NO.json",
                "+++ b/extensions/database/module/langs/translation-nb_NO.json",
                "@@ -43,3 +43,6 @@",
                "     \"database-parsing/store-row\": \"Lagre blanke rader\",",
                "-    \"database-parsing/store-cell\": \"Lagre blanke celler som null\"",
                "-}",
                "\\ No newline at end of file",
                "+    \"database-parsing/store-cell\": \"Lagre blanke celler som null\",",
                "+    \"database-source/alert-invalid-query-keyword\": \"Sp\u00c3\u00b8rring kan ikke inneholde datamanipuleringsn\u00c3\u00b8kkelord:\",",
                "+    \"database-source/form-validation-failure\": \"Nytt tilkoblingsskjema er ugyldig!\",",
                "+    \"database-parsing/worksheet\": \"Regneark\"",
                "+}"
            ],
            "changed_files": [
                "extensions/database/module/langs/translation-nb_NO.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a6d3d7504e4fe307a67daba8d12cb74f7344e88f"
                ],
                [
                    "no-tag",
                    "833198e3cd51590bf7f8a9288d86706c5a6ec348"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3f9189c5a7ca72ace7cbb5f7fba99a2cf09f2f61",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544363294,
            "hunks": 0,
            "message": "Merge pull request #1896 from weblate/weblate-openrefine-translations Update from Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1896": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1896",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "150ee12058e1503771e946090d041cca7ba80523",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544579990,
            "hunks": 0,
            "message": "Merge pull request #1902 from OpenRefine/cleanup Tidy up various things",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1902": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1902",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3ad4cca83a296632b41e7f5eecaefa99bac4161b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544026102,
            "hunks": 1,
            "message": "Translated using Weblate (English) Currently translated at 100.0% (710 of 710 strings) Translation: OpenRefine/Translations Translate-URL: https://hosted.weblate.org/projects/openrefine/translations/en/",
            "diff": [
                "diff --git a/main/webapp/modules/core/langs/translation-en.json b/main/webapp/modules/core/langs/translation-en.json",
                "index 54cd44ba9..95cf95ff5 100644",
                "--- a/main/webapp/modules/core/langs/translation-en.json",
                "+++ b/main/webapp/modules/core/langs/translation-en.json",
                "@@ -5,3 +5,3 @@",
                "     \"core-index/about\": \"About\",",
                "-    \"core-index/version\": \"\u00eb\u00b2\u0084\u00ec\u00a0\u0084\",",
                "+    \"core-index/version\": \"Version\",",
                "     \"core-index/new-version\": \"New Version\","
            ],
            "changed_files": [
                "main/webapp/modules/core/langs/translation-en.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "99ea5cf5c255ee4983cb88374feef2f8bd591af6"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3a96cad133e82947191f11cd2c1bd1f4901dc569",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543655409,
            "hunks": 0,
            "message": "Merge pull request #1873 from weblate/weblate-openrefine-translations Update from Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1873": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1873",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a4b18b3fc0226d01832e2e8820231c1a3f0a65c0",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543460420,
            "hunks": 0,
            "message": "Merge pull request #1871 from weblate/weblate-openrefine-translations Update from Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1871": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1871",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aca8d7a6842d605cb01823712f375b949659d7a1",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543599589,
            "hunks": 2,
            "message": "Translated using Weblate (German) Currently translated at 99.9% (710 of 711 strings) Translation: OpenRefine/Translations Translate-URL: https://hosted.weblate.org/projects/openrefine/translations/de/",
            "diff": [
                "diff --git a/main/webapp/modules/core/langs/translation-de.json b/main/webapp/modules/core/langs/translation-de.json",
                "index ca82db067..e8293456a 100644",
                "--- a/main/webapp/modules/core/langs/translation-de.json",
                "+++ b/main/webapp/modules/core/langs/translation-de.json",
                "@@ -23,3 +23,3 @@",
                "     \"core-index/key\": \"Schl\u00c3\u00bcssel\",",
                "-    \"core-index/new-version\": \"Neue Version!\",",
                "+    \"core-index/new-version\": \"Neue Version\",",
                "     \"core-index/now\": \"jetzt\",",
                "@@ -710,3 +710,4 @@",
                "     \"core-views/choose-reconciliation-service\": \"W\u00c3\u00a4hlen Sie einen Abgleichdienst aus\",",
                "-    \"core-views/choose-reconciliation-service-alert\": \"Bitte w\u00c3\u00a4hlen Sie zuerst einen Abstimmungsdienst aus.\"",
                "+    \"core-views/choose-reconciliation-service-alert\": \"Bitte w\u00c3\u00a4hlen Sie zuerst einen Abstimmungsdienst aus.\",",
                "+    \"core-index/metaDatas\": \"Projekt-Metadaten\"",
                " }"
            ],
            "changed_files": [
                "main/webapp/modules/core/langs/translation-de.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "074a80b29785edcc76a97cff1ba98a19f911edd7"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dd0fa967d03922e8e7dd008af6d6bb02f8046f29",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544363240,
            "hunks": 0,
            "message": "Merge pull request #1898 from OpenRefine/issue/1890 support both jdk 8, oracle jdk9 and openjdk11",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1898": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1898",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c8eca193f29b7e30d12b1019c36f6fa916196e75",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543854144,
            "hunks": 0,
            "message": "Merge pull request #1878 from OpenRefine/test-output-gitignore Add test-output directories to .gitignore",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1878": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1878",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "47ad9e7137eaaa888808cfc859c43c4f17293ec6",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543606690,
            "hunks": 0,
            "message": "Merge pull request #1872 from weblate/weblate-openrefine-translations Update from Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1872": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1872",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5421a23fba268d871d321d297393f0de930df6ea",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544104906,
            "hunks": 0,
            "message": "Merge pull request #1880 from OpenRefine/issue1874 Avoid localizing time for dates with unspecified time.",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1880": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1880",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5ea6a2a5fefc8ee8f59ef1689f4496b22b8f212b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543709817,
            "hunks": 2,
            "message": "Translated using Weblate (Arabic) Currently translated at 4.5% (32 of 710 strings) Translation: OpenRefine/Translations Translate-URL: https://hosted.weblate.org/projects/openrefine/translations/ar/",
            "diff": [
                "diff --git a/main/webapp/modules/core/langs/translation-ar.json b/main/webapp/modules/core/langs/translation-ar.json",
                "index 9e26dfeeb..6aa5b64bf 100644",
                "--- a/main/webapp/modules/core/langs/translation-ar.json",
                "+++ b/main/webapp/modules/core/langs/translation-ar.json",
                "@@ -1 +1,34 @@",
                "-{}",
                "\\ No newline at end of file",
                "+{",
                "+    \"name\": \"\u00d8\u00a7\u00d9\u0084\u00d8\u00a5\u00d9\u0086\u00d8\u00ac\u00d9\u0084\u00d9\u008a\u00d8\u00b2\u00d9\u008a\u00d8\u00a9\",",
                "+    \"core-index/slogan\": \"\u00d8\u00a3\u00d8\u00af\u00d8\u00a7\u00d8\u00a9 \u00d9\u0082\u00d9\u0088\u00d9\u008a\u00d8\u00a9 \u00d9\u0084\u00d9\u0084\u00d8\u00b9\u00d9\u0085\u00d9\u0084 \u00d9\u0085\u00d8\u00b9 \u00d8\u00a7\u00d9\u0084\u00d8\u00a8\u00d9\u008a\u00d8\u00a7\u00d9\u0086\u00d8\u00a7\u00d8\u00aa \u00d8\u00a7\u00d9\u0084\u00d9\u0081\u00d9\u0088\u00d8\u00b6\u00d9\u0088\u00d9\u008a\u00d8\u00a9\",",
                "+    \"core-index/help\": \"\u00d9\u0085\u00d8\u00b3\u00d8\u00a7\u00d8\u00b9\u00d8\u00af\u00d8\u00a9\",",
                "+    \"core-index/about\": \"\u00d9\u0085\u00d8\u00b9\u00d9\u0084\u00d9\u0088\u00d9\u0085\u00d8\u00a7\u00d8\u00aa \u00d8\u00b9\u00d9\u0086\u00d8\u00a7\",",
                "+    \"core-index/new-version\": \"\u00d8\u00a7\u00d9\u0084\u00d8\u00a5\u00d8\u00b5\u00d8\u00af\u00d8\u00a7\u00d8\u00b1 \u00d8\u00a7\u00d9\u0084\u00d8\u00ac\u00d8\u00af\u00d9\u008a\u00d8\u00af\u00d8\u00a9\",",
                "+    \"core-index/download\": \"\u00d8\u00aa\u00d8\u00ad\u00d9\u0085\u00d9\u008a\u00d9\u0084\",",
                "+    \"core-index/now\": \"\u00d8\u00a7\u00d9\u0084\u00d8\u00a2\u00d9\u0086\",",
                "+    \"core-index/change-value\": \"\u00d9\u0082\u00d9\u0085 \u00d8\u00a8\u00d8\u00aa\u00d8\u00ba\u00d9\u008a\u00d9\u008a\u00d8\u00b1 \u00d9\u0082\u00d9\u008a\u00d9\u0085\u00d8\u00a9 \u00d9\u0085\u00d9\u0081\u00d8\u00aa\u00d8\u00a7\u00d8\u00ad \u00d8\u00a7\u00d9\u0084\u00d8\u00aa\u00d9\u0081\u00d8\u00b6\u00d9\u008a\u00d9\u0084\",",
                "+    \"core-index/preferences\": \"\u00d8\u00a7\u00d9\u0084\u00d8\u00aa\u00d9\u0081\u00d8\u00b6\u00d9\u008a\u00d9\u0084\u00d8\u00a7\u00d8\u00aa\",",
                "+    \"core-index/key\": \"\u00d9\u0085\u00d9\u0081\u00d8\u00aa\u00d8\u00a7\u00d8\u00ad\",",
                "+    \"core-index/value\": \"\u00d8\u00a7\u00d9\u0084\u00d9\u0082\u00d9\u008a\u00d9\u0085\u00d8\u00a9\",",
                "+    \"core-index/add-pref\": \"\u00d8\u00a5\u00d8\u00b6\u00d8\u00a7\u00d9\u0081\u00d8\u00a9 \u00d8\u00a7\u00d9\u0084\u00d8\u00aa\u00d9\u0081\u00d8\u00b6\u00d9\u008a\u00d9\u0084\",",
                "+    \"core-index/pref-key\": \"\u00d9\u0082\u00d9\u008a\u00d9\u0085\u00d8\u00a9 \u00d9\u0085\u00d9\u0081\u00d8\u00aa\u00d8\u00a7\u00d8\u00ad \u00d8\u00a7\u00d9\u0084\u00d8\u00aa\u00d9\u0081\u00d8\u00b6\u00d9\u008a\u00d9\u0084:\",",
                "+    \"core-index/edit\": \"\u00d8\u00b9\u00d8\u00af\u00d9\u0084\",",
                "+    \"core-index/delete\": \"\u00d8\u00ad\u00d8\u00b0\u00d9\u0081\",",
                "+    \"core-index/new-proj-name\": \"\u00d8\u00a7\u00d8\u00b3\u00d9\u0085 \u00d9\u0085\u00d8\u00b4\u00d8\u00b1\u00d9\u0088\u00d8\u00b9 \u00d8\u00ac\u00d8\u00af\u00d9\u008a\u00d8\u00af:\",",
                "+    \"core-index/error-rename\": \"\u00d9\u0081\u00d8\u00b4\u00d9\u0084 \u00d9\u0081\u00d9\u008a \u00d8\u00a5\u00d8\u00b9\u00d8\u00a7\u00d8\u00af\u00d8\u00a9 \u00d8\u00aa\u00d8\u00b3\u00d9\u0085\u00d9\u008a\u00d8\u00a9 \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00b4\u00d8\u00b1\u00d9\u0088\u00d8\u00b9:\",",
                "+    \"core-index/no-proj\": \"\u00d9\u0084\u00d8\u00a7 \u00d9\u008a\u00d9\u0088\u00d8\u00ac\u00d8\u00af \u00d9\u0085\u00d8\u00b4\u00d8\u00b1\u00d9\u0088\u00d8\u00b9 \u00d9\u0082\u00d8\u00a7\u00d8\u00a6\u00d9\u0085.\u00d8\u00a7\u00d8\u00ae\u00d8\u00aa\u00d9\u008a\u00d8\u00a7\u00d8\u00b1 '' \u00d8\u00a5\u00d9\u0086\u00d8\u00b4\u00d8\u00a7\u00d8\u00a1 \u00d9\u0085\u00d8\u00b4\u00d8\u00b1\u00d9\u0088\u00d8\u00b9\\\" \u00d8\u00b9\u00d9\u0084\u00d9\u0089 \u00d8\u00a7\u00d9\u0084\u00d9\u008a\u00d8\u00b3\u00d8\u00a7\u00d8\u00b1 \u00d8\u00a5\u00d9\u0084\u00d9\u0089 \u00d8\u00a5\u00d9\u0086\u00d8\u00b4\u00d8\u00a7\u00d8\u00a1 \u00d9\u0085\u00d8\u00b4\u00d8\u00b1\u00d9\u0088\u00d8\u00b9 \u00d8\u00ac\u00d8\u00af\u00d9\u008a\u00d8\u00af.\",",
                "+    \"core-index/try-these\": \"\u00d8\u00a7\u00d8\u00b0\u00d8\u00a7 \u00d9\u0083\u00d9\u0086\u00d8\u00aa \u00d9\u0084\u00d8\u00a7 \u00d8\u00aa\u00d9\u0085\u00d9\u0084\u00d9\u0083 \u00d8\u00a7\u00d9\u008a \u00d8\u00a8\u00d9\u008a\u00d8\u00a7\u00d9\u0086\u00d8\u00a7\u00d8\u00aa \u00d9\u0084\u00d9\u0084\u00d8\u00b9\u00d9\u0085\u00d9\u0084 \u00d9\u0085\u00d9\u0086\u00d8\u008c \u00d8\u00ac\u00d8\u00b1\u00d8\u00a8 \u00d9\u0087\u00d8\u00b0\u00d9\u0087\",",
                "+    \"core-index/sample-data\": \"\u00d9\u0085\u00d8\u00ac\u00d9\u0085\u00d9\u0088\u00d8\u00b9\u00d8\u00a7\u00d8\u00aa \u00d8\u00a8\u00d9\u008a\u00d8\u00a7\u00d9\u0086\u00d8\u00a7\u00d8\u00aa \u00d8\u00a7\u00d9\u0084\u00d8\u00b9\u00d9\u008a\u00d9\u0086\u00d8\u00a9\",",
                "+    \"core-index/change-metadata-value\": \"\u00d8\u00aa\u00d8\u00ba\u00d9\u008a\u00d9\u008a\u00d8\u00b1 \u00d9\u0082\u00d9\u008a\u00d9\u0085\u00d8\u00a9 \u00d9\u0085\u00d9\u0081\u00d8\u00aa\u00d8\u00a7\u00d8\u00ad \u00d8\u00a7\u00d9\u0084\u00d8\u00a8\u00d9\u008a\u00d8\u00a7\u00d9\u0086\u00d8\u00a7\u00d8\u00aa \u00d8\u00a7\u00d9\u0084\u00d9\u0088\u00d8\u00b5\u00d9\u0081\u00d9\u008a\u00d8\u00a9\",",
                "+    \"core-index/name\": \"\u00d8\u00a7\u00d8\u00b3\u00d9\u0085 \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00b4\u00d8\u00b1\u00d9\u0088\u00d8\u00b9:\",",
                "+    \"core-index/created\": \"\u00d8\u00a5\u00d9\u0086\u00d8\u00b4\u00d8\u00a7\u00d8\u00a1 \u00d8\u00a7\u00d9\u0084\u00d9\u0088\u00d9\u0082\u00d8\u00aa:\",",
                "+    \"core-index/modified\": \"\u00d8\u00a2\u00d8\u00ae\u00d8\u00b1 \u00d8\u00aa\u00d8\u00ba\u00d9\u008a\u00d9\u008a\u00d8\u00b1:\",",
                "+    \"core-index/creator\": \"\u00d8\u00a7\u00d9\u0084\u00d8\u00ae\u00d8\u00a7\u00d9\u0084\u00d9\u0082:\",",
                "+    \"core-index/contributors\": \"\u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00b3\u00d8\u00a7\u00d9\u0087\u00d9\u0085\u00d9\u0088\u00d9\u0086:\",",
                "+    \"core-index/subject\": \"\u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d9\u0088\u00d8\u00b6\u00d9\u0088\u00d8\u00b9:\",",
                "+    \"core-index/description\": \"\u00d8\u00a7\u00d9\u0084\u00d9\u0088\u00d8\u00b5\u00d9\u0081:\",",
                "+    \"core-index/rowCount\": \"\u00d8\u00b9\u00d8\u00af\u00d8\u00af \u00d8\u00a7\u00d9\u0084\u00d8\u00b5\u00d9\u0081\u00d9\u0088\u00d9\u0081:\",",
                "+    \"core-index/metaDatas\": \"\u00d8\u00a7\u00d9\u0084\u00d8\u00a8\u00d9\u008a\u00d8\u00a7\u00d9\u0086\u00d8\u00a7\u00d8\u00aa \u00d8\u00a7\u00d9\u0084\u00d9\u0088\u00d8\u00b5\u00d9\u0081\u00d9\u008a\u00d8\u00a9 \u00d9\u0084\u00d9\u0084\u00d9\u0085\u00d8\u00b4\u00d8\u00b1\u00d9\u0088\u00d8\u00b9\",",
                "+    \"core-index/customMetadata\": \"\u00d8\u00a7\u00d9\u0084\u00d8\u00a8\u00d9\u008a\u00d8\u00a7\u00d9\u0086\u00d8\u00a7\u00d8\u00aa \u00d8\u00a7\u00d9\u0084\u00d9\u0088\u00d8\u00b5\u00d9\u0081\u00d9\u008a\u00d8\u00a9 \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00ae\u00d8\u00b5\u00d8\u00b5\u00d8\u00a9 (JSON):\",",
                "+    \"core-index/id\": \"\u00d9\u0087\u00d9\u0088\u00d9\u008a\u00d8\u00a9 \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00b4\u00d8\u00b1\u00d9\u0088\u00d8\u00b9:\"",
                "+}"
            ],
            "changed_files": [
                "main/webapp/modules/core/langs/translation-ar.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "bc80c3f5346f8b5daa0eda7a0c3625ebd5761ab7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543949803,
            "hunks": 2,
            "message": "Translated using Weblate (French) Currently translated at 99.6% (707 of 710 strings) Translation: OpenRefine/Translations Translate-URL: https://hosted.weblate.org/projects/openrefine/translations/fr/",
            "diff": [
                "diff --git a/main/webapp/modules/core/langs/translation-fr.json b/main/webapp/modules/core/langs/translation-fr.json",
                "index 57b023f85..2681e1371 100644",
                "--- a/main/webapp/modules/core/langs/translation-fr.json",
                "+++ b/main/webapp/modules/core/langs/translation-fr.json",
                "@@ -712,3 +712,4 @@",
                "     \"core-buttons/new-topic\": \"Nouveau sujet\",",
                "-    \"core-buttons/pick-record\": \"S\u00c3\u00a9lectionner les \u00c3\u00a9l\u00c3\u00a9ments des entr\u00c3\u00a9es\"",
                "-}",
                "\\ No newline at end of file",
                "+    \"core-buttons/pick-record\": \"S\u00c3\u00a9lectionner les \u00c3\u00a9l\u00c3\u00a9ments des entr\u00c3\u00a9es\",",
                "+    \"core-index/metaDatas\": \"M\u00c3\u00a9tadonn\u00c3\u00a9es du projet\"",
                "+}"
            ],
            "changed_files": [
                "main/webapp/modules/core/langs/translation-fr.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b796f63c04b306ab85f9e1e4c7a0a9aaacad9523",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544305704,
            "hunks": 1,
            "message": "fix issue when migrating to JDK9 as below $ mvn process-resources [INFO] Scanning for projects... Downloading from sonatype-snapshots: https://oss.sonatype.org/content/repositories/snapshots/org/openrefine/openrefine/3.1-SNAPSHOT/maven-metadata.xml Downloading from apache-snapshots: https://repository.apache.org/snapshots/org/openrefine/openrefine/3.1-SNAPSHOT/maven-metadata.xml Downloading from sonatype-snapshots: https://oss.sonatype.org/content/repositories/snapshots/org/openrefine/openrefine/3.1-SNAPSHOT/openrefine-3.1-SNAPSHOT.pom Downloading from apache-snapshots: https://repository.apache.org/snapshots/org/openrefine/openrefine/3.1-SNAPSHOT/openrefine-3.1-SNAPSHOT.pom [ERROR] [ERROR] Some problems were encountered while processing the POMs: [FATAL] Non-resolvable parent POM for org.openrefine:packaging:3.0: Could not find artifact org.openrefine:openrefine:pom:3.1-SNAPSHOT in sonatype-snapshots (https://oss.sonatype.org/content/repositories/snapshots/) and 'parent.relativePath' points at wrong local POM @ line 14, column 11  @  [ERROR] The build could not read 1 project -> [Help 1] [ERROR]    [ERROR]   The project org.openrefine:packaging:3.0 (/home/travis/build/OpenRefine/OpenRefine/packaging/pom.xml) has 1 error [ERROR]     Non-resolvable parent POM for org.openrefine:packaging:3.0: Could not find artifact org.openrefine:openrefine:pom:3.1-SNAPSHOT in sonatype-snapshots (https://oss.sonatype.org/content/repositories/snapshots/) and 'parent.relativePath' points at wrong local POM @ line 14, column 11 -> [Help 2] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException The command \"mvn process-resources\" failed and exited with 1 during .",
            "diff": [
                "diff --git a/packaging/travis_pom.xml b/packaging/travis_pom.xml",
                "index d1a63bbce..723df6b55 100644",
                "--- a/packaging/travis_pom.xml",
                "+++ b/packaging/travis_pom.xml",
                "@@ -12,8 +12,2 @@",
                "   <url>http://openrefine.org/</url>",
                "-",
                "-  <parent>",
                "-    <groupId>org.openrefine</groupId>",
                "-    <artifactId>openrefine</artifactId>",
                "-    <version>3.1-SNAPSHOT</version>",
                "-  </parent>",
                " </project>"
            ],
            "changed_files": [
                "packaging/travis_pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openrefine",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c80001a642ac3685a70b555d400b116d0c683da8",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542731978,
            "hunks": 2,
            "message": "Migrate SplitColumnCommand to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/column/SplitColumnCommand.java b/main/src/com/google/refine/commands/column/SplitColumnCommand.java",
                "index 4e95b22fe..0a9815e9a 100644",
                "--- a/main/src/com/google/refine/commands/column/SplitColumnCommand.java",
                "+++ b/main/src/com/google/refine/commands/column/SplitColumnCommand.java",
                "@@ -37,4 +37,3 @@ import javax.servlet.http.HttpServletRequest;",
                "-import org.json.JSONArray;",
                "-",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -70,8 +69,3 @@ public class SplitColumnCommand extends EngineDependentCommand {",
                "-            JSONArray a = ParsingUtilities.evaluateJsonStringToArray(s);",
                "-            int[] fieldLengths = new int[a.length()];",
                "-            ",
                "-            for (int i = 0; i < fieldLengths.length; i++) {",
                "-                fieldLengths[i] = a.getInt(i);",
                "-            }",
                "+            int[] fieldLengths = ParsingUtilities.mapper.readValue(s, new TypeReference<int[]>() {});"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/column/SplitColumnCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f3f6a2846be2f369a32aa0f65af62ec8cd025603"
                ],
                [
                    "no-tag",
                    "b88fd2b8954ec9df639b4bc74e003b2fbcb239c9"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6ba3969d988e5d94e4c8d25ddc871a44ad6ecbb7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542733538,
            "hunks": 8,
            "message": "Remove spurious references to org.json",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/HttpUtilities.java b/main/src/com/google/refine/commands/HttpUtilities.java",
                "index 6d7d9ddc5..7a82d8564 100644",
                "--- a/main/src/com/google/refine/commands/HttpUtilities.java",
                "+++ b/main/src/com/google/refine/commands/HttpUtilities.java",
                "@@ -13,4 +13,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.apache.velocity.VelocityContext;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -44,15 +42,11 @@ abstract public class HttpUtilities {",
                "         Writer w = response.getWriter();",
                "-        try {",
                "-            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "-            writer.writeStartObject();",
                "-            writer.writeStringField(\"status\", status);",
                "-            writer.writeStringField(\"message\", message);",
                "-            writer.writeEndObject();",
                "-            writer.flush();",
                "-            writer.close();",
                "-            w.flush();",
                "-            w.close();",
                "-        } catch (JSONException e) {",
                "-            // This can never occue",
                "-        }",
                "+        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "+        writer.writeStartObject();",
                "+        writer.writeStringField(\"status\", status);",
                "+        writer.writeStringField(\"message\", message);",
                "+        writer.writeEndObject();",
                "+        writer.flush();",
                "+        writer.close();",
                "+        w.flush();",
                "+        w.close();",
                "     }",
                "@@ -60,3 +54,3 @@ abstract public class HttpUtilities {",
                "     static public void respondJSON(HttpServletResponse response, Object o)",
                "-        throws IOException, JSONException {",
                "+        throws IOException  {",
                "@@ -67,3 +61,3 @@ abstract public class HttpUtilities {",
                "             HttpServletResponse response, Object o, Properties options)",
                "-            throws IOException, JSONException {",
                "+            throws IOException {",
                "@@ -87,26 +81,22 @@ abstract public class HttpUtilities {",
                "-        try {",
                "-            StringWriter sw = new StringWriter();",
                "-            PrintWriter pw = new PrintWriter(sw);",
                "-            e.printStackTrace(pw);",
                "-            pw.flush();",
                "-            sw.flush();",
                "-            ",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "+        StringWriter sw = new StringWriter();",
                "+        PrintWriter pw = new PrintWriter(sw);",
                "+        e.printStackTrace(pw);",
                "+        pw.flush();",
                "+        sw.flush();",
                "+        ",
                "+        response.setCharacterEncoding(\"UTF-8\");",
                "+        response.setHeader(\"Content-Type\", \"application/json\");",
                "-            Writer w = response.getWriter();",
                "-            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "-            writer.writeStartObject();",
                "-            writer.writeStringField(\"code\", \"error\");",
                "-            writer.writeStringField(\"message\", e.getMessage());",
                "-            writer.writeStringField(\"stack\", sw.toString());",
                "-            writer.writeEndObject();",
                "-            writer.flush();",
                "-            writer.close();",
                "-            w.flush();",
                "-            w.close();",
                "-        } catch (JSONException e1) {",
                "-            e.printStackTrace(response.getWriter());",
                "-        }",
                "+        Writer w = response.getWriter();",
                "+        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "+        writer.writeStartObject();",
                "+        writer.writeStringField(\"code\", \"error\");",
                "+        writer.writeStringField(\"message\", e.getMessage());",
                "+        writer.writeStringField(\"stack\", sw.toString());",
                "+        writer.writeEndObject();",
                "+        writer.flush();",
                "+        writer.close();",
                "+        w.flush();",
                "+        w.close();",
                "     }",
                "@@ -129,17 +119,2 @@ abstract public class HttpUtilities {",
                "-    static public JSONObject getJsonParameter(HttpServletRequest request, String name) {",
                "-        if (request == null) {",
                "-            throw new IllegalArgumentException(\"parameter 'request' should not be null\");",
                "-        }",
                "-        String value = request.getParameter(name);",
                "-        if (value != null) {",
                "-            try {",
                "-                return ParsingUtilities.evaluateJsonStringToObject(value);",
                "-            } catch (JSONException e) {",
                "-                logger.warn(\"Error getting json parameter\", e);",
                "-            }",
                "-        }",
                "-        return null;",
                "-    }",
                "-",
                "     static public void respondWithErrorPage(",
                "diff --git a/main/src/com/google/refine/model/Column.java b/main/src/com/google/refine/model/Column.java",
                "index 1e903742d..360fe8879 100644",
                "--- a/main/src/com/google/refine/model/Column.java",
                "+++ b/main/src/com/google/refine/model/Column.java",
                "@@ -37,3 +37,2 @@ import java.io.IOException;",
                " import java.io.Writer;",
                "-import java.lang.reflect.Method;",
                " import java.util.Collections;",
                "@@ -41,9 +40,2 @@ import java.util.HashMap;",
                " import java.util.Map;",
                "-import java.util.HashMap;",
                "-import java.util.Map;",
                "-import java.util.Properties;",
                "-",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONWriter;"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/HttpUtilities.java",
                "main/src/com/google/refine/model/Column.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b0e9e21a6bfa0b010cf01abffb74144da68a6667"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "de86a162fa639af34f5f17e0ed840bd5d9ef4c9b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544163339,
            "hunks": 0,
            "message": "Merge pull request #1891 from comradekingu/patch-1 Spelling: Regularcase, Form, ellipsis, -successfully",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1891": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1891",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a07f825aad6f9b451d754814e413377831bede39",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540204442,
            "hunks": 15,
            "message": "Jackson deserialization for ColumnAdditionByFetchingURLsOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "index f8f7cd4c8..daec11954 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "@@ -47,3 +47,2 @@ import java.util.concurrent.TimeUnit;",
                "-import org.json.JSONArray;",
                " import org.json.JSONException;",
                "@@ -51,2 +50,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -76,3 +76,2 @@ import com.google.refine.operations.EngineDependentOperation;",
                " import com.google.refine.operations.OnError;",
                "-import com.google.refine.operations.cell.TextTransformOperation;",
                " import com.google.refine.process.LongRunningProcess;",
                "@@ -89,3 +88,8 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "-        public HttpHeader(String name, String value) {",
                "+        @JsonCreator",
                "+        public HttpHeader(",
                "+                @JsonProperty(\"name\")",
                "+                String name,",
                "+                @JsonProperty(\"value\")",
                "+                String value) {",
                "             this.name = name;",
                "@@ -106,37 +110,24 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "     static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        ",
                "-        List<HttpHeader> headers = null;",
                "-        JSONArray headersJson = obj.optJSONArray(\"httpHeadersJson\");",
                "-        if (headersJson != null) {",
                "-            headers = new ArrayList<>(headersJson.length());",
                "-            for (int i = 0; i < headersJson.length(); i++) {",
                "-                String headerLabel = headersJson.getJSONObject(i).getString(\"name\");",
                "-                String headerValue = headersJson.getJSONObject(i).getString(\"value\");",
                "-                headers.add(new HttpHeader(headerLabel, headerValue));",
                "-            }",
                "-        }",
                "-",
                "-        return new ColumnAdditionByFetchingURLsOperation(",
                "-            EngineConfig.reconstruct(engineConfig),",
                "-            obj.getString(\"baseColumnName\"),",
                "-            obj.getString(\"urlExpression\"),",
                "-            TextTransformOperation.stringToOnError(obj.getString(\"onError\")),",
                "-            obj.getString(\"newColumnName\"),",
                "-            obj.getInt(\"columnInsertIndex\"),",
                "-            obj.getInt(\"delay\"),",
                "-            obj.optBoolean(\"cacheResponses\", false), // false for retro-compatibility",
                "-            headers // will be null if it doesn't exist for retro-compatibility",
                "-        );",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnAdditionByFetchingURLsOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public ColumnAdditionByFetchingURLsOperation(",
                "+        @JsonProperty(\"engineConfig\")",
                "         EngineConfig   engineConfig,",
                "+        @JsonProperty(\"baseColumnName\")",
                "         String         baseColumnName,",
                "+        @JsonProperty(\"urlExpression\")",
                "         String         urlExpression,",
                "+        @JsonProperty(\"onError\")",
                "         OnError        onError,",
                "+        @JsonProperty(\"newColumnName\")",
                "         String         newColumnName,",
                "+        @JsonProperty(\"columnInsertIndex\")",
                "         int            columnInsertIndex,",
                "+        @JsonProperty(\"delay\")",
                "         int            delay,",
                "+        @JsonProperty(\"cacheResponses\")",
                "         boolean        cacheResponses,",
                "+        @JsonProperty(\"httpHeadersJson\")",
                "         List<HttpHeader>      httpHeadersJson"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "332132d720d30cc7e6d4cb4123d9d0685e080690"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "408703f13c652027f978fec21c07a35f29275c67",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540199863,
            "hunks": 5,
            "message": "Jackson deserialization for ReconDiscardJudgmentsOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java b/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "index aeb49118b..e58fa16f6 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations.recon;",
                "+import java.io.IOException;",
                " import java.util.HashMap;",
                "@@ -41,2 +42,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -56,2 +58,3 @@ import com.google.refine.model.changes.ReconChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -60,12 +63,14 @@ public class ReconDiscardJudgmentsOperation extends EngineDependentMassCellOpera",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        return new ReconDiscardJudgmentsOperation(",
                "-            EngineConfig.reconstruct(engineConfig), ",
                "-            obj.getString(\"columnName\"),",
                "-            obj.has(\"clearData\") && obj.getBoolean(\"clearData\")",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconDiscardJudgmentsOperation.class);",
                "     }",
                "-    public ReconDiscardJudgmentsOperation(EngineConfig engineConfig, String columnName, boolean clearData) {",
                "+    @JsonCreator",
                "+    public ReconDiscardJudgmentsOperation(",
                "+            @JsonProperty(\"engineConfig\")",
                "+            EngineConfig engineConfig,",
                "+            @JsonProperty(\"columnName\")",
                "+            String columnName, ",
                "+            @JsonProperty(\"clearData\")",
                "+            boolean clearData) {",
                "         super(engineConfig, columnName, false);"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0cf8c2dd048c789d4b8bb6976be09df63ec9f3f7"
                ],
                [
                    "no-tag",
                    "8647e3d5866408305f57a38c91c3cac3484ad34d"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "82598ae1d5bcadfab84ea4fc2b8fb3cc6646be5d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543719587,
            "hunks": 3,
            "message": "Fix reconciliation result deserialization. Closes #1876.",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index da11a6ba5..34981f0a5 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -336,3 +336,3 @@ public class StandardReconConfig extends ReconConfig {",
                "     \tpublic String id;",
                "-    \t@JsonProperty(\"types\")",
                "+    \t@JsonProperty(\"type\")",
                " \t\tpublic List<ReconType> types = Collections.emptyList();",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java b/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "index 0019d5929..53d3e5373 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "@@ -22,2 +22,3 @@ import com.google.refine.model.recon.StandardReconConfig;",
                " import com.google.refine.model.recon.StandardReconConfig.ColumnDetail;",
                "+import com.google.refine.model.recon.StandardReconConfig.ReconResult;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -174,2 +175,15 @@ public class StandardReconConfigTests extends RefineTest {",
                "     }",
                "+    ",
                "+    @Test",
                "+    public void deserializeReconResult() throws JsonParseException, JsonMappingException, IOException {",
                "+    \tString json = \"{\\\"score\\\":100.0,\"",
                "+    \t\t\t+ \"\\\"match\\\":false,\"",
                "+    \t\t\t+ \"\\\"type\\\":[\"",
                "+    \t\t\t+ \"   {\\\"id\\\":\\\"Q17366755\\\",\"",
                "+    \t\t\t+ \"    \\\"name\\\":\\\"hamlet in Alberta\\\"}],\"",
                "+    \t\t\t+ \"\\\"id\\\":\\\"Q5136635\\\",\"",
                "+    \t\t\t+ \"\\\"name\\\":\\\"Cluny\\\"}\";",
                "+    \tReconResult rr = ParsingUtilities.mapper.readValue(json, ReconResult.class);",
                "+    \tassertEquals(rr.types.get(0).name, \"hamlet in Alberta\");",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1876": "Fix reconciliation result deserialization #1877"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1876",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "44c43253a12eead74c4c0c49c8db0735d69d8353",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543723085,
            "hunks": 5,
            "message": "Avoid localizing time for dates with unspecified time. Closes #1874.",
            "diff": [
                "diff --git a/main/src/com/google/refine/expr/functions/ToDate.java b/main/src/com/google/refine/expr/functions/ToDate.java",
                "index 2eecfe4b8..2466bd676 100644",
                "--- a/main/src/com/google/refine/expr/functions/ToDate.java",
                "+++ b/main/src/com/google/refine/expr/functions/ToDate.java",
                "@@ -39,2 +39,3 @@ import java.time.OffsetDateTime;",
                " import java.time.ZoneOffset;",
                "+import java.time.ZonedDateTime;",
                " import java.util.ArrayList;",
                "@@ -168,3 +169,5 @@ public class ToDate implements Function {",
                "             try {",
                "-                return javax.xml.bind.DatatypeConverter.parseDateTime(o1).getTime().toInstant().atOffset(ZoneOffset.of(\"Z\"));",
                "+                return javax.xml.bind.DatatypeConverter.parseDateTime(o1).getTime().toInstant()",
                "+                \t\t.plusSeconds(ZonedDateTime.now().getOffset().getTotalSeconds())",
                "+                \t\t.atOffset(ZoneOffset.of(\"Z\"));",
                "             } catch (IllegalArgumentException e2) {",
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java b/main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java",
                "index cb7f467c4..2fb4ab2d9 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java",
                "@@ -51,2 +51,3 @@ import com.google.refine.grel.Function;",
                " import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -163,6 +164,6 @@ public class ToFromConversionTests extends RefineTest {",
                "       //if invalid format/locale strings are passed, ignore them",
                "-      Assert.assertEquals(invoke(\"toDate\", \"2012-03-01\",\"XXX\"), CalendarParser.parseAsOffsetDateTime(\"2012-03-01\"));",
                "+      Assert.assertEquals(invoke(\"toDate\", \"2012-03-01\",\"XXX\"), invoke(\"toDate\", \"2012-03-01\"));",
                "       // If a long, convert to string",
                "-      Assert.assertEquals(invoke(\"toDate\", (long) 2012), CalendarParser.parseAsOffsetDateTime(\"2012-01-01\"));",
                "+      Assert.assertEquals(invoke(\"toDate\", (long) 2012), invoke(\"toDate\", \"2012-01-01\"));"
            ],
            "changed_files": [
                "main/src/com/google/refine/expr/functions/ToDate.java",
                "main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1874": "Avoid localizing time for dates with unspecified time. #1880 Refine tests fails for ProjectMetadataTests.serializeProjectMetadata #1881 3 Test error #1986"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1874",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a7c68f06ec514da131e7664b46ab04fd55fdff20",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544066672,
            "hunks": 3,
            "message": "Update Butterfly to 1.0.2. Closes #1882.",
            "diff": [
                "diff --git a/main/lib-local-src/butterfly-1.0.1-sources.jar b/main/lib-local-src/butterfly-1.0.1-sources.jar",
                "deleted file mode 100644",
                "index 9403aca25..000000000",
                "Binary files a/main/lib-local-src/butterfly-1.0.1-sources.jar and /dev/null differ",
                "diff --git a/main/lib-local-src/butterfly-1.0.2-sources.jar b/main/lib-local-src/butterfly-1.0.2-sources.jar",
                "new file mode 100644",
                "index 000000000..f7c3cfada",
                "Binary files /dev/null and b/main/lib-local-src/butterfly-1.0.2-sources.jar differ",
                "diff --git a/main/lib-local/butterfly-1.0.1.jar b/main/lib-local/butterfly-1.0.1.jar",
                "deleted file mode 100644",
                "index a59b5467f..000000000",
                "Binary files a/main/lib-local/butterfly-1.0.1.jar and /dev/null differ",
                "diff --git a/main/lib-local/butterfly-1.0.2.jar b/main/lib-local/butterfly-1.0.2.jar",
                "new file mode 100644",
                "index 000000000..0eb5479ec",
                "Binary files /dev/null and b/main/lib-local/butterfly-1.0.2.jar differ",
                "diff --git a/main/pom.xml b/main/pom.xml",
                "index cd7be95e9..02036061d 100644",
                "--- a/main/pom.xml",
                "+++ b/main/pom.xml",
                "@@ -158,3 +158,3 @@",
                "                 <configuration>",
                "-                    <file>${basedir}/lib-local/butterfly-1.0.1.jar</file>",
                "+                    <file>${basedir}/lib-local/butterfly-1.0.2.jar</file>",
                "                     <repositoryLayout>default</repositoryLayout>",
                "@@ -162,3 +162,3 @@",
                "                     <artifactId>butterfly</artifactId>",
                "-                    <version>1.0.1</version>",
                "+                    <version>1.0.2</version>",
                "                     <packaging>jar</packaging>",
                "@@ -271,3 +271,3 @@",
                "       <artifactId>butterfly</artifactId>",
                "-      <version>1.0.1</version>",
                "+      <version>1.0.2</version>",
                "     </dependency>"
            ],
            "changed_files": [
                "main/lib-local-src/butterfly-1.0.1-sources.jar",
                "main/lib-local-src/butterfly-1.0.2-sources.jar",
                "main/lib-local/butterfly-1.0.1.jar",
                "main/lib-local/butterfly-1.0.2.jar",
                "main/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1882": "Update Butterfly to 1.0.2. #1889 Butterfly classloader module isolation causes Jackson problems OpenRefine/simile-butterfly#15"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1882",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0d14df142719af3779570f4b0ba5bca14ca56c94",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542652265,
            "hunks": 9,
            "message": "Jackson deserialization for HistoryEntry",
            "diff": [
                "diff --git a/main/src/com/google/refine/history/HistoryEntry.java b/main/src/com/google/refine/history/HistoryEntry.java",
                "index 108df9416..cc46a2bc9 100644",
                "--- a/main/src/com/google/refine/history/HistoryEntry.java",
                "+++ b/main/src/com/google/refine/history/HistoryEntry.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.history;",
                "+import java.io.IOException;",
                " import java.io.Writer;",
                "@@ -40,3 +41,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -44,2 +44,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JacksonInject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -47,2 +49,4 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.annotation.JsonView;",
                "+import com.fasterxml.jackson.databind.InjectableValues;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                " import com.google.refine.ProjectManager;",
                "@@ -57,3 +61,3 @@ import com.google.refine.util.ParsingUtilities;",
                "  */",
                "-public class HistoryEntry  {",
                "+public class HistoryEntry {",
                "     final static Logger logger = LoggerFactory.getLogger(\"HistoryEntry\");",
                "@@ -95,2 +99,15 @@ public class HistoryEntry  {",
                "     }",
                "+    ",
                "+    @JsonCreator",
                "+    protected HistoryEntry(",
                "+    \t\t@JsonProperty(\"id\")",
                "+    \t\tlong id,",
                "+    \t\t@JacksonInject(\"projectID\")",
                "+    \t\tlong projectID,",
                "+    \t\t@JsonProperty(\"description\")",
                "+    \t\tString description,",
                "+    \t\t@JsonProperty(OPERATION)",
                "+    \t\tAbstractOperation operation) {",
                "+    \tthis(id,projectID,description,operation,OffsetDateTime.now(ZoneId.of(\"Z\")));",
                "+    }",
                "@@ -154,17 +171,9 @@ public class HistoryEntry  {",
                "-    static public HistoryEntry load(Project project, String s) throws Exception {",
                "-        JSONObject obj = ParsingUtilities.evaluateJsonStringToObject(s);",
                "-",
                "-        AbstractOperation operation = null;",
                "-        if (obj.has(OPERATION) && !obj.isNull(OPERATION)) {",
                "-            operation = ParsingUtilities.mapper.readValue(obj.getJSONObject(OPERATION).toString(), AbstractOperation.class);",
                "-        }",
                "-",
                "-        return new HistoryEntry(",
                "-            obj.getLong(\"id\"),",
                "-            project.id,",
                "-            obj.getString(\"description\"),",
                "-            operation,",
                "-            ParsingUtilities.stringToDate(obj.getString(\"time\"))",
                "-        );",
                "+    static public HistoryEntry load(Project project, String s) throws IOException {",
                "+    \tObjectMapper mapper = ParsingUtilities.mapper.copy();",
                "+    \tInjectableValues injection = new InjectableValues.Std()",
                "+\t\t\t\t.addValue(\"projectID\", project.id);",
                "+    \tmapper.setInjectableValues(injection);",
                "+    \t",
                "+    \treturn mapper.readValue(s, HistoryEntry.class);",
                "     }",
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index 39fd315e8..d5fdeb5e2 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -86,2 +86,3 @@ public class ParsingUtilities {",
                "         module.addSerializer(LocalDateTime.class, new SerializationFilters.LocalDateSerializer());",
                "+        module.addDeserializer(OffsetDateTime.class, new SerializationFilters.OffsetDateDeserializer());",
                "         module.addDeserializer(LocalDateTime.class, new SerializationFilters.LocalDateDeserializer());",
                "diff --git a/main/src/com/google/refine/util/SerializationFilters.java b/main/src/com/google/refine/util/SerializationFilters.java",
                "index e4482b7c4..89b883c03 100644",
                "--- a/main/src/com/google/refine/util/SerializationFilters.java",
                "+++ b/main/src/com/google/refine/util/SerializationFilters.java",
                "@@ -127,2 +127,16 @@ public class SerializationFilters {",
                "+    public static class OffsetDateDeserializer extends StdDeserializer<OffsetDateTime> {",
                "+        private static final long serialVersionUID = 93872874L;",
                "+",
                "+        public OffsetDateDeserializer() {",
                "+            super(OffsetDateTime.class);",
                "+        }",
                "+",
                "+\t\t@Override",
                "+\t\tpublic OffsetDateTime deserialize(JsonParser p, DeserializationContext ctxt)",
                "+\t\t\t\tthrows IOException, JsonProcessingException {",
                "+\t\t\treturn ParsingUtilities.stringToDate(p.getValueAsString());",
                "+\t\t}       ",
                "+    }",
                "+    ",
                "     public static class LocalDateDeserializer extends StdDeserializer<LocalDateTime> {"
            ],
            "changed_files": [
                "main/src/com/google/refine/history/HistoryEntry.java",
                "main/src/com/google/refine/util/ParsingUtilities.java",
                "main/src/com/google/refine/util/SerializationFilters.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6358a4aeb53bb852837d7d05cb3fe78048a288d0"
                ],
                [
                    "no-tag",
                    "487f6bc1314fb8a0a134eb0b34a07380ee0b14d6"
                ],
                [
                    "no-tag",
                    "52426b98a3c29434999fe4c4f41b60fd47173364"
                ],
                [
                    "no-tag",
                    "6ad6b45048df1e0bb5fc42ad15d860512c737d1c"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b9594ed76870ec7e90a28f671c7f26749987ff85",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543595500,
            "hunks": 1,
            "message": "Added translation using Weblate (Korean)",
            "diff": [
                "diff --git a/extensions/gdata/module/langs/translation-ko.json b/extensions/gdata/module/langs/translation-ko.json",
                "new file mode 100644",
                "index 000000000..0967ef424",
                "--- /dev/null",
                "+++ b/extensions/gdata/module/langs/translation-ko.json",
                "@@ -0,0 +1 @@",
                "+{}"
            ],
            "changed_files": [
                "extensions/gdata/module/langs/translation-ko.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d236e23c9530eb9f6c693446dee184b5f915fd0c"
                ],
                [
                    "no-tag",
                    "a50ec1fba56e8654520de8c185be01c0fe85da34"
                ],
                [
                    "no-tag",
                    "f62900da0a07adf79826dab16c4ca391ae2dcd70"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ba7879621db25f829d6d6cda677ad7ed9fe84b11",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540140799,
            "hunks": 4,
            "message": "Jackson deserialization for Project",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/Project.java b/main/src/com/google/refine/model/Project.java",
                "index 113e591d9..fee610280 100644",
                "--- a/main/src/com/google/refine/model/Project.java",
                "+++ b/main/src/com/google/refine/model/Project.java",
                "@@ -42,3 +42,2 @@ import java.io.OutputStreamWriter;",
                " import java.io.Writer;",
                "-import java.lang.reflect.Method;",
                " import java.time.LocalDateTime;",
                "@@ -50,3 +49,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -219,9 +217,6 @@ public class Project {",
                "                     try {",
                "-                        Method loadMethod = klass.getMethod(\"load\", Project.class, JSONObject.class);",
                "-                        JSONObject obj = ParsingUtilities.evaluateJsonStringToObject(value);",
                "-                    ",
                "-                        OverlayModel overlayModel = (OverlayModel) loadMethod.invoke(null, project, obj);",
                "+                        OverlayModel overlayModel = ParsingUtilities.mapper.readValue(value, klass);",
                "                         project.overlayModels.put(modelName, overlayModel);",
                "-                    } catch (Exception e) {",
                "+                    } catch (IOException e) {",
                "                         logger.error(\"Failed to load overlay model \" + modelName);"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/Project.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8f9004f7ee185f45dccd707406ce5dce2db84324"
                ],
                [
                    "no-tag",
                    "e11145ce0d7463590a9e7f683e1f4858c6bfa7d0"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a8cf844f9c9ebeeedff1459e4c8863b67fdd5a74",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544320636,
            "hunks": 6,
            "message": "fix issue #1900",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 88d977926..84177f6bf 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -19,3 +19,2 @@ env:",
                " before_install:",
                "-  - sudo apt-get install -y procps",
                "   - wget -O ~/codacy-coverage-reporter-assembly-latest.jar https://github.com/codacy/codacy-coverage-reporter/releases/download/2.0.0/codacy-coverage-reporter-2.0.0-assembly.jar",
                "diff --git a/extensions/database/pom.xml b/extensions/database/pom.xml",
                "index b36bb7ad5..bc4ed6d22 100644",
                "--- a/extensions/database/pom.xml",
                "+++ b/extensions/database/pom.xml",
                "@@ -179,3 +179,3 @@",
                "       <artifactId>mockito-core</artifactId>",
                "-      <version>2.8.9</version>",
                "+      <version>2.23.4</version>",
                "       <scope>test</scope>",
                "diff --git a/extensions/wikidata/pom.xml b/extensions/wikidata/pom.xml",
                "index 644de7c52..d11858f4b 100644",
                "--- a/extensions/wikidata/pom.xml",
                "+++ b/extensions/wikidata/pom.xml",
                "@@ -204,3 +204,3 @@",
                "       <artifactId>mockito-core</artifactId>",
                "-      <version>2.8.9</version>",
                "+      <version>2.23.4</version>",
                "       <scope>test</scope>",
                "diff --git a/main/pom.xml b/main/pom.xml",
                "index bea92fffa..57977f2d6 100644",
                "--- a/main/pom.xml",
                "+++ b/main/pom.xml",
                "@@ -63,6 +63,5 @@",
                "         <artifactId>maven-compiler-plugin</artifactId>",
                "-        <version>3.1</version>",
                "+        <version>3.8.0</version>",
                "         <configuration>",
                "-          <source>1.8</source>",
                "-          <target>1.8</target>",
                "+\t  <!--release>11</release-->",
                "           <encoding>UTF-8</encoding>",
                "@@ -456,3 +455,3 @@",
                "       <artifactId>mockito-core</artifactId>",
                "-      <version>2.8.9</version>",
                "+      <version>2.23.4</version>",
                "       <scope>test</scope>"
            ],
            "changed_files": [
                ".travis.yml",
                "extensions/database/pom.xml",
                "extensions/wikidata/pom.xml",
                "main/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1900": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1900",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9656ea3f8c83cf22376d406e5da074cd6150c871",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544616589,
            "hunks": 0,
            "message": "Merge pull request #1903 from ostephens/replace-smart-quotes Add Common transform which replaces smart quotes with ascii equivalent",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1903": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1903",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eeb25797f665131eb7bf29c2cf8847b026627681",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544069969,
            "hunks": 0,
            "message": "Merge pull request #1888 from ostephens/fix-reconcile-facets Fix Reconcile facets affected by change to list facet boolean handling",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1888": "Revert \"Fix Reconcile facets affected by change to list facet boolean handling\" #1969"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1888",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f08f4880068adf96242119cd95288ac5c695e82b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542733269,
            "hunks": 4,
            "message": "Migrate ColumnSplitChange to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/changes/ColumnSplitChange.java b/main/src/com/google/refine/model/changes/ColumnSplitChange.java",
                "index bb49a4c4a..8e1eaa15d 100644",
                "--- a/main/src/com/google/refine/model/changes/ColumnSplitChange.java",
                "+++ b/main/src/com/google/refine/model/changes/ColumnSplitChange.java",
                "@@ -44,5 +44,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONTokener;",
                "-",
                " import com.google.refine.ProjectManager;",
                "@@ -54,2 +51,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.model.Row;",
                "+import com.google.refine.util.ParsingUtilities;",
                " import com.google.refine.util.Pool;",
                "@@ -274,3 +272,3 @@ public class ColumnSplitChange implements Change {",
                "                 } else if (value instanceof String) {",
                "-                    writer.write(JSONObject.quote((String) value));",
                "+                    writer.write(ParsingUtilities.mapper.writeValueAsString((String) value));",
                "                 } else {",
                "@@ -363,6 +361,3 @@ public class ColumnSplitChange implements Change {",
                "-                        JSONTokener t = new JSONTokener(line);",
                "-                        Object o = t.nextValue();",
                "-                        ",
                "-                        tuple.add((o != JSONObject.NULL) ? (Serializable) o : null);",
                "+                        tuple.add((Serializable) ParsingUtilities.mapper.readValue(line, Object.class));",
                "                     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/changes/ColumnSplitChange.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f3f6a2846be2f369a32aa0f65af62ec8cd025603"
                ]
            ],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a8addbbe390371aa88e76e6842f0af00c4dc8784",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544316657,
            "hunks": 1,
            "message": "Attempt to fix issue #1990 travis fork issue",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 84177f6bf..88d977926 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -19,2 +19,3 @@ env:",
                " before_install:",
                "+  - sudo apt-get install -y procps",
                "   - wget -O ~/codacy-coverage-reporter-assembly-latest.jar https://github.com/codacy/codacy-coverage-reporter/releases/download/2.0.0/codacy-coverage-reporter-2.0.0-assembly.jar"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1990": "Fix JSON history corruption. #2026"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1990",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "54c7e28d8fdf2afef18b642b36c5cd760c35f017",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544306991,
            "hunks": 1,
            "message": "openjdk 9 was superseded by the 11 version http://jdk.java.net/9/",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 418c3707a..84177f6bf 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -5,3 +5,3 @@ jdk:",
                "   - oraclejdk9",
                "-  - openjdk9",
                "+  - openjdk11"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3271e53ecf5fb19e4b417f5b16bcf200e0e52b2b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540200459,
            "hunks": 15,
            "message": "Jackson deserialization for ReconJudgeSimilarCellsOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java b/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "index 18521988b..561fffcce 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "@@ -35,3 +35,4 @@ package com.google.refine.operations.recon;",
                "- import java.util.HashMap;",
                "+ import java.io.IOException;",
                "+import java.util.HashMap;",
                " import java.util.List;",
                "@@ -39,6 +40,5 @@ import java.util.Map;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                " import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                "@@ -63,2 +63,3 @@ import com.google.refine.model.recon.ReconConfig;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -70,45 +71,20 @@ public class ReconJudgeSimilarCellsOperation extends EngineDependentMassCellOper",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws JSONException {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        ",
                "-        ReconCandidate match = null;",
                "-        if (obj.has(\"match\")) {",
                "-            JSONObject matchObj = obj.getJSONObject(\"match\");",
                "-            ",
                "-            JSONArray types = matchObj.getJSONArray(\"types\");",
                "-            String[] typeIDs = new String[types.length()];",
                "-            for (int i = 0; i < typeIDs.length; i++) {",
                "-                typeIDs[i] = types.getString(i);",
                "-            }",
                "-            ",
                "-            match = new ReconCandidate(",
                "-                matchObj.getString(\"id\"),",
                "-                matchObj.getString(\"name\"),",
                "-                typeIDs,",
                "-                matchObj.getDouble(\"score\")",
                "-            );",
                "-        }",
                "-        ",
                "-        Judgment judgment = Judgment.None;",
                "-        if (obj.has(\"judgment\")) {",
                "-            judgment = Recon.stringToJudgment(obj.getString(\"judgment\"));",
                "-        }",
                "-        ",
                "-        return new ReconJudgeSimilarCellsOperation(",
                "-            EngineConfig.reconstruct(engineConfig),",
                "-            obj.getString(\"columnName\"),",
                "-            obj.getString(\"similarValue\"),",
                "-            judgment,",
                "-            match,",
                "-            obj.has(\"shareNewTopics\") ? obj.getBoolean(\"shareNewTopics\") : false",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconJudgeSimilarCellsOperation.class);",
                "     }",
                "-    ",
                "+   ",
                "+    @JsonCreator",
                "     public ReconJudgeSimilarCellsOperation(",
                "-        EngineConfig         engineConfig, ",
                "-        String             columnName, ",
                "+        @JsonProperty(\"engineConfig\")",
                "+        EngineConfig         engineConfig,",
                "+        @JsonProperty(\"columnName\")",
                "+        String             columnName,",
                "+        @JsonProperty(\"similarValue\")",
                "         String             similarValue,",
                "+        @JsonProperty(\"judgment\")",
                "         Judgment        judgment,",
                "+        @JsonProperty(\"match\")",
                "         ReconCandidate     match,",
                "-        boolean            shareNewTopics",
                "+        @JsonProperty(\"shareNewTopics\")",
                "+        Boolean            shareNewTopics",
                "     ) {",
                "@@ -118,3 +94,3 @@ public class ReconJudgeSimilarCellsOperation extends EngineDependentMassCellOper",
                "         this._match = match;",
                "-        this._shareNewTopics = shareNewTopics;",
                "+        this._shareNewTopics = shareNewTopics == null ? false : shareNewTopics;",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "index 79075a6fa..8587fa417 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "@@ -6,2 +6,3 @@ import static org.mockito.Mockito.mock;",
                "+import java.io.IOException;",
                " import java.util.Collections;",
                "@@ -9,3 +10,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.json.JSONObject;",
                "@@ -41,3 +41,3 @@ public class ReconJudgeSimilarCellsTests extends RefineTest {",
                "     @Test",
                "-    public void serializeReconJudgeSimilarCellsOperation() throws JSONException {",
                "+    public void serializeReconJudgeSimilarCellsOperation() throws  IOException {",
                "         String json = \"{\\\"op\\\":\\\"core/recon-judge-similar-cells\\\",\"",
                "@@ -52,2 +52,16 @@ public class ReconJudgeSimilarCellsTests extends RefineTest {",
                "+    @Test",
                "+    public void serializeReconJudgeSimilarCellsOperationMatch() throws  IOException {",
                "+        String json = \"{\\\"op\\\":\\\"core/recon-judge-similar-cells\\\",\"",
                "+                + \"\\\"description\\\":\\\"Match item Douglas Adams (Q42) for cells containing \\\\\\\"foo\\\\\\\" in column A\\\",\"",
                "+                + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]},\"",
                "+                + \"\\\"columnName\\\":\\\"A\\\",\"",
                "+                + \"\\\"similarValue\\\":\\\"foo\\\",\"",
                "+                + \"\\\"judgment\\\":\\\"matched\\\",\"",
                "+                + \"\\\"match\\\":{\\\"id\\\":\\\"Q42\\\",\\\"name\\\":\\\"Douglas Adams\\\",\\\"types\\\":[\\\"Q5\\\"],\\\"score\\\":85},\"",
                "+                + \"\\\"shareNewTopics\\\":false\"",
                "+                + \"}\";",
                "+        TestUtils.isSerializedTo(ReconJudgeSimilarCellsOperation.reconstruct(mock(Project.class), new JSONObject(json)), json);",
                "+    }",
                "+    ",
                "     @Test"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a70c31089b2e7664352edfbec7940f9bd0ae283c",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543606704,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2c5607b9faba21746f4b84bd52b227c958d6f37a",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542644408,
            "hunks": 2,
            "message": "Add missing dependencies after removal of datapackage libs",
            "diff": [
                "diff --git a/main/pom.xml b/main/pom.xml",
                "index 7bfba4691..1ce81a8af 100644",
                "--- a/main/pom.xml",
                "+++ b/main/pom.xml",
                "@@ -319,5 +319,10 @@",
                "     <dependency>",
                "-        <groupId>commons-collections</groupId>",
                "-        <artifactId>commons-collections</artifactId>",
                "-        <version>3.2.2</version>",
                "+      <groupId>commons-collections</groupId>",
                "+      <artifactId>commons-collections</artifactId>",
                "+      <version>3.2.2</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>commons-validator</groupId>",
                "+      <artifactId>commons-validator</artifactId>",
                "+      <version>1.5.1</version>",
                "     </dependency>",
                "@@ -438,2 +443,7 @@",
                "     </dependency>",
                "+    <dependency>",
                "+      <groupId>com.google.guava</groupId>",
                "+      <artifactId>guava</artifactId>",
                "+      <version>19.0</version>",
                "+    </dependency>"
            ],
            "changed_files": [
                "main/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fb584e0b5f78e970e39c4a5215f563850e73e7f9",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540200963,
            "hunks": 4,
            "message": "Jackson deserialization for ReconMatchBestCandidatesOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java b/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "index 9819ecef1..46aaf45d9 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "@@ -41,2 +41,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -57,2 +58,3 @@ import com.google.refine.model.changes.ReconChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -60,12 +62,11 @@ public class ReconMatchBestCandidatesOperation extends EngineDependentMassCellOp",
                "     static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        String columnName = obj.getString(\"columnName\");",
                "-        ",
                "-        return new ReconMatchBestCandidatesOperation(",
                "-            EngineConfig.reconstruct(engineConfig), ",
                "-            columnName",
                "-        );",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconMatchBestCandidatesOperation.class);",
                "     }",
                "-    public ReconMatchBestCandidatesOperation(EngineConfig engineConfig, String columnName) {",
                "+    @JsonCreator",
                "+    public ReconMatchBestCandidatesOperation(",
                "+            @JsonProperty(\"engineConfig\")",
                "+            EngineConfig engineConfig,",
                "+            @JsonProperty(\"columnName\")",
                "+            String columnName) {",
                "         super(engineConfig, columnName, false);"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "393eec15867a5375343f7157a3a4b34cfba6b340",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540199270,
            "hunks": 38,
            "message": "Jackson deserialization for EngineConfig",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/EngineConfig.java b/main/src/com/google/refine/browsing/EngineConfig.java",
                "index b0af26097..3e9a4c4e4 100644",
                "--- a/main/src/com/google/refine/browsing/EngineConfig.java",
                "+++ b/main/src/com/google/refine/browsing/EngineConfig.java",
                "@@ -2,9 +2,9 @@ package com.google.refine.browsing;",
                "+import java.io.IOException;",
                " import java.util.Collections;",
                "-import java.util.LinkedList;",
                " import java.util.List;",
                "-import org.json.JSONArray;",
                " import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -13,7 +13,3 @@ import com.google.refine.browsing.Engine.Mode;",
                " import com.google.refine.browsing.facets.FacetConfig;",
                "-import com.google.refine.browsing.facets.ListFacet.ListFacetConfig;",
                "-import com.google.refine.browsing.facets.RangeFacet.RangeFacetConfig;",
                "-import com.google.refine.browsing.facets.ScatterplotFacet.ScatterplotFacetConfig;",
                "-import com.google.refine.browsing.facets.TextSearchFacet.TextSearchFacetConfig;",
                "-import com.google.refine.browsing.facets.TimeRangeFacet.TimeRangeFacetConfig;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -25,5 +21,10 @@ public class EngineConfig  {",
                "-    public EngineConfig(List<FacetConfig> facets, Mode mode) {",
                "-        _facets = facets;",
                "-        _mode = mode;",
                "+    @JsonCreator",
                "+    public EngineConfig(",
                "+            @JsonProperty(\"facets\")",
                "+            List<FacetConfig> facets,",
                "+            @JsonProperty(\"mode\")",
                "+            Mode mode) {",
                "+        _facets = facets == null ? Collections.emptyList() : facets;",
                "+        _mode = mode == null ? Mode.RowBased : mode;",
                "     }",
                "@@ -41,46 +42,11 @@ public class EngineConfig  {",
                "     public static EngineConfig reconstruct(JSONObject o) {",
                "-        if (o == null) {",
                "+        if(o == null) {",
                "             return new EngineConfig(Collections.emptyList(), Mode.RowBased);",
                "         }",
                "-",
                "-        List<FacetConfig> facets = new LinkedList<>();",
                "-        if (o.has(\"facets\") && !o.isNull(\"facets\")) {",
                "-            JSONArray a = o.getJSONArray(\"facets\");",
                "-            int length = a.length();",
                "-",
                "-            for (int i = 0; i < length; i++) {",
                "-                JSONObject fo = a.getJSONObject(i);",
                "-                String type = fo.has(\"type\") ? fo.getString(\"type\") : \"list\";",
                "-",
                "-                FacetConfig facet = null;",
                "-                if (\"list\".equals(type)) {",
                "-                    facet = new ListFacetConfig();",
                "-                } else if (\"range\".equals(type)) {",
                "-                    facet = new RangeFacetConfig();",
                "-                } else if (\"timerange\".equals(type)) {",
                "-                    facet = new TimeRangeFacetConfig();",
                "-                } else if (\"scatterplot\".equals(type)) {",
                "-                    facet = new ScatterplotFacetConfig();",
                "-                } else if (\"text\".equals(type)) {",
                "-                    facet = new TextSearchFacetConfig();",
                "-                }",
                "-",
                "-                if (facet != null) {",
                "-                    facet.initializeFromJSON(fo);",
                "-                    facets.add(facet);",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        Mode mode = Mode.RowBased;",
                "-        // for backward compatibility",
                "-        if (o.has(Engine.INCLUDE_DEPENDENT) && !o.isNull(Engine.INCLUDE_DEPENDENT)) {",
                "-            mode = o.getBoolean(Engine.INCLUDE_DEPENDENT) ? Mode.RecordBased : Mode.RowBased;",
                "-        }",
                "-",
                "-        if (o.has(Engine.MODE) && !o.isNull(Engine.MODE)) {",
                "-            mode = Engine.MODE_ROW_BASED.equals(o.getString(Engine.MODE)) ? Mode.RowBased : Mode.RecordBased;",
                "+        try {",
                "+            return ParsingUtilities.mapper.readValue(o.toString(), EngineConfig.class);",
                "+        } catch (IOException e) {",
                "+            e.printStackTrace();",
                "+            return null;",
                "         }",
                "-        ",
                "-        return new EngineConfig(facets, mode);",
                "     }",
                "diff --git a/main/src/com/google/refine/browsing/facets/FacetConfig.java b/main/src/com/google/refine/browsing/facets/FacetConfig.java",
                "index 22f07e39c..07ffc9156 100644",
                "--- a/main/src/com/google/refine/browsing/facets/FacetConfig.java",
                "+++ b/main/src/com/google/refine/browsing/facets/FacetConfig.java",
                "@@ -2,5 +2,6 @@ package com.google.refine.browsing.facets;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonSubTypes;",
                "+import com.fasterxml.jackson.annotation.JsonSubTypes.Type;",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo;",
                "@@ -15,12 +16,16 @@ import com.google.refine.model.Project;",
                "  * ",
                "- * @author antonin",
                "+ * @author Antonin Delpeuch",
                "  *",
                "  */",
                "-public interface FacetConfig  {",
                "-    /**",
                "-     * Reads the facet configuration from a JSON object (will be removed once we migrate to Jackson)",
                "-     * @param fo",
                "-     */",
                "-    public void initializeFromJSON(JSONObject fo);",
                "-    ",
                "+@JsonTypeInfo(",
                "+        use=JsonTypeInfo.Id.NAME,",
                "+        include=JsonTypeInfo.As.PROPERTY,",
                "+        property=\"type\")",
                "+@JsonSubTypes({",
                "+    @Type(value = ListFacet.ListFacetConfig.class, name = \"list\"),",
                "+    @Type(value = RangeFacet.RangeFacetConfig.class, name = \"range\"),",
                "+    @Type(value = TimeRangeFacet.TimeRangeFacetConfig.class, name = \"timerange\"),",
                "+    @Type(value = TextSearchFacet.TextSearchFacetConfig.class, name = \"text\"),",
                "+    @Type(value = ScatterplotFacet.ScatterplotFacetConfig.class, name = \"scatterplot\") })",
                "+public interface FacetConfig  {   ",
                "     /**",
                "diff --git a/main/src/com/google/refine/browsing/facets/FacetConfigResolver.java b/main/src/com/google/refine/browsing/facets/FacetConfigResolver.java",
                "new file mode 100644",
                "index 000000000..0cfac814c",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/browsing/facets/FacetConfigResolver.java",
                "@@ -0,0 +1,36 @@",
                "+package com.google.refine.browsing.facets;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;",
                "+import com.fasterxml.jackson.databind.DatabindContext;",
                "+import com.fasterxml.jackson.databind.JavaType;",
                "+import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;",
                "+import com.fasterxml.jackson.databind.type.TypeFactory;",
                "+",
                "+import com.google.refine.model.recon.ReconConfig;",
                "+",
                "+public class FacetConfigResolver extends TypeIdResolverBase {",
                "+    ",
                "+    protected TypeFactory factory = TypeFactory.defaultInstance();",
                "+",
                "+    @Override",
                "+    public Id getMechanism() {",
                "+        return Id.NAME;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String idFromValue(Object instance) {",
                "+        return ((ReconConfig)instance).getMode();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String idFromValueAndType(Object instance, Class<?> type) {",
                "+        return ReconConfig.s_opClassToName.get(type);",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public JavaType typeFromId(DatabindContext context, String id) throws IOException {",
                "+        return factory.constructSimpleType(ReconConfig.getClassFromMode(id), new JavaType[0]);",
                "+    }",
                "+}",
                "diff --git a/main/src/com/google/refine/browsing/facets/ListFacet.java b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "index 768b287a1..f1f2ebff9 100644",
                "--- a/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "@@ -39,5 +39,2 @@ import java.util.stream.Collectors;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -63,3 +60,2 @@ import com.google.refine.model.Column;",
                " import com.google.refine.model.Project;",
                "-import com.google.refine.util.JSONUtilities;",
                "@@ -127,32 +123,2 @@ public class ListFacet implements Facet {",
                "-        @Override",
                "-        public void initializeFromJSON(JSONObject o) {",
                "-            name = o.getString(\"name\");",
                "-            expression = o.getString(\"expression\");",
                "-            columnName = o.getString(\"columnName\");",
                "-            invert = o.has(\"invert\") && o.getBoolean(\"invert\");",
                "-                      ",
                "-            JSONArray a = o.getJSONArray(\"selection\");",
                "-            int length = a.length();",
                "-            ",
                "-            for (int i = 0; i < length; i++) {",
                "-                JSONObject oc = a.getJSONObject(i);",
                "-                JSONObject ocv = oc.getJSONObject(\"v\");",
                "-                ",
                "-                DecoratedValue decoratedValue = new DecoratedValue(",
                "-                    ocv.get(\"v\"), ocv.getString(\"l\"));",
                "-                ",
                "-                selection.add(decoratedValue);",
                "-            }",
                "-            ",
                "-            omitBlank = JSONUtilities.getBoolean(o, \"omitBlank\", false);",
                "-            omitError = JSONUtilities.getBoolean(o, \"omitError\", false);",
                "-            ",
                "-            selectNumber = JSONUtilities.getBoolean(o, \"selectNumber\", false);",
                "-            selectDateTime = JSONUtilities.getBoolean(o, \"selectDateTime\", false);",
                "-            selectBoolean = JSONUtilities.getBoolean(o, \"selectBoolean\", false);",
                "-            selectBlank = JSONUtilities.getBoolean(o, \"selectBlank\", false);",
                "-            selectError = JSONUtilities.getBoolean(o, \"selectError\", false);",
                "-        }",
                "-        ",
                "         @Override",
                "diff --git a/main/src/com/google/refine/browsing/facets/RangeFacet.java b/main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "index 0915c4f2b..4e978849a 100644",
                "--- a/main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "@@ -35,4 +35,2 @@ package com.google.refine.browsing.facets;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -60,3 +58,2 @@ import com.google.refine.model.Column;",
                " import com.google.refine.model.Project;",
                "-import com.google.refine.util.JSONUtilities;",
                "@@ -127,22 +124,2 @@ public class RangeFacet implements Facet {",
                "-        @Override",
                "-        public void initializeFromJSON(JSONObject o) {",
                "-            _name = o.getString(\"name\");",
                "-            _expression = o.getString(\"expression\");",
                "-            _columnName = o.getString(\"columnName\");",
                "-            if (o.has(FROM) || o.has(TO)) {",
                "-                _from = o.has(FROM) ? o.getDouble(FROM) : 0;",
                "-                _to = o.has(TO) ? o.getDouble(TO) : 0;",
                "-                _selected = true;",
                "-            }",
                "-            _selectNumeric = JSONUtilities.getBoolean(o, \"selectNumeric\", true);",
                "-            _selectNonNumeric = JSONUtilities.getBoolean(o, \"selectNonNumeric\", true);",
                "-            _selectBlank = JSONUtilities.getBoolean(o, \"selectBlank\", true);",
                "-            _selectError = JSONUtilities.getBoolean(o, \"selectError\", true);",
                "-            ",
                "-            if (!_selectNumeric || !_selectNonNumeric || !_selectBlank || !_selectError) {",
                "-                _selected = true;",
                "-            }",
                "-        }",
                "-        ",
                "         @Override",
                "diff --git a/main/src/com/google/refine/browsing/facets/ScatterplotFacet.java b/main/src/com/google/refine/browsing/facets/ScatterplotFacet.java",
                "index 5d5685b55..f2f3d3243 100644",
                "--- a/main/src/com/google/refine/browsing/facets/ScatterplotFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/ScatterplotFacet.java",
                "@@ -46,3 +46,2 @@ import javax.imageio.ImageIO;",
                " import org.apache.commons.codec.binary.Base64;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -113,5 +112,7 @@ public class ScatterplotFacet implements Facet {",
                "         @JsonIgnore",
                "-        protected String color_str;",
                "+        protected String color_str = \"000000\";",
                "         @JsonIgnore",
                "-        protected Color color;",
                "+        protected Color getColor() {",
                "+            return new Color(Integer.parseInt(color_str,16));",
                "+        }",
                "@@ -149,39 +150,2 @@ public class ScatterplotFacet implements Facet {",
                "-        @Override",
                "-        public void initializeFromJSON(JSONObject o) {",
                "-            name = o.getString(NAME);",
                "-            l = size = (o.has(SIZE)) ? o.getInt(SIZE) : 100;",
                "-            dot = (o.has(DOT)) ? o.getInt(DOT) : 0.5d;",
                "-            ",
                "-            dim_x = (o.has(DIM_X)) ? getAxisDim(o.getString(DIM_X)) : LIN;",
                "-            if (o.has(FROM_X) && o.has(TO_X)) {",
                "-                from_x = o.getDouble(FROM_X);",
                "-                to_x = o.getDouble(TO_X);",
                "-            } else {",
                "-                from_x = 0;",
                "-                to_x = 1;",
                "-            }",
                "-            ",
                "-            dim_y = (o.has(DIM_Y)) ? getAxisDim(o.getString(DIM_Y)) : LIN;",
                "-            if (o.has(FROM_Y) && o.has(TO_Y)) {",
                "-                from_y = o.getDouble(FROM_Y);",
                "-                to_y = o.getDouble(TO_Y);",
                "-            } else {",
                "-                from_y = 0;",
                "-                to_y = 1;",
                "-            }",
                "-            ",
                "-            rotation_str = (o.has(ROTATION) ? o.getString(ROTATION) : \"\");",
                "-            rotation = getRotation(rotation_str);",
                "-            ",
                "-            color_str = (o.has(COLOR)) ? o.getString(COLOR) : \"000000\";",
                "-            color = new Color(Integer.parseInt(color_str,16));",
                "-            ",
                "-            columnName_x = o.getString(X_COLUMN_NAME);",
                "-            expression_x = o.getString(X_EXPRESSION);",
                "-            ",
                "-            columnName_y = o.getString(Y_COLUMN_NAME);",
                "-            expression_y = o.getString(Y_EXPRESSION);",
                "-        }",
                "-        ",
                "         public static int getRotation(String rotation) {",
                "@@ -471,3 +435,3 @@ public class ScatterplotFacet implements Facet {",
                "                       columnIndex_x, columnIndex_y, min_x, max_x, min_y, max_y, ",
                "-                      config.size, config.dim_x, config.dim_y, config.rotation, config.dot, config.color",
                "+                      config.size, config.dim_x, config.dim_y, config.rotation, config.dot, config.getColor()",
                "                     );",
                "@@ -502,3 +466,3 @@ public class ScatterplotFacet implements Facet {",
                "                       columnIndex_x, columnIndex_y, min_x, max_x, min_y, max_y, ",
                "-                      config.size, config.dim_x, config.dim_y, config.rotation, config.dot, config.color",
                "+                      config.size, config.dim_x, config.dim_y, config.rotation, config.dot, config.getColor()",
                "                     );",
                "diff --git a/main/src/com/google/refine/browsing/facets/TextSearchFacet.java b/main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "index 5e3780e2a..4a5ea6733 100644",
                "--- a/main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "@@ -38,3 +38,2 @@ import java.util.regex.Pattern;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "@@ -80,14 +79,2 @@ public class TextSearchFacet implements Facet {",
                "-        @Override",
                "-        public void initializeFromJSON(JSONObject o) {",
                "-            _name = o.getString(\"name\");",
                "-            _columnName = o.getString(\"columnName\");",
                "-            _mode = o.getString(\"mode\");",
                "-            _caseSensitive = o.getBoolean(\"caseSensitive\");",
                "-            if (!o.isNull(\"query\")) {",
                "-                _query = o.getString(\"query\"); ",
                "-            }",
                "-            _invert = o.has(\"invert\") && o.getBoolean(\"invert\");",
                "-        }",
                "-",
                "         @Override",
                "diff --git a/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java b/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "index 38afab3c1..63ecfcc39 100644",
                "--- a/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "@@ -35,5 +35,2 @@ package com.google.refine.browsing.facets;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -60,3 +57,2 @@ import com.google.refine.model.Column;",
                " import com.google.refine.model.Project;",
                "-import com.google.refine.util.JSONUtilities;",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "index f462f4710..200134d6f 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "@@ -4,3 +4,2 @@ import java.io.IOException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.Test;",
                "@@ -67,5 +66,4 @@ public class ListFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeListFacetConfig() {",
                "-        ListFacetConfig facetConfig = new ListFacetConfig();",
                "-        facetConfig.initializeFromJSON(new JSONObject(jsonConfig));",
                "+    public void serializeListFacetConfig() throws JsonParseException, JsonMappingException, IOException {",
                "+        ListFacetConfig facetConfig = ParsingUtilities.mapper.readValue(jsonConfig, ListFacetConfig.class);",
                "         TestUtils.isSerializedTo(facetConfig, jsonConfig);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/ScatterplotFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/ScatterplotFacetTests.java",
                "index 6c0c0b3c0..29e7e9112 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/ScatterplotFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/ScatterplotFacetTests.java",
                "@@ -2,5 +2,9 @@ package com.google.refine.tests.browsing.facets;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+",
                " import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -12,2 +16,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -50,5 +55,4 @@ public class ScatterplotFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeScatterplotFacetConfig() {",
                "-        ScatterplotFacetConfig config = new ScatterplotFacetConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+    public void serializeScatterplotFacetConfig() throws JsonParseException, JsonMappingException, IOException {",
                "+        ScatterplotFacetConfig config = ParsingUtilities.mapper.readValue(configJson, ScatterplotFacetConfig.class);",
                "         TestUtils.isSerializedTo(config, configJson);",
                "@@ -57,3 +61,3 @@ public class ScatterplotFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeScatterplotFacet() {",
                "+    public void serializeScatterplotFacet() throws JsonParseException, JsonMappingException, IOException {",
                "         Project project = createCSVProject(\"my column,e\\n\"",
                "@@ -71,4 +75,3 @@ public class ScatterplotFacetTests extends RefineTest {",
                "-        ScatterplotFacetConfig config = new ScatterplotFacetConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+        ScatterplotFacetConfig config = ParsingUtilities.mapper.readValue(configJson, ScatterplotFacetConfig.class);"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/EngineConfig.java",
                "main/src/com/google/refine/browsing/facets/FacetConfig.java",
                "main/src/com/google/refine/browsing/facets/FacetConfigResolver.java",
                "main/src/com/google/refine/browsing/facets/ListFacet.java",
                "main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "main/src/com/google/refine/browsing/facets/ScatterplotFacet.java",
                "main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/ScatterplotFacetTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "59175daf38a19f10017349ad756cca6274ef8f33",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542727269,
            "hunks": 26,
            "message": "Migrate GuessTypesOfColumnCommand to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java b/main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java",
                "index 2600e36f3..7e747706f 100644",
                "--- a/main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java",
                "@@ -45,2 +45,3 @@ import java.util.HashMap;",
                " import java.util.HashSet;",
                "+import java.util.Iterator;",
                " import java.util.List;",
                "@@ -53,6 +54,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                "@@ -60,2 +57,6 @@ import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.commands.Command;",
                "@@ -64,3 +65,5 @@ import com.google.refine.model.Column;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.model.ReconType;",
                " import com.google.refine.model.Row;",
                "+import com.google.refine.model.recon.StandardReconConfig.ReconResult;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -68,4 +71,3 @@ import com.google.refine.util.ParsingUtilities;",
                " public class GuessTypesOfColumnCommand extends Command {",
                "-    ",
                "-    ",
                "+     ",
                "     protected static class TypesResponse {",
                "@@ -137,3 +139,3 @@ public class GuessTypesOfColumnCommand extends Command {",
                "     protected List<TypeGroup> guessTypes(Project project, Column column, String serviceUrl)",
                "-            throws JSONException, IOException {",
                "+            throws IOException {",
                "         Map<String, TypeGroup> map = new HashMap<String, TypeGroup>();",
                "@@ -195,12 +197,8 @@ public class GuessTypesOfColumnCommand extends Command {",
                "                     String s = ParsingUtilities.inputStreamToString(is);",
                "-                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);",
                "-",
                "-                    for (int i = 0; i < samples.size(); i++) {",
                "-                        String key = \"q\" + i;",
                "-                        if (!o.has(key)) {",
                "-                            continue;",
                "-                        }",
                "+                    ObjectNode o = ParsingUtilities.evaluateJsonStringToObjectNode(s);",
                "-                        JSONObject o2 = o.getJSONObject(key);",
                "-                        if (!(o2.has(\"result\"))) {",
                "+                    Iterator<JsonNode> iterator = o.iterator();",
                "+                    while (iterator.hasNext()) {",
                "+                        JsonNode o2 = iterator.next();",
                "+                        if (!(o2.has(\"result\") && o2.get(\"result\") instanceof ArrayNode)) {",
                "                             continue;",
                "@@ -208,27 +206,18 @@ public class GuessTypesOfColumnCommand extends Command {",
                "-                        JSONArray results = o2.getJSONArray(\"result\");",
                "-                        int count = results.length();",
                "+                        ArrayNode results = (ArrayNode) o2.get(\"result\");",
                "+                        List<ReconResult> reconResults = ParsingUtilities.mapper.convertValue(results, new TypeReference<List<ReconResult>>() {});",
                "+                        int count = reconResults.size();",
                "                         for (int j = 0; j < count; j++) {",
                "-                            JSONObject result = results.getJSONObject(j);",
                "+                            ReconResult result = reconResults.get(j);",
                "                             double score = 1.0 / (1 + j); // score by each result's rank",
                "-                            JSONArray types = result.getJSONArray(\"type\");",
                "-                            int typeCount = types.length();",
                "+                            List<ReconType> types = result.types;",
                "+                            int typeCount = types.size();",
                "                             for (int t = 0; t < typeCount; t++) {",
                "-                                Object type = types.get(t);",
                "-                                String typeID;",
                "-                                String typeName;",
                "-",
                "-                                if (type instanceof String) {",
                "-                                    typeID = typeName = (String) type;",
                "-                                } else {",
                "-                                    typeID = ((JSONObject) type).getString(\"id\");",
                "-                                    typeName = ((JSONObject) type).getString(\"name\");",
                "-                                }",
                "-",
                "+                            \tReconType type = types.get(t);",
                "                                 double score2 = score * (typeCount - t) / typeCount;",
                "-                                if (map.containsKey(typeID)) {",
                "-                                    TypeGroup tg = map.get(typeID);",
                "+                                if (map.containsKey(type.id)) {",
                "+                                    TypeGroup tg = map.get(type.id);",
                "                                     tg.score += score2;",
                "@@ -236,3 +225,3 @@ public class GuessTypesOfColumnCommand extends Command {",
                "                                 } else {",
                "-                                    map.put(typeID, new TypeGroup(typeID, typeName, score2));",
                "+                                    map.put(type.id, new TypeGroup(type.id, type.name, score2));",
                "                                 }",
                "diff --git a/main/src/com/google/refine/model/ReconType.java b/main/src/com/google/refine/model/ReconType.java",
                "index 2634bd6f0..5cc0616ca 100644",
                "--- a/main/src/com/google/refine/model/ReconType.java",
                "+++ b/main/src/com/google/refine/model/ReconType.java",
                "@@ -59,4 +59,10 @@ public class ReconType  {",
                "             String name) {",
                "-\tthis.id = id;",
                "-\tthis.name = name;",
                "+    \tthis.id = id;",
                "+    \tthis.name = name;",
                "+    }",
                "+    ",
                "+    @JsonCreator",
                "+    public ReconType(String id) {",
                "+    \tthis.id = id;",
                "+    \tthis.name = null;",
                "     }",
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index d9da627a9..5a0408ed4 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -288,13 +288,29 @@ public class StandardReconConfig extends ReconConfig {",
                "-    protected class ReconResult {",
                "+    public class ReconResult {",
                "     \t@JsonProperty(\"name\")",
                "-    \tprotected String name;",
                "+    \tpublic String name;",
                "     \t@JsonProperty(\"id\")",
                "-    \tprotected String id;",
                "+    \tpublic String id;",
                "     \t@JsonProperty(\"types\")",
                "-    \tprotected String[] types = new String[0];",
                "+\t\tpublic List<ReconType> types = Collections.emptyList();",
                "     \t@JsonProperty(\"score\")",
                "-    \tprotected double score;",
                "+    \tpublic double score;",
                "     \t@JsonProperty(\"match\")",
                "-    \tprotected boolean match = false;",
                "+    \tpublic boolean match = false;",
                "+    \t",
                "+    \t@JsonIgnore",
                "+\t\tpublic ReconCandidate toCandidate() {",
                "+    \t\tString[] bareTypes = new String[types.size()];",
                "+    \t\tfor(int i = 0; i != types.size(); i++) {",
                "+    \t\t\tbareTypes[i] = types.get(i).id;",
                "+    \t\t}",
                "+       \t\tReconCandidate result = new ReconCandidate(",
                "+\t\t        id,",
                "+\t\t        name,",
                "+\t\t        bareTypes,",
                "+\t\t        score",
                "+\t\t    );",
                "+       ",
                "+\t\t\treturn result;",
                "+\t\t}",
                "     }",
                "@@ -457,3 +473,3 @@ public class StandardReconConfig extends ReconConfig {",
                "         Recon recon = new Recon(historyEntryID, identifierSpace, schemaSpace);",
                "-        List<ReconResult> results = ParsingUtilities.mapper.readValue(resultsList.toString(), new TypeReference<List<ReconResult>>() {});",
                "+        List<ReconResult> results = ParsingUtilities.mapper.convertValue(resultsList, new TypeReference<List<ReconResult>>() {});",
                "@@ -463,15 +479,11 @@ public class StandardReconConfig extends ReconConfig {",
                "             ReconResult result = results.get(i);",
                "-            ReconCandidate candidate = new ReconCandidate(",
                "-                result.id,",
                "-                result.name,",
                "-                result.types,",
                "-                result.score",
                "-            );",
                "-            if (autoMatch && i == 0 && result.match) {",
                "-                recon.match = candidate;",
                "-                recon.matchRank = 0;",
                "-                recon.judgment = Judgment.Matched;",
                "-                recon.judgmentAction = \"auto\";",
                "-            }",
                "+            ReconCandidate candidate = result.toCandidate();",
                "+\t\t    ",
                "+\t\t    if (autoMatch && i == 0 && result.match) {",
                "+\t\t        recon.match = candidate;",
                "+\t\t        recon.matchRank = 0;",
                "+\t\t        recon.judgment = Judgment.Matched;",
                "+\t\t        recon.judgmentAction = \"auto\";",
                "+\t\t    }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java b/main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java",
                "index e52dcd59d..a9541287b 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java",
                "@@ -2,3 +2,5 @@ package com.google.refine.tests.model;",
                "-import org.json.JSONException;",
                "+import java.io.IOException;",
                "+",
                "+import org.testng.Assert;",
                " import org.testng.annotations.Test;",
                "@@ -10,3 +12,3 @@ public class ReconTypeTest {",
                "     @Test",
                "-    public void serializeReconType() throws JSONException, Exception {",
                "+    public void serializeReconType() throws IOException {",
                "         String json = \"{\\\"id\\\":\\\"Q7540126\\\",\\\"name\\\":\\\"headquarters\\\"}\";",
                "@@ -15,2 +17,9 @@ public class ReconTypeTest {",
                "     }",
                "+    ",
                "+    @Test",
                "+    public void deserializeFromString() throws IOException {",
                "+    \t// reconciliation services can return lists of types as bare lists of strings",
                "+    \tReconType rt = ReconType.load(\"\\\"Q7540126\\\"\");",
                "+    \tAssert.assertEquals(rt.id, \"Q7540126\");",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java",
                "main/src/com/google/refine/model/ReconType.java",
                "main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "65231e21400ef7bdf50267792cfd4369e26de956",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538391478,
            "hunks": 17,
            "message": "Refactor GetRowsCommand for Jackson migration",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/row/GetRowsCommand.java b/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "index add2f4314..60d3bf366 100644",
                "--- a/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "+++ b/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "@@ -37,2 +37,4 @@ import java.io.IOException;",
                " import java.io.PrintWriter;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                " import java.util.Properties;",
                "@@ -47,2 +49,8 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonUnwrapped;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.browsing.Engine;",
                "@@ -67,2 +75,78 @@ public class GetRowsCommand extends Command {",
                "+    protected static class WrappedRow implements Jsonizable {",
                "+        @JsonUnwrapped",
                "+        protected final Row row;",
                "+        @JsonProperty(\"rowIndex\")",
                "+        protected final int rowIndex;",
                "+        @JsonProperty(\"recordIndex\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        protected final Integer recordIndex;",
                "+        ",
                "+        protected WrappedRow(Row rowOrRecord, int rowIndex, Integer recordIndex) {",
                "+            this.row = rowOrRecord;",
                "+            this.rowIndex = rowIndex;",
                "+            this.recordIndex = recordIndex;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            options.put(\"rowIndex\", rowIndex);",
                "+            if(recordIndex != null) {",
                "+                options.put(\"recordIndex\", recordIndex);",
                "+            }",
                "+            row.write(writer, options);  ",
                "+            if(recordIndex != null) {",
                "+                options.remove(\"recordIndex\");",
                "+            }",
                "+        }",
                "+        ",
                "+    }",
                "+    ",
                "+    protected static class JsonResult implements Jsonizable {",
                "+        @JsonProperty(\"mode\")",
                "+        protected final Mode mode;",
                "+        @JsonProperty(\"rows\")",
                "+        protected final List<WrappedRow> rows;",
                "+        @JsonProperty(\"filtered\")",
                "+        protected final int filtered;",
                "+        @JsonProperty(\"total\")",
                "+        protected final int totalCount;",
                "+        @JsonProperty(\"start\")",
                "+        protected final int start;",
                "+        @JsonProperty(\"limit\")",
                "+        protected final int limit;",
                "+        @JsonProperty(\"pool\")",
                "+        protected final Pool pool;",
                "+        ",
                "+        protected JsonResult(Mode mode, List<WrappedRow> rows, int filtered,",
                "+                int totalCount, int start, int limit, Pool pool) {",
                "+            this.mode = mode;",
                "+            this.rows = rows;",
                "+            this.filtered = filtered;",
                "+            this.totalCount = totalCount;",
                "+            this.start = start;",
                "+            this.limit = limit;",
                "+            this.pool = pool;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter jsonWriter, Properties options)",
                "+                throws JSONException {",
                "+            jsonWriter.object();",
                "+            jsonWriter.key(\"mode\"); jsonWriter.value(mode == Mode.RowBased ? \"row-based\" : \"record-based\");",
                "+            jsonWriter.key(\"rows\"); jsonWriter.array();",
                "+            for(WrappedRow row : rows) {",
                "+                row.write(jsonWriter, options);",
                "+            }",
                "+            jsonWriter.endArray();",
                "+            jsonWriter.key(\"filtered\"); jsonWriter.value(filtered);",
                "+            jsonWriter.key(\"total\"); jsonWriter.value(totalCount);",
                "+            jsonWriter.key(\"start\"); jsonWriter.value(start);",
                "+            jsonWriter.key(\"limit\"); jsonWriter.value(limit);",
                "+            jsonWriter.key(\"pool\"); pool.write(jsonWriter, options);",
                "+            jsonWriter.endObject();",
                "+        }",
                "+    }",
                "+    ",
                "     @Override",
                "@@ -119,5 +203,4 @@ public class GetRowsCommand extends Command {",
                "             JSONWriter jsonWriter = new JSONWriter(writer);",
                "-            jsonWriter.object();",
                "-            RowWritingVisitor rwv = new RowWritingVisitor(start, limit, jsonWriter, options);",
                "+            RowWritingVisitor rwv = new RowWritingVisitor(start, limit);",
                "@@ -133,3 +216,3 @@ public class GetRowsCommand extends Command {",
                "             }",
                "-",
                "+            ",
                "             if (engine.getMode() == Mode.RowBased) {",
                "@@ -146,9 +229,3 @@ public class GetRowsCommand extends Command {",
                "                 }",
                "-                ",
                "-                jsonWriter.key(\"mode\"); jsonWriter.value(\"row-based\");",
                "-                jsonWriter.key(\"rows\"); jsonWriter.array();",
                "                 filteredRows.accept(project, visitor);",
                "-                jsonWriter.endArray();",
                "-                jsonWriter.key(\"filtered\"); jsonWriter.value(rwv.total);",
                "-                jsonWriter.key(\"total\"); jsonWriter.value(project.rows.size());",
                "             } else {",
                "@@ -165,9 +242,3 @@ public class GetRowsCommand extends Command {",
                "                 }",
                "-                ",
                "-                jsonWriter.key(\"mode\"); jsonWriter.value(\"record-based\");",
                "-                jsonWriter.key(\"rows\"); jsonWriter.array();",
                "                 filteredRecords.accept(project, visitor);",
                "-                jsonWriter.endArray();",
                "-                jsonWriter.key(\"filtered\"); jsonWriter.value(rwv.total);",
                "-                jsonWriter.key(\"total\"); jsonWriter.value(project.recordModel.getRecordCount());",
                "             }",
                "@@ -175,8 +246,7 @@ public class GetRowsCommand extends Command {",
                "-            jsonWriter.key(\"start\"); jsonWriter.value(start);",
                "-            jsonWriter.key(\"limit\"); jsonWriter.value(limit);",
                "-            jsonWriter.key(\"pool\"); pool.write(jsonWriter, options);",
                "-            ",
                "-            jsonWriter.endObject();",
                "-            ",
                "+            JsonResult result = new JsonResult(engine.getMode(),",
                "+                    rwv.results, rwv.total,",
                "+                    engine.getMode() == Mode.RowBased ? project.rows.size() : project.recordModel.getRecordCount(),",
                "+                            start, limit, pool);",
                "+            result.write(jsonWriter, options);",
                "             if (callback != null) {",
                "@@ -197,4 +267,3 @@ public class GetRowsCommand extends Command {",
                "         final int           limit;",
                "-        final JSONWriter  writer;",
                "-        final Properties  options;",
                "+        public List<WrappedRow> results;",
                "@@ -202,7 +271,6 @@ public class GetRowsCommand extends Command {",
                "-        public RowWritingVisitor(int start, int limit, JSONWriter writer, Properties options) {",
                "+        public RowWritingVisitor(int start, int limit) {",
                "             this.start = start;",
                "             this.limit = limit;",
                "-            this.writer = writer;",
                "-            this.options = options;",
                "+            this.results = new ArrayList<>();",
                "         }",
                "@@ -240,7 +308,3 @@ public class GetRowsCommand extends Command {",
                "         public boolean internalVisit(Project project, int rowIndex, Row row) {",
                "-            try {",
                "-                options.put(\"rowIndex\", rowIndex);",
                "-                row.write(writer, options);",
                "-            } catch (JSONException e) {",
                "-            }",
                "+            results.add(new WrappedRow(row, rowIndex, null));",
                "             return false;",
                "@@ -249,16 +313,5 @@ public class GetRowsCommand extends Command {",
                "         protected boolean internalVisit(Project project, Record record) {",
                "-            options.put(\"recordIndex\", record.recordIndex);",
                "-            ",
                "             for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {",
                "-                try {",
                "-                    Row row = project.rows.get(r);",
                "-                    ",
                "-                    options.put(\"rowIndex\", r);",
                "-                    ",
                "-                    row.write(writer, options);",
                "-                    ",
                "-                } catch (JSONException e) {",
                "-                }",
                "-                ",
                "-                options.remove(\"recordIndex\");",
                "+                Row row = project.rows.get(r);",
                "+                results.add(new WrappedRow(row, r, r == record.fromRowIndex ? record.recordIndex : null));",
                "             }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/row/GetRowsCommandTest.java b/main/tests/server/src/com/google/refine/tests/commands/row/GetRowsCommandTest.java",
                "new file mode 100644",
                "index 000000000..d35315c7d",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/row/GetRowsCommandTest.java",
                "@@ -0,0 +1,116 @@",
                "+package com.google.refine.tests.commands.row;",
                "+",
                "+import javax.servlet.ServletException;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+",
                "+import org.testng.annotations.BeforeMethod;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.commands.Command;",
                "+import com.google.refine.commands.row.GetRowsCommand;",
                "+import com.google.refine.model.Project;",
                "+import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+import static org.mockito.Mockito.mock;",
                "+import static org.mockito.Mockito.when;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.io.StringWriter;",
                "+",
                "+public class GetRowsCommandTest extends RefineTest {",
                "+    ",
                "+    HttpServletRequest request = null;",
                "+    HttpServletResponse response = null;",
                "+    Command command = null;",
                "+    Project project = null;",
                "+    StringWriter writer = null;",
                "+    ",
                "+    @BeforeMethod",
                "+    public void setUp() {",
                "+        request = mock(HttpServletRequest.class);",
                "+        response = mock(HttpServletResponse.class);",
                "+        project = createCSVProject(\"a,b\\nc,d\\n,f\");",
                "+        command = new GetRowsCommand();",
                "+        writer = new StringWriter();",
                "+        when(request.getParameter(\"project\")).thenReturn(String.valueOf(project.id));",
                "+        try {",
                "+            when(response.getWriter()).thenReturn(new PrintWriter(writer));",
                "+        } catch (IOException e) {",
                "+            e.printStackTrace();",
                "+        }",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testJsonOutputRows() throws ServletException, IOException {",
                "+        String rowJson = \"{\\n\" + ",
                "+                \"       \\\"filtered\\\" : 2,\\n\" + ",
                "+                \"       \\\"limit\\\" : 2,\\n\" + ",
                "+                \"       \\\"mode\\\" : \\\"row-based\\\",\\n\" + ",
                "+                \"       \\\"pool\\\" : {\\n\" + ",
                "+                \"         \\\"recons\\\" : { }\\n\" + ",
                "+                \"       },\\n\" + ",
                "+                \"       \\\"rows\\\" : [ {\\n\" + ",
                "+                \"         \\\"cells\\\" : [ {\\n\" + ",
                "+                \"           \\\"v\\\" : \\\"c\\\"\\n\" + ",
                "+                \"         }, {\\n\" + ",
                "+                \"           \\\"v\\\" : \\\"d\\\"\\n\" + ",
                "+                \"         } ],\\n\" + ",
                "+                \"         \\\"flagged\\\" : false,\\n\" + ",
                "+                \"         \\\"i\\\" : 0,\\n\" + ",
                "+                \"         \\\"starred\\\" : false\\n\" + ",
                "+                \"       }, {\\n\" + ",
                "+                \"         \\\"cells\\\" : [ null, {\\n\" + ",
                "+                \"           \\\"v\\\" : \\\"f\\\"\\n\" + ",
                "+                \"         } ],\\n\" + ",
                "+                \"         \\\"flagged\\\" : false,\\n\" + ",
                "+                \"         \\\"i\\\" : 1,\\n\" + ",
                "+                \"         \\\"starred\\\" : false\\n\" + ",
                "+                \"       } ],\\n\" + ",
                "+                \"       \\\"start\\\" : 0,\\n\" + ",
                "+                \"       \\\"total\\\" : 2\\n\" + ",
                "+                \"     }\";",
                "+        ",
                "+        when(request.getParameter(\"engine\")).thenReturn(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\");",
                "+        command.doPost(request, response);",
                "+        TestUtils.assertEqualAsJson(rowJson, writer.toString());",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testJsonOutputRecords() throws ServletException, IOException {",
                "+        String recordJson = \"{\\n\" + ",
                "+                \"       \\\"filtered\\\" : 1,\\n\" + ",
                "+                \"       \\\"limit\\\" : 2,\\n\" + ",
                "+                \"       \\\"mode\\\" : \\\"record-based\\\",\\n\" + ",
                "+                \"       \\\"pool\\\" : {\\n\" + ",
                "+                \"         \\\"recons\\\" : { }\\n\" + ",
                "+                \"       },\\n\" + ",
                "+                \"       \\\"rows\\\" : [ {\\n\" + ",
                "+                \"         \\\"cells\\\" : [ {\\n\" + ",
                "+                \"           \\\"v\\\" : \\\"c\\\"\\n\" + ",
                "+                \"         }, {\\n\" + ",
                "+                \"           \\\"v\\\" : \\\"d\\\"\\n\" + ",
                "+                \"         } ],\\n\" + ",
                "+                \"         \\\"flagged\\\" : false,\\n\" + ",
                "+                \"         \\\"i\\\" : 0,\\n\" + ",
                "+                \"         \\\"j\\\" : 0,\\n\" + ",
                "+                \"         \\\"starred\\\" : false\\n\" + ",
                "+                \"       }, {\\n\" + ",
                "+                \"         \\\"cells\\\" : [ null, {\\n\" + ",
                "+                \"           \\\"v\\\" : \\\"f\\\"\\n\" + ",
                "+                \"         } ],\\n\" + ",
                "+                \"         \\\"flagged\\\" : false,\\n\" + ",
                "+                \"         \\\"i\\\" : 1,\\n\" + ",
                "+                \"         \\\"starred\\\" : false\\n\" + ",
                "+                \"       } ],\\n\" + ",
                "+                \"       \\\"start\\\" : 0,\\n\" + ",
                "+                \"       \\\"total\\\" : 1\\n\" + ",
                "+                \"     }\";",
                "+        ",
                "+        when(request.getParameter(\"engine\")).thenReturn(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\");",
                "+        command.doPost(request, response);",
                "+        TestUtils.assertEqualAsJson(recordJson, writer.toString());",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "main/tests/server/src/com/google/refine/tests/commands/row/GetRowsCommandTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2ef955f24b27e19e5404668f60c1dbd9371e4dfd",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540213622,
            "hunks": 8,
            "message": "Jackson deserialization for AbstractOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java b/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "index 6ea66a1f2..136109acf 100644",
                "--- a/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "+++ b/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "@@ -80,3 +80,3 @@ public class ApplyOperationsCommand extends Command {",
                "-    protected void reconstructOperation(Project project, JSONObject obj) {",
                "+    protected void reconstructOperation(Project project, JSONObject obj) throws IOException {",
                "         AbstractOperation operation = OperationRegistry.reconstruct(project, obj);",
                "diff --git a/main/src/com/google/refine/model/AbstractOperation.java b/main/src/com/google/refine/model/AbstractOperation.java",
                "index 414bbe453..16fd68741 100644",
                "--- a/main/src/com/google/refine/model/AbstractOperation.java",
                "+++ b/main/src/com/google/refine/model/AbstractOperation.java",
                "@@ -38,2 +38,4 @@ import java.util.Properties;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo;",
                "+import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;",
                "@@ -48,2 +50,7 @@ import com.google.refine.process.QuickHistoryEntryProcess;",
                "  */",
                "+@JsonTypeInfo(",
                "+        use=JsonTypeInfo.Id.CUSTOM,",
                "+        include=JsonTypeInfo.As.PROPERTY,",
                "+        property=\"op\")",
                "+@JsonTypeIdResolver(OperationResolver.class)",
                " abstract public class AbstractOperation  {",
                "diff --git a/main/src/com/google/refine/operations/OperationRegistry.java b/main/src/com/google/refine/operations/OperationRegistry.java",
                "index 604439f11..e947c510c 100644",
                "--- a/main/src/com/google/refine/operations/OperationRegistry.java",
                "+++ b/main/src/com/google/refine/operations/OperationRegistry.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations;",
                "+import java.io.IOException;",
                " import java.lang.reflect.Method;",
                "@@ -43,4 +44,8 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                "+",
                " import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -69,20 +74,9 @@ public abstract class OperationRegistry {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) {",
                "-        try {",
                "-            String op = obj.getString(\"op\");",
                "-            if (!op.contains(\"/\")) {",
                "-                op = \"core/\" + op; // backward compatible",
                "-            }",
                "-            ",
                "-            List<Class<? extends AbstractOperation>> classes = s_opNameToClass.get(op);",
                "-            if (classes != null && classes.size() > 0) {",
                "-                Class<? extends AbstractOperation> klass = classes.get(classes.size() - 1);",
                "-                ",
                "-                Method reconstruct = klass.getMethod(\"reconstruct\", Project.class, JSONObject.class);",
                "-                if (reconstruct != null) {",
                "-                    return (AbstractOperation) reconstruct.invoke(null, project, obj);",
                "-                }",
                "-            }",
                "-        } catch (Exception e) {",
                "-            e.printStackTrace();",
                "+    static public Class<? extends AbstractOperation> resolveOperationId(String op) {",
                "+        if (!op.contains(\"/\")) {",
                "+            op = \"core/\" + op; // backward compatible",
                "+        }",
                "+        List<Class<? extends AbstractOperation>> classes = s_opNameToClass.get(op);",
                "+        if (classes != null && classes.size() > 0) {",
                "+            return classes.get(classes.size() - 1);",
                "         }",
                "@@ -90,2 +84,6 @@ public abstract class OperationRegistry {",
                "     }",
                "+    ",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), AbstractOperation.class);",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "main/src/com/google/refine/model/AbstractOperation.java",
                "main/src/com/google/refine/operations/OperationRegistry.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8063ca63d9346eeb2e4cd65fe02c1bf6512d0326",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544530211,
            "hunks": 6,
            "message": "Add license headers",
            "diff": [
                "diff --git a/main/src/com/google/refine/clustering/binning/KeyerFactory.java b/main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "index c17f7ab88..0e13a65a5 100644",
                "--- a/main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "+++ b/main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "@@ -1 +1,28 @@",
                "+/*******************************************************************************",
                "+ * Copyright (C) 2018, Antonin Delpeuch",
                "+ * All rights reserved.",
                "+ * ",
                "+ * Redistribution and use in source and binary forms, with or without",
                "+ * modification, are permitted provided that the following conditions are met:",
                "+ * ",
                "+ * 1. Redistributions of source code must retain the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer.",
                "+ * ",
                "+ * 2. Redistributions in binary form must reproduce the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer in the documentation",
                "+ *    and/or other materials provided with the distribution.",
                "+ * ",
                "+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
                "+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
                "+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
                "+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
                "+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
                "+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
                "+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+ * POSSIBILITY OF SUCH DAMAGE.",
                "+ ******************************************************************************/",
                "+",
                " package com.google.refine.clustering.binning;",
                "diff --git a/main/src/com/google/refine/clustering/knn/DistanceFactory.java b/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "index 9d90a82d2..126f4340b 100644",
                "--- a/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "+++ b/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "@@ -1 +1,28 @@",
                "+/*******************************************************************************",
                "+ * Copyright (C) 2018, Antonin Delpeuch",
                "+ * All rights reserved.",
                "+ * ",
                "+ * Redistribution and use in source and binary forms, with or without",
                "+ * modification, are permitted provided that the following conditions are met:",
                "+ * ",
                "+ * 1. Redistributions of source code must retain the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer.",
                "+ * ",
                "+ * 2. Redistributions in binary form must reproduce the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer in the documentation",
                "+ *    and/or other materials provided with the distribution.",
                "+ * ",
                "+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
                "+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
                "+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
                "+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
                "+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
                "+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
                "+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+ * POSSIBILITY OF SUCH DAMAGE.",
                "+ ******************************************************************************/",
                "+",
                " package com.google.refine.clustering.knn;",
                "diff --git a/main/src/com/google/refine/clustering/knn/SimilarityDistance.java b/main/src/com/google/refine/clustering/knn/SimilarityDistance.java",
                "index 00075f036..c19910344 100644",
                "--- a/main/src/com/google/refine/clustering/knn/SimilarityDistance.java",
                "+++ b/main/src/com/google/refine/clustering/knn/SimilarityDistance.java",
                "@@ -1 +1,28 @@",
                "+/*******************************************************************************",
                "+ * Copyright (C) 2018, Antonin Delpeuch",
                "+ * All rights reserved.",
                "+ * ",
                "+ * Redistribution and use in source and binary forms, with or without",
                "+ * modification, are permitted provided that the following conditions are met:",
                "+ * ",
                "+ * 1. Redistributions of source code must retain the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer.",
                "+ * ",
                "+ * 2. Redistributions in binary form must reproduce the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer in the documentation",
                "+ *    and/or other materials provided with the distribution.",
                "+ * ",
                "+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
                "+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
                "+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
                "+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
                "+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
                "+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
                "+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+ * POSSIBILITY OF SUCH DAMAGE.",
                "+ ******************************************************************************/",
                "+",
                " package com.google.refine.clustering.knn;",
                "diff --git a/main/src/com/google/refine/clustering/knn/VicinoDistance.java b/main/src/com/google/refine/clustering/knn/VicinoDistance.java",
                "index 491d1f979..f6a9049eb 100644",
                "--- a/main/src/com/google/refine/clustering/knn/VicinoDistance.java",
                "+++ b/main/src/com/google/refine/clustering/knn/VicinoDistance.java",
                "@@ -1 +1,28 @@",
                "+/*******************************************************************************",
                "+ * Copyright (C) 2018, Antonin Delpeuch",
                "+ * All rights reserved.",
                "+ * ",
                "+ * Redistribution and use in source and binary forms, with or without",
                "+ * modification, are permitted provided that the following conditions are met:",
                "+ * ",
                "+ * 1. Redistributions of source code must retain the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer.",
                "+ * ",
                "+ * 2. Redistributions in binary form must reproduce the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer in the documentation",
                "+ *    and/or other materials provided with the distribution.",
                "+ * ",
                "+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
                "+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
                "+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
                "+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
                "+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
                "+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
                "+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+ * POSSIBILITY OF SUCH DAMAGE.",
                "+ ******************************************************************************/",
                "+",
                " package com.google.refine.clustering.knn;",
                "diff --git a/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java b/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "index 2543d22ab..cd92072f5 100644",
                "--- a/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "+++ b/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "@@ -1 +1,28 @@",
                "+/*******************************************************************************",
                "+ * Copyright (C) 2018, Antonin Delpeuch",
                "+ * All rights reserved.",
                "+ * ",
                "+ * Redistribution and use in source and binary forms, with or without",
                "+ * modification, are permitted provided that the following conditions are met:",
                "+ * ",
                "+ * 1. Redistributions of source code must retain the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer.",
                "+ * ",
                "+ * 2. Redistributions in binary form must reproduce the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer in the documentation",
                "+ *    and/or other materials provided with the distribution.",
                "+ * ",
                "+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
                "+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
                "+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
                "+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
                "+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
                "+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
                "+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+ * POSSIBILITY OF SUCH DAMAGE.",
                "+ ******************************************************************************/",
                "+",
                " package com.google.refine.commands.browsing;",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java b/main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java",
                "index edb608bdb..c2ffc660a 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java",
                "@@ -1 +1,28 @@",
                "+/*******************************************************************************",
                "+ * Copyright (C) 2018, Antonin Delpeuch",
                "+ * All rights reserved.",
                "+ * ",
                "+ * Redistribution and use in source and binary forms, with or without",
                "+ * modification, are permitted provided that the following conditions are met:",
                "+ * ",
                "+ * 1. Redistributions of source code must retain the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer.",
                "+ * ",
                "+ * 2. Redistributions in binary form must reproduce the above copyright notice,",
                "+ *    this list of conditions and the following disclaimer in the documentation",
                "+ *    and/or other materials provided with the distribution.",
                "+ * ",
                "+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
                "+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
                "+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
                "+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
                "+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
                "+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
                "+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "+ * POSSIBILITY OF SUCH DAMAGE.",
                "+ ******************************************************************************/",
                "+",
                " package com.google.refine.tests.commands.browsing;"
            ],
            "changed_files": [
                "main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "main/src/com/google/refine/clustering/knn/SimilarityDistance.java",
                "main/src/com/google/refine/clustering/knn/VicinoDistance.java",
                "main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "be9ebdcad9aa806b2c55c9f61841551e83b30906",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1539284096,
            "hunks": 54,
            "message": "Migrate database extension out of JSONWriter",
            "diff": [
                "diff --git a/extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java b/extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java",
                "index e79153c68..1fce41bc7 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java",
                "@@ -43,3 +43,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -47,2 +46,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " import com.google.refine.ProjectManager;",
                "@@ -209,23 +210,14 @@ public class DatabaseImportController implements ImportingController {",
                "                 );",
                "-//                String exStr = getExceptionString(exceptions);",
                "-//                logger.info(\"exceptions::\" + exStr);",
                "-                ",
                "                 Writer w = response.getWriter();",
                "-                JSONWriter writer = new JSONWriter(w);",
                "+                JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "                 try {",
                "-                    writer.object();",
                "+                    writer.writeStartObject();",
                "                     if (exceptions.size() == 0) {",
                "                         job.project.update(); // update all internal models, indexes, caches, etc.",
                "-                        writer.key(\"status\"); ",
                "-                        writer.value(\"ok\");",
                "+                        writer.writeStringField(\"status\", \"ok\");",
                "                     } else {",
                "-                        writer.key(\"status\"); ",
                "-                        writer.value(\"error\");",
                "-                        writer.key(\"message\");",
                "-                        writer.value(getExceptionString(exceptions));",
                "-//                        writer.array();",
                "-//                        writeErrors(writer, exceptions);",
                "-//                        writer.endArray();",
                "+                        writer.writeStringField(\"status\", \"error\");",
                "+                        writer.writeStringField(\"message\", getExceptionString(exceptions));",
                "                     }",
                "-                    writer.endObject();",
                "+                    writer.writeEndObject();",
                "                 } catch (JSONException e) {",
                "@@ -233,2 +225,4 @@ public class DatabaseImportController implements ImportingController {",
                "                 } finally {",
                "+                    writer.flush();",
                "+                    writer.close();",
                "                     w.flush();",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java",
                "index 014b30930..0ba564b65 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java",
                "@@ -39,3 +39,2 @@ import org.apache.http.HttpStatus;",
                " import org.codehaus.jackson.map.ObjectMapper;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -43,2 +42,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " //import com.google.refine.ProjectManager;",
                "@@ -48,2 +49,3 @@ import com.google.refine.extension.database.DatabaseServiceException;",
                " import com.google.refine.extension.database.model.DatabaseInfo;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -68,3 +70,3 @@ public class ConnectCommand extends DatabaseCommand {",
                "             Writer w = response.getWriter();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "             ObjectMapper mapperObj = new ObjectMapper();",
                "@@ -76,9 +78,6 @@ public class ConnectCommand extends DatabaseCommand {",
                "                 response.setStatus(HttpStatus.SC_OK);",
                "-                writer.object();",
                "-                writer.key(\"code\"); ",
                "-                writer.value(\"ok\");",
                "-                writer.key(\"databaseInfo\"); ",
                "-                writer.value(databaseInfoString);",
                "-              ",
                "-                writer.endObject();",
                "+                writer.writeStartObject();",
                "+                writer.writeStringField(\"code\", \"ok\");",
                "+                writer.writeStringField(\"databaseInfo\", databaseInfoString);",
                "+                writer.writeEndObject();",
                "@@ -86,8 +85,9 @@ public class ConnectCommand extends DatabaseCommand {",
                "                 logger.error(\"ConnectCommand::Post::DatabaseServiceException::{}\", e);",
                "-                sendError(HttpStatus.SC_UNAUTHORIZED,response, writer, e);",
                "+                sendError(HttpStatus.SC_UNAUTHORIZED,response, e);",
                "             }catch (Exception e) {",
                "                 logger.error(\"ConnectCommand::Post::Exception::{}\", e);",
                "-                sendError(HttpStatus.SC_UNAUTHORIZED,response, writer, e);",
                "+                sendError(HttpStatus.SC_UNAUTHORIZED,response, e);",
                "             } finally {  ",
                "-               // w.flush();",
                "+                writer.flush();",
                "+                writer.close();",
                "                 w.close();",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/DatabaseCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/DatabaseCommand.java",
                "index ccd967d95..171dccac1 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/DatabaseCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/DatabaseCommand.java",
                "@@ -35,3 +35,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -84,3 +83,3 @@ public abstract class DatabaseCommand extends Command {",
                "      */",
                "-    protected void sendError(int status, HttpServletResponse response, JSONWriter writer, Exception e)",
                "+    protected void sendError(int status, HttpServletResponse response, Exception e)",
                "             throws  IOException {",
                "@@ -99,3 +98,3 @@ public abstract class DatabaseCommand extends Command {",
                "      */",
                "-    protected void sendError(int status, HttpServletResponse response, JSONWriter writer, DatabaseServiceException e)",
                "+    protected void sendError(int status, HttpServletResponse response, DatabaseServiceException e)",
                "             throws IOException {",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java",
                "index 90a0dd387..888536dac 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java",
                "@@ -39,3 +39,2 @@ import org.apache.http.HttpStatus;",
                " import org.codehaus.jackson.map.ObjectMapper;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -43,2 +42,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " //import com.google.refine.ProjectManager;",
                "@@ -48,2 +49,3 @@ import com.google.refine.extension.database.DatabaseServiceException;",
                " import com.google.refine.extension.database.model.DatabaseInfo;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -71,3 +73,3 @@ public class ExecuteQueryCommand extends DatabaseCommand {",
                "             Writer w = response.getWriter();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "@@ -86,8 +88,6 @@ public class ExecuteQueryCommand extends DatabaseCommand {",
                "-                writer.object();",
                "-                writer.key(\"code\"); ",
                "-                writer.value(\"ok\");",
                "-                writer.key(\"QueryResult\"); ",
                "-                writer.value(jsonStr);",
                "-                writer.endObject();",
                "+                writer.writeStartObject();",
                "+                writer.writeStringField(\"code\", \"ok\");",
                "+                writer.writeStringField(\"QueryResult\", jsonStr);",
                "+                writer.writeEndObject();",
                "@@ -96,3 +96,3 @@ public class ExecuteQueryCommand extends DatabaseCommand {",
                "                 logger.error(\"QueryCommand::Post::DatabaseServiceException::{}\", e);",
                "-                sendError(HttpStatus.SC_BAD_REQUEST, response, writer, e);",
                "+                sendError(HttpStatus.SC_BAD_REQUEST, response, e);",
                "@@ -100,4 +100,6 @@ public class ExecuteQueryCommand extends DatabaseCommand {",
                "                 logger.error(\"QueryCommand::Post::Exception::{}\", e);",
                "-                sendError(HttpStatus.SC_BAD_REQUEST,response, writer, e);",
                "+                sendError(HttpStatus.SC_BAD_REQUEST,response, e);",
                "             } finally {",
                "+                writer.flush();",
                "+                writer.close();",
                "                 w.close();",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java",
                "index 74b3af2ea..0d52e3d77 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java",
                "@@ -40,3 +40,2 @@ import org.apache.http.HttpStatus;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -44,4 +43,7 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " import com.google.refine.extension.database.DatabaseConfiguration;",
                " import com.google.refine.extension.database.DatabaseUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -122,27 +124,18 @@ public class SavedConnectionCommand extends DatabaseCommand {",
                "         try {",
                "-            JSONWriter writer = new JSONWriter(w);",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "-            writer.object();",
                "-            writer.key(DatabaseUtils.SAVED_CONNECTION_KEY);",
                "-            writer.array();",
                "+            writer.writeStartObject();",
                "+            writer.writeArrayFieldStart(DatabaseUtils.SAVED_CONNECTION_KEY);",
                "-            writer.object();",
                "-            writer.key(\"connectionName\");",
                "-            writer.value(savedConnection.getConnectionName());",
                "+            writer.writeStartObject();",
                "+            writer.writeStringField(\"connectionName\", savedConnection.getConnectionName());",
                "-            writer.key(\"databaseType\");",
                "-            writer.value(savedConnection.getDatabaseType());",
                "-",
                "-            writer.key(\"databaseHost\");",
                "-            writer.value(savedConnection.getDatabaseHost());",
                "+            writer.writeStringField(\"databaseType\", savedConnection.getDatabaseType());",
                "-            writer.key(\"databasePort\");",
                "-            writer.value(savedConnection.getDatabasePort());",
                "+            writer.writeStringField(\"databaseHost\", savedConnection.getDatabaseHost());",
                "-            writer.key(\"databaseName\");",
                "-            writer.value(savedConnection.getDatabaseName());",
                "+            writer.writeNumberField(\"databasePort\", savedConnection.getDatabasePort());",
                "-            writer.key(\"databasePassword\");",
                "+            writer.writeStringField(\"databaseName\", savedConnection.getDatabaseName());",
                "-            //",
                "             String dbPasswd = savedConnection.getDatabasePassword();",
                "@@ -150,19 +143,15 @@ public class SavedConnectionCommand extends DatabaseCommand {",
                "                 dbPasswd = DatabaseUtils.decrypt(savedConnection.getDatabasePassword());",
                "-                //logger.info(\"Decrypted Password::\" + dbPasswd);",
                "             }",
                "-            writer.value(dbPasswd);",
                "-            //",
                "-            ",
                "-           // writer.value(savedConnection.getDatabasePassword());",
                "+            writer.writeStringField(\"databasePassword\", dbPasswd);",
                "-            writer.key(\"databaseSchema\");",
                "-            writer.value(savedConnection.getDatabaseSchema());",
                "+            writer.writeStringField(\"databaseSchema\", savedConnection.getDatabaseSchema());",
                "-            writer.key(\"databaseUser\");",
                "-            writer.value(savedConnection.getDatabaseUser());",
                "+            writer.writeStringField(\"databaseUser\", savedConnection.getDatabaseUser());",
                "-            writer.endObject();",
                "-            writer.endArray();",
                "+            writer.writeEndObject();",
                "+            writer.writeEndArray();",
                "-            writer.endObject();",
                "+            writer.writeEndObject();",
                "+            writer.flush();",
                "+            writer.close();",
                "@@ -185,7 +174,6 @@ public class SavedConnectionCommand extends DatabaseCommand {",
                "             List<DatabaseConfiguration> savedConnections = DatabaseUtils.getSavedConnections();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "-            writer.object();",
                "-            writer.key(DatabaseUtils.SAVED_CONNECTION_KEY);",
                "-            writer.array();",
                "+            writer.writeStartObject();",
                "+            writer.writeArrayFieldStart(DatabaseUtils.SAVED_CONNECTION_KEY);",
                "@@ -195,21 +183,15 @@ public class SavedConnectionCommand extends DatabaseCommand {",
                "-                writer.object();",
                "+                writer.writeStartObject();",
                "                 DatabaseConfiguration dbConfig = (DatabaseConfiguration) savedConnections.get(i);",
                "-                writer.key(\"connectionName\");",
                "-                writer.value(dbConfig.getConnectionName());",
                "+                writer.writeStringField(\"connectionName\", dbConfig.getConnectionName());",
                "-                writer.key(\"databaseType\");",
                "-                writer.value(dbConfig.getDatabaseType());",
                "+                writer.writeStringField(\"databaseType\", dbConfig.getDatabaseType());",
                "-                writer.key(\"databaseHost\");",
                "-                writer.value(dbConfig.getDatabaseHost());",
                "+                writer.writeStringField(\"databaseHost\", dbConfig.getDatabaseHost());",
                "-                writer.key(\"databasePort\");",
                "-                writer.value(dbConfig.getDatabasePort());",
                "+                writer.writeNumberField(\"databasePort\", dbConfig.getDatabasePort());",
                "-                writer.key(\"databaseName\");",
                "-                writer.value(dbConfig.getDatabaseName());",
                "+                writer.writeStringField(\"databaseName\", dbConfig.getDatabaseName());",
                "-                writer.key(\"databasePassword\");",
                "@@ -220,15 +202,15 @@ public class SavedConnectionCommand extends DatabaseCommand {",
                "                // writer.value(dbConfig.getDatabasePassword());",
                "-                writer.value(dbPasswd);",
                "+                writer.writeStringField(\"databasePassword\", dbPasswd);",
                "-                writer.key(\"databaseSchema\");",
                "-                writer.value(dbConfig.getDatabaseSchema());",
                "+                writer.writeStringField(\"databaseSchema\", dbConfig.getDatabaseSchema());",
                "-                writer.key(\"databaseUser\");",
                "-                writer.value(dbConfig.getDatabaseUser());",
                "+                writer.writeStringField(\"databaseUser\", dbConfig.getDatabaseUser());",
                "-                writer.endObject();",
                "+                writer.writeEndObject();",
                "             }",
                "-            writer.endArray();",
                "-            writer.endObject();",
                "+            writer.writeEndArray();",
                "+            writer.writeEndObject();",
                "+            writer.flush();",
                "+            writer.close();",
                "            // logger.info(\"Saved Connection Get Response sent\");",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java",
                "index b4cd0dd0b..78ad4b27b 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java",
                "@@ -38,3 +38,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.apache.http.HttpStatus;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -42,2 +41,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " import com.google.refine.extension.database.DatabaseConfiguration;",
                "@@ -45,2 +46,3 @@ import com.google.refine.extension.database.DatabaseService;",
                " import com.google.refine.extension.database.DatabaseServiceException;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -71,3 +73,3 @@ public class TestConnectCommand extends DatabaseCommand {",
                "             Writer w = response.getWriter();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "@@ -79,9 +81,7 @@ public class TestConnectCommand extends DatabaseCommand {",
                "                 response.setStatus(HttpStatus.SC_OK);",
                "-                writer.object();",
                "+                writer.writeStartObject();",
                "-                writer.key(\"connectionResult\"); ",
                "-                writer.value(connectionTestResult);",
                "-                writer.key(\"code\"); ",
                "-                writer.value(\"ok\");",
                "-                writer.endObject();",
                "+                writer.writeBooleanField(\"connectionResult\", connectionTestResult);",
                "+                writer.writeStringField(\"code\", \"ok\");",
                "+                writer.writeEndObject();",
                "@@ -89,6 +89,6 @@ public class TestConnectCommand extends DatabaseCommand {",
                "                 logger.error(\"TestConnectCommand::Post::DatabaseServiceException::{}\", e);",
                "-                sendError(HttpStatus.SC_UNAUTHORIZED,response, writer, e);",
                "+                sendError(HttpStatus.SC_UNAUTHORIZED,response, e);",
                "             } finally {",
                "-               // writer.endObject();",
                "-              //  w.flush();",
                "+                writer.flush();",
                "+                writer.close();",
                "                 w.close();",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java",
                "index a728fc1bd..90e42ece4 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java",
                "@@ -39,3 +39,2 @@ import org.apache.http.HttpStatus;",
                " import org.codehaus.jackson.map.ObjectMapper;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -43,2 +42,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " //import com.google.refine.ProjectManager;",
                "@@ -48,2 +49,3 @@ import com.google.refine.extension.database.DatabaseServiceException;",
                " import com.google.refine.extension.database.model.DatabaseInfo;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -72,3 +74,3 @@ public class TestQueryCommand extends DatabaseCommand {",
                "             Writer w = response.getWriter();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "@@ -85,8 +87,6 @@ public class TestQueryCommand extends DatabaseCommand {",
                "-                writer.object();",
                "-                writer.key(\"code\"); ",
                "-                writer.value(\"ok\");",
                "-                writer.key(\"QueryResult\"); ",
                "-                writer.value(jsonStr);",
                "-                writer.endObject();",
                "+                writer.writeStartObject();",
                "+                writer.writeStringField(\"code\", \"ok\");",
                "+                writer.writeStringField(\"QueryResult\", jsonStr);",
                "+                writer.writeEndObject();",
                "@@ -95,3 +95,3 @@ public class TestQueryCommand extends DatabaseCommand {",
                "                 logger.error(\"TestQueryCommand::Post::DatabaseServiceException::{}\", e);",
                "-                sendError(HttpStatus.SC_BAD_REQUEST, response, writer, e);",
                "+                sendError(HttpStatus.SC_BAD_REQUEST, response, e);",
                "@@ -99,4 +99,6 @@ public class TestQueryCommand extends DatabaseCommand {",
                "                 logger.error(\"TestQueryCommand::Post::Exception::{}\", e);",
                "-                sendError(HttpStatus.SC_BAD_REQUEST,response, writer, e);",
                "+                sendError(HttpStatus.SC_BAD_REQUEST,response, e);",
                "             } finally {",
                "+                writer.flush();",
                "+                writer.close();",
                "                 w.close();"
            ],
            "changed_files": [
                "extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/DatabaseCommand.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/SavedConnectionCommand.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/TestConnectCommand.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "db3a878c788942c862bf200ef72d18ae3b890f8d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544260623,
            "hunks": 1,
            "message": "Remove spurious println",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/recon/ReconConfig.java b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "index 972d89972..fe50f2eb9 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "@@ -95,3 +95,2 @@ abstract public class ReconConfig  {",
                "         List<Class<? extends ReconConfig>> classes = s_opNameToClass.get(mode);",
                "-        System.out.println(classes);",
                "         if (classes != null && classes.size() > 0) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/recon/ReconConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d6ca879558149c92149e611918f72a2403adbb3c",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542736570,
            "hunks": 9,
            "message": "Migrate ColumnRenameOperation to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/column/ColumnRenameOperation.java b/main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "index 1b843fe6f..7b3739e97 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations.column;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -46,4 +47,7 @@ public class ColumnRenameOperation extends AbstractOperation {",
                "+    @JsonCreator",
                "     public ColumnRenameOperation(",
                "+        @JsonProperty(\"oldColumnName\")",
                "         String oldColumnName,",
                "+        @JsonProperty(\"newColumnName\")",
                "         String newColumnName",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java",
                "index b75a8ebb5..7801cdb49 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java",
                "@@ -2,4 +2,2 @@ package com.google.refine.tests.operations.column;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -7,2 +5,3 @@ import org.testng.annotations.Test;",
                "+import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -11,2 +10,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -21,3 +21,3 @@ public class ColumnRenameOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeColumnRenameOperation() throws JSONException, Exception {",
                "+    public void serializeColumnRenameOperation() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/column-rename\\\",\"",
                "@@ -26,7 +26,4 @@ public class ColumnRenameOperationTests extends RefineTest {",
                "                 + \"\\\"newColumnName\\\":\\\"new name\\\"}\";",
                "-        JSONObject obj = new JSONObject(json);",
                "-        TestUtils.isSerializedTo(new ColumnRenameOperation(",
                "-            obj.getString(\"oldColumnName\"),",
                "-            obj.getString(\"newColumnName\")",
                "-        ), json);",
                "+        AbstractOperation op = ParsingUtilities.mapper.readValue(json, AbstractOperation.class);",
                "+        TestUtils.isSerializedTo(op, json);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e40d68afaf752269f1f657cc0f3e97f5a6359dc6",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540199756,
            "hunks": 10,
            "message": "Jackson deserialization for ReconCopyAcrossColumnsOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java b/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "index ae9cf5a31..ddbcda50d 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations.recon;",
                "+import java.io.IOException;",
                " import java.util.ArrayList;",
                "@@ -45,2 +46,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -63,2 +65,3 @@ import com.google.refine.operations.EngineDependentOperation;",
                " import com.google.refine.util.JSONUtilities;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -70,18 +73,17 @@ public class ReconCopyAcrossColumnsOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        return new ReconCopyAcrossColumnsOperation(",
                "-            EngineConfig.reconstruct(engineConfig), ",
                "-            obj.getString(\"fromColumnName\"),",
                "-            JSONUtilities.getStringArray(obj, \"toColumnNames\"),",
                "-            JSONUtilities.getStringArray(obj, \"judgments\"),",
                "-            obj.getBoolean(\"applyToJudgedCells\")",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconCopyAcrossColumnsOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public ReconCopyAcrossColumnsOperation(",
                "+        @JsonProperty(\"engineConfig\")",
                "         EngineConfig engineConfig,",
                "+        @JsonProperty(\"fromColumnName\")",
                "         String fromColumnName,",
                "+        @JsonProperty(\"toColumnNames\")",
                "         String[] toColumnNames,",
                "+        @JsonProperty(\"judgments\")",
                "         String[] judgments,",
                "+        @JsonProperty(\"applyToJudgedCells\")",
                "         boolean applyToJudgedCells) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e6ed452ef21375dfa878f37c15953fb0b1944114",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544150372,
            "hunks": 6,
            "message": "Regularcase, Form, ellipsis, -successfully",
            "diff": [
                "diff --git a/extensions/database/module/langs/translation-en.json b/extensions/database/module/langs/translation-en.json",
                "index 3e3f905e1..2feb01e3c 100644",
                "--- a/extensions/database/module/langs/translation-en.json",
                "+++ b/extensions/database/module/langs/translation-en.json",
                "@@ -2,16 +2,16 @@",
                "     \"database-import/title\": \"Database Servers\",",
                "-    \"database-import/preparing\": \"Preparing Result ...\",",
                "-    \"database-import/checking\": \"Validating Query ...\",",
                "-    \"database-import/creating\": \"Creating project ...\",",
                "-    \"database-source/alert-host\": \"You must specify a Database Host\",",
                "-    \"database-source/alert-port\": \"You must specify a Database Port\",",
                "-    \"database-source/alert-user\": \"You must specify a Database User\",",
                "-    \"database-source/alert-password\": \"You must specify a Database Password\",",
                "-    \"database-source/alert-connection-name\": \"You must specify a Connection Name\",",
                "-    \"database-source/alert-initial-database\": \"You must specify an Initial Database\",",
                "-    \"database-source/alert-query\": \"You must specify a valid Query\",",
                "-    \"database-source/alert-invalid-query-keyword\": \"Query cannot contain Data Manipulation keyword:\",",
                "+    \"database-import/preparing\": \"Preparing result \u00e2\u0080\u00a6\",",
                "+    \"database-import/checking\": \"Validating query \u00e2\u0080\u00a6\",",
                "+    \"database-import/creating\": \"Creating project \u00e2\u0080\u00a6\",",
                "+    \"database-source/alert-host\": \"You must specify a database host\",",
                "+    \"database-source/alert-port\": \"You must specify a database port\",",
                "+    \"database-source/alert-user\": \"You must specify a database user\",",
                "+    \"database-source/alert-password\": \"You must specify a database password\",",
                "+    \"database-source/alert-connection-name\": \"You must specify a connection name\",",
                "+    \"database-source/alert-initial-database\": \"You must specify an initial database\",",
                "+    \"database-source/alert-query\": \"You must specify a valid query\",",
                "+    \"database-source/alert-invalid-query-keyword\": \"Query cannot contain data manipulation keyword:\",",
                "     \"database-source/alert-invalid-query-select\": \"Query must start with SELECT Keyword\",",
                "-    \"database-source/form-validation-failure\": \"New Connection From is Invalid!\",",
                "-    \"database-source/alert-connection-edit\": \"Connection edited successfully\",",
                "+    \"database-source/form-validation-failure\": \"New connection form invalid!\",",
                "+    \"database-source/alert-connection-edit\": \"Connection edited\",",
                "     \"database-source/connectionNameLabel\": \"Name:\",",
                "@@ -27,9 +27,9 @@",
                "     \"database-source/databaseConnectButton\": \"Connect\",",
                "-    \"database-source/newConnectionButtonDiv\": \"New Connection\",",
                "-    \"database-source/savedConnectionSpan\": \"Saved Connections\",",
                "-    \"database-parsing/start-over\": \"&laquo; Start Over\",",
                "-    \"database-parsing/conf-pars\": \"Configure Parsing Options\",",
                "+    \"database-source/newConnectionButtonDiv\": \"New connection\",",
                "+    \"database-source/savedConnectionSpan\": \"Saved connections\",",
                "+    \"database-parsing/start-over\": \"&laquo; Start over\",",
                "+    \"database-parsing/conf-pars\": \"Configure parsing options\",",
                "     \"database-parsing/proj-name\": \"Project&nbsp;name\",",
                "     \"database-parsing/create-proj\": \"Create Project &raquo;\",",
                "-    \"database-parsing/updating-preview\": \"Updating preview ...\",",
                "+    \"database-parsing/updating-preview\": \"Updating preview \u00e2\u0080\u00a6\",",
                "     \"database-parsing/worksheet\": \"Worksheets\",",
                "@@ -47,2 +47,2 @@",
                "     \"database-parsing/store-cell\": \"Store blank cells as nulls\"",
                "-}",
                "\\ No newline at end of file",
                "+}"
            ],
            "changed_files": [
                "extensions/database/module/langs/translation-en.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5f196286181cd07daea5f7637cd7b8dc07da01d6",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540201872,
            "hunks": 4,
            "message": "Jackson deserialization for RowFlagOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/row/RowFlagOperation.java b/main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "index b251d5ba8..5a998edda 100644",
                "--- a/main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "@@ -40,2 +40,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -54,2 +55,3 @@ import com.google.refine.model.changes.RowFlagChange;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -59,12 +61,11 @@ public class RowFlagOperation extends EngineDependentOperation {",
                "     static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        boolean flagged = obj.getBoolean(\"flagged\");",
                "-        ",
                "-        return new RowFlagOperation(",
                "-            EngineConfig.reconstruct(engineConfig),",
                "-            flagged",
                "-        );",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), RowFlagOperation.class);",
                "     }",
                "-    public RowFlagOperation(EngineConfig engineConfig, boolean flagged) {",
                "+    @JsonCreator",
                "+    public RowFlagOperation(",
                "+            @JsonProperty(\"engineConfig\")",
                "+            EngineConfig engineConfig,",
                "+            @JsonProperty(\"flagged\")",
                "+            boolean flagged) {",
                "         super(engineConfig);"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/row/RowFlagOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "be137fc53c056e1fcdcbf5528aec9106391a1750",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544078780,
            "hunks": 8,
            "message": "Add serialization tests in different timezone",
            "diff": [
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java b/main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java",
                "index 2fb4ab2d9..1ca563373 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java",
                "@@ -37,2 +37,3 @@ import java.time.OffsetDateTime;",
                " import java.util.Properties;",
                "+import java.util.TimeZone;",
                "diff --git a/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java b/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java",
                "index 8112523db..ba17e542c 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java",
                "@@ -4,4 +4,6 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.TimeZone;",
                " import org.apache.commons.io.IOUtils;",
                "+import org.testng.annotations.BeforeSuite;",
                " import org.testng.annotations.Test;",
                "@@ -9,2 +11,4 @@ import com.google.refine.tests.util.TestUtils;",
                " import com.google.refine.util.ParsingUtilities;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                " import com.google.refine.ProjectMetadata;",
                "@@ -12,13 +16,31 @@ import com.google.refine.ProjectMetadata;",
                " public class ProjectMetadataTests {",
                "+\t  ",
                "+    private String jsonSaveMode = null;",
                "+    private String jsonNonSaveMode = null;",
                "+    ",
                "+    @BeforeSuite",
                "+    public void setUpJson() throws IOException {",
                "+    \tInputStream f = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata.json\");",
                "+\t\tjsonNonSaveMode = IOUtils.toString(f);",
                "+\t\tf = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata_save_mode.json\");",
                "+\t\tjsonSaveMode = IOUtils.toString(f);",
                "+    }",
                "+\t",
                " \t@Test",
                " \tpublic void serializeProjectMetadata() throws IOException {",
                "-\t\tInputStream f = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata.json\");",
                "-\t\tString json = IOUtils.toString(f);",
                "-\t\tf = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata_save_mode.json\");",
                "-\t\tString fullJson = IOUtils.toString(f);",
                "-\t\t",
                "-\t\tf = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata_save_mode.json\");",
                "-        ProjectMetadata metadata = ParsingUtilities.mapper.readValue(f, ProjectMetadata.class);",
                "-        TestUtils.isSerializedTo(metadata, json);",
                "-        TestUtils.isSerializedTo(metadata, fullJson, true);",
                "+        ProjectMetadata metadata = ParsingUtilities.mapper.readValue(jsonSaveMode, ProjectMetadata.class);",
                "+        TestUtils.isSerializedTo(metadata, jsonNonSaveMode);",
                "+        TestUtils.isSerializedTo(metadata, jsonSaveMode, true);",
                "+\t}",
                "+\t",
                "+\t@Test",
                "+\tpublic void serializeProjectMetadataInDifferentTimezone() throws JsonParseException, JsonMappingException, IOException {",
                "+    \tTimeZone.setDefault(TimeZone.getTimeZone(\"JST\"));",
                "+    \ttry {",
                "+\t        ProjectMetadata metadata = ParsingUtilities.mapper.readValue(jsonSaveMode, ProjectMetadata.class);",
                "+\t        TestUtils.isSerializedTo(metadata, jsonNonSaveMode);",
                "+\t        TestUtils.isSerializedTo(metadata, jsonSaveMode, true);",
                "+    \t} finally {",
                "+    \t\tTimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));",
                "+    \t}",
                " \t}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java b/main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java",
                "index aff9e2a1f..609513b8a 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java",
                "@@ -39,2 +39,3 @@ import java.util.HashMap;",
                " import java.util.Map;",
                "+import java.util.TimeZone;",
                "@@ -91,2 +92,19 @@ public class ParsingUtilitiesTests extends RefineTest {",
                "+    /**",
                "+     * Converting between string and local time must be reversible, no matter the timezone.",
                "+     */",
                "+    @Test",
                "+    public void stringToLocalDateNonUTC() {",
                "+    \tTimeZone.setDefault(TimeZone.getTimeZone(\"JST\"));",
                "+    \ttry {",
                "+    \t\tAssert.assertEquals(ParsingUtilities.stringToLocalDate(\"2001-08-12T00:00:00Z\").getHour(), 9);",
                "+    \t\tAssert.assertEquals(ParsingUtilities.localDateToString(",
                "+    \t\t\t\tParsingUtilities.stringToLocalDate(\"2001-08-12T00:00:00Z\")),",
                "+    \t\t\t\t\"2001-08-12T00:00:00Z\");",
                "+    \t\t",
                "+    \t} finally {",
                "+    \t\tTimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));",
                "+    \t}",
                "+    }",
                "+    ",
                "     @Test"
            ],
            "changed_files": [
                "main/tests/server/src/com/google/refine/tests/expr/functions/strings/ToFromConversionTests.java",
                "main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java",
                "main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e661a647f3a38cd4aeef5976c1f64cb97a48a81f",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1537697108,
            "hunks": 2,
            "message": "Change isSerializedTo to check for Jackson serialization",
            "diff": [
                "diff --git a/main/tests/server/src/com/google/refine/tests/util/TestUtils.java b/main/tests/server/src/com/google/refine/tests/util/TestUtils.java",
                "index 630385195..b0984c645 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/util/TestUtils.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/util/TestUtils.java",
                "@@ -9,2 +9,3 @@ import java.util.Properties;",
                "+import com.fasterxml.jackson.core.JsonProcessingException;",
                " import com.fasterxml.jackson.databind.JsonNode;",
                "@@ -54,2 +55,10 @@ public class TestUtils {",
                "         equalAsJson(targetJson, JSONUtilities.serialize(o, options));",
                "+        ",
                "+        // also check Jackson serialization",
                "+        try {",
                "+\t\t\tequalAsJson(targetJson, mapper.writeValueAsString(o));",
                "+\t\t} catch (JsonProcessingException e) {",
                "+\t\t\te.printStackTrace();",
                "+\t\t\tfail(\"jackson serialization failed\");",
                "+\t\t}",
                "     }"
            ],
            "changed_files": [
                "main/tests/server/src/com/google/refine/tests/util/TestUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "70d0e9b2831d06b97fe8bff04820d9e3b503567a",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543235358,
            "hunks": 16,
            "message": "Support UI json format for ColumnDetail",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index 0816d3237..44a4f7b16 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -35,2 +35,4 @@ package com.google.refine.model.recon;",
                "+import static org.testng.Assert.assertNotNull;",
                "+",
                " import java.io.DataOutputStream;",
                "@@ -84,2 +86,8 @@ public class StandardReconConfig extends ReconConfig {",
                "+        /**",
                "+         * Unfortunately the format of ColumnDetail",
                "+         * is inconsistent in the UI and the backend",
                "+         * so we need to support two deserialization formats.",
                "+         * See the tests for that.",
                "+         */",
                "         @JsonCreator",
                "@@ -91,11 +99,22 @@ public class StandardReconConfig extends ReconConfig {",
                "                 @JsonProperty(\"propertyID\")",
                "-                String propertyID) {",
                "+                String propertyID,",
                "+                @JsonProperty(\"property\")",
                "+                ReconType property) {",
                "             this.columnName = columnName;",
                "-            this.propertyName = propertyName;",
                "-            this.propertyID = propertyID;",
                "+            this.propertyName = property == null ? propertyName : property.name;",
                "+            this.propertyID = property == null ? propertyID : property.id;",
                "         }",
                "+        ",
                "+    \t@Override",
                "+    \tpublic String toString() {",
                "+    \t\ttry {",
                "+\t\t\t\treturn ParsingUtilities.mapper.writeValueAsString(this);",
                "+\t\t\t} catch (JsonProcessingException e) {",
                "+\t\t\t\treturn super.toString();",
                "+\t\t\t}",
                "+    \t}",
                "     }",
                "-    static public ReconConfig reconstruct(String json) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(json, ReconConfig.class);",
                "+    static public StandardReconConfig reconstruct(String json) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(json, StandardReconConfig.class);",
                "     }",
                "@@ -110,2 +129,7 @@ public class StandardReconConfig extends ReconConfig {",
                "         }",
                "+        ",
                "+        @Override",
                "+        public String toString() {",
                "+        \treturn code;",
                "+        }",
                "     }",
                "@@ -146,3 +170,6 @@ public class StandardReconConfig extends ReconConfig {",
                "             int limit) {",
                "-        this(service, identifierSpace, schemaSpace, type.id, type.name, autoMatch, columnDetails, limit);",
                "+        this(service, identifierSpace, schemaSpace,",
                "+        \t\ttype != null ? type.id : null,",
                "+        \t\ttype != null ? type.name : null,",
                "+        \t\tautoMatch, columnDetails, limit);",
                "     }",
                "@@ -247,2 +274,11 @@ public class StandardReconConfig extends ReconConfig {",
                "         }",
                "+        ",
                "+    \t@Override",
                "+    \tpublic String toString() {",
                "+    \t\ttry {",
                "+\t\t\t\treturn ParsingUtilities.mapper.writeValueAsString(this);",
                "+\t\t\t} catch (JsonProcessingException e) {",
                "+\t\t\t\treturn super.toString();",
                "+\t\t\t}",
                "+    \t}",
                "     }",
                "@@ -286,2 +322,11 @@ public class StandardReconConfig extends ReconConfig {",
                "         }",
                "+        ",
                "+    \t@Override",
                "+    \tpublic String toString() {",
                "+    \t\ttry {",
                "+\t\t\t\treturn ParsingUtilities.mapper.writeValueAsString(this);",
                "+\t\t\t} catch (JsonProcessingException e) {",
                "+\t\t\t\treturn super.toString();",
                "+\t\t\t}",
                "+    \t}",
                "     }",
                "@@ -315,2 +360,11 @@ public class StandardReconConfig extends ReconConfig {",
                " \t\t}",
                "+    \t",
                "+    \t@Override",
                "+    \tpublic String toString() {",
                "+    \t\ttry {",
                "+\t\t\t\treturn ParsingUtilities.mapper.writeValueAsString(this);",
                "+\t\t\t} catch (JsonProcessingException e) {",
                "+\t\t\t\treturn super.toString();",
                "+\t\t\t}",
                "+    \t}",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java b/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "index 2e4466c27..0019d5929 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "@@ -3,3 +3,5 @@ package com.google.refine.tests.model.recon;",
                " import static org.testng.Assert.assertEquals;",
                "+import static org.testng.Assert.assertNull;",
                "+import java.io.IOException;",
                " import java.util.ArrayList;",
                "@@ -12,4 +14,10 @@ import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                "+import com.google.refine.model.Project;",
                "+import com.google.refine.model.Row;",
                " import com.google.refine.model.recon.ReconConfig;",
                "+import com.google.refine.model.recon.ReconJob;",
                " import com.google.refine.model.recon.StandardReconConfig;",
                "+import com.google.refine.model.recon.StandardReconConfig.ColumnDetail;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -95,2 +103,73 @@ public class StandardReconConfigTests extends RefineTest {",
                "     }",
                "+    ",
                "+    @Test",
                "+    public void testReconstructNoType() throws IOException {",
                "+    \tString json = \"{\\\"mode\\\":\\\"standard-service\\\",\"",
                "+    \t\t\t+ \"\\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"",
                "+    \t\t\t+ \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"",
                "+    \t\t\t+ \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"",
                "+    \t\t\t+ \"\\\"type\\\":null,\"",
                "+    \t\t\t+ \"\\\"autoMatch\\\":true,\"",
                "+    \t\t\t+ \"\\\"columnDetails\\\":[\"",
                "+    \t\t\t+ \"    {\\\"column\\\":\\\"_ - id\\\",\"",
                "+    \t\t\t+ \"     \\\"property\\\":{\\\"id\\\":\\\"P3153\\\",\\\"name\\\":\\\"Crossref funder ID\\\"}}\"",
                "+    \t\t\t+ \"],\"",
                "+    \t\t\t+ \"\\\"limit\\\":0}\";",
                "+    \tStandardReconConfig config = StandardReconConfig.reconstruct(json);",
                "+    \tassertNull(config.typeID);",
                "+    \tassertNull(config.typeName);",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void formulateQueryTest() throws IOException {",
                "+    \tProject project = createCSVProject(\"title,director\\n\"",
                "+    \t\t\t+ \"mulholland drive,david lynch\");",
                "+    \t",
                "+    \tString config = \" {\\n\" + ",
                "+                \"        \\\"mode\\\": \\\"standard-service\\\",\\n\" + ",
                "+                \"        \\\"service\\\": \\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\\n\" + ",
                "+                \"        \\\"identifierSpace\\\": \\\"http://www.wikidata.org/entity/\\\",\\n\" + ",
                "+                \"        \\\"schemaSpace\\\": \\\"http://www.wikidata.org/prop/direct/\\\",\\n\" + ",
                "+                \"        \\\"type\\\": {\\n\" + ",
                "+                \"                \\\"id\\\": \\\"Q1234\\\",\\n\" + ",
                "+                \"                \\\"name\\\": \\\"movie\\\"\\n\" + ",
                "+                \"        },\\n\" + ",
                "+                \"        \\\"autoMatch\\\": true,\\n\" + ",
                "+                \"        \\\"columnDetails\\\": [\\n\" + ",
                "+                \"           {\\n\" + ",
                "+                \"             \\\"column\\\": \\\"director\\\",\\n\" + ",
                "+                \"             \\\"propertyName\\\": \\\"Director\\\",\\n\" + ",
                "+                \"             \\\"propertyID\\\": \\\"P123\\\"\\n\" +",
                "+                \"           }\\n\" +",
                "+                \"        ]}\";",
                "+    \tStandardReconConfig r = StandardReconConfig.reconstruct(config);",
                "+    \tRow row = project.rows.get(0);",
                "+        ReconJob job = r.createJob(project, 0, row, \"title\", row.getCell(0));",
                "+        TestUtils.assertEqualAsJson(\"{\"",
                "+        \t\t+ \"\\\"query\\\":\\\"mulholland drive\\\",\"",
                "+        \t\t+ \"\\\"type\\\":\\\"Q1234\\\",\"",
                "+        \t\t+ \"\\\"properties\\\":[\"",
                "+        \t\t+ \"     {\\\"pid\\\":\\\"P123\\\",\\\"v\\\":\\\"david lynch\\\"}\"",
                "+        \t\t+ \"],\"",
                "+        \t\t+ \"\\\"type_strict\\\":\\\"should\\\"}\", job.toString());",
                "+    }",
                "+    ",
                "+    /**",
                "+     * The UI format and the backend format differ for serialization",
                "+     * (the UI never deserializes and the backend serialization did not matter).",
                "+\t * TODO: change the frontend so it uses the same format.",
                "+     */",
                "+    @Test",
                "+    public void deserializeColumnDetail() throws JsonParseException, JsonMappingException, IOException {",
                "+    \tString uiJson = \"{\\\"column\\\":\\\"director\\\",\"",
                "+    \t\t\t+ \"\\\"property\\\":{\"",
                "+    \t\t\t+ \"   \\\"id\\\":\\\"P123\\\",\"",
                "+    \t\t\t+ \"   \\\"name\\\":\\\"Director\\\"\"",
                "+    \t\t\t+ \"}}\";",
                "+    \tString backendJson = \"{\\\"column\\\":\\\"director\\\",\"",
                "+    \t\t\t+ \"\\\"propertyID\\\":\\\"P123\\\",\"",
                "+    \t\t\t+ \"\\\"propertyName\\\":\\\"Director\\\"}\";",
                "+    \tColumnDetail cd = ParsingUtilities.mapper.readValue(uiJson, ColumnDetail.class);",
                "+    \tTestUtils.isSerializedTo(cd, backendJson);",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8e247b83e0611d1e726384fd5a3dac5be2cab1f1",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544023348,
            "hunks": 3,
            "message": "Fix Reconcile facets affected by change to list facet boolean handling",
            "diff": [
                "diff --git a/main/webapp/modules/core/scripts/views/data-table/menu-reconcile.js b/main/webapp/modules/core/scripts/views/data-table/menu-reconcile.js",
                "index 48df8ef85..7845334fd 100644",
                "--- a/main/webapp/modules/core/scripts/views/data-table/menu-reconcile.js",
                "+++ b/main/webapp/modules/core/scripts/views/data-table/menu-reconcile.js",
                "@@ -296,3 +296,3 @@ DataTableColumnHeaderUI.extendMenu(function(column, columnHeaderUI, menu) {",
                "                   \"columnName\" : column.name, ",
                "-                  \"expression\" : \"cell.recon.judgmentHistoryEntry\"",
                "+                  \"expression\" : \"cell.recon.judgmentHistoryEntry.toString()\"",
                "                 }",
                "@@ -328,3 +328,3 @@ DataTableColumnHeaderUI.extendMenu(function(column, columnHeaderUI, menu) {",
                "                   \"columnName\" : column.name, ",
                "-                  \"expression\" : 'forNonBlank(cell.recon.features.typeMatch, v, v, if(isNonBlank(value), if(cell.recon != null, \"(no type)\", \"(unreconciled)\"), \"(blank)\"))'",
                "+                  \"expression\" : 'forNonBlank(cell.recon.features.typeMatch, v, v, if(isNonBlank(value), if(cell.recon != null, \"(no type)\", \"(unreconciled)\"), \"(blank)\")).toString()'",
                "                 },",
                "@@ -345,3 +345,3 @@ DataTableColumnHeaderUI.extendMenu(function(column, columnHeaderUI, menu) {",
                "                   \"columnName\" : column.name, ",
                "-                  \"expression\" : 'forNonBlank(cell.recon.features.nameMatch, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))'",
                "+                  \"expression\" : 'forNonBlank(cell.recon.features.nameMatch, v, v, if(isNonBlank(value), if(cell.recon.new,\"(new)\",\"(unreconciled)\"), \"(blank)\")).toString()'",
                "                 },"
            ],
            "changed_files": [
                "main/webapp/modules/core/scripts/views/data-table/menu-reconcile.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "49b84574dac2966919a5b28dc465e7c6394eb8bc",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538246557,
            "hunks": 1,
            "message": "Move EvalErrorTests",
            "diff": [
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/EvalErrorTests.java b/main/tests/server/src/com/google/refine/tests/expr/EvalErrorTests.java",
                "new file mode 100644",
                "index 000000000..c91a152f5",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/EvalErrorTests.java",
                "@@ -0,0 +1,14 @@",
                "+package com.google.refine.tests.expr;",
                "+",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.expr.EvalError;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class EvalErrorTests {",
                "+    @Test",
                "+    public void serializeEvalError() {",
                "+        EvalError e = new EvalError(\"This is a critical error\");",
                "+        TestUtils.isSerializedTo(e, \"{\\\"type\\\":\\\"error\\\",\\\"message\\\":\\\"This is a critical error\\\"}\");",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "main/tests/server/src/com/google/refine/tests/expr/EvalErrorTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a76d88122a41c5b71cdf322bb277214d06026f1a",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542730662,
            "hunks": 5,
            "message": "Migrate ApplyOperationsCommand",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java b/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "index 8fbfeab44..2ed9298be 100644",
                "--- a/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "+++ b/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "@@ -42,6 +42,4 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.commands.Command;",
                "@@ -61,8 +59,10 @@ public class ApplyOperationsCommand extends Command {",
                "         try {",
                "-            JSONArray a = ParsingUtilities.evaluateJsonStringToArray(jsonString);",
                "-            int count = a.length();",
                "+            ArrayNode a = ParsingUtilities.evaluateJsonStringToArrayNode(jsonString);",
                "+            int count = a.size();",
                "             for (int i = 0; i < count; i++) {",
                "-                JSONObject obj = a.getJSONObject(i);",
                "-                ",
                "-                reconstructOperation(project, obj);",
                "+            \tif (a.get(i) instanceof ObjectNode) {",
                "+\t                ObjectNode obj = (ObjectNode) a.get(i);",
                "+\t                ",
                "+\t                reconstructOperation(project, obj);",
                "+            \t}",
                "             }",
                "@@ -74,3 +74,3 @@ public class ApplyOperationsCommand extends Command {",
                "             }",
                "-        } catch (JSONException e) {",
                "+        } catch (IOException e) {",
                "             respondException(response, e);",
                "@@ -79,4 +79,4 @@ public class ApplyOperationsCommand extends Command {",
                "-    protected void reconstructOperation(Project project, JSONObject obj) throws IOException {",
                "-        AbstractOperation operation = ParsingUtilities.mapper.readValue(obj.toString(), AbstractOperation.class);",
                "+    protected void reconstructOperation(Project project, ObjectNode obj) throws IOException {",
                "+        AbstractOperation operation = ParsingUtilities.mapper.convertValue(obj, AbstractOperation.class);",
                "         if (operation != null) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/history/ApplyOperationsCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ebcc7b51b5a141c2bd08ad195dbe9e51d432715d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540214283,
            "hunks": 1,
            "message": "Add OperationResolver",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/OperationResolver.java b/main/src/com/google/refine/model/OperationResolver.java",
                "new file mode 100644",
                "index 000000000..6a12b8db4",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/model/OperationResolver.java",
                "@@ -0,0 +1,36 @@",
                "+package com.google.refine.model;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;",
                "+import com.fasterxml.jackson.databind.DatabindContext;",
                "+import com.fasterxml.jackson.databind.JavaType;",
                "+import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;",
                "+import com.fasterxml.jackson.databind.type.TypeFactory;",
                "+",
                "+import com.google.refine.operations.OperationRegistry;",
                "+",
                "+public class OperationResolver extends TypeIdResolverBase {",
                "+    ",
                "+    protected TypeFactory factory = TypeFactory.defaultInstance();",
                "+",
                "+    @Override",
                "+    public Id getMechanism() {",
                "+        return Id.NAME;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String idFromValue(Object instance) {",
                "+        return ((AbstractOperation)instance).getOperationId();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String idFromValueAndType(Object instance, Class<?> type) {",
                "+        return OperationRegistry.s_opClassToName.get(type);",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public JavaType typeFromId(DatabindContext context, String id) throws IOException {",
                "+        return factory.constructSimpleType(OperationRegistry.resolveOperationId(id), new JavaType[0]);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/OperationResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7156c49c4d4df200a06d7868becad55cee811158",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538920785,
            "hunks": 30,
            "message": "Remove remaining uses of org.json.JSONWriter in the core backend",
            "diff": [
                "diff --git a/main/src/com/google/refine/exporters/TemplatingExporter.java b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "index 996ce4591..05568fbf5 100644",
                "--- a/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "+++ b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "@@ -36,3 +36,2 @@ package com.google.refine.exporters;",
                " import java.io.IOException;",
                "-import java.io.StringWriter;",
                " import java.io.Writer;",
                "@@ -42,3 +41,4 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -65,2 +65,22 @@ public class TemplatingExporter implements WriterExporter {",
                "     }",
                "+    ",
                "+    protected static class TemplateConfig {",
                "+        @JsonProperty(\"template\")",
                "+        protected String template;",
                "+        @JsonProperty(\"prefix\")",
                "+        protected String prefix;",
                "+        @JsonProperty(\"suffix\")",
                "+        protected String suffix;",
                "+        @JsonProperty(\"separator\")",
                "+        protected String separator;",
                "+        ",
                "+        protected TemplateConfig(",
                "+                String template, String prefix,",
                "+                String suffix, String separator) {",
                "+            this.template = template;",
                "+            this.prefix = prefix;",
                "+            this.suffix = suffix;",
                "+            this.separator = separator;",
                "+        }",
                "+    }",
                "@@ -96,16 +116,6 @@ public class TemplatingExporter implements WriterExporter {",
                "         if (!\"true\".equals(options.getProperty(\"preview\"))) {",
                "-            StringWriter stringWriter = new StringWriter();",
                "-            JSONWriter jsonWriter = new JSONWriter(stringWriter);",
                "-            try {",
                "-                jsonWriter.object();",
                "-                jsonWriter.key(\"template\"); jsonWriter.value(templateString);",
                "-                jsonWriter.key(\"prefix\"); jsonWriter.value(prefixString);",
                "-                jsonWriter.key(\"suffix\"); jsonWriter.value(suffixString);",
                "-                jsonWriter.key(\"separator\"); jsonWriter.value(separatorString);",
                "-                jsonWriter.endObject();",
                "-            } catch (JSONException e) {",
                "-                // ignore",
                "-            }",
                "-            ",
                "-            project.getMetadata().getPreferenceStore().put(\"exporters.templating.template\", stringWriter.toString());",
                "+            TemplateConfig config = new TemplateConfig(templateString, prefixString,",
                "+                    suffixString, separatorString);",
                "+            project.getMetadata().getPreferenceStore().put(\"exporters.templating.template\",",
                "+                    ParsingUtilities.defaultWriter.writeValueAsString(config));",
                "         }",
                "diff --git a/main/src/com/google/refine/importing/DefaultImportingController.java b/main/src/com/google/refine/importing/DefaultImportingController.java",
                "index b7b920dae..6c5647261 100644",
                "--- a/main/src/com/google/refine/importing/DefaultImportingController.java",
                "+++ b/main/src/com/google/refine/importing/DefaultImportingController.java",
                "@@ -50,5 +50,5 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "@@ -189,5 +189,5 @@ public class DefaultImportingController implements ImportingController {",
                "             Writer w = response.getWriter();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "             try {",
                "-                writer.object();",
                "+                writer.writeStartObject();",
                "                 if (exceptions.size() == 0) {",
                "@@ -195,12 +195,11 @@ public class DefaultImportingController implements ImportingController {",
                "-                    writer.key(\"status\"); writer.value(\"ok\");",
                "+                    writer.writeStringField(\"status\", \"ok\");",
                "                 } else {",
                "-                    writer.key(\"status\"); writer.value(\"error\");",
                "-                    writer.key(\"errors\");",
                "-                    writer.array();",
                "+                    writer.writeStringField(\"status\", \"error\");",
                "+                    writer.writeArrayFieldStart(\"errors\");",
                "                     writeErrors(writer, exceptions);",
                "-                    writer.endArray();",
                "+                    writer.writeEndArray();",
                "                 }",
                "-                writer.endObject();",
                "-            } catch (JSONException e) {",
                "+                writer.writeEndObject();",
                "+            } catch (IOException e) {",
                "                 throw new ServletException(e);",
                "@@ -306,3 +305,3 @@ public class DefaultImportingController implements ImportingController {",
                "-    static public void writeErrors(JSONWriter writer, List<Exception> exceptions) throws JSONException {",
                "+    static public void writeErrors(JsonGenerator writer, List<Exception> exceptions) throws IOException {",
                "         for (Exception e : exceptions) {",
                "@@ -311,8 +310,6 @@ public class DefaultImportingController implements ImportingController {",
                "-            writer.object();",
                "-            writer.key(\"message\");",
                "-            writer.value(e.getLocalizedMessage());",
                "-            writer.key(\"stack\");",
                "-            writer.value(sw.toString());",
                "-            writer.endObject();",
                "+            writer.writeStartObject();",
                "+            writer.writeStringField(\"message\", e.getLocalizedMessage());",
                "+            writer.writeStringField(\"stack\", sw.toString());",
                "+            writer.writeEndObject();",
                "         }",
                "diff --git a/main/src/com/google/refine/importing/ImportingManager.java b/main/src/com/google/refine/importing/ImportingManager.java",
                "index 53b041adf..39792c34d 100644",
                "--- a/main/src/com/google/refine/importing/ImportingManager.java",
                "+++ b/main/src/com/google/refine/importing/ImportingManager.java",
                "@@ -45,3 +45,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Properties;",
                " import java.util.Set;",
                "@@ -52,4 +51,2 @@ import java.util.concurrent.TimeUnit;",
                " import org.apache.commons.io.FileUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index b6156d29a..692e0958e 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -42,4 +42,7 @@ import java.time.OffsetDateTime;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                " import java.util.HashSet;",
                " import java.util.List;",
                "+import java.util.Map;",
                " import java.util.Set;",
                "@@ -50,3 +53,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -58,2 +60,3 @@ import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.core.JsonProcessingException;",
                "@@ -236,12 +239,9 @@ public class StandardReconConfig extends ReconConfig {",
                "         try {",
                "-            StringWriter stringWriter = new StringWriter();",
                "-            JSONWriter jsonWriter = new JSONWriter(stringWriter);",
                "-            jsonWriter.object();",
                "-            jsonWriter.key(\"query\");",
                "-            jsonWriter.value(query);",
                "-            jsonWriter.endObject();",
                "+            String queryJson = ParsingUtilities.defaultWriter.writeValueAsString(",
                "+                    Collections.singletonMap(\"query\", query));",
                "             job.text = query;",
                "-            job.code = stringWriter.toString();",
                "+            job.code = queryJson;",
                "             return job;",
                "-        } catch (JSONException je) {",
                "+        } catch (JsonProcessingException e) {",
                "+            e.printStackTrace();",
                "             return null;",
                "@@ -249,2 +249,56 @@ public class StandardReconConfig extends ReconConfig {",
                "     }",
                "+    ",
                "+    protected static class QueryProperty {",
                "+        @JsonProperty(\"pid\")",
                "+        String pid;",
                "+        @JsonProperty(\"v\")",
                "+        Object v;",
                "+        ",
                "+        protected QueryProperty(",
                "+                String pid,",
                "+                Object v) {",
                "+            this.pid = pid;",
                "+            this.v = v;",
                "+        }",
                "+    }",
                "+    ",
                "+    protected static class ReconQuery {",
                "+        @JsonProperty(\"query\")",
                "+        protected String query;",
                "+        ",
                "+        @JsonProperty(\"type\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        protected String typeID;",
                "+        ",
                "+        @JsonProperty(\"type_strict\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        public String isTypeStrict() {",
                "+            if(typeID != null) {",
                "+                return \"should\";",
                "+            }",
                "+            return null;",
                "+        }",
                "+        ",
                "+        @JsonProperty(\"properties\")",
                "+        @JsonInclude(Include.NON_EMPTY)",
                "+        protected List<QueryProperty> properties;",
                "+        ",
                "+        // Only send limit if it's non-default to preserve backward compatibility with",
                "+        // services which might choke on this",
                "+        @JsonProperty(\"limit\")",
                "+        @JsonInclude(Include.NON_DEFAULT)",
                "+        protected int limit;",
                "+        ",
                "+        public ReconQuery(",
                "+                String query,",
                "+                String typeID,",
                "+                List<QueryProperty> properties,",
                "+                int limit) {",
                "+            this.query = query;",
                "+            this.typeID = typeID;",
                "+            this.properties = properties;",
                "+            this.limit = limit;",
                "+        }",
                "+        ",
                "+    }",
                "@@ -256,70 +310,44 @@ public class StandardReconConfig extends ReconConfig {",
                "-        try {",
                "-            StringWriter stringWriter = new StringWriter();",
                "-            JSONWriter jsonWriter = new JSONWriter(stringWriter);",
                "-            ",
                "-            jsonWriter.object();",
                "-                jsonWriter.key(\"query\"); jsonWriter.value(cell.value.toString());",
                "-                if (typeID != null) {",
                "-                    jsonWriter.key(\"type\"); jsonWriter.value(typeID);",
                "-                    jsonWriter.key(\"type_strict\"); jsonWriter.value(\"should\");",
                "-                }",
                "+            List<QueryProperty> properties = new ArrayList<>();",
                "+                ",
                "+            for (ColumnDetail c : columnDetails) {",
                "+                int detailCellIndex = project.columnModel.getColumnByName(c.columnName).getCellIndex();",
                "-                if (columnDetails.size() > 0) {",
                "-                    jsonWriter.key(\"properties\");",
                "-                    jsonWriter.array();",
                "+                Cell cell2 = row.getCell(detailCellIndex);",
                "+                if (cell2 == null || !ExpressionUtils.isNonBlankData(cell2.value)) {",
                "+                    int cellIndex = project.columnModel.getColumnByName(columnName).getCellIndex();",
                "-                    for (ColumnDetail c : columnDetails) {",
                "-                        int detailCellIndex = project.columnModel.getColumnByName(c.columnName).getCellIndex();",
                "-                        ",
                "-                        Cell cell2 = row.getCell(detailCellIndex);",
                "-                        if (cell2 == null || !ExpressionUtils.isNonBlankData(cell2.value)) {",
                "-                            int cellIndex = project.columnModel.getColumnByName(columnName).getCellIndex();",
                "-                            ",
                "-                            RowDependency rd = project.recordModel.getRowDependency(rowIndex);",
                "-                            if (rd != null && rd.cellDependencies != null) {",
                "-                                int contextRowIndex = rd.cellDependencies[cellIndex].rowIndex;",
                "-                                if (contextRowIndex >= 0 && contextRowIndex < project.rows.size()) {",
                "-                                    Row row2 = project.rows.get(contextRowIndex);",
                "-                                    ",
                "-                                    cell2 = row2.getCell(detailCellIndex);",
                "-                                }",
                "-                            }",
                "-                        }",
                "-                        ",
                "-                        if (cell2 != null && ExpressionUtils.isNonBlankData(cell2.value)) {",
                "-                            jsonWriter.object();",
                "+                    RowDependency rd = project.recordModel.getRowDependency(rowIndex);",
                "+                    if (rd != null && rd.cellDependencies != null) {",
                "+                        int contextRowIndex = rd.cellDependencies[cellIndex].rowIndex;",
                "+                        if (contextRowIndex >= 0 && contextRowIndex < project.rows.size()) {",
                "+                            Row row2 = project.rows.get(contextRowIndex);",
                "-                            jsonWriter.key(\"pid\"); jsonWriter.value(c.propertyID);",
                "-                            jsonWriter.key(\"v\");",
                "-                            if (cell2.recon != null && cell2.recon.match != null) {",
                "-                                jsonWriter.object();",
                "-                                jsonWriter.key(\"id\"); jsonWriter.value(cell2.recon.match.id);",
                "-                                jsonWriter.key(\"name\"); jsonWriter.value(cell2.recon.match.name);",
                "-                                jsonWriter.endObject();",
                "-                            } else if (cell2.value instanceof OffsetDateTime) {",
                "-                                jsonWriter.value(ParsingUtilities.dateToString((OffsetDateTime) cell2.value));",
                "-                            } else {",
                "-                                jsonWriter.value(cell2.value.toString());",
                "-                            }",
                "-                            ",
                "-                            jsonWriter.endObject();",
                "+                            cell2 = row2.getCell(detailCellIndex);",
                "                         }",
                "                     }",
                "-                    ",
                "-                    jsonWriter.endArray();",
                "                 }",
                "-            // Only send limit if it's non-default to preserve backward compatibility with",
                "-            // services which might choke on this",
                "-            if (limit != 0) {",
                "-                jsonWriter.key(\"limit\"); jsonWriter.value(limit);",
                "+                if (cell2 != null && ExpressionUtils.isNonBlankData(cell2.value)) {",
                "+                    Object v = null;",
                "+                    if (cell2.recon != null && cell2.recon.match != null) {",
                "+                        Map<String, String> recon = new HashMap<>();",
                "+                        recon.put(\"id\", cell2.recon.match.id);",
                "+                        recon.put(\"name\", cell2.recon.match.name);",
                "+                        v = recon;",
                "+                    } else {",
                "+                        v = cell2.value;",
                "+                    }",
                "+                    properties.add(new QueryProperty(c.propertyID, v));",
                "+                }",
                "+",
                "             }",
                "-                ",
                "-            jsonWriter.endObject();",
                "-            ",
                "-            job.text = cell.value.toString();",
                "-            job.code = stringWriter.toString();",
                "-        } catch (JSONException e) {",
                "-            //",
                "+        ",
                "+        ReconQuery query = new ReconQuery(cell.value.toString(), typeID, properties, limit);",
                "+        ",
                "+        job.text = cell.value.toString();",
                "+        try {",
                "+            job.code = ParsingUtilities.defaultWriter.writeValueAsString(query);",
                "+        } catch (JsonProcessingException e) {",
                "+            e.printStackTrace();",
                "         }",
                "diff --git a/main/src/com/google/refine/util/JSONUtilities.java b/main/src/com/google/refine/util/JSONUtilities.java",
                "index 925adcc1a..ea94a17e8 100644",
                "--- a/main/src/com/google/refine/util/JSONUtilities.java",
                "+++ b/main/src/com/google/refine/util/JSONUtilities.java",
                "@@ -48,3 +48,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "@@ -174,18 +173,2 @@ public class JSONUtilities {",
                "-    static public void writeStringList(JSONWriter writer, List<String> list) throws JSONException {",
                "-        writer.array();",
                "-        for (String s : list) {",
                "-            writer.value(s);",
                "-        }",
                "-        writer.endArray();",
                "-    }",
                "-    ",
                "-    static public void writeStringArray(JSONWriter writer, String[] strings) throws JSONException {",
                "-        writer.array();",
                "-        for (String s : strings) {",
                "-            writer.value(s);",
                "-        }",
                "-        writer.endArray();",
                "-    }",
                "-    ",
                "     static public void putField(JSONObject obj, String key, Object value) throws JSONException {"
            ],
            "changed_files": [
                "main/src/com/google/refine/exporters/TemplatingExporter.java",
                "main/src/com/google/refine/importing/DefaultImportingController.java",
                "main/src/com/google/refine/importing/ImportingManager.java",
                "main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "main/src/com/google/refine/util/JSONUtilities.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ae61368796b8987f4aa1bad95d082da3dfb3df47",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540198077,
            "hunks": 7,
            "message": "Jackson deserialization for TextSearchFacetConfig",
            "diff": [
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java",
                "index 870c5f36e..5d8903bc8 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java",
                "@@ -38,3 +38,2 @@ import java.io.IOException;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -45,2 +44,5 @@ import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                "+",
                " import com.google.refine.browsing.RowFilter;",
                "@@ -52,2 +54,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -91,6 +94,5 @@ public class TextSearchFacetTests extends RefineTest {",
                "-    private void configureFilter(String filter) {",
                "+    private void configureFilter(String filter) throws JsonParseException, JsonMappingException, IOException {",
                "         //Add the facet to the project and create a row filter",
                "-        textfilterconfig = new TextSearchFacetConfig();",
                "-        textfilterconfig.initializeFromJSON(new JSONObject(filter));",
                "+        textfilterconfig = ParsingUtilities.mapper.readValue(filter, TextSearchFacetConfig.class);",
                "         textfilter = textfilterconfig.apply(project);",
                "@@ -196,5 +198,4 @@ public class TextSearchFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeTextSearchFacetConfig() {",
                "-        TextSearchFacetConfig config = new TextSearchFacetConfig();",
                "-        config.initializeFromJSON(new JSONObject(sensitiveConfigJson));",
                "+    public void serializeTextSearchFacetConfig() throws JsonParseException, JsonMappingException, IOException {",
                "+        TextSearchFacetConfig config = ParsingUtilities.mapper.readValue(sensitiveConfigJson, TextSearchFacetConfig.class);",
                "         TestUtils.isSerializedTo(config, sensitiveConfigJson);",
                "@@ -203,5 +204,4 @@ public class TextSearchFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeTextSearchFacet() {",
                "-        TextSearchFacetConfig config = new TextSearchFacetConfig();",
                "-        config.initializeFromJSON(new JSONObject(sensitiveConfigJson));",
                "+    public void serializeTextSearchFacet() throws JsonParseException, JsonMappingException, IOException {",
                "+        TextSearchFacetConfig config = ParsingUtilities.mapper.readValue(sensitiveConfigJson, TextSearchFacetConfig.class);",
                "         TextSearchFacet facet = config.apply(project);"
            ],
            "changed_files": [
                "main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9cab735dfcd18e587a6bdb34303d496bec812e2d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541274679,
            "hunks": 1,
            "message": "Add common interface for preference values",
            "diff": [
                "diff --git a/main/src/com/google/refine/preference/PreferenceValue.java b/main/src/com/google/refine/preference/PreferenceValue.java",
                "new file mode 100644",
                "index 000000000..78d8e64f2",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/preference/PreferenceValue.java",
                "@@ -0,0 +1,25 @@",
                "+package com.google.refine.preference;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo;",
                "+",
                "+/**",
                "+ * Interface to be extended by all objects stored ",
                "+ * in the preferences. This ensures that their full class",
                "+ * name is serialized with them. They should implement",
                "+ * Jackson deserialization as usual.",
                "+ * ",
                "+ * @author Antonin Delpeuch",
                "+ */",
                "+",
                "+@JsonTypeInfo(",
                "+        use=JsonTypeInfo.Id.CLASS,",
                "+        include=JsonTypeInfo.As.PROPERTY,",
                "+        property=\"class\")",
                "+public interface PreferenceValue {",
                "+\t",
                "+\t@JsonProperty(\"class\")",
                "+\tpublic default String getClassName() {",
                "+\t\treturn this.getClass().getName();",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/preference/PreferenceValue.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "431f64a52a5acc39bd497eb30c89532aa3d1674c",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544201673,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate.",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ac444b8b5069f983a403427f203af953df8364c7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542365577,
            "hunks": 2,
            "message": "Add project metadata serialization test",
            "diff": [
                "diff --git a/main/tests/data/example_project_metadata.json b/main/tests/data/example_project_metadata.json",
                "new file mode 100644",
                "index 000000000..016955776",
                "--- /dev/null",
                "+++ b/main/tests/data/example_project_metadata.json",
                "@@ -0,0 +1 @@",
                "+{\"_customMetadata\":{},\"created\":\"2018-10-12T10:24:28Z\",\"tags\":[],\"importOptionMetadata\":[{\"guessCellValueTypes\":false,\"projectTags\":[\"\"],\"ignoreLines\":-1,\"processQuotes\":true,\"fileSource\":\"query.tsv\",\"encoding\":\"\",\"separator\":\"\\\\t\",\"storeBlankCellsAsNulls\":true,\"storeBlankRows\":true,\"skipDataLines\":0,\"includeFileSources\":false,\"headerLines\":1,\"limit\":-1,\"quoteCharacter\":\"\\\"\",\"projectName\":\"CPVs\"}],\"creator\":\"\",\"contributors\":\"\",\"subject\":\"\",\"rowCount\":289,\"preferenceStore\":{\"entries\":{\"scripting.starred-expressions\":{\"top\":2147483647,\"list\":[],\"class\":\"com.google.refine.preference.TopList\"},\"scripting.expressions\":{\"top\":100,\"list\":[],\"class\":\"com.google.refine.preference.TopList\"}}},\"modified\":\"2018-10-12T10:51:41Z\",\"description\":\"\",\"name\":\"CPVs\",\"dirty\":false,\"title\":\"\",\"homepage\":\"\",\"image\":\"\",\"license\":\"\",\"version\":\"\"}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java b/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java",
                "new file mode 100644",
                "index 000000000..e25e8aeaf",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java",
                "@@ -0,0 +1,22 @@",
                "+package com.google.refine.tests.io;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import org.apache.commons.io.IOUtils;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.model.metadata.ProjectMetadata;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class ProjectMetadataTests {",
                "+\t@Test",
                "+\tpublic void serializeProjectMetadata() throws IOException {",
                "+\t\tProjectMetadata metadata = new ProjectMetadata();",
                "+\t\tInputStream f = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata.json\");",
                "+\t\tString json = IOUtils.toString(f);",
                "+\t\tf = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata.json\");",
                "+        metadata.loadFromStream(f);",
                "+        TestUtils.isSerializedTo(metadata, json);",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "main/tests/data/example_project_metadata.json",
                "main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1eaadc30b72d0655ad3d93a00e3fcdbd7ea45b4e",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541436200,
            "hunks": 5,
            "message": "Migrate database extension importers to Jackson",
            "diff": [
                "diff --git a/extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java b/extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java",
                "index 1fce41bc7..1f6c56c73 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java",
                "@@ -47,3 +47,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.ProjectManager;",
                "@@ -194,3 +194,3 @@ public class DatabaseImportController implements ImportingController {",
                "             try {",
                "-                JSONObject optionObj = ParsingUtilities.evaluateJsonStringToObject(",
                "+                ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "                     request.getParameter(\"options\"));",
                "@@ -267,3 +267,3 @@ public class DatabaseImportController implements ImportingController {",
                "             int limit, ",
                "-            JSONObject options,",
                "+            ObjectNode options,",
                "             List<Exception> exceptions) throws DatabaseServiceException{",
                "@@ -325,3 +325,3 @@ public class DatabaseImportController implements ImportingController {",
                "             try {",
                "-                final JSONObject optionObj = ParsingUtilities.evaluateJsonStringToObject(",
                "+                final ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "                     request.getParameter(\"options\"));",
                "@@ -396,3 +396,3 @@ public class DatabaseImportController implements ImportingController {",
                "             int limit, ",
                "-            JSONObject options,",
                "+            ObjectNode options,",
                "             List<Exception> exceptions) throws DatabaseServiceException{"
            ],
            "changed_files": [
                "extensions/database/src/com/google/refine/extension/database/DatabaseImportController.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c0d1a39991a9924f5e34a08fe849ef0584d4b025",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542732497,
            "hunks": 5,
            "message": "Migrate CustomizableTabularExporterUtilities to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java b/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "index e395f8d86..f32058cb8 100644",
                "--- a/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "+++ b/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "@@ -49,4 +49,2 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.commons.validator.routines.UrlValidator;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONObject;",
                "@@ -56,2 +54,4 @@ import com.fasterxml.jackson.core.JsonProcessingException;",
                " import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.ProjectManager;",
                "@@ -404,9 +404,9 @@ abstract public class CustomizableTabularExporterUtilities {",
                "             PreferenceStore ps = ProjectManager.singleton.getPreferenceStore();",
                "-            JSONArray services = (JSONArray) ps.get(\"reconciliation.standardServices\");",
                "+            ArrayNode services = (ArrayNode) ps.get(\"reconciliation.standardServices\");",
                "             if (services != null) {",
                "-                int count = services.length();",
                "+                int count = services.size();",
                "                 for (int i = 0; i < count; i++) {",
                "-                    JSONObject service = JSONUtilities.getObjectElement(services, i);",
                "-                    JSONObject view = JSONUtilities.getObject(service, \"view\");",
                "+                    ObjectNode service = (ObjectNode) services.get(i);",
                "+                    ObjectNode view = JSONUtilities.getObject(service, \"view\");",
                "                     if (view != null) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d9af48a49a3829fd850e70cf1f796ad77e8144b8",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544522246,
            "hunks": 16,
            "message": "Expose own interface for similarity distances, isolating from Vicino",
            "diff": [
                "diff --git a/main/src/com/google/refine/clustering/knn/DistanceFactory.java b/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "index fb6ff2032..7f7a71f07 100644",
                "--- a/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "+++ b/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "@@ -7,3 +7,2 @@ import java.util.Set;",
                " import edu.mit.simile.vicino.distances.BZip2Distance;",
                "-import edu.mit.simile.vicino.distances.Distance;",
                " import edu.mit.simile.vicino.distances.GZipDistance;",
                "@@ -23,13 +22,13 @@ public class DistanceFactory {",
                "-    static final protected Map<String, Distance> _distances = new HashMap<String, Distance>();",
                "+    static final protected Map<String, SimilarityDistance> _distances = new HashMap<>();",
                "     static {",
                "-        _distances.put(\"levenshtein\", new LevenshteinDistance());",
                "-        _distances.put(\"jaccard\", new JaccardDistance());",
                "-        _distances.put(\"jaro\", new JaroDistance());",
                "-        _distances.put(\"jaro-winkler\", new JaroWinklerDistance());",
                "-        _distances.put(\"jaro-winkler-tfidf\", new JaroWinklerTFIDFDistance());",
                "-        _distances.put(\"gzip\", new GZipDistance());",
                "-        _distances.put(\"bzip2\", new BZip2Distance());",
                "-        _distances.put(\"ppm\", new PPMDistance());",
                "+        _distances.put(\"levenshtein\", new VicinoDistance(new LevenshteinDistance()));",
                "+        _distances.put(\"jaccard\", new VicinoDistance(new JaccardDistance()));",
                "+        _distances.put(\"jaro\", new VicinoDistance(new JaroDistance()));",
                "+        _distances.put(\"jaro-winkler\", new VicinoDistance(new JaroWinklerDistance()));",
                "+        _distances.put(\"jaro-winkler-tfidf\", new VicinoDistance(new JaroWinklerTFIDFDistance()));",
                "+        _distances.put(\"gzip\", new VicinoDistance(new GZipDistance()));",
                "+        _distances.put(\"bzip2\", new VicinoDistance(new BZip2Distance()));",
                "+        _distances.put(\"ppm\", new VicinoDistance(new PPMDistance()));",
                "     }",
                "@@ -39,3 +38,3 @@ public class DistanceFactory {",
                "      */",
                "-    public static Distance get(String name) {",
                "+    public static SimilarityDistance get(String name) {",
                "     \treturn _distances.get(name);",
                "@@ -46,3 +45,3 @@ public class DistanceFactory {",
                "      */",
                "-    public static void put(String name, Distance distance) {",
                "+    public static void put(String name, SimilarityDistance distance) {",
                "     \t_distances.put(name, distance);",
                "diff --git a/main/src/com/google/refine/clustering/knn/SimilarityDistance.java b/main/src/com/google/refine/clustering/knn/SimilarityDistance.java",
                "new file mode 100644",
                "index 000000000..00075f036",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/clustering/knn/SimilarityDistance.java",
                "@@ -0,0 +1,17 @@",
                "+package com.google.refine.clustering.knn;",
                "+",
                "+/**",
                "+ * A function that computes a similarity distance between",
                "+ * two strings.",
                "+ * ",
                "+ * This is introduced to provide a clean interface for extensions, independent",
                "+ * of the library currently used (Simile Vicino, unmaintained since 2010 as of",
                "+ * December 2018).",
                "+ */",
                "+public interface SimilarityDistance {",
                "+\t/**",
                "+\t * Compute the distance between two strings. This should return 0 when the",
                "+\t * two arguments are equal, and rise as their differences increase.",
                "+\t */",
                "+\tpublic double compute(String a, String b);",
                "+}",
                "diff --git a/main/src/com/google/refine/clustering/knn/VicinoDistance.java b/main/src/com/google/refine/clustering/knn/VicinoDistance.java",
                "new file mode 100644",
                "index 000000000..491d1f979",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/clustering/knn/VicinoDistance.java",
                "@@ -0,0 +1,23 @@",
                "+package com.google.refine.clustering.knn;",
                "+",
                "+import edu.mit.simile.vicino.distances.Distance;",
                "+",
                "+/**",
                "+ * Wrapper to expose a similarity function from the Vicino",
                "+ * library.",
                "+ * ",
                "+ * @author Antonin Delpeuch",
                "+ *",
                "+ */",
                "+public class VicinoDistance implements SimilarityDistance {",
                "+\tprivate final Distance _d;",
                "+\t",
                "+\tpublic VicinoDistance(Distance d) {",
                "+\t\t_d = d;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic double compute(String a, String b) {",
                "+\t\treturn _d.d(a, b);",
                "+\t}",
                "+}",
                "diff --git a/main/src/com/google/refine/clustering/knn/kNNClusterer.java b/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "index 3ab66519a..ae01ee232 100644",
                "--- a/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "+++ b/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "@@ -63,11 +63,3 @@ import edu.mit.simile.vicino.clustering.NGramClusterer;",
                " import edu.mit.simile.vicino.clustering.VPTreeClusterer;",
                "-import edu.mit.simile.vicino.distances.BZip2Distance;",
                " import edu.mit.simile.vicino.distances.Distance;",
                "-import edu.mit.simile.vicino.distances.GZipDistance;",
                "-import edu.mit.simile.vicino.distances.JaccardDistance;",
                "-import edu.mit.simile.vicino.distances.JaroDistance;",
                "-import edu.mit.simile.vicino.distances.JaroWinklerDistance;",
                "-import edu.mit.simile.vicino.distances.JaroWinklerTFIDFDistance;",
                "-import edu.mit.simile.vicino.distances.LevenshteinDistance;",
                "-import edu.mit.simile.vicino.distances.PPMDistance;",
                "@@ -79,3 +71,3 @@ public class kNNClusterer extends Clusterer {",
                "         @JsonIgnore",
                "-        private Distance _distance;",
                "+        private SimilarityDistance _distance;",
                "         @JsonIgnore",
                "@@ -84,3 +76,3 @@ public class kNNClusterer extends Clusterer {",
                "         @JsonIgnore",
                "-        public Distance getDistance() {",
                "+        public SimilarityDistance getDistance() {",
                "             return _distance;",
                "@@ -132,3 +124,3 @@ public class kNNClusterer extends Clusterer {",
                "-    private Distance _distance;",
                "+    private SimilarityDistance _distance;",
                "     private kNNClustererConfigParameters _params;",
                "@@ -182,3 +174,3 @@ public class kNNClusterer extends Clusterer {",
                "-        Distance _distance;",
                "+        SimilarityDistance _distance;",
                "         double _radius = 1.0d;",
                "@@ -188,4 +180,17 @@ public class kNNClusterer extends Clusterer {",
                "-        public BlockingClusteringRowVisitor(Distance d, kNNClustererConfigParameters params) {",
                "-            _distance = d;",
                "+        private class DistanceWrapper extends Distance {",
                "+        \tprivate final SimilarityDistance _d;",
                "+        \t",
                "+        \tprotected DistanceWrapper(SimilarityDistance d) {",
                "+        \t\t_d = d;",
                "+        \t}",
                "+",
                "+\t\t\t@Override",
                "+\t\t\tpublic double d(String arg0, String arg1) {",
                "+\t\t\t\treturn _d.compute(arg0, arg1);",
                "+\t\t\t}",
                "+        }",
                "+        ",
                "+        public BlockingClusteringRowVisitor(SimilarityDistance _distance2, kNNClustererConfigParameters params) {",
                "+            _distance = _distance2;",
                "             _data = new HashSet<String>();",
                "@@ -193,3 +198,3 @@ public class kNNClusterer extends Clusterer {",
                "             _radius = params.radius;",
                "-            _clusterer = new NGramClusterer(_distance, _blockingNgramSize);",
                "+            _clusterer = new NGramClusterer(new DistanceWrapper(_distance), _blockingNgramSize);",
                "         }",
                "diff --git a/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistances.java b/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistances.java",
                "new file mode 100644",
                "index 000000000..1ace8754c",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistances.java",
                "@@ -0,0 +1,23 @@",
                "+package com.google.refine.commands.browsing;",
                "+",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import javax.servlet.ServletException;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import com.google.refine.commands.Command;",
                "+",
                "+public class GetClusteringFunctionsAndDistances extends Command {",
                "+\tfinal static Logger logger = LoggerFactory.getLogger(\"get-clustering-functions-and-distances_command\");",
                "+",
                "+    @Override",
                "+    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "+            throws ServletException, IOException {",
                "+    \t",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "main/src/com/google/refine/clustering/knn/SimilarityDistance.java",
                "main/src/com/google/refine/clustering/knn/VicinoDistance.java",
                "main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistances.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "25aa0768368f6b01b2a018697bd95b9e275d6312",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542653787,
            "hunks": 28,
            "message": "Remove more spurious JSONException uses",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/history/GetHistoryCommand.java b/main/src/com/google/refine/commands/history/GetHistoryCommand.java",
                "index 1dc0c5632..4fa893a62 100644",
                "--- a/main/src/com/google/refine/commands/history/GetHistoryCommand.java",
                "+++ b/main/src/com/google/refine/commands/history/GetHistoryCommand.java",
                "@@ -41,4 +41,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-",
                " import com.google.refine.commands.Command;",
                "@@ -52,7 +50,3 @@ public class GetHistoryCommand extends Command {",
                "         Project project = getProject(request);",
                "-        try {",
                "-            respondJSON(response, project.history);",
                "-        } catch (JSONException e) {",
                "-            respondException(response, e);",
                "-        }",
                "+        respondJSON(response, project.history);",
                "     }",
                "diff --git a/main/src/com/google/refine/commands/history/GetProcessesCommand.java b/main/src/com/google/refine/commands/history/GetProcessesCommand.java",
                "index 2768edeba..e45ffbcb8 100644",
                "--- a/main/src/com/google/refine/commands/history/GetProcessesCommand.java",
                "+++ b/main/src/com/google/refine/commands/history/GetProcessesCommand.java",
                "@@ -41,4 +41,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-",
                " import com.google.refine.commands.Command;",
                "@@ -53,7 +51,3 @@ public class GetProcessesCommand extends Command {",
                "-        try {",
                "-            respondJSON(response, project.processManager);",
                "-        } catch (JSONException e) {",
                "-            respondException(response, e);",
                "-        }",
                "+        respondJSON(response, project.processManager);",
                "     }",
                "diff --git a/main/src/com/google/refine/commands/project/GetModelsCommand.java b/main/src/com/google/refine/commands/project/GetModelsCommand.java",
                "index f42436823..bad853dd6 100644",
                "--- a/main/src/com/google/refine/commands/project/GetModelsCommand.java",
                "+++ b/main/src/com/google/refine/commands/project/GetModelsCommand.java",
                "@@ -43,4 +43,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -115,26 +113,22 @@ public class GetModelsCommand extends Command {",
                "-        try {",
                "-            response.setHeader(\"Cache-Control\", \"no-cache\");",
                "-",
                "-            Map<String, LanguageInfo> prefixesMap = new HashMap<>();",
                "-            for (String languagePrefix : MetaParser.getLanguagePrefixes()) {",
                "-                LanguageInfo info = MetaParser.getLanguageInfo(languagePrefix);",
                "-                prefixesMap.put(languagePrefix, info);",
                "-            }",
                "-            ",
                "-            Map<String, HttpHeaderInfo> headersMap = new HashMap<>();",
                "-            for (String headerLabel : HttpHeadersSupport.getHttpHeaderLabels()) {",
                "-                HttpHeaderInfo info = HttpHeadersSupport.getHttpHeaderInfo(headerLabel);",
                "-                headersMap.put(headerLabel, info);",
                "-            }",
                "+        response.setHeader(\"Cache-Control\", \"no-cache\");",
                "-            respondJSON(response, new ModelsResponse(",
                "-                    project.columnModel,",
                "-                    project.recordModel,",
                "-                    project.overlayModels,",
                "-                    prefixesMap,",
                "-                    headersMap));",
                "-        } catch (JSONException e) {",
                "-            HttpUtilities.respondException(response, e);",
                "+        Map<String, LanguageInfo> prefixesMap = new HashMap<>();",
                "+        for (String languagePrefix : MetaParser.getLanguagePrefixes()) {",
                "+            LanguageInfo info = MetaParser.getLanguageInfo(languagePrefix);",
                "+            prefixesMap.put(languagePrefix, info);",
                "         }",
                "+        ",
                "+        Map<String, HttpHeaderInfo> headersMap = new HashMap<>();",
                "+        for (String headerLabel : HttpHeadersSupport.getHttpHeaderLabels()) {",
                "+            HttpHeaderInfo info = HttpHeadersSupport.getHttpHeaderInfo(headerLabel);",
                "+            headersMap.put(headerLabel, info);",
                "+        }",
                "+",
                "+        respondJSON(response, new ModelsResponse(",
                "+                project.columnModel,",
                "+                project.recordModel,",
                "+                project.overlayModels,",
                "+                prefixesMap,",
                "+                headersMap));",
                "     }",
                "diff --git a/main/src/com/google/refine/commands/project/GetProjectMetadataCommand.java b/main/src/com/google/refine/commands/project/GetProjectMetadataCommand.java",
                "index 9e7337f87..1eab44ddf 100644",
                "--- a/main/src/com/google/refine/commands/project/GetProjectMetadataCommand.java",
                "+++ b/main/src/com/google/refine/commands/project/GetProjectMetadataCommand.java",
                "@@ -41,4 +41,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-",
                " import com.google.refine.ProjectManager;",
                "@@ -52,15 +50,11 @@ public class GetProjectMetadataCommand extends Command {",
                "+        Project project;",
                "         try {",
                "-            Project project;",
                "-            try {",
                "-                project = getProject(request);",
                "-            } catch (ServletException e) {",
                "-                respond(response, \"error\", e.getLocalizedMessage());",
                "-                return;",
                "-            }",
                "-            ",
                "-            respondJSON(response, ProjectManager.singleton.getProjectMetadata(project.id));",
                "-        } catch (JSONException e) {",
                "-            respondException(response, e);",
                "+            project = getProject(request);",
                "+        } catch (ServletException e) {",
                "+            respond(response, \"error\", e.getLocalizedMessage());",
                "+            return;",
                "         }",
                "+        ",
                "+        respondJSON(response, ProjectManager.singleton.getProjectMetadata(project.id));",
                "     }",
                "diff --git a/main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java b/main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java",
                "index 28399a733..57a5790de 100644",
                "--- a/main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java",
                "+++ b/main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java",
                "@@ -8,4 +8,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-",
                " import com.google.refine.ProjectManager;",
                "@@ -39,4 +37,2 @@ public class SetProjectMetadataCommand extends Command {",
                "             respond(response, \"{ \\\"code\\\" : \\\"ok\\\" }\");",
                "-        } catch (JSONException e) {",
                "-            respondException(response, e);",
                "         } catch (Exception e) {",
                "diff --git a/main/src/com/google/refine/commands/project/SetProjectTagsCommand.java b/main/src/com/google/refine/commands/project/SetProjectTagsCommand.java",
                "index 2bffa2a9f..71fbba7f1 100644",
                "--- a/main/src/com/google/refine/commands/project/SetProjectTagsCommand.java",
                "+++ b/main/src/com/google/refine/commands/project/SetProjectTagsCommand.java",
                "@@ -36,4 +36,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-",
                " import com.google.refine.ProjectManager;",
                "@@ -47,59 +45,54 @@ public class SetProjectTagsCommand extends Command {",
                "       throws ServletException, IOException {",
                "-    response.setHeader(\"Content-Type\", \"application/json\");",
                "-",
                "-    try {",
                "-      Project project;",
                "-      try {",
                "-        project = getProject(request);",
                "-      } catch (ServletException e) {",
                "-        respond(response, \"error\", e.getLocalizedMessage());",
                "-        return;",
                "-      }",
                "-",
                "-      ProjectMetadata metadata = project.getMetadata();",
                "-",
                "-      String oldT = request.getParameter(\"old\");",
                "-      String newT = request.getParameter(\"new\");",
                "-",
                "-      Map<String, Integer> allProjectTags = ProjectManager.singleton.getAllProjectTags();",
                "-",
                "-      // Lets remove the old tags from the general map",
                "-      String[] oldTags = oldT.split(\",\");",
                "-      for (String tag : oldTags) {",
                "-        if (allProjectTags!= null && allProjectTags.containsKey(tag)) {",
                "-          int occurrence = allProjectTags.get(tag);",
                "-",
                "-          if (occurrence == 1) {",
                "-            allProjectTags.remove(tag);",
                "-          } else {",
                "-            allProjectTags.put(tag, occurrence - 1);",
                "-          }",
                "-        }",
                "-      }",
                "-",
                "-      // Lets add the new tags to the general map",
                "-      String[] newTags = newT.split(\" |\\\\,\");",
                "-      List<String> polishedTags = new ArrayList<String>(newTags.length);",
                "-      for (String tag : newTags) {",
                "-        tag = tag.trim();",
                "-",
                "-        if (!tag.isEmpty()) {",
                "-          if (allProjectTags!= null && allProjectTags.containsKey(tag)) {",
                "-            allProjectTags.put(tag, allProjectTags.get(tag) + 1);",
                "-          } else {",
                "-            allProjectTags.put(tag, 1);",
                "-          }",
                "-          polishedTags.add(tag);",
                "-        }",
                "-      }",
                "-",
                "-      // Lets update the project tags",
                "-      metadata.setTags(polishedTags.toArray(new String[polishedTags.size()]));",
                "-      metadata.updateModified();",
                "-",
                "-      respond(response, \"{ \\\"code\\\" : \\\"ok\\\" }\");",
                "-",
                "-    } catch (JSONException e) {",
                "-      respondException(response, e);",
                "-    }",
                "+\t  response.setHeader(\"Content-Type\", \"application/json\");",
                "+",
                "+\t  Project project;",
                "+\t  try {",
                "+\t    project = getProject(request);",
                "+\t  } catch (ServletException e) {",
                "+\t    respond(response, \"error\", e.getLocalizedMessage());",
                "+\t    return;",
                "+\t  }",
                "+\t",
                "+\t  ProjectMetadata metadata = project.getMetadata();",
                "+\t",
                "+\t  String oldT = request.getParameter(\"old\");",
                "+\t  String newT = request.getParameter(\"new\");",
                "+\t",
                "+\t  Map<String, Integer> allProjectTags = ProjectManager.singleton.getAllProjectTags();",
                "+\t",
                "+\t  // Lets remove the old tags from the general map",
                "+\t  String[] oldTags = oldT.split(\",\");",
                "+\t  for (String tag : oldTags) {",
                "+\t    if (allProjectTags!= null && allProjectTags.containsKey(tag)) {",
                "+\t      int occurrence = allProjectTags.get(tag);",
                "+\t",
                "+\t      if (occurrence == 1) {",
                "+\t        allProjectTags.remove(tag);",
                "+\t      } else {",
                "+\t        allProjectTags.put(tag, occurrence - 1);",
                "+\t      }",
                "+\t    }",
                "+\t  }",
                "+\t",
                "+\t  // Lets add the new tags to the general map",
                "+\t  String[] newTags = newT.split(\" |\\\\,\");",
                "+\t  List<String> polishedTags = new ArrayList<String>(newTags.length);",
                "+\t  for (String tag : newTags) {",
                "+\t    tag = tag.trim();",
                "+\t",
                "+\t    if (!tag.isEmpty()) {",
                "+\t      if (allProjectTags!= null && allProjectTags.containsKey(tag)) {",
                "+\t        allProjectTags.put(tag, allProjectTags.get(tag) + 1);",
                "+\t      } else {",
                "+\t        allProjectTags.put(tag, 1);",
                "+\t      }",
                "+\t      polishedTags.add(tag);",
                "+\t    }",
                "+\t  }",
                "+\t",
                "+\t  // Lets update the project tags",
                "+\t  metadata.setTags(polishedTags.toArray(new String[polishedTags.size()]));",
                "+\t  metadata.updateModified();",
                "+\t",
                "+\t  respond(response, \"{ \\\"code\\\" : \\\"ok\\\" }\");",
                "   }",
                "diff --git a/main/src/com/google/refine/importers/OdsImporter.java b/main/src/com/google/refine/importers/OdsImporter.java",
                "index 581dc1aea..7f127b216 100644",
                "--- a/main/src/com/google/refine/importers/OdsImporter.java",
                "+++ b/main/src/com/google/refine/importers/OdsImporter.java",
                "@@ -46,3 +46,2 @@ import java.util.Map;",
                "-import org.apache.commons.lang.exception.ExceptionUtils;",
                " import org.odftoolkit.odfdom.doc.OdfDocument;",
                "diff --git a/main/src/com/google/refine/importing/DefaultImportingController.java b/main/src/com/google/refine/importing/DefaultImportingController.java",
                "index 96c063735..ed8dbba75 100644",
                "--- a/main/src/com/google/refine/importing/DefaultImportingController.java",
                "+++ b/main/src/com/google/refine/importing/DefaultImportingController.java",
                "@@ -47,4 +47,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -112,17 +110,12 @@ public class DefaultImportingController implements ImportingController {",
                "         job.updating = true;",
                "-        try {",
                "-            ObjectNode config = job.getOrCreateDefaultConfig();",
                "-            if (!(\"new\".equals(JSONUtilities.getString(config, \"state\", null)))) {",
                "-                HttpUtilities.respond(response, \"error\", \"Job already started; cannot load more data\");",
                "-                return;",
                "-            }",
                "-            ",
                "-            ImportingUtilities.loadDataAndPrepareJob(",
                "-                request, response, parameters, job, config);",
                "-        } catch (JSONException e) {",
                "-            throw new ServletException(e);",
                "-        } finally {",
                "-            job.touch();",
                "-            job.updating = false;",
                "+        ObjectNode config = job.getOrCreateDefaultConfig();",
                "+        if (!(\"new\".equals(JSONUtilities.getString(config, \"state\", null)))) {",
                "+            HttpUtilities.respond(response, \"error\", \"Job already started; cannot load more data\");",
                "+            return;",
                "         }",
                "+        ",
                "+        ImportingUtilities.loadDataAndPrepareJob(",
                "+            request, response, parameters, job, config);",
                "+        job.touch();",
                "+        job.updating = false;",
                "     }",
                "@@ -140,21 +133,16 @@ public class DefaultImportingController implements ImportingController {",
                "         job.updating = true;",
                "-        try {",
                "-            ObjectNode config = job.getOrCreateDefaultConfig();",
                "-            if (!(\"ready\".equals(JSONUtilities.getString(config, \"state\", null)))) {",
                "-                HttpUtilities.respond(response, \"error\", \"Job not ready\");",
                "-                return;",
                "-            }",
                "-            ",
                "-            ArrayNode fileSelectionArray = ParsingUtilities.evaluateJsonStringToArrayNode(",
                "-                    request.getParameter(\"fileSelection\"));",
                "-            ",
                "-            ImportingUtilities.updateJobWithNewFileSelection(job, fileSelectionArray);",
                "-            ",
                "-            replyWithJobData(request, response, job);",
                "-        } catch (JSONException e) {",
                "-            throw new ServletException(e);",
                "-        } finally {",
                "-            job.touch();",
                "-            job.updating = false;",
                "+        ObjectNode config = job.getOrCreateDefaultConfig();",
                "+        if (!(\"ready\".equals(JSONUtilities.getString(config, \"state\", null)))) {",
                "+            HttpUtilities.respond(response, \"error\", \"Job not ready\");",
                "+            return;",
                "         }",
                "+        ",
                "+        ArrayNode fileSelectionArray = ParsingUtilities.evaluateJsonStringToArrayNode(",
                "+                request.getParameter(\"fileSelection\"));",
                "+        ",
                "+        ImportingUtilities.updateJobWithNewFileSelection(job, fileSelectionArray);",
                "+        ",
                "+        replyWithJobData(request, response, job);",
                "+        job.touch();",
                "+        job.updating = false;",
                "     }",
                "@@ -172,46 +160,41 @@ public class DefaultImportingController implements ImportingController {",
                "         job.updating = true;",
                "+        ObjectNode config = job.getOrCreateDefaultConfig();",
                "+        if (!(\"ready\".equals(JSONUtilities.getString(config, \"state\", null)))) {",
                "+            HttpUtilities.respond(response, \"error\", \"Job not ready\");",
                "+            return;",
                "+        }",
                "+        ",
                "+        String format = request.getParameter(\"format\");",
                "+        ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "+                request.getParameter(\"options\"));",
                "+        ",
                "+        List<Exception> exceptions = new LinkedList<Exception>();",
                "+        ",
                "+        ImportingUtilities.previewParse(job, format, optionObj, exceptions);",
                "+        ",
                "+        Writer w = response.getWriter();",
                "+        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "         try {",
                "-            ObjectNode config = job.getOrCreateDefaultConfig();",
                "-            if (!(\"ready\".equals(JSONUtilities.getString(config, \"state\", null)))) {",
                "-                HttpUtilities.respond(response, \"error\", \"Job not ready\");",
                "-                return;",
                "-            }",
                "-            ",
                "-            String format = request.getParameter(\"format\");",
                "-            ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "-                    request.getParameter(\"options\"));",
                "-            ",
                "-            List<Exception> exceptions = new LinkedList<Exception>();",
                "-            ",
                "-            ImportingUtilities.previewParse(job, format, optionObj, exceptions);",
                "-            ",
                "-            Writer w = response.getWriter();",
                "-            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "-            try {",
                "-                writer.writeStartObject();",
                "-                if (exceptions.size() == 0) {",
                "-                    job.project.update(); // update all internal models, indexes, caches, etc.",
                "-                    ",
                "-                    writer.writeStringField(\"status\", \"ok\");",
                "-                } else {",
                "-                    writer.writeStringField(\"status\", \"error\");",
                "-                    writer.writeArrayFieldStart(\"errors\");",
                "-                    writeErrors(writer, exceptions);",
                "-                    writer.writeEndArray();",
                "-                }",
                "-                writer.writeEndObject();",
                "-                writer.flush();",
                "-                writer.close();",
                "-            } catch (IOException e) {",
                "-                throw new ServletException(e);",
                "-            } finally {",
                "-                w.flush();",
                "-                w.close();",
                "+            writer.writeStartObject();",
                "+            if (exceptions.size() == 0) {",
                "+                job.project.update(); // update all internal models, indexes, caches, etc.",
                "+                ",
                "+                writer.writeStringField(\"status\", \"ok\");",
                "+            } else {",
                "+                writer.writeStringField(\"status\", \"error\");",
                "+                writer.writeArrayFieldStart(\"errors\");",
                "+                writeErrors(writer, exceptions);",
                "+                writer.writeEndArray();",
                "             }",
                "-        } catch (JSONException e) {",
                "+            writer.writeEndObject();",
                "+            writer.flush();",
                "+            writer.close();",
                "+        } catch (IOException e) {",
                "             throw new ServletException(e);",
                "         } finally {",
                "-            job.touch();",
                "-            job.updating = false;",
                "+            w.flush();",
                "+            w.close();",
                "         }",
                "+        job.touch();",
                "+        job.updating = false;",
                "     }",
                "@@ -255,21 +238,17 @@ public class DefaultImportingController implements ImportingController {",
                "         job.touch();",
                "-        try {",
                "-            ObjectNode config = job.getOrCreateDefaultConfig();",
                "-            if (!(\"ready\".equals(JSONUtilities.getString(config, \"state\", null)))) {",
                "-                HttpUtilities.respond(response, \"error\", \"Job not ready\");",
                "-                return;",
                "-            }",
                "-            ",
                "-            String format = request.getParameter(\"format\");",
                "-            ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "-                    request.getParameter(\"options\"));",
                "-            ",
                "-            List<Exception> exceptions = new LinkedList<Exception>();",
                "-            ",
                "-            ImportingUtilities.createProject(job, format, optionObj, exceptions, false);",
                "-            ",
                "-            HttpUtilities.respond(response, \"ok\", \"done\");",
                "-        } catch (JSONException e) {",
                "-            throw new ServletException(e);",
                "+        ObjectNode config = job.getOrCreateDefaultConfig();",
                "+        if (!(\"ready\".equals(JSONUtilities.getString(config, \"state\", null)))) {",
                "+            HttpUtilities.respond(response, \"error\", \"Job not ready\");",
                "+            return;",
                "         }",
                "+        ",
                "+        String format = request.getParameter(\"format\");",
                "+        ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "+                request.getParameter(\"options\"));",
                "+        ",
                "+        List<Exception> exceptions = new LinkedList<Exception>();",
                "+        ",
                "+        ImportingUtilities.createProject(job, format, optionObj, exceptions, false);",
                "+        ",
                "+        HttpUtilities.respond(response, \"ok\", \"done\");",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/history/GetHistoryCommand.java",
                "main/src/com/google/refine/commands/history/GetProcessesCommand.java",
                "main/src/com/google/refine/commands/project/GetModelsCommand.java",
                "main/src/com/google/refine/commands/project/GetProjectMetadataCommand.java",
                "main/src/com/google/refine/commands/project/SetProjectMetadataCommand.java",
                "main/src/com/google/refine/commands/project/SetProjectTagsCommand.java",
                "main/src/com/google/refine/importers/OdsImporter.java",
                "main/src/com/google/refine/importing/DefaultImportingController.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "761b748faae794de9b33b55e9f8a82dfd81e7aa6",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538070770,
            "hunks": 10,
            "message": "Cleaner double serialization emulation, application wide.",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/ReconCandidate.java b/main/src/com/google/refine/model/ReconCandidate.java",
                "index b25b0354c..7c3f4c9d0 100644",
                "--- a/main/src/com/google/refine/model/ReconCandidate.java",
                "+++ b/main/src/com/google/refine/model/ReconCandidate.java",
                "@@ -39,2 +39,5 @@ import java.util.Properties;",
                "+import org.json.JSONException;",
                "+import org.json.JSONWriter;",
                "+",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -44,4 +47,2 @@ import com.fasterxml.jackson.core.JsonParser;",
                " import com.fasterxml.jackson.core.JsonToken;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -57,3 +58,3 @@ public class ReconCandidate implements HasFields, Jsonizable {",
                "     final public String[]   types;",
                "-    @JsonIgnore",
                "+    @JsonProperty(\"score\")",
                "     final public double     score;",
                "@@ -67,11 +68,2 @@ public class ReconCandidate implements HasFields, Jsonizable {",
                "-    // Serialize doubles that are ints without trailing \".0\" for consistency with previous serialization.",
                "-    @JsonProperty(\"score\")",
                "-    public Object getJsonScore() {",
                "-        if ((double)(int)score == score) {",
                "-            return (int)score;",
                "-        }",
                "-        return score;",
                "-    }",
                "-    ",
                "     @Override",
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index 1cb62bc47..3404b79af 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -63,2 +63,3 @@ import com.fasterxml.jackson.databind.ObjectMapper;",
                " import com.fasterxml.jackson.databind.ObjectWriter;",
                "+import com.fasterxml.jackson.databind.module.SimpleModule;",
                " import com.fasterxml.jackson.databind.ser.FilterProvider;",
                "@@ -69,2 +70,9 @@ public class ParsingUtilities {",
                "     public static final ObjectMapper mapper = new ObjectMapper();",
                "+    static {",
                "+        SimpleModule module = new SimpleModule();",
                "+        module.addSerializer(Double.class, new SerializationFilters.DoubleSerializer());",
                "+        module.addSerializer(double.class, new SerializationFilters.DoubleSerializer());",
                "+        mapper.registerModule(module);",
                "+    }",
                "+    ",
                "     public static final FilterProvider defaultFilters = new SimpleFilterProvider()",
                "@@ -76,3 +84,3 @@ public class ParsingUtilities {",
                "     public static final ObjectWriter defaultWriter = mapper.writerWithView(JsonViews.NonSaveMode.class).with(defaultFilters);",
                "-    ",
                "+",
                "     public static final DateTimeFormatter ISO8601 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");",
                "diff --git a/main/src/com/google/refine/util/SerializationFilters.java b/main/src/com/google/refine/util/SerializationFilters.java",
                "index 606d463d6..c8752c22f 100644",
                "--- a/main/src/com/google/refine/util/SerializationFilters.java",
                "+++ b/main/src/com/google/refine/util/SerializationFilters.java",
                "@@ -2,2 +2,4 @@ package com.google.refine.util;",
                "+import java.io.IOException;",
                "+",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "@@ -8,2 +10,3 @@ import com.fasterxml.jackson.databind.ser.PropertyWriter;",
                " import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;",
                "+import com.fasterxml.jackson.databind.ser.std.StdSerializer;",
                "@@ -54,2 +57,20 @@ public class SerializationFilters {",
                "      };",
                "+     ",
                "+    public static class DoubleSerializer extends StdSerializer<Double> {",
                "+        private static final long serialVersionUID = 132345L;",
                "+",
                "+        public DoubleSerializer() {",
                "+            super(Double.class);",
                "+        }",
                "+",
                "+        @Override",
                "+        public void serialize(Double arg0, JsonGenerator gen, SerializerProvider s)",
                "+                throws IOException {",
                "+            if (new Double(arg0.intValue()).equals(arg0)) {",
                "+                gen.writeNumber(arg0.intValue());",
                "+            } else {",
                "+                gen.writeNumber(arg0);",
                "+            }",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/ReconCandidate.java",
                "main/src/com/google/refine/util/ParsingUtilities.java",
                "main/src/com/google/refine/util/SerializationFilters.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3aa4e1a544d4ca0e4dda14ac26528ffa38f9e30e",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540206552,
            "hunks": 3,
            "message": "Jackson deserialization for BlankDownOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/cell/BlankDownOperation.java b/main/src/com/google/refine/operations/cell/BlankDownOperation.java",
                "index 0afda51b2..767cd102d 100644",
                "--- a/main/src/com/google/refine/operations/cell/BlankDownOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/BlankDownOperation.java",
                "@@ -39,2 +39,5 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine.Mode;",
                "@@ -62,4 +65,7 @@ public class BlankDownOperation extends EngineDependentMassCellOperation {",
                "+    @JsonCreator",
                "     public BlankDownOperation(",
                "-            EngineConfig engineConfig, ",
                "+            @JsonProperty(\"engineConfig\")",
                "+            EngineConfig engineConfig,",
                "+            @JsonProperty(\"columnName\")",
                "             String columnName"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/cell/BlankDownOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fc7da40055042fa88f9d0642edbbe09db56bf319",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541256541,
            "hunks": 32,
            "message": "Jackson deserialization for PreferenceStore",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/SetPreferenceCommand.java b/main/src/com/google/refine/commands/SetPreferenceCommand.java",
                "index ac5d3cf74..877b8dcd7 100644",
                "--- a/main/src/com/google/refine/commands/SetPreferenceCommand.java",
                "+++ b/main/src/com/google/refine/commands/SetPreferenceCommand.java",
                "@@ -44,2 +44,3 @@ import org.json.JSONTokener;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                " import com.google.refine.ProjectManager;",
                "@@ -47,2 +48,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.preference.PreferenceStore;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -60,3 +62,3 @@ public class SetPreferenceCommand extends Command {",
                "         try {",
                "-            Object o = valueString == null ? null : new JSONTokener(valueString).nextValue();",
                "+            JsonNode o = valueString == null ? null : ParsingUtilities.mapper.readTree(valueString);",
                "@@ -65,3 +67,3 @@ public class SetPreferenceCommand extends Command {",
                "             respond(response, \"{ \\\"code\\\" : \\\"ok\\\" }\");",
                "-        } catch (JSONException e) {",
                "+        } catch (IOException e) {",
                "             respondException(response, e);",
                "diff --git a/main/src/com/google/refine/io/FileProjectManager.java b/main/src/com/google/refine/io/FileProjectManager.java",
                "index 2baa454fc..fc93e0ca6 100644",
                "--- a/main/src/com/google/refine/io/FileProjectManager.java",
                "+++ b/main/src/com/google/refine/io/FileProjectManager.java",
                "@@ -69,2 +69,3 @@ import com.google.refine.model.metadata.MetadataFormat;",
                " import com.google.refine.model.metadata.ProjectMetadata;",
                "+import com.google.refine.preference.PreferenceStore;",
                " import com.google.refine.preference.TopList;",
                "@@ -388,3 +389,3 @@ public class FileProjectManager extends ProjectManager  {",
                "                 if (obj.has(\"preferences\") && !obj.isNull(\"preferences\")) {",
                "-                    _preferenceStore.load(obj.getJSONObject(\"preferences\"));",
                "+                    _preferenceStore = ParsingUtilities.mapper.readValue(obj.getJSONObject(\"preferences\").toString(), PreferenceStore.class);",
                "                 }",
                "@@ -415,4 +416,4 @@ public class FileProjectManager extends ProjectManager  {",
                "                 if (obj.has(\"expressions\") && !obj.isNull(\"expressions\")) { // backward compatibility",
                "-                    ((TopList) _preferenceStore.get(\"scripting.expressions\"))",
                "-                    .load(obj.getJSONArray(\"expressions\"));",
                "+                \tTopList newExpressions = ParsingUtilities.mapper.readValue(obj.getJSONArray(\"expressions\").toString(), TopList.class);",
                "+                    this._preferenceStore.put(\"scripting.expressions\", newExpressions);",
                "                 }",
                "diff --git a/main/src/com/google/refine/model/metadata/ProjectMetadata.java b/main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "index 0bf01d540..6ccd26fee 100644",
                "--- a/main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "+++ b/main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "@@ -207,4 +207,4 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "             try {",
                "-                this._preferenceStore.load(obj.getJSONObject(\"preferences\"));",
                "-            } catch (JSONException e) {",
                "+                this._preferenceStore = ParsingUtilities.mapper.readValue(obj.getJSONObject(\"preferences\").toString(), PreferenceStore.class);",
                "+            } catch (IOException e) {",
                "                 logger.error(ExceptionUtils.getStackTrace(e));",
                "@@ -215,4 +215,5 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "             try {",
                "-                ((TopList) this._preferenceStore.get(\"scripting.expressions\")).load(obj.getJSONArray(\"expressions\"));",
                "-            } catch (JSONException e) {",
                "+            \tTopList newExpressions = ParsingUtilities.mapper.readValue(obj.getJSONArray(\"expressions\").toString(), TopList.class);",
                "+                this._preferenceStore.put(\"scripting.expressions\", newExpressions);",
                "+            } catch (IOException e) {",
                "                 logger.error(ExceptionUtils.getStackTrace(e));",
                "diff --git a/main/src/com/google/refine/preference/PreferenceStore.java b/main/src/com/google/refine/preference/PreferenceStore.java",
                "index 25a27fba2..69b3bb3fd 100644",
                "--- a/main/src/com/google/refine/preference/PreferenceStore.java",
                "+++ b/main/src/com/google/refine/preference/PreferenceStore.java",
                "@@ -36,3 +36,2 @@ package com.google.refine.preference;",
                " import java.io.IOException;",
                "-import java.lang.reflect.Method;",
                " import java.util.HashMap;",
                "@@ -52,4 +51,5 @@ import com.fasterxml.jackson.databind.JsonNode;",
                " import com.fasterxml.jackson.databind.ObjectMapper;",
                "-",
                "-import com.google.refine.RefineServlet;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -65,3 +65,2 @@ public class PreferenceStore  {",
                "     // Temporary wrapper while serialization has not been migrated yet.",
                "-    @JsonProperty(\"entries\")",
                "     protected Map<String, Object> _prefsJackson = new HashMap<>();",
                "@@ -121,35 +120,39 @@ public class PreferenceStore  {",
                "-    @SuppressWarnings(\"unchecked\")",
                "-    public void load(JSONObject obj) throws JSONException {",
                "-        if (obj.has(\"entries\") && !obj.isNull(\"entries\")) {",
                "-            JSONObject entries = obj.getJSONObject(\"entries\");",
                "-            ",
                "-            Iterator<String> i = entries.keys();",
                "-            while (i.hasNext()) {",
                "-                String key = i.next();",
                "-                if (!entries.isNull(key)) {",
                "-                    Object o = entries.get(key), loaded = loadObject(o);",
                "-                    _prefs.put(key, loaded);",
                "-                    _prefsJackson.put(key, wrapJSONArray(loaded));",
                "-                }",
                "+    @JsonProperty(\"entries\")",
                "+    public void setEntries(JsonNode entries) throws JSONException {",
                "+        Iterator<String> i = entries.fieldNames();",
                "+        while (i.hasNext()) {",
                "+            String key = i.next();",
                "+            System.out.println(key);",
                "+            if (entries.get(key) != null) {",
                "+                JsonNode o = entries.get(key);",
                "+                Object loaded = loadObject(o);",
                "+                _prefs.put(key, loaded);",
                "+                _prefsJackson.put(key, wrapJSONArray(loaded));",
                "             }",
                "-            dirty = false; // internal puts don't count",
                "         }",
                "+        dirty = false; // internal puts don't count",
                "     }",
                "-    static public Object loadObject(Object o) {",
                "-        if (o instanceof JSONObject) {",
                "-            try {",
                "-                JSONObject obj2 = (JSONObject) o;",
                "-                String className = obj2.getString(\"class\");",
                "-                Class<?> klass = RefineServlet.getClass(className);",
                "-                Method method = klass.getMethod(\"load\", JSONObject.class);",
                "-                ",
                "-                return method.invoke(null, obj2);",
                "-            } catch (Exception e) {",
                "-                e.printStackTrace();",
                "-                return null;",
                "-            }",
                "-        } else {",
                "-            return o;",
                "+    @JsonProperty(\"entries\")",
                "+    public Map<String, Object> getEntries() {",
                "+    \treturn _prefsJackson;",
                "+    }",
                "+    ",
                "+    static public Object loadObject(JsonNode o) {",
                "+    \tSystem.out.println(\"loading\");",
                "+    \tSystem.out.println(o.toString());",
                "+        try {",
                "+\t        if (o instanceof ObjectNode) {",
                "+                ObjectNode obj2 = (ObjectNode) o;",
                "+                return ParsingUtilities.mapper.treeToValue(obj2, PreferenceValue.class);",
                "+\t        } else if (o instanceof ArrayNode) {",
                "+\t        \treturn o;",
                "+\t        } else {",
                "+\t        \t// basic datatypes (int, double, boolean, string)",
                "+\t            return ParsingUtilities.mapper.treeToValue(o, Object.class);",
                "+\t        }",
                "+        } catch (Exception e) {",
                "+            e.printStackTrace();",
                "+            return null;",
                "         }",
                "diff --git a/main/src/com/google/refine/preference/TopList.java b/main/src/com/google/refine/preference/TopList.java",
                "index 79b9802f3..f1bfaa860 100644",
                "--- a/main/src/com/google/refine/preference/TopList.java",
                "+++ b/main/src/com/google/refine/preference/TopList.java",
                "@@ -40,6 +40,4 @@ import java.util.List;",
                " import org.apache.commons.collections.list.UnmodifiableList;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -48,7 +46,7 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                "-public class TopList implements Iterable<String> {",
                "+public class TopList implements Iterable<String>, PreferenceValue {",
                "     @JsonProperty(\"top\")",
                "-    final protected int          _top;",
                "-    final protected List<String> _list = new ArrayList<String>();",
                "+    protected int          _top = 10;",
                "+    protected List<String> _list = new ArrayList<String>();",
                "@@ -58,2 +56,12 @@ public class TopList implements Iterable<String> {",
                "+    @JsonCreator",
                "+    public TopList(",
                "+    \t\t@JsonProperty(\"top\")",
                "+    \t\tint top,",
                "+    \t\t@JsonProperty(\"list\")",
                "+    \t\tList<String> list) {",
                "+    \t_top = top;",
                "+    \t_list = list;",
                "+    }",
                "+    ",
                "     @SuppressWarnings(\"unchecked\")",
                "@@ -77,26 +85,2 @@ public class TopList implements Iterable<String> {",
                "-    @JsonProperty(\"class\")",
                "-    public String getClassName() {",
                "-        return this.getClass().getName();",
                "-    }",
                "-    ",
                "-    static public TopList load(JSONObject obj) throws JSONException {",
                "-        int top = obj.has(\"top\") && !obj.isNull(\"top\") ? obj.getInt(\"top\") : 10;",
                "-        TopList tl = new TopList(top);",
                "-        ",
                "-        if (obj.has(\"list\") && !obj.isNull(\"list\")) {",
                "-            JSONArray a = obj.getJSONArray(\"list\");",
                "-            ",
                "-            tl.load(a);",
                "-        }",
                "-        return tl;",
                "-    }",
                "-    ",
                "-    public void load(JSONArray a) throws JSONException {",
                "-        int length = a.length();",
                "-        for (int i = 0; i < length && _list.size() < _top; i++) {",
                "-            _list.add(a.getString(i));",
                "-        }",
                "-    }",
                "-    ",
                "     @Override",
                "diff --git a/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java b/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "index 9a5c1af18..0c58b7178 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "@@ -5,8 +5,11 @@ import static org.testng.Assert.assertTrue;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+",
                " import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                " import com.google.refine.preference.PreferenceStore;",
                "-import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -23,3 +26,3 @@ public class PreferenceStoreTests {",
                "     @Test",
                "-    public void serializePreferenceStore() {",
                "+    public void serializePreferenceStore() throws JsonParseException, JsonMappingException, IOException {",
                "@@ -34,4 +37,3 @@ public class PreferenceStoreTests {",
                "                 + \"}}\";",
                "-        PreferenceStore prefStore = new PreferenceStore();",
                "-        prefStore.load(new JSONObject(json));",
                "+        PreferenceStore prefStore = ParsingUtilities.mapper.readValue(json, PreferenceStore.class);",
                "         assertFalse(prefStore.isDirty());",
                "diff --git a/main/tests/server/src/com/google/refine/tests/preference/TopListTests.java b/main/tests/server/src/com/google/refine/tests/preference/TopListTests.java",
                "index e9ed000d5..1339d1b23 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/preference/TopListTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/preference/TopListTests.java",
                "@@ -2,7 +2,11 @@ package com.google.refine.tests.preference;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+",
                " import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                " import com.google.refine.preference.TopList;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -10,3 +14,3 @@ public class TopListTests {",
                "     @Test",
                "-    public void serializeTopList() {",
                "+    public void serializeTopList() throws JsonParseException, JsonMappingException, IOException {",
                "         String json = \"{\"",
                "@@ -23,3 +27,3 @@ public class TopListTests {",
                "         TestUtils.isSerializedTo(",
                "-                TopList.load(new JSONObject(json)),",
                "+                ParsingUtilities.mapper.readValue(json, TopList.class),",
                "                 json);"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/SetPreferenceCommand.java",
                "main/src/com/google/refine/io/FileProjectManager.java",
                "main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "main/src/com/google/refine/preference/PreferenceStore.java",
                "main/src/com/google/refine/preference/TopList.java",
                "main/tests/server/src/com/google/refine/tests/preference/PreferenceStoreTests.java",
                "main/tests/server/src/com/google/refine/tests/preference/TopListTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d4bdd37bda7ad99049821c088356b091dddb3f32",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540143323,
            "hunks": 25,
            "message": "Jackson deserialization for Recon",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/Recon.java b/main/src/com/google/refine/model/Recon.java",
                "index f96125ed3..caa1373e6 100644",
                "--- a/main/src/com/google/refine/model/Recon.java",
                "+++ b/main/src/com/google/refine/model/Recon.java",
                "@@ -48,5 +48,2 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.annotation.JsonView;",
                "-import com.fasterxml.jackson.core.JsonFactory;",
                "-import com.fasterxml.jackson.core.JsonParser;",
                "-import com.fasterxml.jackson.core.JsonToken;",
                "@@ -54,3 +51,3 @@ import com.google.refine.expr.HasFields;",
                " import com.google.refine.util.JsonViews;",
                "-import com.google.refine.util.Pool;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -113,16 +110,28 @@ public class Recon implements HasFields {",
                "+    @JsonIgnore",
                "     final public long            id;",
                "+    @JsonIgnore",
                "     public String                service = \"unknown\";",
                "+    @JsonIgnore",
                "     public String                identifierSpace = null;",
                "+    @JsonIgnore",
                "     public String                schemaSpace = null;",
                "+    @JsonIgnore",
                "     public Object[]              features = new Object[Feature_max];",
                "+    @JsonIgnore",
                "     public List<ReconCandidate>  candidates;",
                "+    @JsonIgnore",
                "     public Judgment              judgment = Judgment.None;",
                "+    @JsonIgnore",
                "     public String                judgmentAction = \"unknown\";",
                "+    @JsonIgnore",
                "     public long                  judgmentHistoryEntry;",
                "+    @JsonIgnore",
                "     public int                   judgmentBatchSize = 0;",
                "+    @JsonIgnore",
                "     public ReconCandidate        match = null;",
                "+    @JsonIgnore",
                "     public int                   matchRank = -1;",
                "@@ -364,107 +373,43 @@ public class Recon implements HasFields {",
                "-    static public Recon loadStreaming(String s, Pool pool) throws Exception {",
                "-        JsonFactory jsonFactory = new JsonFactory(); ",
                "-        JsonParser jp = jsonFactory.createJsonParser(s);",
                "-        ",
                "-        if (jp.nextToken() != JsonToken.START_OBJECT) {",
                "-            return null;",
                "-        }",
                "-        return loadStreaming(jp, pool);",
                "-    }",
                "-    ",
                "-    static public Recon loadStreaming(JsonParser jp, Pool pool) throws Exception {",
                "-        JsonToken t = jp.getCurrentToken();",
                "-        if (t == JsonToken.VALUE_NULL || t != JsonToken.START_OBJECT) {",
                "-            return null;",
                "-        }",
                "-        ",
                "-        Recon recon = null;",
                "-        long id = -1;",
                "-        long judgmentHistoryEntry = -1;",
                "-        ",
                "-        while (jp.nextToken() != JsonToken.END_OBJECT) {",
                "-            String fieldName = jp.getCurrentName();",
                "-            jp.nextToken();",
                "-            ",
                "-            if (\"id\".equals(fieldName)) {",
                "-                id = jp.getLongValue();",
                "-            } else if (\"judgmentHistoryEntry\".equals(fieldName)) {",
                "-                judgmentHistoryEntry = jp.getLongValue();",
                "-                if (recon != null) {",
                "-                    recon.judgmentHistoryEntry = judgmentHistoryEntry;",
                "-                }",
                "-            } else {",
                "-                if (recon == null) {",
                "-                    recon = new Recon(id, judgmentHistoryEntry);",
                "-                }",
                "-                ",
                "-                if (\"j\".equals(fieldName)) {",
                "-                    recon.judgment = stringToJudgment(jp.getText());",
                "-                } else if (\"m\".equals(fieldName)) {",
                "-                    if (jp.getCurrentToken() == JsonToken.VALUE_STRING) {",
                "-                        // legacy case",
                "-                        String candidateID = jp.getText();",
                "-                        recon.match = pool.getReconCandidate(candidateID);",
                "-                    } else {",
                "-                        recon.match = ReconCandidate.loadStreaming(jp);",
                "-                    }",
                "-                } else if (\"f\".equals(fieldName)) {",
                "-                    if (jp.getCurrentToken() != JsonToken.START_ARRAY) {",
                "-                        return null;",
                "-                    }",
                "-                    ",
                "-                    int feature = 0;",
                "-                    while (jp.nextToken() != JsonToken.END_ARRAY) {",
                "-                        if (feature < recon.features.length) {",
                "-                            JsonToken token = jp.getCurrentToken();",
                "-                            if (token == JsonToken.VALUE_STRING) {",
                "-                                recon.features[feature++] = jp.getText();",
                "-                            } else if (token == JsonToken.VALUE_NUMBER_INT) {",
                "-                                recon.features[feature++] = jp.getLongValue();",
                "-                            } else if (token == JsonToken.VALUE_NUMBER_FLOAT) {",
                "-                                recon.features[feature++] = jp.getDoubleValue();",
                "-                            } else if (token == JsonToken.VALUE_FALSE) {",
                "-                                recon.features[feature++] = false;",
                "-                            } else if (token == JsonToken.VALUE_TRUE) {",
                "-                                recon.features[feature++] = true;",
                "-                            }",
                "-                        }",
                "-                    }",
                "-                } else if (\"c\".equals(fieldName)) {",
                "-                    if (jp.getCurrentToken() != JsonToken.START_ARRAY) {",
                "-                        return null;",
                "-                    }",
                "-                    ",
                "-                    while (jp.nextToken() != JsonToken.END_ARRAY) {",
                "-                        if (jp.getCurrentToken() == JsonToken.VALUE_STRING) {",
                "-                            // legacy case",
                "-                            String candidateID = jp.getText();",
                "-                            recon.addCandidate(pool.getReconCandidate(candidateID));",
                "-                        } else {",
                "-                            recon.addCandidate(ReconCandidate.loadStreaming(jp));",
                "-                        }",
                "-                    }",
                "-                } else if (\"service\".equals(fieldName)) {",
                "-                    recon.service = jp.getText();",
                "-                } else if (\"identifierSpace\".equals(fieldName)) {",
                "-                    recon.identifierSpace = jp.getText();",
                "-                    if (\"null\".equals(recon.identifierSpace)) {",
                "-                        recon.identifierSpace = FREEBASE_IDENTIFIER_SPACE;",
                "-                    }",
                "-                } else if (\"schemaSpace\".equals(fieldName)) {",
                "-                    recon.schemaSpace = jp.getText();",
                "-                    if (\"null\".equals(recon.schemaSpace)) {",
                "-                        recon.schemaSpace = FREEBASE_SCHEMA_SPACE;",
                "-                    }",
                "-                } else if (\"judgmentAction\".equals(fieldName)) {",
                "-                    recon.judgmentAction = jp.getText();",
                "-                } else if (\"judgmentBatchSize\".equals(fieldName)) {",
                "-                    recon.judgmentBatchSize = jp.getIntValue();",
                "-                } else if (\"matchRank\".equals(fieldName)) {",
                "-                    recon.matchRank = jp.getIntValue();",
                "-                }",
                "-            }",
                "-        }",
                "-        ",
                "-        return recon;",
                "+    static public Recon loadStreaming(String s) throws Exception {",
                "+        return ParsingUtilities.mapper.readValue(s, Recon.class);",
                "+    }",
                "+    ",
                "+    public Recon(",
                "+            @JsonProperty(\"id\")",
                "+            long id,",
                "+            @JsonProperty(\"judgmentHistoryEntry\")",
                "+            long judgmentHistoryEntry,",
                "+            @JsonProperty(\"j\")",
                "+            Judgment judgment,",
                "+            @JsonProperty(\"m\")",
                "+            ReconCandidate match,",
                "+            @JsonProperty(\"f\")",
                "+            Object[] features,",
                "+            @JsonProperty(\"c\")",
                "+            List<ReconCandidate> candidates,",
                "+            @JsonProperty(\"service\")",
                "+            String service,",
                "+            @JsonProperty(\"identifierSpace\")",
                "+            String identifierSpace,",
                "+            @JsonProperty(\"schemaSpace\")",
                "+            String schemaSpace,",
                "+            @JsonProperty(\"judgmentAction\")",
                "+            String judgmentAction,",
                "+            @JsonProperty(\"judgmentBatchSize\")",
                "+            Integer judgmentBatchSize,",
                "+            @JsonProperty(\"matchRank\")",
                "+            Integer matchRank) {",
                "+        this.id = id;",
                "+        this.judgmentHistoryEntry = judgmentHistoryEntry;",
                "+        this.judgment = judgment != null ? judgment : Judgment.None;",
                "+        this.match = match;",
                "+        this.features = features != null ? features : new Object[Feature_max];",
                "+        this.candidates = candidates != null ? candidates : new ArrayList<>();",
                "+        this.service = service != null ? service : \"unknown\";",
                "+        this.identifierSpace = identifierSpace;",
                "+        this.schemaSpace = schemaSpace;",
                "+        this.judgmentAction = judgmentAction != null ? judgmentAction : \"unknown\";",
                "+        this.judgmentBatchSize = judgmentBatchSize != null ? judgmentBatchSize : 0;",
                "+        this.matchRank = matchRank != null ? matchRank : -1;",
                "     }",
                "diff --git a/main/src/com/google/refine/model/ReconCandidate.java b/main/src/com/google/refine/model/ReconCandidate.java",
                "index d81e0f760..6e2a1e3da 100644",
                "--- a/main/src/com/google/refine/model/ReconCandidate.java",
                "+++ b/main/src/com/google/refine/model/ReconCandidate.java",
                "@@ -41,3 +41,2 @@ import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-import com.fasterxml.jackson.core.JsonFactory;",
                " import com.fasterxml.jackson.core.JsonParser;",
                "diff --git a/main/src/com/google/refine/model/Row.java b/main/src/com/google/refine/model/Row.java",
                "index 846271f41..3e161f3f7 100644",
                "--- a/main/src/com/google/refine/model/Row.java",
                "+++ b/main/src/com/google/refine/model/Row.java",
                "@@ -38,3 +38,2 @@ import java.io.Writer;",
                " import java.util.ArrayList;",
                "-import java.util.Collections;",
                " import java.util.List;",
                "@@ -45,5 +44,2 @@ import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-import com.fasterxml.jackson.core.JsonFactory;",
                "-import com.fasterxml.jackson.core.JsonParser;",
                "-import com.fasterxml.jackson.core.JsonToken;",
                " import com.fasterxml.jackson.databind.InjectableValues;",
                "diff --git a/main/src/com/google/refine/model/changes/MassReconChange.java b/main/src/com/google/refine/model/changes/MassReconChange.java",
                "index 41869af00..3b5541699 100644",
                "--- a/main/src/com/google/refine/model/changes/MassReconChange.java",
                "+++ b/main/src/com/google/refine/model/changes/MassReconChange.java",
                "@@ -142,3 +142,3 @@ public class MassReconChange implements Change {",
                "             String line = reader.readLine();",
                "-            Recon recon = Recon.loadStreaming(line, pool);",
                "+            Recon recon = Recon.loadStreaming(line);",
                "diff --git a/main/src/com/google/refine/util/Pool.java b/main/src/com/google/refine/util/Pool.java",
                "index ddb9ea39e..d91ca0f9a 100644",
                "--- a/main/src/com/google/refine/util/Pool.java",
                "+++ b/main/src/com/google/refine/util/Pool.java",
                "@@ -147,3 +147,3 @@ public class Pool  {",
                "                     if (line != null) {",
                "-                        Recon recon = Recon.loadStreaming(line, this);",
                "+                        Recon recon = Recon.loadStreaming(line);",
                "                         if (recon != null) {",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/CellTests.java b/main/tests/server/src/com/google/refine/tests/model/CellTests.java",
                "index ded99c68b..bbe58fb2e 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/CellTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/CellTests.java",
                "@@ -30,3 +30,3 @@ public class CellTests {",
                "     public void serializeCellWithRecon() throws Exception {",
                "-        recon = Recon.loadStreaming(reconJson, pool);",
                "+        recon = Recon.loadStreaming(reconJson);",
                "         when(pool.getRecon(\"1533649346002675326\")).thenReturn(recon);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/ReconTests.java b/main/tests/server/src/com/google/refine/tests/model/ReconTests.java",
                "index fbfcfbfa0..dda2ce67c 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/ReconTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/ReconTests.java",
                "@@ -34,3 +34,3 @@ public class ReconTests {",
                "     public void serializeReconSaveMode() throws Exception {      ",
                "-        Recon r = Recon.loadStreaming(fullJson, null);",
                "+        Recon r = Recon.loadStreaming(fullJson);",
                "         TestUtils.isSerializedTo(r, fullJson, true);",
                "@@ -40,3 +40,3 @@ public class ReconTests {",
                "     public void serializeReconViewMode() throws Exception {",
                "-        Recon r = Recon.loadStreaming(fullJson, null);",
                "+        Recon r = Recon.loadStreaming(fullJson);",
                "         String shortJson = \"{\\\"id\\\":1533651559492945033,\"",
                "@@ -68,3 +68,3 @@ public class ReconTests {",
                "                 + \"}\";",
                "-        Recon r = Recon.loadStreaming(fullJson, null);",
                "+        Recon r = Recon.loadStreaming(fullJson);",
                "         r.match = null;",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/RowTests.java b/main/tests/server/src/com/google/refine/tests/model/RowTests.java",
                "index 5241be71e..4108ccfc8 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/RowTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/RowTests.java",
                "@@ -138,3 +138,3 @@ public class RowTests extends RefineTest {",
                "         Pool pool = mock(Pool.class);",
                "-        Recon recon = Recon.loadStreaming(reconJson, pool);",
                "+        Recon recon = Recon.loadStreaming(reconJson);",
                "         when(pool.getRecon(\"1533649346002675326\")).thenReturn(recon);"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/Recon.java",
                "main/src/com/google/refine/model/ReconCandidate.java",
                "main/src/com/google/refine/model/Row.java",
                "main/src/com/google/refine/model/changes/MassReconChange.java",
                "main/src/com/google/refine/util/Pool.java",
                "main/tests/server/src/com/google/refine/tests/model/CellTests.java",
                "main/tests/server/src/com/google/refine/tests/model/ReconTests.java",
                "main/tests/server/src/com/google/refine/tests/model/RowTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9dcf1d9ed1ef637b45dab6e7176c5a6ca0a32b31",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544069976,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9c58b8f51f893fe7113ef933ef4c7a2b69d21a04",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540144446,
            "hunks": 2,
            "message": "Fix constraints initialization",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/Column.java b/main/src/com/google/refine/model/Column.java",
                "index 3fee69f4e..29f0d52e0 100644",
                "--- a/main/src/com/google/refine/model/Column.java",
                "+++ b/main/src/com/google/refine/model/Column.java",
                "@@ -38,2 +38,3 @@ import java.io.Writer;",
                " import java.lang.reflect.Method;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "@@ -69,3 +70,3 @@ public class Column  {",
                "     private String description = \"\";",
                "-    private Map<String, Object> constraints = null;",
                "+    private Map<String, Object> constraints = Collections.emptyMap();"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/Column.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3b9fd23b9cf86a2f5681887136f0aa08156e05fa",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540201360,
            "hunks": 2,
            "message": "Jackson deserialization for DenormalizeOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/row/DenormalizeOperation.java b/main/src/com/google/refine/operations/row/DenormalizeOperation.java",
                "index 9daf246e9..da4b3a6d2 100644",
                "--- a/main/src/com/google/refine/operations/row/DenormalizeOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/DenormalizeOperation.java",
                "@@ -40,2 +40,4 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+",
                " import com.google.refine.history.HistoryEntry;",
                "@@ -54,2 +56,3 @@ public class DenormalizeOperation extends AbstractOperation {",
                "+    @JsonCreator",
                "     public DenormalizeOperation() {"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/row/DenormalizeOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6d05631a07c975bce7d12249661d46ffea36373b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542634284,
            "hunks": 60,
            "message": "Migrate GREL functions and controls to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/expr/ExpressionUtils.java b/main/src/com/google/refine/expr/ExpressionUtils.java",
                "index f44b0cd52..95179dcfe 100644",
                "--- a/main/src/com/google/refine/expr/ExpressionUtils.java",
                "+++ b/main/src/com/google/refine/expr/ExpressionUtils.java",
                "@@ -43,5 +43,4 @@ import java.util.Set;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.model.Cell;",
                "@@ -152,6 +151,6 @@ public class ExpressionUtils {",
                "     static public Serializable wrapStorable(Object v) {",
                "-        if (v instanceof JSONArray) {",
                "-            return ((JSONArray) v).toString();",
                "-        } else if (v instanceof JSONObject) {",
                "-            return ((JSONObject) v).toString();",
                "+        if (v instanceof ArrayNode) {",
                "+            return ((ArrayNode) v).toString();",
                "+        } else if (v instanceof ObjectNode) {",
                "+            return ((ObjectNode) v).toString();",
                "         } else {",
                "diff --git a/main/src/com/google/refine/expr/functions/Get.java b/main/src/com/google/refine/expr/functions/Get.java",
                "index d3dad40fd..4ee7866f9 100644",
                "--- a/main/src/com/google/refine/expr/functions/Get.java",
                "+++ b/main/src/com/google/refine/expr/functions/Get.java",
                "@@ -38,6 +38,4 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.expr.ExpressionUtils;",
                "@@ -45,2 +43,3 @@ import com.google.refine.expr.HasFields;",
                " import com.google.refine.expr.HasFieldsList;",
                "+import com.google.refine.expr.util.JsonValueConverter;",
                " import com.google.refine.grel.Function;",
                "@@ -59,8 +58,4 @@ public class Get implements Function {",
                "                     return ((HasFields) v).getField((String) from, bindings);",
                "-                } else if (v instanceof JSONObject && from instanceof String) {",
                "-                    try {",
                "-                        return ((JSONObject) v).get((String) from);",
                "-                    } catch (JSONException e) {",
                "-                        // ignore; will return null",
                "-                    }",
                "+                } else if (v instanceof ObjectNode && from instanceof String) {",
                "+                    return JsonValueConverter.convert(((ObjectNode) v).get((String) from));",
                "                 } else {",
                "@@ -70,3 +65,3 @@ public class Get implements Function {",
                "                             v instanceof HasFieldsList || ",
                "-                            v instanceof JSONArray) {",
                "+                            v instanceof ArrayNode) {",
                "@@ -77,4 +72,4 @@ public class Get implements Function {",
                "                                 length = ((HasFieldsList) v).length();",
                "-                            } else if (v instanceof JSONArray) {",
                "-                                length = ((JSONArray) v).length();",
                "+                            } else if (v instanceof ArrayNode) {",
                "+                                length = ((ArrayNode) v).size();",
                "                             } else {",
                "@@ -94,8 +89,4 @@ public class Get implements Function {",
                "                                     return ((HasFieldsList) v).get(start);",
                "-                                } else if (v instanceof JSONArray) {",
                "-                                    try {",
                "-                                        return ((JSONArray) v).get(start);",
                "-                                    } catch (JSONException e) {",
                "-                                        // ignore; will return null",
                "-                                    }",
                "+                                } else if (v instanceof ArrayNode) {",
                "+                                    return JsonValueConverter.convert(((ArrayNode) v).get(start));",
                "                                 } else {",
                "@@ -120,4 +111,4 @@ public class Get implements Function {",
                "                                         return ((HasFieldsList) v).getSubList(start, end);",
                "-                                    } else if (v instanceof JSONArray) {",
                "-                                        JSONArray a = (JSONArray) v;",
                "+                                    } else if (v instanceof ArrayNode) {",
                "+                                        ArrayNode a = (ArrayNode) v;",
                "                                         Object[] a2 = new Object[end - start];",
                "@@ -125,9 +116,4 @@ public class Get implements Function {",
                "                                         for (int i = 0; i < a2.length; i++) {",
                "-                                            try {",
                "-                                                a2[i] = a.get(start + i);",
                "-                                            } catch (JSONException e) {",
                "-                                                // ignore",
                "-                                            }",
                "+                                            a2[i] = JsonValueConverter.convert(a.get(start + i)); ",
                "                                         }",
                "-                                        ",
                "                                         return a2;",
                "diff --git a/main/src/com/google/refine/expr/functions/HasField.java b/main/src/com/google/refine/expr/functions/HasField.java",
                "index 8fb0cb282..3e466ca2f 100644",
                "--- a/main/src/com/google/refine/expr/functions/HasField.java",
                "+++ b/main/src/com/google/refine/expr/functions/HasField.java",
                "@@ -37,5 +37,3 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.expr.HasFields;",
                "@@ -55,8 +53,4 @@ public class HasField implements Function {",
                "                     return ((HasFields) v).getField(name, bindings) != null;",
                "-                } else if (v instanceof JSONObject) {",
                "-                    try {",
                "-                        return ((JSONObject) v).get(name) != null;",
                "-                    } catch (JSONException e) {",
                "-                        // ignore; will return false",
                "-                    }",
                "+                } else if (v instanceof ObjectNode) {",
                "+                    return ((ObjectNode) v).has(name);",
                "                 }",
                "diff --git a/main/src/com/google/refine/expr/functions/Jsonize.java b/main/src/com/google/refine/expr/functions/Jsonize.java",
                "index 1fdd02dbf..f9081fe12 100644",
                "--- a/main/src/com/google/refine/expr/functions/Jsonize.java",
                "+++ b/main/src/com/google/refine/expr/functions/Jsonize.java",
                "@@ -35,11 +35,7 @@ package com.google.refine.expr.functions;",
                "-import java.util.Collection;",
                "-import java.util.Map;",
                "+import java.io.IOException;",
                " import java.util.Properties;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.google.refine.grel.Function;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -51,23 +47,4 @@ public class Jsonize implements Function {",
                "             try {",
                "-                Object o1 = args[0];",
                "-                if (o1 == null) {",
                "-                    return \"null\";",
                "-                } else if (o1 instanceof Number) {",
                "-                    return JSONObject.numberToString((Number) o1);",
                "-                } else if (o1 instanceof Boolean) {",
                "-                    return o1.toString();",
                "-                } else if (o1 instanceof JSONObject) {",
                "-                    return ((JSONObject) o1).toString();",
                "-                } else if (o1 instanceof JSONArray) {",
                "-                    return ((JSONArray) o1).toString();",
                "-                } else if (o1 instanceof Map) {",
                "-                    return new JSONObject((Map<?,?>) o1).toString();",
                "-                } else if (o1 instanceof Collection) {",
                "-                    return new JSONArray((Collection<?>) o1).toString();",
                "-                } else if (o1.getClass().isArray()) {",
                "-                    return new JSONArray(o1).toString();",
                "-                } else {",
                "-                    return JSONObject.quote(o1.toString());",
                "-                }",
                "-            } catch (JSONException e) {",
                "+                return ParsingUtilities.mapper.writeValueAsString(args[0]);",
                "+            } catch (IOException e) {",
                "                 throw new RuntimeException(e);",
                "diff --git a/main/src/com/google/refine/expr/functions/Length.java b/main/src/com/google/refine/expr/functions/Length.java",
                "index e01b45eaf..ddf58f38b 100644",
                "--- a/main/src/com/google/refine/expr/functions/Length.java",
                "+++ b/main/src/com/google/refine/expr/functions/Length.java",
                "@@ -38,4 +38,3 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.google.refine.expr.EvalError;",
                "@@ -60,4 +59,4 @@ public class Length implements Function {",
                "                     return ((HasFieldsList) v).length();",
                "-                } else if (v instanceof JSONArray) {",
                "-                    return ((JSONArray) v).length();",
                "+                } else if (v instanceof ArrayNode) {",
                "+                    return ((ArrayNode) v).size();",
                "                 } else {",
                "diff --git a/main/src/com/google/refine/expr/functions/Slice.java b/main/src/com/google/refine/expr/functions/Slice.java",
                "index b757337ce..cb689203e 100644",
                "--- a/main/src/com/google/refine/expr/functions/Slice.java",
                "+++ b/main/src/com/google/refine/expr/functions/Slice.java",
                "@@ -38,5 +38,3 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.google.refine.expr.ExpressionUtils;",
                "@@ -55,3 +53,3 @@ public class Slice implements Function {",
                "             if (v != null && from != null && from instanceof Number && (to == null || to instanceof Number)) {",
                "-                if (v.getClass().isArray() || v instanceof List<?> || v instanceof HasFieldsList || v instanceof JSONArray) {",
                "+                if (v.getClass().isArray() || v instanceof List<?> || v instanceof HasFieldsList || v instanceof ArrayNode) {",
                "                     int length = 0;",
                "@@ -61,4 +59,4 @@ public class Slice implements Function {",
                "                         length = ((HasFieldsList) v).length();",
                "-                    } else if (v instanceof JSONArray) {",
                "-                        length = ((JSONArray) v).length();",
                "+                    } else if (v instanceof ArrayNode) {",
                "+                        length = ((ArrayNode) v).size();",
                "                     } else {",
                "@@ -88,4 +86,4 @@ public class Slice implements Function {",
                "                         return ((HasFieldsList) v).getSubList(start, end);",
                "-                    } else if (v instanceof JSONArray) {",
                "-                        JSONArray a = (JSONArray) v;",
                "+                    } else if (v instanceof ArrayNode) {",
                "+                        ArrayNode a = (ArrayNode) v;",
                "                         Object[] a2 = new Object[end - start];",
                "@@ -93,7 +91,3 @@ public class Slice implements Function {",
                "                         for (int i = 0; i < a2.length; i++) {",
                "-                            try {",
                "-                                a2[i] = a.get(start + i);",
                "-                            } catch (JSONException e) {",
                "-                                // ignore",
                "-                            }",
                "+                            a2[i] = a.get(start + i);",
                "                         }",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Join.java b/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "index fb3fad9a4..64b571d32 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "@@ -38,5 +38,5 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                " import org.json.JSONException;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.google.refine.expr.EvalError;",
                "@@ -57,3 +57,3 @@ public class Join implements Function {",
                "-                if (v.getClass().isArray() || v instanceof List<?> || v instanceof JSONArray) {",
                "+                if (v.getClass().isArray() || v instanceof List<?> || v instanceof ArrayNode) {",
                "                     StringBuffer sb = new StringBuffer();",
                "@@ -68,5 +68,5 @@ public class Join implements Function {",
                "                         }",
                "-                    } else if (v instanceof JSONArray) {",
                "-                        JSONArray a = (JSONArray) v;",
                "-                        int l = a.length();",
                "+                    } else if (v instanceof ArrayNode) {",
                "+                        ArrayNode a = (ArrayNode) v;",
                "+                        int l = a.size();",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Reverse.java b/main/src/com/google/refine/expr/functions/arrays/Reverse.java",
                "index eedc0195e..383e7763c 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Reverse.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Reverse.java",
                "@@ -38,5 +38,3 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,9 +53,4 @@ public class Reverse implements Function {",
                "             if (v != null) {",
                "-                if (v instanceof JSONArray) {",
                "-                    try {",
                "-                        v = JSONUtilities.toArray((JSONArray) v);",
                "-                    } catch (JSONException e) {",
                "-                        return new EvalError(ControlFunctionRegistry.getFunctionName(this) +",
                "-                                \" fails to process a JSON array: \" + e.getMessage());",
                "-                    }",
                "+                if (v instanceof ArrayNode) {",
                "+                    v = JSONUtilities.toArray((ArrayNode) v);",
                "                 }",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Sort.java b/main/src/com/google/refine/expr/functions/arrays/Sort.java",
                "index 090a79968..e0f0436ed 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Sort.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Sort.java",
                "@@ -40,5 +40,3 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.google.refine.expr.EvalError;",
                "@@ -64,13 +62,8 @@ public class Sort implements Function {",
                "                     return r;",
                "-                } else if (v instanceof JSONArray) {",
                "-                    try {",
                "-                        Object[] r = JSONUtilities.toArray((JSONArray) v);",
                "-                        ",
                "-                        Arrays.sort(r, 0, r.length);",
                "-                        ",
                "-                        return r;",
                "-                    } catch (JSONException e) {",
                "-                        return new EvalError(ControlFunctionRegistry.getFunctionName(this) +",
                "-                                \" fails to process a JSON array: \" + e.getMessage());",
                "-                    }",
                "+                } else if (v instanceof ArrayNode) {",
                "+                    Object[] r = JSONUtilities.toArray((ArrayNode) v);",
                "+                    ",
                "+                    Arrays.sort(r, 0, r.length);",
                "+                    ",
                "+                    return r;",
                "                 } else if (v instanceof List<?>) {",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Uniques.java b/main/src/com/google/refine/expr/functions/arrays/Uniques.java",
                "index 0ee2c50ef..ed78bd370 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Uniques.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Uniques.java",
                "@@ -40,5 +40,3 @@ import java.util.Set;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.google.refine.expr.EvalError;",
                "@@ -57,9 +55,4 @@ public class Uniques implements Function {",
                "             if (v != null) {",
                "-                if (v instanceof JSONArray) {",
                "-                    try {",
                "-                        v = JSONUtilities.toArray((JSONArray) v);",
                "-                    } catch (JSONException e) {",
                "-                        return new EvalError(ControlFunctionRegistry.getFunctionName(this) +",
                "-                                \" fails to process a JSON array: \" + e.getMessage());",
                "-                    }",
                "+                if (v instanceof ArrayNode) {",
                "+                    v = JSONUtilities.toArray((ArrayNode) v);",
                "                 }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/ParseJson.java b/main/src/com/google/refine/expr/functions/strings/ParseJson.java",
                "index 3e2725282..c858ea0bd 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/ParseJson.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/ParseJson.java",
                "@@ -35,7 +35,5 @@ package com.google.refine.expr.functions.strings;",
                "+import java.io.IOException;",
                " import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONTokener;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -43,2 +41,3 @@ import com.google.refine.grel.ControlFunctionRegistry;",
                " import com.google.refine.grel.Function;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -52,4 +51,4 @@ public class ParseJson implements Function {",
                "                 try {",
                "-                    return new JSONTokener(o1.toString()).nextValue();",
                "-                } catch (JSONException e) {",
                "+                    return ParsingUtilities.mapper.readTree(o1.toString());",
                "+                } catch (IOException e) {",
                "                     return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" failed: \" + e.getMessage());",
                "diff --git a/main/src/com/google/refine/expr/util/JsonValueConverter.java b/main/src/com/google/refine/expr/util/JsonValueConverter.java",
                "new file mode 100644",
                "index 000000000..995136b79",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/expr/util/JsonValueConverter.java",
                "@@ -0,0 +1,37 @@",
                "+package com.google.refine.expr.util;",
                "+",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+",
                "+/**",
                "+ * Converts the a JSON value",
                "+ * @author antonin",
                "+ *",
                "+ */",
                "+public class JsonValueConverter {",
                "+",
                "+\tpublic static Object convert(JsonNode value) {",
                "+\t\tif (value == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\tif (value.isObject()) {",
                "+\t\t\treturn value;",
                "+\t\t} else if (value.isArray()) {",
                "+    \t\treturn value;",
                "+    \t} else if (value.isBigDecimal() || value.isDouble() || value.isFloat()) {",
                "+    \t\treturn value.asDouble();",
                "+    \t} else if (value.isBigInteger()) {",
                "+    \t\treturn value.asLong();",
                "+    \t} else if (value.isInt()) {",
                "+    \t\treturn value.asInt();",
                "+    \t} else if (value.isBinary() || value.isTextual()) {",
                "+    \t\treturn value.asText();",
                "+    \t} else if (value.isBoolean()) {",
                "+    \t\treturn value.asBoolean();",
                "+    \t} else if (value.isNull()) {",
                "+    \t\treturn null;",
                "+    \t} else {",
                "+    \t\treturn null;",
                "+    \t}",
                "+\t}",
                "+",
                "+}",
                "diff --git a/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java b/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "index 73f45c7c1..e942e9023 100644",
                "--- a/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "+++ b/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "@@ -43,2 +43,3 @@ import com.google.refine.expr.ExpressionUtils;",
                " import com.google.refine.expr.HasFields;",
                "+import com.google.refine.expr.util.JsonValueConverter;",
                "@@ -69,17 +70,3 @@ public class FieldAccessorExpr implements Evaluable {",
                "         \tJsonNode value = ((ObjectNode) o).get(_fieldName);",
                "-        \tif (value.isArray()) {",
                "-        \t\treturn Lists.newArrayList(value.elements());",
                "-        \t} else if (value.isBigDecimal() || value.isDouble() || value.isFloat()) {",
                "-        \t\treturn value.asDouble();",
                "-        \t} else if (value.isBigInteger() || value.isInt()) {",
                "-        \t\treturn value.asLong();",
                "-        \t} else if (value.isBinary() || value.isTextual()) {",
                "-        \t\treturn value.asText();",
                "-        \t} else if (value.isBoolean()) {",
                "-        \t\treturn value.asBoolean();",
                "-        \t} else if (value.isNull()) {",
                "-        \t\treturn null;",
                "-        \t} else {",
                "-        \t\treturn null;",
                "-        \t}",
                "+        \treturn JsonValueConverter.convert(value);",
                "         } else {",
                "diff --git a/main/src/com/google/refine/grel/controls/Filter.java b/main/src/com/google/refine/grel/controls/Filter.java",
                "index a2bb4000d..36a679649 100644",
                "--- a/main/src/com/google/refine/grel/controls/Filter.java",
                "+++ b/main/src/com/google/refine/grel/controls/Filter.java",
                "@@ -40,5 +40,3 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.google.refine.expr.EvalError;",
                "@@ -46,2 +44,3 @@ import com.google.refine.expr.Evaluable;",
                " import com.google.refine.expr.ExpressionUtils;",
                "+import com.google.refine.expr.util.JsonValueConverter;",
                " import com.google.refine.grel.Control;",
                "@@ -67,3 +66,3 @@ public class Filter implements Control {",
                "             return o;",
                "-        } else if (!ExpressionUtils.isArrayOrCollection(o) && !(o instanceof JSONArray)) {",
                "+        } else if (!ExpressionUtils.isArrayOrCollection(o) && !(o instanceof ArrayNode)) {",
                "             return new EvalError(\"First argument is not an array\");",
                "@@ -93,5 +92,5 @@ public class Filter implements Control {",
                "                 }",
                "-            } else if (o instanceof JSONArray) {",
                "-                JSONArray a = (JSONArray) o;",
                "-                int l = a.length();",
                "+            } else if (o instanceof ArrayNode) {",
                "+                ArrayNode a = (ArrayNode) o;",
                "+                int l = a.size();",
                "@@ -99,17 +98,13 @@ public class Filter implements Control {",
                "                 for (int i = 0; i < l; i++) {",
                "-                    try {",
                "-                        Object v = a.get(i);",
                "-                        ",
                "-                        if (v != null) {",
                "-                            bindings.put(name, v);",
                "-                        } else {",
                "-                            bindings.remove(name);",
                "-                        }",
                "-                        ",
                "-                        Object r = args[2].evaluate(bindings);",
                "-                        if (r instanceof Boolean && ((Boolean) r).booleanValue()) {",
                "-                            results.add(v);",
                "-                        }",
                "-                    } catch (JSONException e) {",
                "-                        results.add(new EvalError(e.getMessage()));",
                "+                    Object v = JsonValueConverter.convert(a.get(i));",
                "+                    ",
                "+                    if (v != null) {",
                "+                        bindings.put(name, v);",
                "+                    } else {",
                "+                        bindings.remove(name);",
                "+                    }",
                "+                    ",
                "+                    Object r = args[2].evaluate(bindings);",
                "+                    if (r instanceof Boolean && ((Boolean) r).booleanValue()) {",
                "+                        results.add(v);",
                "                     }",
                "diff --git a/main/src/com/google/refine/grel/controls/ForEach.java b/main/src/com/google/refine/grel/controls/ForEach.java",
                "index 493c18619..0103d60d0 100644",
                "--- a/main/src/com/google/refine/grel/controls/ForEach.java",
                "+++ b/main/src/com/google/refine/grel/controls/ForEach.java",
                "@@ -40,5 +40,3 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.google.refine.expr.EvalError;",
                "@@ -46,2 +44,3 @@ import com.google.refine.expr.Evaluable;",
                " import com.google.refine.expr.ExpressionUtils;",
                "+import com.google.refine.expr.util.JsonValueConverter;",
                " import com.google.refine.grel.Control;",
                "@@ -67,3 +66,3 @@ public class ForEach implements Control {",
                "             return o;",
                "-        } else if (!ExpressionUtils.isArrayOrCollection(o) && !(o instanceof JSONArray)) {",
                "+        } else if (!ExpressionUtils.isArrayOrCollection(o) && !(o instanceof ArrayNode)) {",
                "             return new EvalError(\"First argument to forEach is not an array\");",
                "@@ -92,5 +91,5 @@ public class ForEach implements Control {",
                "                 }",
                "-            } else if (o instanceof JSONArray) {",
                "-                JSONArray a = (JSONArray) o;",
                "-                int l = a.length();",
                "+            } else if (o instanceof ArrayNode) {",
                "+                ArrayNode a = (ArrayNode) o;",
                "+                int l = a.size();",
                "@@ -98,17 +97,13 @@ public class ForEach implements Control {",
                "                 for (int i = 0; i < l; i++) {",
                "-                    try {",
                "-                        Object v = a.get(i);",
                "-                        ",
                "-                        if (v != null) {",
                "-                            bindings.put(name, v);",
                "-                        } else {",
                "-                            bindings.remove(name);",
                "-                        }",
                "-                        ",
                "-                        Object r = args[2].evaluate(bindings);",
                "-                        ",
                "-                        results.add(r);",
                "-                    } catch (JSONException e) {",
                "-                        results.add(new EvalError(e.getMessage()));",
                "+                    Object v = JsonValueConverter.convert(a.get(i));",
                "+                    ",
                "+                    if (v != null) {",
                "+                        bindings.put(name, v);",
                "+                    } else {",
                "+                        bindings.remove(name);",
                "                     }",
                "+                    ",
                "+                    Object r = args[2].evaluate(bindings);",
                "+                    ",
                "+                    results.add(r);",
                "                 }",
                "diff --git a/main/src/com/google/refine/grel/controls/ForEachIndex.java b/main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "index 5535a19f6..2c4df3164 100644",
                "--- a/main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "+++ b/main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "@@ -39,5 +39,3 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.google.refine.expr.EvalError;",
                "@@ -45,2 +43,3 @@ import com.google.refine.expr.Evaluable;",
                " import com.google.refine.expr.ExpressionUtils;",
                "+import com.google.refine.expr.util.JsonValueConverter;",
                " import com.google.refine.grel.Control;",
                "@@ -69,3 +68,3 @@ public class ForEachIndex implements Control {",
                "             return o;",
                "-        } else if (!ExpressionUtils.isArrayOrCollection(o) && !(o instanceof JSONArray)) {",
                "+        } else if (!ExpressionUtils.isArrayOrCollection(o) && !(o instanceof ArrayNode)) {",
                "             return new EvalError(\"First argument to forEach is not an array\");",
                "@@ -96,5 +95,5 @@ public class ForEachIndex implements Control {",
                "                 }",
                "-            } else if (o instanceof JSONArray) {",
                "-                JSONArray a = (JSONArray) o;",
                "-                int l = a.length();",
                "+            } else if (o instanceof ArrayNode) {",
                "+                ArrayNode a = (ArrayNode) o;",
                "+                int l = a.size();",
                "@@ -102,14 +101,10 @@ public class ForEachIndex implements Control {",
                "                 for (int i = 0; i < l; i++) {",
                "-                    try {",
                "-                        Object v = a.get(i);",
                "-                        ",
                "-                        bindings.put(indexName, i);",
                "-                        bindings.put(elementName, v);",
                "-                        ",
                "-                        Object r = args[3].evaluate(bindings);",
                "-                        ",
                "-                        results.add(r);",
                "-                    } catch (JSONException e) {",
                "-                        results.add(new EvalError(e.getMessage()));",
                "-                    }",
                "+                    Object v = JsonValueConverter.convert(a.get(i));",
                "+                    ",
                "+                    bindings.put(indexName, i);",
                "+                    bindings.put(elementName, v);",
                "+                    ",
                "+                    Object r = args[3].evaluate(bindings);",
                "+                    ",
                "+                    results.add(r);",
                "                 }",
                "diff --git a/main/src/com/google/refine/util/JSONUtilities.java b/main/src/com/google/refine/util/JSONUtilities.java",
                "index 9f8433087..84dd576d8 100644",
                "--- a/main/src/com/google/refine/util/JSONUtilities.java",
                "+++ b/main/src/com/google/refine/util/JSONUtilities.java",
                "@@ -52,2 +52,3 @@ import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.common.collect.Lists;",
                "+import com.google.refine.expr.util.JsonValueConverter;",
                "@@ -479,2 +480,13 @@ public class JSONUtilities {",
                " \t}",
                "+",
                "+\tpublic static Object[] toArray(ArrayNode v) {",
                "+\t\tif (v == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\tObject[] result = new Object[v.size()];",
                "+\t\tfor (int i = 0; i != v.size(); i++) {",
                "+\t\t\tresult[i] = JsonValueConverter.convert(v.get(i));",
                "+\t\t}",
                "+\t\treturn result;",
                "+\t}",
                " }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/util/JsonValueConverterTests.java b/main/tests/server/src/com/google/refine/tests/expr/util/JsonValueConverterTests.java",
                "new file mode 100644",
                "index 000000000..ed666b8e6",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/util/JsonValueConverterTests.java",
                "@@ -0,0 +1,64 @@",
                "+package com.google.refine.tests.expr.util;",
                "+",
                "+import static org.testng.Assert.assertEquals;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Arrays;",
                "+",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                "+import com.google.refine.expr.util.JsonValueConverter;",
                "+import com.google.refine.util.ParsingUtilities;",
                "+",
                "+public class JsonValueConverterTests {",
                "+\t",
                "+\tprivate void fieldEquals(String json, Object expectedValue) {",
                "+\t\ttry {",
                "+\t\t\tObjectNode n = (ObjectNode) ParsingUtilities.mapper.readTree(json);",
                "+\t\t\tassertEquals(expectedValue, JsonValueConverter.convert(n.get(\"foo\")));",
                "+\t\t} catch (IOException e) {",
                "+\t\t\te.printStackTrace();",
                "+\t\t}",
                "+\t}",
                "+\t",
                "+\t@Test",
                "+\tpublic void testConvertJsonObject() throws IOException {",
                "+\t\tfieldEquals(\"{\\\"foo\\\":{\\\"ob\\\":\\\"ject\\\"}}\", ParsingUtilities.mapper.readTree(\"{\\\"ob\\\":\\\"ject\\\"}\"));",
                "+\t}",
                "+\t",
                "+\t@Test",
                "+\tpublic void testConvertJsonArray() throws IOException {",
                "+\t\tfieldEquals(\"{\\\"foo\\\":[1,2]}\", ParsingUtilities.mapper.readTree(\"[1,2]\"));",
                "+\t}",
                "+\t",
                "+\t@Test",
                "+\tpublic void testConvertInt() {",
                "+\t\tfieldEquals(\"{\\\"foo\\\":3}\", 3);",
                "+\t}",
                "+\t",
                "+\t@Test",
                "+\tpublic void testConvertFloat() {",
                "+\t\tfieldEquals(\"{\\\"foo\\\":3.14}\", 3.14);",
                "+\t}",
                "+\t",
                "+\t@Test",
                "+\tpublic void testConvertBool() {",
                "+\t\tfieldEquals(\"{\\\"foo\\\":true}\", true);",
                "+\t}",
                "+",
                "+\t@Test",
                "+\tpublic void testConvertNull() {",
                "+\t\tfieldEquals(\"{\\\"foo\\\":null}\", null);",
                "+\t}",
                "+\t",
                "+\t@Test",
                "+\tpublic void testConvertString() {",
                "+\t\tfieldEquals(\"{\\\"foo\\\":\\\"bar\\\"}\", \"bar\");",
                "+\t}",
                "+\t",
                "+\t@Test",
                "+\tpublic void testConvertNoField() {",
                "+\t\tfieldEquals(\"{}\", null);",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/expr/ExpressionUtils.java",
                "main/src/com/google/refine/expr/functions/Get.java",
                "main/src/com/google/refine/expr/functions/HasField.java",
                "main/src/com/google/refine/expr/functions/Jsonize.java",
                "main/src/com/google/refine/expr/functions/Length.java",
                "main/src/com/google/refine/expr/functions/Slice.java",
                "main/src/com/google/refine/expr/functions/arrays/Join.java",
                "main/src/com/google/refine/expr/functions/arrays/Reverse.java",
                "main/src/com/google/refine/expr/functions/arrays/Sort.java",
                "main/src/com/google/refine/expr/functions/arrays/Uniques.java",
                "main/src/com/google/refine/expr/functions/strings/ParseJson.java",
                "main/src/com/google/refine/expr/util/JsonValueConverter.java",
                "main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "main/src/com/google/refine/grel/controls/Filter.java",
                "main/src/com/google/refine/grel/controls/ForEach.java",
                "main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "main/src/com/google/refine/util/JSONUtilities.java",
                "main/tests/server/src/com/google/refine/tests/expr/util/JsonValueConverterTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ccb1ac84c11232aab21bc4eb0c6049dc4837aa50",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542300926,
            "hunks": 5,
            "message": "Migrate GREL AST to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java b/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "index 9677106ea..73f45c7c1 100644",
                "--- a/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "+++ b/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "@@ -37,5 +37,5 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                "+import com.google.common.collect.Lists;",
                " import com.google.refine.expr.Evaluable;",
                "@@ -67,8 +67,19 @@ public class FieldAccessorExpr implements Evaluable {",
                "             return ((HasFields) o).getField(_fieldName, bindings);",
                "-        } else if (o instanceof JSONObject) {",
                "-            try {",
                "-                return ((JSONObject) o).get(_fieldName);",
                "-            } catch (JSONException e) {",
                "-                return null;",
                "-            }",
                "+        } else if (o instanceof ObjectNode) {",
                "+        \tJsonNode value = ((ObjectNode) o).get(_fieldName);",
                "+        \tif (value.isArray()) {",
                "+        \t\treturn Lists.newArrayList(value.elements());",
                "+        \t} else if (value.isBigDecimal() || value.isDouble() || value.isFloat()) {",
                "+        \t\treturn value.asDouble();",
                "+        \t} else if (value.isBigInteger() || value.isInt()) {",
                "+        \t\treturn value.asLong();",
                "+        \t} else if (value.isBinary() || value.isTextual()) {",
                "+        \t\treturn value.asText();",
                "+        \t} else if (value.isBoolean()) {",
                "+        \t\treturn value.asBoolean();",
                "+        \t} else if (value.isNull()) {",
                "+        \t\treturn null;",
                "+        \t} else {",
                "+        \t\treturn null;",
                "+        \t}",
                "         } else {",
                "diff --git a/main/src/com/google/refine/grel/ast/LiteralExpr.java b/main/src/com/google/refine/grel/ast/LiteralExpr.java",
                "index 8c04ade8f..d6ac35748 100644",
                "--- a/main/src/com/google/refine/grel/ast/LiteralExpr.java",
                "+++ b/main/src/com/google/refine/grel/ast/LiteralExpr.java",
                "@@ -37,4 +37,3 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.databind.node.TextNode;",
                " import com.google.refine.expr.Evaluable;",
                "@@ -58,3 +57,3 @@ public class LiteralExpr implements Evaluable {",
                "     public String toString() {",
                "-        return _value instanceof String ? JSONObject.quote((String) _value) : _value.toString();",
                "+        return _value instanceof String ? new TextNode((String) _value).toString() : _value.toString();",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/grel/ast/LiteralExprTest.java b/main/tests/server/src/com/google/refine/tests/grel/ast/LiteralExprTest.java",
                "new file mode 100644",
                "index 000000000..789ce9ee9",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/grel/ast/LiteralExprTest.java",
                "@@ -0,0 +1,21 @@",
                "+package com.google.refine.tests.grel.ast;",
                "+",
                "+import static org.testng.Assert.assertEquals;",
                "+",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.grel.ast.LiteralExpr;",
                "+",
                "+public class LiteralExprTest {",
                "+\t@Test",
                "+\tpublic void intLiteralToString() {",
                "+\t\tLiteralExpr expr = new LiteralExpr(42);",
                "+\t\tassertEquals(\"42\", expr.toString());",
                "+\t}",
                "+\t",
                "+\t@Test",
                "+\tpublic void stringLiteralToString() {",
                "+\t\tLiteralExpr expr = new LiteralExpr(\"string with \\\"\\\\backslash\\\"\");",
                "+\t\tassertEquals(\"\\\"string with \\\\\\\"\\\\\\\\backslash\\\\\\\"\\\"\", expr.toString());",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "main/src/com/google/refine/grel/ast/LiteralExpr.java",
                "main/tests/server/src/com/google/refine/tests/grel/ast/LiteralExprTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9af5b0a877c7486d3b29f6b2bd0ae53248286b29",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540204791,
            "hunks": 7,
            "message": "Jackson deserialization for ColumnMoveOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/column/ColumnMoveOperation.java b/main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "index 2b6cc7df0..ed764a731 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "@@ -35,4 +35,7 @@ package com.google.refine.operations.column;",
                "+import java.io.IOException;",
                "+",
                " import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -44,2 +47,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.model.changes.ColumnMoveChange;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -49,11 +53,11 @@ public class ColumnMoveOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return new ColumnMoveOperation(",
                "-            obj.getString(\"columnName\"),",
                "-            obj.getInt(\"index\")",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnMoveOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public ColumnMoveOperation(",
                "+        @JsonProperty(\"columnName\")",
                "         String columnName,",
                "+        @JsonProperty(\"index\")",
                "         int index"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/column/ColumnMoveOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f573f37a9752cb4c001ba7fe3c2e80a21ed1c366",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540199608,
            "hunks": 7,
            "message": "Jackson deserialization for ReconClearSimilarCellsOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java b/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "index 8c3f2ca8d..c342878d8 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations.recon;",
                "+import java.io.IOException;",
                " import java.util.List;",
                "@@ -39,2 +40,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -52,2 +54,3 @@ import com.google.refine.model.changes.ReconChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -56,14 +59,13 @@ public class ReconClearSimilarCellsOperation extends EngineDependentMassCellOper",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        return new ReconClearSimilarCellsOperation(",
                "-            EngineConfig.reconstruct(engineConfig),",
                "-            obj.getString(\"columnName\"),",
                "-            obj.getString(\"similarValue\")",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconClearSimilarCellsOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public ReconClearSimilarCellsOperation(",
                "-        EngineConfig engineConfig, ",
                "+        @JsonProperty(\"engineConfig\")",
                "+        EngineConfig engineConfig,",
                "+        @JsonProperty(\"columnName\")",
                "         String     columnName, ",
                "+        @JsonProperty(\"similarValue\")",
                "         String     similarValue"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "72d76ee22a7c4cff7d9a36a5844f73e92fc5773c",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544520424,
            "hunks": 8,
            "message": "Separate distance and keyer registration in dedicated factories",
            "diff": [
                "diff --git a/main/src/com/google/refine/clustering/binning/BinningClusterer.java b/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "index 22e91fd5c..a3b3ed1ed 100644",
                "--- a/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "+++ b/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "@@ -83,3 +83,3 @@ public class BinningClusterer extends Clusterer {",
                "         \t_keyerName = keyerName;",
                "-        \t_keyer = _keyers.get(_keyerName.toLowerCase());",
                "+        \t_keyer = KeyerFactory.get(_keyerName.toLowerCase());",
                "         }",
                "@@ -125,4 +125,2 @@ public class BinningClusterer extends Clusterer {",
                "-    static final protected Map<String, Keyer> _keyers = new HashMap<String, Keyer>();",
                "-",
                "     final static Logger logger = LoggerFactory.getLogger(\"binning_clusterer\");",
                "@@ -130,12 +128,2 @@ public class BinningClusterer extends Clusterer {",
                "     List<Map<String,Integer>> _clusters;",
                "-     ",
                "-    static {",
                "-        _keyers.put(\"fingerprint\", new FingerprintKeyer());",
                "-        _keyers.put(\"ngram-fingerprint\", new NGramFingerprintKeyer());",
                "-        _keyers.put(\"metaphone\", new MetaphoneKeyer());",
                "-        _keyers.put(\"double-metaphone\", new DoubleMetaphoneKeyer());",
                "-        _keyers.put(\"metaphone3\", new Metaphone3Keyer());",
                "-        _keyers.put(\"soundex\", new SoundexKeyer());",
                "-        _keyers.put(\"cologne-phonetic\", new ColognePhoneticKeyer());",
                "-    }",
                "diff --git a/main/src/com/google/refine/clustering/binning/KeyerFactory.java b/main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "new file mode 100644",
                "index 000000000..be4998450",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "@@ -0,0 +1,47 @@",
                "+package com.google.refine.clustering.binning;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * Registry of keyers for clustering.",
                "+ * ",
                "+ * @author Antonin Delpeuch",
                "+ *",
                "+ */",
                "+public class KeyerFactory {",
                "+",
                "+\tstatic final protected Map<String, Keyer> _keyers = new HashMap<String, Keyer>();",
                "+",
                "+    static {",
                "+        _keyers.put(\"fingerprint\", new FingerprintKeyer());",
                "+        _keyers.put(\"ngram-fingerprint\", new NGramFingerprintKeyer());",
                "+        _keyers.put(\"metaphone\", new MetaphoneKeyer());",
                "+        _keyers.put(\"double-metaphone\", new DoubleMetaphoneKeyer());",
                "+        _keyers.put(\"metaphone3\", new Metaphone3Keyer());",
                "+        _keyers.put(\"soundex\", new SoundexKeyer());",
                "+        _keyers.put(\"cologne-phonetic\", new ColognePhoneticKeyer());",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Returns the keyer registered under a given name, or null if it does not exist.",
                "+     */",
                "+    public static Keyer get(String name) {",
                "+    \treturn _keyers.get(name);",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Registers a keyer under a code name.",
                "+     */",
                "+    public static void put(String name, Keyer keyer) {",
                "+    \t_keyers.put(name, keyer);",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Set of available keyer, by names.",
                "+     */",
                "+    public static Set<String> getKeyerNames() {",
                "+    \treturn _keyers.keySet();",
                "+    }",
                "+}",
                "diff --git a/main/src/com/google/refine/clustering/knn/DistanceFactory.java b/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "new file mode 100644",
                "index 000000000..fb6ff2032",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "@@ -0,0 +1,57 @@",
                "+package com.google.refine.clustering.knn;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+import edu.mit.simile.vicino.distances.BZip2Distance;",
                "+import edu.mit.simile.vicino.distances.Distance;",
                "+import edu.mit.simile.vicino.distances.GZipDistance;",
                "+import edu.mit.simile.vicino.distances.JaccardDistance;",
                "+import edu.mit.simile.vicino.distances.JaroDistance;",
                "+import edu.mit.simile.vicino.distances.JaroWinklerDistance;",
                "+import edu.mit.simile.vicino.distances.JaroWinklerTFIDFDistance;",
                "+import edu.mit.simile.vicino.distances.LevenshteinDistance;",
                "+import edu.mit.simile.vicino.distances.PPMDistance;",
                "+",
                "+/**",
                "+ * Registry of distances for kNN clustering.",
                "+ * ",
                "+ * @author Antonin Delpeuch",
                "+ */",
                "+public class DistanceFactory {",
                "+    ",
                "+    static final protected Map<String, Distance> _distances = new HashMap<String, Distance>();",
                "+    ",
                "+    static {",
                "+        _distances.put(\"levenshtein\", new LevenshteinDistance());",
                "+        _distances.put(\"jaccard\", new JaccardDistance());",
                "+        _distances.put(\"jaro\", new JaroDistance());",
                "+        _distances.put(\"jaro-winkler\", new JaroWinklerDistance());",
                "+        _distances.put(\"jaro-winkler-tfidf\", new JaroWinklerTFIDFDistance());",
                "+        _distances.put(\"gzip\", new GZipDistance());",
                "+        _distances.put(\"bzip2\", new BZip2Distance());",
                "+        _distances.put(\"ppm\", new PPMDistance());",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Returns the distance registered under this name, or null if it does not exist.",
                "+     */",
                "+    public static Distance get(String name) {",
                "+    \treturn _distances.get(name);",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Registers a new distance under a name.",
                "+     */",
                "+    public static void put(String name, Distance distance) {",
                "+    \t_distances.put(name, distance);",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Lists the available distances, by name.",
                "+     */",
                "+    public static Set<String> getDistanceNames() {",
                "+    \treturn _distances.keySet();",
                "+    }",
                "+}",
                "diff --git a/main/src/com/google/refine/clustering/knn/kNNClusterer.java b/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "index 859688e9d..3ab66519a 100644",
                "--- a/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "+++ b/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "@@ -91,3 +91,3 @@ public class kNNClusterer extends Clusterer {",
                "         \t_distanceStr = distanceStr;",
                "-        \t_distance = _distances.get(_distanceStr.toLowerCase());",
                "+        \t_distance = DistanceFactory.get(_distanceStr.toLowerCase());",
                "         }",
                "@@ -134,4 +134,2 @@ public class kNNClusterer extends Clusterer {",
                "     private kNNClustererConfigParameters _params;",
                "-    ",
                "-    static final protected Map<String, Distance> _distances = new HashMap<String, Distance>();",
                "@@ -142,13 +140,2 @@ public class kNNClusterer extends Clusterer {",
                "     final static Logger logger = LoggerFactory.getLogger(\"kNN_clusterer\");",
                "-    ",
                "-    static {",
                "-        _distances.put(\"levenshtein\", new LevenshteinDistance());",
                "-        _distances.put(\"jaccard\", new JaccardDistance());",
                "-        _distances.put(\"jaro\", new JaroDistance());",
                "-        _distances.put(\"jaro-winkler\", new JaroWinklerDistance());",
                "-        _distances.put(\"jaro-winkler-tfidf\", new JaroWinklerTFIDFDistance());",
                "-        _distances.put(\"gzip\", new GZipDistance());",
                "-        _distances.put(\"bzip2\", new BZip2Distance());",
                "-        _distances.put(\"ppm\", new PPMDistance());",
                "-    }"
            ],
            "changed_files": [
                "main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "main/src/com/google/refine/clustering/knn/kNNClusterer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d493bf0720baeb64f2fd668cfb09bce28fd1dd5e",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540211128,
            "hunks": 17,
            "message": "Jackson deserialization for MassEditOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/cell/MassEditCommand.java b/main/src/com/google/refine/commands/cell/MassEditCommand.java",
                "index 557dba000..4b5911a03 100644",
                "--- a/main/src/com/google/refine/commands/cell/MassEditCommand.java",
                "+++ b/main/src/com/google/refine/commands/cell/MassEditCommand.java",
                "@@ -35,4 +35,8 @@ package com.google.refine.commands.cell;",
                "+import java.util.List;",
                "+",
                " import javax.servlet.http.HttpServletRequest;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -42,2 +46,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.operations.cell.MassEditOperation;",
                "+import com.google.refine.operations.cell.MassEditOperation.Edit;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -57,3 +62,3 @@ public class MassEditCommand extends EngineDependentCommand {",
                "             expression,",
                "-            MassEditOperation.reconstructEdits(ParsingUtilities.evaluateJsonStringToArray(editsString))",
                "+            ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), MassEditOperation.new TypeReference<List<Edit>>() {})",
                "         );",
                "diff --git a/main/src/com/google/refine/operations/cell/MassEditOperation.java b/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "index d9388b8e1..50f800834 100644",
                "--- a/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "@@ -42,5 +42,5 @@ import java.util.Properties;",
                "-import org.json.JSONArray;",
                " import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -76,3 +76,7 @@ public class MassEditOperation extends EngineDependentMassCellOperation {",
                "-        public Edit(List<String> from, boolean fromBlank, boolean fromError, Serializable to) {",
                "+        public Edit(",
                "+            List<String> from,",
                "+            boolean fromBlank,",
                "+            boolean fromError,",
                "+            Serializable to) {",
                "             this.from = from;",
                "@@ -82,51 +86,26 @@ public class MassEditOperation extends EngineDependentMassCellOperation {",
                "         }",
                "-    }",
                "-    ",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.has(\"engineConfig\") && !obj.isNull(\"engineConfig\") ?",
                "-                obj.getJSONObject(\"engineConfig\") : null;",
                "-        return new MassEditOperation(",
                "-            EngineConfig.reconstruct(engineConfig),",
                "-            obj.getString(\"columnName\"),",
                "-            obj.getString(\"expression\"),",
                "-            reconstructEdits(obj.getJSONArray(\"edits\"))",
                "-        );",
                "-    }",
                "-    ",
                "-    static public List<Edit> reconstructEdits(JSONArray editsA) throws Exception {",
                "-        int editCount = editsA.length();",
                "-        ",
                "-        List<Edit> edits = new ArrayList<Edit>(editCount);",
                "-        for (int i = 0; i < editCount; i++) {",
                "-            JSONObject editO = editsA.getJSONObject(i);",
                "-            ",
                "-            List<String> from = null;",
                "-            if (editO.has(\"from\") && !editO.isNull(\"from\")) {",
                "-                JSONArray fromA = editO.getJSONArray(\"from\");",
                "-                int fromCount = fromA.length();",
                "-                ",
                "-                from = new ArrayList<String>(fromCount);",
                "-                for (int j = 0; j < fromCount; j++) {",
                "-                    from.add(fromA.get(j).toString());",
                "-                }",
                "-            } else {",
                "-                from = new ArrayList<String>();",
                "+        @JsonCreator",
                "+        public static Edit deserialize(",
                "+                @JsonProperty(\"from\")",
                "+                List<String> from,",
                "+                @JsonProperty(\"fromBlank\")",
                "+                boolean fromBlank,",
                "+                @JsonProperty(\"fromError\")",
                "+                boolean fromError,",
                "+                @JsonProperty(\"to\")",
                "+                Object to,",
                "+                @JsonProperty(\"type\")",
                "+                String type) {",
                "+            Serializable serializable = (Serializable)to;",
                "+            if (\"date\".equals(type)) {",
                "+                serializable = ParsingUtilities.stringToDate((String) to);",
                "             }",
                "-            ",
                "-            boolean fromBlank = (editO.has(\"fromBlank\") && editO.getBoolean(\"fromBlank\") || from.get(0).length() == 0 && from.size() == 1);",
                "-            boolean fromError = editO.has(\"fromError\") && editO.getBoolean(\"fromError\");",
                "-            ",
                "-            Serializable to = (Serializable) editO.get(\"to\");",
                "-            if (editO.has(\"type\")) {",
                "-                String type = editO.getString(\"type\");",
                "-                if (\"date\".equals(type)) {",
                "-                    to = ParsingUtilities.stringToDate((String) to);",
                "-                }",
                "-            }",
                "-",
                "-            edits.add(new Edit(from, fromBlank, fromError, to));",
                "+            return new Edit(from == null ? new ArrayList<>() : from,",
                "+                    fromBlank, fromError, serializable);",
                "         }",
                "-        ",
                "-        return edits;",
                "+    }",
                "+    ",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), MassEditOperation.class);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "index eb1e448e8..da41c8c02 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "@@ -11,2 +11,4 @@ import static org.mockito.Mockito.mock;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+",
                " import com.google.refine.model.Project;",
                "@@ -44,3 +46,3 @@ public class MassOperationTests extends RefineTest {",
                "-        editList = MassEditOperation.reconstructEdits(ParsingUtilities.evaluateJsonStringToArray(editsString));",
                "+        editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "@@ -57,3 +59,3 @@ public class MassOperationTests extends RefineTest {",
                "-        editList = MassEditOperation.reconstructEdits(ParsingUtilities.evaluateJsonStringToArray(editsString));",
                "+        editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "@@ -71,3 +73,3 @@ public class MassOperationTests extends RefineTest {",
                "-      editList = MassEditOperation.reconstructEdits(ParsingUtilities.evaluateJsonStringToArray(editsString));",
                "+      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "@@ -84,3 +86,3 @@ public class MassOperationTests extends RefineTest {",
                "-      editList = MassEditOperation.reconstructEdits(ParsingUtilities.evaluateJsonStringToArray(editsString));",
                "+      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "@@ -97,3 +99,3 @@ public class MassOperationTests extends RefineTest {",
                "-      editList = MassEditOperation.reconstructEdits(ParsingUtilities.evaluateJsonStringToArray(editsString));",
                "+      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "@@ -109,3 +111,3 @@ public class MassOperationTests extends RefineTest {",
                "-      editList = MassEditOperation.reconstructEdits(ParsingUtilities.evaluateJsonStringToArray(editsString));",
                "+      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/cell/MassEditCommand.java",
                "main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e99a491338a2ab212b2e694e83ba36a39bd8bf8f",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538485399,
            "hunks": 10,
            "message": "Refactor workspace commands for Jackson serialization",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java b/main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java",
                "index 0da7fe0c4..e1f2cdf72 100644",
                "--- a/main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java",
                "+++ b/main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java",
                "@@ -48,2 +48,8 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonRawValue;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.ProjectManager;",
                "@@ -53,14 +59,20 @@ import com.google.refine.model.metadata.ProjectMetadata;",
                " public class GetAllProjectMetadataCommand extends Command {",
                "-    @Override",
                "-    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "-            throws ServletException, IOException {",
                "+    public static class AllProjectMetadata implements Jsonizable {",
                "+        @JsonProperty(\"projects\")",
                "+        protected Map<Long, ProjectMetadata> projects;",
                "+        @JsonProperty(\"customMetadataColumns\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        @JsonRawValue",
                "+        protected String customMetadataColumns;",
                "-        try {",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            Properties options = new Properties();",
                "-            ",
                "-            writer.object();",
                "+        protected AllProjectMetadata(Map<Long, ProjectMetadata> map, String json) {",
                "+            projects = map;",
                "+            customMetadataColumns = json;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+",
                "+           writer.object();",
                "@@ -68,4 +80,3 @@ public class GetAllProjectMetadataCommand extends Command {",
                "                 writer.object();",
                "-                Map<Long, ProjectMetadata> m = ProjectManager.singleton.getAllProjectMetadata();",
                "-                for (Entry<Long,ProjectMetadata> e : m.entrySet()) {",
                "+                for (Entry<Long,ProjectMetadata> e : projects.entrySet()) {",
                "                     ProjectMetadata pm = e.getValue();",
                "@@ -77,11 +88,18 @@ public class GetAllProjectMetadataCommand extends Command {",
                "                 writer.endObject();",
                "-            ",
                "-            String userMeta = (String)ProjectManager.singleton.getPreferenceStore().get(\"userMetadata\");",
                "-            if (userMeta != null) {",
                "-                writer.key(\"customMetadataColumns\");",
                "-                JSONArray customMetadataColumns = new JSONArray(userMeta);",
                "-                writer.value(customMetadataColumns);",
                "-            }",
                "+                if (customMetadataColumns != null) {",
                "+                    writer.key(\"customMetadataColumns\");",
                "+                    writer.value(new JSONArray(customMetadataColumns));",
                "+                }",
                "             writer.endObject();",
                "+        }",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "+            throws ServletException, IOException {",
                "+        ",
                "+        try {",
                "+            String userMeta = (String)ProjectManager.singleton.getPreferenceStore().get(\"userMetadata\");",
                "+            respondJSON(response, new AllProjectMetadata(ProjectManager.singleton.getAllProjectMetadata(), userMeta));",
                "         } catch (JSONException e) {",
                "diff --git a/main/src/com/google/refine/commands/workspace/GetAllProjectTagsCommand.java b/main/src/com/google/refine/commands/workspace/GetAllProjectTagsCommand.java",
                "index 29c2d5539..80fe2a3d1 100644",
                "--- a/main/src/com/google/refine/commands/workspace/GetAllProjectTagsCommand.java",
                "+++ b/main/src/com/google/refine/commands/workspace/GetAllProjectTagsCommand.java",
                "@@ -28,3 +28,7 @@ package com.google.refine.commands.workspace;",
                " import java.io.IOException;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Properties;",
                "+import java.util.Set;",
                "@@ -37,2 +41,5 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.ProjectManager;",
                "@@ -41,2 +48,28 @@ import com.google.refine.commands.Command;",
                " public class GetAllProjectTagsCommand extends Command {",
                "+    ",
                "+  public static class AllProjectsTags implements Jsonizable {",
                "+      ",
                "+    @JsonProperty(\"tags\")",
                "+    protected Set<String> tags;",
                "+    ",
                "+    protected AllProjectsTags(Set<String> tags) {",
                "+        this.tags = tags;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(JSONWriter writer, Properties options)",
                "+            throws JSONException {",
                "+        writer.object();",
                "+        writer.key(\"tags\");",
                "+        writer.array();",
                "+        if (tags != null) {",
                "+          for (String tag : tags) {",
                "+            writer.value(tag);",
                "+          }",
                "+        }",
                "+        writer.endArray();",
                "+        writer.endObject();",
                "+    }",
                "+      ",
                "+  }",
                "@@ -47,19 +80,5 @@ public class GetAllProjectTagsCommand extends Command {",
                "     try {",
                "-      response.setCharacterEncoding(\"UTF-8\");",
                "-      response.setHeader(\"Content-Type\", \"application/json\");",
                "-",
                "-      JSONWriter writer = new JSONWriter(response.getWriter());",
                "-      // Properties options = new Properties();",
                "-",
                "-      writer.object();",
                "-      writer.key(\"tags\");",
                "-      writer.array();",
                "-      Map<String, Integer> tags = ProjectManager.singleton.getAllProjectTags();",
                "-      if (tags != null) {",
                "-        for (Map.Entry<String, Integer> entry : tags.entrySet()) {",
                "-          writer.value(entry.getKey());",
                "-        }",
                "-      }",
                "-      writer.endArray();",
                "-      writer.endObject();",
                "+      Map<String, Integer> tagMap = ProjectManager.singleton.getAllProjectTags();",
                "+      Set<String> tags = tagMap == null ? Collections.emptySet() : tagMap.keySet();",
                "+      respondJSON(response, new AllProjectsTags(tags));",
                "     } catch (JSONException e) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/workspace/GetAllProjectMetadataCommand.java",
                "main/src/com/google/refine/commands/workspace/GetAllProjectTagsCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bb0b351cefbc8ede90a0282b794944a1e9138974",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538300891,
            "hunks": 13,
            "message": "Refactoring JSON production in commands to prepare for Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/GetPreferenceCommand.java b/main/src/com/google/refine/commands/GetPreferenceCommand.java",
                "index 0628efec7..9f26daadc 100644",
                "--- a/main/src/com/google/refine/commands/GetPreferenceCommand.java",
                "+++ b/main/src/com/google/refine/commands/GetPreferenceCommand.java",
                "@@ -45,4 +45,6 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.ProjectManager;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.preference.PreferenceStore;",
                "@@ -51,18 +53,13 @@ import com.google.refine.preference.TopList;",
                " public class GetPreferenceCommand extends Command {",
                "-    @Override",
                "-    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "-            throws ServletException, IOException {",
                "-        ",
                "-        Project project = request.getParameter(\"project\") != null ? getProject(request) : null;",
                "-        PreferenceStore ps = ProjectManager.singleton.getPreferenceStore();",
                "-                ",
                "-        String prefName = request.getParameter(\"name\");",
                "-        Object pref = ps.get(prefName);",
                "+    protected static class PreferenceValue implements Jsonizable {",
                "+        @JsonProperty(\"value\")",
                "+        protected Object pref;",
                "-        try {",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            ",
                "+        protected PreferenceValue(Object o) {",
                "+            pref = o;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "             writer.object();",
                "@@ -79,6 +76,16 @@ public class GetPreferenceCommand extends Command {",
                "             writer.endObject();",
                "-        } catch (JSONException e) {",
                "-            respondException(response, e);",
                "         }",
                "     }",
                "+    ",
                "+    @Override",
                "+    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "+            throws ServletException, IOException {",
                "+        ",
                "+        PreferenceStore ps = ProjectManager.singleton.getPreferenceStore();",
                "+                ",
                "+        String prefName = request.getParameter(\"name\");",
                "+        Object pref = ps.get(prefName);",
                "+        ",
                "+        respondJSON(response, new PreferenceValue(pref));",
                "+    }",
                "diff --git a/main/src/com/google/refine/commands/history/GetOperationsCommand.java b/main/src/com/google/refine/commands/history/GetOperationsCommand.java",
                "index 32ebc2f54..f03f9aabc 100644",
                "--- a/main/src/com/google/refine/commands/history/GetOperationsCommand.java",
                "+++ b/main/src/com/google/refine/commands/history/GetOperationsCommand.java",
                "@@ -36,3 +36,5 @@ package com.google.refine.commands.history;",
                " import java.io.IOException;",
                "+import java.util.List;",
                " import java.util.Properties;",
                "+import java.util.stream.Collectors;",
                "@@ -45,4 +47,10 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.commands.Command;",
                " import com.google.refine.history.HistoryEntry;",
                "+import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "@@ -50,15 +58,47 @@ import com.google.refine.model.Project;",
                " public class GetOperationsCommand extends Command {",
                "-    @Override",
                "-    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "-            throws ServletException, IOException {",
                "+    protected static class SimpleHistoryEntry implements Jsonizable {",
                "+        protected HistoryEntry entry;",
                "+",
                "+        public SimpleHistoryEntry(HistoryEntry e) {",
                "+            entry = e;",
                "+        }",
                "-        Project project = getProject(request);",
                "+        @JsonProperty(\"description\")",
                "+        public String getDescription() {",
                "+            return entry.description;",
                "+        }",
                "-        try {",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            Properties options = new Properties();",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            ",
                "+        @JsonProperty(\"operation\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        public AbstractOperation getOperation() {",
                "+            return entry.operation;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"description\"); writer.value(entry.description);",
                "+            if (entry.operation != null) {",
                "+                writer.key(\"operation\");",
                "+                entry.operation.write(writer, options);",
                "+            }",
                "+            writer.endObject();",
                "+        }",
                "+        ",
                "+    }",
                "+    ",
                "+    protected static class HistoryEntries implements Jsonizable {",
                "+        @JsonProperty(\"entries\")",
                "+        List<SimpleHistoryEntry> entries;",
                "+        ",
                "+        protected HistoryEntries(List<HistoryEntry> entries) {",
                "+            this.entries = entries.stream()",
                "+                    .map(e -> new SimpleHistoryEntry(e))",
                "+                    .collect(Collectors.toList());",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "             writer.object();",
                "@@ -66,10 +106,4 @@ public class GetOperationsCommand extends Command {",
                "-            for (HistoryEntry entry : project.history.getLastPastEntries(-1)) {",
                "-                writer.object();",
                "-                writer.key(\"description\"); writer.value(entry.description);",
                "-                if (entry.operation != null) {",
                "-                    writer.key(\"operation\");",
                "-                    entry.operation.write(writer, options);",
                "-                }",
                "-                writer.endObject();",
                "+            for (SimpleHistoryEntry entry : entries) {",
                "+                entry.write(writer, options);",
                "             }",
                "@@ -77,6 +111,14 @@ public class GetOperationsCommand extends Command {",
                "             writer.endObject();",
                "-        } catch (JSONException e) {",
                "-            respondException(response, e);",
                "         }",
                "     }",
                "+    ",
                "+    @Override",
                "+    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "+            throws ServletException, IOException {",
                "+        ",
                "+        Project project = getProject(request);",
                "+        ",
                "+        HistoryEntries entries = new HistoryEntries(project.history.getLastPastEntries(-1));",
                "+        respondJSON(response, entries);",
                "+    }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/GetPreferenceCommand.java",
                "main/src/com/google/refine/commands/history/GetOperationsCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "36765e7e620c241f71af7aeffdcb97dd0c4e229d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543460370,
            "hunks": 13,
            "message": "Bump version to 3.2-SNAPSHOT",
            "diff": [
                "diff --git a/extensions/database/pom.xml b/extensions/database/pom.xml",
                "index e8082f846..3a89672e5 100644",
                "--- a/extensions/database/pom.xml",
                "+++ b/extensions/database/pom.xml",
                "@@ -13,3 +13,3 @@",
                "     <artifactId>extensions</artifactId>",
                "-    <version>3.1</version>",
                "+    <version>3.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/extensions/gdata/pom.xml b/extensions/gdata/pom.xml",
                "index 130a8ca9d..b299ab7b2 100644",
                "--- a/extensions/gdata/pom.xml",
                "+++ b/extensions/gdata/pom.xml",
                "@@ -13,3 +13,3 @@",
                "     <artifactId>extensions</artifactId>",
                "-    <version>3.1</version>",
                "+    <version>3.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/extensions/jython/pom.xml b/extensions/jython/pom.xml",
                "index b09ee43ef..1c71aa70a 100644",
                "--- a/extensions/jython/pom.xml",
                "+++ b/extensions/jython/pom.xml",
                "@@ -7,3 +7,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>3.1</version>",
                "+  <version>3.2-SNAPSHOT</version>",
                "@@ -15,3 +15,3 @@",
                "     <artifactId>extensions</artifactId>",
                "-    <version>3.1</version>",
                "+    <version>3.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/extensions/pc-axis/pom.xml b/extensions/pc-axis/pom.xml",
                "index 419705cc3..c55f0071c 100644",
                "--- a/extensions/pc-axis/pom.xml",
                "+++ b/extensions/pc-axis/pom.xml",
                "@@ -13,3 +13,3 @@",
                "     <artifactId>extensions</artifactId>",
                "-    <version>3.1</version>",
                "+    <version>3.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/extensions/pom.xml b/extensions/pom.xml",
                "index 2ed85c2c0..98574dd8e 100644",
                "--- a/extensions/pom.xml",
                "+++ b/extensions/pom.xml",
                "@@ -7,3 +7,3 @@",
                "   <packaging>pom</packaging>",
                "-  <version>3.1</version>",
                "+  <version>3.2-SNAPSHOT</version>",
                "@@ -16,3 +16,3 @@",
                "     <artifactId>openrefine</artifactId>",
                "-    <version>3.1</version>",
                "+    <version>3.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/extensions/wikidata/pom.xml b/extensions/wikidata/pom.xml",
                "index bb6a3d12d..644de7c52 100644",
                "--- a/extensions/wikidata/pom.xml",
                "+++ b/extensions/wikidata/pom.xml",
                "@@ -13,3 +13,3 @@",
                "     <artifactId>extensions</artifactId>",
                "-    <version>3.1</version>",
                "+    <version>3.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/main/pom.xml b/main/pom.xml",
                "index 4feb91f84..41aa9892b 100644",
                "--- a/main/pom.xml",
                "+++ b/main/pom.xml",
                "@@ -13,3 +13,3 @@",
                "     <artifactId>openrefine</artifactId>",
                "-    <version>3.1</version>",
                "+    <version>3.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/main/src/com/google/refine/RefineServlet.java b/main/src/com/google/refine/RefineServlet.java",
                "index 1009307c2..6782870b2 100644",
                "--- a/main/src/com/google/refine/RefineServlet.java",
                "+++ b/main/src/com/google/refine/RefineServlet.java",
                "@@ -66,3 +66,3 @@ import edu.mit.simile.butterfly.ButterflyModule;",
                " public class RefineServlet extends Butterfly {",
                "-    static private String ASSIGNED_VERSION = \"3.1\";",
                "+    static private String ASSIGNED_VERSION = \"3.2\";",
                "diff --git a/packaging/pom.xml b/packaging/pom.xml",
                "index b352e6d35..bf16e18ae 100644",
                "--- a/packaging/pom.xml",
                "+++ b/packaging/pom.xml",
                "@@ -11,3 +11,3 @@",
                "     <artifactId>openrefine</artifactId>",
                "-    <version>3.1</version>",
                "+    <version>3.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/pom.xml b/pom.xml",
                "index 9425dc112..2f8be8e7f 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                "   <packaging>pom</packaging>",
                "-  <version>3.1</version>",
                "+  <version>3.2-SNAPSHOT</version>",
                "diff --git a/server/pom.xml b/server/pom.xml",
                "index 67f96d68a..20461ea2f 100644",
                "--- a/server/pom.xml",
                "+++ b/server/pom.xml",
                "@@ -13,3 +13,3 @@",
                "     <artifactId>openrefine</artifactId>",
                "-    <version>3.1</version>",
                "+    <version>3.2-SNAPSHOT</version>",
                "   </parent>"
            ],
            "changed_files": [
                "extensions/database/pom.xml",
                "extensions/gdata/pom.xml",
                "extensions/jython/pom.xml",
                "extensions/pc-axis/pom.xml",
                "extensions/pom.xml",
                "extensions/wikidata/pom.xml",
                "main/pom.xml",
                "main/src/com/google/refine/RefineServlet.java",
                "packaging/pom.xml",
                "pom.xml",
                "server/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "84f3b0e7935d3697c9fe2c9dccb3884b73c039e5",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544363246,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate.",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "418b21dda2ac0bf790f15905058dadda4cddcd19",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538148241,
            "hunks": 25,
            "message": "Jackson serialization for history classes",
            "diff": [
                "diff --git a/main/src/com/google/refine/history/History.java b/main/src/com/google/refine/history/History.java",
                "index 8719eb2ee..f41ca0863 100644",
                "--- a/main/src/com/google/refine/history/History.java",
                "+++ b/main/src/com/google/refine/history/History.java",
                "@@ -51,2 +51,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -115,3 +117,5 @@ public class History implements Jsonizable {",
                "     protected long               _projectID;",
                "+    @JsonProperty(\"past\")",
                "     protected List<HistoryEntry> _pastEntries;   // done changes, can be undone",
                "+    @JsonProperty(\"future\")",
                "     protected List<HistoryEntry> _futureEntries; // undone changes, can be redone",
                "diff --git a/main/src/com/google/refine/history/HistoryEntry.java b/main/src/com/google/refine/history/HistoryEntry.java",
                "index e4e0f5961..8c56fb885 100644",
                "--- a/main/src/com/google/refine/history/HistoryEntry.java",
                "+++ b/main/src/com/google/refine/history/HistoryEntry.java",
                "@@ -46,2 +46,6 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonView;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -51,2 +55,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "+import com.google.refine.util.JsonViews;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -59,5 +64,9 @@ public class HistoryEntry implements Jsonizable {",
                "     final static Logger logger = LoggerFactory.getLogger(\"HistoryEntry\");",
                "+    @JsonProperty(\"id\")",
                "     final public long   id;",
                "+    @JsonIgnore",
                "     final public long   projectID;",
                "+    @JsonProperty(\"description\")",
                "     final public String description;",
                "+    @JsonProperty(\"time\")",
                "     final public OffsetDateTime   time;",
                "@@ -65,2 +74,3 @@ public class HistoryEntry implements Jsonizable {",
                "     // the manager (deals with IO systems or databases etc.)",
                "+    @JsonIgnore",
                "     final public HistoryEntryManager _manager;",
                "@@ -68,2 +78,4 @@ public class HistoryEntry implements Jsonizable {",
                "     // the abstract operation, if any, that results in the change",
                "+    @JsonProperty(\"operation\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "     final public AbstractOperation operation;",
                "@@ -71,2 +83,3 @@ public class HistoryEntry implements Jsonizable {",
                "     // the actual change, loaded on demand",
                "+    @JsonIgnore",
                "     private transient Change _change;",
                "@@ -79,2 +92,3 @@ public class HistoryEntry implements Jsonizable {",
                "+    @JsonIgnore",
                "     public Change getChange() {",
                "diff --git a/main/src/com/google/refine/history/HistoryProcess.java b/main/src/com/google/refine/history/HistoryProcess.java",
                "index 0004e2c86..19c8769cd 100644",
                "--- a/main/src/com/google/refine/history/HistoryProcess.java",
                "+++ b/main/src/com/google/refine/history/HistoryProcess.java",
                "@@ -40,2 +40,5 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.model.Project;",
                "@@ -69,2 +72,8 @@ public class HistoryProcess extends Process {",
                "+    @Override",
                "+    @JsonIgnore",
                "+    public long getId() {",
                "+        return super.getId();",
                "+    }",
                "+    ",
                "     @Override",
                "@@ -99,5 +108,15 @@ public class HistoryProcess extends Process {",
                "         writer.key(\"immediate\"); writer.value(true);",
                "-        writer.key(\"status\"); writer.value(_done ? \"done\" : \"pending\");",
                "+        writer.key(\"status\"); writer.value(getStatus());",
                "         writer.endObject();",
                "     }",
                "+    ",
                "+    @JsonProperty(\"status\")",
                "+    public String getStatus() {",
                "+        return _done ? \"done\" : \"pending\";",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"description\")",
                "+    public String getDescription() {",
                "+        return _description;",
                "+    }",
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index 3404b79af..8b51fcc04 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -74,2 +74,3 @@ public class ParsingUtilities {",
                "         module.addSerializer(double.class, new SerializationFilters.DoubleSerializer());",
                "+        module.addSerializer(OffsetDateTime.class, new SerializationFilters.DateSerializer());",
                "         mapper.registerModule(module);",
                "diff --git a/main/src/com/google/refine/util/SerializationFilters.java b/main/src/com/google/refine/util/SerializationFilters.java",
                "index 646892b3e..984f2ca96 100644",
                "--- a/main/src/com/google/refine/util/SerializationFilters.java",
                "+++ b/main/src/com/google/refine/util/SerializationFilters.java",
                "@@ -3,2 +3,3 @@ package com.google.refine.util;",
                " import java.io.IOException;",
                "+import java.time.OffsetDateTime;",
                "@@ -15,2 +16,6 @@ import com.google.refine.model.Recon.Judgment;",
                "+/**",
                "+ * Series of classes which configure JSON serialization at application level.",
                "+ * @author Antonin Delpeuch",
                "+ */",
                " public class SerializationFilters {",
                "@@ -39,2 +44,7 @@ public class SerializationFilters {",
                "     public static PropertyFilter noFilter = new BaseFilter();",
                "+    ",
                "+    /**",
                "+     * Filter out reconciliation candidates when rendering a matched recon",
                "+     * in view mode. (In save mode, render them all the time.)",
                "+     */",
                "     public static PropertyFilter reconCandidateFilter = new BaseFilter() {",
                "@@ -57,3 +67,6 @@ public class SerializationFilters {",
                "      };",
                "-     ",
                "+    ",
                "+    /**",
                "+     * Serialize double values as integers if they happen to round to an integer.",
                "+     */",
                "     public static class DoubleSerializer extends StdSerializer<Double> {",
                "@@ -75,2 +88,19 @@ public class SerializationFilters {",
                "     }",
                "+    ",
                "+    /**",
                "+     * Serialize dates by ISO format.",
                "+     */",
                "+    public static class DateSerializer extends StdSerializer<OffsetDateTime> {",
                "+        private static final long serialVersionUID = 93872874L;",
                "+",
                "+        public DateSerializer() {",
                "+            super(OffsetDateTime.class);",
                "+        }",
                "+",
                "+        @Override",
                "+        public void serialize(OffsetDateTime arg0, JsonGenerator gen, SerializerProvider s)",
                "+                throws IOException {",
                "+            gen.writeString(ParsingUtilities.dateToString(arg0));",
                "+        }       ",
                "+    }",
                " }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/history/HistoryEntryTests.java b/main/tests/server/src/com/google/refine/tests/history/HistoryEntryTests.java",
                "index 5d1123fbb..b7e60c907 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/history/HistoryEntryTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/history/HistoryEntryTests.java",
                "@@ -4,4 +4,2 @@ import static org.mockito.Mockito.mock;",
                "-import java.util.Properties;",
                "-",
                " import org.testng.annotations.BeforeMethod;",
                "@@ -60,6 +58,4 @@ public class HistoryEntryTests extends RefineTest {",
                "         HistoryEntry historyEntry = HistoryEntry.load(project, json);",
                "-        TestUtils.isSerializedTo(historyEntry, jsonSimple);",
                "-        Properties options = new Properties();",
                "-        options.setProperty(\"mode\", \"save\");",
                "-        TestUtils.isSerializedTo(historyEntry, json, options);",
                "+        TestUtils.isSerializedTo(historyEntry, jsonSimple, false);",
                "+        TestUtils.isSerializedTo(historyEntry, json, true);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/history/History.java",
                "main/src/com/google/refine/history/HistoryEntry.java",
                "main/src/com/google/refine/history/HistoryProcess.java",
                "main/src/com/google/refine/util/ParsingUtilities.java",
                "main/src/com/google/refine/util/SerializationFilters.java",
                "main/tests/server/src/com/google/refine/tests/history/HistoryEntryTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1939af343d36d0744f8034c98c43f5398e7d2a95",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543703430,
            "hunks": 4,
            "message": "Update to Jackson 2.9.7",
            "diff": [
                "diff --git a/extensions/database/pom.xml b/extensions/database/pom.xml",
                "index 8714f5901..b36bb7ad5 100644",
                "--- a/extensions/database/pom.xml",
                "+++ b/extensions/database/pom.xml",
                "@@ -155,3 +155,3 @@",
                "       <artifactId>jackson-core</artifactId>",
                "-      <version>2.9.1</version>",
                "+      <version>2.9.7</version>",
                "       <scope>provided</scope>",
                "@@ -161,3 +161,3 @@",
                "       <artifactId>jackson-annotations</artifactId>",
                "-      <version>2.9.1</version>",
                "+      <version>2.9.7</version>",
                "     </dependency>",
                "diff --git a/main/pom.xml b/main/pom.xml",
                "index 66af6ffd1..cd7be95e9 100644",
                "--- a/main/pom.xml",
                "+++ b/main/pom.xml",
                "@@ -281,3 +281,3 @@",
                "       <artifactId>jackson-databind</artifactId>",
                "-      <version>2.9.1</version>",
                "+      <version>2.9.7</version>",
                "     </dependency>",
                "@@ -286,3 +286,3 @@",
                "       <artifactId>jackson-annotations</artifactId>",
                "-      <version>2.9.1</version>",
                "+      <version>2.9.7</version>",
                "     </dependency>"
            ],
            "changed_files": [
                "extensions/database/pom.xml",
                "main/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ba8e406a97b14009d47c6588b0a188e83c1f32b6",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542722301,
            "hunks": 37,
            "message": "Clustering config Jackson deserialization",
            "diff": [
                "diff --git a/main/src/com/google/refine/clustering/ClustererConfig.java b/main/src/com/google/refine/clustering/ClustererConfig.java",
                "index c63346036..e5fcac842 100644",
                "--- a/main/src/com/google/refine/clustering/ClustererConfig.java",
                "+++ b/main/src/com/google/refine/clustering/ClustererConfig.java",
                "@@ -2,5 +2,8 @@ package com.google.refine.clustering;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonSubTypes;",
                "+import com.fasterxml.jackson.annotation.JsonSubTypes.Type;",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo;",
                "+import com.google.refine.clustering.binning.BinningClusterer.BinningClustererConfig;",
                "+import com.google.refine.clustering.knn.kNNClusterer.kNNClustererConfig;",
                " import com.google.refine.model.Project;",
                "@@ -12,2 +15,9 @@ import com.google.refine.model.Project;",
                "  */",
                "+@JsonTypeInfo(",
                "+        use=JsonTypeInfo.Id.NAME,",
                "+        include=JsonTypeInfo.As.PROPERTY,",
                "+        property=\"type\")",
                "+@JsonSubTypes({",
                "+    @Type(value = kNNClustererConfig.class, name = \"knn\"),",
                "+    @Type(value = BinningClustererConfig.class, name = \"binning\") })",
                " public abstract class ClustererConfig  {",
                "@@ -16,10 +26,2 @@ public abstract class ClustererConfig  {",
                "-    /**",
                "-     * Reads the configuration from a JSON payload (TODO: delete)",
                "-     * @param o",
                "-     */",
                "-    public void initializeFromJSON(JSONObject o) {",
                "-        columnName = o.getString(\"column\");",
                "-    }",
                "-    ",
                "     @JsonProperty(\"column\")",
                "@@ -29,2 +31,7 @@ public abstract class ClustererConfig  {",
                "+    @JsonProperty(\"column\")",
                "+    public void setColumnName(String name) {",
                "+    \tcolumnName = name;",
                "+    }",
                "+    ",
                "     /**",
                "diff --git a/main/src/com/google/refine/clustering/binning/BinningClusterer.java b/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "index f01c116b3..22e91fd5c 100644",
                "--- a/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "+++ b/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "@@ -46,3 +46,2 @@ import java.util.stream.Collectors;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -69,18 +68,8 @@ public class BinningClusterer extends Clusterer {",
                "-        @JsonProperty(\"function\")",
                "+        @JsonIgnore",
                "         private String _keyerName;",
                "+        @JsonIgnore",
                "         private Keyer _keyer;",
                "-        private BinningParameters _parameters;",
                "-        ",
                "-        @Override",
                "-        public void initializeFromJSON(JSONObject o) {",
                "-            super.initializeFromJSON(o);",
                "-            _keyerName = o.getString(\"function\");",
                "-            _keyer = _keyers.get(_keyerName.toLowerCase());",
                "-            if(o.has(\"params\")) {",
                "-                _parameters = BinningParameters.reconstruct(o.getJSONObject(\"params\"));",
                "-            } else {",
                "-                _parameters = null;",
                "-            }",
                "-        }",
                "+        @JsonIgnore",
                "+        private BinningParameters _parameters = null;",
                "@@ -91,2 +80,13 @@ public class BinningClusterer extends Clusterer {",
                "+        @JsonProperty(\"function\")",
                "+        public void setKeyer(String keyerName) {",
                "+        \t_keyerName = keyerName;",
                "+        \t_keyer = _keyers.get(_keyerName.toLowerCase());",
                "+        }",
                "+        ",
                "+        @JsonProperty(\"function\")",
                "+        public String getKeyerName() {",
                "+        \treturn _keyerName;",
                "+        }",
                "+        ",
                "         @JsonProperty(\"params\")",
                "@@ -96,2 +96,7 @@ public class BinningClusterer extends Clusterer {",
                "         }",
                "+        ",
                "+        @JsonProperty(\"params\")",
                "+        public void setParameters(BinningParameters params) {",
                "+        \t_parameters = params;",
                "+        }",
                "@@ -114,9 +119,3 @@ public class BinningClusterer extends Clusterer {",
                "         @JsonInclude(Include.NON_DEFAULT)",
                "-        public int ngramSize;",
                "-        ",
                "-        public static BinningParameters reconstruct(JSONObject o) {",
                "-            BinningParameters parameters = new BinningParameters();",
                "-            parameters.ngramSize = o.has(\"ngram-size\") ? o.getInt(\"ngram-size\") : 0;",
                "-            return parameters;",
                "-        }",
                "+        public int ngramSize = 0;",
                "     }",
                "diff --git a/main/src/com/google/refine/clustering/knn/kNNClusterer.java b/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "index 13ed16434..859688e9d 100644",
                "--- a/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "+++ b/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "@@ -45,3 +45,2 @@ import java.util.stream.Collectors;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -77,17 +76,8 @@ public class kNNClusterer extends Clusterer {",
                "     public static class kNNClustererConfig extends ClustererConfig {",
                "-        @JsonProperty(\"function\")",
                "+        @JsonIgnore",
                "         private String _distanceStr;",
                "+        @JsonIgnore",
                "         private Distance _distance;",
                "-        private kNNClustererConfigParameters _parameters;",
                "-",
                "-        public void initializeFromJSON(JSONObject o) {",
                "-            super.initializeFromJSON(o);",
                "-            _distanceStr = o.getString(\"function\");",
                "-            _distance = _distances.get(_distanceStr.toLowerCase());",
                "-            if(o.has(\"params\")) {",
                "-                _parameters = kNNClustererConfigParameters.reconstruct(o.getJSONObject(\"params\"));",
                "-            } else {",
                "-                _parameters = null;",
                "-            }",
                "-        }",
                "+        @JsonIgnore",
                "+        private kNNClustererConfigParameters _parameters = null;",
                "@@ -98,2 +88,13 @@ public class kNNClusterer extends Clusterer {",
                "+        @JsonProperty(\"function\")",
                "+        public void setDistance(String distanceStr) {",
                "+        \t_distanceStr = distanceStr;",
                "+        \t_distance = _distances.get(_distanceStr.toLowerCase());",
                "+        }",
                "+        ",
                "+        @JsonProperty(\"function\")",
                "+        public String getDistanceStr() {",
                "+        \treturn _distanceStr;",
                "+        }",
                "+        ",
                "         @JsonProperty(\"params\")",
                "@@ -102,2 +103,7 @@ public class kNNClusterer extends Clusterer {",
                "         }",
                "+        ",
                "+        @JsonProperty(\"params\")",
                "+        public void setParameters(kNNClustererConfigParameters params) {",
                "+        \t_parameters = params;",
                "+        }",
                "@@ -124,13 +130,2 @@ public class kNNClusterer extends Clusterer {",
                "         public int blockingNgramSize = defaultBlockingNgramSize;",
                "-        ",
                "-        public static kNNClustererConfigParameters reconstruct(JSONObject o) {",
                "-            kNNClustererConfigParameters params = new kNNClustererConfigParameters();",
                "-            if(o.has(\"radius\")) {",
                "-                params.radius = o.getDouble(\"radius\");",
                "-            }",
                "-            if(o.has(\"blocking-ngram-size\")) {",
                "-                params.blockingNgramSize = o.getInt(\"blocking-ngram-size\");",
                "-            }",
                "-            return params;",
                "-        }",
                "     }",
                "diff --git a/main/src/com/google/refine/commands/browsing/ComputeClustersCommand.java b/main/src/com/google/refine/commands/browsing/ComputeClustersCommand.java",
                "index 1c80c1863..bc86ae763 100644",
                "--- a/main/src/com/google/refine/commands/browsing/ComputeClustersCommand.java",
                "+++ b/main/src/com/google/refine/commands/browsing/ComputeClustersCommand.java",
                "@@ -41,3 +41,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -48,6 +47,5 @@ import com.google.refine.clustering.Clusterer;",
                " import com.google.refine.clustering.ClustererConfig;",
                "-import com.google.refine.clustering.binning.BinningClusterer.BinningClustererConfig;",
                "-import com.google.refine.clustering.knn.kNNClusterer.kNNClustererConfig;",
                " import com.google.refine.commands.Command;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -65,14 +63,5 @@ public class ComputeClustersCommand extends Command {",
                "             Engine engine = getEngine(request, project);",
                "-            JSONObject clusterer_conf = getJsonParameter(request,\"clusterer\");",
                "+            String clusterer_conf = request.getParameter(\"clusterer\");",
                "+            ClustererConfig clustererConfig = ParsingUtilities.mapper.readValue(clusterer_conf, ClustererConfig.class);",
                "-            String type = clusterer_conf.has(\"type\") ? clusterer_conf.getString(\"type\") : \"binning\";",
                "-            ",
                "-            ClustererConfig clustererConfig = null;",
                "-            if (\"knn\".equals(type)) {",
                "-                clustererConfig = new kNNClustererConfig();",
                "-            } else  {",
                "-                clustererConfig = new BinningClustererConfig();",
                "-            }",
                "-                ",
                "-            clustererConfig.initializeFromJSON(clusterer_conf);",
                "             Clusterer clusterer = clustererConfig.apply(project);",
                "@@ -82,3 +71,3 @@ public class ComputeClustersCommand extends Command {",
                "             respondJSON(response, clusterer);",
                "-            logger.info(\"computed clusters [{},{}] in {}ms\", new Object[] { type, clusterer_conf.getString(\"function\"), Long.toString(System.currentTimeMillis() - start) });",
                "+            logger.info(\"computed clusters [{}] in {}ms\", new Object[] { clustererConfig.getType(), Long.toString(System.currentTimeMillis() - start) });",
                "         } catch (Exception e) {",
                "diff --git a/main/tests/server/src/com/google/refine/tests/clustering/BinningClustererTests.java b/main/tests/server/src/com/google/refine/tests/clustering/BinningClustererTests.java",
                "index 340496467..4e45b9af8 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/clustering/BinningClustererTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/clustering/BinningClustererTests.java",
                "@@ -2,5 +2,8 @@ package com.google.refine.tests.clustering;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+",
                " import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                " import com.google.refine.browsing.Engine;",
                "@@ -11,2 +14,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -32,5 +36,4 @@ public class BinningClustererTests extends RefineTest {",
                "     @Test",
                "-    public void testSerializeBinningClustererConfig() {",
                "-        BinningClustererConfig config = new BinningClustererConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+    public void testSerializeBinningClustererConfig() throws JsonParseException, JsonMappingException, IOException {",
                "+        BinningClustererConfig config = ParsingUtilities.mapper.readValue(configJson, BinningClustererConfig.class);",
                "         TestUtils.isSerializedTo(config, configJson);",
                "@@ -39,5 +42,4 @@ public class BinningClustererTests extends RefineTest {",
                "     @Test",
                "-    public void testSerializeBinningClustererConfigWithNgrams() {",
                "-        BinningClustererConfig config = new BinningClustererConfig();",
                "-        config.initializeFromJSON(new JSONObject(configNgramJson));",
                "+    public void testSerializeBinningClustererConfigWithNgrams() throws JsonParseException, JsonMappingException, IOException {",
                "+        BinningClustererConfig config = ParsingUtilities.mapper.readValue(configNgramJson, BinningClustererConfig.class);",
                "         TestUtils.isSerializedTo(config, configNgramJson);",
                "@@ -46,3 +48,3 @@ public class BinningClustererTests extends RefineTest {",
                "     @Test",
                "-    public void testSerializeBinningClusterer() {",
                "+    public void testSerializeBinningClusterer() throws JsonParseException, JsonMappingException, IOException {",
                "         Project project = createCSVProject(\"column\\n\"",
                "@@ -52,4 +54,3 @@ public class BinningClustererTests extends RefineTest {",
                "                 + \"\u00c4\u0089\\n\");",
                "-        BinningClustererConfig config = new BinningClustererConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+        BinningClustererConfig config = ParsingUtilities.mapper.readValue(configJson, BinningClustererConfig.class);",
                "         BinningClusterer clusterer = config.apply(project);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/clustering/kNNClustererTests.java b/main/tests/server/src/com/google/refine/tests/clustering/kNNClustererTests.java",
                "index 6990fd5e9..67ee739b1 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/clustering/kNNClustererTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/clustering/kNNClustererTests.java",
                "@@ -2,5 +2,8 @@ package com.google.refine.tests.clustering;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+",
                " import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                " import com.google.refine.browsing.Engine;",
                "@@ -11,2 +14,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -25,5 +29,4 @@ public class kNNClustererTests extends RefineTest {",
                "     @Test",
                "-    public void serializekNNClustererConfig() {",
                "-        kNNClustererConfig config = new kNNClustererConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+    public void serializekNNClustererConfig() throws JsonParseException, JsonMappingException, IOException {",
                "+        kNNClustererConfig config = ParsingUtilities.mapper.readValue(configJson, kNNClustererConfig.class);",
                "         TestUtils.isSerializedTo(config, configJson);",
                "@@ -32,3 +35,3 @@ public class kNNClustererTests extends RefineTest {",
                "     @Test",
                "-    public void serializekNNClusterer() {",
                "+    public void serializekNNClusterer() throws JsonParseException, JsonMappingException, IOException {",
                "         Project project = createCSVProject(\"column\\n\"",
                "@@ -39,4 +42,3 @@ public class kNNClustererTests extends RefineTest {",
                "-        kNNClustererConfig config = new kNNClustererConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+        kNNClustererConfig config = ParsingUtilities.mapper.readValue(configJson, kNNClustererConfig.class);",
                "         kNNClusterer clusterer = config.apply(project);"
            ],
            "changed_files": [
                "main/src/com/google/refine/clustering/ClustererConfig.java",
                "main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "main/src/com/google/refine/commands/browsing/ComputeClustersCommand.java",
                "main/tests/server/src/com/google/refine/tests/clustering/BinningClustererTests.java",
                "main/tests/server/src/com/google/refine/tests/clustering/kNNClustererTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "539585fc5e9458108c2ae8318e355402723e8344",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1537711888,
            "hunks": 33,
            "message": "Jackson serialization for cell operations",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/Engine.java b/main/src/com/google/refine/browsing/Engine.java",
                "index c3e33120d..f0ef66770 100644",
                "--- a/main/src/com/google/refine/browsing/Engine.java",
                "+++ b/main/src/com/google/refine/browsing/Engine.java",
                "@@ -45,2 +45,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -58,4 +60,7 @@ public class Engine implements Jsonizable {",
                "     static public enum Mode {",
                "+        @JsonProperty(\"row-based\")",
                "         RowBased,",
                "+        @JsonProperty(\"record-based\")",
                "         RecordBased",
                "+       ",
                "     }",
                "diff --git a/main/src/com/google/refine/browsing/EngineConfig.java b/main/src/com/google/refine/browsing/EngineConfig.java",
                "index 0ae50313b..6a058a29f 100644",
                "--- a/main/src/com/google/refine/browsing/EngineConfig.java",
                "+++ b/main/src/com/google/refine/browsing/EngineConfig.java",
                "@@ -12,2 +12,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -32,2 +34,3 @@ public class EngineConfig implements Jsonizable {",
                "+    @JsonProperty(\"mode\")",
                "     public Mode getMode() {",
                "@@ -36,2 +39,3 @@ public class EngineConfig implements Jsonizable {",
                "+    @JsonProperty(\"facets\")",
                "     public List<FacetConfig> getFacetConfigs() {",
                "diff --git a/main/src/com/google/refine/model/AbstractOperation.java b/main/src/com/google/refine/model/AbstractOperation.java",
                "index af68364e6..f21c930d9 100644",
                "--- a/main/src/com/google/refine/model/AbstractOperation.java",
                "+++ b/main/src/com/google/refine/model/AbstractOperation.java",
                "@@ -37,4 +37,7 @@ import java.util.Properties;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                " import com.google.refine.history.HistoryEntry;",
                "+import com.google.refine.operations.OperationRegistry;",
                " import com.google.refine.process.Process;",
                "@@ -63,2 +66,12 @@ abstract public class AbstractOperation implements Jsonizable {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"op\")",
                "+    public String getOperationId() {",
                "+        return OperationRegistry.s_opClassToName.get(this.getClass());",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"description\")",
                "+    public String getJsonDescription() {",
                "+        return getBriefDescription(null);",
                "+    }",
                " }",
                "diff --git a/main/src/com/google/refine/operations/EngineDependentMassCellOperation.java b/main/src/com/google/refine/operations/EngineDependentMassCellOperation.java",
                "index d5e02e165..1ebbe8bec 100644",
                "--- a/main/src/com/google/refine/operations/EngineDependentMassCellOperation.java",
                "+++ b/main/src/com/google/refine/operations/EngineDependentMassCellOperation.java",
                "@@ -38,2 +38,4 @@ import java.util.List;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -89,2 +91,7 @@ abstract public class EngineDependentMassCellOperation extends EngineDependentOp",
                "+    @JsonProperty(\"columnName\")",
                "+    protected String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "+    ",
                "     abstract protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception;",
                "diff --git a/main/src/com/google/refine/operations/EngineDependentOperation.java b/main/src/com/google/refine/operations/EngineDependentOperation.java",
                "index 8067d160c..3cf969164 100644",
                "--- a/main/src/com/google/refine/operations/EngineDependentOperation.java",
                "+++ b/main/src/com/google/refine/operations/EngineDependentOperation.java",
                "@@ -35,2 +35,4 @@ package com.google.refine.operations;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -54,2 +56,3 @@ abstract public class EngineDependentOperation extends AbstractOperation {",
                "+    @JsonProperty(\"engineConfig\")",
                "     protected EngineConfig getEngineConfig() {",
                "diff --git a/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java b/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "index 7ca3380cf..37ca3a7af 100644",
                "--- a/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "@@ -45,2 +45,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.expr.ExpressionUtils;",
                "@@ -94,2 +96,17 @@ public class KeyValueColumnizeOperation extends AbstractOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"keyColumnName\")",
                "+    public String getKeyColumnName() {",
                "+        return _keyColumnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"valueColumnName\")",
                "+    public String getValueColumnName() {",
                "+        return _valueColumnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"noteColumnName\")",
                "+    public String getNoteColumnName() {",
                "+        return _noteColumnName;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/cell/MassEditOperation.java b/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "index b6c21e396..3a288b2fe 100644",
                "--- a/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "@@ -47,2 +47,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -69,5 +71,9 @@ public class MassEditOperation extends EngineDependentMassCellOperation {",
                "     static public class Edit implements Jsonizable {",
                "+        @JsonProperty(\"from\")",
                "         final public List<String>     from;",
                "+        @JsonProperty(\"fromBlank\")",
                "         final public boolean          fromBlank;",
                "+        @JsonProperty(\"fromError\")",
                "         final public boolean          fromError;",
                "+        @JsonProperty(\"to\")",
                "         final public Serializable     to;",
                "@@ -172,2 +178,12 @@ public class MassEditOperation extends EngineDependentMassCellOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"expression\")",
                "+    public String getExpression() {",
                "+        return _expression;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"edits\")",
                "+    public List<Edit> getEdits() {",
                "+        return _edits;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java b/main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java",
                "index 8a7376894..ba1b37a18 100644",
                "--- a/main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java",
                "@@ -43,2 +43,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.expr.ExpressionUtils;",
                "@@ -89,2 +91,17 @@ public class MultiValuedCellJoinOperation extends AbstractOperation {",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"keyColumnName\")",
                "+    public String getKeyColumnName() {",
                "+        return _keyColumnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"separator\")",
                "+    public String getSeparator() {",
                "+        return _separator;",
                "+    }",
                "+    ",
                "     @Override",
                "diff --git a/main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java b/main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java",
                "index 83d2fdbca..d9537f941 100644",
                "--- a/main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java",
                "@@ -45,2 +45,6 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.history.HistoryEntry;",
                "@@ -60,3 +64,3 @@ public class MultiValuedCellSplitOperation extends AbstractOperation {",
                "     final protected String  _separator;",
                "-    final protected boolean _regex;",
                "+    final protected Boolean _regex;",
                "@@ -74,3 +78,3 @@ public class MultiValuedCellSplitOperation extends AbstractOperation {",
                "             );",
                "-        } else {",
                "+        } else { // mode == \"lengths\"",
                "             return new MultiValuedCellSplitOperation(",
                "@@ -108,3 +112,3 @@ public class MultiValuedCellSplitOperation extends AbstractOperation {",
                "         _separator = null;",
                "-        _regex = false;",
                "+        _regex = null;",
                "@@ -112,2 +116,35 @@ public class MultiValuedCellSplitOperation extends AbstractOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"keyColumnName\")",
                "+    public String getKeyColumnName() {",
                "+        return _keyColumnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"mode\")",
                "+    public String getMode() {",
                "+        return _mode;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"separator\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getSeparator() {",
                "+        return _separator;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"regex\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Boolean getRegex() {",
                "+        return _regex;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"fieldLengths\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public int[] getFieldLengths() {",
                "+        return _fieldLengths;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java b/main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java",
                "index 0782c70b0..bb145be4a 100644",
                "--- a/main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java",
                "@@ -43,2 +43,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.history.HistoryEntry;",
                "@@ -82,2 +84,12 @@ public class TransposeRowsIntoColumnsOperation extends AbstractOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"rowCount\")",
                "+    public int getRowCount() {",
                "+        return _rowCount;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "index 2db201031..81788b9ac 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "@@ -74,3 +74,3 @@ public class SplitMultiValuedCellsTests extends RefineTest {",
                "     @Test",
                "-    public void serializeMultiValuedCellSplitOperation() throws JSONException, Exception {",
                "+    public void serializeMultiValuedCellSplitOperationWithSeparator() throws JSONException, Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/multivalued-cell-split\\\",\"",
                "@@ -84,2 +84,13 @@ public class SplitMultiValuedCellsTests extends RefineTest {",
                "     }",
                "+    ",
                "+    @Test",
                "+    public void serializeMultiValuedCellSplitOperationWithLengths() throws JSONException, Exception {",
                "+        String json = \"{\\\"op\\\":\\\"core/multivalued-cell-split\\\",\"",
                "+                + \"\\\"description\\\":\\\"Split multi-valued cells in column Value\\\",\"",
                "+                + \"\\\"columnName\\\":\\\"Value\\\",\"",
                "+                + \"\\\"keyColumnName\\\":\\\"Key\\\",\"",
                "+                + \"\\\"mode\\\":\\\"lengths\\\",\"",
                "+                + \"\\\"fieldLengths\\\":[1,1]}\";",
                "+        TestUtils.isSerializedTo(MultiValuedCellSplitOperation.reconstruct(project, new JSONObject(json)), json);",
                "+    }"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/Engine.java",
                "main/src/com/google/refine/browsing/EngineConfig.java",
                "main/src/com/google/refine/model/AbstractOperation.java",
                "main/src/com/google/refine/operations/EngineDependentMassCellOperation.java",
                "main/src/com/google/refine/operations/EngineDependentOperation.java",
                "main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java",
                "main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java",
                "main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "242a3abb7d7c31d85aa34fbe860e55cff707cc3e",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540202084,
            "hunks": 7,
            "message": "Jackson deserialization for RowRemovalOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/row/RowRemovalOperation.java b/main/src/com/google/refine/operations/row/RowRemovalOperation.java",
                "index 3445fadfe..ba2dd823f 100644",
                "--- a/main/src/com/google/refine/operations/row/RowRemovalOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowRemovalOperation.java",
                "@@ -35,3 +35,4 @@ package com.google.refine.operations.row;",
                "- import java.util.ArrayList;",
                "+ import java.io.IOException;",
                "+import java.util.ArrayList;",
                " import java.util.List;",
                "@@ -40,2 +41,5 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -50,13 +54,13 @@ import com.google.refine.model.changes.RowRemovalChange;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                " public class RowRemovalOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        ",
                "-        return new RowRemovalOperation(",
                "-            EngineConfig.reconstruct(engineConfig)",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), RowRemovalOperation.class);",
                "     }",
                "-    public RowRemovalOperation(EngineConfig engineConfig) {",
                "+    @JsonCreator",
                "+    public RowRemovalOperation(",
                "+            @JsonProperty(\"engineConfig\")",
                "+            EngineConfig engineConfig) {",
                "         super(engineConfig);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "index 375e2aca9..4be80efd3 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "@@ -4,2 +4,4 @@ import static org.mockito.Mockito.mock;",
                "+import java.io.IOException;",
                "+",
                " import org.json.JSONException;",
                "@@ -22,3 +24,3 @@ public class RowRemovalOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeRowRemovalOperation() throws JSONException, Exception {",
                "+    public void serializeRowRemovalOperation() throws JSONException, IOException {",
                "         Project project = mock(Project.class);"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/row/RowRemovalOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d8bc841daed5f1d2d7425abeb216608eec9281af",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540148233,
            "hunks": 9,
            "message": "Jackson deserialization for RangeFacetConfig",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/facets/RangeFacet.java b/main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "index ce0c68161..0915c4f2b 100644",
                "--- a/main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "@@ -37,2 +37,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -94,2 +95,34 @@ public class RangeFacet implements Facet {",
                "+        @JsonCreator",
                "+        public RangeFacetConfig(",
                "+                @JsonProperty(\"name\")",
                "+                String name,",
                "+                @JsonProperty(\"expression\")",
                "+                String expression,",
                "+                @JsonProperty(\"columnName\")",
                "+                String columnName,",
                "+                @JsonProperty(FROM)",
                "+                Double from,",
                "+                @JsonProperty(TO)",
                "+                Double to,",
                "+                @JsonProperty(\"selectNumeric\")",
                "+                Boolean selectNumeric,",
                "+                @JsonProperty(\"selectNonNumeric\")",
                "+                Boolean selectNonNumeric,",
                "+                @JsonProperty(\"selectBlank\")",
                "+                Boolean selectBlank,",
                "+                @JsonProperty(\"selectError\")",
                "+                Boolean selectError) {",
                "+            _name = name;",
                "+            _expression = expression;",
                "+            _columnName = columnName;",
                "+            _from = from == null ? 0 : from;",
                "+            _to = to == null ? 0 : to;",
                "+            _selectNumeric = selectNumeric == null ? true : selectNumeric;",
                "+            _selectNonNumeric = selectNonNumeric == null ? true : selectNonNumeric;",
                "+            _selectBlank = selectBlank == null ? true : selectBlank;",
                "+            _selectError = selectError == null ? true : selectError;",
                "+            _selected = !_selectNumeric || !_selectNonNumeric || !_selectBlank || !_selectError || from != null || to != null;",
                "+        }",
                "+        ",
                "         @Override",
                "@@ -126,3 +159,3 @@ public class RangeFacet implements Facet {",
                "     }",
                "-    RangeFacetConfig _config = new RangeFacetConfig();",
                "+    RangeFacetConfig _config = null;",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/RangeFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/RangeFacetTests.java",
                "index 6ad39158d..21374439d 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/RangeFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/RangeFacetTests.java",
                "@@ -2,5 +2,9 @@ package com.google.refine.tests.browsing.facets;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+",
                " import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -12,2 +16,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -48,5 +53,4 @@ public class RangeFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeRangeFacetConfig() {",
                "-        RangeFacetConfig config = new RangeFacetConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+    public void serializeRangeFacetConfig() throws JsonParseException, JsonMappingException, IOException {",
                "+        RangeFacetConfig config = ParsingUtilities.mapper.readValue(configJson, RangeFacetConfig.class);",
                "         TestUtils.isSerializedTo(config, configJson);",
                "@@ -55,3 +59,3 @@ public class RangeFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeRangeFacet() {",
                "+    public void serializeRangeFacet() throws JsonParseException, JsonMappingException, IOException {",
                "         Project project = createCSVProject(\"my column\\n\"",
                "@@ -65,4 +69,3 @@ public class RangeFacetTests extends RefineTest {",
                "         Engine engine = new Engine(project);",
                "-        RangeFacetConfig config = new RangeFacetConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+        RangeFacetConfig config = ParsingUtilities.mapper.readValue(configJson, RangeFacetConfig.class);",
                "         RangeFacet facet = config.apply(project);"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/RangeFacetTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d1ed842f02148fef5156830ac425420c94f92813",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544301061,
            "hunks": 8,
            "message": "support both jdk 8 and 9",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 059588c5d..418c3707a 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -4,2 +4,4 @@ jdk:",
                "   - openjdk8",
                "+  - oraclejdk9",
                "+  - openjdk9",
                "diff --git a/main/pom.xml b/main/pom.xml",
                "index cd7be95e9..bea92fffa 100644",
                "--- a/main/pom.xml",
                "+++ b/main/pom.xml",
                "@@ -477,2 +477,7 @@",
                "     </dependency>",
                "+    <dependency>",
                "+      <groupId>javax.xml.bind</groupId>",
                "+      <artifactId>jaxb-api</artifactId>",
                "+      <version>2.3.0</version>",
                "+    </dependency>",
                "   </dependencies>",
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/functions/date/DatePartTests.java b/main/tests/server/src/com/google/refine/tests/expr/functions/date/DatePartTests.java",
                "index 98621d841..2973efe30 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/expr/functions/date/DatePartTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/functions/date/DatePartTests.java",
                "@@ -4,3 +4,2 @@ import java.time.OffsetDateTime;",
                " import java.time.format.DateTimeFormatter;",
                "-import java.time.format.DateTimeFormatterBuilder;",
                " import java.util.Calendar;",
                "@@ -60,8 +59,3 @@ public class DatePartTests extends RefineTest {",
                "-    private DateTimeFormatter formatter = new DateTimeFormatterBuilder()",
                "-            .append(DateTimeFormatter.BASIC_ISO_DATE).appendLiteral('-')",
                "-            .appendPattern(\"HH:mm:ss\")",
                "-            .appendPattern(\"[.SSSSSSSSS][.SSSSSS][.SSS]\")       // optional nanos, with 9, 6 or 3 digits",
                "-            .appendOffset(\"+HH:mm\", \"Z\")",
                "-            .toFormatter();",
                "+    private  DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyyMMdd-HH:mm:ss.SSSSSSSSSX\");",
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/functions/date/IncTests.java b/main/tests/server/src/com/google/refine/tests/expr/functions/date/IncTests.java",
                "index 5d746094d..bc03255ba 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/expr/functions/date/IncTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/functions/date/IncTests.java",
                "@@ -4,3 +4,2 @@ import java.time.OffsetDateTime;",
                " import java.time.format.DateTimeFormatter;",
                "-import java.time.format.DateTimeFormatterBuilder;",
                " import java.time.temporal.ChronoUnit;",
                "@@ -25,8 +24,3 @@ public class IncTests extends RefineTest {",
                "     private static Properties bindings;",
                "-    private DateTimeFormatter formatter = new DateTimeFormatterBuilder()",
                "-            .append(DateTimeFormatter.BASIC_ISO_DATE).appendLiteral('-')",
                "-            .appendPattern(\"HH:mm:ss\")",
                "-            .appendPattern(\"[.SSSSSSSSS][.SSSSSS][.SSS]\")       // optional nanos, with 9, 6 or 3 digits",
                "-            .appendOffset(\"+HH:mm\", \"Z\")",
                "-            .toFormatter();",
                "+    private  DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyyMMdd-HH:mm:ss.SSSSSSSSSX\");",
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/functions/date/NowTests.java b/main/tests/server/src/com/google/refine/tests/expr/functions/date/NowTests.java",
                "index 733d1534b..23d7322b0 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/expr/functions/date/NowTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/functions/date/NowTests.java",
                "@@ -4,3 +4,2 @@ import java.time.OffsetDateTime;",
                " import java.time.format.DateTimeFormatter;",
                "-import java.time.format.DateTimeFormatterBuilder;",
                " import java.util.Properties;",
                "@@ -23,8 +22,3 @@ public class NowTests extends RefineTest {",
                "     private static Properties bindings;",
                "-    private DateTimeFormatter formatter = new DateTimeFormatterBuilder()",
                "-            .append(DateTimeFormatter.BASIC_ISO_DATE).appendLiteral('-')",
                "-            .appendPattern(\"HH:mm:ss\")",
                "-            .appendPattern(\"[.SSSSSSSSS][.SSSSSS][.SSS]\")       // optional nanos, with 9, 6 or 3 digits",
                "-            .appendOffset(\"+HH:mm\", \"Z\")",
                "-            .toFormatter();",
                "+    private  DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyyMMdd-HH:mm:ss.SSSSSSSSSX\");"
            ],
            "changed_files": [
                ".travis.yml",
                "main/pom.xml",
                "main/tests/server/src/com/google/refine/tests/expr/functions/date/DatePartTests.java",
                "main/tests/server/src/com/google/refine/tests/expr/functions/date/IncTests.java",
                "main/tests/server/src/com/google/refine/tests/expr/functions/date/NowTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "50ee6ecc6122c7767b8f9a58fd09f3a4a1e29dcc",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540210418,
            "hunks": 8,
            "message": "Jackson deserialization for KeyValueColumnizeOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java b/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "index c4d29535d..cfb9398f5 100644",
                "--- a/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations.cell;",
                "+import java.io.IOException;",
                " import java.util.ArrayList;",
                "@@ -42,2 +43,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -52,3 +54,3 @@ import com.google.refine.model.Row;",
                " import com.google.refine.model.changes.MassRowColumnChange;",
                "-import com.google.refine.util.JSONUtilities;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -59,13 +61,13 @@ public class KeyValueColumnizeOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return new KeyValueColumnizeOperation(",
                "-            obj.getString(\"keyColumnName\"),",
                "-            obj.getString(\"valueColumnName\"),",
                "-            JSONUtilities.getString(obj, \"noteColumnName\", null)",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), KeyValueColumnizeOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public KeyValueColumnizeOperation(",
                "+        @JsonProperty(\"keyColumnName\")",
                "         String keyColumnName,",
                "+        @JsonProperty(\"valueColumnName\")",
                "         String valueColumnName,",
                "+        @JsonProperty(\"noteColumnName\")",
                "         String noteColumnName"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8853e72ab9ad6b62973801c17ea212e6399e84be",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542914183,
            "hunks": 10,
            "message": "Migrate database extension to newer Jackson",
            "diff": [
                "diff --git a/extensions/database/pom.xml b/extensions/database/pom.xml",
                "index 3a89672e5..8714f5901 100644",
                "--- a/extensions/database/pom.xml",
                "+++ b/extensions/database/pom.xml",
                "@@ -155,3 +155,3 @@",
                "       <artifactId>jackson-core</artifactId>",
                "-      <version>2.1.3</version>",
                "+      <version>2.9.1</version>",
                "       <scope>provided</scope>",
                "@@ -159,10 +159,5 @@",
                "     <dependency>",
                "-      <groupId>org.codehaus.jackson</groupId>",
                "-      <artifactId>jackson-core-asl</artifactId>",
                "-      <version>1.9.13</version>",
                "-    </dependency>",
                "-    <dependency>",
                "-      <groupId>org.codehaus.jackson</groupId>",
                "-      <artifactId>jackson-mapper-asl</artifactId>",
                "-      <version>1.9.13</version>",
                "+      <groupId>com.fasterxml.jackson.core</groupId>",
                "+      <artifactId>jackson-annotations</artifactId>",
                "+      <version>2.9.1</version>",
                "     </dependency>",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/DatabaseUtils.java b/extensions/database/src/com/google/refine/extension/database/DatabaseUtils.java",
                "index db6960581..0cb37354b 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/DatabaseUtils.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/DatabaseUtils.java",
                "@@ -36,6 +36,2 @@ import java.util.ListIterator;",
                "-import org.codehaus.jackson.JsonGenerationException;",
                "-import org.codehaus.jackson.JsonParseException;",
                "-import org.codehaus.jackson.map.JsonMappingException;",
                "-import org.codehaus.jackson.map.ObjectMapper;",
                " import org.slf4j.Logger;",
                "@@ -43,2 +39,6 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerationException;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                " import com.google.refine.ProjectManager;",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java",
                "index 0ba564b65..19f06d86a 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java",
                "@@ -38,3 +38,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.apache.http.HttpStatus;",
                "-import org.codehaus.jackson.map.ObjectMapper;",
                " import org.slf4j.Logger;",
                "@@ -43,3 +42,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                " //import com.google.refine.ProjectManager;",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java",
                "index 888536dac..17d70d954 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java",
                "@@ -38,3 +38,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.apache.http.HttpStatus;",
                "-import org.codehaus.jackson.map.ObjectMapper;",
                " import org.slf4j.Logger;",
                "@@ -43,3 +42,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                " //import com.google.refine.ProjectManager;",
                "diff --git a/extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java b/extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java",
                "index 90e42ece4..5ce53961d 100644",
                "--- a/extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java",
                "+++ b/extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java",
                "@@ -38,3 +38,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.apache.http.HttpStatus;",
                "-import org.codehaus.jackson.map.ObjectMapper;",
                " import org.slf4j.Logger;",
                "@@ -43,3 +42,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                " //import com.google.refine.ProjectManager;"
            ],
            "changed_files": [
                "extensions/database/pom.xml",
                "extensions/database/src/com/google/refine/extension/database/DatabaseUtils.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/ConnectCommand.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/ExecuteQueryCommand.java",
                "extensions/database/src/com/google/refine/extension/database/cmd/TestQueryCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fd69e4b980b4d0f79ec678110967c43f01ed0046",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538405528,
            "hunks": 8,
            "message": "Serialization tests for expression commands",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java b/main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java",
                "index 950e7eab9..1c1ef7bc4 100644",
                "--- a/main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java",
                "+++ b/main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java",
                "@@ -49,3 +49,2 @@ import com.google.refine.ProjectManager;",
                " import com.google.refine.commands.Command;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.preference.TopList;",
                "@@ -63,4 +62,2 @@ public class GetExpressionHistoryCommand extends Command {",
                "         try {",
                "-            Project project = getProject(request);",
                "-            ",
                "             List<String> localExpressions = toExpressionList(ProjectManager.singleton.getPreferenceStore().get(\"scripting.expressions\"));",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/expr/ExpressionCommandTestBase.java b/main/tests/server/src/com/google/refine/tests/commands/expr/ExpressionCommandTestBase.java",
                "new file mode 100644",
                "index 000000000..f2ffb2244",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/expr/ExpressionCommandTestBase.java",
                "@@ -0,0 +1,70 @@",
                "+package com.google.refine.tests.commands.expr;",
                "+",
                "+import static org.mockito.Mockito.mock;",
                "+import static org.mockito.Mockito.when;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.io.StringWriter;",
                "+",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+",
                "+import org.apache.commons.io.FileUtils;",
                "+import org.testng.annotations.BeforeMethod;",
                "+",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                "+",
                "+import com.google.refine.commands.Command;",
                "+import com.google.refine.io.FileProjectManager;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class ExpressionCommandTestBase {",
                "+    protected HttpServletRequest request = null;",
                "+    protected HttpServletResponse response = null;",
                "+    protected Command command = null;",
                "+    protected StringWriter writer = null;",
                "+    ",
                "+    @BeforeMethod",
                "+    public void setUpRequestResponse() {",
                "+        request = mock(HttpServletRequest.class);",
                "+        response = mock(HttpServletResponse.class);",
                "+        writer = new StringWriter();",
                "+        try {",
                "+            when(response.getWriter()).thenReturn(new PrintWriter(writer));",
                "+        } catch (IOException e) {",
                "+            e.printStackTrace();",
                "+        }",
                "+    }",
                "+    ",
                "+    public void initWorkspace(String expressionsJson, String starredExpressionsJson) {",
                "+        String starred = starredExpressionsJson == null ? \"{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":2147483647,\" +",
                "+                \"\\\"list\\\":[]}\" : starredExpressionsJson;",
                "+        String expressions = expressionsJson == null ? \"{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":100,\\\"list\\\":[]}\" : expressionsJson;",
                "+        try {",
                "+            File workspaceDir = TestUtils.createTempDirectory(\"openrefine-test-workspace-dir\");",
                "+            File jsonPath = new File(workspaceDir, \"workspace.json\");",
                "+            FileUtils.writeStringToFile(jsonPath, \"{\\\"projectIDs\\\":[]\\n\" + ",
                "+                    \",\\\"preferences\\\":{\\\"entries\\\":{\\\"scripting.starred-expressions\\\":\" + starred +",
                "+                    \",\\\"scripting.expressions\\\":\"+expressions+\"}}}\");",
                "+            FileProjectManager.initialize(workspaceDir);",
                "+        } catch (IOException e) {",
                "+            e.printStackTrace();",
                "+        }",
                "+    }",
                "+    ",
                "+    public void assertResponseJsonIs(String expectedJson)  {",
                "+        String actualJson = writer.toString();",
                "+        if(!TestUtils.equalAsJson(expectedJson, actualJson)) {",
                "+            try {",
                "+                TestUtils.jsonDiff(expectedJson, actualJson);",
                "+            } catch (JsonParseException | JsonMappingException e) {",
                "+                e.printStackTrace();",
                "+            }",
                "+        }",
                "+        TestUtils.assertEqualAsJson(expectedJson, actualJson);",
                "+    }",
                "+    ",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/expr/GetExpressionHistoryCommandTests.java b/main/tests/server/src/com/google/refine/tests/commands/expr/GetExpressionHistoryCommandTests.java",
                "new file mode 100644",
                "index 000000000..a563d3dd8",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/expr/GetExpressionHistoryCommandTests.java",
                "@@ -0,0 +1,55 @@",
                "+package com.google.refine.tests.commands.expr;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import javax.servlet.ServletException;",
                "+",
                "+import org.testng.annotations.BeforeMethod;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.commands.expr.GetExpressionHistoryCommand;",
                "+",
                "+public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase {",
                "+    ",
                "+    @BeforeMethod",
                "+    public void setUp() {",
                "+        command = new GetExpressionHistoryCommand();",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testJsonResponse() throws ServletException, IOException {",
                "+",
                "+        initWorkspace(\"{\\n\" + ",
                "+                \"        \\\"class\\\": \\\"com.google.refine.preference.TopList\\\",\\n\" + ",
                "+                \"        \\\"top\\\": 100,\\n\" + ",
                "+                \"        \\\"list\\\": [\\n\" + ",
                "+                \"          \\\"grel:facetCount(value, 'value', 'Column 1')\\\",\\n\" + ",
                "+                \"          \\\"grel:facetCount(value, 'value', 'Column 3')\\\",\\n\" + ",
                "+                \"          \\\"grel:cell.recon.match.id\\\"\" +",
                "+                \"]}\", \"{\\n\" + ",
                "+                        \"        \\\"class\\\": \\\"com.google.refine.preference.TopList\\\",\\n\" + ",
                "+                        \"        \\\"top\\\": 100,\\n\" + ",
                "+                        \"        \\\"list\\\": [\\n\" + ",
                "+                        \"          \\\"grel:cell.recon.match.id\\\"\\n\" + ",
                "+                        \"]}\");",
                "+        ",
                "+        String json = \"{\\n\" + ",
                "+                \"       \\\"expressions\\\" : [ {\\n\" + ",
                "+                \"         \\\"code\\\" : \\\"grel:facetCount(value, 'value', 'Column 1')\\\",\\n\" + ",
                "+                \"         \\\"global\\\" : false,\\n\" + ",
                "+                \"         \\\"starred\\\" : false\\n\" + ",
                "+                \"       }, {\\n\" + ",
                "+                \"         \\\"code\\\" : \\\"grel:facetCount(value, 'value', 'Column 3')\\\",\\n\" + ",
                "+                \"         \\\"global\\\" : false,\\n\" + ",
                "+                \"         \\\"starred\\\" : false\\n\" + ",
                "+                \"       }, {\\n\" + ",
                "+                \"         \\\"code\\\" : \\\"grel:cell.recon.match.id\\\",\\n\" + ",
                "+                \"         \\\"global\\\" : false,\\n\" + ",
                "+                \"         \\\"starred\\\" : true\\n\" + ",
                "+                \"       } ]\\n\" + ",
                "+                \"     }\";",
                "+        command.doGet(request, response);",
                "+        assertResponseJsonIs(json);",
                "+    }",
                "+",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/expr/GetExpressionLanguageInfoCommandTests.java b/main/tests/server/src/com/google/refine/tests/commands/expr/GetExpressionLanguageInfoCommandTests.java",
                "new file mode 100644",
                "index 000000000..b80159be2",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/expr/GetExpressionLanguageInfoCommandTests.java",
                "@@ -0,0 +1,37 @@",
                "+package com.google.refine.tests.commands.expr;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import javax.servlet.ServletException;",
                "+",
                "+import org.testng.annotations.BeforeMethod;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+",
                "+import com.google.refine.commands.expr.GetExpressionLanguageInfoCommand;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "+",
                "+public class GetExpressionLanguageInfoCommandTests extends ExpressionCommandTestBase {",
                "+",
                "+    @BeforeMethod",
                "+    public void setUp() {",
                "+        command = new GetExpressionLanguageInfoCommand();",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testJsonResponse() throws ServletException, IOException {",
                "+",
                "+        initWorkspace(null, null);",
                "+        ",
                "+        command.doGet(request, response);",
                "+        String jsonResponse = writer.toString();",
                "+        JsonNode result = ParsingUtilities.mapper.readValue(jsonResponse, JsonNode.class);",
                "+        TestUtils.assertEqualAsJson(\"{\\n\" + ",
                "+                \"           \\\"description\\\" : \\\"Evaluates expression a to an array. Then for each array element, binds its value to variable name v, evaluates expression test which should return a boolean. If the boolean is true, pushes v onto the result array.\\\",\\n\" + ",
                "+                \"           \\\"params\\\" : \\\"expression a, variable v, expression test\\\",\\n\" + ",
                "+                \"           \\\"returns\\\" : \\\"array\\\"\\n\" + ",
                "+                \"         }\", result.get(\"controls\").get(\"filter\").toString());",
                "+    }",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/expr/GetStarredExpressionsCommandTests.java b/main/tests/server/src/com/google/refine/tests/commands/expr/GetStarredExpressionsCommandTests.java",
                "new file mode 100644",
                "index 000000000..f341bdaf8",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/expr/GetStarredExpressionsCommandTests.java",
                "@@ -0,0 +1,44 @@",
                "+package com.google.refine.tests.commands.expr;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import javax.servlet.ServletException;",
                "+",
                "+import org.testng.annotations.BeforeMethod;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.commands.expr.GetStarredExpressionsCommand;",
                "+",
                "+public class GetStarredExpressionsCommandTests extends ExpressionCommandTestBase {",
                "+",
                "+    @BeforeMethod",
                "+    public void setUp() {",
                "+        command = new GetStarredExpressionsCommand();",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testJsonResponse() throws ServletException, IOException {",
                "+",
                "+        initWorkspace(\"{\\n\" + ",
                "+                \"        \\\"class\\\": \\\"com.google.refine.preference.TopList\\\",\\n\" + ",
                "+                \"        \\\"top\\\": 100,\\n\" + ",
                "+                \"        \\\"list\\\": [\\n\" + ",
                "+                \"          \\\"grel:facetCount(value, 'value', 'Column 1')\\\",\\n\" + ",
                "+                \"          \\\"grel:facetCount(value, 'value', 'Column 3')\\\",\\n\" + ",
                "+                \"          \\\"grel:cell.recon.match.id\\\"\" +",
                "+                \"]}\", \"{\\n\" + ",
                "+                        \"        \\\"class\\\": \\\"com.google.refine.preference.TopList\\\",\\n\" + ",
                "+                        \"        \\\"top\\\": 100,\\n\" + ",
                "+                        \"        \\\"list\\\": [\\n\" + ",
                "+                        \"          \\\"grel:cell.recon.match.id\\\"\\n\" + ",
                "+                        \"]}\");",
                "+        ",
                "+        String json = \"{\\n\" + ",
                "+                \"       \\\"expressions\\\" : [ {\\n\" + ",
                "+                \"         \\\"code\\\" : \\\"grel:cell.recon.match.id\\\"\\n\" + ",
                "+                \"       } ]\\n\" + ",
                "+                \"     }\";",
                "+        command.doGet(request, response);",
                "+        assertResponseJsonIs(json);",
                "+    }",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/expr/PreviewExpressionCommandTests.java b/main/tests/server/src/com/google/refine/tests/commands/expr/PreviewExpressionCommandTests.java",
                "new file mode 100644",
                "index 000000000..268107b51",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/expr/PreviewExpressionCommandTests.java",
                "@@ -0,0 +1,76 @@",
                "+package com.google.refine.tests.commands.expr;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.io.StringWriter;",
                "+",
                "+import static org.mockito.Mockito.mock;",
                "+import static org.mockito.Mockito.when;",
                "+",
                "+import javax.servlet.ServletException;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+",
                "+import org.testng.annotations.BeforeMethod;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.commands.Command;",
                "+import com.google.refine.commands.expr.PreviewExpressionCommand;",
                "+import com.google.refine.model.Project;",
                "+import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class PreviewExpressionCommandTests extends RefineTest {",
                "+    protected Project project = null;",
                "+    protected HttpServletRequest request = null;",
                "+    protected HttpServletResponse response = null;",
                "+    protected Command command = null;",
                "+    protected StringWriter writer = null;",
                "+    ",
                "+    @BeforeMethod",
                "+    public void setUpRequestResponse() {",
                "+        request = mock(HttpServletRequest.class);",
                "+        response = mock(HttpServletResponse.class);",
                "+        writer = new StringWriter();",
                "+        try {",
                "+            when(response.getWriter()).thenReturn(new PrintWriter(writer));",
                "+        } catch (IOException e) {",
                "+            e.printStackTrace();",
                "+        }",
                "+        command = new PreviewExpressionCommand();",
                "+        project = createCSVProject(\"a,b\\nc,d\\ne,f\\ng,h\");",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testJsonResponse() throws ServletException, IOException {",
                "+",
                "+        when(request.getParameter(\"project\")).thenReturn(Long.toString(project.id));",
                "+        when(request.getParameter(\"cellIndex\")).thenReturn(\"1\");",
                "+        when(request.getParameter(\"expression\")).thenReturn(\"grel:value + \\\"_u\\\"\");",
                "+        when(request.getParameter(\"rowIndices\")).thenReturn(\"[0,2]\");",
                "+",
                "+        String json = \"{\\n\" + ",
                "+                \"       \\\"code\\\" : \\\"ok\\\",\\n\" + ",
                "+                \"       \\\"results\\\" : [ \\\"d_u\\\", \\\"h_u\\\" ]\\n\" + ",
                "+                \"     }\";",
                "+        command.doPost(request, response);",
                "+        TestUtils.assertEqualAsJson(json, writer.toString());",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testParseError() throws ServletException, IOException {",
                "+",
                "+        when(request.getParameter(\"project\")).thenReturn(Long.toString(project.id));",
                "+        when(request.getParameter(\"cellIndex\")).thenReturn(\"1\");",
                "+        when(request.getParameter(\"expression\")).thenReturn(\"grel:value +\");",
                "+        when(request.getParameter(\"rowIndices\")).thenReturn(\"[0,2]\");",
                "+",
                "+        String json = \"{\\n\" + ",
                "+                \"       \\\"code\\\" : \\\"error\\\",\\n\" + ",
                "+                \"       \\\"message\\\" : \\\"Parsing error at offset 7: Expecting something more at end of expression\\\",\\n\" + ",
                "+                \"       \\\"type\\\" : \\\"parser\\\"\\n\" + ",
                "+                \"     }\";",
                "+        command.doPost(request, response);",
                "+        TestUtils.assertEqualAsJson(json, writer.toString());",
                "+    }",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/expr/ToggleStarredExpressionCommandTests.java b/main/tests/server/src/com/google/refine/tests/commands/expr/ToggleStarredExpressionCommandTests.java",
                "new file mode 100644",
                "index 000000000..019fa43ba",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/expr/ToggleStarredExpressionCommandTests.java",
                "@@ -0,0 +1,49 @@",
                "+package com.google.refine.tests.commands.expr;",
                "+",
                "+import java.io.IOException;",
                "+import static org.mockito.Mockito.when;",
                "+",
                "+import javax.servlet.ServletException;",
                "+",
                "+import org.testng.annotations.BeforeMethod;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.commands.expr.ToggleStarredExpressionCommand;",
                "+",
                "+public class ToggleStarredExpressionCommandTests extends ExpressionCommandTestBase {",
                "+    ",
                "+    @BeforeMethod",
                "+    public void setUp() {",
                "+        command = new ToggleStarredExpressionCommand();",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testJsonResponse() throws ServletException, IOException {",
                "+",
                "+        initWorkspace(\"{\\n\" + ",
                "+                \"        \\\"class\\\": \\\"com.google.refine.preference.TopList\\\",\\n\" + ",
                "+                \"        \\\"top\\\": 100,\\n\" + ",
                "+                \"        \\\"list\\\": [\\n\" + ",
                "+                \"          \\\"grel:facetCount(value, 'value', 'Column 1')\\\",\\n\" + ",
                "+                \"          \\\"grel:facetCount(value, 'value', 'Column 3')\\\",\\n\" + ",
                "+                \"          \\\"grel:cell.recon.match.id\\\"\" +",
                "+                \"]}\", \"{\\n\" + ",
                "+                        \"        \\\"class\\\": \\\"com.google.refine.preference.TopList\\\",\\n\" + ",
                "+                        \"        \\\"top\\\": 100,\\n\" + ",
                "+                        \"        \\\"list\\\": [\\n\" + ",
                "+                        \"          \\\"grel:cell.recon.match.id\\\"\\n\" + ",
                "+                        \"]}\");",
                "+        ",
                "+        String json = \"{\\n\" + ",
                "+                \"       \\\"expressions\\\" : [ {\\n\" + ",
                "+                \"         \\\"code\\\" : \\\"grel:facetCount(value, 'value', 'Column 1')\\\"\\n\" + ",
                "+                \"       }, {\\n\" + ",
                "+                \"         \\\"code\\\" : \\\"grel:cell.recon.match.id\\\"\\n\" + ",
                "+                \"       } ]\\n\" + ",
                "+                \"     }\";",
                "+        when(request.getParameter(\"expression\")).thenReturn(\"grel:facetCount(value, 'value', 'Column 1')\");",
                "+        when(request.getParameter(\"returnList\")).thenReturn(\"yes\");",
                "+        command.doPost(request, response);",
                "+        assertResponseJsonIs(json);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java",
                "main/tests/server/src/com/google/refine/tests/commands/expr/ExpressionCommandTestBase.java",
                "main/tests/server/src/com/google/refine/tests/commands/expr/GetExpressionHistoryCommandTests.java",
                "main/tests/server/src/com/google/refine/tests/commands/expr/GetExpressionLanguageInfoCommandTests.java",
                "main/tests/server/src/com/google/refine/tests/commands/expr/GetStarredExpressionsCommandTests.java",
                "main/tests/server/src/com/google/refine/tests/commands/expr/PreviewExpressionCommandTests.java",
                "main/tests/server/src/com/google/refine/tests/commands/expr/ToggleStarredExpressionCommandTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0a6b28eb2bb423f8a11c1ef3e320f0ec9a9cc6ae",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542732819,
            "hunks": 3,
            "message": "Remove spurious JSONException in TemplatingExporter",
            "diff": [
                "diff --git a/main/src/com/google/refine/exporters/TemplatingExporter.java b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "index 92cf230c7..7073a1635 100644",
                "--- a/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "+++ b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "@@ -39,4 +39,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -119,12 +117,8 @@ public class TemplatingExporter implements WriterExporter {",
                "             if (sortingJson != null) {",
                "-                try {",
                "-                    SortingConfig sorting = SortingConfig.reconstruct(sortingJson);",
                "-                    SortingRowVisitor srv = new SortingRowVisitor(visitor);",
                "-                    srv.initializeFromConfig(project, sorting);",
                "-                    ",
                "-                    if (srv.hasCriteria()) {",
                "-                        visitor = srv;",
                "-                    }",
                "-                } catch (JSONException e) {",
                "-                    e.printStackTrace();",
                "+                SortingConfig sorting = SortingConfig.reconstruct(sortingJson);",
                "+                SortingRowVisitor srv = new SortingRowVisitor(visitor);",
                "+                srv.initializeFromConfig(project, sorting);",
                "+                ",
                "+                if (srv.hasCriteria()) {",
                "+                    visitor = srv;",
                "                 }",
                "@@ -138,12 +132,8 @@ public class TemplatingExporter implements WriterExporter {",
                "             if (sortingJson != null) {",
                "-                try {",
                "-                    SortingConfig sorting = SortingConfig.reconstruct(sortingJson);",
                "-                    SortingRecordVisitor srv = new SortingRecordVisitor(visitor);",
                "-                    srv.initializeFromConfig(project, sorting);",
                "-                    ",
                "-                    if (srv.hasCriteria()) {",
                "-                        visitor = srv;",
                "-                    }",
                "-                } catch (JSONException e) {",
                "-                    e.printStackTrace();",
                "+                SortingConfig sorting = SortingConfig.reconstruct(sortingJson);",
                "+                SortingRecordVisitor srv = new SortingRecordVisitor(visitor);",
                "+                srv.initializeFromConfig(project, sorting);",
                "+                ",
                "+                if (srv.hasCriteria()) {",
                "+                    visitor = srv;",
                "                 }"
            ],
            "changed_files": [
                "main/src/com/google/refine/exporters/TemplatingExporter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ff57ff172e8651f8b1849307f9a7191a4fdc6be3",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541437386,
            "hunks": 5,
            "message": "Migrate pc-axis extension importers to Jackson",
            "diff": [
                "diff --git a/extensions/pc-axis/src/com/google/refine/pcaxis/PCAxisImporter.java b/extensions/pc-axis/src/com/google/refine/pcaxis/PCAxisImporter.java",
                "index 8a41c27f9..504f53d59 100644",
                "--- a/extensions/pc-axis/src/com/google/refine/pcaxis/PCAxisImporter.java",
                "+++ b/extensions/pc-axis/src/com/google/refine/pcaxis/PCAxisImporter.java",
                "@@ -39,3 +39,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -43,2 +42,3 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.importers.TabularImportingParserBase;",
                "@@ -48,2 +48,3 @@ import com.google.refine.model.metadata.ProjectMetadata;",
                " import com.google.refine.util.JSONUtilities;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -57,5 +58,5 @@ public class PCAxisImporter extends TabularImportingParserBase {",
                "     @Override",
                "-    public JSONObject createParserUIInitializationData(",
                "-            ImportingJob job, List<JSONObject> fileRecords, String format) {",
                "-        JSONObject options = new JSONObject();",
                "+    public ObjectNode createParserUIInitializationData(",
                "+            ImportingJob job, List<ObjectNode> fileRecords, String format) {",
                "+        ObjectNode options = ParsingUtilities.mapper.createObjectNode();",
                "         JSONUtilities.safePut(options, \"includeFileSources\", fileRecords.size() > 1);",
                "@@ -74,3 +75,3 @@ public class PCAxisImporter extends TabularImportingParserBase {",
                "         int limit,",
                "-        JSONObject options,",
                "+        ObjectNode options,",
                "         List<Exception> exceptions"
            ],
            "changed_files": [
                "extensions/pc-axis/src/com/google/refine/pcaxis/PCAxisImporter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "292700c6f4b39c12a7469cb814125e65be4df0e3",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543240516,
            "hunks": 1,
            "message": "Fix import error",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index 44a4f7b16..da11a6ba5 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -35,4 +35,2 @@ package com.google.refine.model.recon;",
                "-import static org.testng.Assert.assertNotNull;",
                "-",
                " import java.io.DataOutputStream;"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/recon/StandardReconConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e05d03289098f3293ede16dc61979c5a558d49dd",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544390137,
            "hunks": 1,
            "message": "Remove unsign script, not neded",
            "diff": [
                "diff --git a/unsign b/unsign",
                "deleted file mode 100755",
                "index 0a8a5c36b..000000000",
                "--- a/unsign",
                "+++ /dev/null",
                "@@ -1,99 +0,0 @@",
                "-#!/usr/bin/env ruby",
                "-# Deactivates any embedded code signatures in a Mach-O binary.",
                "-",
                "-module MachO",
                "-  class Unsign",
                "-    def self.unsign(filename)",
                "-      File.open(filename, \"r+\") do |f|",
                "-        Unsign.new(f).headers",
                "-      end",
                "-    end",
                "-",
                "-    attr_accessor :headers",
                "-",
                "-    protected",
                "-",
                "-    FatHeader = Struct.new(:cpu_type, :cpu_subtype, :offset, :size, :align, :mach)",
                "-    MachHeader = Struct.new(:cpu_type, :cpu_subtype, :filetype, :ncmds, :sizeofcmds, :flags, :reserved, :cmds)",
                "-    LoadCommand = Struct.new(:cmd, :cmdsize)",
                "-",
                "-    def initialize(f)",
                "-      @f = f",
                "-      @headers = process",
                "-    end",
                "-",
                "-    def debug(message)",
                "-      puts message if ENV[\"DEBUG\"]",
                "-    end",
                "-",
                "-    def word_type",
                "-      @big_endian ? 'N' : 'V'",
                "-    end",
                "-",
                "-    def patch_code_signature(lc)",
                "-      # just change LC_CODE_SIGNATURE to a high value that will be ignored by the loader",
                "-      debug \"PATCHING LC_CODE_SIGNATURE\"",
                "-      @f.seek(-8, IO::SEEK_CUR)",
                "-      @f.write([0xff, lc.cmdsize].pack(\"#{word_type}2\"))",
                "-      lc",
                "-    end",
                "-",
                "-    def process_mach",
                "-      len = @x86_64 ? 7 : 6",
                "-      header = MachHeader.new(*@f.read(len*4).unpack(\"#{word_type}#{len}\"))",
                "-      debug \"MACH HEADER: #{header.inspect}\"",
                "-      header.cmds = (1..(header.ncmds)).collect do",
                "-        lc = LoadCommand.new(*@f.read(8).unpack(\"#{word_type}2\"))",
                "-        debug \"LOAD COMMAND: #{lc.inspect}\"",
                "-",
                "-        lc = case lc.cmd",
                "-        when 0x1d then patch_code_signature(lc)",
                "-        else lc",
                "-        end",
                "-",
                "-        @f.seek(lc.cmdsize - 8, IO::SEEK_CUR)",
                "-",
                "-        lc",
                "-      end",
                "-      header",
                "-    end",
                "-",
                "-    def process_fat",
                "-      num_arches, = @f.read(4).unpack(\"N\")",
                "-      arches = (1..num_arches).collect do",
                "-        FatHeader.new(*@f.read(20).unpack(\"N5\"))",
                "-      end",
                "-      debug \"FAT HEADER: #{arches.inspect}\"",
                "-      arches.each do |arch|",
                "-        @f.seek(arch.offset)",
                "-        arch.mach = process",
                "-      end",
                "-      arches",
                "-    end",
                "-",
                "-    def process",
                "-      magic, = @f.read(4).unpack(\"N\")",
                "-      debug \"MAGIC: 0x%08x\" % magic",
                "-      case magic",
                "-      when 0xcafebabe then @big_endian, @x86_64 = false, false; process_fat",
                "-      when 0xfeedface then @big_endian, @x86_64 = true,  false; process_mach",
                "-      when 0xcffaedfe then @big_endian, @x86_64 = false, true;  process_mach",
                "-      when 0xcefaedfe then @big_endian, @x86_64 = false, false; process_mach",
                "-      else raise \"unknown magic: 0x%08x\" % magic",
                "-      end",
                "-    end",
                "-  end",
                "-end",
                "-",
                "-# command line driver",
                "-if __FILE__ == $0",
                "-  if ARGV.empty?",
                "-    $stderr.puts \"usage:  #{$0} filename ...\"",
                "-    exit 1",
                "-  end",
                "-",
                "-  ARGV.each do |filename|",
                "-    puts \"removing signatures from: #{filename}\"",
                "-    MachO::Unsign::unsign(filename)",
                "-  end",
                "-end"
            ],
            "changed_files": [
                "unsign"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "599edd374f16961e77c59b26153c0034d003e12d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540136219,
            "hunks": 4,
            "message": "Jackson deserialization for ReconType",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/ReconType.java b/main/src/com/google/refine/model/ReconType.java",
                "index ac023719a..65a6d34e9 100644",
                "--- a/main/src/com/google/refine/model/ReconType.java",
                "+++ b/main/src/com/google/refine/model/ReconType.java",
                "@@ -35,6 +35,9 @@ package com.google.refine.model;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.google.refine.util.ParsingUtilities;",
                "+",
                "@@ -51,3 +54,8 @@ public class ReconType  {",
                "-    public ReconType(String id, String name) {",
                "+    @JsonCreator",
                "+    public ReconType(",
                "+            @JsonProperty(\"id\")",
                "+            String id,",
                "+            @JsonProperty(\"name\")",
                "+            String name) {",
                " \tthis.id = id;",
                "@@ -56,12 +64,4 @@ public class ReconType  {",
                "-    static public ReconType load(JSONObject obj) throws Exception {",
                "-        if (obj == null) {",
                "-            return null;",
                "-        }",
                "-        ",
                "-        ReconType type = new ReconType(",
                "-            obj.getString(\"id\"),",
                "-            obj.getString(\"name\")",
                "-        );",
                "-        return type;",
                "+    static public ReconType load(String json) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(json, ReconType.class);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/ReconType.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8f1c7cc2ab7f354570f277cb8385a4b791779d06",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538121290,
            "hunks": 113,
            "message": "Jackson serialization for facets",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/DecoratedValue.java b/main/src/com/google/refine/browsing/DecoratedValue.java",
                "index 90bde0930..31c617a97 100644",
                "--- a/main/src/com/google/refine/browsing/DecoratedValue.java",
                "+++ b/main/src/com/google/refine/browsing/DecoratedValue.java",
                "@@ -41,2 +41,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -52,3 +54,5 @@ import com.google.refine.util.StringUtils;",
                " public class DecoratedValue implements Jsonizable {",
                "+    @JsonProperty(\"v\")",
                "     final public Object value;",
                "+    @JsonProperty(\"l\")",
                "     final public String label;",
                "diff --git a/main/src/com/google/refine/browsing/facets/FacetConfig.java b/main/src/com/google/refine/browsing/facets/FacetConfig.java",
                "index c6786749e..3971b66d4 100644",
                "--- a/main/src/com/google/refine/browsing/facets/FacetConfig.java",
                "+++ b/main/src/com/google/refine/browsing/facets/FacetConfig.java",
                "@@ -4,2 +4,4 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -30,2 +32,8 @@ public interface FacetConfig extends Jsonizable {",
                "     public Facet apply(Project project);",
                "+    ",
                "+    /**",
                "+     * The facet type as stored in json.",
                "+     */",
                "+    @JsonProperty(\"type\")",
                "+    public String getJsonType();",
                " }",
                "diff --git a/main/src/com/google/refine/browsing/facets/ListFacet.java b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "index d5cdfa45f..780e73f80 100644",
                "--- a/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "@@ -38,2 +38,3 @@ import java.util.List;",
                " import java.util.Properties;",
                "+import java.util.stream.Collectors;",
                "@@ -44,2 +45,9 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonUnwrapped;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+",
                " import com.google.refine.ProjectManager;",
                "@@ -62,2 +70,17 @@ import com.google.refine.util.JSONUtilities;",
                " public class ListFacet implements Facet {",
                "+    public static final String ERR_TOO_MANY_CHOICES = \"Too many choices\";",
                "+    ",
                "+    /**",
                "+     * Wrapper to respect the serialization format",
                "+     */",
                "+    public static class DecoratedValueWrapper {",
                "+        @JsonProperty(\"v\")",
                "+        public final DecoratedValue value;",
                "+        @JsonCreator",
                "+        public DecoratedValueWrapper(",
                "+                @JsonProperty(\"v\") DecoratedValue value) {",
                "+            this.value = value;",
                "+        }",
                "+    }",
                "+    ",
                "     /*",
                "@@ -66,5 +89,9 @@ public class ListFacet implements Facet {",
                "     public static class ListFacetConfig implements FacetConfig {",
                "+        @JsonProperty(\"name\")",
                "         public String     name;",
                "+        @JsonProperty(\"expression\")",
                "         public String     expression;",
                "+        @JsonProperty(\"columnName\")",
                "         public String     columnName;",
                "+        @JsonProperty(\"invert\")",
                "         public boolean    invert;",
                "@@ -72,10 +99,18 @@ public class ListFacet implements Facet {",
                "         // If true, then facet won't show the blank and error choices",
                "+        @JsonProperty(\"omitBlank\")",
                "         public boolean omitBlank;",
                "+        @JsonProperty(\"omitError\")",
                "         public boolean omitError;",
                "+        @JsonIgnore",
                "         public List<DecoratedValue> selection = new LinkedList<>();",
                "+        @JsonProperty(\"selectNumber\")",
                "         public boolean selectNumber;",
                "+        @JsonProperty(\"selectDateTime\")",
                "         public boolean selectDateTime;",
                "+        @JsonProperty(\"selectBoolean\")",
                "         public boolean selectBoolean;",
                "+        @JsonProperty(\"selectBlank\")",
                "         public boolean selectBlank;",
                "+        @JsonProperty(\"selectError\")",
                "         public boolean selectError;",
                "@@ -109,2 +144,9 @@ public class ListFacet implements Facet {",
                "+        @JsonProperty(\"selection\")",
                "+        public List<DecoratedValueWrapper> getWrappedSelection() {",
                "+            return selection.stream()",
                "+                    .map(e -> new DecoratedValueWrapper(e))",
                "+                    .collect(Collectors.toList());",
                "+        }",
                "+        ",
                "         @Override",
                "@@ -145,2 +187,23 @@ public class ListFacet implements Facet {",
                "         }",
                "+",
                "+        @Override",
                "+        public String getJsonType() {",
                "+            return \"list\";",
                "+        }",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Wrapper class for choice counts and selection status for blank and error",
                "+     */",
                "+    public static class OtherChoice {",
                "+        @JsonProperty(\"s\")",
                "+        boolean selected;",
                "+        @JsonProperty(\"c\")",
                "+        int count;",
                "+        public OtherChoice(",
                "+                @JsonProperty(\"s\") boolean selected,",
                "+                @JsonProperty(\"c\") int count) {",
                "+            this.selected = selected;",
                "+            this.count = count;",
                "+        }",
                "     }",
                "@@ -168,2 +231,65 @@ public class ListFacet implements Facet {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"name\")",
                "+    public String getName() {",
                "+        return _config.name;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _config.columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"expression\")",
                "+    public String getExpression() {",
                "+        return _config.expression;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"invert\")",
                "+    public boolean getInvert() {",
                "+        return _config.invert;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"error\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getError() {",
                "+        if (_errorMessage == null && _choices.size() > getLimit()) {",
                "+            return ERR_TOO_MANY_CHOICES;",
                "+        }",
                "+        return _errorMessage;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"choiceCount\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Integer getChoiceCount() {",
                "+        if (_errorMessage == null && _choices.size() > getLimit()) ",
                "+            return _choices.size();",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"choices\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public List<NominalFacetChoice> getChoices() {",
                "+        if (getError() == null)",
                "+            return _choices;",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"blankChoice\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public OtherChoice getBlankChoice() {",
                "+        if (getError() == null && !_config.omitBlank && (_config.selectBlank || _blankCount > 0)) {",
                "+            return new OtherChoice(_config.selectBlank, _blankCount);",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"errorChoice\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public OtherChoice getErrorChoice() {",
                "+        if (getError() == null && !_config.omitError && (_config.selectError || _errorCount > 0)) {",
                "+            return new OtherChoice(_config.selectError, _errorCount);",
                "+        }",
                "+        return null;",
                "+    }",
                "@@ -182,3 +308,3 @@ public class ListFacet implements Facet {",
                "         } else if (_choices.size() > getLimit()) {",
                "-            writer.key(\"error\"); writer.value(\"Too many choices\");",
                "+            writer.key(\"error\"); writer.value(ERR_TOO_MANY_CHOICES);",
                "             writer.key(\"choiceCount\"); writer.value(_choices.size());",
                "@@ -361,2 +487,2 @@ public class ListFacet implements Facet {",
                "     }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/main/src/com/google/refine/browsing/facets/NominalFacetChoice.java b/main/src/com/google/refine/browsing/facets/NominalFacetChoice.java",
                "index 96d5674d0..ad59ff61a 100644",
                "--- a/main/src/com/google/refine/browsing/facets/NominalFacetChoice.java",
                "+++ b/main/src/com/google/refine/browsing/facets/NominalFacetChoice.java",
                "@@ -40,2 +40,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -48,4 +50,7 @@ import com.google.refine.browsing.DecoratedValue;",
                " public class NominalFacetChoice implements Jsonizable {",
                "+    @JsonProperty(\"v\")",
                "     final public DecoratedValue    decoratedValue;",
                "+    @JsonProperty(\"c\")",
                "     public int                    count;",
                "+    @JsonProperty(\"s\")",
                "     public boolean                selected;",
                "diff --git a/main/src/com/google/refine/browsing/facets/RangeFacet.java b/main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "index 662253697..48621873b 100644",
                "--- a/main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "@@ -41,2 +41,7 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.FilteredRecords;",
                "@@ -61,2 +66,5 @@ import com.google.refine.util.JSONUtilities;",
                " public class RangeFacet implements Facet {",
                "+    ",
                "+    public static final String ERR_NO_NUMERIC_VALUE_PRESENT = \"No numeric value present.\";",
                "+    ",
                "     /*",
                "@@ -65,14 +73,24 @@ public class RangeFacet implements Facet {",
                "     public static class RangeFacetConfig implements FacetConfig {",
                "+        @JsonProperty(\"name\")",
                "         protected String     _name;       // name of facet",
                "+        @JsonProperty(\"expression\")",
                "         protected String     _expression; // expression to compute numeric value(s) per row",
                "+        @JsonProperty(\"columnName\")",
                "         protected String     _columnName; // column to base expression on, if any",
                "+        @JsonProperty(FROM)",
                "         protected double    _from; // the numeric selection",
                "+        @JsonProperty(TO)",
                "         protected double    _to;",
                "+        @JsonProperty(\"selectNumeric\")",
                "         protected boolean   _selectNumeric; // whether the numeric selection applies, default true",
                "+        @JsonProperty(\"selectNonNumeric\")",
                "         protected boolean   _selectNonNumeric;",
                "+        @JsonProperty(\"selectBlank\")",
                "         protected boolean   _selectBlank;",
                "+        @JsonProperty(\"selectError\")",
                "         protected boolean   _selectError;",
                "+        @JsonIgnore",
                "         protected boolean    _selected; // false if we're certain that all rows will match",
                "@@ -124,2 +142,7 @@ public class RangeFacet implements Facet {",
                "         }",
                "+",
                "+        @Override",
                "+        public String getJsonType() {",
                "+            return \"range\";",
                "+        }",
                "     }",
                "@@ -143,12 +166,20 @@ public class RangeFacet implements Facet {",
                "+    @JsonProperty(\"baseNumericCount\")",
                "     protected int       _baseNumericCount;",
                "+    @JsonProperty(\"baseNonNumericCount\")",
                "     protected int       _baseNonNumericCount;",
                "+    @JsonProperty(\"baseBlankCount\")",
                "     protected int       _baseBlankCount;",
                "+    @JsonProperty(\"baseErrorCount\")",
                "     protected int       _baseErrorCount;",
                "+    @JsonProperty(\"numericCount\")",
                "     protected int       _numericCount;",
                "+    @JsonProperty(\"nonNumericCount\")",
                "     protected int       _nonNumericCount;",
                "+    @JsonProperty(\"blankCount\")",
                "     protected int       _blankCount;",
                "+    @JsonProperty(\"errorCount\")",
                "     protected int       _errorCount;",
                "-    ",
                "+",
                "     public RangeFacet() {",
                "@@ -161,2 +192,96 @@ public class RangeFacet implements Facet {",
                "+    @JsonProperty(\"name\")",
                "+    public String getName() {",
                "+        return _config._name;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"expression\")",
                "+    public String getExpression() {",
                "+        return _config._expression;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _config._columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"error\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getError() {",
                "+        if (_errorMessage != null) {",
                "+            return _errorMessage;",
                "+        } else if (!isFiniteRange()) {",
                "+            return ERR_NO_NUMERIC_VALUE_PRESENT;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonIgnore",
                "+    public boolean isFiniteRange() {",
                "+        return !Double.isInfinite(_min) && !Double.isInfinite(_max);",
                "+    }",
                "+    ",
                "+    @JsonProperty(MIN)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getMin() {",
                "+        if (getError() == null) {",
                "+            return _min;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(MAX)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getMax() {",
                "+        if (getError() == null) {",
                "+            return _max;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"step\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getStep() {",
                "+        if (getError() == null) {",
                "+            return _step;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"bins\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public int[] getBins() {",
                "+        if (getError() == null) {",
                "+            return _bins;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"baseBins\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public int[] getBaseBins() {",
                "+        if (getError() == null) {",
                "+            return _baseBins;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(FROM)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getFrom() {",
                "+        if (getError() == null) {",
                "+            return _config._from;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(TO)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getTo() {",
                "+        if (getError() == null) {",
                "+            return _config._to;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "     @Override",
                "@@ -193,3 +318,3 @@ public class RangeFacet implements Facet {",
                "             } else {",
                "-                writer.key(\"error\"); writer.value(\"No numeric value present.\");",
                "+                writer.key(\"error\"); writer.value(ERR_NO_NUMERIC_VALUE_PRESENT);",
                "             }",
                "diff --git a/main/src/com/google/refine/browsing/facets/ScatterplotFacet.java b/main/src/com/google/refine/browsing/facets/ScatterplotFacet.java",
                "index 3a6862d59..3945251d7 100644",
                "--- a/main/src/com/google/refine/browsing/facets/ScatterplotFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/ScatterplotFacet.java",
                "@@ -53,2 +53,7 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.FilteredRecords;",
                "@@ -82,24 +87,42 @@ public class ScatterplotFacet implements Facet {",
                "     public static class ScatterplotFacetConfig implements FacetConfig {",
                "+        @JsonProperty(\"name\")",
                "         protected String name; // name of facet",
                "+        @JsonProperty(X_EXPRESSION)",
                "         protected String expression_x; // expression to compute the x numeric value(s) per row",
                "+        @JsonProperty(Y_EXPRESSION)",
                "         protected String expression_y; // expression to compute the y numeric value(s) per row",
                "+        @JsonProperty(X_COLUMN_NAME)",
                "         protected String columnName_x; // column to base the x expression on, if any",
                "+        @JsonProperty(Y_COLUMN_NAME)",
                "         protected String columnName_y; // column to base the y expression on, if any",
                "+        @JsonProperty(SIZE)",
                "         protected int size;",
                "+        @JsonIgnore",
                "         protected int dim_x;",
                "+        @JsonIgnore",
                "         protected int dim_y;",
                "+        @JsonIgnore",
                "         protected String rotation_str;",
                "+        @JsonIgnore",
                "         protected int rotation;",
                "+        @JsonIgnore",
                "         protected double l;",
                "+        @JsonProperty(DOT)",
                "         protected double dot;",
                "+        @JsonIgnore",
                "         protected String color_str;",
                "+        @JsonIgnore",
                "         protected Color color;",
                "+        @JsonProperty(FROM_X)",
                "         protected double from_x; // the numeric selection for the x axis, from 0 to 1",
                "+        @JsonProperty(TO_X)",
                "         protected double to_x;",
                "+        @JsonProperty(FROM_Y)",
                "         protected double from_y; // the numeric selection for the y axis, from 0 to 1",
                "+        @JsonProperty(TO_Y)",
                "         protected double to_y;",
                "@@ -109,2 +132,12 @@ public class ScatterplotFacet implements Facet {",
                "+        @JsonProperty(DIM_X)",
                "+        public String getDimX() {",
                "+            return dim_x == LIN ? \"lin\" : \"log\";",
                "+        }",
                "+        ",
                "+        @JsonProperty(DIM_Y)",
                "+        public String getDimY() {",
                "+            return dim_y == LIN ? \"lin\" : \"log\";",
                "+        }",
                "+        ",
                "         @Override",
                "@@ -195,2 +228,7 @@ public class ScatterplotFacet implements Facet {",
                "         }",
                "+",
                "+        @Override",
                "+        public String getJsonType() {",
                "+            return \"scatterplot\";",
                "+        }",
                "     }",
                "@@ -257,2 +295,114 @@ public class ScatterplotFacet implements Facet {",
                "+    @JsonProperty(NAME)",
                "+    public String getName() {",
                "+        return config.name;",
                "+    }",
                "+    ",
                "+    @JsonProperty(X_COLUMN_NAME)",
                "+    public String getXColumnName() {",
                "+        return config.columnName_x;",
                "+    }",
                "+    ",
                "+    @JsonProperty(X_EXPRESSION)",
                "+    public String getXExpression() {",
                "+        return config.expression_x;",
                "+    }",
                "+    ",
                "+    @JsonProperty(Y_COLUMN_NAME)",
                "+    public String getYColumnName() {",
                "+        return config.columnName_y;",
                "+    }",
                "+    ",
                "+    @JsonProperty(Y_EXPRESSION)",
                "+    public String getYExpression() {",
                "+        return config.expression_y;",
                "+    }",
                "+    ",
                "+    @JsonProperty(SIZE)",
                "+    public int getSize() {",
                "+        return config.size;",
                "+    }",
                "+    ",
                "+    @JsonProperty(DIM_X)",
                "+    public int getDimX() {",
                "+        return config.dim_x;",
                "+    }",
                "+    ",
                "+    @JsonProperty(DIM_Y)",
                "+    public int getDimY() {",
                "+        return config.dim_y;",
                "+    }",
                "+    ",
                "+    @JsonProperty(DOT)",
                "+    public double getDot() {",
                "+        return config.dot;",
                "+    }",
                "+    ",
                "+    @JsonProperty(ROTATION)",
                "+    public double getRotation() {",
                "+        return config.rotation;",
                "+    }",
                "+    ",
                "+    @JsonProperty(COLOR)",
                "+    public String getColorString() {",
                "+        return config.color_str;",
                "+    }",
                "+    ",
                "+    @JsonProperty(IMAGE)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getImage() {",
                "+        if(IMAGE_URI) {",
                "+            return image;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(ERROR_X)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getErrorX() {",
                "+        return errorMessage_x;",
                "+    }",
                "+    ",
                "+    @JsonProperty(FROM_X)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getFromX() {",
                "+        if (errorMessage_x == null && !Double.isInfinite(min_x) && !Double.isInfinite(max_x)) {",
                "+            return config.from_x;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(TO_X)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getToX() {",
                "+        if (errorMessage_x == null && !Double.isInfinite(min_x) && !Double.isInfinite(max_x)) {",
                "+            return config.to_x;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(ERROR_Y)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getErrorY() {",
                "+        return errorMessage_y;",
                "+    }",
                "+    ",
                "+    @JsonProperty(FROM_Y)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getFromY() {",
                "+        if (errorMessage_y == null && !Double.isInfinite(min_y) && !Double.isInfinite(max_y)) {",
                "+            return config.from_y;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(TO_Y)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getToY() {",
                "+        if (errorMessage_y == null && !Double.isInfinite(min_y) && !Double.isInfinite(max_y)) {",
                "+            return config.to_y;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "     @Override",
                "diff --git a/main/src/com/google/refine/browsing/facets/TextSearchFacet.java b/main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "index 96f97813b..c627f8258 100644",
                "--- a/main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "@@ -42,2 +42,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.FilteredRecords;",
                "@@ -60,7 +62,13 @@ public class TextSearchFacet implements Facet {",
                "     public static class TextSearchFacetConfig implements FacetConfig {  ",
                "+        @JsonProperty(\"name\")",
                "         protected String     _name;",
                "+        @JsonProperty(\"columnName\")",
                "         protected String     _columnName;",
                "+        @JsonProperty(\"query\")",
                "         protected String     _query = null;",
                "+        @JsonProperty(\"mode\")",
                "         protected String     _mode;",
                "+        @JsonProperty(\"caseSensitive\")",
                "         protected boolean    _caseSensitive;",
                "+        @JsonProperty(\"invert\")",
                "         protected boolean    _invert;",
                "@@ -78,3 +86,3 @@ public class TextSearchFacet implements Facet {",
                "             writer.key(\"type\"); writer.value(\"text\");",
                "-            writer.endObject();  ",
                "+            writer.endObject();",
                "         }",
                "@@ -99,2 +107,7 @@ public class TextSearchFacet implements Facet {",
                "         }",
                "+",
                "+        @Override",
                "+        public String getJsonType() {",
                "+            return \"text\";",
                "+        }",
                "     }",
                "@@ -111,3 +124,33 @@ public class TextSearchFacet implements Facet {",
                "     }",
                "-",
                "+    ",
                "+    @JsonProperty(\"name\")",
                "+    public String getName() {",
                "+        return _config._name;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _config._columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"query\")",
                "+    public String getQuery() {",
                "+        return _config._query;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"mode\")",
                "+    public String getMode() {",
                "+        return _config._mode;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"caseSensitive\")",
                "+    public boolean isCaseSensitive() {",
                "+        return _config._caseSensitive;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"invert\")",
                "+    public boolean isInverted() {",
                "+        return _config._invert;",
                "+    }",
                "+    ",
                "     @Override",
                "diff --git a/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java b/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "index 30e1ece0c..98cd0d1ee 100644",
                "--- a/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "@@ -41,2 +41,7 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.FilteredRecords;",
                "@@ -65,14 +70,24 @@ public class TimeRangeFacet implements Facet {",
                "     public static class TimeRangeFacetConfig implements FacetConfig {",
                "+        @JsonProperty(\"name\")",
                "         protected String     _name;       // name of facet",
                "+        @JsonProperty(\"expression\")",
                "         protected String     _expression; // expression to compute numeric value(s) per row",
                "+        @JsonProperty(\"columnName\")",
                "         protected String     _columnName; // column to base expression on, if any",
                "+        @JsonProperty(FROM)",
                "         protected double      _from; // the numeric selection",
                "+        @JsonProperty(TO)",
                "         protected double      _to;",
                "+        @JsonProperty(\"selectTime\")",
                "         protected boolean   _selectTime; // whether the time selection applies, default true",
                "+        @JsonProperty(\"selectNonTime\")",
                "         protected boolean   _selectNonTime;",
                "+        @JsonProperty(\"selectBlank\")",
                "         protected boolean   _selectBlank;",
                "+        @JsonProperty(\"selectError\")",
                "         protected boolean   _selectError;",
                "+        @JsonIgnore",
                "         protected boolean    _selected; // false if we're certain that all rows will match",
                "@@ -125,2 +140,7 @@ public class TimeRangeFacet implements Facet {",
                "         }",
                "+",
                "+        @Override",
                "+        public String getJsonType() {",
                "+            return \"timerange\";",
                "+        }",
                "     }",
                "@@ -144,10 +164,18 @@ public class TimeRangeFacet implements Facet {",
                "      */",
                "+    @JsonProperty(\"baseTimeCount\")",
                "     protected int       _baseTimeCount;",
                "+    @JsonProperty(\"baseNonTimeCount\")",
                "     protected int       _baseNonTimeCount;",
                "+    @JsonProperty(\"baseBlankCount\")",
                "     protected int       _baseBlankCount;",
                "+    @JsonProperty(\"baseErrorCount\")",
                "     protected int       _baseErrorCount;",
                "-      ",
                "+     ",
                "+    @JsonProperty(\"timeCount\")",
                "     protected int       _timeCount;",
                "+    @JsonProperty(\"nonTimeCount\")",
                "     protected int       _nonTimeCount;",
                "+    @JsonProperty(\"blankCount\")",
                "     protected int       _blankCount;",
                "+    @JsonProperty(\"errorCount\")",
                "     protected int       _errorCount;",
                "@@ -159,2 +187,83 @@ public class TimeRangeFacet implements Facet {",
                "+    @JsonProperty(\"name\")",
                "+    public String getName() {",
                "+        return _config._name;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"expression\")",
                "+    public String getExpression() {",
                "+        return _config._expression;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _config._columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"error\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getError() {",
                "+        return _errorMessage;",
                "+    }",
                "+    ",
                "+    @JsonProperty(MIN)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getMin() {",
                "+        if(getError() == null) {",
                "+            return _min;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(MAX)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getMax() {",
                "+        if(getError() == null) {",
                "+            return _max;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"step\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getStep() {",
                "+        return _step;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"bins\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public int[] getBins() {",
                "+        if (getError() == null) {",
                "+            return _bins;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"baseBins\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public int[] getBaseBins() {",
                "+        if (getError() == null) {",
                "+            return _baseBins;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(FROM)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getFrom() {",
                "+        if (getError() == null) {",
                "+            return _config._from;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(TO)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Double getTo() {",
                "+        if (getError() == null) {",
                "+            return _config._to;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "     @Override",
                "@@ -171,5 +280,5 @@ public class TimeRangeFacet implements Facet {",
                "             if (!Double.isInfinite(_min) && !Double.isInfinite(_max)) {",
                "-                writer.key(MIN); writer.value(_min);",
                "-                writer.key(MAX); writer.value(_max);",
                "-                writer.key(\"step\"); writer.value(_step);",
                "+                writer.key(MIN); writer.value((long)_min);",
                "+                writer.key(MAX); writer.value((long)_max);",
                "+                writer.key(\"step\"); writer.value((long)_step);",
                "@@ -187,4 +296,4 @@ public class TimeRangeFacet implements Facet {",
                "-                writer.key(FROM); writer.value(_config._from);",
                "-                writer.key(TO); writer.value(_config._to);",
                "+                writer.key(FROM); writer.value((long)_config._from);",
                "+                writer.key(TO); writer.value((long)_config._to);",
                "             }",
                "diff --git a/main/src/com/google/refine/util/SerializationFilters.java b/main/src/com/google/refine/util/SerializationFilters.java",
                "index c8752c22f..646892b3e 100644",
                "--- a/main/src/com/google/refine/util/SerializationFilters.java",
                "+++ b/main/src/com/google/refine/util/SerializationFilters.java",
                "@@ -68,4 +68,4 @@ public class SerializationFilters {",
                "                 throws IOException {",
                "-            if (new Double(arg0.intValue()).equals(arg0)) {",
                "-                gen.writeNumber(arg0.intValue());",
                "+            if (new Double(arg0.longValue()).equals(arg0)) {",
                "+                gen.writeNumber(arg0.longValue());",
                "             } else {",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java",
                "index f95c22ceb..16794c035 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java",
                "@@ -22,9 +22,9 @@ public class TimeRangeFacetTests extends RefineTest {",
                "             + \"\\\"columnName\\\":\\\"my column\\\",\"",
                "-            + \"\\\"min\\\":1.199329445E12,\"",
                "-            + \"\\\"max\\\":1.51496695E12,\"",
                "-            + \"\\\"step\\\":3.1556952E10,\"",
                "+            + \"\\\"min\\\":1199329445000,\"",
                "+            + \"\\\"max\\\":1514966950000,\"",
                "+            + \"\\\"step\\\":31556952000,\"",
                "             + \"\\\"bins\\\":[1,0,0,0,1,0,0,0,0,0,1],\"",
                "             + \"\\\"baseBins\\\":[1,0,0,0,1,0,0,0,0,0,1],\"",
                "-            + \"\\\"from\\\":1.262443349E12,\"",
                "-            + \"\\\"to\\\":1.51496695E12,\"",
                "+            + \"\\\"from\\\":1262443349000,\"",
                "+            + \"\\\"to\\\":1514966950000,\"",
                "             + \"\\\"baseTimeCount\\\":3,\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/util/TestUtils.java b/main/tests/server/src/com/google/refine/tests/util/TestUtils.java",
                "index 0e00b7e0c..68f51e3fd 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/util/TestUtils.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/util/TestUtils.java",
                "@@ -23,3 +23,2 @@ import com.google.refine.Jsonizable;",
                " import com.google.refine.util.JSONUtilities;",
                "-import com.google.refine.util.JsonViews;",
                " import com.google.refine.util.ParsingUtilities;"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/DecoratedValue.java",
                "main/src/com/google/refine/browsing/facets/FacetConfig.java",
                "main/src/com/google/refine/browsing/facets/ListFacet.java",
                "main/src/com/google/refine/browsing/facets/NominalFacetChoice.java",
                "main/src/com/google/refine/browsing/facets/RangeFacet.java",
                "main/src/com/google/refine/browsing/facets/ScatterplotFacet.java",
                "main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "main/src/com/google/refine/util/SerializationFilters.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java",
                "main/tests/server/src/com/google/refine/tests/util/TestUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c96877a54ba6d5374018c021bee4c6acf638c4f7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543457731,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b569490eefdc3940187576aa4a559797958d00e9",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542643044,
            "hunks": 91,
            "message": "Migrate ProjectMetadata to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/ProjectManager.java b/main/src/com/google/refine/ProjectManager.java",
                "index 3f3ffe745..8b016d175 100644",
                "--- a/main/src/com/google/refine/ProjectManager.java",
                "+++ b/main/src/com/google/refine/ProjectManager.java",
                "@@ -49,5 +49,3 @@ import org.apache.commons.lang.exception.ExceptionUtils;",
                " import org.apache.tools.tar.TarOutputStream;",
                "-import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -57,2 +55,5 @@ import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.history.HistoryEntryManager;",
                "@@ -61,2 +62,3 @@ import com.google.refine.preference.PreferenceStore;",
                " import com.google.refine.preference.TopList;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -401,3 +403,3 @@ public abstract class ProjectManager {",
                "      */",
                "-    private boolean isValidUserMetadataDefinition(JSONObject placeHolderJsonObj) {",
                "+    private boolean isValidUserMetadataDefinition(ObjectNode placeHolderJsonObj) {",
                "         return (placeHolderJsonObj != null &&",
                "@@ -412,5 +414,5 @@ public abstract class ProjectManager {",
                "         // place holder",
                "-        JSONArray userMetadataPreference = null;",
                "+        ArrayNode userMetadataPreference = null;",
                "         // actual metadata for project",
                "-        JSONArray jsonObjArray = metadata.getUserMetadata();",
                "+        ArrayNode jsonObjArray = metadata.getUserMetadata();",
                "@@ -422,3 +424,3 @@ public abstract class ProjectManager {",
                "                 return;",
                "-            userMetadataPreference = new JSONArray(userMeta);",
                "+            userMetadataPreference = ParsingUtilities.mapper.createArrayNode();",
                "         } catch (JSONException e1) {",
                "@@ -428,31 +430,31 @@ public abstract class ProjectManager {",
                "-        for (int index = 0; index < userMetadataPreference.length(); index++) {",
                "-            try {",
                "-                boolean found = false;",
                "-                JSONObject placeHolderJsonObj = userMetadataPreference.getJSONObject(index);",
                "-                ",
                "-                if (!isValidUserMetadataDefinition(placeHolderJsonObj)) {",
                "-                    logger.warn(\"Skipped invalid user metadata definition\" + placeHolderJsonObj.toString());",
                "-                    continue;",
                "-                }",
                "+        for (int index = 0; index < userMetadataPreference.size(); index++) {",
                "+            boolean found = false;",
                "+            ObjectNode placeHolderJsonObj = (ObjectNode) userMetadataPreference.get(index);",
                "+            ",
                "+            if (!isValidUserMetadataDefinition(placeHolderJsonObj)) {",
                "+                logger.warn(\"Skipped invalid user metadata definition\" + placeHolderJsonObj.toString());",
                "+                continue;",
                "+            }",
                "-                for (int i = 0; i < jsonObjArray.length(); i++) {",
                "-                    JSONObject jsonObj = jsonObjArray.getJSONObject(i);",
                "-                    if (jsonObj.getString(\"name\").equals(placeHolderJsonObj.getString(\"name\"))) {",
                "-                        found = true;",
                "-                        jsonObj.put(\"display\", placeHolderJsonObj.get(\"display\"));",
                "-                        break;",
                "-                    }",
                "+            for (int i = 0; i < jsonObjArray.size(); i++) {",
                "+                JsonNode jsonObj = jsonObjArray.get(i);",
                "+                if (!(jsonObj instanceof ObjectNode)) {",
                "+                \tcontinue;",
                "+                }",
                "+                ObjectNode node = (ObjectNode)jsonObj;",
                "+                if (node.get(\"name\").asText(\"\").equals(placeHolderJsonObj.get(\"name\").asText(\"\"))) {",
                "+                    found = true;",
                "+                    node.put(\"display\", placeHolderJsonObj.get(\"display\"));",
                "+                    break;",
                "                 }",
                "-",
                "-                if (!found) {",
                "-                    placeHolderJsonObj.put(\"value\", \"\");",
                "-                    metadata.getUserMetadata().put(placeHolderJsonObj);",
                "-                    logger.info(\"Put the placeholder {} for project {}\",",
                "-                            placeHolderJsonObj.getString(\"name\"),",
                "-                            metadata.getName());",
                "-                } ",
                "-            } catch (JSONException e) {",
                "-                logger.warn(\"Exception when mergeEmptyUserMetadata\",e);",
                "             }",
                "+",
                "+            if (!found) {",
                "+                placeHolderJsonObj.put(\"value\", \"\");",
                "+                metadata.getUserMetadata().add(placeHolderJsonObj);",
                "+                logger.info(\"Put the placeholder {} for project {}\",",
                "+                        placeHolderJsonObj.get(\"name\").asText(\"\"),",
                "+                        metadata.getName());",
                "+            } ",
                "         }",
                "@@ -464,9 +466,7 @@ public abstract class ProjectManager {",
                "      */",
                "-    private void initDisplay(JSONArray jsonObjArray) {",
                "-        for (int index = 0; index < jsonObjArray.length(); index++) {",
                "-            try {",
                "-                JSONObject projectMetaJsonObj = jsonObjArray.getJSONObject(index);",
                "+    private void initDisplay(ArrayNode jsonObjArray) {",
                "+        for (int index = 0; index < jsonObjArray.size(); index++) {",
                "+            if (jsonObjArray.get(index) instanceof ObjectNode) {",
                "+                ObjectNode projectMetaJsonObj = (ObjectNode) jsonObjArray.get(index);",
                "                 projectMetaJsonObj.put(\"display\", false);",
                "-            } catch (JSONException e) {",
                "-                logger.error(ExceptionUtils.getFullStackTrace(e));",
                "             }",
                "diff --git a/main/src/com/google/refine/ProjectMetadata.java b/main/src/com/google/refine/ProjectMetadata.java",
                "index b5817f708..8b9c42306 100644",
                "--- a/main/src/com/google/refine/ProjectMetadata.java",
                "+++ b/main/src/com/google/refine/ProjectMetadata.java",
                "@@ -35,5 +35,2 @@ package com.google.refine;",
                "-import java.io.FileReader;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                " import java.io.Serializable;",
                "@@ -45,8 +42,4 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Properties;",
                " import org.apache.commons.lang.exception.ExceptionUtils;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -54,6 +47,11 @@ import org.slf4j.LoggerFactory;",
                "-import com.fasterxml.jackson.core.JsonParseException;",
                "-import com.fasterxml.jackson.databind.JsonMappingException;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonView;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.preference.PreferenceStore;",
                "+import com.google.refine.util.JsonViews;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -65,26 +63,58 @@ public class ProjectMetadata {",
                "+    @JsonProperty(\"created\")",
                "     private final LocalDateTime     _created;",
                "+    @JsonProperty(\"modified\")",
                "     private LocalDateTime           _modified;",
                "+    @JsonIgnore",
                "     private LocalDateTime written = null;",
                "+    @JsonProperty(\"name\")",
                "     private String         _name = \"\";",
                "+    @JsonProperty(\"password\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "     private String         _password = \"\";",
                "+    @JsonProperty(\"encoding\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "     private String _encoding = \"\";",
                "+    @JsonProperty(\"encodingConfidence\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "     private int _encodingConfidence;",
                "+    @JsonProperty(\"tags\")",
                "     private String[] _tags = new String[0];",
                "+    @JsonProperty(\"creator\")",
                "     private String _creator = \"\";",
                "+    @JsonProperty(\"contributors\")",
                "     private String _contributors = \"\";",
                "+    @JsonProperty(\"subject\")",
                "     private String _subject = \"\"; // Several refine projects may be linked",
                "+    @JsonProperty(\"description\")",
                "     private String _description = \"\"; // free form of comment",
                "+    @JsonProperty(\"rowCount\")",
                "     private int _rowCount; // at the creation. Essential for cleaning old projects too heavy",
                "+    ",
                "+    @JsonProperty(\"title\")",
                "+    private String _title = \"\";",
                "+    @JsonProperty(\"version\")",
                "+    private String _version = \"\";",
                "+    @JsonProperty(\"license\")",
                "+    private String license = \"\";",
                "+    @JsonProperty(\"homepage\")",
                "+    private String homepage = \"\";",
                "+    @JsonProperty(\"image\")",
                "+    private String image = \"\";",
                "     // import options is an array for 1-n data sources",
                "-    private JSONArray _importOptionMetadata = new JSONArray();",
                "+    @JsonProperty(\"importOptionMetadata\")",
                "+    private ArrayNode _importOptionMetadata = ParsingUtilities.mapper.createArrayNode();",
                "     // user metadata",
                "-    private JSONArray _userMetadata = new JSONArray();",
                "+    @JsonIgnore",
                "+    private ArrayNode _userMetadata = ParsingUtilities.mapper.createArrayNode();",
                "+    @JsonProperty(\"customMetadata\")",
                "     private Map<String, Serializable>   _customMetadata = new HashMap<String, Serializable>();",
                "+    @JsonProperty(\"preferences\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "     private PreferenceStore             _preferenceStore = new PreferenceStore();",
                "@@ -108,7 +138,4 @@ public class ProjectMetadata {",
                "     }",
                "-",
                "-    private boolean isSaveMode(Properties options) {",
                "-        return \"save\".equals(options.getProperty(\"mode\"));",
                "-    }",
                "-",
                "+    ",
                "+    @JsonIgnore",
                "     public boolean isDirty() {",
                "@@ -122,2 +149,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public LocalDateTime getCreated() {",
                "@@ -126,2 +154,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setName(String name) {",
                "@@ -131,2 +160,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public String getName() {",
                "@@ -135,2 +165,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setEncoding(String encoding) {",
                "@@ -140,2 +171,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public String getEncoding() {",
                "@@ -144,2 +176,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setEncodingConfidence(int confidence) {",
                "@@ -149,2 +182,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setEncodingConfidence(String confidence) {",
                "@@ -155,2 +189,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public int getEncodingConfidence() {",
                "@@ -159,2 +194,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setTags(String[] tags) {",
                "@@ -179,2 +215,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public String[] getTags() {",
                "@@ -184,2 +221,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setPassword(String password) {",
                "@@ -189,2 +227,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public String getPassword() {",
                "@@ -193,2 +232,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public  LocalDateTime getModified() {",
                "@@ -197,2 +237,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void updateModified() {",
                "@@ -201,2 +242,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public PreferenceStore getPreferenceStore() {",
                "@@ -205,2 +247,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public Serializable getCustomMetadata(String key) {",
                "@@ -218,3 +261,4 @@ public class ProjectMetadata {",
                "-    public JSONArray getImportOptionMetadata() {",
                "+    @JsonIgnore",
                "+    public ArrayNode getImportOptionMetadata() {",
                "         return _importOptionMetadata;",
                "@@ -222,3 +266,4 @@ public class ProjectMetadata {",
                "-    public void setImportOptionMetadata(JSONArray jsonArray) {",
                "+    @JsonIgnore",
                "+    public void setImportOptionMetadata(ArrayNode jsonArray) {",
                "         _importOptionMetadata = jsonArray;",
                "@@ -228,3 +273,3 @@ public class ProjectMetadata {",
                "     public void appendImportOptionMetadata(ObjectNode options) {",
                "-        _importOptionMetadata.put(options);",
                "+        _importOptionMetadata.add(options);",
                "         updateModified();",
                "@@ -232,2 +277,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public String getCreator() {",
                "@@ -236,2 +282,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setCreator(String creator) {",
                "@@ -241,2 +288,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public String getContributors() {",
                "@@ -245,2 +293,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setContributors(String contributors) {",
                "@@ -250,2 +299,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public String getSubject() {",
                "@@ -254,2 +304,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setSubject(String subject) {",
                "@@ -259,2 +310,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public String getDescription() {",
                "@@ -263,2 +315,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setDescription(String description) {",
                "@@ -268,2 +321,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public int getRowCount() {",
                "@@ -272,2 +326,3 @@ public class ProjectMetadata {",
                "+    @JsonIgnore",
                "     public void setRowCount(int rowCount) {",
                "@@ -277,7 +332,18 @@ public class ProjectMetadata {",
                "-    public JSONArray getUserMetadata() {",
                "+    @JsonIgnore",
                "+    public ArrayNode getUserMetadata() {",
                "         return _userMetadata;",
                "     }",
                "+    ",
                "+    @JsonProperty(\"userMetadata\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public ArrayNode getUserMetadataJson() {",
                "+    \tif (_userMetadata != null && _userMetadata.size() > 0) {",
                "+    \t\treturn _userMetadata;",
                "+    \t}",
                "+    \treturn null;",
                "+    }",
                "-    public void setUserMetadata(JSONArray userMetadata) {",
                "+    @JsonIgnore",
                "+    public void setUserMetadata(ArrayNode userMetadata) {",
                "         this._userMetadata = userMetadata;",
                "@@ -286,10 +352,6 @@ public class ProjectMetadata {",
                "     private void updateUserMetadata(String metaName, String valueString) {",
                "-        for (int i = 0; i < _userMetadata.length(); i++) {",
                "-            try {",
                "-                JSONObject obj = _userMetadata.getJSONObject(i);",
                "-                if (obj.getString(\"name\").equals(metaName)) {",
                "-                    obj.put(\"value\", valueString);",
                "-                }",
                "-            } catch (JSONException e) {",
                "-                logger.error(ExceptionUtils.getFullStackTrace(e));",
                "+        for (int i = 0; i < _userMetadata.size(); i++) {",
                "+            ObjectNode obj = (ObjectNode)_userMetadata.get(i);",
                "+            if (obj.get(\"name\").asText(\"\").equals(metaName)) {",
                "+                obj.put(\"value\", valueString);",
                "             }",
                "@@ -313,7 +375,2 @@ public class ProjectMetadata {",
                "     }",
                "-",
                "-\tpublic static ProjectMetadata loadFromStream(InputStream f) throws IOException {",
                "-\t\treturn ParsingUtilities.mapper.readValue(f, ProjectMetadata.class);",
                "-\t}",
                "-",
                " }",
                "diff --git a/main/src/com/google/refine/io/ProjectMetadataUtilities.java b/main/src/com/google/refine/io/ProjectMetadataUtilities.java",
                "index 05da2edaf..63601f3c9 100644",
                "--- a/main/src/com/google/refine/io/ProjectMetadataUtilities.java",
                "+++ b/main/src/com/google/refine/io/ProjectMetadataUtilities.java",
                "@@ -164,4 +164,3 @@ public class ProjectMetadataUtilities {",
                "         FileReader reader = new FileReader(metadataFile);",
                "-        return ProjectMetadata.loadFromStream(reader);",
                "-",
                "+        return ParsingUtilities.mapper.readValue(reader, ProjectMetadata.class);",
                "     }",
                "diff --git a/main/src/com/google/refine/model/Column.java b/main/src/com/google/refine/model/Column.java",
                "index e32c80207..1e903742d 100644",
                "--- a/main/src/com/google/refine/model/Column.java",
                "+++ b/main/src/com/google/refine/model/Column.java",
                "@@ -68,3 +68,3 @@ public class Column  {",
                "     private String type = \"\";",
                "-    private String format = \"\";",
                "+    private String format = \"default\";",
                "     private String title = \"\";",
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index a73f8279c..39fd315e8 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -86,2 +86,3 @@ public class ParsingUtilities {",
                "         module.addSerializer(LocalDateTime.class, new SerializationFilters.LocalDateSerializer());",
                "+        module.addDeserializer(LocalDateTime.class, new SerializationFilters.LocalDateDeserializer());",
                "diff --git a/main/src/com/google/refine/util/SerializationFilters.java b/main/src/com/google/refine/util/SerializationFilters.java",
                "index 37902617d..e4482b7c4 100644",
                "--- a/main/src/com/google/refine/util/SerializationFilters.java",
                "+++ b/main/src/com/google/refine/util/SerializationFilters.java",
                "@@ -7,3 +7,7 @@ import java.time.OffsetDateTime;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "+import com.fasterxml.jackson.core.JsonParser;",
                "+import com.fasterxml.jackson.core.JsonProcessingException;",
                "+import com.fasterxml.jackson.databind.DeserializationContext;",
                " import com.fasterxml.jackson.databind.SerializerProvider;",
                "+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;",
                " import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;",
                "@@ -122,2 +126,16 @@ public class SerializationFilters {",
                "     }",
                "+    ",
                "+    public static class LocalDateDeserializer extends StdDeserializer<LocalDateTime> {",
                "+        private static final long serialVersionUID = 93872874L;",
                "+",
                "+        public LocalDateDeserializer() {",
                "+            super(LocalDateTime.class);",
                "+        }",
                "+",
                "+\t\t@Override",
                "+\t\tpublic LocalDateTime deserialize(JsonParser p, DeserializationContext ctxt)",
                "+\t\t\t\tthrows IOException, JsonProcessingException {",
                "+\t\t\treturn ParsingUtilities.stringToLocalDate(p.getValueAsString());",
                "+\t\t}       ",
                "+    }",
                " }",
                "diff --git a/main/tests/data/example_project_metadata.json b/main/tests/data/example_project_metadata.json",
                "index 016955776..a9507fe8b 100644",
                "--- a/main/tests/data/example_project_metadata.json",
                "+++ b/main/tests/data/example_project_metadata.json",
                "@@ -1 +1 @@",
                "-{\"_customMetadata\":{},\"created\":\"2018-10-12T10:24:28Z\",\"tags\":[],\"importOptionMetadata\":[{\"guessCellValueTypes\":false,\"projectTags\":[\"\"],\"ignoreLines\":-1,\"processQuotes\":true,\"fileSource\":\"query.tsv\",\"encoding\":\"\",\"separator\":\"\\\\t\",\"storeBlankCellsAsNulls\":true,\"storeBlankRows\":true,\"skipDataLines\":0,\"includeFileSources\":false,\"headerLines\":1,\"limit\":-1,\"quoteCharacter\":\"\\\"\",\"projectName\":\"CPVs\"}],\"creator\":\"\",\"contributors\":\"\",\"subject\":\"\",\"rowCount\":289,\"preferenceStore\":{\"entries\":{\"scripting.starred-expressions\":{\"top\":2147483647,\"list\":[],\"class\":\"com.google.refine.preference.TopList\"},\"scripting.expressions\":{\"top\":100,\"list\":[],\"class\":\"com.google.refine.preference.TopList\"}}},\"modified\":\"2018-10-12T10:51:41Z\",\"description\":\"\",\"name\":\"CPVs\",\"dirty\":false,\"title\":\"\",\"homepage\":\"\",\"image\":\"\",\"license\":\"\",\"version\":\"\"}",
                "+{\"name\":\"numeric facet test\",\"tags\":[],\"created\":\"2018-09-04T16:07:31Z\",\"modified\":\"2018-09-04T17:02:31Z\",\"creator\":\"\",\"contributors\":\"\",\"subject\":\"\",\"description\":\"\",\"rowCount\":4,\"title\":\"\",\"homepage\":\"\",\"image\":\"\",\"license\":\"\",\"version\":\"\",\"customMetadata\":{},\"importOptionMetadata\":[{\"guessCellValueTypes\":false,\"projectTags\":[\"\"],\"ignoreLines\":-1,\"processQuotes\":true,\"fileSource\":\"(clipboard)\",\"encoding\":\"\",\"separator\":\"\\\\t\",\"storeBlankCellsAsNulls\":true,\"storeBlankRows\":true,\"skipDataLines\":0,\"includeFileSources\":false,\"headerLines\":1,\"limit\":-1,\"quoteCharacter\":\"\\\"\",\"projectName\":\"numeric facet test\"}]}",
                "diff --git a/main/tests/data/example_project_metadata_save_mode.json b/main/tests/data/example_project_metadata_save_mode.json",
                "new file mode 100644",
                "index 000000000..84d4e0490",
                "--- /dev/null",
                "+++ b/main/tests/data/example_project_metadata_save_mode.json",
                "@@ -0,0 +1 @@",
                "+{\"name\":\"numeric facet test\",\"tags\":[],\"created\":\"2018-09-04T16:07:31Z\",\"modified\":\"2018-09-04T17:02:31Z\",\"creator\":\"\",\"contributors\":\"\",\"subject\":\"\",\"description\":\"\",\"rowCount\":4,\"title\":\"\",\"homepage\":\"\",\"image\":\"\",\"license\":\"\",\"version\":\"\",\"customMetadata\":{},\"importOptionMetadata\":[{\"guessCellValueTypes\":false,\"projectTags\":[\"\"],\"ignoreLines\":-1,\"processQuotes\":true,\"fileSource\":\"(clipboard)\",\"encoding\":\"\",\"separator\":\"\\\\t\",\"storeBlankCellsAsNulls\":true,\"storeBlankRows\":true,\"skipDataLines\":0,\"includeFileSources\":false,\"headerLines\":1,\"limit\":-1,\"quoteCharacter\":\"\\\"\",\"projectName\":\"numeric facet test\"}],\"password\":\"\",\"encoding\":\"UTF-8\",\"encodingConfidence\":0,\"preferences\":{\"entries\":{\"scripting.starred-expressions\":{\"class\":\"com.google.refine.preference.TopList\",\"top\":2147483647,\"list\":[]},\"scripting.expressions\":{\"class\":\"com.google.refine.preference.TopList\",\"top\":100,\"list\":[]}}}}",
                "\\ No newline at end of file",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/project/SetProjectMetadataCommandTests.java b/main/tests/server/src/com/google/refine/tests/commands/project/SetProjectMetadataCommandTests.java",
                "index 0e8ae9a2c..c88ad23b8 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/commands/project/SetProjectMetadataCommandTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/project/SetProjectMetadataCommandTests.java",
                "@@ -35,3 +35,3 @@ package com.google.refine.tests.commands.project;",
                "-import static org.mockito.Matchers.anyLong;",
                "+import static org.mockito.ArgumentMatchers.anyLong;",
                " import static org.mockito.Mockito.mock;",
                "@@ -48,5 +48,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -58,2 +55,4 @@ import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.ProjectManager;",
                "@@ -63,2 +62,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -88,3 +88,3 @@ public class SetProjectMetadataCommandTests extends RefineTest {",
                "     @BeforeMethod",
                "-    public void SetUp() throws JSONException {",
                "+    public void SetUp() throws IOException {",
                "         projMan = mock(ProjectManager.class);",
                "@@ -99,3 +99,3 @@ public class SetProjectMetadataCommandTests extends RefineTest {",
                "         ProjectMetadata metadata = new ProjectMetadata();",
                "-        metadata.setUserMetadata(new JSONArray(\"[ {name: clientID, display: true} ]\"));",
                "+        metadata.setUserMetadata((ArrayNode) ParsingUtilities.mapper.readTree(\"[ {name: \\\"clientID\\\", display: true} ]\"));",
                "@@ -164,3 +164,3 @@ public class SetProjectMetadataCommandTests extends RefineTest {",
                "     @Test",
                "-    public void setUserMetadataFieldTest() throws JSONException {",
                "+    public void setUserMetadataFieldTest() {",
                "         when(request.getParameter(\"name\")).thenReturn(\"clientID\");",
                "@@ -191,5 +191,5 @@ public class SetProjectMetadataCommandTests extends RefineTest {",
                "-        JSONObject obj = (JSONObject) proj.getMetadata().getUserMetadata().get(0);",
                "-        Assert.assertEquals(obj.get(\"name\"), \"clientID\");",
                "-        Assert.assertEquals(obj.get(\"value\"), \"IBM\");",
                "+        ObjectNode obj = (ObjectNode) proj.getMetadata().getUserMetadata().get(0);",
                "+        Assert.assertEquals(obj.get(\"name\").asText(), \"clientID\");",
                "+        Assert.assertEquals(obj.get(\"value\").asText(), \"IBM\");",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java b/main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java",
                "index 053550d4a..059134120 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java",
                "@@ -27,3 +27,3 @@ import com.google.refine.util.ParsingUtilities;",
                "-abstract class ImporterTest extends RefineTest {",
                "+public abstract class ImporterTest extends RefineTest {",
                "     //mock dependencies",
                "diff --git a/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java b/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java",
                "index e25e8aeaf..8112523db 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java",
                "@@ -7,5 +7,5 @@ import org.apache.commons.io.IOUtils;",
                " import org.testng.annotations.Test;",
                "-",
                "-import com.google.refine.model.metadata.ProjectMetadata;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "+import com.google.refine.ProjectMetadata;",
                "@@ -14,8 +14,11 @@ public class ProjectMetadataTests {",
                " \tpublic void serializeProjectMetadata() throws IOException {",
                "-\t\tProjectMetadata metadata = new ProjectMetadata();",
                " \t\tInputStream f = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata.json\");",
                " \t\tString json = IOUtils.toString(f);",
                "-\t\tf = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata.json\");",
                "-        metadata.loadFromStream(f);",
                "+\t\tf = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata_save_mode.json\");",
                "+\t\tString fullJson = IOUtils.toString(f);",
                "+\t\t",
                "+\t\tf = ProjectMetadataTests.class.getClassLoader().getResourceAsStream(\"example_project_metadata_save_mode.json\");",
                "+        ProjectMetadata metadata = ParsingUtilities.mapper.readValue(f, ProjectMetadata.class);",
                "         TestUtils.isSerializedTo(metadata, json);",
                "+        TestUtils.isSerializedTo(metadata, fullJson, true);",
                " \t}"
            ],
            "changed_files": [
                "main/src/com/google/refine/ProjectManager.java",
                "main/src/com/google/refine/ProjectMetadata.java",
                "main/src/com/google/refine/io/ProjectMetadataUtilities.java",
                "main/src/com/google/refine/model/Column.java",
                "main/src/com/google/refine/util/ParsingUtilities.java",
                "main/src/com/google/refine/util/SerializationFilters.java",
                "main/tests/data/example_project_metadata.json",
                "main/tests/data/example_project_metadata_save_mode.json",
                "main/tests/server/src/com/google/refine/tests/commands/project/SetProjectMetadataCommandTests.java",
                "main/tests/server/src/com/google/refine/tests/importers/ImporterTest.java",
                "main/tests/server/src/com/google/refine/tests/io/ProjectMetadataTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c4caf1eba73bf721011aa18f93e0c8991d39a6eb",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540198034,
            "hunks": 13,
            "message": "Jackson deserialization for TimeRangeFacetConfig",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java b/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "index c1042f116..38afab3c1 100644",
                "--- a/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "@@ -75,5 +75,5 @@ public class TimeRangeFacet implements Facet {",
                "         @JsonProperty(FROM)",
                "-        protected double      _from; // the numeric selection",
                "+        protected double      _from = 0; // the numeric selection",
                "         @JsonProperty(TO)",
                "-        protected double      _to;",
                "+        protected double      _to = 0;",
                "@@ -88,27 +88,8 @@ public class TimeRangeFacet implements Facet {",
                "+        // false if we're certain that all rows will match",
                "+        // and there isn't any filtering to do",
                "         @JsonIgnore",
                "-        protected boolean    _selected; // false if we're certain that all rows will match",
                "-                        // and there isn't any filtering to do",
                "-        ",
                "-        @Override",
                "-        public void initializeFromJSON(JSONObject o) throws JSONException {        ",
                "-            _name = o.getString(\"name\");",
                "-            _expression = o.getString(\"expression\");",
                "-            _columnName = o.getString(\"columnName\");",
                "-            ",
                "-            if (o.has(FROM) || o.has(TO)) {",
                "-                _from = o.has(FROM) ? o.getDouble(FROM) : 0;",
                "-                _to = o.has(TO) ? o.getDouble(TO) : 0;",
                "-                _selected = true;",
                "-            }",
                "-            ",
                "-            _selectTime = JSONUtilities.getBoolean(o, \"selectTime\", true);",
                "-            _selectNonTime = JSONUtilities.getBoolean(o, \"selectNonTime\", true);",
                "-            _selectBlank = JSONUtilities.getBoolean(o, \"selectBlank\", true);",
                "-            _selectError = JSONUtilities.getBoolean(o, \"selectError\", true);",
                "-            ",
                "-            if (!_selectTime || !_selectNonTime || !_selectBlank || !_selectError) {",
                "-                _selected = true;",
                "-            }",
                "-        }",
                "+        protected boolean isSelected() {",
                "+            return _from != 0 || _to != 0 || !_selectTime || !_selectNonTime || !_selectBlank || !_selectError;",
                "+        }; ",
                "@@ -270,3 +251,3 @@ public class TimeRangeFacet implements Facet {",
                "     public RowFilter getRowFilter(Project project) {",
                "-        if (_eval != null && _errorMessage == null && _config._selected) {",
                "+        if (_eval != null && _errorMessage == null && _config.isSelected()) {",
                "             return new ExpressionTimeComparisonRowFilter(",
                "@@ -340,3 +321,3 @@ public class TimeRangeFacet implements Facet {",
                "-        if (_config._selected) {",
                "+        if (_config.isSelected()) {",
                "             _config._from = Math.max(_config._from, _min);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java",
                "index 16794c035..a0741a03c 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java",
                "@@ -2,7 +2,10 @@ package com.google.refine.tests.browsing.facets;",
                "+import java.io.IOException;",
                " import java.time.OffsetDateTime;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -14,2 +17,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -52,5 +56,4 @@ public class TimeRangeFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeTimeRangeFacetConfig() {",
                "-        TimeRangeFacetConfig config = new TimeRangeFacetConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+    public void serializeTimeRangeFacetConfig() throws JsonParseException, JsonMappingException, IOException {",
                "+        TimeRangeFacetConfig config = ParsingUtilities.mapper.readValue(configJson, TimeRangeFacetConfig.class);",
                "         TestUtils.isSerializedTo(config, configJson);",
                "@@ -59,3 +62,3 @@ public class TimeRangeFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeTimeRangeFacet() {",
                "+    public void serializeTimeRangeFacet() throws JsonParseException, JsonMappingException, IOException {",
                "         Project project = createCSVProject(\"my column\\n\"",
                "@@ -70,4 +73,3 @@ public class TimeRangeFacetTests extends RefineTest {",
                "         Engine engine = new Engine(project);",
                "-        TimeRangeFacetConfig config = new TimeRangeFacetConfig();",
                "-        config.initializeFromJSON(new JSONObject(configJson));",
                "+        TimeRangeFacetConfig config = ParsingUtilities.mapper.readValue(configJson, TimeRangeFacetConfig.class);",
                "         TimeRangeFacet facet = config.apply(project);"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/facets/TimeRangeFacet.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/TimeRangeFacetTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a05b1bcad321c1f37307574d9c817385e1be2edd",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540204801,
            "hunks": 6,
            "message": "Jackson deserialization for ColumnRemovalOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java b/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "index 8e48c87de..2d90a32ae 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "@@ -35,4 +35,7 @@ package com.google.refine.operations.column;",
                "+import java.io.IOException;",
                "+",
                " import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -45,2 +48,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.model.changes.ColumnRemovalChange;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -49,9 +53,9 @@ public class ColumnRemovalOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return new ColumnRemovalOperation(",
                "-            obj.getString(\"columnName\")",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnRemovalOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public ColumnRemovalOperation(",
                "+        @JsonProperty(\"columnName\")",
                "         String columnName"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/column/ColumnRemovalOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9219ef36aa2c42bf95e0a002b31c8324ecc03414",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538752807,
            "hunks": 31,
            "message": "Jackson serialization for the remaining commands",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/Command.java b/main/src/com/google/refine/commands/Command.java",
                "index 39415f4d9..7664c977c 100644",
                "--- a/main/src/com/google/refine/commands/Command.java",
                "+++ b/main/src/com/google/refine/commands/Command.java",
                "@@ -48,3 +48,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -53,2 +52,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "@@ -292,7 +292,7 @@ public abstract class Command {",
                "         Writer w = response.getWriter();",
                "-        JSONWriter writer = new JSONWriter(w);",
                "-        writer.object();",
                "-        writer.key(\"status\"); writer.value(status);",
                "-        writer.key(\"message\"); writer.value(message);",
                "-        writer.endObject();",
                "+        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "+        writer.writeStartObject();",
                "+        writer.writeStringField(\"status\", status);",
                "+        writer.writeStringField(\"message\", message);",
                "+        writer.writeEndObject();",
                "         w.flush();",
                "@@ -345,5 +345,10 @@ public abstract class Command {",
                "         try {",
                "-            JSONObject o = new JSONObject();",
                "-            o.put(\"code\", \"error\");",
                "-            o.put(\"message\", e.getMessage());",
                "+            response.setCharacterEncoding(\"UTF-8\");",
                "+            response.setHeader(\"Content-Type\", \"application/json\");",
                "+            ",
                "+            Writer w = response.getWriter();",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "+            writer.writeStartObject();",
                "+            writer.writeStringField(\"code\", \"error\");   ",
                "+            writer.writeStringField(\"message\", e.getMessage());",
                "@@ -355,7 +360,6 @@ public abstract class Command {",
                "-            o.put(\"stack\", sw.toString());",
                "-",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            respond(response, o.toString());",
                "+            writer.writeStringField(\"stack\", sw.toString());",
                "+            writer.writeEndObject();",
                "+            w.flush();",
                "+            w.close();",
                "         } catch (JSONException e1) {",
                "diff --git a/main/src/com/google/refine/commands/GetAllPreferencesCommand.java b/main/src/com/google/refine/commands/GetAllPreferencesCommand.java",
                "index 8b2c6bc74..cdf641e08 100644",
                "--- a/main/src/com/google/refine/commands/GetAllPreferencesCommand.java",
                "+++ b/main/src/com/google/refine/commands/GetAllPreferencesCommand.java",
                "@@ -36,2 +36,4 @@ package com.google.refine.commands;",
                " import java.io.IOException;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "@@ -41,5 +43,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.ProjectManager;",
                "@@ -58,22 +57,12 @@ public class GetAllPreferencesCommand extends Command {",
                "-        try {",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            ",
                "-            writer.object();",
                "-            ",
                "-            for (String key : ps.getKeys()) {",
                "-                Object pref = ps.get(key);",
                "-                if (pref == null || pref instanceof String || pref instanceof Number || pref instanceof Boolean) {",
                "-                    writer.key(key);",
                "-                    writer.value(pref);",
                "-                }",
                "+        Map<String, Object> map = new HashMap<>();",
                "+        ",
                "+        for (String key : ps.getKeys()) {",
                "+            Object pref = ps.get(key);",
                "+            if (pref == null || pref instanceof String || pref instanceof Number || pref instanceof Boolean) {",
                "+                map.put(key, pref);",
                "             }",
                "-            ",
                "-            writer.endObject();",
                "-        } catch (JSONException e) {",
                "-            respondException(response, e);",
                "         }",
                "+        ",
                "+        respondJSON(response, map);",
                "     }",
                "diff --git a/main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java b/main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java",
                "index 3d920d145..9759a80ae 100644",
                "--- a/main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java",
                "@@ -57,3 +57,6 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -68,2 +71,23 @@ public class GuessTypesOfColumnCommand extends Command {",
                "+    ",
                "+    protected static class TypesResponse {",
                "+        @JsonProperty(\"code\")",
                "+        protected String code;",
                "+        @JsonProperty(\"message\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        protected String message;",
                "+        @JsonProperty(\"types\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        List<TypeGroup> types;",
                "+        ",
                "+        protected TypesResponse(",
                "+                String code,",
                "+                String message,",
                "+                List<TypeGroup> types) {",
                "+            this.code = code;",
                "+            this.message = message;",
                "+            this.types = types;",
                "+        }",
                "+    }",
                "+    ",
                "     @Override",
                "@@ -77,31 +101,10 @@ public class GuessTypesOfColumnCommand extends Command {",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            writer.object();",
                "-            ",
                "             Column column = project.columnModel.getColumnByName(columnName);",
                "             if (column == null) {",
                "-                writer.key(\"code\"); writer.value(\"error\");",
                "-                writer.key(\"message\"); writer.value(\"No such column\");",
                "+                respondJSON(response, new TypesResponse(\"error\", \"No such column\", null));",
                "             } else {",
                "-                    List<TypeGroup> typeGroups = guessTypes(project, column, serviceUrl);",
                "-                    ",
                "-                    writer.key(\"code\"); writer.value(\"ok\");",
                "-                    writer.key(\"types\"); writer.array();         ",
                "-                    ",
                "-                    for (TypeGroup tg : typeGroups) {",
                "-                        writer.object();",
                "-                        writer.key(\"id\"); writer.value(tg.id);",
                "-                        writer.key(\"name\"); writer.value(tg.name);",
                "-                        writer.key(\"score\"); writer.value(tg.score);",
                "-                        writer.key(\"count\"); writer.value(tg.count);",
                "-                        writer.endObject();",
                "-                    }",
                "-                    ",
                "-                    writer.endArray();",
                "+                List<TypeGroup> typeGroups = guessTypes(project, column, serviceUrl);",
                "+                respondJSON(response, new TypesResponse(\"ok\", null, typeGroups));   ",
                "             }",
                "-            ",
                "-            writer.endObject();",
                "+",
                "         } catch (Exception e) {",
                "@@ -113,2 +116,14 @@ public class GuessTypesOfColumnCommand extends Command {",
                "+    protected static class IndividualQuery {",
                "+        @JsonProperty(\"query\")",
                "+        protected String query;",
                "+        @JsonProperty(\"limit\")",
                "+        protected int limit;",
                "+        ",
                "+        protected IndividualQuery(String query, int limit) {",
                "+            this.query = query;",
                "+            this.limit = limit;",
                "+        }",
                "+    }",
                "+    ",
                "     /**",
                "@@ -146,21 +161,8 @@ public class GuessTypesOfColumnCommand extends Command {",
                "-        StringWriter stringWriter = new StringWriter();",
                "-        try {",
                "-            JSONWriter jsonWriter = new JSONWriter(stringWriter);",
                "-            jsonWriter.object();",
                "-            for (int i = 0; i < samples.size(); i++) {",
                "-                jsonWriter.key(\"q\" + i);",
                "-                jsonWriter.object();",
                "-                ",
                "-                jsonWriter.key(\"query\"); jsonWriter.value(samples.get(i));",
                "-                jsonWriter.key(\"limit\"); jsonWriter.value(3);",
                "-                ",
                "-                jsonWriter.endObject();",
                "-            }",
                "-            jsonWriter.endObject();",
                "-        } catch (JSONException e) {",
                "-            logger.error(\"Error constructing query\", e);",
                "+        Map<String, IndividualQuery> queryMap = new HashMap<>();",
                "+        for (int i = 0; i < samples.size(); i++) {",
                "+            queryMap.put(\"q\" + i, new IndividualQuery(samples.get(i), 3));",
                "         }",
                "-        String queriesString = stringWriter.toString();",
                "+        String queriesString = ParsingUtilities.defaultWriter.writeValueAsString(queryMap);",
                "         try {",
                "@@ -266,6 +268,10 @@ public class GuessTypesOfColumnCommand extends Command {",
                "     static protected class TypeGroup {",
                "-        String id;",
                "-        String name;",
                "-        int count;",
                "-        double score;",
                "+        @JsonProperty(\"id\")",
                "+        protected String id;",
                "+        @JsonProperty(\"name\")",
                "+        protected String name;",
                "+        @JsonProperty(\"count\")",
                "+        protected int count;",
                "+        @JsonProperty(\"score\")",
                "+        protected double score;",
                "diff --git a/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java b/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "index f0c6906a7..c8d13a2aa 100644",
                "--- a/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "@@ -48,3 +48,4 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.json.JSONArray;",
                "-import org.json.JSONWriter;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -66,2 +67,15 @@ public class PreviewExtendDataCommand extends Command {",
                "+    protected static class PreviewResponse {",
                "+        public PreviewResponse(List<ColumnInfo> columns2, List<List<Object>> rows2) {",
                "+            columns = columns2;",
                "+            rows = rows2;",
                "+        }",
                "+        @JsonProperty(\"code\")",
                "+        protected String code = \"ok\";",
                "+        @JsonProperty(\"columns\")",
                "+        protected List<ColumnInfo> columns;",
                "+        @JsonProperty(\"rows\")",
                "+        protected List<List<Object>> rows;",
                "+    }",
                "+    ",
                "     @Override",
                "@@ -124,73 +138,41 @@ public class PreviewExtendDataCommand extends Command {",
                "             Map<String, DataExtension> map = job.extend(ids, reconCandidateMap);",
                "-            ",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            writer.object();",
                "-            writer.key(\"code\"); writer.value(\"ok\");",
                "-            writer.key(\"columns\");",
                "-                writer.array();",
                "-                for (ColumnInfo info : job.columns) {",
                "-                    writer.object();",
                "-                    writer.key(\"name\");",
                "-\t\t    writer.value(info.name);",
                "-                    writer.key(\"id\");",
                "-\t\t    writer.value(info.id);",
                "-\t\t    writer.endObject();",
                "-                }",
                "-                writer.endArray();",
                "-            ",
                "-            writer.key(\"rows\");",
                "-                writer.array();",
                "-                for (int r = 0; r < topicNames.size(); r++) {",
                "-                    String id = topicIds.get(r);",
                "-                    String topicName = topicNames.get(r);",
                "+            List<List<Object>> rows = new ArrayList<>();",
                "+",
                "+            for (int r = 0; r < topicNames.size(); r++) {",
                "+                String id = topicIds.get(r);",
                "+                String topicName = topicNames.get(r);",
                "+                ",
                "+                if (id != null && map.containsKey(id)) {",
                "+                    DataExtension ext = map.get(id);",
                "+                    boolean first = true;",
                "-                    if (id != null && map.containsKey(id)) {",
                "-                        DataExtension ext = map.get(id);",
                "-                        boolean first = true;",
                "-                        ",
                "-                        if (ext.data.length > 0) {",
                "-                            for (Object[] row : ext.data) {",
                "-                                writer.array();",
                "-                                if (first) {",
                "-                                    writer.value(topicName);",
                "-                                    first = false;",
                "-                                } else {",
                "-                                    writer.value(null);",
                "-                                }",
                "-                                ",
                "-                                for (Object cell : row) {",
                "-                                    if (cell != null && cell instanceof ReconCandidate) {",
                "-                                        ReconCandidate rc = (ReconCandidate) cell;",
                "-                                        writer.object();",
                "-                                        writer.key(\"id\"); writer.value(rc.id);",
                "-                                        writer.key(\"name\"); writer.value(rc.name);",
                "-                                        writer.endObject();",
                "-                                    } else {",
                "-                                        writer.value(cell);",
                "-                                    }",
                "-                                }",
                "-                                ",
                "-                                writer.endArray();",
                "+                    if (ext.data.length > 0) {",
                "+                        for (Object[] row : ext.data) {",
                "+                            List<Object> jsonRow = new ArrayList<>();",
                "+                            if (first) {",
                "+                                jsonRow.add(topicName);",
                "+                                first = false;",
                "+                            } else {",
                "+                                jsonRow.add(null);",
                "+                            }",
                "+                            ",
                "+                            for (Object cell : row) {",
                "+                                jsonRow.add(cell);",
                "                             }",
                "-                            continue;",
                "+                            rows.add(jsonRow);",
                "                         }",
                "+                        continue;",
                "                     }",
                "-                    ",
                "-                    writer.array();",
                "-                    if (id != null) {",
                "-                        writer.object();",
                "-                        writer.key(\"id\"); writer.value(id);",
                "-                        writer.key(\"name\"); writer.value(topicName);",
                "-                        writer.endObject();",
                "-                    } else {",
                "-                        writer.value(\"<not reconciled>\");",
                "-                    }",
                "-                    writer.endArray();",
                "                 }",
                "-                writer.endArray();",
                "-            writer.endObject();",
                "+                List<Object> supplement = new ArrayList<>();",
                "+                if (id != null) {",
                "+                    supplement.add(new ReconCandidate(id, topicName, new String[0], 100));",
                "+                } else {",
                "+                    supplement.add(\"<not reconciled>\");",
                "+                }",
                "+                rows.add(supplement);",
                "+            }",
                "+            ",
                "+            respondJSON(response, new PreviewResponse(job.columns, rows));",
                "         } catch (Exception e) {",
                "diff --git a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "index 83c78e538..47f575600 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "@@ -143,4 +143,7 @@ public class ReconciledDataExtensionJob {",
                "+    // Json serialization is used in PreviewExtendDataCommand",
                "     static public class ColumnInfo {",
                "+        @JsonProperty(\"name\")",
                "         final public String name;",
                "+        @JsonProperty(\"id\")",
                "         final public String id;",
                "@@ -322,3 +325,3 @@ public class ReconciledDataExtensionJob {",
                "     static protected void formulateQuery(Set<String> ids, DataExtensionConfig node, Writer writer) throws IOException {",
                "-        DataExtensionQuery query = new DataExtensionQuery(ids.stream().collect(Collectors.toList()), node.properties);",
                "+        DataExtensionQuery query = new DataExtensionQuery(ids.stream().filter(e -> e != null).collect(Collectors.toList()), node.properties);",
                "         ParsingUtilities.saveWriter.writeValue(writer, query);"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/Command.java",
                "main/src/com/google/refine/commands/GetAllPreferencesCommand.java",
                "main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java",
                "main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "32806ce5a7a04f4ede7fe7794733e4b551d313d6",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544163347,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f02b3edd0b35dada39c3bf17c6871f0e70abc493",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542647395,
            "hunks": 2,
            "message": "Remove unnecessary reference to JSONException in TextSearchFacet",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/facets/TextSearchFacet.java b/main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "index 12e159565..4df79593a 100644",
                "--- a/main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/TextSearchFacet.java",
                "@@ -37,4 +37,2 @@ import java.util.regex.Pattern;",
                "-import org.json.JSONException;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -140,3 +138,3 @@ public class TextSearchFacet implements Facet {",
                "                     PatternSyntaxExceptionParser err = new PatternSyntaxExceptionParser(e);",
                "-                    throw new JSONException(err.getUserMessage());",
                "+                    throw new IllegalArgumentException(err.getUserMessage());",
                "                 }"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/facets/TextSearchFacet.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "adb2e13874d28f005a70ce9b82700400ca8f9032",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540139323,
            "hunks": 4,
            "message": "Jackson deserialization for Cell",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/Cell.java b/main/src/com/google/refine/model/Cell.java",
                "index 33d71b922..43175da11 100644",
                "--- a/main/src/com/google/refine/model/Cell.java",
                "+++ b/main/src/com/google/refine/model/Cell.java",
                "@@ -44,2 +44,4 @@ import java.util.Properties;",
                "+import com.fasterxml.jackson.annotation.JacksonInject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -51,2 +53,3 @@ import com.fasterxml.jackson.core.JsonParser;",
                " import com.fasterxml.jackson.core.JsonToken;",
                "+import com.fasterxml.jackson.databind.InjectableValues;",
                "@@ -161,12 +164,33 @@ public class Cell implements HasFields {",
                "     static public Cell loadStreaming(String s, Pool pool) throws Exception {",
                "-        JsonFactory jsonFactory = new JsonFactory(); ",
                "-        JsonParser jp = jsonFactory.createJsonParser(s);",
                "-        ",
                "-        if (jp.nextToken() != JsonToken.START_OBJECT) {",
                "-            return null;",
                "-        }",
                "-        ",
                "-        return loadStreaming(jp, pool);",
                "+        InjectableValues injectableValues = new InjectableValues.Std()",
                "+                .addValue(\"pool\", pool);",
                "+        return ParsingUtilities.mapper.setInjectableValues(injectableValues)",
                "+                .readValue(s, Cell.class);",
                "     }",
                "+    @JsonCreator",
                "+    static public Cell deserialize(",
                "+            @JsonProperty(\"v\")",
                "+            Object value,",
                "+            @JsonProperty(\"t\")",
                "+            String type,",
                "+            @JsonProperty(\"r\")",
                "+            String reconId,",
                "+            @JsonProperty(\"e\")",
                "+            String error,",
                "+            @JacksonInject(\"pool\")",
                "+            Pool pool) {",
                "+        Recon recon = null;",
                "+        if(reconId != null) {",
                "+            recon = pool.getRecon(reconId);",
                "+        }",
                "+        if (type != null && \"date\".equals(type)) {",
                "+            value = ParsingUtilities.stringToDate((String) value); ",
                "+        }",
                "+        if (error != null) {",
                "+            value = new EvalError(error);",
                "+        }",
                "+        return new Cell((Serializable)value, recon);",
                "+    }",
                "+",
                "     static public Cell loadStreaming(JsonParser jp, Pool pool) throws Exception {"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/Cell.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "aba8cd843042a3889541197216b359b3b85242cb",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538148182,
            "hunks": 29,
            "message": "Jackson serialization for processes",
            "diff": [
                "diff --git a/main/src/com/google/refine/process/LongRunningProcess.java b/main/src/com/google/refine/process/LongRunningProcess.java",
                "index b05b6e876..1e18949f4 100644",
                "--- a/main/src/com/google/refine/process/LongRunningProcess.java",
                "+++ b/main/src/com/google/refine/process/LongRunningProcess.java",
                "@@ -40,2 +40,5 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.history.HistoryEntry;",
                "@@ -43,6 +46,11 @@ import com.google.refine.history.HistoryEntry;",
                " abstract public class LongRunningProcess extends Process {",
                "+    @JsonProperty(\"description\")",
                "     final protected String       _description;",
                "+    @JsonIgnore",
                "     protected ProcessManager     _manager;",
                "+    @JsonIgnore",
                "     protected Thread             _thread;",
                "+    @JsonProperty(\"progress\")",
                "     protected int                _progress; // out of 100",
                "+    @JsonIgnore",
                "     protected boolean            _canceled;",
                "@@ -69,3 +77,3 @@ abstract public class LongRunningProcess extends Process {",
                "         writer.key(\"immediate\"); writer.value(false);",
                "-        writer.key(\"status\"); writer.value(_thread == null ? \"pending\" : (_thread.isAlive() ? \"running\" : \"done\"));",
                "+        writer.key(\"status\"); writer.value(getStatus());",
                "         writer.key(\"progress\"); writer.value(_progress);",
                "@@ -73,2 +81,7 @@ abstract public class LongRunningProcess extends Process {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"status\")",
                "+    public String getStatus() {",
                "+        return _thread == null ? \"pending\" : (_thread.isAlive() ? \"running\" : \"done\");",
                "+    }",
                "diff --git a/main/src/com/google/refine/process/Process.java b/main/src/com/google/refine/process/Process.java",
                "index 14fbef20f..8b42bab71 100644",
                "--- a/main/src/com/google/refine/process/Process.java",
                "+++ b/main/src/com/google/refine/process/Process.java",
                "@@ -35,2 +35,5 @@ package com.google.refine.process;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -39,7 +42,11 @@ import com.google.refine.history.HistoryEntry;",
                " public abstract class Process implements Jsonizable {",
                "+    @JsonProperty(\"immediate\")",
                "     abstract public boolean isImmediate();",
                "+    @JsonIgnore",
                "     abstract public boolean isRunning();",
                "+    @JsonIgnore",
                "     abstract public boolean isDone();",
                "+    @JsonIgnore",
                "     abstract public HistoryEntry performImmediate() throws Exception;",
                "@@ -48,2 +55,7 @@ public abstract class Process implements Jsonizable {",
                "     abstract public void cancel();",
                "+    ",
                "+    @JsonProperty(\"id\")",
                "+    public long getId() {",
                "+        return hashCode();",
                "+    }",
                " }",
                "diff --git a/main/src/com/google/refine/process/ProcessManager.java b/main/src/com/google/refine/process/ProcessManager.java",
                "index 94cf150ed..6d22177fb 100644",
                "--- a/main/src/com/google/refine/process/ProcessManager.java",
                "+++ b/main/src/com/google/refine/process/ProcessManager.java",
                "@@ -39,2 +39,3 @@ import java.util.List;",
                " import java.util.Properties;",
                "+import java.util.stream.Collectors;",
                "@@ -43,2 +44,7 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -48,5 +54,15 @@ import com.google.refine.history.HistoryProcess;",
                " public class ProcessManager implements Jsonizable {",
                "+    @JsonProperty(\"processes\")",
                "     protected List<Process> _processes = Collections.synchronizedList(new LinkedList<Process>());",
                "+    @JsonIgnore",
                "     protected List<Exception> _latestExceptions = null;",
                "+    public static class ExceptionMessage {",
                "+        @JsonProperty(\"message\")",
                "+        public final String message;",
                "+        public ExceptionMessage(Exception e) {",
                "+            message = e.getLocalizedMessage();",
                "+        }",
                "+    }",
                "+    ",
                "     public ProcessManager() {",
                "@@ -80,2 +96,13 @@ public class ProcessManager implements Jsonizable {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"exceptions\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public List<ExceptionMessage> getJsonExceptions() {",
                "+        if (_latestExceptions != null) {",
                "+            return _latestExceptions.stream()",
                "+                    .map(e -> new ExceptionMessage(e))",
                "+                    .collect(Collectors.toList());",
                "+        }",
                "+        return null;",
                "+    }",
                "diff --git a/main/src/com/google/refine/process/QuickHistoryEntryProcess.java b/main/src/com/google/refine/process/QuickHistoryEntryProcess.java",
                "index 96ed346b4..9d9c51726 100644",
                "--- a/main/src/com/google/refine/process/QuickHistoryEntryProcess.java",
                "+++ b/main/src/com/google/refine/process/QuickHistoryEntryProcess.java",
                "@@ -40,2 +40,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.history.HistoryEntry;",
                "@@ -60,2 +62,3 @@ abstract public class QuickHistoryEntryProcess extends Process {",
                "     @Override",
                "+    @JsonProperty(\"immediate\")",
                "     public boolean isImmediate() {",
                "@@ -91,8 +94,17 @@ abstract public class QuickHistoryEntryProcess extends Process {",
                "         writer.key(\"id\"); writer.value(hashCode());",
                "-        writer.key(\"description\"); writer.value(_historyEntry != null ? _historyEntry.description : _briefDescription);",
                "+        writer.key(\"description\"); writer.value(getDescription());",
                "         writer.key(\"immediate\"); writer.value(true);",
                "-        writer.key(\"status\"); writer.value(_done ? \"done\" : \"pending\");",
                "+        writer.key(\"status\"); writer.value(getStatus());",
                "         writer.endObject();",
                "     }",
                "-",
                "+    ",
                "+    @JsonProperty(\"status\")",
                "+    public String getStatus() {",
                "+        return _done ? \"done\" : \"pending\";",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"description\")",
                "+    public String getDescription() {",
                "+        return _historyEntry != null ? _historyEntry.description : _briefDescription;",
                "+    }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/process/ProcessManagerTests.java b/main/tests/server/src/com/google/refine/tests/process/ProcessManagerTests.java",
                "index 2e34388c9..26e5b8f47 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/process/ProcessManagerTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/process/ProcessManagerTests.java",
                "@@ -13,3 +13,3 @@ public class ProcessManagerTests {",
                "     ProcessManager processManager;",
                "-    Process process;",
                "+    Process process1, process2;",
                "@@ -18,4 +18,4 @@ public class ProcessManagerTests {",
                "         processManager = new ProcessManager();",
                "-        process = new LongRunningProcessTests.LongRunningProcessStub(\"some description\");",
                "-",
                "+        process1 = new LongRunningProcessTests.LongRunningProcessStub(\"some description\");",
                "+        process2 = new LongRunningProcessTests.LongRunningProcessStub(\"some other description\");",
                "     }",
                "@@ -24,6 +24,10 @@ public class ProcessManagerTests {",
                "     public void serializeProcessManager() throws Exception {",
                "-        processManager.queueProcess(process);",
                "-        String processJson = JSONUtilities.serialize(process);",
                "+        processManager.queueProcess(process1);",
                "+        processManager.queueProcess(process2);",
                "+        processManager.onFailedProcess(process1, new IllegalArgumentException(\"unexpected error\"));",
                "+        String processJson = JSONUtilities.serialize(process2);",
                "         TestUtils.isSerializedTo(processManager, \"{\"",
                "-                + \"\\\"processes\\\":[\"+processJson+\"]}\");",
                "+                + \"\\\"processes\\\":[\"+processJson+\"],\\n\"",
                "+                + \"\\\"exceptions\\\":[{\\\"message\\\":\\\"unexpected error\\\"}]\"",
                "+                + \"}\");",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/process/LongRunningProcess.java",
                "main/src/com/google/refine/process/Process.java",
                "main/src/com/google/refine/process/ProcessManager.java",
                "main/src/com/google/refine/process/QuickHistoryEntryProcess.java",
                "main/tests/server/src/com/google/refine/tests/process/ProcessManagerTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c98ae0dcf67041076fd2ed399356a80cbff2e121",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542732131,
            "hunks": 6,
            "message": "Migrate PreviewExtendDataCommand to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java b/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "index a571aa4da..57bdffab8 100644",
                "--- a/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "@@ -47,5 +47,4 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONArray;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                " import com.google.refine.commands.Command;",
                "@@ -96,14 +95,14 @@ public class PreviewExtendDataCommand extends Command {",
                "-            JSONArray rowIndices = ParsingUtilities.evaluateJsonStringToArray(rowIndicesString);",
                "-            int length = rowIndices.length();",
                "-\t    Column column = project.columnModel.getColumnByName(columnName);",
                "+            List<Integer> rowIndices = ParsingUtilities.mapper.readValue(rowIndicesString, new TypeReference<List<Integer>>() {});",
                "+            int length = rowIndices.size();",
                "+            Column column = project.columnModel.getColumnByName(columnName);",
                "             int cellIndex = column.getCellIndex();",
                "-\t    // get the endpoint to extract data from",
                "+            // get the endpoint to extract data from",
                "             String endpoint = null;",
                "-\t    ReconConfig cfg = column.getReconConfig();",
                "-\t    if (cfg != null &&",
                "-\t\tcfg instanceof StandardReconConfig) {",
                "-\t\tStandardReconConfig scfg = (StandardReconConfig)cfg;",
                "-\t\tendpoint = scfg.service;",
                "+\t\t    ReconConfig cfg = column.getReconConfig();",
                "+\t\t    if (cfg != null &&",
                "+\t\t\tcfg instanceof StandardReconConfig) {",
                "+\t\t\tStandardReconConfig scfg = (StandardReconConfig)cfg;",
                "+\t\t\tendpoint = scfg.service;",
                " \t    } else {",
                "@@ -118,3 +117,3 @@ public class PreviewExtendDataCommand extends Command {",
                "             for (int i = 0; i < length; i++) {",
                "-                int rowIndex = rowIndices.getInt(i);",
                "+                int rowIndex = rowIndices.get(i);",
                "                 if (rowIndex >= 0 && rowIndex < project.rows.size()) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d012ea7f8d22ede640aef7af7d003fe4d9ed49f5",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540214297,
            "hunks": 235,
            "message": "Remove reconstruct method on operations",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/EngineDependentMassCellOperation.java b/main/src/com/google/refine/operations/EngineDependentMassCellOperation.java",
                "index 1ebbe8bec..daf02378e 100644",
                "--- a/main/src/com/google/refine/operations/EngineDependentMassCellOperation.java",
                "+++ b/main/src/com/google/refine/operations/EngineDependentMassCellOperation.java",
                "@@ -38,2 +38,3 @@ import java.util.List;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -52,3 +53,5 @@ import com.google.refine.model.changes.MassCellChange;",
                " abstract public class EngineDependentMassCellOperation extends EngineDependentOperation {",
                "+    @JsonIgnore",
                "     final protected String    _columnName;",
                "+    @JsonIgnore",
                "     final protected boolean _updateRowContextDependencies;",
                "diff --git a/main/src/com/google/refine/operations/cell/BlankDownOperation.java b/main/src/com/google/refine/operations/cell/BlankDownOperation.java",
                "index 4ed6c4fd6..f022f28af 100644",
                "--- a/main/src/com/google/refine/operations/cell/BlankDownOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/BlankDownOperation.java",
                "@@ -37,4 +37,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -46,3 +44,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.expr.ExpressionUtils;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -53,3 +50,2 @@ import com.google.refine.model.changes.CellChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -57,6 +53,2 @@ public class BlankDownOperation extends EngineDependentMassCellOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), BlankDownOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/cell/FillDownOperation.java b/main/src/com/google/refine/operations/cell/FillDownOperation.java",
                "index b672f9558..b3a47ca60 100644",
                "--- a/main/src/com/google/refine/operations/cell/FillDownOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/FillDownOperation.java",
                "@@ -37,4 +37,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -47,3 +45,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.expr.ExpressionUtils;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -54,3 +51,2 @@ import com.google.refine.model.changes.CellChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -58,6 +54,2 @@ public class FillDownOperation extends EngineDependentMassCellOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), FillDownOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java b/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "index cfb9398f5..bc04f38d9 100644",
                "--- a/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "@@ -35,3 +35,2 @@ package com.google.refine.operations.cell;",
                "-import java.io.IOException;",
                " import java.util.ArrayList;",
                "@@ -41,4 +40,2 @@ import java.util.Map;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -54,3 +51,2 @@ import com.google.refine.model.Row;",
                " import com.google.refine.model.changes.MassRowColumnChange;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -61,6 +57,2 @@ public class KeyValueColumnizeOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), KeyValueColumnizeOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/cell/MassEditOperation.java b/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "index 50f800834..fdd99d376 100644",
                "--- a/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "@@ -42,4 +42,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -52,3 +50,2 @@ import com.google.refine.expr.ExpressionUtils;",
                " import com.google.refine.expr.MetaParser;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -108,6 +105,2 @@ public class MassEditOperation extends EngineDependentMassCellOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), MassEditOperation.class);",
                "-    }",
                "-    ",
                "     public MassEditOperation(EngineConfig engineConfig, String columnName, String expression, List<Edit> edits) {",
                "diff --git a/main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java b/main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java",
                "index 9f24bfb3d..88ef3aeff 100644",
                "--- a/main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java",
                "@@ -38,4 +38,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -51,3 +49,2 @@ import com.google.refine.model.Row;",
                " import com.google.refine.model.changes.MassRowChange;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -58,6 +55,2 @@ public class MultiValuedCellJoinOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), MultiValuedCellJoinOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java b/main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java",
                "index d0b66d123..fbb3a9006 100644",
                "--- a/main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java",
                "@@ -40,3 +40,2 @@ import java.util.regex.Pattern;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONObject;",
                "@@ -54,3 +53,2 @@ import com.google.refine.model.Row;",
                " import com.google.refine.model.changes.MassRowChange;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -65,6 +63,2 @@ public class MultiValuedCellSplitOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), MultiValuedCellSplitOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/cell/TextTransformOperation.java b/main/src/com/google/refine/operations/cell/TextTransformOperation.java",
                "index c1cc816b5..bdedef2cc 100644",
                "--- a/main/src/com/google/refine/operations/cell/TextTransformOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/TextTransformOperation.java",
                "@@ -39,4 +39,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -50,3 +48,2 @@ import com.google.refine.expr.MetaParser;",
                " import com.google.refine.expr.WrappedCell;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -58,3 +55,2 @@ import com.google.refine.operations.EngineDependentMassCellOperation;",
                " import com.google.refine.operations.OnError;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -70,6 +66,2 @@ public class TextTransformOperation extends EngineDependentMassCellOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), TextTransformOperation.class);",
                "-    }",
                "-    ",
                "     static public OnError stringToOnError(String s) {",
                "diff --git a/main/src/com/google/refine/operations/cell/TransposeColumnsIntoRowsOperation.java b/main/src/com/google/refine/operations/cell/TransposeColumnsIntoRowsOperation.java",
                "index 0f7c44690..c9e416d76 100644",
                "--- a/main/src/com/google/refine/operations/cell/TransposeColumnsIntoRowsOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/TransposeColumnsIntoRowsOperation.java",
                "@@ -38,4 +38,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -53,3 +51,2 @@ import com.google.refine.model.Row;",
                " import com.google.refine.model.changes.MassRowColumnChange;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -84,6 +81,2 @@ public class TransposeColumnsIntoRowsOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), TransposeColumnsIntoRowsOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java b/main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java",
                "index 97f886074..bcfa612a1 100644",
                "--- a/main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java",
                "@@ -38,4 +38,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -50,3 +48,2 @@ import com.google.refine.model.Row;",
                " import com.google.refine.model.changes.MassRowColumnChange;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -56,6 +53,2 @@ public class TransposeRowsIntoColumnsOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), TransposeRowsIntoColumnsOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "index daec11954..4e920f435 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "@@ -48,3 +48,2 @@ import java.util.concurrent.TimeUnit;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "@@ -67,3 +66,2 @@ import com.google.refine.expr.WrappedCell;",
                " import com.google.refine.history.HistoryEntry;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -109,6 +107,2 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnAdditionByFetchingURLsOperation.class);",
                "-    }",
                "-",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java b/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "index e32034361..6e58835e5 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "@@ -35,3 +35,2 @@ package com.google.refine.operations.column;",
                "-import java.io.IOException;",
                " import java.io.Serializable;",
                "@@ -41,4 +40,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -56,3 +53,2 @@ import com.google.refine.history.Change;",
                " import com.google.refine.history.HistoryEntry;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -65,3 +61,2 @@ import com.google.refine.operations.EngineDependentOperation;",
                " import com.google.refine.operations.OnError;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -75,6 +70,2 @@ public class ColumnAdditionOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnAdditionOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnMoveOperation.java b/main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "index ed764a731..fd0842f53 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "@@ -35,6 +35,2 @@ package com.google.refine.operations.column;",
                "-import java.io.IOException;",
                "-",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -47,3 +43,2 @@ import com.google.refine.model.Project;",
                " import com.google.refine.model.changes.ColumnMoveChange;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -53,6 +48,2 @@ public class ColumnMoveOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnMoveOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java b/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "index 2d90a32ae..7449345bc 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "@@ -35,6 +35,2 @@ package com.google.refine.operations.column;",
                "-import java.io.IOException;",
                "-",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -48,3 +44,2 @@ import com.google.refine.model.Project;",
                " import com.google.refine.model.changes.ColumnRemovalChange;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -53,6 +48,2 @@ public class ColumnRemovalOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnRemovalOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnRenameOperation.java b/main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "index d76f928a7..6359d6324 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "@@ -35,4 +35,2 @@ package com.google.refine.operations.column;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -49,9 +47,2 @@ public class ColumnRenameOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return new ColumnRenameOperation(",
                "-            obj.getString(\"oldColumnName\"),",
                "-            obj.getString(\"newColumnName\")",
                "-        );",
                "-    }",
                "-    ",
                "     public ColumnRenameOperation(",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnReorderOperation.java b/main/src/com/google/refine/operations/column/ColumnReorderOperation.java",
                "index 4202d2341..032a8f7b9 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnReorderOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnReorderOperation.java",
                "@@ -37,4 +37,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -46,9 +44,4 @@ import com.google.refine.model.Project;",
                " import com.google.refine.model.changes.ColumnReorderChange;",
                "-import com.google.refine.util.ParsingUtilities;",
                " public class ColumnReorderOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnReorderOperation.class);",
                "-    }",
                "-    ",
                "     final protected List<String> _columnNames;",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnSplitOperation.java b/main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "index 1ac7388d1..6f55b7a47 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "@@ -35,3 +35,2 @@ package com.google.refine.operations.column;",
                "-import java.io.IOException;",
                " import java.io.Serializable;",
                "@@ -42,3 +41,2 @@ import java.util.regex.Pattern;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONObject;",
                "@@ -57,3 +55,2 @@ import com.google.refine.history.HistoryEntry;",
                " import com.google.refine.importers.ImporterUtilities;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Column;",
                "@@ -63,3 +60,2 @@ import com.google.refine.model.changes.ColumnSplitChange;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -77,6 +73,2 @@ public class ColumnSplitOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnSplitOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "index e0aa039e4..adcd26861 100644",
                "--- a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "@@ -44,3 +44,2 @@ import java.util.Set;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "@@ -54,3 +53,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.history.HistoryEntry;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -70,3 +68,2 @@ import com.google.refine.process.LongRunningProcess;",
                " import com.google.refine.process.Process;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -87,6 +84,2 @@ public class ExtendDataOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ExtendDataOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java b/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "index c342878d8..673e5e49d 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "@@ -35,7 +35,4 @@ package com.google.refine.operations.recon;",
                "-import java.io.IOException;",
                " import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -46,3 +43,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.history.Change;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -54,3 +50,2 @@ import com.google.refine.model.changes.ReconChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -59,6 +54,2 @@ public class ReconClearSimilarCellsOperation extends EngineDependentMassCellOper",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ReconClearSimilarCellsOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java b/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "index ddbcda50d..6b9f89aa9 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "@@ -35,3 +35,2 @@ package com.google.refine.operations.recon;",
                "-import java.io.IOException;",
                " import java.util.ArrayList;",
                "@@ -44,3 +43,2 @@ import java.util.Set;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONObject;",
                "@@ -54,3 +52,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.history.HistoryEntry;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -64,4 +61,2 @@ import com.google.refine.model.changes.MassChange;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "-import com.google.refine.util.JSONUtilities;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -73,6 +68,2 @@ public class ReconCopyAcrossColumnsOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ReconCopyAcrossColumnsOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java b/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "index e58fa16f6..c5e538e2e 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "@@ -35,3 +35,2 @@ package com.google.refine.operations.recon;",
                "-import java.io.IOException;",
                " import java.util.HashMap;",
                "@@ -40,4 +39,2 @@ import java.util.Map;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -48,3 +45,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.history.Change;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -58,3 +54,2 @@ import com.google.refine.model.changes.ReconChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -63,6 +58,2 @@ public class ReconDiscardJudgmentsOperation extends EngineDependentMassCellOpera",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ReconDiscardJudgmentsOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java b/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "index 561fffcce..5068334b4 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "@@ -35,4 +35,3 @@ package com.google.refine.operations.recon;",
                "- import java.io.IOException;",
                "-import java.util.HashMap;",
                "+ import java.util.HashMap;",
                " import java.util.List;",
                "@@ -40,4 +39,2 @@ import java.util.Map;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -51,3 +48,2 @@ import com.google.refine.expr.ExpressionUtils;",
                " import com.google.refine.history.Change;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -63,3 +59,2 @@ import com.google.refine.model.recon.ReconConfig;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -71,6 +66,2 @@ public class ReconJudgeSimilarCellsOperation extends EngineDependentMassCellOper",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ReconJudgeSimilarCellsOperation.class);",
                "-    }",
                "-   ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java b/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "index 549f5cee2..ac0eb1989 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "@@ -35,3 +35,2 @@ package com.google.refine.operations.recon;",
                "-import java.io.IOException;",
                " import java.util.HashMap;",
                "@@ -40,4 +39,2 @@ import java.util.Map;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -48,3 +45,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.history.Change;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -59,3 +55,2 @@ import com.google.refine.model.recon.ReconConfig;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -64,6 +59,2 @@ public class ReconMarkNewTopicsOperation extends EngineDependentMassCellOperatio",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ReconMarkNewTopicsOperation.class);",
                "-    }",
                "-",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java b/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "index 46aaf45d9..17dd06184 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "@@ -39,4 +39,2 @@ import java.util.Map;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -47,3 +45,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.history.Change;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -58,9 +55,4 @@ import com.google.refine.model.changes.ReconChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                " public class ReconMatchBestCandidatesOperation extends EngineDependentMassCellOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ReconMatchBestCandidatesOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java b/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "index 709146811..918a71d4d 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "@@ -39,4 +39,2 @@ import java.util.Map;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -48,3 +46,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.history.Change;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Cell;",
                "@@ -59,3 +56,2 @@ import com.google.refine.model.changes.ReconChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -93,6 +89,2 @@ public class ReconMatchSpecificTopicOperation extends EngineDependentMassCellOpe",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ReconMatchSpecificTopicOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconOperation.java b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "index 92bd12b12..b9218f145 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "@@ -42,3 +42,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -78,6 +77,2 @@ public class ReconOperation extends EngineDependentOperation {",
                "-    static public ReconOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ReconOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java b/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "index b60744119..d6115decc 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "@@ -2,3 +2,2 @@ package com.google.refine.operations.recon;",
                "-import java.io.IOException;",
                " import java.util.Collections;",
                "@@ -6,4 +5,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -27,3 +24,2 @@ import com.google.refine.model.recon.StandardReconConfig;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -60,6 +56,2 @@ public class ReconUseValuesAsIdentifiersOperation extends EngineDependentMassCel",
                "-    static public ReconUseValuesAsIdentifiersOperation reconstruct(JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), ReconUseValuesAsIdentifiersOperation.class);",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/main/src/com/google/refine/operations/row/DenormalizeOperation.java b/main/src/com/google/refine/operations/row/DenormalizeOperation.java",
                "index da4b3a6d2..aaee43c51 100644",
                "--- a/main/src/com/google/refine/operations/row/DenormalizeOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/DenormalizeOperation.java",
                "@@ -38,4 +38,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -52,6 +50,2 @@ import com.google.refine.model.changes.MassRowChange;",
                " public class DenormalizeOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return new DenormalizeOperation();",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/row/RowFlagOperation.java b/main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "index 5a998edda..ddf142ec4 100644",
                "--- a/main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "@@ -38,4 +38,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -49,3 +47,2 @@ import com.google.refine.history.Change;",
                " import com.google.refine.history.HistoryEntry;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "@@ -55,3 +52,2 @@ import com.google.refine.model.changes.RowFlagChange;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -60,6 +56,2 @@ public class RowFlagOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), RowFlagOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/row/RowRemovalOperation.java b/main/src/com/google/refine/operations/row/RowRemovalOperation.java",
                "index ba2dd823f..bf536ce0d 100644",
                "--- a/main/src/com/google/refine/operations/row/RowRemovalOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowRemovalOperation.java",
                "@@ -35,8 +35,5 @@ package com.google.refine.operations.row;",
                "- import java.io.IOException;",
                "-import java.util.ArrayList;",
                "+ import java.util.ArrayList;",
                " import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -49,3 +46,2 @@ import com.google.refine.browsing.RowVisitor;",
                " import com.google.refine.history.HistoryEntry;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "@@ -54,9 +50,4 @@ import com.google.refine.model.changes.RowRemovalChange;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                " public class RowRemovalOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), RowRemovalOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/src/com/google/refine/operations/row/RowReorderOperation.java b/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "index 97c7e3ced..b90867846 100644",
                "--- a/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "@@ -35,8 +35,5 @@ package com.google.refine.operations.row;",
                "- import java.io.IOException;",
                "-import java.util.ArrayList;",
                "+ import java.util.ArrayList;",
                " import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -57,9 +54,4 @@ import com.google.refine.sorting.SortingRecordVisitor;",
                " import com.google.refine.sorting.SortingRowVisitor;",
                "-import com.google.refine.util.ParsingUtilities;",
                " public class RowReorderOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), RowReorderOperation.class);",
                "-    }",
                "-    ",
                "     final protected Mode _mode;",
                "diff --git a/main/src/com/google/refine/operations/row/RowStarOperation.java b/main/src/com/google/refine/operations/row/RowStarOperation.java",
                "index ed88f6d31..1d6caf472 100644",
                "--- a/main/src/com/google/refine/operations/row/RowStarOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowStarOperation.java",
                "@@ -35,8 +35,5 @@ package com.google.refine.operations.row;",
                "- import java.io.IOException;",
                "-import java.util.ArrayList;",
                "+ import java.util.ArrayList;",
                " import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -50,3 +47,2 @@ import com.google.refine.history.Change;",
                " import com.google.refine.history.HistoryEntry;",
                "-import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "@@ -56,3 +52,2 @@ import com.google.refine.model.changes.RowStarChange;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -61,6 +56,2 @@ public class RowStarOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), RowStarOperation.class);",
                "-    }",
                "-    ",
                "     @JsonCreator",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/changes/DataExtensionChangeTest.java b/main/tests/server/src/com/google/refine/tests/model/changes/DataExtensionChangeTest.java",
                "index c3608622b..689b050c2 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/changes/DataExtensionChangeTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/changes/DataExtensionChangeTest.java",
                "@@ -2,10 +2,4 @@ package com.google.refine.tests.model.changes;",
                "-import com.google.refine.model.ModelException;",
                "-import com.google.refine.model.Project;",
                "-import com.google.refine.model.changes.DataExtensionChange;",
                "-import com.google.refine.model.changes.MassChange;",
                "-",
                " import static org.junit.Assert.assertEquals;",
                "-import java.io.FileReader;",
                " import java.io.IOException;",
                "@@ -14,3 +8,2 @@ import java.io.InputStreamReader;",
                " import java.io.LineNumberReader;",
                "-import java.io.Reader;",
                "@@ -22,2 +15,5 @@ import org.testng.annotations.Test;",
                " import com.google.refine.history.Change;",
                "+import com.google.refine.model.ModelException;",
                "+import com.google.refine.model.Project;",
                "+import com.google.refine.model.changes.DataExtensionChange;",
                " import com.google.refine.tests.RefineTest;",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "index 1e7669b29..06e3d58a7 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "@@ -26,3 +26,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "-import com.google.refine.util.Pool;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -58,3 +58,3 @@ public class BlankDownTests extends RefineTest {",
                "                 + \"\\\"columnName\\\":\\\"my column\\\"}\";",
                "-        AbstractOperation op = BlankDownOperation.reconstruct(project, new JSONObject(json));",
                "+        AbstractOperation op = ParsingUtilities.mapper.readValue(json, BlankDownOperation.class);",
                "         TestUtils.isSerializedTo(op, json);",
                "@@ -109,3 +109,2 @@ public class BlankDownTests extends RefineTest {",
                "         process.performImmediate();",
                "-        //project.saveToOutputStream(System.out, new Pool());",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "index eb15e693d..73d82f2e7 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "@@ -22,5 +22,6 @@ import com.google.refine.operations.OperationRegistry;",
                " import com.google.refine.operations.cell.FillDownOperation;",
                "+import com.google.refine.process.Process;",
                " import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "-import com.google.refine.process.Process;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -56,3 +57,3 @@ public class FillDownTests extends RefineTest {",
                "                 + \"\\\"columnName\\\":\\\"my key\\\"}\";",
                "-        TestUtils.isSerializedTo(FillDownOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, FillDownOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java",
                "index c1a87aec7..9e84f3c37 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java",
                "@@ -38,3 +38,2 @@ import java.util.Properties;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -53,2 +52,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -87,3 +87,3 @@ public class JoinMultiValuedCellsTests extends RefineTest {",
                "                 + \"\\\"separator\\\":\\\",\\\"}\";",
                "-        TestUtils.isSerializedTo(MultiValuedCellJoinOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MultiValuedCellJoinOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java",
                "index 38567d48f..0ebeadb82 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java",
                "@@ -69,2 +69,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -121,3 +122,3 @@ public class KeyValueColumnizeTests extends RefineTest {",
                "                 + \"\\\"noteColumnName\\\":null}\";",
                "-        TestUtils.isSerializedTo(KeyValueColumnizeOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, KeyValueColumnizeOperation.class), json);",
                "@@ -128,3 +129,3 @@ public class KeyValueColumnizeTests extends RefineTest {",
                "                 + \"\\\"noteColumnName\\\":\\\"note column\\\"}\";",
                "-        TestUtils.isSerializedTo(KeyValueColumnizeOperation.reconstruct(project, new JSONObject(jsonFull)), jsonFull);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(jsonFull, KeyValueColumnizeOperation.class), jsonFull);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "index da41c8c02..01497bd5d 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "@@ -5,3 +5,2 @@ import java.util.List;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.Assert;",
                "@@ -9,3 +8,2 @@ import org.testng.annotations.BeforeSuite;",
                " import org.testng.annotations.Test;",
                "-import static org.mockito.Mockito.mock;",
                "@@ -13,3 +11,2 @@ import com.fasterxml.jackson.core.type.TypeReference;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -33,3 +30,2 @@ public class MassOperationTests extends RefineTest {",
                "     public void serializeMassEditOperation() throws JSONException, Exception {",
                "-        Project project = mock(Project.class);",
                "         String json = \"{\\\"op\\\":\\\"core/mass-edit\\\",\"",
                "@@ -39,3 +35,3 @@ public class MassOperationTests extends RefineTest {",
                "                 + \"\\\"edits\\\":[{\\\"fromBlank\\\":false,\\\"fromError\\\":false,\\\"from\\\":[\\\"String\\\"],\\\"to\\\":\\\"newString\\\"}]}\";",
                "-        TestUtils.isSerializedTo(MassEditOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MassEditOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "index da372dff0..a74aebdb0 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "@@ -39,3 +39,2 @@ import java.util.Properties;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -53,2 +52,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -82,3 +82,3 @@ public class SplitMultiValuedCellsTests extends RefineTest {",
                "                 + \"\\\"regex\\\":false}\";",
                "-        TestUtils.isSerializedTo(MultiValuedCellSplitOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MultiValuedCellSplitOperation.class), json);",
                "     }",
                "@@ -93,3 +93,3 @@ public class SplitMultiValuedCellsTests extends RefineTest {",
                "                 + \"\\\"fieldLengths\\\":[1,1]}\";",
                "-        TestUtils.isSerializedTo(MultiValuedCellSplitOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MultiValuedCellSplitOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java",
                "index 3c08cb0b3..b58977510 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java",
                "@@ -35,6 +35,3 @@ package com.google.refine.tests.operations.cell;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -43,3 +40,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -48,2 +44,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -64,4 +61,3 @@ public class TransposeTests extends RefineTest {",
                "                 + \"\\\"rowCount\\\":3}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(TransposeRowsIntoColumnsOperation.reconstruct(project , new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, TransposeRowsIntoColumnsOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "index 4697cf37a..41101a5ff 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "@@ -65,2 +65,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -127,3 +128,3 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "     public void serializeColumnAdditionByFetchingURLsOperation() throws JSONException, Exception {",
                "-        TestUtils.isSerializedTo(ColumnAdditionByFetchingURLsOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ColumnAdditionByFetchingURLsOperation.class), json);",
                "     }",
                "@@ -132,3 +133,3 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "     public void serializeUrlFetchingProcess() throws Exception {",
                "-        AbstractOperation op = ColumnAdditionByFetchingURLsOperation.reconstruct(project, new JSONObject(json));",
                "+        AbstractOperation op = ParsingUtilities.mapper.readValue(json, ColumnAdditionByFetchingURLsOperation.class);",
                "         Process process = op.createProcess(project, new Properties());",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java",
                "index d150adafb..8bb492edd 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java",
                "@@ -2,6 +2,3 @@ package com.google.refine.tests.operations.column;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -9,3 +6,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -14,2 +10,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -30,4 +27,3 @@ public class ColumnAdditionOperationTests extends RefineTest {",
                "                 + \"}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ColumnAdditionOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ColumnAdditionOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java",
                "index 61d7aef91..a0ef81029 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java",
                "@@ -2,6 +2,3 @@ package com.google.refine.tests.operations.column;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -9,3 +6,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -14,2 +10,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -28,4 +25,3 @@ public class ColumnMoveOperationTests extends RefineTest {",
                "                 + \"\\\"index\\\":3}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ColumnMoveOperation.reconstruct(project , new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ColumnMoveOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java",
                "index 36a87e417..3caf1f463 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java",
                "@@ -2,6 +2,3 @@ package com.google.refine.tests.operations.column;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -9,3 +6,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -14,2 +10,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -28,4 +25,3 @@ public class ColumnRemovalOperationTests extends RefineTest {",
                "                 + \"\\\"columnName\\\":\\\"my column\\\"}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ColumnRemovalOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ColumnRemovalOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java",
                "index 917d6fdbc..b75a8ebb5 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java",
                "@@ -2,4 +2,2 @@ package com.google.refine.tests.operations.column;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                " import org.json.JSONException;",
                "@@ -9,3 +7,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -29,4 +26,7 @@ public class ColumnRenameOperationTests extends RefineTest {",
                "                 + \"\\\"newColumnName\\\":\\\"new name\\\"}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ColumnRenameOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        JSONObject obj = new JSONObject(json);",
                "+        TestUtils.isSerializedTo(new ColumnRenameOperation(",
                "+            obj.getString(\"oldColumnName\"),",
                "+            obj.getString(\"newColumnName\")",
                "+        ), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "index 57949edd9..1a44a8251 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "@@ -2,6 +2,3 @@ package com.google.refine.tests.operations.column;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -9,3 +6,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -14,2 +10,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -38,4 +35,3 @@ public class ColumnSplitOperationTests extends RefineTest {",
                "                 \"  }\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ColumnSplitOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ColumnSplitOperation.class), json);",
                "     }",
                "@@ -57,4 +53,3 @@ public class ColumnSplitOperationTests extends RefineTest {",
                "                 \"  }\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ColumnSplitOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ColumnSplitOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "index 17cdb98ba..8038c94d2 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "@@ -71,2 +71,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -167,3 +168,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void serializeExtendDataOperation() throws JSONException, Exception {",
                "-        TestUtils.isSerializedTo(ExtendDataOperation.reconstruct(project, new JSONObject(operationJson)), operationJson);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(operationJson, ExtendDataOperation.class), operationJson);",
                "     }",
                "@@ -172,3 +173,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void serializeExtendDataProcess() throws JSONException, Exception {",
                "-        Process p = ExtendDataOperation.reconstruct(project, new JSONObject(operationJson))",
                "+        Process p = ParsingUtilities.mapper.readValue(operationJson, ExtendDataOperation.class)",
                "                 .createProcess(project, new Properties());",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconClearSimilarCellsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconClearSimilarCellsOperationTests.java",
                "index bddfb4fed..6ca86e8c2 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconClearSimilarCellsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconClearSimilarCellsOperationTests.java",
                "@@ -1,5 +1,2 @@",
                " package com.google.refine.tests.operations.recon;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -7,3 +4,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -12,2 +8,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -26,4 +23,3 @@ public class ReconClearSimilarCellsOperationTests extends RefineTest {",
                "                 + \"\\\"similarValue\\\":\\\"some value\\\"}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ReconClearSimilarCellsOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconClearSimilarCellsOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconCopyAcrossColumnsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconCopyAcrossColumnsOperationTests.java",
                "index 23b38e248..8fe76e10d 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconCopyAcrossColumnsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconCopyAcrossColumnsOperationTests.java",
                "@@ -1,5 +1,2 @@",
                " package com.google.refine.tests.operations.recon;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -7,3 +4,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -12,2 +8,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -28,4 +25,3 @@ public class ReconCopyAcrossColumnsOperationTests extends RefineTest {",
                "                 + \"\\\"applyToJudgedCells\\\":true}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ReconCopyAcrossColumnsOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconCopyAcrossColumnsOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconDiscardJudgmentsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconDiscardJudgmentsOperationTests.java",
                "index ce44bb9cd..c778ae5c3 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconDiscardJudgmentsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconDiscardJudgmentsOperationTests.java",
                "@@ -1,5 +1,2 @@",
                " package com.google.refine.tests.operations.recon;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -7,3 +4,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -12,2 +8,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -31,4 +28,3 @@ public class ReconDiscardJudgmentsOperationTests extends RefineTest {",
                "                 \"  }\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ReconDiscardJudgmentsOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconDiscardJudgmentsOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java",
                "index 76cf1e39e..ee31342fd 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java",
                "@@ -1,8 +1,5 @@",
                " package com.google.refine.tests.operations.recon;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                " import org.testng.annotations.Test;",
                "-import static org.mockito.Mockito.mock;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -11,2 +8,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -28,3 +26,3 @@ public class ReconJudgeSimilarCellsOperationTests extends RefineTest {",
                "                 + \"\\\"shareNewTopics\\\":false}\";",
                "-        TestUtils.isSerializedTo(ReconJudgeSimilarCellsOperation.reconstruct(mock(Project.class), new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconJudgeSimilarCellsOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "index 8587fa417..4f5c8d263 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "@@ -4,3 +4,2 @@ import static org.junit.Assert.assertEquals;",
                " import static org.junit.Assert.assertNull;",
                "-import static org.mockito.Mockito.mock;",
                "@@ -28,2 +27,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -49,3 +49,3 @@ public class ReconJudgeSimilarCellsTests extends RefineTest {",
                "                 + \"\\\"shareNewTopics\\\":true}\";",
                "-        TestUtils.isSerializedTo(ReconJudgeSimilarCellsOperation.reconstruct(mock(Project.class), new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconJudgeSimilarCellsOperation.class), json);",
                "     }",
                "@@ -63,3 +63,3 @@ public class ReconJudgeSimilarCellsTests extends RefineTest {",
                "                 + \"}\";",
                "-        TestUtils.isSerializedTo(ReconJudgeSimilarCellsOperation.reconstruct(mock(Project.class), new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconJudgeSimilarCellsOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMarkNewTopicsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMarkNewTopicsOperationTests.java",
                "index a63dea505..655dbbbfe 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMarkNewTopicsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMarkNewTopicsOperationTests.java",
                "@@ -1,5 +1,2 @@",
                " package com.google.refine.tests.operations.recon;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -7,3 +4,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -12,2 +8,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -28,4 +25,3 @@ public class ReconMarkNewTopicsOperationTests extends RefineTest {",
                "                 + \"}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ReconMarkNewTopicsOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconMarkNewTopicsOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchBestCandidatesOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchBestCandidatesOperationTests.java",
                "index 63274e487..9213238b5 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchBestCandidatesOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchBestCandidatesOperationTests.java",
                "@@ -1,5 +1,2 @@",
                " package com.google.refine.tests.operations.recon;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -7,3 +4,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -12,2 +8,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -30,4 +27,3 @@ public class ReconMatchBestCandidatesOperationTests extends RefineTest {",
                "                 + \"}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ReconMatchBestCandidatesOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconMatchBestCandidatesOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchSpecificTopicOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchSpecificTopicOperationTests.java",
                "index 1e1c51386..145e5b8c7 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchSpecificTopicOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchSpecificTopicOperationTests.java",
                "@@ -1,5 +1,2 @@",
                " package com.google.refine.tests.operations.recon;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -7,3 +4,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -12,2 +8,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -39,4 +36,3 @@ public class ReconMatchSpecificTopicOperationTests extends RefineTest {",
                "                 \"  }\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ReconMatchSpecificTopicOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconMatchSpecificTopicOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "index 1fed8577f..e5206cd17 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "@@ -7,3 +7,2 @@ import java.util.Properties;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -18,2 +17,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -76,3 +76,3 @@ public class ReconOperationTests extends RefineTest {",
                "     public void serializeReconOperation() throws JSONException, Exception {",
                "-        TestUtils.isSerializedTo(ReconOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconOperation.class), json);",
                "     }",
                "@@ -81,3 +81,3 @@ public class ReconOperationTests extends RefineTest {",
                "     public void serializeReconProcess() throws JSONException, Exception {",
                "-        ReconOperation op = ReconOperation.reconstruct(project, new JSONObject(json));",
                "+        ReconOperation op = ParsingUtilities.mapper.readValue(json, ReconOperation.class);",
                "         com.google.refine.process.Process process = op.createProcess(project, new Properties());",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "index 3a6d94036..249c4e967 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "@@ -8,3 +8,2 @@ import java.util.Properties;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -18,2 +17,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -38,3 +38,3 @@ public class ReconUseValuesAsIdsOperationTests extends RefineTest {",
                "     public void serializeReconUseValuesAsIdentifiersOperation() throws JSONException, Exception {",
                "-        TestUtils.isSerializedTo(ReconUseValuesAsIdentifiersOperation.reconstruct(new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconUseValuesAsIdentifiersOperation.class), json);",
                "     }",
                "@@ -47,3 +47,3 @@ public class ReconUseValuesAsIdsOperationTests extends RefineTest {",
                "                 + \"Q31,test\");",
                "-        ReconUseValuesAsIdentifiersOperation op = ReconUseValuesAsIdentifiersOperation.reconstruct(new JSONObject(json));",
                "+        ReconUseValuesAsIdentifiersOperation op = ParsingUtilities.mapper.readValue(json, ReconUseValuesAsIdentifiersOperation.class);",
                "         op.createProcess(project, new Properties()).performImmediate();",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java",
                "index d5a344fe2..7e8457a08 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java",
                "@@ -5,3 +5,2 @@ import static org.mockito.Mockito.mock;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -28,3 +27,3 @@ public class DenormalizeOperationTests extends RefineTest {",
                "                 + \"\\\"description\\\":\\\"Denormalize\\\"}\";",
                "-        TestUtils.isSerializedTo(DenormalizeOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(new DenormalizeOperation(), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java",
                "index e7c625706..d8afecad1 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java",
                "@@ -5,3 +5,2 @@ import static org.mockito.Mockito.mock;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -14,2 +13,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -29,3 +29,3 @@ public class RowFlagOperationTests extends RefineTest {",
                "                 + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}}\";",
                "-        TestUtils.isSerializedTo(RowFlagOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, RowFlagOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "index 4be80efd3..db168c626 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "@@ -7,3 +7,2 @@ import java.io.IOException;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -16,2 +15,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -30,3 +30,3 @@ public class RowRemovalOperationTests extends RefineTest {",
                "                 + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}}\";",
                "-        TestUtils.isSerializedTo(RowRemovalOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, RowRemovalOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "index 08b91927b..adb1160bd 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "@@ -25,2 +25,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -87,3 +88,3 @@ public class RowReorderOperationTests extends RefineTest {",
                "                 \"  }\";",
                "-        TestUtils.isSerializedTo(RowReorderOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, RowReorderOperation.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java",
                "index 84e829f69..924c50ff4 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java",
                "@@ -5,5 +5,5 @@ import static org.mockito.Mockito.mock;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.BeforeSuite;",
                " import org.testng.annotations.Test;",
                "+",
                " import com.google.refine.model.Project;",
                "@@ -13,2 +13,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -28,3 +29,3 @@ public class RowStarOperationTests extends RefineTest {",
                "                 + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}}\";",
                "-        TestUtils.isSerializedTo(RowStarOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, RowStarOperation.class), json);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/EngineDependentMassCellOperation.java",
                "main/src/com/google/refine/operations/cell/BlankDownOperation.java",
                "main/src/com/google/refine/operations/cell/FillDownOperation.java",
                "main/src/com/google/refine/operations/cell/KeyValueColumnizeOperation.java",
                "main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "main/src/com/google/refine/operations/cell/MultiValuedCellJoinOperation.java",
                "main/src/com/google/refine/operations/cell/MultiValuedCellSplitOperation.java",
                "main/src/com/google/refine/operations/cell/TextTransformOperation.java",
                "main/src/com/google/refine/operations/cell/TransposeColumnsIntoRowsOperation.java",
                "main/src/com/google/refine/operations/cell/TransposeRowsIntoColumnsOperation.java",
                "main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "main/src/com/google/refine/operations/column/ColumnReorderOperation.java",
                "main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "main/src/com/google/refine/operations/recon/ReconOperation.java",
                "main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "main/src/com/google/refine/operations/row/DenormalizeOperation.java",
                "main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "main/src/com/google/refine/operations/row/RowRemovalOperation.java",
                "main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "main/src/com/google/refine/operations/row/RowStarOperation.java",
                "main/tests/server/src/com/google/refine/tests/model/changes/DataExtensionChangeTest.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnRenameOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconClearSimilarCellsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconCopyAcrossColumnsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconDiscardJudgmentsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconMarkNewTopicsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchBestCandidatesOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconMatchSpecificTopicOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fa8e7d0e50ead1a8c19089c103bd9a7d25d67e1f",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542732937,
            "hunks": 10,
            "message": "Remove temporary wrapping in PreferenceStore",
            "diff": [
                "diff --git a/main/src/com/google/refine/preference/PreferenceStore.java b/main/src/com/google/refine/preference/PreferenceStore.java",
                "index 735a34be2..65bcfd69d 100644",
                "--- a/main/src/com/google/refine/preference/PreferenceStore.java",
                "+++ b/main/src/com/google/refine/preference/PreferenceStore.java",
                "@@ -35,3 +35,2 @@ package com.google.refine.preference;",
                "-import java.io.IOException;",
                " import java.util.HashMap;",
                "@@ -41,6 +40,2 @@ import java.util.Set;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -50,3 +45,2 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.databind.JsonNode;",
                "-import com.fasterxml.jackson.databind.ObjectMapper;",
                " import com.fasterxml.jackson.databind.node.ArrayNode;",
                "@@ -61,5 +55,2 @@ public class PreferenceStore  {",
                "-    // Temporary wrapper while serialization has not been migrated yet.",
                "-    protected Map<String, Object> _prefsJackson = new HashMap<>();",
                "-    ",
                "     public void put(String key, Object value) {",
                "@@ -67,6 +58,4 @@ public class PreferenceStore  {",
                "             _prefs.remove(key);",
                "-            _prefsJackson.remove(key);",
                "         } else {",
                "             _prefs.put(key, value);",
                "-            _prefsJackson.put(key, wrapJSONArray(value));",
                "         }",
                "@@ -74,14 +63,2 @@ public class PreferenceStore  {",
                "     }",
                "-    ",
                "-    private Object wrapJSONArray(Object value) {",
                "-        ObjectMapper mapper = new ObjectMapper();",
                "-        if(value != null && (value instanceof JSONArray || value instanceof JSONObject)) {",
                "-            try {",
                "-                return mapper.readValue(value.toString(), JsonNode.class);",
                "-            } catch (IOException e) {",
                "-                return null;",
                "-            }",
                "-        }",
                "-        return value;",
                "-    }",
                "@@ -118,3 +95,3 @@ public class PreferenceStore  {",
                "     @JsonProperty(\"entries\")",
                "-    public void setEntries(JsonNode entries) throws JSONException {",
                "+    public void setEntries(JsonNode entries) {",
                "         Iterator<String> i = entries.fieldNames();",
                "@@ -126,3 +103,2 @@ public class PreferenceStore  {",
                "                 _prefs.put(key, loaded);",
                "-                _prefsJackson.put(key, wrapJSONArray(loaded));",
                "             }",
                "@@ -134,3 +110,3 @@ public class PreferenceStore  {",
                "     public Map<String, Object> getEntries() {",
                "-    \treturn _prefsJackson;",
                "+    \treturn _prefs;",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/preference/PreferenceStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e0caf3f723ffc2a1d15f39bb0256e64ad66588a5",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542727793,
            "hunks": 3,
            "message": "Migrate GetVersionCommand to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/GetVersionCommand.java b/main/src/com/google/refine/commands/GetVersionCommand.java",
                "index f2fd4f07c..efdfd3925 100644",
                "--- a/main/src/com/google/refine/commands/GetVersionCommand.java",
                "+++ b/main/src/com/google/refine/commands/GetVersionCommand.java",
                "@@ -41,5 +41,3 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.google.refine.RefineServlet;",
                "@@ -47,2 +45,13 @@ import com.google.refine.RefineServlet;",
                " public class GetVersionCommand extends Command {",
                "+",
                "+\tprotected class VersionResponse {",
                "+\t\t@JsonProperty(\"version\")",
                "+\t\tpublic String version = RefineServlet.VERSION;",
                "+\t\t@JsonProperty(\"revision\")",
                "+\t\tpublic String revision = RefineServlet.REVISION;",
                "+\t\t@JsonProperty(\"full_version\")",
                "+\t\tpublic String full_version = RefineServlet.FULL_VERSION;",
                "+\t\t@JsonProperty(\"full_name\")",
                "+\t\tpublic String full_name = RefineServlet.FULLNAME;",
                "+\t}",
                "@@ -50,15 +59,3 @@ public class GetVersionCommand extends Command {",
                "     public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {",
                "-        try {",
                "-            JSONObject o = new JSONObject();",
                "-            o.put(\"version\", RefineServlet.VERSION);",
                "-            o.put(\"revision\", RefineServlet.REVISION);",
                "-            o.put(\"full_version\", RefineServlet.FULL_VERSION);",
                "-            o.put(\"full_name\", RefineServlet.FULLNAME);",
                "-",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            respond(response, o.toString());",
                "-        } catch (JSONException e) {",
                "-            e.printStackTrace(response.getWriter());",
                "-        }",
                "+        respondJSON(response, new VersionResponse());",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/GetVersionCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0dae0811b070b57b67a909334573c640e96bc53e",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540135918,
            "hunks": 28,
            "message": "Jackson deserialization for ReconConfig",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/recon/ReconcileCommand.java b/main/src/com/google/refine/commands/recon/ReconcileCommand.java",
                "index 7861e0db6..21866ed80 100644",
                "--- a/main/src/com/google/refine/commands/recon/ReconcileCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/ReconcileCommand.java",
                "@@ -37,5 +37,2 @@ import javax.servlet.http.HttpServletRequest;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONTokener;",
                "-",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -56,6 +53,3 @@ public class ReconcileCommand extends EngineDependentCommand {",
                "-        JSONTokener t = new JSONTokener(configString);",
                "-        JSONObject config = (JSONObject) t.nextValue();",
                "-        ",
                "-        return new ReconOperation(engineConfig, columnName, ReconConfig.reconstruct(config));",
                "+        return new ReconOperation(engineConfig, columnName, ReconConfig.reconstruct(configString));",
                "     }",
                "diff --git a/main/src/com/google/refine/model/changes/DataExtensionChange.java b/main/src/com/google/refine/model/changes/DataExtensionChange.java",
                "index ce3bccc96..1bb2a35c7 100644",
                "--- a/main/src/com/google/refine/model/changes/DataExtensionChange.java",
                "+++ b/main/src/com/google/refine/model/changes/DataExtensionChange.java",
                "@@ -395,3 +395,3 @@ public class DataExtensionChange implements Change {",
                "                     } else {",
                "-                        columnTypes.add(ReconType.load(ParsingUtilities.evaluateJsonStringToObject(line)));",
                "+                        columnTypes.add(ReconType.load(line));",
                "                     }",
                "diff --git a/main/src/com/google/refine/model/changes/ReconChange.java b/main/src/com/google/refine/model/changes/ReconChange.java",
                "index 9b5508c5d..76440cdbc 100644",
                "--- a/main/src/com/google/refine/model/changes/ReconChange.java",
                "+++ b/main/src/com/google/refine/model/changes/ReconChange.java",
                "@@ -176,3 +176,3 @@ public class ReconChange extends MassCellChange {",
                "                 if (value.length() > 0) {",
                "-                    newReconConfig = ReconConfig.reconstruct(ParsingUtilities.evaluateJsonStringToObject(value));",
                "+                    newReconConfig = ReconConfig.reconstruct(value);",
                "                 }",
                "@@ -180,3 +180,3 @@ public class ReconChange extends MassCellChange {",
                "                 if (value.length() > 0) {",
                "-                    newReconStats = ReconStats.load(ParsingUtilities.evaluateJsonStringToObject(value));",
                "+                    newReconStats = ParsingUtilities.mapper.readValue(value, ReconStats.class);",
                "                 }",
                "@@ -184,3 +184,3 @@ public class ReconChange extends MassCellChange {",
                "                 if (value.length() > 0) {",
                "-                    oldReconConfig = ReconConfig.reconstruct(ParsingUtilities.evaluateJsonStringToObject(value));",
                "+                    oldReconConfig = ReconConfig.reconstruct(value);",
                "                 }",
                "@@ -188,3 +188,3 @@ public class ReconChange extends MassCellChange {",
                "                 if (value.length() > 0) {",
                "-                    oldReconStats = ReconStats.load(ParsingUtilities.evaluateJsonStringToObject(value));",
                "+                    oldReconStats = ParsingUtilities.mapper.readValue(value, ReconStats.class);",
                "                 }",
                "diff --git a/main/src/com/google/refine/model/recon/ReconConfig.java b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "index 063cc5e13..aa3459a89 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "@@ -37,3 +37,2 @@ import java.io.IOException;",
                " import java.io.Writer;",
                "-import java.lang.reflect.Method;",
                " import java.util.HashMap;",
                "@@ -43,3 +42,2 @@ import java.util.Map;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -48,2 +46,4 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo;",
                "+import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;",
                "@@ -57,2 +57,7 @@ import edu.mit.simile.butterfly.ButterflyModule;",
                "+@JsonTypeInfo(",
                "+    use=JsonTypeInfo.Id.CUSTOM,",
                "+    include=JsonTypeInfo.As.PROPERTY,",
                "+    property=\"mode\")",
                "+@JsonTypeIdResolver(ReconConfigResolver.class)",
                " abstract public class ReconConfig  {",
                "@@ -79,27 +84,17 @@ abstract public class ReconConfig  {",
                "-    static public ReconConfig reconstruct(JSONObject obj) throws Exception {",
                "-        try {",
                "-            String mode = obj.getString(\"mode\");",
                "-            ",
                "-            // Backward compatibility",
                "-            if (\"extend\".equals(mode) || \"strict\".equals(mode)) {",
                "-                mode = \"freebase/\" + mode;",
                "-            } else if (\"heuristic\".equals(mode)) {",
                "-                mode = \"core/standard-service\"; // legacy",
                "-            } else if (!mode.contains(\"/\")) {",
                "-                mode = \"core/\" + mode;",
                "-            }",
                "-            ",
                "-            // TODO: This can fail silently if the Freebase extension is not installed.",
                "-            List<Class<? extends ReconConfig>> classes = s_opNameToClass.get(mode);",
                "-            if (classes != null && classes.size() > 0) {",
                "-                Class<? extends ReconConfig> klass = classes.get(classes.size() - 1);",
                "-                ",
                "-                Method reconstruct = klass.getMethod(\"reconstruct\", JSONObject.class);",
                "-                if (reconstruct != null) {",
                "-                    return (ReconConfig) reconstruct.invoke(null, obj);",
                "-                }",
                "-            }",
                "-        } catch (Exception e) {",
                "-            LOGGER.error(\"Reconstruct failed\",e);",
                "+    static public Class<? extends ReconConfig> getClassFromMode(String mode) {",
                "+        // Backward compatibility",
                "+        if (\"extend\".equals(mode) || \"strict\".equals(mode)) {",
                "+            mode = \"freebase/\" + mode;",
                "+        } else if (\"heuristic\".equals(mode)) {",
                "+            mode = \"core/standard-service\"; // legacy",
                "+        } else if (!mode.contains(\"/\")) {",
                "+            mode = \"core/\" + mode;",
                "+        }",
                "+        ",
                "+        // TODO: This can fail silently if the Freebase extension is not installed.",
                "+        List<Class<? extends ReconConfig>> classes = s_opNameToClass.get(mode);",
                "+        System.out.println(classes);",
                "+        if (classes != null && classes.size() > 0) {",
                "+            return classes.get(classes.size() - 1);",
                "         }",
                "@@ -108,2 +103,6 @@ abstract public class ReconConfig  {",
                "+    static public ReconConfig reconstruct(String json) throws Exception {",
                "+        return ParsingUtilities.mapper.readValue(json, ReconConfig.class);",
                "+    }",
                "+    ",
                "     abstract public int getBatchSize();",
                "diff --git a/main/src/com/google/refine/model/recon/ReconConfigResolver.java b/main/src/com/google/refine/model/recon/ReconConfigResolver.java",
                "new file mode 100644",
                "index 000000000..ed8aaffef",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/model/recon/ReconConfigResolver.java",
                "@@ -0,0 +1,34 @@",
                "+package com.google.refine.model.recon;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;",
                "+import com.fasterxml.jackson.databind.DatabindContext;",
                "+import com.fasterxml.jackson.databind.JavaType;",
                "+import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;",
                "+import com.fasterxml.jackson.databind.type.TypeFactory;",
                "+",
                "+public class ReconConfigResolver extends TypeIdResolverBase {",
                "+    ",
                "+    protected TypeFactory factory = TypeFactory.defaultInstance();",
                "+",
                "+    @Override",
                "+    public Id getMechanism() {",
                "+        return Id.NAME;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String idFromValue(Object instance) {",
                "+        return ((ReconConfig)instance).getMode();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String idFromValueAndType(Object instance, Class<?> type) {",
                "+        return ReconConfig.s_opClassToName.get(type);",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public JavaType typeFromId(DatabindContext context, String id) throws IOException {",
                "+        return factory.constructSimpleType(ReconConfig.getClassFromMode(id), new JavaType[0]);",
                "+    }",
                "+}",
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index 692e0958e..a8b568feb 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -36,2 +36,3 @@ package com.google.refine.model.recon;",
                " import java.io.DataOutputStream;",
                "+import java.io.IOException;",
                " import java.io.InputStream;",
                "@@ -40,3 +41,2 @@ import java.net.HttpURLConnection;",
                " import java.net.URL;",
                "-import java.time.OffsetDateTime;",
                " import java.util.ArrayList;",
                "@@ -56,2 +56,3 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -84,3 +85,10 @@ public class StandardReconConfig extends ReconConfig {",
                "-        public ColumnDetail(String columnName, String propertyName, String propertyID) {",
                "+        @JsonCreator",
                "+        public ColumnDetail(",
                "+                @JsonProperty(\"column\")",
                "+                String columnName,",
                "+                @JsonProperty(\"propertyName\")",
                "+                String propertyName,",
                "+                @JsonProperty(\"propertyID\")",
                "+                String propertyID) {",
                "             this.columnName = columnName;",
                "@@ -91,45 +99,4 @@ public class StandardReconConfig extends ReconConfig {",
                "-    static public ReconConfig reconstruct(JSONObject obj) throws Exception {",
                "-        List<ColumnDetail> columnDetails = null;",
                "-        if (obj.has(\"columnDetails\")) {",
                "-            JSONArray columnDetailsA = obj.getJSONArray(\"columnDetails\");",
                "-            int l = columnDetailsA.length();",
                "-            ",
                "-            columnDetails = new ArrayList<ColumnDetail>(l);",
                "-            for (int i = 0; i < l; i++) {",
                "-                JSONObject o = columnDetailsA.getJSONObject(i);",
                "-                ",
                "-                if (o.has(\"property\")) { // legacy",
                "-                    JSONObject p = o.getJSONObject(\"property\");",
                "-                    columnDetails.add(new ColumnDetail(",
                "-                        o.getString(\"column\"),",
                "-                        p.has(\"name\") ? p.getString(\"name\") : null,",
                "-                        p.has(\"id\") ? p.getString(\"id\") : null",
                "-                    ));",
                "-                } else {",
                "-                    columnDetails.add(new ColumnDetail(",
                "-                        o.getString(\"column\"),",
                "-                        o.has(\"propertyName\") ? o.getString(\"propertyName\") : null,",
                "-                        o.has(\"propertyID\") ? o.getString(\"propertyID\") : null",
                "-                    ));",
                "-                }",
                "-            }",
                "-        } else {",
                "-            columnDetails = new ArrayList<ColumnDetail>();",
                "-        }",
                "-        ",
                "-        JSONObject t = obj.has(\"type\") && !obj.isNull(\"type\") ? obj.getJSONObject(\"type\") : null;",
                "-        ",
                "-        int limit = obj.has(\"limit\") && !obj.isNull(\"limit\") ? obj.getInt(\"limit\") : 0;",
                "-        ",
                "-        return new StandardReconConfig(",
                "-            obj.getString(\"service\"),",
                "-            obj.has(\"identifierSpace\") ? obj.getString(\"identifierSpace\") : null,",
                "-            obj.has(\"schemaSpace\") ? obj.getString(\"schemaSpace\") : null,",
                "-            t == null ? null : t.getString(\"id\"),",
                "-            t == null ? null : (t.has(\"name\") ? t.getString(\"name\") : null),",
                "-            obj.getBoolean(\"autoMatch\"),",
                "-            columnDetails,",
                "-            limit",
                "-        );",
                "+    static public ReconConfig reconstruct(String json) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(json, ReconConfig.class);",
                "     }",
                "@@ -164,2 +131,21 @@ public class StandardReconConfig extends ReconConfig {",
                "+    @JsonCreator",
                "+    public StandardReconConfig(",
                "+            @JsonProperty(\"service\")",
                "+            String service,",
                "+            @JsonProperty(\"identifierSpace\")",
                "+            String identifierSpace,",
                "+            @JsonProperty(\"schemaSpace\")",
                "+            String schemaSpace,",
                "+            @JsonProperty(\"type\")",
                "+            ReconType type,",
                "+            @JsonProperty(\"autoMatch\")",
                "+            boolean autoMatch,",
                "+            @JsonProperty(\"columnDetails\")",
                "+            List<ColumnDetail> columnDetails,",
                "+            @JsonProperty(\"limit\")",
                "+            int limit) {",
                "+        this(service, identifierSpace, schemaSpace, type.id, type.name, autoMatch, columnDetails, limit);",
                "+    }",
                "+            ",
                "     public StandardReconConfig(",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconOperation.java b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "index 976b1acb3..612b7d57e 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "@@ -83,3 +83,3 @@ public class ReconOperation extends EngineDependentOperation {",
                "             obj.getString(\"columnName\"),",
                "-            ReconConfig.reconstruct(obj.getJSONObject(\"config\"))",
                "+            ReconConfig.reconstruct(obj.getJSONObject(\"config\").toString())",
                "         );",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java b/main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java",
                "index 9e66b7ca8..e52dcd59d 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java",
                "@@ -3,3 +3,2 @@ package com.google.refine.tests.model;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.Test;",
                "@@ -13,3 +12,3 @@ public class ReconTypeTest {",
                "         String json = \"{\\\"id\\\":\\\"Q7540126\\\",\\\"name\\\":\\\"headquarters\\\"}\";",
                "-        ReconType rt = ReconType.load(new JSONObject(json));",
                "+        ReconType rt = ReconType.load(json);",
                "         TestUtils.isSerializedTo(rt, json);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java b/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "index 470f1ecfe..41e55d4c4 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "@@ -4,5 +4,5 @@ import java.util.ArrayList;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                " import org.testng.Assert;",
                "+import org.testng.annotations.BeforeMethod;",
                " import org.testng.annotations.BeforeTest;",
                "@@ -12,2 +12,4 @@ import com.google.refine.model.recon.ReconConfig;",
                " import com.google.refine.model.recon.StandardReconConfig;",
                "+import com.google.refine.operations.OperationRegistry;",
                "+import com.google.refine.operations.recon.ReconOperation;",
                " import com.google.refine.tests.RefineTest;",
                "@@ -16,2 +18,9 @@ import com.google.refine.tests.util.TestUtils;",
                " public class StandardReconConfigTests extends RefineTest {",
                "+    ",
                "+    @BeforeMethod",
                "+    public void registerOperation() {",
                "+        OperationRegistry.registerOperation(getCoreModule(), \"recon\", ReconOperation.class);",
                "+        ReconConfig.registerReconConfig(getCoreModule(), \"standard-service\", StandardReconConfig.class);",
                "+    }",
                "+    ",
                "@@ -76,3 +85,3 @@ public class StandardReconConfigTests extends RefineTest {",
                "                 \" }\";",
                "-        ReconConfig config = StandardReconConfig.reconstruct(new JSONObject(json));",
                "+        ReconConfig config = ReconConfig.reconstruct(json);",
                "         TestUtils.isSerializedTo(config, json);"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/recon/ReconcileCommand.java",
                "main/src/com/google/refine/model/changes/DataExtensionChange.java",
                "main/src/com/google/refine/model/changes/ReconChange.java",
                "main/src/com/google/refine/model/recon/ReconConfig.java",
                "main/src/com/google/refine/model/recon/ReconConfigResolver.java",
                "main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "main/src/com/google/refine/operations/recon/ReconOperation.java",
                "main/tests/server/src/com/google/refine/tests/model/ReconTypeTest.java",
                "main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d26d7b4a42140e53e2615842cbc57fe2a6294a11",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542717733,
            "hunks": 15,
            "message": "Migrate GetScatterPlotCommand to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java b/main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java",
                "index 6d0f87b08..ea9f8c293 100644",
                "--- a/main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java",
                "+++ b/main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java",
                "@@ -46,3 +46,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -50,2 +49,3 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.google.refine.browsing.Engine;",
                "@@ -54,3 +54,2 @@ import com.google.refine.browsing.facets.ScatterplotDrawingRowVisitor;",
                " import com.google.refine.browsing.facets.ScatterplotFacet;",
                "-import com.google.refine.browsing.facets.ScatterplotFacet.ScatterplotFacetConfig;",
                " import com.google.refine.browsing.util.NumericBinIndex;",
                "@@ -62,2 +61,3 @@ import com.google.refine.model.Column;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -76,3 +76,5 @@ public class GetScatterplotCommand extends Command {",
                "             Engine engine = getEngine(request, project);",
                "-            JSONObject conf = getJsonParameter(request,\"plotter\");",
                "+            PlotterConfig conf = ParsingUtilities.mapper.readValue(",
                "+            \t\trequest.getParameter(\"plotter\"),",
                "+            \t\tPlotterConfig.class);",
                "@@ -96,3 +98,28 @@ public class GetScatterplotCommand extends Command {",
                "-    public void draw(OutputStream output, Project project, Engine engine, JSONObject o) throws IOException {",
                "+    protected static class PlotterConfig {",
                "+    \t@JsonProperty(ScatterplotFacet.SIZE)",
                "+    \tpublic int size = 100;",
                "+    \t@JsonProperty(ScatterplotFacet.DOT)",
                "+    \tdouble dot = 100;",
                "+    \t@JsonProperty(ScatterplotFacet.DIM_X)",
                "+    \tpublic int dim_x = ScatterplotFacet.LIN;",
                "+    \t@JsonProperty(ScatterplotFacet.DIM_Y)",
                "+    \tpublic int dim_y = ScatterplotFacet.LIN;",
                "+    \t@JsonProperty(ScatterplotFacet.ROTATION)",
                "+    \tpublic int rotation = ScatterplotFacet.NO_ROTATION;",
                "+    \t@JsonProperty(ScatterplotFacet.COLOR)",
                "+    \tpublic String color_str = \"000000\";",
                "+    \t@JsonProperty(ScatterplotFacet.BASE_COLOR)",
                "+    \tpublic String base_color_str = null;",
                "+    \t@JsonProperty(ScatterplotFacet.X_COLUMN_NAME)",
                "+    \tpublic String columnName_x = \"\";",
                "+    \t@JsonProperty(ScatterplotFacet.X_EXPRESSION)",
                "+    \tpublic String expression_x = \"value\";",
                "+    \t@JsonProperty(ScatterplotFacet.Y_COLUMN_NAME)",
                "+    \tpublic String columnName_y = \"\";",
                "+    \t@JsonProperty(ScatterplotFacet.Y_EXPRESSION)",
                "+    \tpublic String expression_y = \"value\";",
                "+    }",
                "+    ",
                "+    public void draw(OutputStream output, Project project, Engine engine, PlotterConfig o) throws IOException {",
                "@@ -109,22 +136,8 @@ public class GetScatterplotCommand extends Command {",
                "-        int size = (o.has(ScatterplotFacet.SIZE)) ? o.getInt(ScatterplotFacet.SIZE) : 100;",
                "-",
                "-        double dot = (o.has(ScatterplotFacet.DOT)) ? o.getDouble(ScatterplotFacet.DOT) : 100;",
                "-        ",
                "-        int dim_x = (o.has(ScatterplotFacet.DIM_X)) ? ScatterplotFacet.getAxisDim(o.getString(ScatterplotFacet.DIM_X)) : ScatterplotFacet.LIN;",
                "-        int dim_y = (o.has(ScatterplotFacet.DIM_Y)) ? ScatterplotFacet.getAxisDim(o.getString(ScatterplotFacet.DIM_Y)) : ScatterplotFacet.LIN;",
                "-",
                "-        int rotation = (o.has(ScatterplotFacet.ROTATION)) ? ScatterplotFacetConfig.getRotation(o.getString(ScatterplotFacet.ROTATION)) : ScatterplotFacet.NO_ROTATION;",
                "-        ",
                "-        String color_str = (o.has(ScatterplotFacet.COLOR)) ? o.getString(ScatterplotFacet.COLOR) : \"000000\";",
                "-        Color color = new Color(Integer.parseInt(color_str,16));",
                "+        Color color = new Color(Integer.parseInt(o.color_str,16));",
                "-        String base_color_str = (o.has(ScatterplotFacet.BASE_COLOR)) ? o.getString(ScatterplotFacet.BASE_COLOR) : null;",
                "-        Color base_color = base_color_str != null ? new Color(Integer.parseInt(base_color_str,16)) : null;",
                "+        Color base_color = o.base_color_str != null ? new Color(Integer.parseInt(o.base_color_str,16)) : null;",
                "-        String columnName_x = o.getString(ScatterplotFacet.X_COLUMN_NAME);",
                "-        String expression_x = (o.has(ScatterplotFacet.X_EXPRESSION)) ? o.getString(ScatterplotFacet.X_EXPRESSION) : \"value\";",
                "-        ",
                "-        if (columnName_x.length() > 0) {",
                "-            Column x_column = project.columnModel.getColumnByName(columnName_x);",
                "+        if (o.columnName_x.length() > 0) {",
                "+            Column x_column = project.columnModel.getColumnByName(o.columnName_x);",
                "             if (x_column != null) {",
                "@@ -137,3 +150,3 @@ public class GetScatterplotCommand extends Command {",
                "         try {",
                "-            eval_x = MetaParser.parse(expression_x);",
                "+            eval_x = MetaParser.parse(o.expression_x);",
                "         } catch (ParsingException e) {",
                "@@ -142,7 +155,4 @@ public class GetScatterplotCommand extends Command {",
                "-        String columnName_y = o.getString(ScatterplotFacet.Y_COLUMN_NAME);",
                "-        String expression_y = (o.has(ScatterplotFacet.Y_EXPRESSION)) ? o.getString(ScatterplotFacet.Y_EXPRESSION) : \"value\";",
                "-        ",
                "-        if (columnName_y.length() > 0) {",
                "-            Column y_column = project.columnModel.getColumnByName(columnName_y);",
                "+        if (o.columnName_y.length() > 0) {",
                "+            Column y_column = project.columnModel.getColumnByName(o.columnName_y);",
                "             if (y_column != null) {",
                "@@ -155,3 +165,3 @@ public class GetScatterplotCommand extends Command {",
                "         try {",
                "-            eval_y = MetaParser.parse(expression_y);",
                "+            eval_y = MetaParser.parse(o.expression_y);",
                "         } catch (ParsingException e) {",
                "@@ -163,7 +173,6 @@ public class GetScatterplotCommand extends Command {",
                "-        String col_x_name = o.getString(ScatterplotFacet.X_COLUMN_NAME);",
                "-        Column column_x = project.columnModel.getColumnByName(col_x_name);",
                "+        Column column_x = project.columnModel.getColumnByName(o.columnName_x);",
                "         if (column_x != null) {",
                "             columnIndex_x = column_x.getCellIndex();",
                "-            index_x = ScatterplotFacet.getBinIndex(project, column_x, eval_x, expression_x);",
                "+            index_x = ScatterplotFacet.getBinIndex(project, column_x, eval_x, o.expression_x);",
                "             min_x = index_x.getMin();",
                "@@ -172,7 +181,6 @@ public class GetScatterplotCommand extends Command {",
                "-        String col_y_name = o.getString(ScatterplotFacet.Y_COLUMN_NAME);",
                "-        Column column_y = project.columnModel.getColumnByName(col_y_name);",
                "+        Column column_y = project.columnModel.getColumnByName(o.columnName_y);",
                "         if (column_y != null) {",
                "             columnIndex_y = column_y.getCellIndex();",
                "-            index_y = ScatterplotFacet.getBinIndex(project, column_y, eval_y, expression_y);",
                "+            index_y = ScatterplotFacet.getBinIndex(project, column_y, eval_y, o.expression_y);",
                "             min_y = index_y.getMin();",
                "@@ -184,3 +192,3 @@ public class GetScatterplotCommand extends Command {",
                "                 columnIndex_x, columnIndex_y, min_x, max_x, min_y, max_y, ",
                "-                size, dim_x, dim_y, rotation, dot, color",
                "+                o.size, o.dim_x, o.dim_y, o.rotation, o.dot, color",
                "             );"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d908635c1f90ceebf49f1bbdfd0609342c673437",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540200722,
            "hunks": 5,
            "message": "Jackson deserialization for ReconMarkNewTopicsOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java b/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "index 8d3efb59b..549f5cee2 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations.recon;",
                "+import java.io.IOException;",
                " import java.util.HashMap;",
                "@@ -41,2 +42,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -57,2 +59,3 @@ import com.google.refine.model.recon.ReconConfig;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -61,13 +64,14 @@ public class ReconMarkNewTopicsOperation extends EngineDependentMassCellOperatio",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        ",
                "-        return new ReconMarkNewTopicsOperation(",
                "-            EngineConfig.reconstruct(engineConfig), ",
                "-            obj.getString(\"columnName\"),",
                "-            obj.has(\"shareNewTopics\") ? obj.getBoolean(\"shareNewTopics\") : false",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconMarkNewTopicsOperation.class);",
                "     }",
                "-    public ReconMarkNewTopicsOperation(EngineConfig engineConfig, String columnName, boolean shareNewTopics) {",
                "+    @JsonCreator",
                "+    public ReconMarkNewTopicsOperation(",
                "+            @JsonProperty(\"engineConfig\")",
                "+            EngineConfig engineConfig,",
                "+            @JsonProperty(\"columnName\")",
                "+            String columnName,",
                "+            @JsonProperty(\"shareNewTopics\")",
                "+            boolean shareNewTopics) {",
                "         super(engineConfig, columnName, false);"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bca832ed0353ad717a6c170a4fbf5603f1eda3ab",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541437426,
            "hunks": 2,
            "message": "Enable legacy JSON parsing for compatibility with tests",
            "diff": [
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index 9717c880b..cb1ede0f4 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -61,2 +61,3 @@ import org.json.JSONTokener;",
                "+import com.fasterxml.jackson.core.JsonParser;",
                " import com.fasterxml.jackson.core.JsonFactory;",
                "@@ -88,2 +89,3 @@ public class ParsingUtilities {",
                "         mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);",
                "+        mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/util/ParsingUtilities.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b6a724b4299f8952d7ffb6003b70d46df6d93fbb",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538301046,
            "hunks": 12,
            "message": "Disable Jackson autodetect and annotate remaining classes",
            "diff": [
                "diff --git a/main/src/com/google/refine/expr/EvalError.java b/main/src/com/google/refine/expr/EvalError.java",
                "index 5f4912deb..34682cdfc 100644",
                "--- a/main/src/com/google/refine/expr/EvalError.java",
                "+++ b/main/src/com/google/refine/expr/EvalError.java",
                "@@ -41,2 +41,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -52,2 +54,3 @@ public class EvalError implements Serializable, Jsonizable {",
                "+    @JsonProperty(\"message\")",
                "     final public String message;",
                "@@ -77,2 +80,7 @@ public class EvalError implements Serializable, Jsonizable {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"type\")",
                "+    public String getType() {",
                "+        return \"error\";",
                "+    }",
                "diff --git a/main/src/com/google/refine/model/ReconStats.java b/main/src/com/google/refine/model/ReconStats.java",
                "index a0c3ea6d4..00f555e29 100644",
                "--- a/main/src/com/google/refine/model/ReconStats.java",
                "+++ b/main/src/com/google/refine/model/ReconStats.java",
                "@@ -42,2 +42,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -55,4 +57,7 @@ public class ReconStats implements Jsonizable {",
                "+    @JsonProperty(\"nonBlanks\")",
                "     final public int    nonBlanks;",
                "+    @JsonProperty(\"newTopics\")",
                "     final public int    newTopics;",
                "+    @JsonProperty(\"matchedTopics\")",
                "     final public int    matchedTopics;",
                "diff --git a/main/src/com/google/refine/model/ReconType.java b/main/src/com/google/refine/model/ReconType.java",
                "index 088da69b5..3f172bf28 100644",
                "--- a/main/src/com/google/refine/model/ReconType.java",
                "+++ b/main/src/com/google/refine/model/ReconType.java",
                "@@ -41,2 +41,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -49,3 +51,5 @@ import com.google.refine.Jsonizable;",
                " public class ReconType implements Jsonizable {",
                "+    @JsonProperty(\"id\")",
                "     public String id;",
                "+    @JsonProperty(\"name\")",
                "     public String name;",
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index 8b51fcc04..e067a26fd 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -61,2 +61,5 @@ import org.json.JSONTokener;",
                "+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;",
                "+import com.fasterxml.jackson.annotation.PropertyAccessor;",
                "+import com.fasterxml.jackson.databind.DeserializationFeature;",
                " import com.fasterxml.jackson.databind.ObjectMapper;",
                "@@ -76,2 +79,4 @@ public class ParsingUtilities {",
                "         mapper.registerModule(module);",
                "+        mapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE);",
                "+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/expr/EvalError.java",
                "main/src/com/google/refine/model/ReconStats.java",
                "main/src/com/google/refine/model/ReconType.java",
                "main/src/com/google/refine/util/ParsingUtilities.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1e578384e2f56629bded447537100bcd762fdcba",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543181587,
            "hunks": 7,
            "message": "Avoid double serialization of json mode in recon config",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/recon/ReconConfig.java b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "index bf2ebc063..972d89972 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "@@ -45,4 +45,4 @@ import org.slf4j.LoggerFactory;",
                "-import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.annotation.JsonTypeInfo;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;\t",
                " import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;",
                "@@ -133,4 +133,5 @@ abstract public class ReconConfig  {",
                "      * This is the same identifier that was used to register the registration mode.",
                "+     * Jackson already adds the mode during serialization hence the JsonIgnore here.",
                "      */",
                "-    @JsonProperty(\"mode\")",
                "+    @JsonIgnore",
                "     abstract public String getMode();",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java b/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "index 41e55d4c4..2e4466c27 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java",
                "@@ -2,2 +2,4 @@ package com.google.refine.tests.model.recon;",
                "+import static org.testng.Assert.assertEquals;",
                "+",
                " import java.util.ArrayList;",
                "@@ -16,2 +18,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -87,2 +90,6 @@ public class StandardReconConfigTests extends RefineTest {",
                "         TestUtils.isSerializedTo(config, json);",
                "+        ",
                "+        // the \"mode\" only appears once in the serialization result",
                "+        String fullJson = ParsingUtilities.mapper.writeValueAsString(config);",
                "+        assertEquals(fullJson.indexOf(\"\\\"mode\\\"\", fullJson.indexOf(\"\\\"mode\\\"\")+1), -1);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/recon/ReconConfig.java",
                "main/tests/server/src/com/google/refine/tests/model/recon/StandardReconConfigTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fec28b99bc113ba2fd8ceb9d9b4e9aa5f479fbf8",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538669623,
            "hunks": 27,
            "message": "Various serialization fixes",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/Engine.java b/main/src/com/google/refine/browsing/Engine.java",
                "index 4feb97ec8..204e8a11e 100644",
                "--- a/main/src/com/google/refine/browsing/Engine.java",
                "+++ b/main/src/com/google/refine/browsing/Engine.java",
                "@@ -43,2 +43,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -71,4 +72,5 @@ public class Engine  {",
                "     protected Project _project;",
                "+    @JsonProperty(\"facets\")",
                "     protected List<Facet> _facets = new LinkedList<Facet>();",
                "-    @JsonValue",
                "+    @JsonIgnore",
                "     protected EngineConfig _config = new EngineConfig(Collections.emptyList(), Mode.RowBased);",
                "@@ -86,2 +88,3 @@ public class Engine  {",
                "+    @JsonProperty(\"engine-mode\")",
                "     public Mode getMode() {",
                "diff --git a/main/src/com/google/refine/browsing/facets/ListFacet.java b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "index 07ecf61f0..521af7858 100644",
                "--- a/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "@@ -233,4 +233,5 @@ public class ListFacet implements Facet {",
                "     public Integer getChoiceCount() {",
                "-        if (_errorMessage == null && _choices.size() > getLimit()) ",
                "+        if (_errorMessage == null && _choices.size() > getLimit()) {",
                "             return _choices.size();",
                "+        }",
                "         return null;",
                "@@ -241,4 +242,5 @@ public class ListFacet implements Facet {",
                "     public List<NominalFacetChoice> getChoices() {",
                "-        if (getError() == null)",
                "+        if (getError() == null) {",
                "             return _choices;",
                "+        }",
                "         return null;",
                "diff --git a/main/src/com/google/refine/commands/GetPreferenceCommand.java b/main/src/com/google/refine/commands/GetPreferenceCommand.java",
                "index cd1681b99..2d133c041 100644",
                "--- a/main/src/com/google/refine/commands/GetPreferenceCommand.java",
                "+++ b/main/src/com/google/refine/commands/GetPreferenceCommand.java",
                "@@ -45,2 +45,3 @@ import com.google.refine.ProjectManager;",
                " import com.google.refine.preference.PreferenceStore;",
                "+import com.google.refine.preference.TopList;",
                "@@ -49,6 +50,10 @@ public class GetPreferenceCommand extends Command {",
                "         @JsonProperty(\"value\")",
                "-        protected Object pref;",
                "+        protected Object value;",
                "-        protected PreferenceValue(Object o) {",
                "-            pref = o;",
                "+        protected PreferenceValue(Object pref) {",
                "+            if (pref == null || pref instanceof String || pref instanceof Number || pref instanceof Boolean || pref instanceof TopList) {",
                "+                value = pref;",
                "+            } else {",
                "+                value = pref.toString();",
                "+            }",
                "         }",
                "diff --git a/main/src/com/google/refine/commands/HttpHeadersSupport.java b/main/src/com/google/refine/commands/HttpHeadersSupport.java",
                "index 6bac9db5b..e7cd88b3e 100644",
                "--- a/main/src/com/google/refine/commands/HttpHeadersSupport.java",
                "+++ b/main/src/com/google/refine/commands/HttpHeadersSupport.java",
                "@@ -39,2 +39,5 @@ import java.util.Set;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.RefineServlet;",
                "@@ -46,4 +49,7 @@ abstract public class HttpHeadersSupport {",
                "     static public class HttpHeaderInfo {",
                "+        @JsonIgnore",
                "         final public String                 name;",
                "+        @JsonProperty(\"header\")",
                "         final public String                 header;",
                "+        @JsonProperty(\"defaultValue\")",
                "         final public String                 defaultValue;",
                "diff --git a/main/src/com/google/refine/expr/MetaParser.java b/main/src/com/google/refine/expr/MetaParser.java",
                "index 274b8e0f8..03ec48949 100644",
                "--- a/main/src/com/google/refine/expr/MetaParser.java",
                "+++ b/main/src/com/google/refine/expr/MetaParser.java",
                "@@ -41,2 +41,5 @@ import java.util.Set;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.grel.Parser;",
                "@@ -49,4 +52,7 @@ abstract public class MetaParser {",
                "     static public class LanguageInfo {",
                "+        @JsonProperty(\"name\")",
                "         final public String                 name;",
                "+        @JsonIgnore",
                "         final public LanguageSpecificParser parser;",
                "+        @JsonProperty(\"defaultExpression\")",
                "         final public String                 defaultExpression;",
                "diff --git a/main/src/com/google/refine/importing/ImportingJob.java b/main/src/com/google/refine/importing/ImportingJob.java",
                "index 4f52f6c3b..27b0c65e9 100644",
                "--- a/main/src/com/google/refine/importing/ImportingJob.java",
                "+++ b/main/src/com/google/refine/importing/ImportingJob.java",
                "@@ -44,2 +44,5 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonRawValue;",
                "+",
                " import com.google.refine.ProjectManager;",
                "@@ -79,2 +82,7 @@ public class ImportingJob  {",
                "+    @JsonProperty(\"config\")",
                "+    @JsonRawValue",
                "+    public String getJsonConfig() {",
                "+        return config.toString();",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconOperation.java b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "index 34593b77c..976b1acb3 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "@@ -151,5 +151,5 @@ public class ReconOperation extends EngineDependentOperation {",
                "                 \"  \\\"facetConfig\\\" : {\\n\" + ",
                "-                \"  \\\"columnName\\\" : \\\"researcher\\\",\\n\" + ",
                "+                \"  \\\"columnName\\\" : \\\"\" + _columnName + \"\\\",\\n\" + ",
                "                 \"  \\\"expression\\\" : \\\"forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \\\\\\\"(unreconciled)\\\\\\\", \\\\\\\"(blank)\\\\\\\"))\\\",\\n\" + ",
                "-                \"    \\\"name\\\" : \\\"researcher: judgment\\\"\\n\" + ",
                "+                \"    \\\"name\\\" : \\\"\" + _columnName + \": judgment\\\"\\n\" + ",
                "                 \"    },\\n\" + ",
                "@@ -164,6 +164,6 @@ public class ReconOperation extends EngineDependentOperation {",
                "                 \"  \\\"facetConfig\\\" : {\\n\" + ",
                "-                \"    \\\"columnName\\\" : \\\"researcher\\\",\\n\" + ",
                "+                \"    \\\"columnName\\\" : \\\"\" + _columnName + \"\\\",\\n\" + ",
                "                 \"    \\\"expression\\\" : \\\"cell.recon.best.score\\\",\\n\" + ",
                "                 \"    \\\"mode\\\" : \\\"range\\\",\\n\" + ",
                "-                \"    \\\"name\\\" : \\\"researcher: best candidate's score\\\"\\n\" + ",
                "+                \"    \\\"name\\\" : \\\"\" + _columnName + \": best candidate's score\\\"\\n\" + ",
                "                 \"         },\\n\" + ",
                "diff --git a/main/src/com/google/refine/preference/PreferenceStore.java b/main/src/com/google/refine/preference/PreferenceStore.java",
                "index 3e64a4a77..25a27fba2 100644",
                "--- a/main/src/com/google/refine/preference/PreferenceStore.java",
                "+++ b/main/src/com/google/refine/preference/PreferenceStore.java",
                "@@ -81,3 +81,3 @@ public class PreferenceStore  {",
                "         ObjectMapper mapper = new ObjectMapper();",
                "-        if(value != null && value instanceof JSONArray) {",
                "+        if(value != null && (value instanceof JSONArray || value instanceof JSONObject)) {",
                "             try {",
                "diff --git a/main/src/com/google/refine/util/Pool.java b/main/src/com/google/refine/util/Pool.java",
                "index 0ac44ab0e..ddb9ea39e 100644",
                "--- a/main/src/com/google/refine/util/Pool.java",
                "+++ b/main/src/com/google/refine/util/Pool.java",
                "@@ -109,2 +109,3 @@ public class Pool  {",
                "             ParsingUtilities.saveWriter.writeValue(writer, recon);",
                "+            writer.write('\\n');",
                "         }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "index 6a18c1782..92a77bf63 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "@@ -35,3 +35,3 @@ public class ListFacetTests extends RefineTest {",
                "             + \"\\\"invert\\\":false,\"",
                "-            + \"\\\"error\\\":\\\"No column named Column A\\\"}\\\" are not equal as JSON strings.\\n\" + ",
                "+            + \"\\\"error\\\":\\\"No column named Column A\\\"\" + ",
                "             \"}\";"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/Engine.java",
                "main/src/com/google/refine/browsing/facets/ListFacet.java",
                "main/src/com/google/refine/commands/GetPreferenceCommand.java",
                "main/src/com/google/refine/commands/HttpHeadersSupport.java",
                "main/src/com/google/refine/expr/MetaParser.java",
                "main/src/com/google/refine/importing/ImportingJob.java",
                "main/src/com/google/refine/operations/recon/ReconOperation.java",
                "main/src/com/google/refine/preference/PreferenceStore.java",
                "main/src/com/google/refine/util/Pool.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3a1f39bc95be65f5f4b956c91f6dadc44da9030f",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543460386,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bbf6dcd767950802dd9781c22afa5806fe54a394",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540140616,
            "hunks": 3,
            "message": "Jackson deserialization for ColumnGroup",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/ColumnGroup.java b/main/src/com/google/refine/model/ColumnGroup.java",
                "index c8a261af2..c6059d4e9 100644",
                "--- a/main/src/com/google/refine/model/ColumnGroup.java",
                "+++ b/main/src/com/google/refine/model/ColumnGroup.java",
                "@@ -40,4 +40,3 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                "@@ -58,3 +57,10 @@ public class ColumnGroup  {",
                "-    public ColumnGroup(int startColumnIndex, int columnSpan, int keyColumnIndex) {",
                "+    @JsonCreator",
                "+    public ColumnGroup(",
                "+            @JsonProperty(\"startColumnIndex\")",
                "+            int startColumnIndex,",
                "+            @JsonProperty(\"columnSpan\")",
                "+            int columnSpan,",
                "+            @JsonProperty(\"keyColumnIndex\")",
                "+            int keyColumnIndex) {",
                "         this.startColumnIndex = startColumnIndex;",
                "@@ -100,10 +106,4 @@ public class ColumnGroup  {",
                "-    static public ColumnGroup load(String s) throws Exception {",
                "-        JSONObject obj = ParsingUtilities.evaluateJsonStringToObject(s);",
                "-        ",
                "-        return new ColumnGroup(",
                "-            obj.getInt(\"startColumnIndex\"),",
                "-            obj.getInt(\"columnSpan\"),",
                "-            obj.getInt(\"keyColumnIndex\")",
                "-        );",
                "+    static public ColumnGroup load(String s) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(s, ColumnGroup.class);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/ColumnGroup.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a3bba83c630d9ad3c40f5b6188184afff31781ec",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1537717927,
            "hunks": 42,
            "message": "Jackson serialization for column operations",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/column/AddColumnByFetchingURLsCommand.java b/main/src/com/google/refine/commands/column/AddColumnByFetchingURLsCommand.java",
                "index fa0112e25..13c7ea762 100644",
                "--- a/main/src/com/google/refine/commands/column/AddColumnByFetchingURLsCommand.java",
                "+++ b/main/src/com/google/refine/commands/column/AddColumnByFetchingURLsCommand.java",
                "@@ -35,5 +35,8 @@ package com.google.refine.commands.column;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+",
                " import javax.servlet.http.HttpServletRequest;",
                "-import org.json.JSONArray;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "@@ -45,2 +48,3 @@ import com.google.refine.operations.cell.TextTransformOperation;",
                " import com.google.refine.operations.column.ColumnAdditionByFetchingURLsOperation;",
                "+import com.google.refine.operations.column.ColumnAdditionByFetchingURLsOperation.HttpHeader;",
                "@@ -58,3 +62,4 @@ public class AddColumnByFetchingURLsCommand extends EngineDependentCommand {",
                "         boolean cacheResponses = Boolean.parseBoolean(request.getParameter(\"cacheResponses\"));",
                "-        JSONArray httpHeadersJson = new JSONArray(request.getParameter(\"httpHeaders\"));",
                "+        ObjectMapper mapper = new ObjectMapper();",
                "+        List<HttpHeader> headers = Arrays.asList(mapper.readValue(request.getParameter(\"httpHeaders\"), HttpHeader[].class));",
                "@@ -69,3 +74,3 @@ public class AddColumnByFetchingURLsCommand extends EngineDependentCommand {",
                "             cacheResponses,",
                "-            httpHeadersJson",
                "+            headers",
                "         );",
                "diff --git a/main/src/com/google/refine/operations/OnError.java b/main/src/com/google/refine/operations/OnError.java",
                "index 3fc0c7695..a43b604dd 100644",
                "--- a/main/src/com/google/refine/operations/OnError.java",
                "+++ b/main/src/com/google/refine/operations/OnError.java",
                "@@ -35,5 +35,10 @@ package com.google.refine.operations;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " public enum OnError {",
                "+    @JsonProperty(\"keep-original\")",
                "     KeepOriginal,",
                "+    @JsonProperty(\"set-to-blank\")",
                "     SetToBlank,",
                "+    @JsonProperty(\"store-error\")",
                "     StoreError",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "index fa6a6f12a..8af2c0dcf 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "@@ -52,2 +52,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.common.cache.CacheBuilder;",
                "@@ -56,2 +58,3 @@ import com.google.common.cache.LoadingCache;",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.browsing.Engine;",
                "@@ -83,2 +86,23 @@ import com.google.refine.util.ParsingUtilities;",
                " public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperation {",
                "+    public static final class HttpHeader implements Jsonizable {",
                "+        @JsonProperty(\"name\")",
                "+        final public String name;",
                "+        @JsonProperty(\"value\")",
                "+        final public String value;",
                "+        ",
                "+        public HttpHeader(String name, String value) {",
                "+            this.name = name;",
                "+            this.value = value;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"name\"); writer.value(name);",
                "+            writer.key(\"value\"); writer.value(value);",
                "+            writer.endObject();",
                "+        }",
                "+    }",
                "+    ",
                "     final protected String     _baseColumnName;",
                "@@ -91,3 +115,3 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "     final protected boolean    _cacheResponses;",
                "-    final protected JSONArray  _httpHeadersJson;",
                "+    final protected List<HttpHeader>  _httpHeadersJson;",
                "@@ -95,2 +119,13 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "         JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "+        ",
                "+        List<HttpHeader> headers = null;",
                "+        JSONArray headersJson = obj.optJSONArray(\"httpHeadersJson\");",
                "+        if (headersJson != null) {",
                "+            headers = new ArrayList<>(headersJson.length());",
                "+            for (int i = 0; i < headersJson.length(); i++) {",
                "+                String headerLabel = headersJson.getJSONObject(i).getString(\"name\");",
                "+                String headerValue = headersJson.getJSONObject(i).getString(\"value\");",
                "+                headers.add(new HttpHeader(headerLabel, headerValue));",
                "+            }",
                "+        }",
                "@@ -105,3 +140,3 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "             obj.optBoolean(\"cacheResponses\", false), // false for retro-compatibility",
                "-            obj.optJSONArray(\"httpHeadersJson\") // will be null if it doesn't exist for retro-compatibility",
                "+            headers // will be null if it doesn't exist for retro-compatibility",
                "         );",
                "@@ -118,3 +153,3 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "         boolean        cacheResponses,",
                "-        JSONArray      httpHeadersJson",
                "+        List<HttpHeader>      httpHeadersJson",
                "     ) {",
                "@@ -149,5 +184,52 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "         writer.key(\"cacheResponses\"); writer.value(_cacheResponses);",
                "-        writer.key(\"httpHeadersJson\"); writer.value(_httpHeadersJson);",
                "+        if (_httpHeadersJson != null) {",
                "+            writer.key(\"httpHeadersJson\");",
                "+            writer.array();",
                "+            for(HttpHeader header : _httpHeadersJson) {",
                "+                header.write(writer, options);",
                "+            }",
                "+            writer.endArray();",
                "+        }",
                "         writer.endObject();",
                "     }",
                "+    ",
                "+    @JsonProperty(\"newColumnName\")",
                "+    public String getNewColumnName() {",
                "+        return _newColumnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"columnInsertIndex\")",
                "+    public int getColumnInsertIndex() {",
                "+        return _columnInsertIndex;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"baseColumnName\")",
                "+    public String getBaseColumnName() {",
                "+        return _baseColumnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"urlExpression\")",
                "+    public String getUrlExpression() {",
                "+        return _urlExpression;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"onError\")",
                "+    public OnError getOnError() {",
                "+        return _onError;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"delay\")",
                "+    public int getDelay() {",
                "+        return _delay;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"httpHeadersJson\")",
                "+    public List<HttpHeader> getHttpHeadersJson() {",
                "+        return _httpHeadersJson;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"cacheResponses\")",
                "+    public boolean getCacheResponses() {",
                "+        return _cacheResponses;",
                "+    }",
                "@@ -181,4 +263,3 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "             getBriefDescription(null),",
                "-            _cacheResponses,",
                "-            _httpHeadersJson",
                "+            _cacheResponses",
                "         );",
                "@@ -199,4 +280,3 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "             String description,",
                "-            boolean cacheResponses,",
                "-            JSONArray httpHeadersJson",
                "+            boolean cacheResponses",
                "         ) throws JSONException {",
                "@@ -337,5 +417,5 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "                 if (_httpHeadersJson != null) {",
                "-                    for (int i = 0; i < _httpHeadersJson.length(); i++) {",
                "-                        String headerLabel = _httpHeadersJson.getJSONObject(i).getString(\"name\");",
                "-                        String headerValue = _httpHeadersJson.getJSONObject(i).getString(\"value\");",
                "+                    for (int i = 0; i < _httpHeadersJson.size(); i++) {",
                "+                        String headerLabel = _httpHeadersJson.get(i).name;",
                "+                        String headerValue = _httpHeadersJson.get(i).value;",
                "                         if (headerValue != null && !headerValue.isEmpty()) {",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java b/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "index cf2d3b10b..0d4334a07 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "@@ -44,2 +44,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -120,3 +122,28 @@ public class ColumnAdditionOperation extends EngineDependentOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"newColumnName\")",
                "+    public String getNewColumnName() {",
                "+        return _newColumnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"columnInsertIndex\")",
                "+    public int getColumnInsertIndex() {",
                "+        return _columnInsertIndex;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"baseColumnName\")",
                "+    public String getBaseColumnName() {",
                "+        return _baseColumnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"expression\")",
                "+    public String getExpression() {",
                "+        return _expression;",
                "+    }",
                "+    @JsonProperty(\"onError\")",
                "+    public OnError getOnError() {",
                "+        return _onError;",
                "+    }",
                "+    ",
                "     @Override",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnMoveOperation.java b/main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "index c4f18a3fc..a000859da 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "@@ -41,2 +41,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.history.Change;",
                "@@ -78,3 +80,12 @@ public class ColumnMoveOperation extends AbstractOperation {",
                "     }",
                "-",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"index\")",
                "+    public int getIndex() {",
                "+        return _index;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java b/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "index 54fb8116a..5de7a5895 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "@@ -41,2 +41,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.history.Change;",
                "@@ -74,2 +76,7 @@ public class ColumnRemovalOperation extends AbstractOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnRenameOperation.java b/main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "index 846f66fbc..0d4b85c9a 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "@@ -41,2 +41,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.history.Change;",
                "@@ -78,3 +80,12 @@ public class ColumnRenameOperation extends AbstractOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"oldColumnName\")",
                "+    public String getOldColumnName() {",
                "+        return _oldColumnName;",
                "+    }",
                "+    @JsonProperty(\"newColumnName\")",
                "+    public String getNewColumnName() {",
                "+        return _newColumnName;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnReorderOperation.java b/main/src/com/google/refine/operations/column/ColumnReorderOperation.java",
                "index 4920b2e5e..3b7f906a8 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnReorderOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnReorderOperation.java",
                "@@ -43,2 +43,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.history.HistoryEntry;",
                "@@ -79,2 +81,7 @@ public class ColumnReorderOperation extends AbstractOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"columnNames\")",
                "+    public List<String> getColumnNames() {",
                "+        return _columnNames;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnSplitOperation.java b/main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "index f4c7aeeea..adc7d1860 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "@@ -46,2 +46,6 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -70,4 +74,4 @@ public class ColumnSplitOperation extends EngineDependentOperation {",
                "     final protected String     _separator;",
                "-    final protected boolean    _regex;",
                "-    final protected int        _maxColumns;",
                "+    final protected Boolean    _regex;",
                "+    final protected Integer    _maxColumns;",
                "@@ -138,4 +142,4 @@ public class ColumnSplitOperation extends EngineDependentOperation {",
                "         _separator = null;",
                "-        _regex = false;",
                "-        _maxColumns = -1;",
                "+        _regex = null;",
                "+        _maxColumns = null;",
                "@@ -169,2 +173,46 @@ public class ColumnSplitOperation extends EngineDependentOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"guessCellType\")",
                "+    public boolean getGuessCellType() {",
                "+        return _guessCellType;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"removeOriginalColumn\")",
                "+    public boolean getRemoveOriginalColumn() {",
                "+        return _removeOriginalColumn;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"mode\")",
                "+    public String getMode() {",
                "+        return _mode;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"separator\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getSeparator() {",
                "+        return _separator;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"regex\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Boolean getRegex() {",
                "+        return _regex;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"maxColumns\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Integer getMaxColumns() {",
                "+        return _maxColumns;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"fieldLengths\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public int[] getFieldLengths() {",
                "+        return _fieldLengths;",
                "+    }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "index cbef00f53..7d29fd608 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "@@ -37,5 +37,6 @@ import java.io.IOException;",
                " import java.net.InetAddress;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                " import java.util.Properties;",
                "-import org.json.JSONArray;",
                " import org.json.JSONException;",
                "@@ -58,2 +59,3 @@ import com.google.refine.operations.OperationRegistry;",
                " import com.google.refine.operations.column.ColumnAdditionByFetchingURLsOperation;",
                "+import com.google.refine.operations.column.ColumnAdditionByFetchingURLsOperation.HttpHeader;",
                " import com.google.refine.process.Process;",
                "@@ -235,7 +237,6 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "         String acceptValue = \"*/*\";",
                "-        String jsonString = \"[{\\\"name\\\": \\\"authorization\\\",\\\"value\\\": \\\"\"+authorizationValue+",
                "-                             \"\\\"},{\\\"name\\\": \\\"user-agent\\\",\\\"value\\\": \\\"\"+userAgentValue+",
                "-                             \"\\\"},{\\\"name\\\": \\\"accept\\\",\\\"value\\\": \\\"\"+acceptValue+\"\\\"}]\";",
                "-",
                "-        JSONArray httpHeadersJson = new JSONArray(jsonString);",
                "+        List<HttpHeader> headers = new ArrayList<>();",
                "+        headers.add(new HttpHeader(\"authorization\", authorizationValue));",
                "+        headers.add(new HttpHeader(\"user-agent\", userAgentValue));",
                "+        headers.add(new HttpHeader(\"accept\", acceptValue));",
                "@@ -249,3 +250,3 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "             true,",
                "-            httpHeadersJson);",
                "+            headers);",
                "         ProcessManager pm = project.getProcessManager();",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "index 1aa3a997c..57949edd9 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "@@ -22,3 +22,3 @@ public class ColumnSplitOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeColumnSplitOperation() throws JSONException, Exception {",
                "+    public void serializeColumnSplitOperationBySeparator() throws JSONException, Exception {",
                "         String json = \"{\\n\" + ",
                "@@ -41,2 +41,21 @@ public class ColumnSplitOperationTests extends RefineTest {",
                "     }",
                "+    ",
                "+    @Test",
                "+    public void serializeColumnSplitOperationByLengths() throws JSONException, Exception {",
                "+        String json = \"{\\n\" + ",
                "+                \"    \\\"op\\\": \\\"core/column-split\\\",\\n\" + ",
                "+                \"    \\\"description\\\": \\\"Split column ea by field lengths\\\",\\n\" + ",
                "+                \"    \\\"engineConfig\\\": {\\n\" + ",
                "+                \"      \\\"mode\\\": \\\"row-based\\\",\\n\" + ",
                "+                \"      \\\"facets\\\": []\\n\" + ",
                "+                \"    },\\n\" + ",
                "+                \"    \\\"columnName\\\": \\\"ea\\\",\\n\" + ",
                "+                \"    \\\"guessCellType\\\": true,\\n\" + ",
                "+                \"    \\\"removeOriginalColumn\\\": true,\\n\" + ",
                "+                \"    \\\"mode\\\": \\\"lengths\\\",\\n\" + ",
                "+                \"    \\\"fieldLengths\\\": [1,1]\\n\" + ",
                "+                \"  }\";",
                "+        Project project = mock(Project.class);",
                "+        TestUtils.isSerializedTo(ColumnSplitOperation.reconstruct(project, new JSONObject(json)), json);",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/column/AddColumnByFetchingURLsCommand.java",
                "main/src/com/google/refine/operations/OnError.java",
                "main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "main/src/com/google/refine/operations/column/ColumnMoveOperation.java",
                "main/src/com/google/refine/operations/column/ColumnRemovalOperation.java",
                "main/src/com/google/refine/operations/column/ColumnRenameOperation.java",
                "main/src/com/google/refine/operations/column/ColumnReorderOperation.java",
                "main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5f671e5e812ffe7e75aa1d527b855d015f718cec",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540203747,
            "hunks": 33,
            "message": "Jackson deserialization for sorting Criterion and subclasses",
            "diff": [
                "diff --git a/main/src/com/google/refine/sorting/Criterion.java b/main/src/com/google/refine/sorting/Criterion.java",
                "index 4cae65d14..a9d01ac26 100644",
                "--- a/main/src/com/google/refine/sorting/Criterion.java",
                "+++ b/main/src/com/google/refine/sorting/Criterion.java",
                "@@ -35,2 +35,4 @@ package com.google.refine.sorting;",
                "+import java.io.IOException;",
                "+",
                " import org.json.JSONException;",
                "@@ -38,3 +40,7 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo;",
                "+import com.fasterxml.jackson.annotation.JsonSubTypes;",
                "+import com.fasterxml.jackson.annotation.JsonSubTypes.Type;",
                "@@ -45,5 +51,17 @@ import com.google.refine.model.Record;",
                " import com.google.refine.model.Row;",
                "-",
                "+import com.google.refine.util.ParsingUtilities;",
                "+",
                "+@JsonTypeInfo(",
                "+        use=JsonTypeInfo.Id.NAME,",
                "+        include=JsonTypeInfo.As.PROPERTY,",
                "+        property=\"valueType\")",
                "+@JsonSubTypes({",
                "+    @Type(value = BooleanCriterion.class, name = \"boolean\"),",
                "+    @Type(value = DateCriterion.class, name = \"date\"),",
                "+    @Type(value = NumberCriterion.class, name = \"number\"),",
                "+    @Type(value = StringCriterion.class, name = \"string\") })",
                " abstract public class Criterion  {",
                "+    @JsonProperty(\"column\")",
                "     public String columnName;",
                "+    @JsonIgnore",
                "     protected int cellIndex = -2;",
                "@@ -53,46 +71,10 @@ abstract public class Criterion  {",
                "     // Blanks and errors are not affected by the reverse flag.",
                "+    @JsonProperty(\"blankPosition\")",
                "     public int blankPosition = 1;",
                "+    @JsonProperty(\"errorPosition\")",
                "     public int errorPosition = 2;",
                "-    public boolean reverse;",
                "-",
                "-    public void initializeFromJSON(JSONObject obj) ",
                "-            throws JSONException {",
                "-        if (obj.has(\"column\") && !obj.isNull(\"column\")) {",
                "-            columnName = obj.getString(\"column\");",
                "-        }",
                "-",
                "-        if (obj.has(\"blankPosition\") && !obj.isNull(\"blankPosition\")) {",
                "-            blankPosition = obj.getInt(\"blankPosition\");",
                "-        }",
                "-        if (obj.has(\"errorPosition\") && !obj.isNull(\"errorPosition\")) {",
                "-            errorPosition = obj.getInt(\"errorPosition\");",
                "-        }",
                "-",
                "-        if (obj.has(\"reverse\") && !obj.isNull(\"reverse\")) {",
                "-            reverse = obj.getBoolean(\"reverse\");",
                "-        }",
                "-    }",
                "-    ",
                "-    public static Criterion reconstruct(JSONObject obj) throws JSONException {",
                "-        String valueType = \"string\";",
                "-        if (obj.has(\"valueType\") && !obj.isNull(\"valueType\")) {",
                "-            valueType = obj.getString(\"valueType\");",
                "-        }",
                "-",
                "-        Criterion c = null;",
                "-        if (\"boolean\".equals(valueType)) {",
                "-            c = new BooleanCriterion();",
                "-        } else if (\"date\".equals(valueType)) {",
                "-            c = new DateCriterion();",
                "-        } else if (\"number\".equals(valueType)) {",
                "-            c = new NumberCriterion();",
                "-        } else {",
                "-            c = new StringCriterion(obj.getBoolean(\"caseSensitive\"));",
                "-        }",
                "+    @JsonProperty(\"reverse\")",
                "+    public boolean reverse = false;",
                "-        c.initializeFromJSON(obj);",
                "-        return c;",
                "-    }",
                "-    ",
                "     @JsonProperty(\"valueType\")",
                "@@ -100,22 +82,2 @@ abstract public class Criterion  {",
                "-    @JsonProperty(\"reverse\")",
                "-    public boolean getReverse() {",
                "-        return reverse;",
                "-    }",
                "-    ",
                "-    @JsonProperty(\"column\")",
                "-    public String getColumnName() {",
                "-        return columnName;",
                "-    }",
                "-    ",
                "-    @JsonProperty(\"blankPosition\")",
                "-    public int getBlankPosition() {",
                "-        return blankPosition;",
                "-    }",
                "-    ",
                "-    @JsonProperty(\"errorPosition\")",
                "-    public int getErrorPosition() {",
                "-        return errorPosition;",
                "-    }",
                "-",
                "     // Returns a cached cell index",
                "diff --git a/main/src/com/google/refine/sorting/SortingConfig.java b/main/src/com/google/refine/sorting/SortingConfig.java",
                "index a1c342d92..a8e2e172b 100644",
                "--- a/main/src/com/google/refine/sorting/SortingConfig.java",
                "+++ b/main/src/com/google/refine/sorting/SortingConfig.java",
                "@@ -2,3 +2,4 @@ package com.google.refine.sorting;",
                "-import org.json.JSONArray;",
                "+import java.io.IOException;",
                "+",
                " import org.json.JSONObject;",
                "@@ -8,2 +9,4 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.google.refine.util.ParsingUtilities;",
                "+",
                "@@ -30,19 +33,4 @@ public final class SortingConfig  {",
                "-    public static SortingConfig reconstruct(JSONObject obj) {",
                "-        Criterion[] criteria;",
                "-        if (obj != null && obj.has(\"criteria\") && !obj.isNull(\"criteria\")) {",
                "-            JSONArray a = obj.getJSONArray(\"criteria\");",
                "-            int count = a.length();",
                "-",
                "-            criteria = new Criterion[count];",
                "-",
                "-            for (int i = 0; i < count; i++) {",
                "-                JSONObject obj2 = a.getJSONObject(i);",
                "-",
                "-                criteria[i] = Criterion.reconstruct(obj2);",
                "-            }",
                "-        } else {",
                "-            criteria = new Criterion[0];",
                "-        }",
                "-        return new SortingConfig(criteria);",
                "+    public static SortingConfig reconstruct(JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), SortingConfig.class);",
                "     }",
                "diff --git a/main/src/com/google/refine/sorting/StringCriterion.java b/main/src/com/google/refine/sorting/StringCriterion.java",
                "index e3d937fc2..78234f767 100644",
                "--- a/main/src/com/google/refine/sorting/StringCriterion.java",
                "+++ b/main/src/com/google/refine/sorting/StringCriterion.java",
                "@@ -38,2 +38,3 @@ import java.text.Collator;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -43,3 +44,5 @@ import com.google.refine.expr.ExpressionUtils;",
                " public class StringCriterion extends Criterion {",
                "+    @JsonProperty(\"caseSensitive\")",
                "     public boolean caseSensitive;",
                "+    @JsonIgnore",
                "     Collator collator;",
                "@@ -49,3 +52,3 @@ public class StringCriterion extends Criterion {",
                "      */",
                "-    public StringCriterion(boolean caseSensitive) {",
                "+    public StringCriterion() {",
                "         super();",
                "@@ -54,10 +57,4 @@ public class StringCriterion extends Criterion {",
                "         collator.setStrength(Collator.SECONDARY);",
                "-        this.caseSensitive = caseSensitive;",
                "     }",
                "-    @JsonProperty(\"caseSensitive\")",
                "-    public boolean isCaseSensitive() {",
                "-        return caseSensitive;",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java b/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "index 3a16d0486..c009683da 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "@@ -2,3 +2,5 @@ package com.google.refine.tests.sorting;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+",
                "+import org.json.JSONException;",
                " import org.testng.annotations.Test;",
                "@@ -7,2 +9,3 @@ import com.google.refine.sorting.Criterion;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -10,3 +13,3 @@ public class BooleanCriterionTest {",
                "     @Test",
                "-    public void serializeBooleanCriterion() {",
                "+    public void serializeBooleanCriterion() throws JSONException, IOException {",
                "         String json = ",
                "@@ -19,3 +22,3 @@ public class BooleanCriterionTest {",
                "                 \"        }\\n\";",
                "-        TestUtils.isSerializedTo(Criterion.reconstruct(new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, Criterion.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/DateCriterionTest.java b/main/tests/server/src/com/google/refine/tests/sorting/DateCriterionTest.java",
                "index 349384d67..73b3347b0 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/sorting/DateCriterionTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/DateCriterionTest.java",
                "@@ -2,3 +2,4 @@ package com.google.refine.tests.sorting;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+",
                " import org.testng.annotations.Test;",
                "@@ -7,2 +8,3 @@ import com.google.refine.sorting.Criterion;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -10,3 +12,3 @@ public class DateCriterionTest {",
                "     @Test",
                "-    public void serializeDateCriterion() {",
                "+    public void serializeDateCriterion() throws IOException {",
                "         String json = ",
                "@@ -19,3 +21,3 @@ public class DateCriterionTest {",
                "                 \"        }\\n\";",
                "-        TestUtils.isSerializedTo(Criterion.reconstruct(new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, Criterion.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/NumberCriterionTest.java b/main/tests/server/src/com/google/refine/tests/sorting/NumberCriterionTest.java",
                "index 23aea5080..52962f205 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/sorting/NumberCriterionTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/NumberCriterionTest.java",
                "@@ -2,3 +2,4 @@ package com.google.refine.tests.sorting;",
                "-import org.json.JSONObject;",
                "+import java.io.IOException;",
                "+",
                " import org.testng.annotations.Test;",
                "@@ -7,2 +8,3 @@ import com.google.refine.sorting.Criterion;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -10,3 +12,3 @@ public class NumberCriterionTest {",
                "     @Test",
                "-    public void serializeNumberCriterion() {",
                "+    public void serializeNumberCriterion() throws IOException {",
                "         String json = ",
                "@@ -19,3 +21,3 @@ public class NumberCriterionTest {",
                "                 \"        }\\n\";",
                "-        TestUtils.isSerializedTo(Criterion.reconstruct(new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, Criterion.class), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java b/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java",
                "index a415eee99..75903a1e0 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java",
                "@@ -2,2 +2,5 @@ package com.google.refine.tests.sorting;",
                "+import java.io.IOException;",
                "+",
                "+import org.json.JSONException;",
                " import org.json.JSONObject;",
                "@@ -10,3 +13,3 @@ public class SortingConfigTests {",
                "     @Test",
                "-    public void serializeSortingConfig() {",
                "+    public void serializeSortingConfig() throws JSONException, IOException {",
                "         String json = \"{\\n\" + "
            ],
            "changed_files": [
                "main/src/com/google/refine/sorting/Criterion.java",
                "main/src/com/google/refine/sorting/SortingConfig.java",
                "main/src/com/google/refine/sorting/StringCriterion.java",
                "main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "main/tests/server/src/com/google/refine/tests/sorting/DateCriterionTest.java",
                "main/tests/server/src/com/google/refine/tests/sorting/NumberCriterionTest.java",
                "main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5cf58d874b7492cf3df0cb87ab1862c51cb577ed",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541171214,
            "hunks": 4,
            "message": "Fix deserialization of MassEditOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/cell/MassEditOperation.java b/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "index fdd99d376..593912b42 100644",
                "--- a/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "@@ -79,3 +79,3 @@ public class MassEditOperation extends EngineDependentMassCellOperation {",
                "             this.from = from;",
                "-            this.fromBlank = fromBlank;",
                "+            this.fromBlank = fromBlank || (from.size() == 1 && from.get(0).length() == 0);",
                "             this.fromError = fromError;",
                "@@ -105,3 +105,12 @@ public class MassEditOperation extends EngineDependentMassCellOperation {",
                "-    public MassEditOperation(EngineConfig engineConfig, String columnName, String expression, List<Edit> edits) {",
                "+    @JsonCreator",
                "+    public MassEditOperation(",
                "+    \t\t@JsonProperty(\"engineConfig\")",
                "+    \t\tEngineConfig engineConfig,",
                "+    \t\t@JsonProperty(\"columnName\")",
                "+    \t\tString columnName,",
                "+    \t\t@JsonProperty(\"expression\")",
                "+    \t\tString expression,",
                "+    \t\t@JsonProperty(\"edits\")",
                "+    \t\tList<Edit> edits) {",
                "         super(engineConfig, columnName, true);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "index 01497bd5d..d604fedc3 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "@@ -95,3 +95,3 @@ public class MassOperationTests extends RefineTest {",
                "-      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "+      editList = ParsingUtilities.mapper.readValue(editsString, new TypeReference<List<Edit>>() {});",
                "@@ -107,3 +107,3 @@ public class MassOperationTests extends RefineTest {",
                "-      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "+      editList = ParsingUtilities.mapper.readValue(editsString, new TypeReference<List<Edit>>() {});"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/cell/MassEditOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "55dc752144f2847c6dda7cab54c25be6197faaf7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542643019,
            "hunks": 2,
            "message": "Remove datapackage libs from Maven config",
            "diff": [
                "diff --git a/main/pom.xml b/main/pom.xml",
                "index 41aa9892b..7bfba4691 100644",
                "--- a/main/pom.xml",
                "+++ b/main/pom.xml",
                "@@ -138,34 +138,2 @@",
                "             </execution>",
                "-            <execution>",
                "-                <id>install-tableschema</id>",
                "-                <phase>process-resources</phase>",
                "-                <configuration>",
                "-                    <file>${basedir}/lib-local/tableschema-java-1.0-SNAPSHOT.jar</file>",
                "-                    <repositoryLayout>default</repositoryLayout>",
                "-                    <groupId>io.frictionlessdata</groupId>",
                "-                    <artifactId>tableschema-java</artifactId>",
                "-                    <version>1.0-SNAPSHOT</version>",
                "-                    <packaging>jar</packaging>",
                "-                    <generatePom>true</generatePom>",
                "-                </configuration>",
                "-                <goals>",
                "-                    <goal>install-file</goal>",
                "-                </goals>",
                "-            </execution>",
                "-            <execution>",
                "-                <id>install-datapackage</id>",
                "-                <phase>process-resources</phase>",
                "-                <configuration>",
                "-                    <file>${basedir}/lib-local/datapackage-java-1.0-SNAPSHOT.jar</file>",
                "-                    <repositoryLayout>default</repositoryLayout>",
                "-                    <groupId>io.frictionlessdata</groupId>",
                "-                    <artifactId>datapackage-java</artifactId>",
                "-                    <version>1.0-SNAPSHOT</version>",
                "-                    <packaging>jar</packaging>",
                "-                    <generatePom>true</generatePom>",
                "-                </configuration>",
                "-                <goals>",
                "-                    <goal>install-file</goal>",
                "-                </goals>",
                "-            </execution>",
                "             <execution>",
                "@@ -430,17 +398,2 @@",
                "     </dependency>",
                "-    <dependency>",
                "-      <groupId>org.everit.json</groupId>",
                "-      <artifactId>org.everit.json.schema</artifactId>",
                "-      <version>1.5.1</version>",
                "-    </dependency>",
                "-    <dependency>",
                "-      <groupId>io.frictionlessdata</groupId>",
                "-      <artifactId>datapackage-java</artifactId>",
                "-      <version>1.0-SNAPSHOT</version>",
                "-    </dependency>",
                "-    <dependency>",
                "-      <groupId>io.frictionlessdata</groupId>",
                "-      <artifactId>tableschema-java</artifactId>",
                "-      <version>1.0-SNAPSHOT</version>",
                "-    </dependency>",
                "     <dependency>"
            ],
            "changed_files": [
                "main/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f6fc47a8f9fbd773f7623c86c48ba1e5e035c71e",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538672062,
            "hunks": 3,
            "message": "Fix serialization of StandardReconConfig with no type",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index 068bd4b29..b6156d29a 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -55,2 +55,4 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -205,5 +207,8 @@ public class StandardReconConfig extends ReconConfig {",
                "     @JsonProperty(\"type\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "     public ReconType getReconType() {",
                "-        ReconType t = new ReconType(typeID, typeName);",
                "-        return t;",
                "+        if (typeID != null) {",
                "+            return new ReconType(typeID, typeName);",
                "+        }",
                "+        return null;",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/recon/StandardReconConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "62190d36c029a50a10d46f0a8186e547f9cf12fd",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542365406,
            "hunks": 25,
            "message": "Start to migrate ProjectMetadata to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/metadata/AbstractMetadata.java b/main/src/com/google/refine/model/metadata/AbstractMetadata.java",
                "index 5433cdbd0..aab2f94ec 100644",
                "--- a/main/src/com/google/refine/model/metadata/AbstractMetadata.java",
                "+++ b/main/src/com/google/refine/model/metadata/AbstractMetadata.java",
                "@@ -3,2 +3,3 @@ package com.google.refine.model.metadata;",
                " import java.io.File;",
                "+import java.io.IOException;",
                " import java.time.LocalDateTime;",
                "@@ -10,2 +11,3 @@ import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -28,5 +30,6 @@ public abstract class AbstractMetadata implements IMetadata {",
                "     }",
                "-",
                "-    @Override",
                "-    public abstract void loadFromJSON(JSONObject obj);",
                "+    ",
                "+    public void loadFromJSON(String obj) throws IOException {",
                "+    \tParsingUtilities.mapper.readerForUpdating(this).readValue(obj);",
                "+    }",
                "diff --git a/main/src/com/google/refine/model/metadata/IMetadata.java b/main/src/com/google/refine/model/metadata/IMetadata.java",
                "index 8f5f863fd..dc2e36006 100644",
                "--- a/main/src/com/google/refine/model/metadata/IMetadata.java",
                "+++ b/main/src/com/google/refine/model/metadata/IMetadata.java",
                "@@ -13,3 +13,2 @@ import org.json.JSONObject;",
                " public interface IMetadata  {",
                "-    public void loadFromJSON(JSONObject obj);",
                "diff --git a/main/src/com/google/refine/model/metadata/ProjectMetadata.java b/main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "index 23dc2f253..21770e1af 100644",
                "--- a/main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "+++ b/main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "@@ -50,2 +50,3 @@ import org.apache.commons.beanutils.BeanUtils;",
                " import org.apache.commons.io.FileUtils;",
                "+import org.apache.commons.io.IOUtils;",
                " import org.apache.commons.lang3.ArrayUtils;",
                "@@ -59,2 +60,3 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                "@@ -65,2 +67,4 @@ import com.fasterxml.jackson.annotation.JsonUnwrapped;",
                " import com.fasterxml.jackson.annotation.JsonView;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.fasterxml.jackson.databind.node.ObjectNode;",
                "@@ -79,3 +83,3 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "     @JsonProperty(\"created\")",
                "-    private final LocalDateTime     _created;",
                "+    private LocalDateTime     _created;",
                "     @JsonProperty(\"name\")",
                "@@ -95,3 +99,4 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "     // user metadata",
                "-    private JSONArray _userMetadata = new JSONArray();",
                "+    @JsonIgnore",
                "+    private ArrayNode _userMetadata = ParsingUtilities.mapper.createArrayNode();",
                "@@ -110,5 +115,6 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "     // import options is an array for 1-n data sources",
                "-    private JSONArray _importOptionMetadata = new JSONArray();",
                "+    @JsonIgnore",
                "+    private ArrayNode _importOptionMetadata = ParsingUtilities.mapper.createArrayNode();",
                "-    @JsonUnwrapped",
                "+    @JsonProperty(\"customMetadata\")",
                "     private Map<String, Serializable>   _customMetadata = new HashMap<String, Serializable>();",
                "@@ -130,8 +136,7 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "-    @JsonProperty(\"userMetadata\")",
                "-    @JsonRawValue",
                "+    @JsonProperty(PreferenceStore.USER_METADATA_KEY)",
                "     @JsonInclude(Include.NON_NULL)",
                "-    public String getJsonUserMetadata() {",
                "-        if (_userMetadata.length() > 0) {",
                "-            return _userMetadata.toString();",
                "+    public ArrayNode getJsonUserMetadata() {",
                "+        if (_userMetadata.size() > 0) {",
                "+            return _userMetadata;",
                "         }",
                "@@ -140,8 +145,12 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "+    @JsonProperty(PreferenceStore.USER_METADATA_KEY)",
                "+    protected void setUserMetadataJson(ArrayNode json) {",
                "+    \t_userMetadata = json;",
                "+    }",
                "+    ",
                "     @JsonProperty(\"importOptionMetadata\")",
                "-    @JsonRawValue",
                "     @JsonInclude(Include.NON_NULL)",
                "-    public String getJsonImportOptionMetadata() {",
                "-        if (_importOptionMetadata.length() > 0) {",
                "-            return _importOptionMetadata.toString();",
                "+    public ArrayNode getJsonImportOptionMetadata() {",
                "+        if (_importOptionMetadata.size() > 0) {",
                "+            return _importOptionMetadata;",
                "         }",
                "@@ -149,2 +158,15 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"importOptionMetadata\")",
                "+    public void setImportOptionMetadataJson(ArrayNode options) {",
                "+    \t_importOptionMetadata = options;",
                "+    \t// this field should always be present so we can update the last updated time here",
                "+    \tthis.written = LocalDateTime.now();",
                "+    }",
                "+    ",
                "+    // backwards compatibility",
                "+    @JsonProperty(\"expressions\")",
                "+    protected void setExpressions(TopList expressions) {",
                "+    \tthis._preferenceStore.put(\"scripting.expressions\", expressions);",
                "+    }",
                "@@ -182,87 +204,2 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "-     public void loadFromJSON(JSONObject obj) {",
                "-        extractModifiedLocalTime(obj);",
                "-",
                "-        this._name = JSONUtilities.getString(obj, \"name\", \"<Error recovering project name>\");",
                "-        this._password = JSONUtilities.getString(obj, \"password\", \"\");",
                "-",
                "-        this._encoding = JSONUtilities.getString(obj, \"encoding\", \"\");",
                "-        this._encodingConfidence = JSONUtilities.getInt(obj, \"encodingConfidence\", 0);",
                "-",
                "-        this._creator = JSONUtilities.getString(obj, \"creator\", \"\");",
                "-        this._contributors = JSONUtilities.getString(obj, \"contributors\", \"\");",
                "-        this._subject = JSONUtilities.getString(obj, \"subject\", \"\");",
                "-        this._description = JSONUtilities.getString(obj, \"description\", \"\");",
                "-        this._rowCount = JSONUtilities.getInt(obj, \"rowCount\", 0);",
                "-        ",
                "-        this.title = JSONUtilities.getString(obj, \"title\", \"\");",
                "-        this.homepage = JSONUtilities.getString(obj, \"homepage\", \"\");",
                "-        this.image = JSONUtilities.getString(obj, \"image\", \"\");",
                "-        this.license = JSONUtilities.getString(obj, \"license\", \"\");",
                "-        this.version = JSONUtilities.getString(obj, \"version\", \"\");",
                "-",
                "-        this._tags = JSONUtilities.getStringArray(obj, \"tags\");",
                "-",
                "-        if (obj.has(\"preferences\") && !obj.isNull(\"preferences\")) {",
                "-            try {",
                "-                this._preferenceStore = ParsingUtilities.mapper.readValue(obj.getJSONObject(\"preferences\").toString(), PreferenceStore.class);",
                "-            } catch (IOException e) {",
                "-                logger.error(ExceptionUtils.getStackTrace(e));",
                "-            }",
                "-        }",
                "-",
                "-        if (obj.has(\"expressions\") && !obj.isNull(\"expressions\")) { // backward compatibility",
                "-            try {",
                "-            \tTopList newExpressions = ParsingUtilities.mapper.readValue(obj.getJSONArray(\"expressions\").toString(), TopList.class);",
                "-                this._preferenceStore.put(\"scripting.expressions\", newExpressions);",
                "-            } catch (IOException e) {",
                "-                logger.error(ExceptionUtils.getStackTrace(e));",
                "-            }",
                "-        }",
                "-",
                "-        if (obj.has(\"customMetadata\") && !obj.isNull(\"customMetadata\")) {",
                "-            try {",
                "-                JSONObject obj2 = obj.getJSONObject(\"customMetadata\");",
                "-",
                "-                Iterator<String> keys = obj2.keys();",
                "-                while (keys.hasNext()) {",
                "-                    String key = keys.next();",
                "-                    Object value = obj2.get(key);",
                "-                    if (value != null && value instanceof Serializable) {",
                "-                        this._customMetadata.put(key, (Serializable) value);",
                "-                    }",
                "-                }",
                "-            } catch (JSONException e) {",
                "-                logger.error(ExceptionUtils.getStackTrace(e));",
                "-            }",
                "-        }",
                "-",
                "-        if (obj.has(\"importOptionMetadata\") && !obj.isNull(\"importOptionMetadata\")) {",
                "-            try {",
                "-                JSONArray jsonArray = obj.getJSONArray(\"importOptionMetadata\");",
                "-                this._importOptionMetadata = jsonArray;",
                "-            } catch (JSONException e) {",
                "-                logger.error(ExceptionUtils.getStackTrace(e));",
                "-            }",
                "-        }",
                "-",
                "-        if (obj.has(PreferenceStore.USER_METADATA_KEY) && !obj.isNull(PreferenceStore.USER_METADATA_KEY)) {",
                "-            try {",
                "-                JSONArray jsonArray = obj.getJSONArray(PreferenceStore.USER_METADATA_KEY);",
                "-                this._userMetadata = jsonArray;",
                "-            } catch (JSONException e) {",
                "-                logger.error(ExceptionUtils.getStackTrace(e));",
                "-            }",
                "-        } ",
                "-        ",
                "-        this.written = LocalDateTime.now(); // Mark it as not needing writing until modified",
                "-        ",
                "-    }",
                "-",
                "-    private void extractModifiedLocalTime(JSONObject obj) {",
                "-        String modified = JSONUtilities.getString(obj, \"modified\", LocalDateTime.now().toString());",
                "-        ",
                "-        this._modified = ParsingUtilities.stringToLocalDate(modified);",
                "-    }",
                "-",
                "     static protected void preparePreferenceStore(PreferenceStore ps) {",
                "@@ -355,3 +292,4 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "-    public JSONArray getImportOptionMetadata() {",
                "+    @JsonIgnore",
                "+    public ArrayNode getImportOptionMetadata() {",
                "         return _importOptionMetadata;",
                "@@ -359,3 +297,4 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "-    public void setImportOptionMetadata(JSONArray jsonArray) {",
                "+    @JsonIgnore",
                "+    public void setImportOptionMetadata(ArrayNode jsonArray) {",
                "         _importOptionMetadata = jsonArray;",
                "@@ -365,3 +304,3 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "     public void appendImportOptionMetadata(ObjectNode options) {",
                "-        _importOptionMetadata.put(options);",
                "+        _importOptionMetadata.add(options);",
                "         updateModified();",
                "@@ -479,3 +418,3 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "-    public JSONArray getUserMetadata() {",
                "+    public ArrayNode getUserMetadata() {",
                "         return _userMetadata;",
                "@@ -483,3 +422,3 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "-    public void setUserMetadata(JSONArray userMetadata) {",
                "+    public void setUserMetadata(ArrayNode userMetadata) {",
                "         this._userMetadata = userMetadata;",
                "@@ -488,7 +427,7 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "     private void updateUserMetadata(String metaName, String valueString)  {",
                "-        for (int i = 0; i < _userMetadata.length(); i++) {",
                "+        for (int i = 0; i < _userMetadata.size(); i++) {",
                "             try {",
                "-                JSONObject obj = _userMetadata.getJSONObject(i);",
                "-                if (obj.getString(\"name\").equals(metaName)) {",
                "-                    obj.put(\"value\", valueString);",
                "+                JsonNode obj = _userMetadata.get(i);",
                "+                if (obj.get(\"name\").asText(\"\").equals(metaName)) {",
                "+                    ((ObjectNode) obj).put(\"value\", valueString);",
                "                 }",
                "@@ -532,3 +471,3 @@ public class ProjectMetadata  extends AbstractMetadata {",
                "-            this.loadFromJSON(obj);",
                "+            this.loadFromJSON(IOUtils.toString(inputStream));",
                "         } catch (IOException e) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/metadata/AbstractMetadata.java",
                "main/src/com/google/refine/model/metadata/IMetadata.java",
                "main/src/com/google/refine/model/metadata/ProjectMetadata.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "22cf0517b9165aac34e5cbd0e675dfc528ce8e2c",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544530618,
            "hunks": 4,
            "message": "Better fallback for non-localized keyers and distances",
            "diff": [
                "diff --git a/main/webapp/modules/core/scripts/dialogs/clustering-dialog.js b/main/webapp/modules/core/scripts/dialogs/clustering-dialog.js",
                "index 09d799647..c399dbddc 100644",
                "--- a/main/webapp/modules/core/scripts/dialogs/clustering-dialog.js",
                "+++ b/main/webapp/modules/core/scripts/dialogs/clustering-dialog.js",
                "@@ -129,5 +129,9 @@ ClusteringDialog.prototype._createDialog = function() {",
                "        for(; i < keyers.length; i++) {",
                "+          var label = $.i18n('clustering-keyers/'+keyers[i]);",
                "+          if (label.startsWith('clustering-keyers')) {",
                "+              label = keyers[i];",
                "+          }",
                "           var option = $('<option></option>')",
                "              .attr('value', keyers[i])",
                "-             .text($.i18n('clustering-keyers/'+keyers[i]))",
                "+             .text(label)",
                "              .appendTo(self._elmts.keyingFunctionSelector);",
                "@@ -138,5 +142,9 @@ ClusteringDialog.prototype._createDialog = function() {",
                "        for(i = 0; i < distances.length; i++) {",
                "+          var label = $.i18n('clustering-distances/'+distances[i]);",
                "+          if (label.startsWith('clustering-distances')) {",
                "+              label = distances[i];",
                "+          }",
                "           var option = $('<option></option>')",
                "              .attr('value', distances[i])",
                "-             .text($.i18n('clustering-distances/'+distances[i]))",
                "+             .text(label)",
                "              .appendTo(self._elmts.distanceFunctionSelector);"
            ],
            "changed_files": [
                "main/webapp/modules/core/scripts/dialogs/clustering-dialog.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a4117b470cfae64947e7c722ba9d2b6149259e22",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542914169,
            "hunks": 3,
            "message": "Remove leftover merge conflicts",
            "diff": [
                "diff --git a/main/tests/server/src/com/google/refine/tests/exporters/CsvExporterTests.java b/main/tests/server/src/com/google/refine/tests/exporters/CsvExporterTests.java",
                "index 88b37809c..2319e1668 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/exporters/CsvExporterTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/exporters/CsvExporterTests.java",
                "@@ -232,9 +232,4 @@ public class CsvExporterTests extends RefineTest {",
                "-<<<<<<< HEAD",
                "         String expectedOutput = ParsingUtilities.instantToLocalDateTimeString(calendar.toInstant()) + \",\" +",
                "             ParsingUtilities.instantToLocalDateTimeString(date.toInstant()) + \"\\n\";",
                "-=======",
                "-        String expectedOutput = ParsingUtilities.localDateToString(localDate) + \",\" +",
                "-            ParsingUtilities.dateToString(date) + \"\\n\";",
                "->>>>>>> parent of c4b0ff6be... data package metadata  (#1398)",
                "diff --git a/main/webapp/modules/core/scripts/index/open-project-ui.js b/main/webapp/modules/core/scripts/index/open-project-ui.js",
                "index e4083a95e..c3340f950 100644",
                "--- a/main/webapp/modules/core/scripts/index/open-project-ui.js",
                "+++ b/main/webapp/modules/core/scripts/index/open-project-ui.js",
                "@@ -263,3 +263,2 @@ Refine.OpenProjectUI.prototype._renderProjects = function(data) {",
                "-    ",
                "     var tagsCell = $(tr.insertCell(tr.cells.length));"
            ],
            "changed_files": [
                "main/tests/server/src/com/google/refine/tests/exporters/CsvExporterTests.java",
                "main/webapp/modules/core/scripts/index/open-project-ui.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cf45f23e1d77a6b5bab38bfb503d85e2c317b132",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538122732,
            "hunks": 73,
            "message": "Jackson serialization for reconciliation operations",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/recon/ExtendDataCommand.java b/main/src/com/google/refine/commands/recon/ExtendDataCommand.java",
                "index 292ae79f2..30adcb526 100644",
                "--- a/main/src/com/google/refine/commands/recon/ExtendDataCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/ExtendDataCommand.java",
                "@@ -37,9 +37,8 @@ import javax.servlet.http.HttpServletRequest;",
                "-import org.json.JSONObject;",
                "-",
                " import com.google.refine.browsing.EngineConfig;",
                " import com.google.refine.commands.EngineDependentCommand;",
                "-import com.google.refine.operations.recon.ExtendDataOperation;",
                " import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtensionConfig;",
                "+import com.google.refine.operations.recon.ExtendDataOperation;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -58,3 +57,3 @@ public class ExtendDataCommand extends EngineDependentCommand {",
                "         String jsonString = request.getParameter(\"extension\");",
                "-        JSONObject extension = ParsingUtilities.evaluateJsonStringToObject(jsonString);",
                "+        DataExtensionConfig extension = DataExtensionConfig.reconstruct(ParsingUtilities.evaluateJsonStringToObject(jsonString));",
                "diff --git a/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java b/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "index 037b1e87d..f0c6906a7 100644",
                "--- a/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "@@ -48,3 +48,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.json.JSONArray;",
                "-import org.json.JSONObject;",
                " import org.json.JSONWriter;",
                "@@ -52,6 +51,4 @@ import org.json.JSONWriter;",
                " import com.google.refine.commands.Command;",
                "-import com.google.refine.model.recon.ReconciledDataExtensionJob;",
                "-import com.google.refine.model.recon.ReconciledDataExtensionJob.ColumnInfo;",
                "-import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtension;",
                " import com.google.refine.model.Cell;",
                "+import com.google.refine.model.Column;",
                " import com.google.refine.model.Project;",
                "@@ -59,4 +56,7 @@ import com.google.refine.model.ReconCandidate;",
                " import com.google.refine.model.Row;",
                "-import com.google.refine.model.Column;",
                " import com.google.refine.model.recon.ReconConfig;",
                "+import com.google.refine.model.recon.ReconciledDataExtensionJob;",
                "+import com.google.refine.model.recon.ReconciledDataExtensionJob.ColumnInfo;",
                "+import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtension;",
                "+import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtensionConfig;",
                " import com.google.refine.model.recon.StandardReconConfig;",
                "@@ -81,3 +81,3 @@ public class PreviewExtendDataCommand extends Command {",
                "             String jsonString = request.getParameter(\"extension\");",
                "-            JSONObject json = ParsingUtilities.evaluateJsonStringToObject(jsonString);",
                "+            DataExtensionConfig config = DataExtensionConfig.reconstruct(ParsingUtilities.evaluateJsonStringToObject(jsonString));",
                "@@ -122,3 +122,3 @@ public class PreviewExtendDataCommand extends Command {",
                "             Map<String, ReconCandidate> reconCandidateMap = new HashMap<String, ReconCandidate>();",
                "-            ReconciledDataExtensionJob job = new ReconciledDataExtensionJob(json, endpoint);",
                "+            ReconciledDataExtensionJob job = new ReconciledDataExtensionJob(config, endpoint);",
                "             Map<String, DataExtension> map = job.extend(ids, reconCandidateMap);",
                "diff --git a/main/src/com/google/refine/commands/recon/ReconMatchSpecificTopicCommand.java b/main/src/com/google/refine/commands/recon/ReconMatchSpecificTopicCommand.java",
                "index 18ca0b9f5..0951f1c27 100644",
                "--- a/main/src/com/google/refine/commands/recon/ReconMatchSpecificTopicCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/ReconMatchSpecificTopicCommand.java",
                "@@ -41,3 +41,2 @@ import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "-import com.google.refine.model.ReconCandidate;",
                " import com.google.refine.operations.recon.ReconMatchSpecificTopicOperation;",
                "@@ -51,7 +50,6 @@ public class ReconMatchSpecificTopicCommand extends EngineDependentCommand {",
                "         String columnName = request.getParameter(\"columnName\");",
                "-        ReconCandidate match = new ReconCandidate(",
                "+        ReconMatchSpecificTopicOperation.ReconItem match = new ReconMatchSpecificTopicOperation.ReconItem(",
                "             request.getParameter(\"topicID\"),",
                "             request.getParameter(\"topicName\"),",
                "-            request.getParameter(\"types\").split(\",\"),",
                "-            100",
                "+            request.getParameter(\"types\").split(\",\")",
                "         );",
                "diff --git a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "index 07f994842..2d971a06d 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "@@ -41,3 +41,2 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "-import java.io.Serializable;",
                " import java.io.StringWriter;",
                "@@ -50,3 +49,5 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Properties;",
                " import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "@@ -57,10 +58,142 @@ import org.json.JSONWriter;",
                "-import com.google.refine.model.ReconType;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+",
                "+import com.google.refine.Jsonizable;",
                "+import com.google.refine.expr.functions.ToDate;",
                " import com.google.refine.model.ReconCandidate;",
                "-import com.google.refine.model.recon.StandardReconConfig;",
                "+import com.google.refine.model.ReconType;",
                " import com.google.refine.util.JSONUtilities;",
                " import com.google.refine.util.ParsingUtilities;",
                "-import com.google.refine.expr.functions.ToDate;",
                " public class ReconciledDataExtensionJob {",
                "+",
                "+    ",
                "+    static public class DataExtensionProperty implements Jsonizable {",
                "+        @JsonProperty(\"id\")",
                "+        public final String id;",
                "+        @JsonProperty(\"name\")",
                "+        public final String name;",
                "+        @JsonProperty(\"settings\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        public final Map<String, Object> settings;",
                "+        ",
                "+        @JsonCreator",
                "+        public DataExtensionProperty(",
                "+                @JsonProperty(\"id\")",
                "+                String id,",
                "+                @JsonProperty(\"name\")",
                "+                String name,",
                "+                @JsonProperty(\"settings\")",
                "+                Map<String, Object> settings) {",
                "+            this.id = id;",
                "+            this.name = name;",
                "+            this.settings = settings;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"id\"); writer.value(id);",
                "+            if(!\"query\".equals(options.getProperty(\"mode\"))) {",
                "+                writer.key(\"name\"); writer.value(name);",
                "+            }",
                "+            if (settings != null) {",
                "+                writer.key(\"settings\");",
                "+                writer.object();",
                "+                for(Map.Entry<String, Object> entry : settings.entrySet()) {",
                "+                    writer.key(entry.getKey());",
                "+                    writer.value(entry.getValue());",
                "+                }",
                "+                writer.endObject();",
                "+            }",
                "+            writer.endObject();",
                "+        }",
                "+        ",
                "+    }",
                "+    ",
                "+    static public class DataExtensionConfig implements Jsonizable {",
                "+        ",
                "+        @JsonProperty(\"properties\")",
                "+        public final List<DataExtensionProperty> properties;",
                "+        ",
                "+        @JsonCreator",
                "+        public DataExtensionConfig(",
                "+                @JsonProperty(\"properties\")",
                "+                List<DataExtensionProperty> properties) {",
                "+            this.properties = properties;",
                "+        }",
                "+        ",
                "+        public static DataExtensionConfig reconstruct(JSONObject obj) throws JSONException {",
                "+            ObjectMapper mapper = new ObjectMapper();",
                "+            try {",
                "+                return mapper.readValue(obj.toString(), DataExtensionConfig.class);",
                "+            } catch(IOException e) {",
                "+                throw new JSONException(e.toString());",
                "+            }",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter jsonWriter, Properties options)",
                "+                throws JSONException {",
                "+            jsonWriter.object();",
                "+            jsonWriter.key(\"properties\");",
                "+            jsonWriter.array();",
                "+        ",
                "+            for (DataExtensionProperty property : properties) {",
                "+                property.write(jsonWriter, options);",
                "+            }",
                "+            jsonWriter.endArray();",
                "+            jsonWriter.endObject();",
                "+        }",
                "+        ",
                "+    }",
                "+    ",
                "+    static public class DataExtensionQuery extends DataExtensionConfig {",
                "+        ",
                "+        @JsonProperty(\"ids\")",
                "+        public final List<String> ids;",
                "+",
                "+        @JsonCreator",
                "+        public DataExtensionQuery(",
                "+                @JsonProperty(\"ids\")",
                "+                List<String> ids,",
                "+                @JsonProperty(\"properties\")",
                "+                List<DataExtensionProperty> properties) {",
                "+            super(properties);",
                "+            this.ids = ids;",
                "+        }",
                "+        ",
                "+        @Override",
                "+        public void write(JSONWriter jsonWriter, Properties options)",
                "+                throws JSONException {",
                "+            jsonWriter.object();",
                "+            ",
                "+            if(ids != null) {",
                "+                jsonWriter.key(\"ids\");",
                "+                    jsonWriter.array();",
                "+                    for (String id : ids) {",
                "+                        if (id != null) {",
                "+                            jsonWriter.value(id);",
                "+                        }",
                "+                    }",
                "+                    jsonWriter.endArray();",
                "+            }",
                "+            ",
                "+            jsonWriter.key(\"properties\");",
                "+                jsonWriter.array();",
                "+            ",
                "+                for (DataExtensionProperty property : properties) {",
                "+                    property.write(jsonWriter, options);",
                "+                }",
                "+                jsonWriter.endArray();",
                "+            jsonWriter.endObject();",
                "+        }",
                "+        ",
                "+    }",
                "+    ",
                "     static public class DataExtension {",
                "@@ -85,7 +218,7 @@ public class ReconciledDataExtensionJob {",
                "-    final public JSONObject         extension;",
                "-    final public String             endpoint;",
                "-    final public List<ColumnInfo>   columns = new ArrayList<ColumnInfo>();",
                "+    final public DataExtensionConfig extension;",
                "+    final public String              endpoint;",
                "+    final public List<ColumnInfo>    columns = new ArrayList<ColumnInfo>();",
                "-    public ReconciledDataExtensionJob(JSONObject obj, String endpoint) throws JSONException {",
                "+    public ReconciledDataExtensionJob(DataExtensionConfig obj, String endpoint) throws JSONException {",
                "         this.extension = obj;",
                "@@ -251,35 +384,8 @@ public class ReconciledDataExtensionJob {",
                "-    static protected void formulateQuery(Set<String> ids, JSONObject node, Writer writer) throws JSONException {",
                "+    static protected void formulateQuery(Set<String> ids, DataExtensionConfig node, Writer writer) throws JSONException {",
                "         JSONWriter jsonWriter = new JSONWriter(writer);",
                "-        ",
                "-        jsonWriter.object();",
                "-",
                "-        jsonWriter.key(\"ids\");",
                "-            jsonWriter.array();",
                "-            for (String id : ids) {",
                "-                if (id != null) {",
                "-                    jsonWriter.value(id);",
                "-                }",
                "-            }",
                "-            jsonWriter.endArray();",
                "-",
                "-        jsonWriter.key(\"properties\");",
                "-            jsonWriter.array();",
                "-            JSONArray properties = node.getJSONArray(\"properties\");",
                "-            int l = properties.length();",
                "-        ",
                "-            for (int i = 0; i < l; i++) {",
                "-                JSONObject property = properties.getJSONObject(i);",
                "-                jsonWriter.object();",
                "-                jsonWriter.key(\"id\");",
                "-                jsonWriter.value(property.getString(\"id\"));",
                "-                if (property.has(\"settings\")) {",
                "-                    JSONObject settings = property.getJSONObject(\"settings\");",
                "-                    jsonWriter.key(\"settings\");",
                "-                    jsonWriter.value(settings);",
                "-                }",
                "-                jsonWriter.endObject();",
                "-            }",
                "-            jsonWriter.endArray();",
                "-        jsonWriter.endObject();",
                "+        Properties options = new Properties();",
                "+        DataExtensionQuery query = new DataExtensionQuery(ids.stream().collect(Collectors.toList()), node.properties);",
                "+        options.setProperty(\"mode\", \"query\");",
                "+        query.write(jsonWriter, options);",
                "     }",
                "diff --git a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "index ae00cb5fd..4905bc682 100644",
                "--- a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "@@ -47,2 +47,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -64,2 +66,3 @@ import com.google.refine.model.recon.ReconciledDataExtensionJob.ColumnInfo;",
                " import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtension;",
                "+import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtensionConfig;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "@@ -70,8 +73,15 @@ import com.google.refine.process.Process;",
                " public class ExtendDataOperation extends EngineDependentOperation {",
                "-    final protected String     _baseColumnName;",
                "-    final protected String     _endpoint;",
                "-    final protected String     _identifierSpace;",
                "-    final protected String     _schemaSpace;",
                "-    final protected JSONObject _extension;",
                "-    final protected int        _columnInsertIndex;",
                "+    @JsonProperty(\"baseColumnName\")",
                "+    final protected String              _baseColumnName;",
                "+    @JsonProperty(\"endpoint\")",
                "+    final protected String              _endpoint;",
                "+    @JsonProperty(\"identifierSpace\")",
                "+    final protected String              _identifierSpace;",
                "+    @JsonProperty(\"schemaSpace\")",
                "+    final protected String              _schemaSpace;",
                "+    @JsonProperty(\"extension\")",
                "+    final protected DataExtensionConfig _extension;",
                "+    @JsonProperty(\"columnInsertIndex\")",
                "+    final protected int                 _columnInsertIndex;",
                "+",
                "@@ -80,2 +90,4 @@ public class ExtendDataOperation extends EngineDependentOperation {",
                "+        DataExtensionConfig dataExtensionConfig = DataExtensionConfig.reconstruct(obj.getJSONObject(\"extension\"));",
                "+        ",
                "         return new ExtendDataOperation(",
                "@@ -86,3 +98,3 @@ public class ExtendDataOperation extends EngineDependentOperation {",
                "             obj.getString(\"schemaSpace\"),",
                "-            obj.getJSONObject(\"extension\"),",
                "+            dataExtensionConfig,",
                "             obj.getInt(\"columnInsertIndex\")",
                "@@ -92,9 +104,9 @@ public class ExtendDataOperation extends EngineDependentOperation {",
                "     public ExtendDataOperation(",
                "-        EngineConfig   engineConfig,",
                "-        String         baseColumnName,",
                "-        String         endpoint,",
                "-        String         identifierSpace,",
                "-        String         schemaSpace,",
                "-        JSONObject     extension,",
                "-        int            columnInsertIndex ",
                "+        EngineConfig        engineConfig,",
                "+        String              baseColumnName,",
                "+        String              endpoint,",
                "+        String              identifierSpace,",
                "+        String              schemaSpace,",
                "+        DataExtensionConfig extension,",
                "+        int                 columnInsertIndex ",
                "     ) {",
                "@@ -123,3 +135,3 @@ public class ExtendDataOperation extends EngineDependentOperation {",
                "         writer.key(\"schemaSpace\"); writer.value(_schemaSpace);",
                "-        writer.key(\"extension\"); writer.value(_extension);",
                "+        writer.key(\"extension\"); _extension.write(writer, options);",
                "         writer.endObject();",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java b/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "index bebb80494..2b30ce3aa 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "@@ -42,2 +42,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -90,2 +92,12 @@ public class ReconClearSimilarCellsOperation extends EngineDependentMassCellOper",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"similarValue\")",
                "+    public String getSimilarValue() {",
                "+        return _similarValue;",
                "+    }",
                "+    ",
                "     @Override",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java b/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "index 6141fa136..5d8c5c237 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "@@ -48,2 +48,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -120,2 +122,22 @@ public class ReconCopyAcrossColumnsOperation extends EngineDependentOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"fromColumnName\")",
                "+    public String getFromColumnName() {",
                "+        return _fromColumnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"toColumnNames\")",
                "+    public String[] getToColumnNames() {",
                "+        return _toColumnNames;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"judgments\")",
                "+    public String[] getJudgments() {",
                "+        return _judgments;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"applyToJudgedCells\")",
                "+    public boolean getApplyToJudgedCells() {",
                "+        return _applyToJudgedCells;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java b/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "index 1873962a9..c95524805 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "@@ -44,2 +44,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -88,2 +90,12 @@ public class ReconDiscardJudgmentsOperation extends EngineDependentMassCellOpera",
                "     }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"clearData\")",
                "+    public boolean getClearData() {",
                "+        return _clearData;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java b/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "index a3fc92e32..5afc6ce98 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "@@ -45,2 +45,6 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -69,3 +73,3 @@ public class ReconJudgeSimilarCellsOperation extends EngineDependentMassCellOper",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "+    static public AbstractOperation reconstruct(JSONObject obj) throws JSONException {",
                "         JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "@@ -139,2 +143,28 @@ public class ReconJudgeSimilarCellsOperation extends EngineDependentMassCellOper",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"similarValue\")",
                "+    public String getSimilarValue() {",
                "+        return _similarValue;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"judgment\")",
                "+    public Judgment getJudgment() {",
                "+        return _judgment;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"match\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public ReconCandidate getMatch() {",
                "+        return _match;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"shareNewTopics\")",
                "+    public boolean getShareNewTopics() {",
                "+        return _shareNewTopics;",
                "+    }",
                "+    ",
                "     @Override",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java b/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "index cecba3833..363b52564 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "@@ -44,2 +44,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -91,2 +93,12 @@ public class ReconMarkNewTopicsOperation extends EngineDependentMassCellOperatio",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"shareNewTopics\")",
                "+    public boolean getShareNewTopics() {",
                "+        return _shareNewTopics;",
                "+    }",
                "+    ",
                "     @Override",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java b/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "index 050eca7b3..c17bf4346 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "@@ -44,2 +44,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -86,2 +88,7 @@ public class ReconMatchBestCandidatesOperation extends EngineDependentMassCellOp",
                "     }",
                "+    ",
                "+    @JsonProperty",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java b/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "index 1bf466eb7..1dce15216 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "@@ -45,2 +45,6 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -62,4 +66,31 @@ import com.google.refine.operations.OperationRegistry;",
                " public class ReconMatchSpecificTopicOperation extends EngineDependentMassCellOperation {",
                "-    final protected ReconCandidate match;",
                "+    ",
                "+    public static class ReconItem {",
                "+        @JsonProperty(\"id\")",
                "+        public final String id; ",
                "+        @JsonProperty(\"name\")",
                "+        public final String name;",
                "+        @JsonProperty(\"types\")",
                "+        public final String[] types;",
                "+        @JsonCreator",
                "+        public ReconItem(",
                "+                @JsonProperty(\"id\") String id,",
                "+                @JsonProperty(\"name\") String name,",
                "+                @JsonProperty(\"types\") String[] types) {",
                "+            this.id = id;",
                "+            this.name = name;",
                "+            this.types = types;",
                "+        }",
                "+        ",
                "+        @JsonIgnore",
                "+        public ReconCandidate getCandidate() {",
                "+            return new ReconCandidate(id, name, types, 100);",
                "+        }",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"match\")",
                "+    final protected ReconItem match;",
                "+    @JsonProperty(\"identifierSpace\")",
                "     final protected String identifierSpace;",
                "+    @JsonProperty(\"schemaSpace\")",
                "     final protected String schemaSpace;",
                "@@ -80,7 +111,6 @@ public class ReconMatchSpecificTopicOperation extends EngineDependentMassCellOpe",
                "             obj.getString(\"columnName\"),",
                "-            new ReconCandidate(",
                "+            new ReconItem(",
                "                 match.getString(\"id\"),",
                "                 match.getString(\"name\"),",
                "-                typeIDs,",
                "-                100",
                "+                typeIDs",
                "             ),",
                "@@ -94,3 +124,3 @@ public class ReconMatchSpecificTopicOperation extends EngineDependentMassCellOpe",
                "         String columnName, ",
                "-        ReconCandidate match,",
                "+        ReconItem match,",
                "         String identifierSpace,",
                "@@ -148,2 +178,3 @@ public class ReconMatchSpecificTopicOperation extends EngineDependentMassCellOpe",
                "         Column column = project.columnModel.getColumnByName(_columnName);",
                "+        ReconCandidate candidate = match.getCandidate();",
                "@@ -190,3 +221,3 @@ public class ReconMatchSpecificTopicOperation extends EngineDependentMassCellOpe",
                "-                        newRecon.match = match;",
                "+                        newRecon.match = candidate;",
                "                         newRecon.matchRank = -1;",
                "diff --git a/main/src/com/google/refine/operations/recon/ReconOperation.java b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "index 87e9c4972..567fb6cef 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "@@ -47,2 +47,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -122,2 +124,12 @@ public class ReconOperation extends EngineDependentOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"config\")",
                "+    public ReconConfig getReconConfig() {",
                "+        return _reconConfig;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"columnName\")",
                "+    public String getColumnName() {",
                "+        return _columnName;",
                "+    }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "index d41618800..111da8f76 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "@@ -38,5 +38,8 @@ import static org.mockito.Mockito.mock;",
                " import java.io.IOException;",
                "+import java.io.StringWriter;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                " import java.util.List;",
                " import java.util.Properties;",
                "+import java.util.Set;",
                "@@ -59,4 +62,4 @@ import com.google.refine.model.ReconCandidate;",
                " import com.google.refine.model.Row;",
                "-import com.google.refine.process.Process;",
                "-import com.google.refine.process.ProcessManager;",
                "+import com.google.refine.model.recon.ReconciledDataExtensionJob;",
                "+import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtensionConfig;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "@@ -64,2 +67,4 @@ import com.google.refine.operations.OperationRegistry;",
                " import com.google.refine.operations.recon.ExtendDataOperation;",
                "+import com.google.refine.process.Process;",
                "+import com.google.refine.process.ProcessManager;",
                " import com.google.refine.tests.RefineTest;",
                "@@ -74,2 +79,22 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     static final String RECON_SCHEMA_SPACE = \"http://www.wikidata.org/prop/direct/\";",
                "+    ",
                "+    private String dataExtensionConfigJson = \"{\"",
                "+            + \"    \\\"properties\\\":[\"",
                "+            + \"        {\\\"name\\\":\\\"inception\\\",\\\"id\\\":\\\"P571\\\"},\"",
                "+            + \"        {\\\"name\\\":\\\"headquarters location\\\",\\\"id\\\":\\\"P159\\\"},\"",
                "+            + \"        {\\\"name\\\":\\\"coordinate location\\\",\\\"id\\\":\\\"P625\\\"}\"",
                "+            + \"     ]\"",
                "+            + \"}\";",
                "+    ",
                "+    static public class ReconciledDataExtensionJobStub extends ReconciledDataExtensionJob {",
                "+        public ReconciledDataExtensionJobStub(DataExtensionConfig obj, String endpoint) throws JSONException {",
                "+            super(obj, endpoint);",
                "+        }",
                "+",
                "+        public String formulateQueryStub(Set<String> ids, DataExtensionConfig node) throws JSONException {",
                "+            StringWriter writer = new StringWriter();",
                "+            super.formulateQuery(ids, node, writer);",
                "+            return writer.toString();",
                "+        }",
                "+    }",
                "@@ -134,2 +159,17 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     }",
                "+    ",
                "+    @Test",
                "+    public void serializeDataExtensionConfig() {",
                "+        TestUtils.isSerializedTo(DataExtensionConfig.reconstruct(new JSONObject(dataExtensionConfigJson)), dataExtensionConfigJson);",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testFormulateQuery() {",
                "+        DataExtensionConfig config = DataExtensionConfig.reconstruct(new JSONObject(dataExtensionConfigJson));",
                "+        Set<String> ids = Collections.singleton(\"Q2\");",
                "+        String json = \"{\\\"ids\\\":[\\\"Q2\\\"],\\\"properties\\\":[{\\\"id\\\":\\\"P571\\\"},{\\\"id\\\":\\\"P159\\\"},{\\\"id\\\":\\\"P625\\\"}]}\";",
                "+        ReconciledDataExtensionJobStub stub = new ReconciledDataExtensionJobStub(config, \"http://endpoint\");",
                "+        TestUtils.assertEqualAsJson(json, stub.formulateQueryStub(ids, config));",
                "+    }",
                "+   ",
                "@@ -159,3 +199,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void testFetchStrings() throws Exception {",
                "-        JSONObject extension = new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P297\\\",\\\"name\\\":\\\"ISO 3166-1 alpha-2 code\\\"}]}\");",
                "+        DataExtensionConfig extension = DataExtensionConfig.reconstruct(new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P297\\\",\\\"name\\\":\\\"ISO 3166-1 alpha-2 code\\\"}]}\"));",
                "@@ -196,3 +236,4 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void testFetchCounts() throws Exception {",
                "-        JSONObject extension = new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"count\\\":\\\"on\\\",\\\"rank\\\":\\\"any\\\"}}]}\");",
                "+        DataExtensionConfig extension = DataExtensionConfig.reconstruct(",
                "+                new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"count\\\":\\\"on\\\",\\\"rank\\\":\\\"any\\\"}}]}\"));",
                "@@ -230,3 +271,4 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void testFetchCurrent() throws Exception {",
                "-        JSONObject extension = new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"rank\\\":\\\"best\\\"}}]}\");",
                "+        DataExtensionConfig extension = DataExtensionConfig.reconstruct(",
                "+                new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"rank\\\":\\\"best\\\"}}]}\"));",
                "@@ -270,3 +312,4 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void testFetchRecord() throws Exception {",
                "-        JSONObject extension = new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"rank\\\":\\\"any\\\"}}]}\");",
                "+        DataExtensionConfig extension = DataExtensionConfig.reconstruct(",
                "+                new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"rank\\\":\\\"any\\\"}}]}\"));",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java",
                "index 117193d58..4662cd016 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java",
                "@@ -1,4 +1,2 @@",
                " package com.google.refine.tests.operations.recon;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                " import org.json.JSONObject;",
                "@@ -7,3 +5,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -29,4 +26,3 @@ public class ReconJudgeSimilarCellsOperationTests extends RefineTest {",
                "                 + \"\\\"shareNewTopics\\\":false}\";",
                "-        Project project = mock(Project.class);",
                "-        TestUtils.isSerializedTo(ReconJudgeSimilarCellsOperation.reconstruct(project, new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(ReconJudgeSimilarCellsOperation.reconstruct(new JSONObject(json)), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "index 5d9f2e063..413797e7f 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "@@ -8,2 +8,3 @@ import java.util.Properties;",
                "+import org.json.JSONException;",
                " import org.json.JSONObject;",
                "@@ -39,10 +40,4 @@ public class ReconJudgeSimilarCellsTests extends RefineTest {",
                "     @Test",
                "-    public void serializeReconJudgeSimilarCellsOperation() {",
                "-        AbstractOperation op = new ReconJudgeSimilarCellsOperation(",
                "-                ENGINE_CONFIG,",
                "-                \"A\",",
                "-                \"foo\",",
                "-                Recon.Judgment.New,",
                "-                null, true);",
                "-        TestUtils.isSerializedTo(op, \"{\\\"op\\\":\\\"core/recon-judge-similar-cells\\\",\"",
                "+    public void serializeReconJudgeSimilarCellsOperation() throws JSONException {",
                "+        String json = \"{\\\"op\\\":\\\"core/recon-judge-similar-cells\\\",\"",
                "                 + \"\\\"description\\\":\\\"Mark to create one single new item for all cells containing \\\\\\\"foo\\\\\\\" in column A\\\",\"",
                "@@ -52,3 +47,4 @@ public class ReconJudgeSimilarCellsTests extends RefineTest {",
                "                 + \"\\\"judgment\\\":\\\"new\\\",\"",
                "-                + \"\\\"shareNewTopics\\\":true}\");",
                "+                + \"\\\"shareNewTopics\\\":true}\";",
                "+        TestUtils.isSerializedTo(ReconJudgeSimilarCellsOperation.reconstruct(new JSONObject(json)), json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "index d5f16b420..4da313b37 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "@@ -10,2 +10,4 @@ import org.testng.annotations.Test;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.model.recon.ReconConfig;",
                "+import com.google.refine.model.recon.StandardReconConfig;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -20,2 +22,3 @@ public class ReconOperationTests extends RefineTest {",
                "         OperationRegistry.registerOperation(getCoreModule(), \"recon\", ReconOperation.class);",
                "+        ReconConfig.registerReconConfig(getCoreModule(), \"standard-service\", StandardReconConfig.class);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/recon/ExtendDataCommand.java",
                "main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "main/src/com/google/refine/commands/recon/ReconMatchSpecificTopicCommand.java",
                "main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "main/src/com/google/refine/operations/recon/ReconClearSimilarCellsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconCopyAcrossColumnsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconDiscardJudgmentsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconMarkNewTopicsOperation.java",
                "main/src/com/google/refine/operations/recon/ReconMatchBestCandidatesOperation.java",
                "main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "main/src/com/google/refine/operations/recon/ReconOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6daa1b4f5c979d8c7bec629d3761cfe045f7f99d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1537874919,
            "hunks": 58,
            "message": "Jackson serialization for RowReorderOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/row/GetRowsCommand.java b/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "index ca5cdf192..95e0fe266 100644",
                "--- a/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "+++ b/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "@@ -59,2 +59,3 @@ import com.google.refine.model.Record;",
                " import com.google.refine.model.Row;",
                "+import com.google.refine.sorting.BaseSorter.SortingConfig;",
                " import com.google.refine.sorting.SortingRecordVisitor;",
                "@@ -122,7 +123,10 @@ public class GetRowsCommand extends Command {",
                "-            JSONObject sortingJson = null;",
                "+            SortingConfig sortingConfig = null;",
                "             try{",
                "                 String json = request.getParameter(\"sorting\");",
                "-                sortingJson = (json == null) ? null : ",
                "+                JSONObject sortingJson = (json == null) ? null : ",
                "                     ParsingUtilities.evaluateJsonStringToObject(json);",
                "+                if (sortingJson != null) {",
                "+                    sortingConfig = SortingConfig.reconstruct(project, sortingJson);",
                "+                }",
                "             } catch (JSONException e) {",
                "@@ -134,6 +138,6 @@ public class GetRowsCommand extends Command {",
                "-                if (sortingJson != null) {",
                "+                if (sortingConfig != null) {",
                "                     SortingRowVisitor srv = new SortingRowVisitor(visitor);",
                "-                    srv.initializeFromJSON(project, sortingJson);",
                "+                    srv.initializeFromConfig(project, sortingConfig);",
                "                     if (srv.hasCriteria()) {",
                "@@ -153,6 +157,6 @@ public class GetRowsCommand extends Command {",
                "-                if (sortingJson != null) {",
                "+                if (sortingConfig != null) {",
                "                     SortingRecordVisitor srv = new SortingRecordVisitor(visitor);",
                "-                    srv.initializeFromJSON(project, sortingJson);",
                "+                    srv.initializeFromConfig(project, sortingConfig);",
                "                     if (srv.hasCriteria()) {",
                "diff --git a/main/src/com/google/refine/commands/row/ReorderRowsCommand.java b/main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "index 49ed991c5..c9825c56e 100644",
                "--- a/main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "+++ b/main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "@@ -46,2 +46,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.operations.row.RowReorderOperation;",
                "+import com.google.refine.sorting.BaseSorter.SortingConfig;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -55,3 +56,3 @@ public class ReorderRowsCommand extends EngineDependentCommand {",
                "         String mode = request.getParameter(\"mode\");",
                "-        JSONObject sorting = null;",
                "+        SortingConfig sorting = null;",
                "@@ -60,3 +61,4 @@ public class ReorderRowsCommand extends EngineDependentCommand {",
                "-            sorting = (json == null) ? null : ParsingUtilities.evaluateJsonStringToObject(json);",
                "+            JSONObject sortingJson = (json == null) ? null : ParsingUtilities.evaluateJsonStringToObject(json);",
                "+            sorting = (sortingJson == null) ? null : SortingConfig.reconstruct(project, sortingJson);",
                "         } catch (JSONException e) {",
                "diff --git a/main/src/com/google/refine/exporters/TemplatingExporter.java b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "index 4691ccf7a..43f8d4809 100644",
                "--- a/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "+++ b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "@@ -54,2 +54,3 @@ import com.google.refine.sorting.SortingRecordVisitor;",
                " import com.google.refine.sorting.SortingRowVisitor;",
                "+import com.google.refine.sorting.BaseSorter.SortingConfig;",
                " import com.google.refine.templating.Parser;",
                "@@ -117,4 +118,5 @@ public class TemplatingExporter implements WriterExporter {",
                "                 try {",
                "+                    SortingConfig sorting = SortingConfig.reconstruct(project, sortingJson);",
                "                     SortingRowVisitor srv = new SortingRowVisitor(visitor);",
                "-                    srv.initializeFromJSON(project, sortingJson);",
                "+                    srv.initializeFromConfig(project, sorting);",
                "@@ -135,4 +137,5 @@ public class TemplatingExporter implements WriterExporter {",
                "                 try {",
                "+                    SortingConfig sorting = SortingConfig.reconstruct(project, sortingJson);",
                "                     SortingRecordVisitor srv = new SortingRecordVisitor(visitor);",
                "-                    srv.initializeFromJSON(project, sortingJson);",
                "+                    srv.initializeFromConfig(project, sorting);",
                "diff --git a/main/src/com/google/refine/operations/row/RowFlagOperation.java b/main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "index 5dc07a7a2..fe8a1dbfc 100644",
                "--- a/main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "@@ -43,2 +43,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -86,2 +88,7 @@ public class RowFlagOperation extends EngineDependentOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"flagged\")",
                "+    public boolean getFlagged() {",
                "+        return _flagged;",
                "+    }",
                "diff --git a/main/src/com/google/refine/operations/row/RowReorderOperation.java b/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "index 6df761943..ace36d498 100644",
                "--- a/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "@@ -43,2 +43,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -54,2 +56,4 @@ import com.google.refine.model.changes.RowReorderChange;",
                " import com.google.refine.operations.OperationRegistry;",
                "+import com.google.refine.sorting.BaseSorter;",
                "+import com.google.refine.sorting.BaseSorter.SortingConfig;",
                " import com.google.refine.sorting.SortingRecordVisitor;",
                "@@ -62,10 +66,10 @@ public class RowReorderOperation extends AbstractOperation {",
                "                 obj.getJSONObject(\"sorting\") : null;",
                "-",
                "-                return new RowReorderOperation(Engine.stringToMode(mode), sorting);",
                "+        BaseSorter.SortingConfig config = BaseSorter.SortingConfig.reconstruct(project, sorting);",
                "+        return new RowReorderOperation(Engine.stringToMode(mode), config);",
                "     }",
                "-",
                "+    ",
                "     final protected Mode _mode;",
                "-    final protected JSONObject _sorting;",
                "+    final protected BaseSorter.SortingConfig _sorting;",
                "-    public RowReorderOperation(Mode mode, JSONObject sorting) {",
                "+    public RowReorderOperation(Mode mode, BaseSorter.SortingConfig sorting) {",
                "         _mode = mode;",
                "@@ -82,5 +86,15 @@ public class RowReorderOperation extends AbstractOperation {",
                "         writer.key(\"mode\"); writer.value(Engine.modeToString(_mode));",
                "-        writer.key(\"sorting\"); writer.value(_sorting);",
                "+        writer.key(\"sorting\"); _sorting.write(writer, options);",
                "         writer.endObject();",
                "     }",
                "+    ",
                "+    @JsonProperty(\"mode\")",
                "+    public Mode getMode() {",
                "+        return _mode;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"sorting\")",
                "+    public SortingConfig getSortingConfig() {",
                "+        return _sorting;",
                "+    }",
                "@@ -102,3 +116,3 @@ public class RowReorderOperation extends AbstractOperation {",
                "-                srv.initializeFromJSON(project, _sorting);",
                "+                srv.initializeFromConfig(project, _sorting);",
                "                 if (srv.hasCriteria()) {",
                "@@ -114,3 +128,3 @@ public class RowReorderOperation extends AbstractOperation {",
                "-                srv.initializeFromJSON(project, _sorting);",
                "+                srv.initializeFromConfig(project, _sorting);",
                "                 if (srv.hasCriteria()) {",
                "diff --git a/main/src/com/google/refine/operations/row/RowStarOperation.java b/main/src/com/google/refine/operations/row/RowStarOperation.java",
                "index db337d06f..5508449b1 100644",
                "--- a/main/src/com/google/refine/operations/row/RowStarOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowStarOperation.java",
                "@@ -43,2 +43,4 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -86,2 +88,7 @@ public class RowStarOperation extends EngineDependentOperation {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"starred\")",
                "+    public boolean getStarred() {",
                "+        return _starred;",
                "+    }",
                "diff --git a/main/src/com/google/refine/sorting/BaseSorter.java b/main/src/com/google/refine/sorting/BaseSorter.java",
                "index 5ace4db75..6b807f261 100644",
                "--- a/main/src/com/google/refine/sorting/BaseSorter.java",
                "+++ b/main/src/com/google/refine/sorting/BaseSorter.java",
                "@@ -36,2 +36,3 @@ package com.google.refine.sorting;",
                " import java.util.List;",
                "+import java.util.Properties;",
                "@@ -40,3 +41,8 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "+import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.expr.EvalError;",
                "@@ -106,22 +112,47 @@ abstract public class BaseSorter {",
                "-    public void initializeFromJSON(Project project, JSONObject obj) throws JSONException {",
                "-        if (obj.has(\"criteria\") && !obj.isNull(\"criteria\")) {",
                "-            JSONArray a = obj.getJSONArray(\"criteria\");",
                "-            int count = a.length();",
                "-",
                "-            _criteria = new Criterion[count];",
                "-            _keyMakers = new KeyMaker[count];",
                "-            _comparatorWrappers = new ComparatorWrapper[count];",
                "-",
                "-            for (int i = 0; i < count; i++) {",
                "-                JSONObject obj2 = a.getJSONObject(i);",
                "-",
                "-                _criteria[i] = createCriterionFromJSON(project, obj2);",
                "-                _keyMakers[i] = _criteria[i].createKeyMaker();",
                "-                _comparatorWrappers[i] = new ComparatorWrapper(i);",
                "+    public final static class SortingConfig implements Jsonizable {",
                "+        ",
                "+        protected Criterion[] _criteria;",
                "+        ",
                "+        @JsonCreator",
                "+        public SortingConfig(",
                "+                @JsonProperty(\"criteria\")",
                "+                Criterion[] criteria) {",
                "+            _criteria = criteria;",
                "+        }",
                "+        ",
                "+        @JsonProperty(\"criteria\")",
                "+        public Criterion[] getCriteria() {",
                "+            return _criteria;",
                "+        }",
                "+    ",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"criteria\");",
                "+            for (int i = 0; i != _criteria.length; i++) {",
                "+                _criteria[i].write(writer, options);",
                "             }",
                "-        } else {",
                "-            _criteria = new Criterion[0];",
                "-            _keyMakers = new KeyMaker[0];",
                "-            _comparatorWrappers = new ComparatorWrapper[0];",
                "+            writer.endObject();",
                "+        }",
                "+        ",
                "+        public static SortingConfig reconstruct(Project project, JSONObject obj) {",
                "+            Criterion[] criteria;",
                "+            if (obj != null && obj.has(\"criteria\") && !obj.isNull(\"criteria\")) {",
                "+                JSONArray a = obj.getJSONArray(\"criteria\");",
                "+                int count = a.length();",
                "+    ",
                "+                criteria = new Criterion[count];",
                "+    ",
                "+    ",
                "+                for (int i = 0; i < count; i++) {",
                "+                    JSONObject obj2 = a.getJSONObject(i);",
                "+    ",
                "+                    criteria[i] = Criterion.reconstruct(obj2);",
                "+                }",
                "+            } else {",
                "+                criteria = new Criterion[0];",
                "+            }",
                "+            return new SortingConfig(criteria);",
                "         }",
                "@@ -129,25 +160,16 @@ abstract public class BaseSorter {",
                "-    public boolean hasCriteria() {",
                "-        return _criteria != null && _criteria.length > 0;",
                "-    }",
                "-",
                "-    protected Criterion createCriterionFromJSON(Project project, JSONObject obj) throws JSONException {",
                "-        String valueType = \"string\";",
                "-        if (obj.has(\"valueType\") && !obj.isNull(\"valueType\")) {",
                "-            valueType = obj.getString(\"valueType\");",
                "-        }",
                "+    public void initializeFromConfig(Project project, BaseSorter.SortingConfig config) throws JSONException {",
                "+        _criteria = config.getCriteria();",
                "+        int count = _criteria.length;",
                "+        _keyMakers = new KeyMaker[count];",
                "+        _comparatorWrappers = new ComparatorWrapper[count];",
                "-        Criterion c = null;",
                "-        if (\"boolean\".equals(valueType)) {",
                "-            c = new BooleanCriterion();",
                "-        } else if (\"date\".equals(valueType)) {",
                "-            c = new DateCriterion();",
                "-        } else if (\"number\".equals(valueType)) {",
                "-            c = new NumberCriterion();",
                "-        } else {",
                "-            c = new StringCriterion();",
                "+        for (int i = 0; i < count; i++) {",
                "+            _keyMakers[i] = _criteria[i].createKeyMaker();",
                "+            _comparatorWrappers[i] = new ComparatorWrapper(i);",
                "         }",
                "+    }",
                "-        c.initializeFromJSON(project, obj);",
                "-        return c;",
                "+    public boolean hasCriteria() {",
                "+        return _criteria != null && _criteria.length > 0;",
                "     }",
                "diff --git a/main/src/com/google/refine/sorting/BooleanCriterion.java b/main/src/com/google/refine/sorting/BooleanCriterion.java",
                "index 1f56c98de..07746e038 100644",
                "--- a/main/src/com/google/refine/sorting/BooleanCriterion.java",
                "+++ b/main/src/com/google/refine/sorting/BooleanCriterion.java",
                "@@ -35,2 +35,7 @@ package com.google.refine.sorting;",
                "+import java.util.Properties;",
                "+",
                "+import org.json.JSONException;",
                "+import org.json.JSONWriter;",
                "+",
                " import com.google.refine.expr.EvalError;",
                "@@ -64,2 +69,7 @@ public class BooleanCriterion extends Criterion {",
                "     }",
                "+",
                "+    @Override",
                "+    public String getValueType() {",
                "+        return \"boolean\";",
                "+    }",
                " }",
                "diff --git a/main/src/com/google/refine/sorting/Criterion.java b/main/src/com/google/refine/sorting/Criterion.java",
                "index a41374fb0..e19b69dd6 100644",
                "--- a/main/src/com/google/refine/sorting/Criterion.java",
                "+++ b/main/src/com/google/refine/sorting/Criterion.java",
                "@@ -35,5 +35,11 @@ package com.google.refine.sorting;",
                "+import java.util.Properties;",
                "+",
                " import org.json.JSONException;",
                " import org.json.JSONObject;",
                "+import org.json.JSONWriter;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.expr.ExpressionUtils;",
                "@@ -44,5 +50,5 @@ import com.google.refine.model.Row;",
                "-abstract public class Criterion {",
                "+abstract public class Criterion implements Jsonizable {",
                "     public String columnName;",
                "-    protected int cellIndex;",
                "+    protected int cellIndex = -2;",
                "@@ -56,3 +62,3 @@ abstract public class Criterion {",
                "-    public void initializeFromJSON(Project project, JSONObject obj) ",
                "+    public void initializeFromJSON(JSONObject obj) ",
                "             throws JSONException {",
                "@@ -60,5 +66,2 @@ abstract public class Criterion {",
                "             columnName = obj.getString(\"column\");",
                "-",
                "-            Column column = project.columnModel.getColumnByName(columnName);",
                "-            cellIndex = column != null ? column.getCellIndex() : -1;",
                "         }",
                "@@ -76,3 +79,71 @@ abstract public class Criterion {",
                "     }",
                "+    ",
                "+    public static Criterion reconstruct(JSONObject obj) throws JSONException {",
                "+        String valueType = \"string\";",
                "+        if (obj.has(\"valueType\") && !obj.isNull(\"valueType\")) {",
                "+            valueType = obj.getString(\"valueType\");",
                "+        }",
                "+",
                "+        Criterion c = null;",
                "+        if (\"boolean\".equals(valueType)) {",
                "+            c = new BooleanCriterion();",
                "+        } else if (\"date\".equals(valueType)) {",
                "+            c = new DateCriterion();",
                "+        } else if (\"number\".equals(valueType)) {",
                "+            c = new NumberCriterion();",
                "+        } else {",
                "+            c = new StringCriterion(obj.getBoolean(\"caseSensitive\"));",
                "+        }",
                "+",
                "+        c.initializeFromJSON(obj);",
                "+        return c;",
                "+    }",
                "+    ",
                "+",
                "+    @Override",
                "+    public void write(JSONWriter writer, Properties options)",
                "+            throws JSONException {",
                "+        writer.object();",
                "+        writer.key(\"valueType\"); writer.value(getValueType());",
                "+        writer.key(\"reverse\"); writer.value(getReverse());",
                "+        writer.key(\"column\"); writer.value(getColumnName());",
                "+        writer.key(\"blankPosition\"); writer.value(getBlankPosition());",
                "+        writer.key(\"errorPosition\"); writer.value(getErrorPosition());",
                "+        writer.endObject();",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"valueType\")",
                "+    public abstract String getValueType();",
                "+    ",
                "+    @JsonProperty(\"reverse\")",
                "+    public boolean getReverse() {",
                "+        return reverse;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"column\")",
                "+    public String getColumnName() {",
                "+        return columnName;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"blankPosition\")",
                "+    public int getBlankPosition() {",
                "+        return blankPosition;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"errorPosition\")",
                "+    public int getErrorPosition() {",
                "+        return errorPosition;",
                "+    }",
                "+    // Returns a cached cell index",
                "+    // We delay this fetching because the column might not exist",
                "+    // at deserialization (for instance if the column is created by an operation",
                "+    // that has not been applied yet).",
                "+    protected int getCellIndex(Project project) {",
                "+        if (cellIndex == -2) {",
                "+            Column column = project.columnModel.getColumnByName(columnName);",
                "+            cellIndex = column != null ? column.getCellIndex() : -1;",
                "+        }",
                "+        return cellIndex;",
                "+    }",
                "@@ -121,6 +192,6 @@ abstract public class Criterion {",
                "         public Object makeKey(Project project, Row row, int rowIndex) {",
                "-            if (cellIndex < 0) {",
                "+            if (getCellIndex(project) < 0) {",
                "                 return null;",
                "             } else {",
                "-                Object value = row.getCellValue(cellIndex);",
                "+                Object value = row.getCellValue(getCellIndex(project));",
                "                 return makeKey(value);",
                "diff --git a/main/src/com/google/refine/sorting/DateCriterion.java b/main/src/com/google/refine/sorting/DateCriterion.java",
                "index a3add8187..161abb2f0 100644",
                "--- a/main/src/com/google/refine/sorting/DateCriterion.java",
                "+++ b/main/src/com/google/refine/sorting/DateCriterion.java",
                "@@ -37,2 +37,6 @@ import java.time.Instant;",
                " import java.time.OffsetDateTime;",
                "+import java.util.Properties;",
                "+",
                "+import org.json.JSONException;",
                "+import org.json.JSONWriter;",
                "@@ -65,2 +69,7 @@ public class DateCriterion extends Criterion {",
                "     }",
                "+",
                "+    @Override",
                "+    public String getValueType() {",
                "+        return \"date\";",
                "+    }",
                " }",
                "diff --git a/main/src/com/google/refine/sorting/NumberCriterion.java b/main/src/com/google/refine/sorting/NumberCriterion.java",
                "index 287618c35..ad92f4093 100644",
                "--- a/main/src/com/google/refine/sorting/NumberCriterion.java",
                "+++ b/main/src/com/google/refine/sorting/NumberCriterion.java",
                "@@ -79,2 +79,7 @@ public class NumberCriterion extends Criterion {",
                "     }",
                "+",
                "+    @Override",
                "+    public String getValueType() {",
                "+        return \"number\";",
                "+    }",
                " }",
                "diff --git a/main/src/com/google/refine/sorting/StringCriterion.java b/main/src/com/google/refine/sorting/StringCriterion.java",
                "index 4807c2507..e3d937fc2 100644",
                "--- a/main/src/com/google/refine/sorting/StringCriterion.java",
                "+++ b/main/src/com/google/refine/sorting/StringCriterion.java",
                "@@ -38,7 +38,5 @@ import java.text.Collator;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.google.refine.expr.ExpressionUtils;",
                "-import com.google.refine.model.Project;",
                "@@ -51,3 +49,3 @@ public class StringCriterion extends Criterion {",
                "      */",
                "-    public StringCriterion() {",
                "+    public StringCriterion(boolean caseSensitive) {",
                "         super();",
                "@@ -56,12 +54,8 @@ public class StringCriterion extends Criterion {",
                "         collator.setStrength(Collator.SECONDARY);",
                "+        this.caseSensitive = caseSensitive;",
                "     }",
                "-    @Override",
                "-    public void initializeFromJSON(Project project, JSONObject obj) throws JSONException {",
                "-        super.initializeFromJSON(project, obj);",
                "-",
                "-        if (obj.has(\"caseSensitive\") && !obj.isNull(\"caseSensitive\")) {",
                "-            caseSensitive = obj.getBoolean(\"caseSensitive\");",
                "-            collator.setStrength(Collator.IDENTICAL);",
                "-        }",
                "+    @JsonProperty(\"caseSensitive\")",
                "+    public boolean isCaseSensitive() {",
                "+        return caseSensitive;",
                "     }",
                "@@ -83,2 +77,7 @@ public class StringCriterion extends Criterion {",
                "     }",
                "+",
                "+    @Override",
                "+    public String getValueType() {",
                "+        return \"string\";",
                "+    }",
                " }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "index 0bc492d24..bdcfb80a1 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "@@ -22,2 +22,3 @@ import com.google.refine.operations.row.RowReorderOperation;",
                " import com.google.refine.process.Process;",
                "+import com.google.refine.sorting.BaseSorter.SortingConfig;",
                " import com.google.refine.tests.RefineTest;",
                "@@ -51,6 +52,8 @@ public class RowReorderOperationTests extends RefineTest {",
                "     public void testSortEmptyString() throws Exception {",
                "+        String sortingJson = \"{\\\"criteria\\\":[{\\\"column\\\":\\\"key\\\",\\\"valueType\\\":\\\"number\\\",\\\"reverse\\\":false,\\\"blankPosition\\\":2,\\\"errorPosition\\\":1}]}\";",
                "+        SortingConfig sortingConfig = SortingConfig.reconstruct(project, new JSONObject(sortingJson));",
                "         project.rows.get(1).cells.set(0, new Cell(\"\", null));",
                "         AbstractOperation op = new RowReorderOperation(",
                "-                Mode.RowBased,",
                "-                new JSONObject(\"{\\\"criteria\\\":[{\\\"column\\\":\\\"key\\\",\\\"valueType\\\":\\\"number\\\",\\\"reverse\\\":false,\\\"blankPosition\\\":2,\\\"errorPosition\\\":1}]}\"));",
                "+                Mode.RowBased, sortingConfig",
                "+                );",
                "         Process process = op.createProcess(project, new Properties());"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "main/src/com/google/refine/exporters/TemplatingExporter.java",
                "main/src/com/google/refine/operations/row/RowFlagOperation.java",
                "main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "main/src/com/google/refine/operations/row/RowStarOperation.java",
                "main/src/com/google/refine/sorting/BaseSorter.java",
                "main/src/com/google/refine/sorting/BooleanCriterion.java",
                "main/src/com/google/refine/sorting/Criterion.java",
                "main/src/com/google/refine/sorting/DateCriterion.java",
                "main/src/com/google/refine/sorting/NumberCriterion.java",
                "main/src/com/google/refine/sorting/StringCriterion.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c140f90db11096534553a15a7202bcf628127d9a",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1537710408,
            "hunks": 21,
            "message": "Jackson serialization for GREL controls",
            "diff": [
                "diff --git a/main/src/com/google/refine/grel/Control.java b/main/src/com/google/refine/grel/Control.java",
                "index a887fb546..a4e475da1 100644",
                "--- a/main/src/com/google/refine/grel/Control.java",
                "+++ b/main/src/com/google/refine/grel/Control.java",
                "@@ -37,2 +37,9 @@ import java.util.Properties;",
                "+import org.json.JSONException;",
                "+import org.json.JSONWriter;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -49,2 +56,27 @@ public interface Control extends Jsonizable {",
                "     public String checkArguments(Evaluable[] args);",
                "+    ",
                "+    @JsonProperty(\"description\")",
                "+    public String getDescription();",
                "+    ",
                "+    @JsonProperty(\"params\")",
                "+    @JsonInclude(Include.NON_EMPTY)",
                "+    default public String getParams() {",
                "+        return \"\";",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"returns\")",
                "+    public String getReturns();",
                "+    ",
                "+    @Override",
                "+    default public void write(JSONWriter writer, Properties options)",
                "+        throws JSONException {",
                "+    ",
                "+        writer.object();",
                "+        writer.key(\"description\"); writer.value(getDescription());",
                "+        if (!getParams().isEmpty()) {",
                "+            writer.key(\"params\"); writer.value(getParams());",
                "+        }",
                "+        writer.key(\"returns\"); writer.value(getReturns());",
                "+        writer.endObject();",
                "+    }",
                " }",
                "diff --git a/main/src/com/google/refine/grel/controls/Filter.java b/main/src/com/google/refine/grel/controls/Filter.java",
                "index 1ae69f51c..ebce67b6f 100644",
                "--- a/main/src/com/google/refine/grel/controls/Filter.java",
                "+++ b/main/src/com/google/refine/grel/controls/Filter.java",
                "@@ -150,12 +150,14 @@ public class Filter implements Control {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+            return \"Evaluates expression a to an array. Then for each array element, binds its value to variable name v, evaluates expression test which should return a boolean. If the boolean is true, pushes v onto the result array.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-            \"Evaluates expression a to an array. Then for each array element, binds its value to variable name v, evaluates expression test which should return a boolean. If the boolean is true, pushes v onto the result array.\"",
                "-        );",
                "-        writer.key(\"params\"); writer.value(\"expression a, variable v, expression test\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"expression a, variable v, expression test\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/grel/controls/ForEach.java b/main/src/com/google/refine/grel/controls/ForEach.java",
                "index c02cae44b..493c18619 100644",
                "--- a/main/src/com/google/refine/grel/controls/ForEach.java",
                "+++ b/main/src/com/google/refine/grel/controls/ForEach.java",
                "@@ -42,3 +42,2 @@ import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -147,12 +146,14 @@ public class ForEach implements Control {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+            return \"Evaluates expression a to an array. Then for each array element, binds its value to variable name v, evaluates expression e, and pushes the result onto the result array.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-            \"Evaluates expression a to an array. Then for each array element, binds its value to variable name v, evaluates expression e, and pushes the result onto the result array.\"",
                "-        );",
                "-        writer.key(\"params\"); writer.value(\"expression a, variable v, expression e\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"expression a, variable v, expression e\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/grel/controls/ForEachIndex.java b/main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "index 7abe1a912..c673d4916 100644",
                "--- a/main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "+++ b/main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "@@ -152,12 +152,14 @@ public class ForEachIndex implements Control {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+            return \"Evaluates expression a to an array. Then for each array element, binds its index to variable i and its value to variable name v, evaluates expression e, and pushes the result onto the result array.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-            \"Evaluates expression a to an array. Then for each array element, binds its index to variable i and its value to variable name v, evaluates expression e, and pushes the result onto the result array.\"",
                "-        );",
                "-        writer.key(\"params\"); writer.value(\"expression a, variable i, variable v, expression e\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"expression a, variable i, variable v, expression e\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/grel/controls/ForNonBlank.java b/main/src/com/google/refine/grel/controls/ForNonBlank.java",
                "index 664c27636..15f0da19b 100644",
                "--- a/main/src/com/google/refine/grel/controls/ForNonBlank.java",
                "+++ b/main/src/com/google/refine/grel/controls/ForNonBlank.java",
                "@@ -87,13 +87,15 @@ public class ForNonBlank implements Control {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+            return \"Evaluates expression o. If it is non-blank, binds its value to variable name v, evaluates expression eNonBlank and returns the result. \" +",
                "+            \"Otherwise (if o evaluates to blank), evaluates expression eBlank and returns that result instead.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-            \"Evaluates expression o. If it is non-blank, binds its value to variable name v, evaluates expression eNonBlank and returns the result. \" +",
                "-            \"Otherwise (if o evaluates to blank), evaluates expression eBlank and returns that result instead.\"",
                "-        );",
                "-        writer.key(\"params\"); writer.value(\"expression o, variable v, expression eNonBlank, expression eBlank\");",
                "-        writer.key(\"returns\"); writer.value(\"Depends on actual arguments\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"expression o, variable v, expression eNonBlank, expression eBlank\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"Depends on actual arguments\";",
                "     }",
                "diff --git a/main/src/com/google/refine/grel/controls/ForRange.java b/main/src/com/google/refine/grel/controls/ForRange.java",
                "index f1a009fe9..61e181b64 100644",
                "--- a/main/src/com/google/refine/grel/controls/ForRange.java",
                "+++ b/main/src/com/google/refine/grel/controls/ForRange.java",
                "@@ -134,12 +134,14 @@ public class ForRange implements Control {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Iterates over the variable v starting at \\\"from\\\", incrementing by \\\"step\\\" each time while less than \\\"to\\\". At each iteration, evaluates expression e, and pushes the result onto the result array.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-            \"Iterates over the variable v starting at \\\"from\\\", incrementing by \\\"step\\\" each time while less than \\\"to\\\". At each iteration, evaluates expression e, and pushes the result onto the result array.\"",
                "-        );",
                "-        writer.key(\"params\"); writer.value(\"number from, number to, number step, variable v, expression e\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number from, number to, number step, variable v, expression e\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/grel/controls/If.java b/main/src/com/google/refine/grel/controls/If.java",
                "index 2139c5160..d4d824b93 100644",
                "--- a/main/src/com/google/refine/grel/controls/If.java",
                "+++ b/main/src/com/google/refine/grel/controls/If.java",
                "@@ -67,13 +67,15 @@ public class If implements Control {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+            return \"Evaluates expression o. If it is true, evaluates expression eTrue and returns the result. \" +",
                "+            \"Otherwise, evaluates expression eFalse and returns that result instead.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-            \"Evaluates expression o. If it is true, evaluates expression eTrue and returns the result. \" +",
                "-            \"Otherwise, evaluates expression eFalse and returns that result instead.\"",
                "-        );",
                "-        writer.key(\"params\"); writer.value(\"expression o, expression eTrue, expression eFalse\");",
                "-        writer.key(\"returns\"); writer.value(\"Depends on actual arguments\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"expression o, expression eTrue, expression eFalse\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"Depends on actual arguments\";",
                "     }",
                "diff --git a/main/src/com/google/refine/grel/controls/IsBlank.java b/main/src/com/google/refine/grel/controls/IsBlank.java",
                "index 4f32e661d..6e1d877ac 100644",
                "--- a/main/src/com/google/refine/grel/controls/IsBlank.java",
                "+++ b/main/src/com/google/refine/grel/controls/IsBlank.java",
                "@@ -39,3 +39,3 @@ public class IsBlank extends IsTest {",
                "     @Override",
                "-    protected String getDescription() {",
                "+    public String getDescription() {",
                "         return \"Returns whether o is null or an empty string\";",
                "diff --git a/main/src/com/google/refine/grel/controls/IsEmptyString.java b/main/src/com/google/refine/grel/controls/IsEmptyString.java",
                "index e9154f8e2..cccce3646 100644",
                "--- a/main/src/com/google/refine/grel/controls/IsEmptyString.java",
                "+++ b/main/src/com/google/refine/grel/controls/IsEmptyString.java",
                "@@ -4,3 +4,3 @@ public class IsEmptyString extends IsTest {",
                "     @Override",
                "-    protected String getDescription() {",
                "+    public String getDescription() {",
                "         return \"Returns whether o is an empty string\";",
                "diff --git a/main/src/com/google/refine/grel/controls/IsError.java b/main/src/com/google/refine/grel/controls/IsError.java",
                "index d93afa2c7..149c26d7e 100644",
                "--- a/main/src/com/google/refine/grel/controls/IsError.java",
                "+++ b/main/src/com/google/refine/grel/controls/IsError.java",
                "@@ -39,3 +39,3 @@ public class IsError extends IsTest {",
                "     @Override",
                "-    protected String getDescription() {",
                "+    public String getDescription() {",
                "         return \"Returns whether o is an error\";",
                "diff --git a/main/src/com/google/refine/grel/controls/IsNonBlank.java b/main/src/com/google/refine/grel/controls/IsNonBlank.java",
                "index 6a7602a7c..d7f6c2d56 100644",
                "--- a/main/src/com/google/refine/grel/controls/IsNonBlank.java",
                "+++ b/main/src/com/google/refine/grel/controls/IsNonBlank.java",
                "@@ -39,3 +39,3 @@ public class IsNonBlank extends IsTest {",
                "     @Override",
                "-    protected String getDescription() {",
                "+    public String getDescription() {",
                "         return \"Returns whether o is not null and not an empty string\";",
                "diff --git a/main/src/com/google/refine/grel/controls/IsNotNull.java b/main/src/com/google/refine/grel/controls/IsNotNull.java",
                "index 44d427948..f6e525bc2 100644",
                "--- a/main/src/com/google/refine/grel/controls/IsNotNull.java",
                "+++ b/main/src/com/google/refine/grel/controls/IsNotNull.java",
                "@@ -37,3 +37,3 @@ public class IsNotNull extends IsTest {",
                "     @Override",
                "-    protected String getDescription() {",
                "+    public String getDescription() {",
                "         return \"Returns whether o is not null\";",
                "diff --git a/main/src/com/google/refine/grel/controls/IsNull.java b/main/src/com/google/refine/grel/controls/IsNull.java",
                "index cbfbb094e..83ca60e39 100644",
                "--- a/main/src/com/google/refine/grel/controls/IsNull.java",
                "+++ b/main/src/com/google/refine/grel/controls/IsNull.java",
                "@@ -37,3 +37,3 @@ public class IsNull extends IsTest {",
                "     @Override",
                "-    protected String getDescription() {",
                "+    public String getDescription() {",
                "         return \"Returns whether o is null\";",
                "diff --git a/main/src/com/google/refine/grel/controls/IsNumeric.java b/main/src/com/google/refine/grel/controls/IsNumeric.java",
                "index 24013793d..b56f08185 100644",
                "--- a/main/src/com/google/refine/grel/controls/IsNumeric.java",
                "+++ b/main/src/com/google/refine/grel/controls/IsNumeric.java",
                "@@ -39,3 +39,3 @@ public class IsNumeric extends IsTest {",
                "     @Override",
                "-    protected String getDescription() {",
                "+    public String getDescription() {",
                "         return \"Returns whether o can represent a number\";",
                "diff --git a/main/src/com/google/refine/grel/controls/IsTest.java b/main/src/com/google/refine/grel/controls/IsTest.java",
                "index 32c2f2524..307362083 100644",
                "--- a/main/src/com/google/refine/grel/controls/IsTest.java",
                "+++ b/main/src/com/google/refine/grel/controls/IsTest.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -66,10 +63,9 @@ abstract class IsTest implements Control {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getParams() {",
                "+        return \"expression o\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(getDescription());",
                "-        writer.key(\"params\"); writer.value(\"expression o\");",
                "-        writer.key(\"returns\"); writer.value(\"boolean\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"boolean\";",
                "     }",
                "@@ -77,4 +73,2 @@ abstract class IsTest implements Control {",
                "     abstract protected boolean test(Object v);",
                "-    ",
                "-    abstract protected String getDescription();",
                " }",
                "diff --git a/main/src/com/google/refine/grel/controls/With.java b/main/src/com/google/refine/grel/controls/With.java",
                "index 0833df080..82f80b47d 100644",
                "--- a/main/src/com/google/refine/grel/controls/With.java",
                "+++ b/main/src/com/google/refine/grel/controls/With.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.Evaluable;",
                "@@ -84,12 +81,14 @@ public class With implements Control {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+            return \"Evaluates expression o and binds its value to variable name v. Then evaluates expression e and returns that result\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"expression o, variable v, expression e\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-            \"Evaluates expression o and binds its value to variable name v. Then evaluates expression e and returns that result\"",
                "-        );",
                "-        writer.key(\"params\"); writer.value(\"expression o, variable v, expression e\");",
                "-        writer.key(\"returns\"); writer.value(\"Depends on actual arguments\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"Depends on actual arguments\";",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/grel/Control.java",
                "main/src/com/google/refine/grel/controls/Filter.java",
                "main/src/com/google/refine/grel/controls/ForEach.java",
                "main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "main/src/com/google/refine/grel/controls/ForNonBlank.java",
                "main/src/com/google/refine/grel/controls/ForRange.java",
                "main/src/com/google/refine/grel/controls/If.java",
                "main/src/com/google/refine/grel/controls/IsBlank.java",
                "main/src/com/google/refine/grel/controls/IsEmptyString.java",
                "main/src/com/google/refine/grel/controls/IsError.java",
                "main/src/com/google/refine/grel/controls/IsNonBlank.java",
                "main/src/com/google/refine/grel/controls/IsNotNull.java",
                "main/src/com/google/refine/grel/controls/IsNull.java",
                "main/src/com/google/refine/grel/controls/IsNumeric.java",
                "main/src/com/google/refine/grel/controls/IsTest.java",
                "main/src/com/google/refine/grel/controls/With.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "379a12d3498a0ef4059b13f961846b69bcc6fb56",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540206685,
            "hunks": 3,
            "message": "Jackson deserialization for FillDownOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/cell/FillDownOperation.java b/main/src/com/google/refine/operations/cell/FillDownOperation.java",
                "index 1ecca6345..b1b78b4d6 100644",
                "--- a/main/src/com/google/refine/operations/cell/FillDownOperation.java",
                "+++ b/main/src/com/google/refine/operations/cell/FillDownOperation.java",
                "@@ -39,2 +39,5 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -63,4 +66,7 @@ public class FillDownOperation extends EngineDependentMassCellOperation {",
                "+    @JsonCreator",
                "     public FillDownOperation(",
                "-            EngineConfig engineConfig, ",
                "+            @JsonProperty(\"engineConfig\")",
                "+            EngineConfig engineConfig,",
                "+            @JsonProperty(\"columnName\")",
                "             String columnName"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/cell/FillDownOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8b41c4e08a74dd775ffc3e7e822cdcf3c470431a",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1539553833,
            "hunks": 3,
            "message": "Merge Jsonizable removal with master",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java b/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "index 0e6f65d92..fda3726cf 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "@@ -6,5 +6,3 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "@@ -66,16 +64,2 @@ public class ReconUseValuesAsIdentifiersOperation extends EngineDependentMassCel",
                "-    @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-            throws JSONException {",
                "-        writer.object();",
                "-        writer.key(\"op\"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));",
                "-        writer.key(\"description\"); writer.value(getBriefDescription(null));",
                "-        writer.key(\"engineConfig\"); getEngineConfig().write(writer, options);",
                "-        writer.key(\"columnName\"); writer.value(_columnName);",
                "-        writer.key(\"service\"); writer.value(service);",
                "-        writer.key(\"schemaSpace\"); writer.value(schemaSpace);",
                "-        writer.key(\"identifierSpace\"); writer.value(identifierSpace);",
                "-        writer.endObject();",
                "-    }",
                "-    ",
                "     @Override"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c7c5fd4120815e9672522cf84548da8ade1c8e34",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538674609,
            "hunks": 65,
            "message": "Reorganize imports",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/Engine.java b/main/src/com/google/refine/browsing/Engine.java",
                "index 204e8a11e..6ff493b1c 100644",
                "--- a/main/src/com/google/refine/browsing/Engine.java",
                "+++ b/main/src/com/google/refine/browsing/Engine.java",
                "@@ -45,3 +45,2 @@ import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-import com.fasterxml.jackson.annotation.JsonValue;",
                "diff --git a/main/src/com/google/refine/clustering/binning/BinningClusterer.java b/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "index 589f610ca..b09cd6dcd 100644",
                "--- a/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "+++ b/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "@@ -43,3 +43,2 @@ import java.util.Map;",
                " import java.util.Map.Entry;",
                "-import java.util.Properties;",
                " import java.util.TreeMap;",
                "@@ -47,5 +46,3 @@ import java.util.stream.Collectors;",
                "-import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "diff --git a/main/src/com/google/refine/commands/auth/AuthorizeCommand.java b/main/src/com/google/refine/commands/auth/AuthorizeCommand.java",
                "index 57ecb3f56..1e6f44896 100644",
                "--- a/main/src/com/google/refine/commands/auth/AuthorizeCommand.java",
                "+++ b/main/src/com/google/refine/commands/auth/AuthorizeCommand.java",
                "@@ -44,5 +44,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import oauth.signpost.OAuthConsumer;",
                "-import oauth.signpost.OAuthProvider;",
                "-",
                " import com.google.refine.commands.Command;",
                "@@ -52,2 +49,5 @@ import com.google.refine.oauth.Provider;",
                "+import oauth.signpost.OAuthConsumer;",
                "+import oauth.signpost.OAuthProvider;",
                "+",
                " public class AuthorizeCommand extends Command {",
                "diff --git a/main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java b/main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java",
                "index 355fc1406..d762bd0c3 100644",
                "--- a/main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java",
                "+++ b/main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java",
                "@@ -48,4 +48,4 @@ import com.google.refine.model.Project;",
                " import com.google.refine.operations.cell.MultiValuedCellSplitOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                " import com.google.refine.process.Process;",
                "+import com.google.refine.util.ParsingUtilities;",
                "diff --git a/main/src/com/google/refine/commands/recon/ReconClearOneCellCommand.java b/main/src/com/google/refine/commands/recon/ReconClearOneCellCommand.java",
                "index 39682064e..128c4dbad 100644",
                "--- a/main/src/com/google/refine/commands/recon/ReconClearOneCellCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/ReconClearOneCellCommand.java",
                "@@ -36,3 +36,2 @@ package com.google.refine.commands.recon;",
                " import java.io.IOException;",
                "-import java.util.Properties;",
                "@@ -42,4 +41,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "diff --git a/main/src/com/google/refine/commands/recon/ReconJudgeOneCellCommand.java b/main/src/com/google/refine/commands/recon/ReconJudgeOneCellCommand.java",
                "index aceaf4e57..778ec2cd4 100644",
                "--- a/main/src/com/google/refine/commands/recon/ReconJudgeOneCellCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/ReconJudgeOneCellCommand.java",
                "@@ -36,3 +36,2 @@ package com.google.refine.commands.recon;",
                " import java.io.IOException;",
                "-import java.util.Properties;",
                "@@ -42,4 +41,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.commands.Command;",
                "diff --git a/main/src/com/google/refine/exporters/CsvExporter.java b/main/src/com/google/refine/exporters/CsvExporter.java",
                "index 50c717e11..55fa25aff 100644",
                "--- a/main/src/com/google/refine/exporters/CsvExporter.java",
                "+++ b/main/src/com/google/refine/exporters/CsvExporter.java",
                "@@ -45,4 +45,2 @@ import org.slf4j.LoggerFactory;",
                "-import au.com.bytecode.opencsv.CSVWriter;",
                "-",
                " import com.google.refine.browsing.Engine;",
                "@@ -52,2 +50,4 @@ import com.google.refine.util.ParsingUtilities;",
                "+import au.com.bytecode.opencsv.CSVWriter;",
                "+",
                " public class CsvExporter implements WriterExporter{",
                "diff --git a/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java b/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "index eb19a68e7..00c203ad6 100644",
                "--- a/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "+++ b/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "@@ -35,4 +35,2 @@ package com.google.refine.exporters;",
                "-import java.net.MalformedURLException;",
                "-import java.net.URL;",
                " import java.text.DateFormat;",
                "diff --git a/main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java b/main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java",
                "index 1c7efe69f..2abedf0f5 100755",
                "--- a/main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java",
                "+++ b/main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java",
                "@@ -37,3 +37,2 @@ import java.util.stream.Collectors;",
                "-import org.apache.commons.lang3.StringUtils;",
                " import org.apache.commons.lang3.math.NumberUtils;",
                "diff --git a/main/src/com/google/refine/expr/functions/date/Now.java b/main/src/com/google/refine/expr/functions/date/Now.java",
                "index ba0d88c63..b72d18b02 100644",
                "--- a/main/src/com/google/refine/expr/functions/date/Now.java",
                "+++ b/main/src/com/google/refine/expr/functions/date/Now.java",
                "@@ -39,5 +39,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.grel.Function;",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Trim.java b/main/src/com/google/refine/expr/functions/strings/Trim.java",
                "index 6d75a74ca..68e6efd10 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Trim.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Trim.java",
                "@@ -38,2 +38,3 @@ import java.util.Properties;",
                " import com.google.common.base.CharMatcher;",
                "+",
                " import com.google.refine.expr.EvalError;",
                "diff --git a/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java b/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "index 13baf2021..9677106ea 100644",
                "--- a/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "+++ b/main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "@@ -40,3 +40,2 @@ import org.json.JSONObject;",
                "-import com.google.refine.expr.EvalError;",
                " import com.google.refine.expr.Evaluable;",
                "diff --git a/main/src/com/google/refine/grel/controls/Filter.java b/main/src/com/google/refine/grel/controls/Filter.java",
                "index ebce67b6f..a2bb4000d 100644",
                "--- a/main/src/com/google/refine/grel/controls/Filter.java",
                "+++ b/main/src/com/google/refine/grel/controls/Filter.java",
                "@@ -42,3 +42,2 @@ import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "diff --git a/main/src/com/google/refine/grel/controls/ForEachIndex.java b/main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "index c673d4916..5535a19f6 100644",
                "--- a/main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "+++ b/main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "@@ -41,3 +41,2 @@ import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "diff --git a/main/src/com/google/refine/grel/controls/ForNonBlank.java b/main/src/com/google/refine/grel/controls/ForNonBlank.java",
                "index 15f0da19b..640a2e889 100644",
                "--- a/main/src/com/google/refine/grel/controls/ForNonBlank.java",
                "+++ b/main/src/com/google/refine/grel/controls/ForNonBlank.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.Evaluable;",
                "diff --git a/main/src/com/google/refine/grel/controls/ForRange.java b/main/src/com/google/refine/grel/controls/ForRange.java",
                "index 61e181b64..d69c37d1e 100644",
                "--- a/main/src/com/google/refine/grel/controls/ForRange.java",
                "+++ b/main/src/com/google/refine/grel/controls/ForRange.java",
                "@@ -39,5 +39,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "diff --git a/main/src/com/google/refine/grel/controls/If.java b/main/src/com/google/refine/grel/controls/If.java",
                "index d4d824b93..f863d8d9f 100644",
                "--- a/main/src/com/google/refine/grel/controls/If.java",
                "+++ b/main/src/com/google/refine/grel/controls/If.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.Evaluable;",
                "diff --git a/main/src/com/google/refine/importers/ExcelImporter.java b/main/src/com/google/refine/importers/ExcelImporter.java",
                "index f4ee09048..78d912084 100644",
                "--- a/main/src/com/google/refine/importers/ExcelImporter.java",
                "+++ b/main/src/com/google/refine/importers/ExcelImporter.java",
                "@@ -68,4 +68,4 @@ import com.google.refine.model.Recon;",
                " import com.google.refine.model.Recon.Judgment;",
                "-import com.google.refine.model.metadata.ProjectMetadata;",
                " import com.google.refine.model.ReconCandidate;",
                "+import com.google.refine.model.metadata.ProjectMetadata;",
                " import com.google.refine.util.JSONUtilities;",
                "diff --git a/main/src/com/google/refine/importers/JsonImporter.java b/main/src/com/google/refine/importers/JsonImporter.java",
                "index 2a0a9a74c..4c7661549 100644",
                "--- a/main/src/com/google/refine/importers/JsonImporter.java",
                "+++ b/main/src/com/google/refine/importers/JsonImporter.java",
                "@@ -41,2 +41,7 @@ import java.util.List;",
                "+import org.json.JSONArray;",
                "+import org.json.JSONObject;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                " import com.fasterxml.jackson.core.JsonFactory;",
                "@@ -46,6 +51,2 @@ import com.fasterxml.jackson.core.JsonParser.NumberType;",
                " import com.fasterxml.jackson.core.JsonToken;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONObject;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "diff --git a/main/src/com/google/refine/importers/MarcImporter.java b/main/src/com/google/refine/importers/MarcImporter.java",
                "index 5d561483e..4c1c35717 100644",
                "--- a/main/src/com/google/refine/importers/MarcImporter.java",
                "+++ b/main/src/com/google/refine/importers/MarcImporter.java",
                "@@ -43,3 +43,2 @@ import java.io.OutputStream;",
                " import org.json.JSONObject;",
                "-import org.marc4j.MarcException;",
                " import org.marc4j.MarcPermissiveStreamReader;",
                "diff --git a/main/src/com/google/refine/importers/OdsImporter.java b/main/src/com/google/refine/importers/OdsImporter.java",
                "index f35ff2cd3..a03f3ff66 100644",
                "--- a/main/src/com/google/refine/importers/OdsImporter.java",
                "+++ b/main/src/com/google/refine/importers/OdsImporter.java",
                "@@ -63,4 +63,4 @@ import com.google.refine.model.Recon;",
                " import com.google.refine.model.Recon.Judgment;",
                "-import com.google.refine.model.metadata.ProjectMetadata;",
                " import com.google.refine.model.ReconCandidate;",
                "+import com.google.refine.model.metadata.ProjectMetadata;",
                " import com.google.refine.util.JSONUtilities;",
                "diff --git a/main/src/com/google/refine/importers/SeparatorBasedImporter.java b/main/src/com/google/refine/importers/SeparatorBasedImporter.java",
                "index 2c483019e..80920aaae 100644",
                "--- a/main/src/com/google/refine/importers/SeparatorBasedImporter.java",
                "+++ b/main/src/com/google/refine/importers/SeparatorBasedImporter.java",
                "@@ -52,8 +52,4 @@ import java.util.Map;",
                " import org.apache.commons.lang3.StringEscapeUtils;",
                "-import org.apache.commons.lang3.StringUtils;",
                "-",
                " import org.json.JSONObject;",
                "-import au.com.bytecode.opencsv.CSVParser;",
                "-",
                " import com.google.refine.importing.ImportingJob;",
                "@@ -64,2 +60,4 @@ import com.google.refine.util.JSONUtilities;",
                "+import au.com.bytecode.opencsv.CSVParser;",
                "+",
                " public class SeparatorBasedImporter extends TabularImportingParserBase {",
                "diff --git a/main/src/com/google/refine/importers/WikitextImporter.java b/main/src/com/google/refine/importers/WikitextImporter.java",
                "index 2fbb6ad23..8bc509759 100644",
                "--- a/main/src/com/google/refine/importers/WikitextImporter.java",
                "+++ b/main/src/com/google/refine/importers/WikitextImporter.java",
                "@@ -12,13 +12,26 @@ import java.util.regex.Pattern;",
                " import org.json.JSONObject;",
                "-import com.google.common.io.CharStreams;",
                "-import de.fau.cs.osr.ptk.common.AstVisitor;",
                "-",
                " import org.sweble.wikitext.parser.ParserConfig;",
                "-import org.sweble.wikitext.parser.utils.SimpleParserConfig;",
                "+import org.sweble.wikitext.parser.WikitextEncodingValidator;",
                " import org.sweble.wikitext.parser.WikitextParser;",
                "+import org.sweble.wikitext.parser.WikitextPreprocessor;",
                "+import org.sweble.wikitext.parser.encval.ValidatedWikitext;",
                "+import org.sweble.wikitext.parser.nodes.WtBody;",
                " import org.sweble.wikitext.parser.nodes.WtBold;",
                "+import org.sweble.wikitext.parser.nodes.WtExternalLink;",
                "+import org.sweble.wikitext.parser.nodes.WtImageLink;",
                "+import org.sweble.wikitext.parser.nodes.WtInternalLink;",
                " import org.sweble.wikitext.parser.nodes.WtItalics;",
                "+import org.sweble.wikitext.parser.nodes.WtLinkTitle;",
                "+import org.sweble.wikitext.parser.nodes.WtLinkTitle.WtNoLinkTitle;",
                "+import org.sweble.wikitext.parser.nodes.WtName;",
                " import org.sweble.wikitext.parser.nodes.WtNewline;",
                " import org.sweble.wikitext.parser.nodes.WtNode;",
                "+import org.sweble.wikitext.parser.nodes.WtParsedWikitextPage;",
                "+import org.sweble.wikitext.parser.nodes.WtPreproWikitextPage;",
                " import org.sweble.wikitext.parser.nodes.WtSection;",
                "+import org.sweble.wikitext.parser.nodes.WtTable;",
                "+import org.sweble.wikitext.parser.nodes.WtTableCaption;",
                "+import org.sweble.wikitext.parser.nodes.WtTableCell;",
                "+import org.sweble.wikitext.parser.nodes.WtTableHeader;",
                "+import org.sweble.wikitext.parser.nodes.WtTableRow;",
                " import org.sweble.wikitext.parser.nodes.WtTagExtension;",
                "@@ -29,19 +42,6 @@ import org.sweble.wikitext.parser.nodes.WtTemplateArguments;",
                " import org.sweble.wikitext.parser.nodes.WtText;",
                "-import org.sweble.wikitext.parser.nodes.WtInternalLink;",
                "-import org.sweble.wikitext.parser.nodes.WtExternalLink;",
                "-import org.sweble.wikitext.parser.nodes.WtImageLink;",
                "-import org.sweble.wikitext.parser.nodes.WtLinkTitle;",
                "-import org.sweble.wikitext.parser.nodes.WtLinkTitle.WtNoLinkTitle;",
                " import org.sweble.wikitext.parser.nodes.WtUrl;",
                "-import org.sweble.wikitext.parser.nodes.WtTable;",
                "-import org.sweble.wikitext.parser.nodes.WtTableHeader;",
                "-import org.sweble.wikitext.parser.nodes.WtTableRow;",
                "-import org.sweble.wikitext.parser.nodes.WtTableCell;",
                "-import org.sweble.wikitext.parser.nodes.WtTableCaption;",
                "-import org.sweble.wikitext.parser.nodes.WtXmlAttributes;",
                "-import org.sweble.wikitext.parser.nodes.WtXmlAttribute;",
                "-import org.sweble.wikitext.parser.nodes.WtName;",
                " import org.sweble.wikitext.parser.nodes.WtValue;",
                "-import org.sweble.wikitext.parser.nodes.WtParsedWikitextPage;",
                "-import org.sweble.wikitext.parser.nodes.WtBody;",
                "+import org.sweble.wikitext.parser.nodes.WtXmlAttribute;",
                "+import org.sweble.wikitext.parser.nodes.WtXmlAttributes;",
                " import org.sweble.wikitext.parser.nodes.WtXmlEmptyTag;",
                "@@ -49,11 +49,7 @@ import org.sweble.wikitext.parser.nodes.WtXmlEndTag;",
                " import org.sweble.wikitext.parser.nodes.WtXmlStartTag;",
                "-",
                "-import org.sweble.wikitext.parser.WikitextEncodingValidator;",
                "-import org.sweble.wikitext.parser.WikitextPreprocessor;",
                "-import org.sweble.wikitext.parser.encval.ValidatedWikitext;",
                "-import org.sweble.wikitext.parser.nodes.WtPreproWikitextPage;",
                " import org.sweble.wikitext.parser.parser.PreprocessorToParserTransformer;",
                " import org.sweble.wikitext.parser.preprocessor.PreprocessedWikitext;",
                "+import org.sweble.wikitext.parser.utils.SimpleParserConfig;",
                "-import xtc.parser.ParseException;",
                "+import com.google.common.io.CharStreams;",
                "@@ -66,6 +62,9 @@ import com.google.refine.model.ReconStats;",
                " import com.google.refine.model.metadata.ProjectMetadata;",
                "+import com.google.refine.model.recon.ReconJob;",
                "+import com.google.refine.model.recon.StandardReconConfig;",
                " import com.google.refine.model.recon.StandardReconConfig.ColumnDetail;",
                " import com.google.refine.util.JSONUtilities;",
                "-import com.google.refine.model.recon.StandardReconConfig;",
                "-import com.google.refine.model.recon.ReconJob;",
                "+",
                "+import de.fau.cs.osr.ptk.common.AstVisitor;",
                "+import xtc.parser.ParseException;",
                "diff --git a/main/src/com/google/refine/importing/UrlRewriter.java b/main/src/com/google/refine/importing/UrlRewriter.java",
                "index d7332750e..7563fe1cc 100644",
                "--- a/main/src/com/google/refine/importing/UrlRewriter.java",
                "+++ b/main/src/com/google/refine/importing/UrlRewriter.java",
                "@@ -39,2 +39,4 @@ import java.util.List;",
                "+import com.google.refine.model.metadata.DataPackageUrlRewriter;",
                "+",
                " /**",
                "diff --git a/main/src/com/google/refine/model/changes/DataExtensionChange.java b/main/src/com/google/refine/model/changes/DataExtensionChange.java",
                "index 31348540a..ce3bccc96 100644",
                "--- a/main/src/com/google/refine/model/changes/DataExtensionChange.java",
                "+++ b/main/src/com/google/refine/model/changes/DataExtensionChange.java",
                "@@ -45,9 +45,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "-",
                "-import com.google.refine.model.ReconType;",
                "-import com.google.refine.model.recon.DataExtensionReconConfig;",
                "-import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtension;",
                " import com.google.refine.history.Change;",
                "@@ -61,3 +54,6 @@ import com.google.refine.model.ReconCandidate;",
                " import com.google.refine.model.ReconStats;",
                "+import com.google.refine.model.ReconType;",
                " import com.google.refine.model.Row;",
                "+import com.google.refine.model.recon.DataExtensionReconConfig;",
                "+import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtension;",
                " import com.google.refine.util.ParsingUtilities;",
                "diff --git a/main/src/com/google/refine/model/changes/MassChange.java b/main/src/com/google/refine/model/changes/MassChange.java",
                "index cdef9f84a..efb6feb81 100644",
                "--- a/main/src/com/google/refine/model/changes/MassChange.java",
                "+++ b/main/src/com/google/refine/model/changes/MassChange.java",
                "@@ -36,4 +36,2 @@ package com.google.refine.model.changes;",
                " import java.io.IOException;",
                "-import com.google.common.collect.Lists;",
                "- ",
                " import java.io.LineNumberReader;",
                "@@ -44,2 +42,4 @@ import java.util.Properties;",
                "+import com.google.common.collect.Lists;",
                "+",
                " import com.google.refine.history.Change;",
                "diff --git a/main/src/com/google/refine/model/changes/MassReconChange.java b/main/src/com/google/refine/model/changes/MassReconChange.java",
                "index 0e4df55bb..41869af00 100644",
                "--- a/main/src/com/google/refine/model/changes/MassReconChange.java",
                "+++ b/main/src/com/google/refine/model/changes/MassReconChange.java",
                "@@ -43,5 +43,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.ProjectManager;",
                "diff --git a/main/src/com/google/refine/model/metadata/ProjectMetadata.java b/main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "index d81c1e611..0bf01d540 100644",
                "--- a/main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "+++ b/main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "@@ -36,4 +36,2 @@ package com.google.refine.model.metadata;",
                " import java.io.File;",
                "-import java.io.FileNotFoundException;",
                "-import java.io.FileOutputStream;",
                " import java.io.IOException;",
                "@@ -41,6 +39,3 @@ import java.io.InputStream;",
                " import java.io.InputStreamReader;",
                "-import java.io.OutputStreamWriter;",
                " import java.io.Serializable;",
                "-import java.io.StringWriter;",
                "-import java.io.Writer;",
                " import java.lang.reflect.InvocationTargetException;",
                "@@ -52,3 +47,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Properties;",
                "@@ -62,3 +56,2 @@ import org.json.JSONObject;",
                " import org.json.JSONTokener;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -66,4 +59,4 @@ import org.slf4j.LoggerFactory;",
                "-import com.fasterxml.jackson.annotation.JsonIgnore;",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -72,3 +65,2 @@ import com.fasterxml.jackson.annotation.JsonUnwrapped;",
                " import com.fasterxml.jackson.annotation.JsonView;",
                "-import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "diff --git a/main/src/com/google/refine/oauth/Credentials.java b/main/src/com/google/refine/oauth/Credentials.java",
                "index d28cdd2bf..7c4aa6381 100644",
                "--- a/main/src/com/google/refine/oauth/Credentials.java",
                "+++ b/main/src/com/google/refine/oauth/Credentials.java",
                "@@ -39,2 +39,4 @@ import javax.servlet.http.HttpServletResponse;",
                "+import com.google.refine.util.CookiesUtilities;",
                "+",
                " import oauth.signpost.OAuth;",
                "@@ -42,4 +44,2 @@ import oauth.signpost.http.HttpParameters;",
                "-import com.google.refine.util.CookiesUtilities;",
                "-",
                " public class Credentials {"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/Engine.java",
                "main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "main/src/com/google/refine/commands/auth/AuthorizeCommand.java",
                "main/src/com/google/refine/commands/cell/SplitMultiValueCellsCommand.java",
                "main/src/com/google/refine/commands/recon/ReconClearOneCellCommand.java",
                "main/src/com/google/refine/commands/recon/ReconJudgeOneCellCommand.java",
                "main/src/com/google/refine/exporters/CsvExporter.java",
                "main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java",
                "main/src/com/google/refine/expr/functions/date/Now.java",
                "main/src/com/google/refine/expr/functions/strings/Trim.java",
                "main/src/com/google/refine/grel/ast/FieldAccessorExpr.java",
                "main/src/com/google/refine/grel/controls/Filter.java",
                "main/src/com/google/refine/grel/controls/ForEachIndex.java",
                "main/src/com/google/refine/grel/controls/ForNonBlank.java",
                "main/src/com/google/refine/grel/controls/ForRange.java",
                "main/src/com/google/refine/grel/controls/If.java",
                "main/src/com/google/refine/importers/ExcelImporter.java",
                "main/src/com/google/refine/importers/JsonImporter.java",
                "main/src/com/google/refine/importers/MarcImporter.java",
                "main/src/com/google/refine/importers/OdsImporter.java",
                "main/src/com/google/refine/importers/SeparatorBasedImporter.java",
                "main/src/com/google/refine/importers/WikitextImporter.java",
                "main/src/com/google/refine/importing/UrlRewriter.java",
                "main/src/com/google/refine/model/changes/DataExtensionChange.java",
                "main/src/com/google/refine/model/changes/MassChange.java",
                "main/src/com/google/refine/model/changes/MassReconChange.java",
                "main/src/com/google/refine/model/metadata/ProjectMetadata.java",
                "main/src/com/google/refine/oauth/Credentials.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "700850a5f79f785703823b6480d093925941e14c",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544353391,
            "hunks": 2,
            "message": "Add Common transform which replaces smart quotes with ascii equivalent",
            "diff": [
                "diff --git a/main/webapp/modules/core/langs/translation-en.json b/main/webapp/modules/core/langs/translation-en.json",
                "index 95cf95ff5..79c8ba7ba 100644",
                "--- a/main/webapp/modules/core/langs/translation-en.json",
                "+++ b/main/webapp/modules/core/langs/translation-en.json",
                "@@ -606,2 +606,3 @@",
                "     \"core-views/unescape-html\": \"Unescape HTML entities\",",
                "+    \"core-views/replace-smartquotes\": \"Replace Smart quotes with ascii\",",
                "     \"core-views/titlecase\": \"To titlecase\",",
                "diff --git a/main/webapp/modules/core/scripts/views/data-table/menu-edit-cells.js b/main/webapp/modules/core/scripts/views/data-table/menu-edit-cells.js",
                "index 469f89443..3bfb5bb6e 100644",
                "--- a/main/webapp/modules/core/scripts/views/data-table/menu-edit-cells.js",
                "+++ b/main/webapp/modules/core/scripts/views/data-table/menu-edit-cells.js",
                "@@ -386,2 +386,7 @@ DataTableColumnHeaderUI.extendMenu(function(column, columnHeaderUI, menu) {",
                "         },",
                "+        {",
                "+          id: \"core/replace-smartquotes\",",
                "+          label: $.i18n('core-views/replace-smartquotes'),",
                "+          click: function() { doTextTransform(\"value.replace(/[\\u2018\\u2019\\u201A\\u201B\\u2039\\u203A\\u201A]/,\\\"\\\\\\'\\\").replace(/[\\u201C\\u201D\\u00AB\\u00BB\\u201E]/,\\\"\\\\\\\"\\\")\", \"keep-original\", false, \"\"); }",
                "+        },",
                "         {},"
            ],
            "changed_files": [
                "main/webapp/modules/core/langs/translation-en.json",
                "main/webapp/modules/core/scripts/views/data-table/menu-edit-cells.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ccc8f6470e8aec2c86701b831f8cb2a27d2252b6",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540136255,
            "hunks": 14,
            "message": "Jackson deserialization for Column",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/Column.java b/main/src/com/google/refine/model/Column.java",
                "index 171b7eda5..3fee69f4e 100644",
                "--- a/main/src/com/google/refine/model/Column.java",
                "+++ b/main/src/com/google/refine/model/Column.java",
                "@@ -41,5 +41,3 @@ import java.util.Map;",
                "-import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                "@@ -47,2 +45,4 @@ import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.core.JsonProcessingException;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "@@ -50,3 +50,2 @@ import com.google.refine.InterProjectModel;",
                " import com.google.refine.model.recon.ReconConfig;",
                "-import com.google.refine.util.JSONUtilities;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -74,3 +73,8 @@ public class Column  {",
                "-    public Column(int cellIndex, String originalName) {",
                "+    @JsonCreator",
                "+    public Column(",
                "+            @JsonProperty(\"cellIndex\")",
                "+            int cellIndex,",
                "+            @JsonProperty(\"originalName\")",
                "+            String originalName) {",
                "         _cellIndex = cellIndex;",
                "@@ -89,2 +93,3 @@ public class Column  {",
                "+    @JsonProperty(\"name\")",
                "     public void setName(String name) {",
                "@@ -98,2 +103,3 @@ public class Column  {",
                "+    @JsonProperty(\"reconConfig\")",
                "     public void setReconConfig(ReconConfig config) {",
                "@@ -108,2 +114,3 @@ public class Column  {",
                "+    @JsonProperty(\"reconStats\")",
                "     public void setReconStats(ReconStats stats) {",
                "@@ -151,3 +158,3 @@ public class Column  {",
                "-    ",
                "+    @JsonProperty(\"type\")",
                "     public void setType(String type) {",
                "@@ -162,3 +169,3 @@ public class Column  {",
                "-    ",
                "+    @JsonProperty(\"format\")",
                "     public void setFormat(String format) {",
                "@@ -173,3 +180,3 @@ public class Column  {",
                "-    ",
                "+    @JsonProperty(\"title\")",
                "     public void setTitle(String title) {",
                "@@ -177,3 +184,2 @@ public class Column  {",
                "     }",
                "-",
                "@@ -184,3 +190,3 @@ public class Column  {",
                "-    ",
                "+    @JsonProperty(\"description\")",
                "     public void setDescription(String description) {",
                "@@ -191,3 +197,17 @@ public class Column  {",
                "     public String getConstraintsString() {",
                "-        return (new JSONObject(constraints)).toString();",
                "+        try {",
                "+            return ParsingUtilities.mapper.writeValueAsString(constraints);",
                "+        } catch (JsonProcessingException e) {",
                "+            e.printStackTrace();",
                "+            return \"{}\";",
                "+        }",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"constraints\")",
                "+    public void setConstraintsJson(String json) {",
                "+        try {",
                "+            setConstraints(ParsingUtilities.mapper.readValue(json, new TypeReference<Map<String,Object>>() {}));",
                "+        } catch (IOException e) {",
                "+            e.printStackTrace();",
                "+        }",
                "     }",
                "@@ -212,22 +232,3 @@ public class Column  {",
                "     static public Column load(String s) throws Exception {",
                "-        JSONObject obj = ParsingUtilities.evaluateJsonStringToObject(s);",
                "-        Column column = new Column(obj.getInt(\"cellIndex\"), obj.getString(\"originalName\"));",
                "-        ",
                "-        column._name = obj.getString(\"name\");",
                "-        column.type = JSONUtilities.getString(obj, Field.JSON_KEY_TYPE, StringUtils.EMPTY);",
                "-        column.format = JSONUtilities.getString(obj, Field.JSON_KEY_FORMAT, StringUtils.EMPTY);",
                "-        column.title = JSONUtilities.getString(obj, Field.JSON_KEY_TITLE, StringUtils.EMPTY);",
                "-        column.description = JSONUtilities.getString(obj, Field.JSON_KEY_DESCRIPTION, StringUtils.EMPTY);",
                "-        if (obj.has(Field.JSON_KEY_CONSTRAINTS)) {",
                "-            column.constraints = new JSONObject(obj.getString(Field.JSON_KEY_CONSTRAINTS)).toMap();",
                "-        }",
                "-              ",
                "-        if (obj.has(\"reconConfig\")) {",
                "-            column._reconConfig = ReconConfig.reconstruct(obj.getJSONObject(\"reconConfig\"));",
                "-        }",
                "-        if (obj.has(\"reconStats\")) {",
                "-            column._reconStats = ReconStats.load(obj.getJSONObject(\"reconStats\"));",
                "-        }",
                "-        ",
                "-        return column;",
                "+        return ParsingUtilities.mapper.readValue(s, Column.class);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/Column.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "75b642f9bf14763c74af02d0a9f9db6a7b012857",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1539338930,
            "hunks": 11,
            "message": "Fix serialization of local dates",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/metadata/AbstractMetadata.java b/main/src/com/google/refine/model/metadata/AbstractMetadata.java",
                "index 43a5ac9b5..5433cdbd0 100644",
                "--- a/main/src/com/google/refine/model/metadata/AbstractMetadata.java",
                "+++ b/main/src/com/google/refine/model/metadata/AbstractMetadata.java",
                "@@ -8,6 +8,12 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " public abstract class AbstractMetadata implements IMetadata {",
                "+    @JsonIgnore",
                "     private MetadataFormat formatName = MetadataFormat.UNKNOWN;",
                "+    @JsonIgnore",
                "     protected LocalDateTime written = null;",
                "+    @JsonProperty(\"modified\")",
                "     protected LocalDateTime           _modified;",
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index 06a605729..f4426a989 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -61,4 +61,2 @@ import org.json.JSONTokener;",
                "-import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;",
                "-import com.fasterxml.jackson.annotation.PropertyAccessor;",
                " import com.fasterxml.jackson.core.JsonFactory;",
                "@@ -82,7 +80,6 @@ public class ParsingUtilities {",
                "         module.addSerializer(double.class, new SerializationFilters.DoubleSerializer());",
                "-        module.addSerializer(OffsetDateTime.class, new SerializationFilters.DateSerializer());",
                "-",
                "+        module.addSerializer(OffsetDateTime.class, new SerializationFilters.OffsetDateSerializer());",
                "+        module.addSerializer(LocalDateTime.class, new SerializationFilters.LocalDateSerializer());",
                "         mapper.registerModule(module);",
                "-       // mapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE);",
                "         mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);",
                "diff --git a/main/src/com/google/refine/util/SerializationFilters.java b/main/src/com/google/refine/util/SerializationFilters.java",
                "index 984f2ca96..4c937c25f 100644",
                "--- a/main/src/com/google/refine/util/SerializationFilters.java",
                "+++ b/main/src/com/google/refine/util/SerializationFilters.java",
                "@@ -3,2 +3,3 @@ package com.google.refine.util;",
                " import java.io.IOException;",
                "+import java.time.LocalDateTime;",
                " import java.time.OffsetDateTime;",
                "@@ -92,6 +93,6 @@ public class SerializationFilters {",
                "      */",
                "-    public static class DateSerializer extends StdSerializer<OffsetDateTime> {",
                "+    public static class OffsetDateSerializer extends StdSerializer<OffsetDateTime> {",
                "         private static final long serialVersionUID = 93872874L;",
                "-        public DateSerializer() {",
                "+        public OffsetDateSerializer() {",
                "             super(OffsetDateTime.class);",
                "@@ -105,2 +106,19 @@ public class SerializationFilters {",
                "     }",
                "+    ",
                "+    /**",
                "+     * Serialize dates by ISO format.",
                "+     */",
                "+    public static class LocalDateSerializer extends StdSerializer<LocalDateTime> {",
                "+        private static final long serialVersionUID = 93872874L;",
                "+",
                "+        public LocalDateSerializer() {",
                "+            super(LocalDateTime.class);",
                "+        }",
                "+",
                "+        @Override",
                "+        public void serialize(LocalDateTime arg0, JsonGenerator gen, SerializerProvider s)",
                "+                throws IOException {",
                "+            gen.writeString(ParsingUtilities.localDateToString(arg0));",
                "+        }       ",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/metadata/AbstractMetadata.java",
                "main/src/com/google/refine/util/ParsingUtilities.java",
                "main/src/com/google/refine/util/SerializationFilters.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bc6f1b0146ad35744b69e56ee5fab615f6998158",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1539284261,
            "hunks": 11,
            "message": "Fix failing tests after JSONWriter replacement",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/Command.java b/main/src/com/google/refine/commands/Command.java",
                "index 680b4daa7..f60dc15cb 100644",
                "--- a/main/src/com/google/refine/commands/Command.java",
                "+++ b/main/src/com/google/refine/commands/Command.java",
                "@@ -350,8 +350,2 @@ public abstract class Command {",
                "-            Writer w = response.getWriter();",
                "-            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "-            writer.writeStartObject();",
                "-            writer.writeStringField(\"code\", \"error\");   ",
                "-            writer.writeStringField(\"message\", e.getMessage());",
                "-",
                "             StringWriter sw = new StringWriter();",
                "@@ -361,3 +355,8 @@ public abstract class Command {",
                "             sw.flush();",
                "-",
                "+            ",
                "+            Writer w = response.getWriter();",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "+            writer.writeStartObject();",
                "+            writer.writeStringField(\"code\", \"error\");   ",
                "+            writer.writeStringField(\"message\", e.getMessage());",
                "             writer.writeStringField(\"stack\", sw.toString());",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/EngineTests.java b/main/tests/server/src/com/google/refine/tests/browsing/EngineTests.java",
                "index e997d1274..e6d875452 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/EngineTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/EngineTests.java",
                "@@ -15,3 +15,3 @@ public class EngineTests {",
                "         Engine engine = new Engine(project);",
                "-        TestUtils.isSerializedTo(engine, \"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\");",
                "+        TestUtils.isSerializedTo(engine, \"{\\\"engine-mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\");",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/util/CancelProcessesCommandTests.java b/main/tests/server/src/com/google/refine/tests/commands/util/CancelProcessesCommandTests.java",
                "index 350d45a9b..a1ed70c2a 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/commands/util/CancelProcessesCommandTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/util/CancelProcessesCommandTests.java",
                "@@ -43,2 +43,3 @@ import java.io.IOException;",
                " import java.io.PrintWriter;",
                "+import java.io.StringWriter;",
                "@@ -60,2 +61,3 @@ import com.google.refine.process.ProcessManager;",
                " import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.tests.util.TestUtils;",
                "@@ -82,2 +84,3 @@ public class CancelProcessesCommandTests extends RefineTest {",
                "     ProcessManager processMan = null;",
                "+    StringWriter sw = null;",
                "     PrintWriter pw = null;",
                "@@ -90,3 +93,4 @@ public class CancelProcessesCommandTests extends RefineTest {",
                "         processMan = mock(ProcessManager.class);",
                "-        pw = mock(PrintWriter.class);",
                "+        sw = new StringWriter();",
                "+        pw = new PrintWriter(sw);",
                "@@ -104,3 +108,3 @@ public class CancelProcessesCommandTests extends RefineTest {",
                "         proj = null;",
                "-        pw = null;",
                "+        sw = null;",
                "         request = null;",
                "@@ -188,3 +192,3 @@ public class CancelProcessesCommandTests extends RefineTest {",
                "         }",
                "-        verify(pw, times(1)).write(\"{ \\\"code\\\" : \\\"ok\\\" }\");",
                "+        TestUtils.assertEqualAsJson(\"{ \\\"code\\\" : \\\"ok\\\" }\", sw.toString());",
                "     }",
                "@@ -197,2 +201,7 @@ public class CancelProcessesCommandTests extends RefineTest {",
                "             .thenReturn(null);",
                "+        try {",
                "+            when(response.getWriter()).thenReturn(pw);",
                "+        } catch (IOException e1) {",
                "+            Assert.fail();",
                "+        }",
                "@@ -240,3 +249,3 @@ public class CancelProcessesCommandTests extends RefineTest {",
                "             verify(processMan, times(1)).cancelAll();",
                "-            verify(response, times(3)).setCharacterEncoding(\"UTF-8\");",
                "+            verify(response, times(2)).setCharacterEncoding(\"UTF-8\");",
                "             //omitted other verifications for brevity."
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/Command.java",
                "main/tests/server/src/com/google/refine/tests/browsing/EngineTests.java",
                "main/tests/server/src/com/google/refine/tests/commands/util/CancelProcessesCommandTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "553a73ec407ce95c952ee02e0cbc8b10bb280c94",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538411249,
            "hunks": 41,
            "message": "Refactor expression commands for Jackson serialization",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java b/main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java",
                "index 1c1ef7bc4..18385f579 100644",
                "--- a/main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java",
                "+++ b/main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java",
                "@@ -39,3 +39,5 @@ import java.util.HashSet;",
                " import java.util.List;",
                "+import java.util.Properties;",
                " import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "@@ -45,4 +47,8 @@ import javax.servlet.http.HttpServletResponse;",
                "+import org.json.JSONException;",
                " import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.ProjectManager;",
                "@@ -52,2 +58,48 @@ import com.google.refine.preference.TopList;",
                " public class GetExpressionHistoryCommand extends Command {",
                "+    ",
                "+    public static class ExpressionState implements Jsonizable {",
                "+        @JsonProperty(\"code\")",
                "+        protected String code;",
                "+        @JsonProperty(\"global\")",
                "+        protected boolean global = false;",
                "+        @JsonProperty(\"starred\")",
                "+        protected boolean starred;",
                "+        ",
                "+        protected ExpressionState(String code, boolean starred) {",
                "+            this.code = code;",
                "+            this.starred = starred;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"code\"); writer.value(code);",
                "+            writer.key(\"global\"); writer.value(false);",
                "+            writer.key(\"starred\"); writer.value(starred);",
                "+            writer.endObject();",
                "+        }",
                "+    }",
                "+    ",
                "+    public static class ExpressionsList implements Jsonizable {",
                "+        @JsonProperty(\"expressions\")",
                "+        List<ExpressionState> expressions;",
                "+        ",
                "+        protected ExpressionsList(List<ExpressionState> states) {",
                "+            this.expressions = states;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"expressions\");",
                "+                writer.array();",
                "+                for (ExpressionState e : expressions) {",
                "+                    e.write(writer, options);",
                "+                }",
                "+                writer.endArray();",
                "+            writer.endObject();",
                "+        }",
                "+    }",
                "@@ -62,36 +114,10 @@ public class GetExpressionHistoryCommand extends Command {",
                "         try {",
                "-            List<String> localExpressions = toExpressionList(ProjectManager.singleton.getPreferenceStore().get(\"scripting.expressions\"));",
                "-            localExpressions = localExpressions.size() > 20 ? localExpressions.subList(0, 20) : localExpressions;",
                "-            List<String> globalExpressions = toExpressionList(ProjectManager.singleton.getPreferenceStore().get(\"scripting.expressions\"));",
                "+            List<String> expressions = toExpressionList(ProjectManager.singleton.getPreferenceStore().get(\"scripting.expressions\"));",
                "             Set<String> starredExpressions = new HashSet<String>(((TopList)ProjectManager.singleton.getPreferenceStore().get(\"scripting.starred-expressions\")).getList());",
                "-            ",
                "-            Set<String> done = new HashSet<String>();",
                "-            ",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            writer.object();",
                "-            writer.key(\"expressions\");",
                "-                writer.array();",
                "-                for (String s : localExpressions) {",
                "-                    writer.object();",
                "-                    writer.key(\"code\"); writer.value(s);",
                "-                    writer.key(\"global\"); writer.value(false);",
                "-                    writer.key(\"starred\"); writer.value(starredExpressions.contains(s));",
                "-                    writer.endObject();",
                "-                    done.add(s);",
                "-                }",
                "-                for (String s : globalExpressions) {",
                "-                    if (!done.contains(s)) {",
                "-                        writer.object();",
                "-                        writer.key(\"code\"); writer.value(s);",
                "-                        writer.key(\"global\"); writer.value(true);",
                "-                        writer.key(\"starred\"); writer.value(starredExpressions.contains(s));",
                "-                        writer.endObject();",
                "-                    }",
                "-                }",
                "-                writer.endArray();",
                "-            writer.endObject();",
                "+            ExpressionsList expressionsList = new ExpressionsList(expressions.stream()",
                "+                    .map(s -> new ExpressionState(s, starredExpressions.contains(s)))",
                "+                    .collect(Collectors.toList()));",
                "+      ",
                "+            respondJSON(response, expressionsList);",
                "         } catch (Exception e) {",
                "diff --git a/main/src/com/google/refine/commands/expr/GetExpressionLanguageInfoCommand.java b/main/src/com/google/refine/commands/expr/GetExpressionLanguageInfoCommand.java",
                "index 13023b561..b5400d909 100644",
                "--- a/main/src/com/google/refine/commands/expr/GetExpressionLanguageInfoCommand.java",
                "+++ b/main/src/com/google/refine/commands/expr/GetExpressionLanguageInfoCommand.java",
                "@@ -36,2 +36,3 @@ package com.google.refine.commands.expr;",
                " import java.io.IOException;",
                "+import java.util.Map;",
                " import java.util.Map.Entry;",
                "@@ -43,4 +44,8 @@ import javax.servlet.http.HttpServletResponse;",
                "+import org.json.JSONException;",
                " import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.commands.Command;",
                "@@ -52,13 +57,17 @@ public class GetExpressionLanguageInfoCommand extends Command {",
                "-    @Override",
                "-    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "-            throws ServletException, IOException {",
                "+    public static class LanguageInfo implements Jsonizable {",
                "-        try {",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            Properties options = new Properties();",
                "-            ",
                "+        @JsonProperty(\"functions\")",
                "+        Map<String, Function> functions;",
                "+        @JsonProperty(\"controls\")",
                "+        Map<String, Control> controls;",
                "+        ",
                "+        public LanguageInfo() {",
                "+            functions = ControlFunctionRegistry.getFunctionMap();",
                "+            controls = ControlFunctionRegistry.getControlMap();",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "             writer.object();",
                "@@ -68,3 +77,3 @@ public class GetExpressionLanguageInfoCommand extends Command {",
                "             {",
                "-                for (Entry<String, Function> entry : ControlFunctionRegistry.getFunctionMapping()) {",
                "+                for (Entry<String, Function> entry : functions.entrySet()) {",
                "                     writer.key(entry.getKey());",
                "@@ -78,3 +87,3 @@ public class GetExpressionLanguageInfoCommand extends Command {",
                "             {",
                "-                for (Entry<String, Control> entry : ControlFunctionRegistry.getControlMapping()) {",
                "+                for (Entry<String, Control> entry : controls.entrySet()) {",
                "                     writer.key(entry.getKey());",
                "@@ -86,2 +95,12 @@ public class GetExpressionLanguageInfoCommand extends Command {",
                "             writer.endObject();",
                "+        }",
                "+        ",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "+            throws ServletException, IOException {",
                "+        ",
                "+        try {",
                "+            respondJSON(response, new LanguageInfo());",
                "         } catch (Exception e) {",
                "diff --git a/main/src/com/google/refine/commands/expr/GetStarredExpressionsCommand.java b/main/src/com/google/refine/commands/expr/GetStarredExpressionsCommand.java",
                "index b489d248b..acad51a5c 100644",
                "--- a/main/src/com/google/refine/commands/expr/GetStarredExpressionsCommand.java",
                "+++ b/main/src/com/google/refine/commands/expr/GetStarredExpressionsCommand.java",
                "@@ -4,2 +4,4 @@ import java.io.IOException;",
                " import java.util.List;",
                "+import java.util.Properties;",
                "+import java.util.stream.Collectors;",
                "@@ -9,4 +11,8 @@ import javax.servlet.http.HttpServletResponse;",
                "+import org.json.JSONException;",
                " import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.ProjectManager;",
                "@@ -18,13 +24,26 @@ public class GetStarredExpressionsCommand extends Command {",
                "-    @Override",
                "-    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "-            throws ServletException, IOException {",
                "-        ",
                "-        try {",
                "-            List<String> starredExpressions = ((TopList)ProjectManager.singleton.getPreferenceStore().get(\"scripting.starred-expressions\")).getList();",
                "-            ",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "+    protected static class Expression implements Jsonizable {",
                "+        @JsonProperty(\"code\")",
                "+        protected String code;",
                "+        protected Expression(String c) {",
                "+            code = c;",
                "+        }",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"code\"); writer.value(code);",
                "+            writer.endObject();",
                "+        }",
                "+    }",
                "+    ",
                "+    protected static class ExpressionList implements Jsonizable {",
                "+        @JsonProperty(\"expressions\")",
                "+        protected List<Expression> expressions;",
                "+        protected ExpressionList(List<Expression> e) {",
                "+            expressions = e;",
                "+        }",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "             writer.object();",
                "@@ -32,6 +51,4 @@ public class GetStarredExpressionsCommand extends Command {",
                "                 writer.array();",
                "-                for (String s : starredExpressions) {",
                "-                    writer.object();",
                "-                    writer.key(\"code\"); writer.value(s);",
                "-                    writer.endObject();",
                "+                for (Expression s : expressions) {",
                "+                    s.write(writer, options);",
                "                 }",
                "@@ -39,2 +56,16 @@ public class GetStarredExpressionsCommand extends Command {",
                "             writer.endObject();",
                "+        }",
                "+    }",
                "+    ",
                "+    public static ExpressionList getExpressionsList() {",
                "+        List<String> starredExpressions = ((TopList)ProjectManager.singleton.getPreferenceStore().get(\"scripting.starred-expressions\")).getList();",
                "+        return new ExpressionList(starredExpressions.stream().map(e -> new Expression(e)).collect(Collectors.toList()));",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "+            throws ServletException, IOException {",
                "+        ",
                "+        try {",
                "+            respondJSON(response, getExpressionsList());",
                "         } catch (Exception e) {",
                "diff --git a/main/src/com/google/refine/commands/expr/LogExpressionCommand.java b/main/src/com/google/refine/commands/expr/LogExpressionCommand.java",
                "index 3723869d8..b5bc0bde1 100644",
                "--- a/main/src/com/google/refine/commands/expr/LogExpressionCommand.java",
                "+++ b/main/src/com/google/refine/commands/expr/LogExpressionCommand.java",
                "@@ -43,3 +43,2 @@ import com.google.refine.ProjectManager;",
                " import com.google.refine.commands.Command;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.preference.TopList;",
                "@@ -53,3 +52,2 @@ public class LogExpressionCommand extends Command {",
                "         try {",
                "-            Project project = getProject(request);",
                "             String expression = request.getParameter(\"expression\");",
                "diff --git a/main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java b/main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java",
                "index 000f33acd..2f5941a6f 100644",
                "--- a/main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java",
                "+++ b/main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java",
                "@@ -38,2 +38,3 @@ import java.io.Serializable;",
                " import java.time.OffsetDateTime;",
                "+import java.util.ArrayList;",
                " import java.util.List;",
                "@@ -50,2 +51,8 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonValue;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.commands.Command;",
                "@@ -66,2 +73,81 @@ public class PreviewExpressionCommand extends Command {",
                "+    protected static interface ExpressionValue extends Jsonizable { }",
                "+    protected static class ErrorMessage implements ExpressionValue {",
                "+        @JsonProperty(\"message\")",
                "+        protected String message;",
                "+        public ErrorMessage(String m) {",
                "+            message = m;",
                "+        }",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"message\"); writer.value(message);",
                "+            writer.endObject();",
                "+        }",
                "+        ",
                "+    }",
                "+    protected static class SuccessfulEvaluation implements ExpressionValue {",
                "+        @JsonValue",
                "+        protected String value;",
                "+        protected SuccessfulEvaluation(String value) {",
                "+            this.value = value;",
                "+        }",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.value(value);",
                "+        }",
                "+        ",
                "+    }",
                "+    ",
                "+    protected static class PreviewResult implements Jsonizable {",
                "+        @JsonProperty(\"code\")",
                "+        protected String code;",
                "+        @JsonProperty(\"message\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        protected String message;",
                "+        @JsonProperty(\"type\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "+        protected String type;",
                "+        @JsonProperty(\"results\")",
                "+        List<ExpressionValue> results; ",
                "+        ",
                "+        public PreviewResult(String code, String message, String type) {",
                "+            this.code = code;",
                "+            this.message = message;",
                "+            this.type = type;",
                "+            this.results = null;",
                "+        }",
                "+",
                "+        public PreviewResult(List<ExpressionValue> evaluated) {",
                "+            this.code = \"ok\";",
                "+            this.message = null;",
                "+            this.type = null;",
                "+            this.results = evaluated;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"code\"); writer.value(code);",
                "+            if(message != null) {",
                "+                writer.key(\"message\"); writer.value(message);",
                "+            }",
                "+            if(type != null) {",
                "+                writer.key(\"type\"); writer.value(type);",
                "+            }",
                "+            if(results != null) {",
                "+                writer.key(\"results\");",
                "+                writer.array();",
                "+                for(ExpressionValue v : results) {",
                "+                    v.write(writer, options);",
                "+                }",
                "+                writer.endArray();",
                "+            }",
                "+            writer.endObject();",
                "+        }",
                "+    }",
                "+    ",
                "     @Override",
                "@@ -79,3 +165,3 @@ public class PreviewExpressionCommand extends Command {",
                "             if (rowIndicesString == null) {",
                "-                respond(response, \"{ \\\"code\\\" : \\\"error\\\", \\\"message\\\" : \\\"No row indices specified\\\" }\");",
                "+                respondJSON(response, new PreviewResult(\"error\", \"No row indices specified\", null));",
                "                 return;",
                "@@ -93,5 +179,2 @@ public class PreviewExpressionCommand extends Command {",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "             JSONArray rowIndices = ParsingUtilities.evaluateJsonStringToArray(rowIndicesString);",
                "@@ -99,5 +182,2 @@ public class PreviewExpressionCommand extends Command {",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            writer.object();",
                "-            ",
                "             try {",
                "@@ -105,5 +185,3 @@ public class PreviewExpressionCommand extends Command {",
                "-                writer.key(\"code\"); writer.value(\"ok\");",
                "-                writer.key(\"results\"); writer.array();",
                "-                ",
                "+                List<ExpressionValue> evaluated = new ArrayList<>();",
                "                 Properties bindings = ExpressionUtils.createBindings(project);",
                "@@ -142,7 +220,5 @@ public class PreviewExpressionCommand extends Command {",
                "                     if (result == null) {",
                "-                        writer.value(null);",
                "+                        evaluated.add(null);",
                "                     } else if (ExpressionUtils.isError(result)) {",
                "-                        writer.object();",
                "-                        writer.key(\"message\"); writer.value(((EvalError) result).message);",
                "-                        writer.endObject();",
                "+                        evaluated.add(new ErrorMessage(((EvalError) result).message));",
                "                     } else {",
                "@@ -152,17 +228,11 @@ public class PreviewExpressionCommand extends Command {",
                "-                        writer.value(sb.toString());",
                "+                        evaluated.add(new SuccessfulEvaluation(sb.toString()));",
                "                     }",
                "                 }",
                "-                writer.endArray();",
                "+                respondJSON(response, new PreviewResult(evaluated));",
                "             } catch (ParsingException e) {",
                "-                writer.key(\"code\"); writer.value(\"error\");",
                "-                writer.key(\"type\"); writer.value(\"parser\");",
                "-                writer.key(\"message\"); writer.value(e.getMessage());",
                "+                respondJSON(response, new PreviewResult(\"error\", e.getMessage(), \"parser\"));",
                "             } catch (Exception e) {",
                "-                writer.key(\"code\"); writer.value(\"error\");",
                "-                writer.key(\"type\"); writer.value(\"other\");",
                "-                writer.key(\"message\"); writer.value(e.getMessage());",
                "+                respondJSON(response, new PreviewResult(\"error\", e.getMessage(), \"other\"));",
                "             }",
                "-            ",
                "-            writer.endObject();",
                "         } catch (Exception e) {",
                "diff --git a/main/src/com/google/refine/commands/expr/ToggleStarredExpressionCommand.java b/main/src/com/google/refine/commands/expr/ToggleStarredExpressionCommand.java",
                "index e61faf11d..65558ccc4 100644",
                "--- a/main/src/com/google/refine/commands/expr/ToggleStarredExpressionCommand.java",
                "+++ b/main/src/com/google/refine/commands/expr/ToggleStarredExpressionCommand.java",
                "@@ -9,4 +9,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.ProjectManager;",
                "@@ -32,17 +30,3 @@ public class ToggleStarredExpressionCommand extends Command {",
                "             try {",
                "-                response.setCharacterEncoding(\"UTF-8\");",
                "-                response.setHeader(\"Content-Type\", \"application/json\");",
                "-",
                "-                JSONWriter writer = new JSONWriter(response.getWriter());",
                "-                writer.object();",
                "-                writer.key(\"expressions\");",
                "-                writer.array();",
                "-                for (String s : starredExpressions) {",
                "-                    writer.object();",
                "-                    writer.key(\"code\");",
                "-                    writer.value(s);",
                "-                    writer.endObject();",
                "-                }",
                "-                writer.endArray();",
                "-                writer.endObject();",
                "+                respondJSON(response, GetStarredExpressionsCommand.getExpressionsList());",
                "             } catch (Exception e) {",
                "diff --git a/main/src/com/google/refine/grel/ControlFunctionRegistry.java b/main/src/com/google/refine/grel/ControlFunctionRegistry.java",
                "index 397bb193d..8745832b9 100644",
                "--- a/main/src/com/google/refine/grel/ControlFunctionRegistry.java",
                "+++ b/main/src/com/google/refine/grel/ControlFunctionRegistry.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.grel;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "@@ -170,2 +171,5 @@ public class ControlFunctionRegistry {",
                "     }",
                "+    static public Map<String,Function> getFunctionMap() {",
                "+        return Collections.unmodifiableMap(s_nameToFunction);",
                "+    }",
                "@@ -180,2 +184,5 @@ public class ControlFunctionRegistry {",
                "     }",
                "+    static public Map<String,Control> getControlMap() {",
                "+        return Collections.unmodifiableMap(s_nameToControl);",
                "+    }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/expr/GetExpressionHistoryCommand.java",
                "main/src/com/google/refine/commands/expr/GetExpressionLanguageInfoCommand.java",
                "main/src/com/google/refine/commands/expr/GetStarredExpressionsCommand.java",
                "main/src/com/google/refine/commands/expr/LogExpressionCommand.java",
                "main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java",
                "main/src/com/google/refine/commands/expr/ToggleStarredExpressionCommand.java",
                "main/src/com/google/refine/grel/ControlFunctionRegistry.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c4429cbdffd1ea3259251dc5cb2c59a9aafe6e15",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540203969,
            "hunks": 5,
            "message": "Jackson deserialization for RowReorderOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/row/RowReorderOperation.java b/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "index 340687732..97c7e3ced 100644",
                "--- a/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "@@ -35,3 +35,4 @@ package com.google.refine.operations.row;",
                "- import java.util.ArrayList;",
                "+ import java.io.IOException;",
                "+import java.util.ArrayList;",
                " import java.util.List;",
                "@@ -40,2 +41,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -55,10 +57,7 @@ import com.google.refine.sorting.SortingRecordVisitor;",
                " import com.google.refine.sorting.SortingRowVisitor;",
                "+import com.google.refine.util.ParsingUtilities;",
                " public class RowReorderOperation extends AbstractOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        String mode = obj.getString(\"mode\");",
                "-        JSONObject sorting = obj.has(\"sorting\") && !obj.isNull(\"sorting\") ?",
                "-                obj.getJSONObject(\"sorting\") : null;",
                "-        SortingConfig config = SortingConfig.reconstruct(sorting);",
                "-        return new RowReorderOperation(Engine.stringToMode(mode), config);",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), RowReorderOperation.class);",
                "     }",
                "@@ -68,3 +67,8 @@ public class RowReorderOperation extends AbstractOperation {",
                "-    public RowReorderOperation(Mode mode, SortingConfig sorting) {",
                "+    @JsonCreator",
                "+    public RowReorderOperation(",
                "+            @JsonProperty(\"mode\")",
                "+            Mode mode,",
                "+            @JsonProperty(\"sorting\")",
                "+            SortingConfig sorting) {",
                "         _mode = mode;"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/row/RowReorderOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2e81c9ff2e5a67937c6dd0557046772a1aca6cb7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543608681,
            "hunks": 17,
            "message": "Remove uses of org.json after merge",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/facets/ListFacet.java b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "index dc0d1eea0..7e240d2fd 100644",
                "--- a/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "@@ -237,66 +237,2 @@ public class ListFacet implements Facet {",
                "     }",
                "-<<<<<<< HEAD",
                "-",
                "-    @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-            throws JSONException {",
                "-        ",
                "-        writer.object();",
                "-        writer.key(\"name\"); writer.value(_config.name);",
                "-        writer.key(\"expression\"); writer.value(_config.expression);",
                "-        writer.key(\"columnName\"); writer.value(_config.columnName);",
                "-        writer.key(\"invert\"); writer.value(_config.invert);",
                "-        ",
                "-        if (_errorMessage != null) {",
                "-            writer.key(\"error\"); writer.value(_errorMessage);",
                "-        } else if (_choices.size() > getLimit()) {",
                "-            writer.key(\"error\"); writer.value(ERR_TOO_MANY_CHOICES);",
                "-            writer.key(\"choiceCount\"); writer.value(_choices.size());",
                "-        } else {",
                "-            writer.key(\"choices\"); writer.array();",
                "-            for (NominalFacetChoice choice : _choices) {",
                "-                choice.write(writer, options);",
                "-            }",
                "-            writer.endArray();",
                "-            if (_config.selectNumber || _numberCount > 0) {",
                "-                writer.key(\"numberChoice\");",
                "-                writer.object();",
                "-                writer.key(\"s\"); writer.value(_config.selectNumber);",
                "-                writer.key(\"c\"); writer.value(_numberCount);",
                "-                writer.endObject();",
                "-            }",
                "-            if (_config.selectDateTime || _datetimeCount > 0) {",
                "-                writer.key(\"datetimeChoice\");",
                "-                writer.object();",
                "-                writer.key(\"s\"); writer.value(_config.selectDateTime);",
                "-                writer.key(\"c\"); writer.value(_datetimeCount);",
                "-                writer.endObject();",
                "-            }",
                "-            if (_config.selectBoolean || _booleanCount > 0) {",
                "-                writer.key(\"booleanChoice\");",
                "-                writer.object();",
                "-                writer.key(\"s\"); writer.value(_config.selectBoolean);",
                "-                writer.key(\"c\"); writer.value(_booleanCount);",
                "-                writer.endObject();",
                "-            }",
                "-            if (!_config.omitBlank && (_config.selectBlank || _blankCount > 0)) {",
                "-                writer.key(\"blankChoice\");",
                "-                writer.object();",
                "-                writer.key(\"s\"); writer.value(_config.selectBlank);",
                "-                writer.key(\"c\"); writer.value(_blankCount);",
                "-                writer.endObject();",
                "-            }",
                "-            if (!_config.omitError && (_config.selectError || _errorCount > 0)) {",
                "-                writer.key(\"errorChoice\");",
                "-                writer.object();",
                "-                writer.key(\"s\"); writer.value(_config.selectError);",
                "-                writer.key(\"c\"); writer.value(_errorCount);",
                "-                writer.endObject();",
                "-            }",
                "-        }",
                "-        ",
                "-        writer.endObject();",
                "-    }",
                "-=======",
                "->>>>>>> Remove Jsonizable interface and write methods",
                "diff --git a/main/src/com/google/refine/commands/project/CreateProjectCommand.java b/main/src/com/google/refine/commands/project/CreateProjectCommand.java",
                "index ac34c5cc7..f5f99dc24 100644",
                "--- a/main/src/com/google/refine/commands/project/CreateProjectCommand.java",
                "+++ b/main/src/com/google/refine/commands/project/CreateProjectCommand.java",
                "@@ -108,3 +108,3 @@ public class CreateProjectCommand extends Command {",
                "             ObjectNode optionObj = null;",
                "-            String optionsString = parameters.getParameter(\"options\");",
                "+            String optionsString = parameters.getProperty(\"options\");",
                "             if (optionsString != null && !optionsString.isEmpty()) {",
                "diff --git a/main/src/com/google/refine/expr/functions/xml/InnerXml.java b/main/src/com/google/refine/expr/functions/xml/InnerXml.java",
                "index a37323c62..3f9860eb7 100644",
                "--- a/main/src/com/google/refine/expr/functions/xml/InnerXml.java",
                "+++ b/main/src/com/google/refine/expr/functions/xml/InnerXml.java",
                "@@ -37,4 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.jsoup.nodes.Element;",
                "@@ -73,10 +71,14 @@ public class InnerXml implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"The innerXml/innerHtml of an XML/HTML element\");",
                "-        writer.key(\"params\"); writer.value(\"Element e\");",
                "-        writer.key(\"returns\"); writer.value(\"String innerXml/innerHtml\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+    \treturn \"The innerXml/innerHtml of an XML/HTML element\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"Element e\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"String innerXml/innerHtml\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/xml/ParseXml.java b/main/src/com/google/refine/expr/functions/xml/ParseXml.java",
                "index 30f47aed8..3c5239402 100644",
                "--- a/main/src/com/google/refine/expr/functions/xml/ParseXml.java",
                "+++ b/main/src/com/google/refine/expr/functions/xml/ParseXml.java",
                "@@ -37,4 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.jsoup.Jsoup;",
                "@@ -71,10 +69,14 @@ public class ParseXml implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Parses a string as XML\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"XML object\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+    \treturn \"Parses a string as XML\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+    \treturn \"XML object\";",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/TextListFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/TextListFacetTests.java",
                "index 14800d7f8..14f82d06b 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/TextListFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/TextListFacetTests.java",
                "@@ -42,4 +42,2 @@ import java.time.format.DateTimeFormatter;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -56,2 +54,3 @@ import com.google.refine.browsing.facets.ListFacet.ListFacetConfig;",
                " import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -81,3 +80,3 @@ public class TextListFacetTests extends RefineTest {",
                "     @BeforeMethod",
                "-    public void setUp() throws JSONException, IOException, ModelException {",
                "+    public void setUp() throws IOException, ModelException {",
                "       project = createProjectWithColumns(projectName, columnName);",
                "@@ -143,4 +142,3 @@ public class TextListFacetTests extends RefineTest {",
                "         //Add the facet to the project and create a row filter",
                "-        ListFacetConfig facetConfig = new ListFacetConfig();",
                "-        facetConfig.initializeFromJSON(new JSONObject(jsonConfig));",
                "+        ListFacetConfig facetConfig = ParsingUtilities.mapper.readValue(jsonConfig, ListFacetConfig.class);",
                "         Facet facet = facetConfig.apply(project);",
                "@@ -206,4 +204,3 @@ public class TextListFacetTests extends RefineTest {",
                "         //Add the facet to the project and create a row filter",
                "-        ListFacetConfig facetConfig = new ListFacetConfig();",
                "-        facetConfig.initializeFromJSON(new JSONObject(jsonConfig));",
                "+        ListFacetConfig facetConfig = ParsingUtilities.mapper.readValue(jsonConfig, ListFacetConfig.class);",
                "         Facet facet = facetConfig.apply(project);",
                "@@ -269,4 +266,3 @@ public class TextListFacetTests extends RefineTest {",
                "         //Add the facet to the project and create a row filter",
                "-        ListFacetConfig facetConfig = new ListFacetConfig();",
                "-        facetConfig.initializeFromJSON(new JSONObject(jsonConfig));",
                "+        ListFacetConfig facetConfig = ParsingUtilities.mapper.readValue(jsonConfig, ListFacetConfig.class);",
                "         Facet facet = facetConfig.apply(project);",
                "@@ -332,4 +328,3 @@ public class TextListFacetTests extends RefineTest {",
                "         //Add the facet to the project and create a row filter",
                "-        ListFacetConfig facetConfig = new ListFacetConfig();",
                "-        facetConfig.initializeFromJSON(new JSONObject(jsonConfig));",
                "+        ListFacetConfig facetConfig = ParsingUtilities.mapper.readValue(jsonConfig, ListFacetConfig.class);",
                "         Facet facet = facetConfig.apply(project);",
                "@@ -395,4 +390,3 @@ public class TextListFacetTests extends RefineTest {",
                "         //Add the facet to the project and create a row filter",
                "-        ListFacetConfig facetConfig = new ListFacetConfig();",
                "-        facetConfig.initializeFromJSON(new JSONObject(jsonConfig));",
                "+        ListFacetConfig facetConfig = ParsingUtilities.mapper.readValue(jsonConfig, ListFacetConfig.class);",
                "         Facet facet = facetConfig.apply(project);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java b/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "index a073c8b10..9f722d8c5 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "@@ -366,3 +366,3 @@ public class SqlExporterTests extends RefineTest {",
                "         String tableName = \"sql_table_test\";",
                "-        JSONObject optionsJson = createOptionsFromProject(tableName, null, null, null, false);",
                "+        ObjectNode optionsJson = createOptionsFromProject(tableName, null, null, null, false);",
                "         optionsJson.put(\"includeStructure\", true);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/functions/xml/SelectXmlTests.java b/main/tests/server/src/com/google/refine/tests/expr/functions/xml/SelectXmlTests.java",
                "index 2bb6459de..a4ed5b467 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/expr/functions/xml/SelectXmlTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/functions/xml/SelectXmlTests.java",
                "@@ -10,3 +10,3 @@ public class SelectXmlTests {",
                "     public void serializeSelectXml() {",
                "-        String json = \"{\\\"description\\\":\\\"Selects an element from an XML or HTML element using selector syntax.\\\",\\\"params\\\":\\\"Element e, String s\\\",\\\"returns\\\":\\\"XML/HTML Elements\\\"}\";",
                "+        String json = \"{\\\"description\\\":\\\"Selects an element from an XML or HTML elementn using selector syntax.\\\",\\\"returns\\\":\\\"HTML Elements\\\",\\\"params\\\":\\\"Element e, String s\\\"}\";",
                "         TestUtils.isSerializedTo(new SelectXml(), json);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/functions/xml/xmlAttrTests.java b/main/tests/server/src/com/google/refine/tests/expr/functions/xml/xmlAttrTests.java",
                "index 2486452c8..9c7e52e1e 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/expr/functions/xml/xmlAttrTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/functions/xml/xmlAttrTests.java",
                "@@ -10,3 +10,3 @@ public class xmlAttrTests {",
                "     public void serializeXmlAttr() {",
                "-        String json = \"{\\\"description\\\":\\\"Selects a value from an attribute on an xml or html Element.\\\",\\\"params\\\":\\\"Element e, String s\\\",\\\"returns\\\":\\\"String attribute Value\\\"}\";",
                "+        String json = \"{\\\"description\\\":\\\"Selects a value from an attribute on an XML or HTML Element\\\",\\\"returns\\\":\\\"String attribute Value\\\",\\\"params\\\":\\\"Element e, String s\\\"}\";",
                "         TestUtils.isSerializedTo(new XmlAttr(), json);"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/facets/ListFacet.java",
                "main/src/com/google/refine/commands/project/CreateProjectCommand.java",
                "main/src/com/google/refine/expr/functions/xml/InnerXml.java",
                "main/src/com/google/refine/expr/functions/xml/ParseXml.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/TextListFacetTests.java",
                "main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "main/tests/server/src/com/google/refine/tests/expr/functions/xml/SelectXmlTests.java",
                "main/tests/server/src/com/google/refine/tests/expr/functions/xml/xmlAttrTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "772ee1ee59b0a9a250cede6ac9ef4b9d3d9de288",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542724975,
            "hunks": 10,
            "message": "Migrate StandardReconConfig to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index 7a7fa453e..d9da627a9 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -50,5 +50,2 @@ import java.util.Set;",
                " import org.apache.commons.lang.StringUtils;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -62,2 +59,5 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.core.JsonProcessingException;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.expr.ExpressionUtils;",
                "@@ -286,3 +286,15 @@ public class StandardReconConfig extends ReconConfig {",
                "         }",
                "-        ",
                "+    }",
                "+    ",
                "+    protected class ReconResult {",
                "+    \t@JsonProperty(\"name\")",
                "+    \tprotected String name;",
                "+    \t@JsonProperty(\"id\")",
                "+    \tprotected String id;",
                "+    \t@JsonProperty(\"types\")",
                "+    \tprotected String[] types = new String[0];",
                "+    \t@JsonProperty(\"score\")",
                "+    \tprotected double score;",
                "+    \t@JsonProperty(\"match\")",
                "+    \tprotected boolean match = false;",
                "     }",
                "@@ -390,3 +402,3 @@ public class StandardReconConfig extends ReconConfig {",
                "                     String s = ParsingUtilities.inputStreamToString(is);",
                "-                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);",
                "+                    ObjectNode o = ParsingUtilities.evaluateJsonStringToObjectNode(s);",
                "@@ -398,6 +410,6 @@ public class StandardReconConfig extends ReconConfig {",
                "                         String key = \"q\" + i;",
                "-                        if (o.has(key)) {",
                "-                            JSONObject o2 = o.getJSONObject(key);",
                "-                            if (o2.has(\"result\")) {",
                "-                                JSONArray results = o2.getJSONArray(\"result\");",
                "+                        if (o.has(key) && o.get(key) instanceof ObjectNode) {",
                "+                            ObjectNode o2 = (ObjectNode) o.get(key);",
                "+                            if (o2.has(\"result\") && o2.get(\"result\") instanceof ArrayNode) {",
                "+                                ArrayNode results = (ArrayNode) o2.get(\"result\");",
                "@@ -420,3 +432,3 @@ public class StandardReconConfig extends ReconConfig {",
                "             }",
                "-        } catch (Exception e) {",
                "+        } catch (IOException e) {",
                "             logger.error(\"Failed to batch recon with load:\\n\" + queriesString, e);",
                "@@ -443,55 +455,42 @@ public class StandardReconConfig extends ReconConfig {",
                "-    protected Recon createReconServiceResults(String text, JSONArray results, long historyEntryID) {",
                "+    protected Recon createReconServiceResults(String text, ArrayNode resultsList, long historyEntryID) throws IOException {",
                "         Recon recon = new Recon(historyEntryID, identifierSpace, schemaSpace);",
                "-        try {",
                "-            int length = results.length();",
                "-            int count = 0;",
                "-            for (int i = 0; i < length; i++) {",
                "-                JSONObject result = results.getJSONObject(i);",
                "-                if (!result.has(\"name\")) {",
                "-                    continue;",
                "-                }",
                "-                ",
                "-                JSONArray types = result.getJSONArray(\"type\");",
                "-                String[] typeIDs = new String[types.length()];",
                "-                for (int j = 0; j < typeIDs.length; j++) {",
                "-                    Object type = types.get(j);",
                "-                    typeIDs[j] = type instanceof String ? (String) type :",
                "-                        ((JSONObject) type).getString(\"id\");",
                "-                }",
                "-                ",
                "-                double score = result.getDouble(\"score\");",
                "-                ReconCandidate candidate = new ReconCandidate(",
                "-                    result.getString(\"id\"),",
                "-                    result.getString(\"name\"),",
                "-                    typeIDs,",
                "-                    score",
                "-                );",
                "-                ",
                "-                if (autoMatch && i == 0 && result.has(\"match\") && result.getBoolean(\"match\")) {",
                "-                    recon.match = candidate;",
                "-                    recon.matchRank = 0;",
                "-                    recon.judgment = Judgment.Matched;",
                "-                    recon.judgmentAction = \"auto\";",
                "-                }",
                "-                ",
                "-                recon.addCandidate(candidate);",
                "-                count++;",
                "+        List<ReconResult> results = ParsingUtilities.mapper.readValue(resultsList.toString(), new TypeReference<List<ReconResult>>() {});",
                "+        ",
                "+        int length = results.size();",
                "+        int count = 0;",
                "+        for (int i = 0; i < length; i++) {",
                "+            ReconResult result = results.get(i);",
                "+            ReconCandidate candidate = new ReconCandidate(",
                "+                result.id,",
                "+                result.name,",
                "+                result.types,",
                "+                result.score",
                "+            );",
                "+            ",
                "+            if (autoMatch && i == 0 && result.match) {",
                "+                recon.match = candidate;",
                "+                recon.matchRank = 0;",
                "+                recon.judgment = Judgment.Matched;",
                "+                recon.judgmentAction = \"auto\";",
                "             }",
                "-            if (count > 0) {",
                "-                ReconCandidate candidate = recon.candidates.get(0);",
                "-                ",
                "-                recon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.name));",
                "-                recon.setFeature(Recon.Feature_nameLevenshtein, ",
                "-                        StringUtils.getLevenshteinDistance(StringUtils.lowerCase(text), StringUtils.lowerCase(candidate.name)));",
                "-                recon.setFeature(Recon.Feature_nameWordDistance, wordDistance(text, candidate.name));",
                "-                ",
                "-                recon.setFeature(Recon.Feature_typeMatch, false);",
                "-                if (this.typeID != null) {",
                "-                    for (String typeID : candidate.types) {",
                "-                        if (this.typeID.equals(typeID)) {",
                "-                            recon.setFeature(Recon.Feature_typeMatch, true);",
                "-                            break;",
                "-                        }",
                "+            recon.addCandidate(candidate);",
                "+            count++;",
                "+        }",
                "+        ",
                "+        if (count > 0) {",
                "+            ReconCandidate candidate = recon.candidates.get(0);",
                "+            ",
                "+            recon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.name));",
                "+            recon.setFeature(Recon.Feature_nameLevenshtein, ",
                "+                    StringUtils.getLevenshteinDistance(StringUtils.lowerCase(text), StringUtils.lowerCase(candidate.name)));",
                "+            recon.setFeature(Recon.Feature_nameWordDistance, wordDistance(text, candidate.name));",
                "+            ",
                "+            recon.setFeature(Recon.Feature_typeMatch, false);",
                "+            if (this.typeID != null) {",
                "+                for (String typeID : candidate.types) {",
                "+                    if (this.typeID.equals(typeID)) {",
                "+                        recon.setFeature(Recon.Feature_typeMatch, true);",
                "+                        break;",
                "                     }",
                "@@ -499,4 +498,2 @@ public class StandardReconConfig extends ReconConfig {",
                "             }",
                "-        } catch (JSONException e) {",
                "-            e.printStackTrace();",
                "         }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/recon/StandardReconConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "99852a193ce536049070c7d5187c07c1e0349277",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540204587,
            "hunks": 10,
            "message": "Jackson deserialization for ColumnAdditionOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java b/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "index ae4b8077e..e32034361 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnAdditionOperation.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations.column;",
                "+import java.io.IOException;",
                " import java.io.Serializable;",
                "@@ -42,2 +43,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -63,3 +65,3 @@ import com.google.refine.operations.EngineDependentOperation;",
                " import com.google.refine.operations.OnError;",
                "-import com.google.refine.operations.cell.TextTransformOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -73,21 +75,19 @@ public class ColumnAdditionOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        ",
                "-        return new ColumnAdditionOperation(",
                "-            EngineConfig.reconstruct(engineConfig),",
                "-            obj.getString(\"baseColumnName\"),",
                "-            obj.getString(\"expression\"),",
                "-            TextTransformOperation.stringToOnError(obj.getString(\"onError\")),",
                "-            obj.getString(\"newColumnName\"),",
                "-            obj.getInt(\"columnInsertIndex\")",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnAdditionOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public ColumnAdditionOperation(",
                "+        @JsonProperty(\"engineConfig\")",
                "         EngineConfig   engineConfig,",
                "+        @JsonProperty(\"baseColumnName\")",
                "         String         baseColumnName,",
                "+        @JsonProperty(\"expression\")",
                "         String         expression,",
                "+        @JsonProperty(\"onError\")",
                "         OnError        onError,",
                "-        String         newColumnName, ",
                "+        @JsonProperty(\"newColumnName\")",
                "+        String         newColumnName,",
                "+        @JsonProperty(\"columnInsertIndex\")",
                "         int            columnInsertIndex "
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/column/ColumnAdditionOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0418f090fd4c1c2f40161c87710bebb314a1d37d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543708640,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cf58092f2d76f99400cd288dbe87b496f55bf891",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543738143,
            "hunks": 1,
            "message": "Fix stringToLocalDate for non-GMT timezones",
            "diff": [
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index 7751bfc4d..b044b63c8 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -231,3 +231,4 @@ public class ParsingUtilities {",
                "         }",
                "-        return parsed.toLocalDateTime();",
                "+        return parsed.withOffsetSameInstant(OffsetDateTime.now().getOffset())",
                "+        \t\t.toLocalDateTime();",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/util/ParsingUtilities.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4a067cb110a9693668364055d423bd9cb1d0413f",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542303551,
            "hunks": 6,
            "message": "Migrate FileProjectManager to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/io/FileProjectManager.java b/main/src/com/google/refine/io/FileProjectManager.java",
                "index 46875e02a..d342229b7 100644",
                "--- a/main/src/com/google/refine/io/FileProjectManager.java",
                "+++ b/main/src/com/google/refine/io/FileProjectManager.java",
                "@@ -38,3 +38,2 @@ import java.io.FileInputStream;",
                " import java.io.FileOutputStream;",
                "-import java.io.FileReader;",
                " import java.io.FileWriter;",
                "@@ -44,2 +43,3 @@ import java.io.OutputStream;",
                " import java.util.HashMap;",
                "+import java.util.List;",
                " import java.util.Map.Entry;",
                "@@ -52,6 +52,3 @@ import org.apache.tools.tar.TarInputStream;",
                " import org.apache.tools.tar.TarOutputStream;",
                "-import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONTokener;",
                " import org.slf4j.Logger;",
                "@@ -379,56 +376,7 @@ public class FileProjectManager extends ProjectManager  {",
                "-        if (file.exists() || file.canRead()) {",
                "-            FileReader reader = null;",
                "-            try {",
                "-                reader = new FileReader(file);",
                "-                JSONTokener tokener = new JSONTokener(reader);",
                "-                JSONObject obj = (JSONObject) tokener.nextValue();",
                "-                ",
                "-                // load global preferences firstly",
                "-                if (obj.has(\"preferences\") && !obj.isNull(\"preferences\")) {",
                "-                    _preferenceStore = ParsingUtilities.mapper.readValue(obj.getJSONObject(\"preferences\").toString(), PreferenceStore.class);",
                "-                }",
                "-",
                "-                JSONArray a = obj.getJSONArray(\"projectIDs\");",
                "-                int count = a.length();",
                "-                for (int i = 0; i < count; i++) {",
                "-                    long id = a.getLong(i);",
                "-",
                "-                    File projectDir = getProjectDir(id);",
                "-                    ProjectMetadata metadata = ProjectMetadataUtilities.load(projectDir);",
                "-                    ",
                "-                    mergeEmptyUserMetadata(metadata);",
                "-",
                "-                    _projectsMetadata.put(id, metadata);",
                "-                    ",
                "-                    if (metadata != null && metadata.getTags() != null) {",
                "-                        for (String tag : metadata.getTags()) {",
                "-                          if (_projectsTags.containsKey(tag)) {",
                "-                            _projectsTags.put(tag, _projectsTags.get(tag) + 1);",
                "-                          } else {",
                "-                            _projectsTags.put(tag, 1);",
                "-                          }",
                "-                        }",
                "-                    }",
                "-                }",
                "-",
                "-                if (obj.has(\"expressions\") && !obj.isNull(\"expressions\")) { // backward compatibility",
                "-                \tTopList newExpressions = ParsingUtilities.mapper.readValue(obj.getJSONArray(\"expressions\").toString(), TopList.class);",
                "-                    this._preferenceStore.put(\"scripting.expressions\", newExpressions);",
                "-                }",
                "-",
                "-                found = true;",
                "-            } catch (JSONException e) {",
                "-                logger.warn(\"Error reading file\", e);",
                "-            } catch (IOException e) {",
                "-                logger.warn(\"Error reading file\", e);",
                "-            } finally {",
                "-                try {",
                "-                    if (reader != null) {",
                "-                        reader.close();",
                "-                    }",
                "-                } catch (IOException e) {",
                "-                    logger.warn(\"Exception closing file\",e);",
                "-                }",
                "-            }",
                "+        try {",
                "+        \tParsingUtilities.mapper.readerForUpdating(this).readValue(file);",
                "+            found = true;",
                "+        } catch(IOException e) {",
                "+        \tlogger.warn(e.toString());",
                "         }",
                "@@ -492,2 +440,40 @@ public class FileProjectManager extends ProjectManager  {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"projectIDs\")",
                "+    protected void loadProjects(List<Long> projectIDs) {",
                "+        for (Long id : projectIDs) {",
                "+",
                "+            File projectDir = getProjectDir(id);",
                "+            ProjectMetadata metadata = ProjectMetadataUtilities.load(projectDir);",
                "+            ",
                "+            mergeEmptyUserMetadata(metadata);",
                "+",
                "+            _projectsMetadata.put(id, metadata);",
                "+            ",
                "+            if (metadata != null && metadata.getTags() != null) {",
                "+                for (String tag : metadata.getTags()) {",
                "+                  if (_projectsTags.containsKey(tag)) {",
                "+                    _projectsTags.put(tag, _projectsTags.get(tag) + 1);",
                "+                  } else {",
                "+                    _projectsTags.put(tag, 1);",
                "+                  }",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"preferences\")",
                "+    protected void setPreferences(PreferenceStore preferences) {",
                "+    \tif(preferences != null) {",
                "+    \t\t_preferenceStore = preferences;",
                "+    \t}",
                "+    }",
                "+    ",
                "+    // backwards compatibility",
                "+    @JsonProperty(\"expressions\")",
                "+\tprotected void setExpressions(TopList newExpressions) {",
                "+    \tif (newExpressions != null) {",
                "+    \t\t_preferenceStore.put(\"scripting.expressions\", newExpressions);",
                "+    \t}",
                "+    }",
                " }",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "main/src/com/google/refine/io/FileProjectManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c58854d947bb96db2c944b440e246cccc3fd1e53",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540201301,
            "hunks": 12,
            "message": "Jackson deserialization for ReconUseValuesAsIdsOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java b/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "index fda3726cf..b60744119 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "@@ -2,5 +2,5 @@ package com.google.refine.operations.recon;",
                "+import java.io.IOException;",
                " import java.util.Collections;",
                " import java.util.List;",
                "-import java.util.Properties;",
                "@@ -8,2 +8,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -26,3 +27,3 @@ import com.google.refine.model.recon.StandardReconConfig;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "-import com.google.refine.operations.OperationRegistry;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -40,7 +41,13 @@ public class ReconUseValuesAsIdentifiersOperation extends EngineDependentMassCel",
                "+    @JsonCreator",
                "     public ReconUseValuesAsIdentifiersOperation(",
                "+            @JsonProperty(\"engineConfig\")",
                "             EngineConfig engineConfig,",
                "+            @JsonProperty(\"columnName\")",
                "             String columnName,",
                "+            @JsonProperty(\"service\")",
                "             String service,",
                "+            @JsonProperty(\"identifierSpace\")",
                "             String identifierSpace,",
                "+            @JsonProperty(\"schemaSpace\")",
                "             String schemaSpace) {",
                "@@ -53,11 +60,4 @@ public class ReconUseValuesAsIdentifiersOperation extends EngineDependentMassCel",
                "-    static public ReconUseValuesAsIdentifiersOperation reconstruct(JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        return new ReconUseValuesAsIdentifiersOperation(",
                "-            EngineConfig.reconstruct(engineConfig), ",
                "-            obj.getString(\"columnName\"),",
                "-            obj.getString(\"service\"),",
                "-            obj.getString(\"identifierSpace\"),",
                "-            obj.getString(\"schemaSpace\")",
                "-        );",
                "+    static public ReconUseValuesAsIdentifiersOperation reconstruct(JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconUseValuesAsIdentifiersOperation.class);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "new file mode 100644",
                "index 000000000..3a6d94036",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "@@ -0,0 +1,58 @@",
                "+package com.google.refine.tests.operations.recon;",
                "+",
                "+import static org.testng.Assert.assertEquals;",
                "+import static org.testng.Assert.assertNull;",
                "+",
                "+import java.util.Properties;",
                "+",
                "+import org.json.JSONException;",
                "+import org.json.JSONObject;",
                "+import org.testng.annotations.BeforeSuite;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.model.Project;",
                "+import com.google.refine.model.recon.StandardReconConfig;",
                "+import com.google.refine.operations.OperationRegistry;",
                "+import com.google.refine.operations.recon.ReconUseValuesAsIdentifiersOperation;",
                "+import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+",
                "+public class ReconUseValuesAsIdsOperationTests extends RefineTest {",
                "+    String json = \"{\"",
                "+            + \"\\\"op\\\":\\\"core/recon-use-values-as-identifiers\\\",\"",
                "+            + \"\\\"description\\\":\\\"Use values as reconciliation identifiers in column ids\\\",\"",
                "+            + \"\\\"columnName\\\":\\\"ids\\\",\"",
                "+            + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]},\"",
                "+            + \"\\\"service\\\":\\\"http://localhost:8080/api\\\",\"",
                "+            + \"\\\"identifierSpace\\\":\\\"http://test.org/entities\\\",\"",
                "+            + \"\\\"schemaSpace\\\":\\\"http://test.org/schema\\\"\"",
                "+            + \"}\";",
                "+    ",
                "+    @BeforeSuite",
                "+    public void registerOperation() {",
                "+        OperationRegistry.registerOperation(getCoreModule(), \"recon-use-values-as-identifiers\", ReconUseValuesAsIdentifiersOperation.class);",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void serializeReconUseValuesAsIdentifiersOperation() throws JSONException, Exception {",
                "+        TestUtils.isSerializedTo(ReconUseValuesAsIdentifiersOperation.reconstruct(new JSONObject(json)), json);",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void testUseValuesAsIds() throws JSONException, Exception {",
                "+        Project project = createCSVProject(\"ids,v\\n\"",
                "+                + \"Q343,hello\\n\"",
                "+                + \",world\\n\"",
                "+                + \"Q31,test\");",
                "+        ReconUseValuesAsIdentifiersOperation op = ReconUseValuesAsIdentifiersOperation.reconstruct(new JSONObject(json));",
                "+        op.createProcess(project, new Properties()).performImmediate();",
                "+        ",
                "+        assertEquals(\"Q343\", project.rows.get(0).cells.get(0).recon.match.id);",
                "+        assertEquals(\"http://test.org/entities\", project.rows.get(0).cells.get(0).recon.identifierSpace);",
                "+        assertNull(project.rows.get(1).cells.get(0));",
                "+        assertEquals(\"Q31\", project.rows.get(2).cells.get(0).recon.match.id);",
                "+        assertEquals(2, project.columnModel.columns.get(0).getReconStats().matchedTopics);",
                "+        assertEquals(\"http://test.org/schema\", ((StandardReconConfig)project.columnModel.columns.get(0).getReconConfig()).schemaSpace);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconUseValuesAsIdentifiersOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "08c2b8fb2b536fd2f8c2073d6bd0413abec1687e",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540200976,
            "hunks": 9,
            "message": "Jackson deserialization for ReconMatchSpecificTopicOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java b/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "index 3e7f85ccf..709146811 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java",
                "@@ -39,3 +39,2 @@ import java.util.Map;",
                "-import org.json.JSONArray;",
                " import org.json.JSONObject;",
                "@@ -60,2 +59,3 @@ import com.google.refine.model.changes.ReconChange;",
                " import com.google.refine.operations.EngineDependentMassCellOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -94,30 +94,16 @@ public class ReconMatchSpecificTopicOperation extends EngineDependentMassCellOpe",
                "     static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        ",
                "-        JSONObject match = obj.getJSONObject(\"match\");",
                "-        ",
                "-        JSONArray types = match.getJSONArray(\"types\");",
                "-        String[] typeIDs = new String[types.length()];",
                "-        for (int i = 0; i < typeIDs.length; i++) {",
                "-            typeIDs[i] = types.getString(i);",
                "-        }",
                "-        ",
                "-        return new ReconMatchSpecificTopicOperation(",
                "-            EngineConfig.reconstruct(engineConfig),",
                "-            obj.getString(\"columnName\"),",
                "-            new ReconItem(",
                "-                match.getString(\"id\"),",
                "-                match.getString(\"name\"),",
                "-                typeIDs",
                "-            ),",
                "-            obj.getString(\"identifierSpace\"),",
                "-            obj.getString(\"schemaSpace\")",
                "-        );",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconMatchSpecificTopicOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public ReconMatchSpecificTopicOperation(",
                "+        @JsonProperty(\"engineConfig\")",
                "         EngineConfig engineConfig, ",
                "+        @JsonProperty(\"columnName\")",
                "         String columnName, ",
                "+        @JsonProperty(\"match\")",
                "         ReconItem match,",
                "+        @JsonProperty(\"identifierSpace\")",
                "         String identifierSpace,",
                "+        @JsonProperty(\"schemaSpace\")",
                "         String schemaSpace"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1f403930282eb7573061665c96025d6e8f55edf0",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1537896068,
            "hunks": 22,
            "message": "Move SortingConfig to its own file; tests for sorting criteria",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/row/GetRowsCommand.java b/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "index 95e0fe266..add2f4314 100644",
                "--- a/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "+++ b/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "@@ -59,3 +59,3 @@ import com.google.refine.model.Record;",
                " import com.google.refine.model.Row;",
                "-import com.google.refine.sorting.BaseSorter.SortingConfig;",
                "+import com.google.refine.sorting.SortingConfig;",
                " import com.google.refine.sorting.SortingRecordVisitor;",
                "@@ -129,3 +129,3 @@ public class GetRowsCommand extends Command {",
                "                 if (sortingJson != null) {",
                "-                    sortingConfig = SortingConfig.reconstruct(project, sortingJson);",
                "+                    sortingConfig = SortingConfig.reconstruct(sortingJson);",
                "                 }",
                "diff --git a/main/src/com/google/refine/commands/row/ReorderRowsCommand.java b/main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "index c9825c56e..244b40c3f 100644",
                "--- a/main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "+++ b/main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "@@ -46,3 +46,3 @@ import com.google.refine.model.Project;",
                " import com.google.refine.operations.row.RowReorderOperation;",
                "-import com.google.refine.sorting.BaseSorter.SortingConfig;",
                "+import com.google.refine.sorting.SortingConfig;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -62,3 +62,3 @@ public class ReorderRowsCommand extends EngineDependentCommand {",
                "             JSONObject sortingJson = (json == null) ? null : ParsingUtilities.evaluateJsonStringToObject(json);",
                "-            sorting = (sortingJson == null) ? null : SortingConfig.reconstruct(project, sortingJson);",
                "+            sorting = (sortingJson == null) ? null : SortingConfig.reconstruct(sortingJson);",
                "         } catch (JSONException e) {",
                "diff --git a/main/src/com/google/refine/exporters/TemplatingExporter.java b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "index 43f8d4809..996ce4591 100644",
                "--- a/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "+++ b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "@@ -52,5 +52,5 @@ import com.google.refine.expr.ParsingException;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.sorting.SortingConfig;",
                " import com.google.refine.sorting.SortingRecordVisitor;",
                " import com.google.refine.sorting.SortingRowVisitor;",
                "-import com.google.refine.sorting.BaseSorter.SortingConfig;",
                " import com.google.refine.templating.Parser;",
                "@@ -118,3 +118,3 @@ public class TemplatingExporter implements WriterExporter {",
                "                 try {",
                "-                    SortingConfig sorting = SortingConfig.reconstruct(project, sortingJson);",
                "+                    SortingConfig sorting = SortingConfig.reconstruct(sortingJson);",
                "                     SortingRowVisitor srv = new SortingRowVisitor(visitor);",
                "@@ -137,3 +137,3 @@ public class TemplatingExporter implements WriterExporter {",
                "                 try {",
                "-                    SortingConfig sorting = SortingConfig.reconstruct(project, sortingJson);",
                "+                    SortingConfig sorting = SortingConfig.reconstruct(sortingJson);",
                "                     SortingRecordVisitor srv = new SortingRecordVisitor(visitor);",
                "diff --git a/main/src/com/google/refine/operations/row/RowReorderOperation.java b/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "index ace36d498..ee63cd799 100644",
                "--- a/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "@@ -56,4 +56,3 @@ import com.google.refine.model.changes.RowReorderChange;",
                " import com.google.refine.operations.OperationRegistry;",
                "-import com.google.refine.sorting.BaseSorter;",
                "-import com.google.refine.sorting.BaseSorter.SortingConfig;",
                "+import com.google.refine.sorting.SortingConfig;",
                " import com.google.refine.sorting.SortingRecordVisitor;",
                "@@ -66,3 +65,3 @@ public class RowReorderOperation extends AbstractOperation {",
                "                 obj.getJSONObject(\"sorting\") : null;",
                "-        BaseSorter.SortingConfig config = BaseSorter.SortingConfig.reconstruct(project, sorting);",
                "+        SortingConfig config = SortingConfig.reconstruct(sorting);",
                "         return new RowReorderOperation(Engine.stringToMode(mode), config);",
                "@@ -71,5 +70,5 @@ public class RowReorderOperation extends AbstractOperation {",
                "     final protected Mode _mode;",
                "-    final protected BaseSorter.SortingConfig _sorting;",
                "+    final protected SortingConfig _sorting;",
                "-    public RowReorderOperation(Mode mode, BaseSorter.SortingConfig sorting) {",
                "+    public RowReorderOperation(Mode mode, SortingConfig sorting) {",
                "         _mode = mode;",
                "diff --git a/main/src/com/google/refine/sorting/BaseSorter.java b/main/src/com/google/refine/sorting/BaseSorter.java",
                "index 6b807f261..1f5346d9d 100644",
                "--- a/main/src/com/google/refine/sorting/BaseSorter.java",
                "+++ b/main/src/com/google/refine/sorting/BaseSorter.java",
                "@@ -36,13 +36,5 @@ package com.google.refine.sorting;",
                " import java.util.List;",
                "-import java.util.Properties;",
                "-import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "-import com.fasterxml.jackson.annotation.JsonCreator;",
                "-import com.fasterxml.jackson.annotation.JsonProperty;",
                "-",
                "-import com.google.refine.Jsonizable;",
                " import com.google.refine.expr.EvalError;",
                "@@ -112,51 +104,3 @@ abstract public class BaseSorter {",
                "-    public final static class SortingConfig implements Jsonizable {",
                "-        ",
                "-        protected Criterion[] _criteria;",
                "-        ",
                "-        @JsonCreator",
                "-        public SortingConfig(",
                "-                @JsonProperty(\"criteria\")",
                "-                Criterion[] criteria) {",
                "-            _criteria = criteria;",
                "-        }",
                "-        ",
                "-        @JsonProperty(\"criteria\")",
                "-        public Criterion[] getCriteria() {",
                "-            return _criteria;",
                "-        }",
                "-    ",
                "-        @Override",
                "-        public void write(JSONWriter writer, Properties options)",
                "-                throws JSONException {",
                "-            writer.object();",
                "-            writer.key(\"criteria\");",
                "-            for (int i = 0; i != _criteria.length; i++) {",
                "-                _criteria[i].write(writer, options);",
                "-            }",
                "-            writer.endObject();",
                "-        }",
                "-        ",
                "-        public static SortingConfig reconstruct(Project project, JSONObject obj) {",
                "-            Criterion[] criteria;",
                "-            if (obj != null && obj.has(\"criteria\") && !obj.isNull(\"criteria\")) {",
                "-                JSONArray a = obj.getJSONArray(\"criteria\");",
                "-                int count = a.length();",
                "-    ",
                "-                criteria = new Criterion[count];",
                "-    ",
                "-    ",
                "-                for (int i = 0; i < count; i++) {",
                "-                    JSONObject obj2 = a.getJSONObject(i);",
                "-    ",
                "-                    criteria[i] = Criterion.reconstruct(obj2);",
                "-                }",
                "-            } else {",
                "-                criteria = new Criterion[0];",
                "-            }",
                "-            return new SortingConfig(criteria);",
                "-        }",
                "-    }",
                "-",
                "-    public void initializeFromConfig(Project project, BaseSorter.SortingConfig config) throws JSONException {",
                "+    public void initializeFromConfig(Project project, SortingConfig config) throws JSONException {",
                "         _criteria = config.getCriteria();",
                "diff --git a/main/src/com/google/refine/sorting/BooleanCriterion.java b/main/src/com/google/refine/sorting/BooleanCriterion.java",
                "index 07746e038..d3ee789a1 100644",
                "--- a/main/src/com/google/refine/sorting/BooleanCriterion.java",
                "+++ b/main/src/com/google/refine/sorting/BooleanCriterion.java",
                "@@ -35,7 +35,2 @@ package com.google.refine.sorting;",
                "-import java.util.Properties;",
                "-",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "diff --git a/main/src/com/google/refine/sorting/SortingConfig.java b/main/src/com/google/refine/sorting/SortingConfig.java",
                "new file mode 100644",
                "index 000000000..cc96ee85e",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/sorting/SortingConfig.java",
                "@@ -0,0 +1,67 @@",
                "+package com.google.refine.sorting;",
                "+",
                "+import java.util.Properties;",
                "+",
                "+import org.json.JSONArray;",
                "+import org.json.JSONException;",
                "+import org.json.JSONObject;",
                "+import org.json.JSONWriter;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+import com.google.refine.Jsonizable;",
                "+",
                "+/**",
                "+ * Stores the configuration of a row/record sorting setup.",
                "+ * @author Antonin Delpeuch",
                "+ *",
                "+ */",
                "+public final class SortingConfig implements Jsonizable {",
                "+    ",
                "+    protected Criterion[] _criteria;",
                "+    ",
                "+    @JsonCreator",
                "+    public SortingConfig(",
                "+            @JsonProperty(\"criteria\")",
                "+            Criterion[] criteria) {",
                "+        _criteria = criteria;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"criteria\")",
                "+    public Criterion[] getCriteria() {",
                "+        return _criteria;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(JSONWriter writer, Properties options)",
                "+            throws JSONException {",
                "+        writer.object();",
                "+        writer.key(\"criteria\");",
                "+        writer.array();",
                "+        for (int i = 0; i != _criteria.length; i++) {",
                "+            _criteria[i].write(writer, options);",
                "+        }",
                "+        writer.endArray();",
                "+        writer.endObject();",
                "+    }",
                "+    ",
                "+    public static SortingConfig reconstruct(JSONObject obj) {",
                "+        Criterion[] criteria;",
                "+        if (obj != null && obj.has(\"criteria\") && !obj.isNull(\"criteria\")) {",
                "+            JSONArray a = obj.getJSONArray(\"criteria\");",
                "+            int count = a.length();",
                "+",
                "+            criteria = new Criterion[count];",
                "+",
                "+            for (int i = 0; i < count; i++) {",
                "+                JSONObject obj2 = a.getJSONObject(i);",
                "+",
                "+                criteria[i] = Criterion.reconstruct(obj2);",
                "+            }",
                "+        } else {",
                "+            criteria = new Criterion[0];",
                "+        }",
                "+        return new SortingConfig(criteria);",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "index bdcfb80a1..08b91927b 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "@@ -22,3 +22,3 @@ import com.google.refine.operations.row.RowReorderOperation;",
                " import com.google.refine.process.Process;",
                "-import com.google.refine.sorting.BaseSorter.SortingConfig;",
                "+import com.google.refine.sorting.SortingConfig;",
                " import com.google.refine.tests.RefineTest;",
                "@@ -53,3 +53,3 @@ public class RowReorderOperationTests extends RefineTest {",
                "         String sortingJson = \"{\\\"criteria\\\":[{\\\"column\\\":\\\"key\\\",\\\"valueType\\\":\\\"number\\\",\\\"reverse\\\":false,\\\"blankPosition\\\":2,\\\"errorPosition\\\":1}]}\";",
                "-        SortingConfig sortingConfig = SortingConfig.reconstruct(project, new JSONObject(sortingJson));",
                "+        SortingConfig sortingConfig = SortingConfig.reconstruct(new JSONObject(sortingJson));",
                "         project.rows.get(1).cells.set(0, new Cell(\"\", null));",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java b/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "new file mode 100644",
                "index 000000000..3a16d0486",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "@@ -0,0 +1,22 @@",
                "+package com.google.refine.tests.sorting;",
                "+",
                "+import org.json.JSONObject;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.sorting.Criterion;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class BooleanCriterionTest {",
                "+    @Test",
                "+    public void serializeBooleanCriterion() {",
                "+        String json = ",
                "+                \"        {\\n\" + ",
                "+                \"          \\\"errorPosition\\\": 1,\\n\" + ",
                "+                \"          \\\"valueType\\\": \\\"boolean\\\",\\n\" + ",
                "+                \"          \\\"column\\\": \\\"start_year\\\",\\n\" + ",
                "+                \"          \\\"blankPosition\\\": 2,\\n\" + ",
                "+                \"          \\\"reverse\\\": false\\n\" + ",
                "+                \"        }\\n\";",
                "+        TestUtils.isSerializedTo(Criterion.reconstruct(new JSONObject(json)), json);",
                "+    }",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/DateCriterionTest.java b/main/tests/server/src/com/google/refine/tests/sorting/DateCriterionTest.java",
                "new file mode 100644",
                "index 000000000..349384d67",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/DateCriterionTest.java",
                "@@ -0,0 +1,22 @@",
                "+package com.google.refine.tests.sorting;",
                "+",
                "+import org.json.JSONObject;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.sorting.Criterion;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class DateCriterionTest {",
                "+    @Test",
                "+    public void serializeDateCriterion() {",
                "+        String json = ",
                "+                \"        {\\n\" + ",
                "+                \"          \\\"errorPosition\\\": 2,\\n\" + ",
                "+                \"          \\\"valueType\\\": \\\"date\\\",\\n\" + ",
                "+                \"          \\\"column\\\": \\\"start_year\\\",\\n\" + ",
                "+                \"          \\\"blankPosition\\\": -1,\\n\" + ",
                "+                \"          \\\"reverse\\\": true\\n\" + ",
                "+                \"        }\\n\";",
                "+        TestUtils.isSerializedTo(Criterion.reconstruct(new JSONObject(json)), json);",
                "+    }",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/NumberCriterionTest.java b/main/tests/server/src/com/google/refine/tests/sorting/NumberCriterionTest.java",
                "new file mode 100644",
                "index 000000000..23aea5080",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/NumberCriterionTest.java",
                "@@ -0,0 +1,22 @@",
                "+package com.google.refine.tests.sorting;",
                "+",
                "+import org.json.JSONObject;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.sorting.Criterion;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class NumberCriterionTest {",
                "+    @Test",
                "+    public void serializeNumberCriterion() {",
                "+        String json = ",
                "+                \"        {\\n\" + ",
                "+                \"          \\\"errorPosition\\\": 2,\\n\" + ",
                "+                \"          \\\"valueType\\\": \\\"number\\\",\\n\" + ",
                "+                \"          \\\"column\\\": \\\"start_year\\\",\\n\" + ",
                "+                \"          \\\"blankPosition\\\": 1,\\n\" + ",
                "+                \"          \\\"reverse\\\": true\\n\" + ",
                "+                \"        }\\n\";",
                "+        TestUtils.isSerializedTo(Criterion.reconstruct(new JSONObject(json)), json);",
                "+    }",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java b/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java",
                "new file mode 100644",
                "index 000000000..a415eee99",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java",
                "@@ -0,0 +1,25 @@",
                "+package com.google.refine.tests.sorting;",
                "+",
                "+import org.json.JSONObject;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.google.refine.sorting.SortingConfig;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class SortingConfigTests {",
                "+    @Test",
                "+    public void serializeSortingConfig() {",
                "+        String json = \"{\\n\" + ",
                "+                \"      \\\"criteria\\\": [\\n\" + ",
                "+                \"        {\\n\" + ",
                "+                \"          \\\"errorPosition\\\": 1,\\n\" + ",
                "+                \"          \\\"valueType\\\": \\\"number\\\",\\n\" + ",
                "+                \"          \\\"column\\\": \\\"start_year\\\",\\n\" + ",
                "+                \"          \\\"blankPosition\\\": 2,\\n\" + ",
                "+                \"          \\\"reverse\\\": false\\n\" + ",
                "+                \"        }\\n\" + ",
                "+                \"      ]\\n\" + ",
                "+                \"    }\";",
                "+        TestUtils.isSerializedTo(SortingConfig.reconstruct(new JSONObject(json)), json);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "main/src/com/google/refine/exporters/TemplatingExporter.java",
                "main/src/com/google/refine/operations/row/RowReorderOperation.java",
                "main/src/com/google/refine/sorting/BaseSorter.java",
                "main/src/com/google/refine/sorting/BooleanCriterion.java",
                "main/src/com/google/refine/sorting/SortingConfig.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "main/tests/server/src/com/google/refine/tests/sorting/DateCriterionTest.java",
                "main/tests/server/src/com/google/refine/tests/sorting/NumberCriterionTest.java",
                "main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "eb49db31e220870701d2b05084753e0285dc80c9",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540206345,
            "hunks": 6,
            "message": "Jackson deserialization for ColumnSplitOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/column/ColumnSplitOperation.java b/main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "index 330efa1e7..1ac7388d1 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnSplitOperation.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.operations.column;",
                "+import java.io.IOException;",
                " import java.io.Serializable;",
                "@@ -43,2 +44,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                "@@ -61,3 +63,3 @@ import com.google.refine.model.changes.ColumnSplitChange;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "-import com.google.refine.util.JSONUtilities;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -75,24 +77,42 @@ public class ColumnSplitOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        String mode = obj.getString(\"mode\");",
                "-        ",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ColumnSplitOperation.class);",
                "+    }",
                "+    ",
                "+    @JsonCreator",
                "+    public static ColumnSplitOperation deserialize(",
                "+            @JsonProperty(\"engineConfig\")",
                "+            EngineConfig   engineConfig,",
                "+            @JsonProperty(\"columnName\")",
                "+            String         columnName,",
                "+            @JsonProperty(\"guessCellType\")",
                "+            boolean        guessCellType,",
                "+            @JsonProperty(\"removeOriginalColumn\")",
                "+            boolean        removeOriginalColumn,",
                "+            @JsonProperty(\"mode\")",
                "+            String mode,",
                "+            @JsonProperty(\"separator\")",
                "+            String         separator,",
                "+            @JsonProperty(\"regex\")",
                "+            Boolean        regex,",
                "+            @JsonProperty(\"maxColumns\")",
                "+            Integer        maxColumns,",
                "+            @JsonProperty(\"fieldLengths\")",
                "+            int[]          fieldLengths) {",
                "         if (\"separator\".equals(mode)) {",
                "             return new ColumnSplitOperation(",
                "-                EngineConfig.reconstruct(engineConfig),",
                "-                obj.getString(\"columnName\"),",
                "-                obj.getBoolean(\"guessCellType\"),",
                "-                obj.getBoolean(\"removeOriginalColumn\"),",
                "-                obj.getString(\"separator\"),",
                "-                obj.getBoolean(\"regex\"),",
                "-                obj.getInt(\"maxColumns\")",
                "-            );",
                "+                    engineConfig,",
                "+                    columnName,",
                "+                    guessCellType,",
                "+                    removeOriginalColumn,",
                "+                    separator,",
                "+                    regex,",
                "+                    maxColumns);",
                "         } else {",
                "             return new ColumnSplitOperation(",
                "-                EngineConfig.reconstruct(engineConfig),",
                "-                obj.getString(\"columnName\"),",
                "-                obj.getBoolean(\"guessCellType\"),",
                "-                obj.getBoolean(\"removeOriginalColumn\"),",
                "-                JSONUtilities.getIntArray(obj, \"fieldLengths\")",
                "-            );",
                "+                    engineConfig,",
                "+                    columnName,",
                "+                    guessCellType,",
                "+                    removeOriginalColumn,",
                "+                    fieldLengths);",
                "         }"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/column/ColumnSplitOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1fa101c3346b6e2f9f4b13843f6eb93309de8a6a",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538045802,
            "hunks": 107,
            "message": "Jackson serialization for the model classes",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/Cell.java b/main/src/com/google/refine/model/Cell.java",
                "index 8a0da6054..fcaa86b5e 100644",
                "--- a/main/src/com/google/refine/model/Cell.java",
                "+++ b/main/src/com/google/refine/model/Cell.java",
                "@@ -46,2 +46,6 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.core.JsonFactory;",
                "@@ -59,3 +63,5 @@ import com.google.refine.util.StringUtils;",
                " public class Cell implements HasFields, Jsonizable {",
                "+    @JsonIgnore",
                "     final public Serializable   value;",
                "+    @JsonIgnore",
                "     final public Recon          recon;",
                "@@ -90,26 +96,6 @@ public class Cell implements HasFields, Jsonizable {",
                "             writer.key(\"v\");",
                "-            if (value != null) {",
                "-                Instant instant = null;",
                "-                if (value instanceof OffsetDateTime) {",
                "-                    instant = ((OffsetDateTime)value).toInstant();",
                "-                } else if (value instanceof LocalDateTime) {",
                "-                    instant = ((LocalDateTime)value).toInstant(ZoneOffset.of(\"Z\"));",
                "-                }",
                "-                ",
                "-                if (instant != null) {",
                "-                    writer.value(ParsingUtilities.instantToString(instant));",
                "-                    writer.key(\"t\"); writer.value(\"date\");",
                "-                } else if (value instanceof Double ",
                "-                        && (((Double)value).isNaN() || ((Double)value).isInfinite())) {",
                "-                    // write as a string",
                "-                    writer.value(((Double)value).toString());",
                "-                } else if (value instanceof Float",
                "-                        && (((Float)value).isNaN() || ((Float)value).isInfinite())) {",
                "-                    // TODO: Skip?  Write as string?",
                "-                    writer.value(((Float)value).toString());",
                "-                } else {",
                "-                    writer.value(value);",
                "-                }",
                "-            } else {",
                "-                writer.value(null);",
                "+            writer.value(getValueAsString());",
                "+            String jsonType = getTypeString();",
                "+            if(jsonType != null) {",
                "+                writer.key(\"t\"); writer.value(jsonType);",
                "             }",
                "@@ -127,2 +113,66 @@ public class Cell implements HasFields, Jsonizable {",
                "+    @JsonProperty(\"e\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getErrorMessage() {",
                "+        if (ExpressionUtils.isError(value)) {",
                "+            return ((EvalError) value).message;",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"t\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getTypeString() {",
                "+        if (value instanceof OffsetDateTime || value instanceof LocalDateTime) {",
                "+            return \"date\";",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"v\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getValueAsString() {",
                "+        if (value != null && !ExpressionUtils.isError(value)) {",
                "+            Instant instant = null;",
                "+            if (value instanceof OffsetDateTime) {",
                "+                instant = ((OffsetDateTime)value).toInstant();",
                "+            } else if (value instanceof LocalDateTime) {",
                "+                instant = ((LocalDateTime)value).toInstant(ZoneOffset.of(\"Z\"));",
                "+            }",
                "+            ",
                "+            if (instant != null) {",
                "+                return ParsingUtilities.instantToString(instant);",
                "+            } else if (value instanceof Double ",
                "+                    && (((Double)value).isNaN() || ((Double)value).isInfinite())) {",
                "+                // write as a string",
                "+                 return ((Double)value).toString();",
                "+            } else if (value instanceof Float",
                "+                    && (((Float)value).isNaN() || ((Float)value).isInfinite())) {",
                "+                // TODO: Skip?  Write as string?",
                "+                return ((Float)value).toString();",
                "+            } else {",
                "+                return value.toString();",
                "+            }",
                "+        } else {",
                "+           return null;",
                "+        }",
                "+    }",
                "+    ",
                "+    /**",
                "+     * TODO",
                "+     * - use JsonIdentityInfo on recon",
                "+     * - implement custom resolver to tie it to a pool",
                "+     * - figure it all out",
                "+     * @return",
                "+     */",
                "+    @JsonProperty(\"r\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getReconIdString() {",
                "+        if (recon != null) {",
                "+            return Long.toString(recon.id);",
                "+        }",
                "+        // TODO pool the recon??",
                "+        return null;",
                "+    }",
                "+    ",
                "     public void save(Writer writer, Properties options) {",
                "diff --git a/main/src/com/google/refine/model/Column.java b/main/src/com/google/refine/model/Column.java",
                "index 3eafa45db..e3cdf4538 100644",
                "--- a/main/src/com/google/refine/model/Column.java",
                "+++ b/main/src/com/google/refine/model/Column.java",
                "@@ -46,2 +46,6 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.InterProjectModel;",
                "@@ -78,2 +82,3 @@ public class Column implements Jsonizable {",
                "+    @JsonProperty(\"cellIndex\")",
                "     public int getCellIndex() {",
                "@@ -82,2 +87,3 @@ public class Column implements Jsonizable {",
                "+    @JsonProperty(\"originalName\")",
                "     public String getOriginalHeaderLabel() {",
                "@@ -90,2 +96,3 @@ public class Column implements Jsonizable {",
                "+    @JsonProperty(\"name\")",
                "     public String getName() {",
                "@@ -98,2 +105,4 @@ public class Column implements Jsonizable {",
                "+    @JsonProperty(\"reconConfig\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "     public ReconConfig getReconConfig() {",
                "@@ -106,2 +115,4 @@ public class Column implements Jsonizable {",
                "+    @JsonProperty(\"reconStats\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "     public ReconStats getReconStats() {",
                "@@ -133,2 +144,3 @@ public class Column implements Jsonizable {",
                "     }",
                "+   ",
                "@@ -162,3 +174,3 @@ public class Column implements Jsonizable {",
                "-    ",
                "+    @JsonProperty(\"type\")",
                "     public String getType() {",
                "@@ -173,2 +185,3 @@ public class Column implements Jsonizable {",
                "+    @JsonProperty(\"format\")",
                "     public String getFormat() {",
                "@@ -183,2 +196,3 @@ public class Column implements Jsonizable {",
                "+    @JsonProperty(\"title\")",
                "     public String getTitle() {",
                "@@ -193,2 +207,3 @@ public class Column implements Jsonizable {",
                "+    @JsonProperty(\"description\")",
                "     public String getDescription() {",
                "@@ -202,2 +217,6 @@ public class Column implements Jsonizable {",
                "+    @JsonProperty(\"constraints\")",
                "+    public String getConstraintsString() {",
                "+        return (new JSONObject(constraints)).toString();",
                "+    }",
                "diff --git a/main/src/com/google/refine/model/ColumnGroup.java b/main/src/com/google/refine/model/ColumnGroup.java",
                "index 9df67f2dc..1ba26d1ad 100644",
                "--- a/main/src/com/google/refine/model/ColumnGroup.java",
                "+++ b/main/src/com/google/refine/model/ColumnGroup.java",
                "@@ -44,3 +44,9 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonView;",
                "+",
                " import com.google.refine.Jsonizable;",
                "+import com.google.refine.util.JsonViews;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -82,2 +88,24 @@ public class ColumnGroup implements Jsonizable {",
                "+    @JsonProperty(\"startColumnIndex\")",
                "+    public int getStartColumnIndex() {",
                "+        return startColumnIndex;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"columnSpan\")",
                "+    public int getColumnSpan() {",
                "+        return columnSpan;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"keyColumnIndex\")",
                "+    public int getKeyColumnIndex() {",
                "+        return keyColumnIndex;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"subgroups\")",
                "+    @JsonView(JsonViews.NonSaveMode.class)",
                "+    @JsonInclude(Include.NON_EMPTY)",
                "+    public List<ColumnGroup> getSubGroups() {",
                "+        return subgroups;",
                "+    }",
                "+    ",
                "     public boolean contains(ColumnGroup g) {",
                "diff --git a/main/src/com/google/refine/model/ColumnModel.java b/main/src/com/google/refine/model/ColumnModel.java",
                "index f310d3807..a4109c1b3 100644",
                "--- a/main/src/com/google/refine/model/ColumnModel.java",
                "+++ b/main/src/com/google/refine/model/ColumnModel.java",
                "@@ -50,2 +50,7 @@ import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -53,3 +58,5 @@ import com.google.refine.Jsonizable;",
                " public class ColumnModel implements Jsonizable {",
                "+    @JsonProperty(\"columns\")",
                "     final public List<Column>      columns = new LinkedList<Column>();",
                "+    @JsonProperty(\"columnGroups\")",
                "     final public List<ColumnGroup> columnGroups = new LinkedList<ColumnGroup>();",
                "@@ -72,2 +79,3 @@ public class ColumnModel implements Jsonizable {",
                "+    @JsonIgnore",
                "     synchronized public int getMaxCellIndex() {",
                "@@ -88,2 +96,3 @@ public class ColumnModel implements Jsonizable {",
                "+    @JsonIgnore",
                "     synchronized public int getKeyColumnIndex() {",
                "@@ -168,2 +177,3 @@ public class ColumnModel implements Jsonizable {",
                "+    @JsonIgnore",
                "     synchronized public List<String> getColumnNames() {",
                "@@ -200,2 +210,20 @@ public class ColumnModel implements Jsonizable {",
                "+    @JsonProperty(\"keyCellIndex\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Integer getJsonKeyCellIndex() {",
                "+        if(columns.size() > 0) {",
                "+            return getKeyColumnIndex();",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"keyColumnName\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public String getKeyColumnName() {",
                "+        if(columns.size() > 0) {",
                "+            return columns.get(_keyColumnIndex).getName();",
                "+        }",
                "+        return null;",
                "+    }",
                "+    ",
                "     synchronized public void save(Writer writer, Properties options) throws IOException {",
                "diff --git a/main/src/com/google/refine/model/Recon.java b/main/src/com/google/refine/model/Recon.java",
                "index d131b3f7d..a4b726708 100644",
                "--- a/main/src/com/google/refine/model/Recon.java",
                "+++ b/main/src/com/google/refine/model/Recon.java",
                "@@ -36,2 +36,3 @@ package com.google.refine.model;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "@@ -41,2 +42,11 @@ import java.util.Properties;",
                "+import org.json.JSONException;",
                "+import org.json.JSONWriter;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonFilter;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonView;",
                " import com.fasterxml.jackson.core.JsonFactory;",
                "@@ -44,4 +54,2 @@ import com.fasterxml.jackson.core.JsonParser;",
                " import com.fasterxml.jackson.core.JsonToken;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -49,4 +57,6 @@ import com.google.refine.Jsonizable;",
                " import com.google.refine.expr.HasFields;",
                "+import com.google.refine.util.JsonViews;",
                " import com.google.refine.util.Pool;",
                "+@JsonFilter(\"reconCandidateFilter\")",
                " public class Recon implements HasFields, Jsonizable {",
                "@@ -63,4 +73,7 @@ public class Recon implements HasFields, Jsonizable {",
                "     static public enum Judgment {",
                "+        @JsonProperty(\"none\")",
                "         None,",
                "+        @JsonProperty(\"matched\")",
                "         Matched,",
                "+        @JsonProperty(\"new\")",
                "         New",
                "@@ -68,2 +81,3 @@ public class Recon implements HasFields, Jsonizable {",
                "+    @Deprecated",
                "     static public String judgmentToString(Judgment judgment) {",
                "@@ -78,2 +92,3 @@ public class Recon implements HasFields, Jsonizable {",
                "+    @Deprecated",
                "     static public Judgment stringToJudgment(String s) {",
                "@@ -188,2 +203,3 @@ public class Recon implements HasFields, Jsonizable {",
                "+    @JsonIgnore",
                "     public ReconCandidate getBestCandidate() {",
                "@@ -259,2 +275,3 @@ public class Recon implements HasFields, Jsonizable {",
                "+    @Deprecated",
                "     protected String judgmentToString() {",
                "@@ -275,2 +292,77 @@ public class Recon implements HasFields, Jsonizable {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"id\")",
                "+    public long getId() {",
                "+        return id;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"judgmentHistoryEntry\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "+    public long getJudgmentHistoryEntry() {",
                "+        return judgmentHistoryEntry;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"service\")",
                "+    public String getServiceURI() {",
                "+        return service;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"identifierSpace\")",
                "+    public String getIdentifierSpace() {",
                "+        return identifierSpace;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"schemaSpace\")",
                "+    public String getSchemaSpace() {",
                "+        return schemaSpace;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"j\")",
                "+    public Judgment getJudgment() {",
                "+        return judgment;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"m\")",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public ReconCandidate getMatch() {",
                "+        return match;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"c\")",
                "+    //@JsonView(JsonViews.SaveMode.class)",
                "+    public List<ReconCandidate> getCandidates() {",
                "+        if (candidates != null) {",
                "+            return candidates;",
                "+        }",
                "+        return Collections.emptyList();",
                "+    }",
                "+   ",
                "+    ",
                "+    @JsonProperty(\"f\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "+    public Object[] getfeatures() {",
                "+        return features;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"judgmentAction\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "+    public String getJudgmentAction() {",
                "+        return judgmentAction;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"judgmentBatchSize\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "+    public int getJudgmentBatchSize() {",
                "+        return judgmentBatchSize;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"matchRank\")",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "+    @JsonInclude(Include.NON_NULL)",
                "+    public Integer getMatchRank() {",
                "+        if (match != null) {",
                "+            return matchRank;",
                "+        }",
                "+        return null;",
                "+    }",
                "diff --git a/main/src/com/google/refine/model/ReconCandidate.java b/main/src/com/google/refine/model/ReconCandidate.java",
                "index 76a54d82f..b25b0354c 100644",
                "--- a/main/src/com/google/refine/model/ReconCandidate.java",
                "+++ b/main/src/com/google/refine/model/ReconCandidate.java",
                "@@ -39,2 +39,4 @@ import java.util.Properties;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.core.JsonFactory;",
                "@@ -49,5 +51,9 @@ import com.google.refine.expr.HasFields;",
                " public class ReconCandidate implements HasFields, Jsonizable {",
                "+    @JsonProperty(\"id\")",
                "     final public String     id;",
                "+    @JsonProperty(\"name\")",
                "     final public String     name;",
                "+    @JsonProperty(\"types\")",
                "     final public String[]   types;",
                "+    @JsonIgnore",
                "     final public double     score;",
                "@@ -61,2 +67,11 @@ public class ReconCandidate implements HasFields, Jsonizable {",
                "+    // Serialize doubles that are ints without trailing \".0\" for consistency with previous serialization.",
                "+    @JsonProperty(\"score\")",
                "+    public Object getJsonScore() {",
                "+        if ((double)(int)score == score) {",
                "+            return (int)score;",
                "+        }",
                "+        return score;",
                "+    }",
                "+    ",
                "     @Override",
                "diff --git a/main/src/com/google/refine/model/RecordModel.java b/main/src/com/google/refine/model/RecordModel.java",
                "index 47a6e24a7..2d1bf0569 100644",
                "--- a/main/src/com/google/refine/model/RecordModel.java",
                "+++ b/main/src/com/google/refine/model/RecordModel.java",
                "@@ -47,2 +47,5 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -87,2 +90,3 @@ public class RecordModel implements Jsonizable {",
                "+    @JsonIgnore",
                "     public int getRecordCount() {",
                "@@ -113,7 +117,11 @@ public class RecordModel implements Jsonizable {",
                "         writer.key(\"hasRecords\");",
                "-        writer.value(",
                "-            _records != null && _rowDependencies != null &&",
                "-            _records.size() < _rowDependencies.size());",
                "+        writer.value(hasRecords());",
                "         writer.endObject();",
                "     }",
                "+    ",
                "+    @JsonProperty(\"hasRecords\")",
                "+    public boolean hasRecords() {",
                "+        return _records != null && _rowDependencies != null &&",
                "+                _records.size() < _rowDependencies.size();",
                "+    }",
                "diff --git a/main/src/com/google/refine/model/Row.java b/main/src/com/google/refine/model/Row.java",
                "index 422fd76ec..780f1fe92 100644",
                "--- a/main/src/com/google/refine/model/Row.java",
                "+++ b/main/src/com/google/refine/model/Row.java",
                "@@ -41,2 +41,5 @@ import java.util.Properties;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonView;",
                " import com.fasterxml.jackson.core.JsonFactory;",
                "@@ -50,2 +53,3 @@ import com.google.refine.expr.CellTuple;",
                " import com.google.refine.expr.HasFields;",
                "+import com.google.refine.util.JsonViews;",
                " import com.google.refine.util.Pool;",
                "@@ -108,2 +112,3 @@ public class Row implements HasFields, Jsonizable {",
                "+    @JsonIgnore",
                "     public boolean isEmpty() {",
                "@@ -206,2 +211,22 @@ public class Row implements HasFields, Jsonizable {",
                "+    @JsonProperty(FLAGGED)",
                "+    public boolean isFlagged() {",
                "+        return flagged;",
                "+    }",
                "+    ",
                "+    @JsonProperty(STARRED)",
                "+    public boolean isStarred() {",
                "+        return starred;",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"cells\")",
                "+    public List<Cell> getCells() {",
                "+        return cells;",
                "+    }",
                "+    ",
                "+    /*",
                "+    @JsonView(JsonViews.SaveMode.class)",
                "+    public ",
                "+    */",
                "+    ",
                "     public void save(Writer writer, Properties options) {",
                "diff --git a/main/src/com/google/refine/model/recon/ReconConfig.java b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "index a85c70cef..7f11af0f8 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconConfig.java",
                "@@ -49,2 +49,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -132,2 +134,9 @@ abstract public class ReconConfig implements Jsonizable {",
                "     }",
                "+    ",
                "+    /**",
                "+     * Returns the identifier for the reconciliation mode, as serialized in JSON.",
                "+     * This is the same identifier that was used to register the registration mode.",
                "+     */",
                "+    @JsonProperty(\"mode\")",
                "+    abstract public String getMode();",
                " }",
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index 84adf5273..43e3754b8 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -55,2 +55,6 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+import com.google.refine.Jsonizable;",
                " import com.google.refine.expr.ExpressionUtils;",
                "@@ -61,2 +65,3 @@ import com.google.refine.model.Recon.Judgment;",
                " import com.google.refine.model.ReconCandidate;",
                "+import com.google.refine.model.ReconType;",
                " import com.google.refine.model.RecordModel.RowDependency;",
                "@@ -68,5 +73,8 @@ public class StandardReconConfig extends ReconConfig {",
                "-    static public class ColumnDetail {",
                "+    static public class ColumnDetail implements Jsonizable {",
                "+        @JsonProperty(\"column\")",
                "         final public String columnName;",
                "+        @JsonProperty(\"propertyName\")",
                "         final public String propertyName;",
                "+        @JsonProperty(\"propertyID\")",
                "         final public String propertyID;",
                "@@ -78,2 +86,13 @@ public class StandardReconConfig extends ReconConfig {",
                "         }",
                "+",
                "+        @Override",
                "+        public void write(JSONWriter writer, Properties options)",
                "+                throws JSONException {",
                "+            writer.object();",
                "+            writer.key(\"column\"); writer.value(columnName);",
                "+            writer.key(\"propertyName\"); writer.value(propertyName);",
                "+            writer.key(\"propertyID\"); writer.value(propertyID);",
                "+            writer.endObject();",
                "+            ",
                "+        }",
                "     }",
                "@@ -135,10 +154,18 @@ public class StandardReconConfig extends ReconConfig {",
                "+    @JsonProperty(\"service\")",
                "     final public String     service;",
                "+    @JsonProperty(\"identifierSpace\")",
                "     final public String     identifierSpace;",
                "+    @JsonProperty(\"schemaSpace\")",
                "     final public String     schemaSpace;",
                "+    @JsonIgnore",
                "     final public String     typeID;",
                "+    @JsonIgnore",
                "     final public String     typeName;",
                "+    @JsonProperty(\"autoMatch\")",
                "     final public boolean    autoMatch;",
                "+    @JsonProperty(\"columnDetails\")",
                "     final public List<ColumnDetail> columnDetails;",
                "+    @JsonProperty(\"limit\")",
                "     final private int limit;",
                "@@ -212,7 +239,3 @@ public class StandardReconConfig extends ReconConfig {",
                "             for (ColumnDetail c : columnDetails) {",
                "-                writer.object();",
                "-                writer.key(\"column\"); writer.value(c.columnName);",
                "-                writer.key(\"propertyName\"); writer.value(c.propertyName);",
                "-                writer.key(\"propertyID\"); writer.value(c.propertyID);",
                "-                writer.endObject();",
                "+                c.write(writer, options);",
                "             }",
                "@@ -222,4 +245,11 @@ public class StandardReconConfig extends ReconConfig {",
                "     }",
                "+    ",
                "+    @JsonProperty(\"type\")",
                "+    public ReconType getReconType() {",
                "+        ReconType t = new ReconType(typeID, typeName);",
                "+        return t;",
                "+    }",
                "     @Override",
                "+    @JsonIgnore",
                "     public int getBatchSize() {",
                "@@ -543,2 +573,8 @@ public class StandardReconConfig extends ReconConfig {",
                "     }",
                "+",
                "+",
                "+    @Override",
                "+    public String getMode() {",
                "+        return \"standard-service\";",
                "+    }",
                " }",
                "diff --git a/main/src/com/google/refine/util/JsonViews.java b/main/src/com/google/refine/util/JsonViews.java",
                "new file mode 100644",
                "index 000000000..45074a41f",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/util/JsonViews.java",
                "@@ -0,0 +1,18 @@",
                "+package com.google.refine.util;",
                "+",
                "+",
                "+/**",
                "+ * Set of classes which define JSON visibility of certain fields.",
                "+ * @author Antonin Delpeuch",
                "+ *",
                "+ */",
                "+public class JsonViews {",
                "+    ",
                "+    public static class SaveMode {",
                "+        ;",
                "+    }",
                "+    ",
                "+    public static class NonSaveMode {",
                "+        ;",
                "+    }",
                "+}",
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index 26adc6487..1cb62bc47 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -61,3 +61,18 @@ import org.json.JSONTokener;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.databind.ObjectWriter;",
                "+import com.fasterxml.jackson.databind.ser.FilterProvider;",
                "+import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;",
                "+",
                " public class ParsingUtilities {",
                "+     ",
                "+    public static final ObjectMapper mapper = new ObjectMapper();",
                "+    public static final FilterProvider defaultFilters = new SimpleFilterProvider()",
                "+            .addFilter(\"reconCandidateFilter\", SerializationFilters.reconCandidateFilter);",
                "+    public static final FilterProvider saveFilters = new SimpleFilterProvider()",
                "+            .addFilter(\"reconCandidateFilter\", SerializationFilters.noFilter);",
                "+    ",
                "+    public static final ObjectWriter saveWriter = mapper.writerWithView(JsonViews.SaveMode.class).with(saveFilters);",
                "+    public static final ObjectWriter defaultWriter = mapper.writerWithView(JsonViews.NonSaveMode.class).with(defaultFilters);",
                "+    ",
                "     public static final DateTimeFormatter ISO8601 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");",
                "diff --git a/main/src/com/google/refine/util/SerializationFilters.java b/main/src/com/google/refine/util/SerializationFilters.java",
                "new file mode 100644",
                "index 000000000..606d463d6",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/util/SerializationFilters.java",
                "@@ -0,0 +1,55 @@",
                "+package com.google.refine.util;",
                "+",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+import com.fasterxml.jackson.databind.SerializerProvider;",
                "+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;",
                "+import com.fasterxml.jackson.databind.ser.PropertyFilter;",
                "+import com.fasterxml.jackson.databind.ser.PropertyWriter;",
                "+import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;",
                "+",
                "+import com.google.refine.model.Recon;",
                "+import com.google.refine.model.Recon.Judgment;",
                "+",
                "+public class SerializationFilters {",
                "+    static class BaseFilter extends SimpleBeanPropertyFilter {",
                "+        @Override",
                "+        public void serializeAsField(Object obj, JsonGenerator jgen, SerializerProvider provider, PropertyWriter writer)",
                "+          throws Exception {",
                "+           if (include(writer)) {",
                "+              writer.serializeAsField(obj, jgen, provider);",
                "+           } else if (!jgen.canOmitFields()) {",
                "+              writer.serializeAsOmittedField(obj, jgen, provider);",
                "+           }",
                "+        }",
                "+        ",
                "+        @Override",
                "+        protected boolean include(BeanPropertyWriter writer) {",
                "+           return true;",
                "+        }",
                "+        ",
                "+        @Override",
                "+        protected boolean include(PropertyWriter writer) {",
                "+           return true;",
                "+        }",
                "+    }",
                "+    ",
                "+    public static PropertyFilter noFilter = new BaseFilter();",
                "+    public static PropertyFilter reconCandidateFilter = new BaseFilter() {",
                "+        @Override",
                "+        public void serializeAsField(Object obj, JsonGenerator jgen, SerializerProvider provider, PropertyWriter writer)",
                "+          throws Exception {",
                "+           if (include(writer)) {",
                "+              if (!writer.getName().equals(\"c\") || ! (obj instanceof Recon)) {",
                "+                 writer.serializeAsField(obj, jgen, provider);",
                "+                 return;",
                "+              }",
                "+              Recon recon = (Recon)obj;",
                "+              if (recon.judgment == Judgment.None) {",
                "+                 writer.serializeAsField(obj, jgen, provider);",
                "+              }",
                "+           } else if (!jgen.canOmitFields()) {",
                "+              writer.serializeAsOmittedField(obj, jgen, provider);",
                "+           }",
                "+        }",
                "+     };",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/ColumnGroupTests.java b/main/tests/server/src/com/google/refine/tests/model/ColumnGroupTests.java",
                "index 83b6d8761..a964b07da 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/ColumnGroupTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/ColumnGroupTests.java",
                "@@ -2,4 +2,2 @@ package com.google.refine.tests.model;",
                "-import java.util.Properties;",
                "-",
                " import org.testng.annotations.Test;",
                "@@ -36,6 +34,4 @@ public class ColumnGroupTests {",
                "                 + \"}\";",
                "-        Properties options = new Properties();",
                "-        options.setProperty(\"mode\", \"save\");",
                "-        TestUtils.isSerializedTo(cg, json, options);",
                "-        TestUtils.isSerializedTo(cg, fullJson);",
                "+        TestUtils.isSerializedTo(cg, json, true);",
                "+        TestUtils.isSerializedTo(cg, fullJson, false);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/ColumnModelTests.java b/main/tests/server/src/com/google/refine/tests/model/ColumnModelTests.java",
                "index 89f986165..56c17abfd 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/ColumnModelTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/ColumnModelTests.java",
                "@@ -4,6 +4,47 @@ import org.testng.annotations.Test;",
                "-public class ColumnModelTests {",
                "+import com.google.refine.model.ColumnModel;",
                "+import com.google.refine.model.Project;",
                "+import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.tests.util.TestUtils;",
                "+",
                "+public class ColumnModelTests extends RefineTest {",
                "     @Test",
                "     public void serializeColumnModel() {",
                "-        String json = \"\";",
                "+        Project project = createCSVProject(\"a,b\\n\"+ ",
                "+                \"e,e\");",
                "+        String json = \"{\\n\" + ",
                "+                \"       \\\"columnGroups\\\" : [ ],\\n\" + ",
                "+                \"       \\\"columns\\\" : [ {\\n\" + ",
                "+                \"         \\\"cellIndex\\\" : 0,\\n\" + ",
                "+                \"         \\\"constraints\\\" : \\\"{}\\\",\\n\" + ",
                "+                \"         \\\"description\\\" : \\\"\\\",\\n\" + ",
                "+                \"         \\\"format\\\" : \\\"default\\\",\\n\" + ",
                "+                \"         \\\"name\\\" : \\\"a\\\",\\n\" + ",
                "+                \"         \\\"originalName\\\" : \\\"a\\\",\\n\" + ",
                "+                \"         \\\"title\\\" : \\\"\\\",\\n\" + ",
                "+                \"         \\\"type\\\" : \\\"\\\"\\n\" + ",
                "+                \"       }, {\\n\" + ",
                "+                \"         \\\"cellIndex\\\" : 1,\\n\" + ",
                "+                \"         \\\"constraints\\\" : \\\"{}\\\",\\n\" + ",
                "+                \"         \\\"description\\\" : \\\"\\\",\\n\" + ",
                "+                \"         \\\"format\\\" : \\\"default\\\",\\n\" + ",
                "+                \"         \\\"name\\\" : \\\"b\\\",\\n\" + ",
                "+                \"         \\\"originalName\\\" : \\\"b\\\",\\n\" + ",
                "+                \"         \\\"title\\\" : \\\"\\\",\\n\" + ",
                "+                \"         \\\"type\\\" : \\\"\\\"\\n\" + ",
                "+                \"       } ],\\n\" + ",
                "+                \"       \\\"keyCellIndex\\\" : 0,\\n\" + ",
                "+                \"       \\\"keyColumnName\\\" : \\\"a\\\"\\n\" + ",
                "+                \"     }\";",
                "+        TestUtils.isSerializedTo(project.columnModel, json);",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void serializeColumnModelEmpty() {",
                "+        String json = \"{\"",
                "+                + \"\\\"columns\\\":[],\"",
                "+                + \"\\\"columnGroups\\\":[]\"",
                "+                + \"}\";",
                "+        ColumnModel m = new ColumnModel();",
                "+        TestUtils.isSerializedTo(m, json);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/ReconCandidateTests.java b/main/tests/server/src/com/google/refine/tests/model/ReconCandidateTests.java",
                "index 88fed65e4..3a24cd00d 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/ReconCandidateTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/ReconCandidateTests.java",
                "@@ -9,3 +9,3 @@ public class ReconCandidateTests {",
                "     @Test",
                "-    public void serializeReconCandidate() throws Exception {",
                "+    public void serializeReconCandidateInt() throws Exception {",
                "         String json = \"{\\\"id\\\":\\\"Q49213\\\",\"",
                "@@ -17,2 +17,12 @@ public class ReconCandidateTests {",
                "     }",
                "+    ",
                "+    @Test",
                "+    public void serializeReconCandidateDouble() throws Exception {",
                "+        String json = \"{\\\"id\\\":\\\"Q49213\\\",\"",
                "+                + \"\\\"name\\\":\\\"University of Texas at Austin\\\",\"",
                "+                + \"\\\"score\\\":0.5,\"",
                "+                + \"\\\"types\\\":[\\\"Q875538\\\",\\\"Q15936437\\\",\\\"Q20971972\\\",\\\"Q23002039\\\"]}\";",
                "+        ReconCandidate rc = ReconCandidate.loadStreaming(json);",
                "+        TestUtils.isSerializedTo(rc, json);",
                "+    }",
                " }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/ReconTests.java b/main/tests/server/src/com/google/refine/tests/model/ReconTests.java",
                "index a4ad792e8..fbfcfbfa0 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/ReconTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/ReconTests.java",
                "@@ -2,4 +2,2 @@ package com.google.refine.tests.model;",
                "-import java.util.Properties;",
                "-",
                " import org.testng.annotations.Test;",
                "@@ -7,2 +5,3 @@ import org.testng.annotations.Test;",
                " import com.google.refine.model.Recon;",
                "+import com.google.refine.model.Recon.Judgment;",
                " import com.google.refine.tests.util.TestUtils;",
                "@@ -10,9 +9,35 @@ import com.google.refine.tests.util.TestUtils;",
                " public class ReconTests {",
                "+    ",
                "+    String fullJson = \"{\\\"id\\\":1533651559492945033,\"",
                "+            + \"\\\"judgmentHistoryEntry\\\":1533651616890,\"",
                "+            + \"\\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"",
                "+            + \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"",
                "+            + \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"",
                "+            + \"\\\"j\\\":\\\"matched\\\",\"",
                "+            + \"\\\"m\\\":{\"",
                "+            + \"   \\\"id\\\":\\\"Q2892284\\\",\"",
                "+            + \"   \\\"name\\\":\\\"Baylor College of Medicine\\\",\"",
                "+            + \"   \\\"score\\\":98.57142857142858,\"",
                "+            + \"   \\\"types\\\":[\\\"Q16917\\\",\\\"Q23002054\\\",\\\"Q494230\\\"]\"",
                "+            + \"},\"",
                "+            + \"\\\"c\\\":[\"",
                "+            + \"   {\\\"id\\\":\\\"Q2892284\\\",\\\"name\\\":\\\"Baylor College of Medicine\\\",\\\"score\\\":98.57142857142858,\\\"types\\\":[\\\"Q16917\\\",\\\"Q23002054\\\",\\\"Q494230\\\"]},\"",
                "+            + \"   {\\\"id\\\":\\\"Q16165943\\\",\\\"name\\\":\\\"Baylor College of Medicine Academy at Ryan\\\",\\\"score\\\":82.14285714285715,\\\"types\\\":[\\\"Q149566\\\"]},\"",
                "+            + \"   {\\\"id\\\":\\\"Q30284245\\\",\\\"name\\\":\\\"Baylor College of Medicine Children\\\\u2019s Foundation\\\",\\\"score\\\":48.57142857142858,\\\"types\\\":[\\\"Q163740\\\"]}\"",
                "+            + \"],\"",
                "+            + \"\\\"f\\\":[false,false,1,0.6666666666666666],\"",
                "+            + \"\\\"judgmentAction\\\":\\\"mass\\\",\"",
                "+            + \"\\\"judgmentBatchSize\\\":1,\"",
                "+            + \"\\\"matchRank\\\":0}\";",
                "+    ",
                "     @Test",
                "-    public void serializeRecon() throws Exception {",
                "-        Properties options = new Properties();",
                "-        options.put(\"mode\", \"save\");",
                "+    public void serializeReconSaveMode() throws Exception {      ",
                "+        Recon r = Recon.loadStreaming(fullJson, null);",
                "+        TestUtils.isSerializedTo(r, fullJson, true);",
                "+    }",
                "-        String fullJson = \"{\\\"id\\\":1533651559492945033,\"",
                "-                + \"\\\"judgmentHistoryEntry\\\":1533651616890,\"",
                "+    @Test",
                "+    public void serializeReconViewMode() throws Exception {",
                "+        Recon r = Recon.loadStreaming(fullJson, null);",
                "+        String shortJson = \"{\\\"id\\\":1533651559492945033,\"",
                "                 + \"\\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"",
                "@@ -26,3 +51,13 @@ public class ReconTests {",
                "                 + \"   \\\"types\\\":[\\\"Q16917\\\",\\\"Q23002054\\\",\\\"Q494230\\\"]\"",
                "-                + \"},\"",
                "+                + \"}}\";",
                "+        TestUtils.isSerializedTo(r, shortJson, false);",
                "+    }",
                "+    ",
                "+    @Test",
                "+    public void serializeReconSaveModeNoMatch() throws Exception {",
                "+        String json = \"{\\\"id\\\":1533651559492945033,\"",
                "+                + \"\\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"",
                "+                + \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"",
                "+                + \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"",
                "+                + \"\\\"j\\\":\\\"none\\\",\"",
                "                 + \"\\\"c\\\":[\"",
                "@@ -31,25 +66,9 @@ public class ReconTests {",
                "                 + \"   {\\\"id\\\":\\\"Q30284245\\\",\\\"name\\\":\\\"Baylor College of Medicine Children\\\\u2019s Foundation\\\",\\\"score\\\":48.57142857142858,\\\"types\\\":[\\\"Q163740\\\"]}\"",
                "-                + \"],\"",
                "-                + \"\\\"f\\\":[false,false,1,0.6666666666666666],\"",
                "-                + \"\\\"judgmentAction\\\":\\\"mass\\\",\"",
                "-                + \"\\\"judgmentBatchSize\\\":1,\"",
                "-                + \"\\\"matchRank\\\":0}\";",
                "+                + \"]\"",
                "+                + \"}\";",
                "         Recon r = Recon.loadStreaming(fullJson, null);",
                "-        TestUtils.isSerializedTo(r, fullJson, options);",
                "-        ",
                "-        String shortJson = \"{\\\"id\\\":1533651559492945033,\"",
                "-                + \"\\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"",
                "-                + \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"",
                "-                + \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"",
                "-                + \"\\\"j\\\":\\\"matched\\\",\"",
                "-                + \"\\\"m\\\":{\"",
                "-                + \"   \\\"id\\\":\\\"Q2892284\\\",\"",
                "-                + \"   \\\"name\\\":\\\"Baylor College of Medicine\\\",\"",
                "-                + \"   \\\"score\\\":98.57142857142858,\"",
                "-                + \"   \\\"types\\\":[\\\"Q16917\\\",\\\"Q23002054\\\",\\\"Q494230\\\"]\"",
                "-                + \"}}\";",
                "-        options.put(\"mode\", \"normal\");",
                "-        TestUtils.isSerializedTo(r, shortJson, options);",
                "+        r.match = null;",
                "+        r.judgment = Judgment.None;",
                "+        TestUtils.isSerializedTo(r, json);",
                "     }",
                "-    ",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/RowTests.java b/main/tests/server/src/com/google/refine/tests/model/RowTests.java",
                "index ef0a765e0..6d36f4838 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/RowTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/RowTests.java",
                "@@ -109,3 +109,3 @@ public class RowTests extends RefineTest {",
                "         row.save(writer, options);",
                "-        TestUtils.equalAsJson(writer.getBuffer().toString(),",
                "+        TestUtils.assertEqualAsJson(writer.getBuffer().toString(),",
                "                 \"{\\\"flagged\\\":false,\\\"starred\\\":false,\\\"cells\\\":[{\\\"v\\\":\\\"I'm not empty\\\"}]}\");",
                "@@ -122,3 +122,3 @@ public class RowTests extends RefineTest {",
                "         row.save(writer, options);",
                "-        TestUtils.equalAsJson(",
                "+        TestUtils.assertEqualAsJson(",
                "                 writer.getBuffer().toString(),",
                "diff --git a/main/tests/server/src/com/google/refine/tests/util/TestUtils.java b/main/tests/server/src/com/google/refine/tests/util/TestUtils.java",
                "index b0984c645..0e00b7e0c 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/util/TestUtils.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/util/TestUtils.java",
                "@@ -7,7 +7,15 @@ import java.io.File;",
                " import java.io.IOException;",
                "+import java.io.LineNumberReader;",
                "+import java.io.StringReader;",
                "+import java.io.StringWriter;",
                " import java.util.Properties;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                " import com.fasterxml.jackson.core.JsonProcessingException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                " import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.MapperFeature;",
                " import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.databind.ObjectWriter;",
                "+import com.fasterxml.jackson.databind.SerializationFeature;",
                "@@ -15,2 +23,4 @@ import com.google.refine.Jsonizable;",
                " import com.google.refine.util.JSONUtilities;",
                "+import com.google.refine.util.JsonViews;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -20,2 +30,5 @@ public class TestUtils {",
                "     static ObjectMapper mapper = new ObjectMapper();",
                "+    static {",
                "+        mapper = mapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);",
                "+    }",
                "@@ -40,3 +53,3 @@ public class TestUtils {",
                "      */",
                "-    public static void equalAsJson(String expected, String actual) {",
                "+    public static void assertEqualAsJson(String expected, String actual) {",
                "         try {",
                "@@ -50,7 +63,28 @@ public class TestUtils {",
                "+    public static boolean equalAsJson(String expected, String actual)  {",
                "+        try {",
                "+            JsonNode jsonA = mapper.readValue(expected, JsonNode.class);",
                "+            JsonNode jsonB = mapper.readValue(actual, JsonNode.class);",
                "+            return (jsonA == null && jsonB == null) || jsonA.equals(jsonB);",
                "+        } catch(Exception e) {",
                "+            return false;",
                "+        }",
                "+    }",
                "+    ",
                "     /**",
                "      * Checks that a serializable object is serialized to the target JSON string.",
                "+     * @throws IOException ",
                "      */",
                "     public static void isSerializedTo(Jsonizable o, String targetJson, Properties options) {",
                "-        equalAsJson(targetJson, JSONUtilities.serialize(o, options));",
                "+        String orgJson = JSONUtilities.serialize(o, options);",
                "+        if(!equalAsJson(targetJson, orgJson)) {",
                "+            System.out.println(\"org.json, \"+o.getClass().getName());",
                "+            try {",
                "+                jsonDiff(targetJson, orgJson);",
                "+            } catch (JsonParseException | JsonMappingException e) {",
                "+                // TODO Auto-generated catch block",
                "+                e.printStackTrace();",
                "+            }",
                "+        }",
                "+        assertEqualAsJson(targetJson, orgJson);",
                "@@ -58,7 +92,19 @@ public class TestUtils {",
                "         try {",
                "-\t\t\tequalAsJson(targetJson, mapper.writeValueAsString(o));",
                "-\t\t} catch (JsonProcessingException e) {",
                "-\t\t\te.printStackTrace();",
                "-\t\t\tfail(\"jackson serialization failed\");",
                "-\t\t}",
                "+            String saveMode = options.getProperty(\"mode\");",
                "+            ObjectWriter writer = null;",
                "+            if(\"save\".equals(saveMode)) {",
                "+                writer = ParsingUtilities.saveWriter;",
                "+            } else {",
                "+                writer = ParsingUtilities.defaultWriter;",
                "+            }",
                "+            String jacksonJson = writer.writeValueAsString(o);",
                "+            if(!equalAsJson(targetJson, jacksonJson)) {",
                "+                System.out.println(\"jackson, \"+o.getClass().getName());",
                "+                jsonDiff(targetJson, jacksonJson);",
                "+            }",
                "+    \t    assertEqualAsJson(targetJson, jacksonJson);",
                "+    \t} catch (JsonProcessingException e) {",
                "+    \t    e.printStackTrace();",
                "+    \t    fail(\"jackson serialization failed\");",
                "+    \t}",
                "     }",
                "@@ -71,2 +117,62 @@ public class TestUtils {",
                "     }",
                "+    ",
                "+    /**",
                "+     * Checks that a serializable object is serialized to the target JSON string.",
                "+     * This specifies the \"save mode\" for objects that are stored differently depending on",
                "+     * whether they are written to disk or sent over the network.",
                "+     */",
                "+    public static void isSerializedTo(Jsonizable o, String targetJson, boolean saveMode) {",
                "+        Properties options = new Properties();",
                "+        if(saveMode) {",
                "+            options.setProperty(\"mode\", \"save\");",
                "+            options.put(\"mode\", \"save\");",
                "+        }",
                "+        isSerializedTo(o, targetJson, options);",
                "+    }",
                "+    ",
                "+    public static void jsonDiff(String a, String b) throws JsonParseException, JsonMappingException {",
                "+        ObjectMapper myMapper = mapper.copy().configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)",
                "+                .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true)",
                "+                .configure(SerializationFeature.INDENT_OUTPUT, true);",
                "+        try {",
                "+            JsonNode nodeA = myMapper.readValue(a, JsonNode.class);",
                "+            JsonNode nodeB = myMapper.readValue(b, JsonNode.class);",
                "+            String prettyA = myMapper.writeValueAsString(myMapper.treeToValue(nodeA, Object.class));",
                "+            String prettyB = myMapper.writeValueAsString(myMapper.treeToValue(nodeB, Object.class));",
                "+            ",
                "+            // Compute the max line length of A",
                "+            LineNumberReader readerA = new LineNumberReader(new StringReader(prettyA));",
                "+            int maxLength = 0;",
                "+            String line = readerA.readLine();",
                "+            while (line != null) {",
                "+                if(line.length() > maxLength) {",
                "+                    maxLength = line.length();",
                "+                }",
                "+                line = readerA.readLine();",
                "+            }",
                "+            ",
                "+            // Pad all lines",
                "+            readerA = new LineNumberReader(new StringReader(prettyA));",
                "+            LineNumberReader readerB = new LineNumberReader(new StringReader(prettyB));",
                "+            StringWriter writer = new StringWriter();",
                "+            String lineA = readerA.readLine();",
                "+            String lineB = readerB.readLine();",
                "+            while(lineA != null || lineB != null) {",
                "+                if (lineA == null) {",
                "+                    lineA = \"\";",
                "+                }",
                "+                if (lineB == null) {",
                "+                    lineB = \"\";",
                "+                }",
                "+                String paddedLineA = lineA +  new String(new char[maxLength + 2 - lineA.length()]).replace(\"\\0\", \" \");",
                "+                writer.write(paddedLineA);",
                "+                writer.write(lineB + \"\\n\");",
                "+                lineA = readerA.readLine();",
                "+                lineB = readerB.readLine();",
                "+            }",
                "+            System.out.print(writer.toString());",
                "+        } catch(IOException e) {",
                "+            e.printStackTrace();",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/Cell.java",
                "main/src/com/google/refine/model/Column.java",
                "main/src/com/google/refine/model/ColumnGroup.java",
                "main/src/com/google/refine/model/ColumnModel.java",
                "main/src/com/google/refine/model/Recon.java",
                "main/src/com/google/refine/model/ReconCandidate.java",
                "main/src/com/google/refine/model/RecordModel.java",
                "main/src/com/google/refine/model/Row.java",
                "main/src/com/google/refine/model/recon/ReconConfig.java",
                "main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "main/src/com/google/refine/util/JsonViews.java",
                "main/src/com/google/refine/util/ParsingUtilities.java",
                "main/src/com/google/refine/util/SerializationFilters.java",
                "main/tests/server/src/com/google/refine/tests/model/ColumnGroupTests.java",
                "main/tests/server/src/com/google/refine/tests/model/ColumnModelTests.java",
                "main/tests/server/src/com/google/refine/tests/model/ReconCandidateTests.java",
                "main/tests/server/src/com/google/refine/tests/model/ReconTests.java",
                "main/tests/server/src/com/google/refine/tests/model/RowTests.java",
                "main/tests/server/src/com/google/refine/tests/util/TestUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "76e491ac2613687f8dadcfb4a2327dfb78ddccc8",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543720106,
            "hunks": 1,
            "message": "Add test-output to .gitignore",
            "diff": [
                "diff --git a/.gitignore b/.gitignore",
                "index df4a7d55c..a3393f62a 100644",
                "--- a/.gitignore",
                "+++ b/.gitignore",
                "@@ -38,2 +38,3 @@ extensions/target",
                " target/",
                "+**/test-output/*",
                " *.versionsBackup"
            ],
            "changed_files": [
                ".gitignore"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "121dd76fa1c3b8f10eb05547f5e39406c21b60eb",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540146334,
            "hunks": 2,
            "message": "Jackson deserialization for DecoratedValue",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/DecoratedValue.java b/main/src/com/google/refine/browsing/DecoratedValue.java",
                "index fc8ef95e7..67aa8a09d 100644",
                "--- a/main/src/com/google/refine/browsing/DecoratedValue.java",
                "+++ b/main/src/com/google/refine/browsing/DecoratedValue.java",
                "@@ -37,2 +37,3 @@ import java.time.OffsetDateTime;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -54,3 +55,8 @@ public class DecoratedValue  {",
                "-    public DecoratedValue(Object value, String label) {",
                "+    @JsonCreator",
                "+    public DecoratedValue(",
                "+            @JsonProperty(\"v\")",
                "+            Object value,",
                "+            @JsonProperty(\"l\")",
                "+            String label) {",
                "       if (value instanceof OffsetDateTime) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/DecoratedValue.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "121661e8ebc393a537e44f75ac5d586ad027ab89",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542741094,
            "hunks": 3,
            "message": "Let OverlayModels access the Project at deserialization time",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/OverlayModel.java b/main/src/com/google/refine/model/OverlayModel.java",
                "index 7ca914173..4867d4607 100644",
                "--- a/main/src/com/google/refine/model/OverlayModel.java",
                "+++ b/main/src/com/google/refine/model/OverlayModel.java",
                "@@ -35,3 +35,9 @@ package com.google.refine.model;",
                "-",
                "+/**",
                "+ * Overlay models must be serializable and deserializable with Jackson.",
                "+ * It is possible to have access to the project at deserialization time",
                "+ * by adding the corresponding parameter to the JSON creator with",
                "+ * @JacksonInject(\"project\").",
                "+ *",
                "+ */",
                " public interface OverlayModel  {",
                "diff --git a/main/src/com/google/refine/model/Project.java b/main/src/com/google/refine/model/Project.java",
                "index f07532d86..0d54ff603 100644",
                "--- a/main/src/com/google/refine/model/Project.java",
                "+++ b/main/src/com/google/refine/model/Project.java",
                "@@ -52,2 +52,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.databind.InjectableValues;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                " import com.google.refine.ProjectManager;",
                "@@ -190,2 +192,6 @@ public class Project {",
                "+        ObjectMapper mapper = ParsingUtilities.mapper.copy();",
                "+        InjectableValues injections = new InjectableValues.Std().addValue(\"project\", project);",
                "+        mapper.setInjectableValues(injections);",
                "+        ",
                "         String line;"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/OverlayModel.java",
                "main/src/com/google/refine/model/Project.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "83331da8e154218be1f4949e18b590514326b70e",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542731845,
            "hunks": 1,
            "message": "Make ReconResult static",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/recon/StandardReconConfig.java b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "index 5a0408ed4..0816d3237 100644",
                "--- a/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/StandardReconConfig.java",
                "@@ -288,3 +288,3 @@ public class StandardReconConfig extends ReconConfig {",
                "-    public class ReconResult {",
                "+    public static class ReconResult {",
                "     \t@JsonProperty(\"name\")"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/recon/StandardReconConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "59f322d6077acd6fd77cb8b0fe0f03e6d822836c",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540214719,
            "hunks": 7,
            "message": "Remove AbstractOperation.reconstruct",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java b/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "index 136109acf..8fbfeab44 100644",
                "--- a/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "+++ b/main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "@@ -49,3 +49,2 @@ import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "-import com.google.refine.operations.OperationRegistry;",
                " import com.google.refine.process.Process;",
                "@@ -81,3 +80,3 @@ public class ApplyOperationsCommand extends Command {",
                "     protected void reconstructOperation(Project project, JSONObject obj) throws IOException {",
                "-        AbstractOperation operation = OperationRegistry.reconstruct(project, obj);",
                "+        AbstractOperation operation = ParsingUtilities.mapper.readValue(obj.toString(), AbstractOperation.class);",
                "         if (operation != null) {",
                "diff --git a/main/src/com/google/refine/history/HistoryEntry.java b/main/src/com/google/refine/history/HistoryEntry.java",
                "index f2c7f793d..137bae283 100644",
                "--- a/main/src/com/google/refine/history/HistoryEntry.java",
                "+++ b/main/src/com/google/refine/history/HistoryEntry.java",
                "@@ -51,3 +51,2 @@ import com.google.refine.model.AbstractOperation;",
                " import com.google.refine.model.Project;",
                "-import com.google.refine.operations.OperationRegistry;",
                " import com.google.refine.util.JsonViews;",
                "@@ -161,3 +160,3 @@ public class HistoryEntry  {",
                "         if (obj.has(OPERATION) && !obj.isNull(OPERATION)) {",
                "-            operation = OperationRegistry.reconstruct(project, obj.getJSONObject(OPERATION));",
                "+            operation = ParsingUtilities.mapper.readValue(obj.getJSONObject(OPERATION).toString(), AbstractOperation.class);",
                "         }",
                "diff --git a/main/src/com/google/refine/model/AbstractOperation.java b/main/src/com/google/refine/model/AbstractOperation.java",
                "index 16fd68741..6ab8135c3 100644",
                "--- a/main/src/com/google/refine/model/AbstractOperation.java",
                "+++ b/main/src/com/google/refine/model/AbstractOperation.java",
                "@@ -43,2 +43,3 @@ import com.google.refine.history.HistoryEntry;",
                " import com.google.refine.operations.OperationRegistry;",
                "+import com.google.refine.operations.OperationResolver;",
                " import com.google.refine.process.Process;",
                "diff --git a/main/src/com/google/refine/operations/OperationRegistry.java b/main/src/com/google/refine/operations/OperationRegistry.java",
                "index e947c510c..3a352917e 100644",
                "--- a/main/src/com/google/refine/operations/OperationRegistry.java",
                "+++ b/main/src/com/google/refine/operations/OperationRegistry.java",
                "@@ -84,6 +84,2 @@ public abstract class OperationRegistry {",
                "     }",
                "-    ",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), AbstractOperation.class);",
                "-    }",
                " }",
                "diff --git a/main/src/com/google/refine/operations/OperationResolver.java b/main/src/com/google/refine/operations/OperationResolver.java",
                "new file mode 100644",
                "index 000000000..5f8085e48",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/operations/OperationResolver.java",
                "@@ -0,0 +1,36 @@",
                "+package com.google.refine.operations;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;",
                "+import com.fasterxml.jackson.databind.DatabindContext;",
                "+import com.fasterxml.jackson.databind.JavaType;",
                "+import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;",
                "+import com.fasterxml.jackson.databind.type.TypeFactory;",
                "+",
                "+import com.google.refine.model.AbstractOperation;",
                "+",
                "+public class OperationResolver extends TypeIdResolverBase {",
                "+    ",
                "+    protected TypeFactory factory = TypeFactory.defaultInstance();",
                "+",
                "+    @Override",
                "+    public Id getMechanism() {",
                "+        return Id.NAME;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String idFromValue(Object instance) {",
                "+        return ((AbstractOperation)instance).getOperationId();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String idFromValueAndType(Object instance, Class<?> type) {",
                "+        return OperationRegistry.s_opClassToName.get(type);",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public JavaType typeFromId(DatabindContext context, String id) throws IOException {",
                "+        return factory.constructSimpleType(OperationRegistry.resolveOperationId(id), new JavaType[0]);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/history/ApplyOperationsCommand.java",
                "main/src/com/google/refine/history/HistoryEntry.java",
                "main/src/com/google/refine/model/AbstractOperation.java",
                "main/src/com/google/refine/operations/OperationRegistry.java",
                "main/src/com/google/refine/operations/OperationResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "eb666198400b8aa9811dee180630d901a12f5524",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540199483,
            "hunks": 22,
            "message": "Jackson deserialization for ExtendDataOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/recon/ExtendDataCommand.java b/main/src/com/google/refine/commands/recon/ExtendDataCommand.java",
                "index 30adcb526..760c69e62 100644",
                "--- a/main/src/com/google/refine/commands/recon/ExtendDataCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/ExtendDataCommand.java",
                "@@ -43,3 +43,2 @@ import com.google.refine.model.recon.ReconciledDataExtensionJob.DataExtensionCon",
                " import com.google.refine.operations.recon.ExtendDataOperation;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -57,3 +56,3 @@ public class ExtendDataCommand extends EngineDependentCommand {",
                "         String jsonString = request.getParameter(\"extension\");",
                "-        DataExtensionConfig extension = DataExtensionConfig.reconstruct(ParsingUtilities.evaluateJsonStringToObject(jsonString));",
                "+        DataExtensionConfig extension = DataExtensionConfig.reconstruct(jsonString);",
                "diff --git a/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java b/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "index c8d13a2aa..f42675fa0 100644",
                "--- a/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "+++ b/main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "@@ -95,3 +95,3 @@ public class PreviewExtendDataCommand extends Command {",
                "             String jsonString = request.getParameter(\"extension\");",
                "-            DataExtensionConfig config = DataExtensionConfig.reconstruct(ParsingUtilities.evaluateJsonStringToObject(jsonString));",
                "+            DataExtensionConfig config = DataExtensionConfig.reconstruct(jsonString);",
                "diff --git a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "index 47f575600..13a630e5c 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "@@ -109,6 +109,6 @@ public class ReconciledDataExtensionJob {",
                "-        public static DataExtensionConfig reconstruct(JSONObject obj) throws JSONException {",
                "+        public static DataExtensionConfig reconstruct(String json) throws JSONException {",
                "             ObjectMapper mapper = new ObjectMapper();",
                "             try {",
                "-                return mapper.readValue(obj.toString(), DataExtensionConfig.class);",
                "+                return mapper.readValue(json, DataExtensionConfig.class);",
                "             } catch(IOException e) {",
                "diff --git a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "index fac3243ed..e0aa039e4 100644",
                "--- a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "@@ -46,2 +46,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -69,2 +70,3 @@ import com.google.refine.process.LongRunningProcess;",
                " import com.google.refine.process.Process;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -86,24 +88,20 @@ public class ExtendDataOperation extends EngineDependentOperation {",
                "     static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        ",
                "-        DataExtensionConfig dataExtensionConfig = DataExtensionConfig.reconstruct(obj.getJSONObject(\"extension\"));",
                "-        ",
                "-        return new ExtendDataOperation(",
                "-            EngineConfig.reconstruct(engineConfig),",
                "-            obj.getString(\"baseColumnName\"),",
                "-            obj.getString(\"endpoint\"),",
                "-            obj.getString(\"identifierSpace\"),",
                "-            obj.getString(\"schemaSpace\"),",
                "-            dataExtensionConfig,",
                "-            obj.getInt(\"columnInsertIndex\")",
                "-        );",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ExtendDataOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public ExtendDataOperation(",
                "+        @JsonProperty(\"engineConfig\")",
                "         EngineConfig        engineConfig,",
                "+        @JsonProperty(\"baseColumnName\")",
                "         String              baseColumnName,",
                "+        @JsonProperty(\"endpoint\")",
                "         String              endpoint,",
                "+        @JsonProperty(\"identifierSpace\")",
                "         String              identifierSpace,",
                "+        @JsonProperty(\"schemaSpace\")",
                "         String              schemaSpace,",
                "+        @JsonProperty(\"extension\")",
                "         DataExtensionConfig extension,",
                "+        @JsonProperty(\"columnInsertIndex\")",
                "         int                 columnInsertIndex ",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "index 02df8cfb5..17cdb98ba 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "@@ -179,3 +179,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void serializeDataExtensionConfig() {",
                "-        TestUtils.isSerializedTo(DataExtensionConfig.reconstruct(new JSONObject(dataExtensionConfigJson)), dataExtensionConfigJson);",
                "+        TestUtils.isSerializedTo(DataExtensionConfig.reconstruct(dataExtensionConfigJson), dataExtensionConfigJson);",
                "     }",
                "@@ -184,3 +184,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void testFormulateQuery() throws IOException {",
                "-        DataExtensionConfig config = DataExtensionConfig.reconstruct(new JSONObject(dataExtensionConfigJson));",
                "+        DataExtensionConfig config = DataExtensionConfig.reconstruct(dataExtensionConfigJson);",
                "         Set<String> ids = Collections.singleton(\"Q2\");",
                "@@ -216,3 +216,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     public void testFetchStrings() throws Exception {",
                "-        DataExtensionConfig extension = DataExtensionConfig.reconstruct(new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P297\\\",\\\"name\\\":\\\"ISO 3166-1 alpha-2 code\\\"}]}\"));",
                "+        DataExtensionConfig extension = DataExtensionConfig.reconstruct(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P297\\\",\\\"name\\\":\\\"ISO 3166-1 alpha-2 code\\\"}]}\");",
                "@@ -254,3 +254,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "         DataExtensionConfig extension = DataExtensionConfig.reconstruct(",
                "-                new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"count\\\":\\\"on\\\",\\\"rank\\\":\\\"any\\\"}}]}\"));",
                "+                \"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"count\\\":\\\"on\\\",\\\"rank\\\":\\\"any\\\"}}]}\");",
                "@@ -289,3 +289,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "         DataExtensionConfig extension = DataExtensionConfig.reconstruct(",
                "-                new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"rank\\\":\\\"best\\\"}}]}\"));",
                "+                \"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"rank\\\":\\\"best\\\"}}]}\");",
                "@@ -330,3 +330,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "         DataExtensionConfig extension = DataExtensionConfig.reconstruct(",
                "-                new JSONObject(\"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"rank\\\":\\\"any\\\"}}]}\"));",
                "+                \"{\\\"properties\\\":[{\\\"id\\\":\\\"P38\\\",\\\"name\\\":\\\"currency\\\",\\\"settings\\\":{\\\"rank\\\":\\\"any\\\"}}]}\");"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/recon/ExtendDataCommand.java",
                "main/src/com/google/refine/commands/recon/PreviewExtendDataCommand.java",
                "main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "472dc7f2ac3251acf48940bd26cb2149020fde86",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542653186,
            "hunks": 7,
            "message": "Migrate PreviewExpressionCommand to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java b/main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java",
                "index 135bf92b5..1ba11ac7e 100644",
                "--- a/main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java",
                "+++ b/main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java",
                "@@ -46,6 +46,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                "@@ -54,2 +50,6 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.annotation.JsonValue;",
                "+import com.fasterxml.jackson.core.JsonProcessingException;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.commands.Command;",
                "@@ -141,4 +141,4 @@ public class PreviewExpressionCommand extends Command {",
                "-            JSONArray rowIndices = ParsingUtilities.evaluateJsonStringToArray(rowIndicesString);",
                "-            int length = rowIndices.length();",
                "+            List<Integer> rowIndices = ParsingUtilities.mapper.readValue(rowIndicesString, new TypeReference<List<Integer>>() {});",
                "+            int length = rowIndices.size();",
                "@@ -152,3 +152,3 @@ public class PreviewExpressionCommand extends Command {",
                "-                    int rowIndex = rowIndices.getInt(i);",
                "+                    int rowIndex = rowIndices.get(i);",
                "                     if (rowIndex >= 0 && rowIndex < project.rows.size()) {",
                "@@ -204,3 +204,3 @@ public class PreviewExpressionCommand extends Command {",
                "-    static protected void writeValue(StringBuffer sb, Object v, boolean quote) throws JSONException {",
                "+    static protected void writeValue(StringBuffer sb, Object v, boolean quote) {",
                "         if (ExpressionUtils.isError(v)) {",
                "@@ -215,6 +215,6 @@ public class PreviewExpressionCommand extends Command {",
                "                     sb.append(\"[object Row]\");",
                "-                } else if (v instanceof JSONObject) {",
                "-                   sb.append(((JSONObject) v).toString());",
                "-                } else if (v instanceof JSONArray) {",
                "-                    sb.append(((JSONArray) v).toString());",
                "+                } else if (v instanceof ObjectNode) {",
                "+                   sb.append(((ObjectNode) v).toString());",
                "+                } else if (v instanceof ArrayNode) {",
                "+                    sb.append(((ArrayNode) v).toString());",
                "                 } else if (ExpressionUtils.isArray(v)) {",
                "@@ -246,3 +246,7 @@ public class PreviewExpressionCommand extends Command {",
                "                     if (quote) {",
                "-                        sb.append(JSONObject.quote((String) v));",
                "+                        try {",
                "+\t\t\t\t\t\t\tsb.append(ParsingUtilities.mapper.writeValueAsString(((String) v)));",
                "+\t\t\t\t\t\t} catch (JsonProcessingException e) {",
                "+\t\t\t\t\t\t\t// will not happen",
                "+\t\t\t\t\t\t}",
                "                     } else {"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/expr/PreviewExpressionCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a57082ef3e599a7d8c520f3155f021823af68915",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544529577,
            "hunks": 94,
            "message": "Hook the new command to the UI to expose all clusterers",
            "diff": [
                "diff --git a/main/src/com/google/refine/clustering/binning/KeyerFactory.java b/main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "index be4998450..c17f7ab88 100644",
                "--- a/main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "+++ b/main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "@@ -2,5 +2,7 @@ package com.google.refine.clustering.binning;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Set;",
                "@@ -14,12 +16,14 @@ public class KeyerFactory {",
                "-\tstatic final protected Map<String, Keyer> _keyers = new HashMap<String, Keyer>();",
                "+\tstatic final private Map<String, Keyer> _keyers = new HashMap<String, Keyer>();",
                "+\t// We cannot derive this from the hashmap as the order matters",
                "+\tstatic final private List<String> _keyerNames = new LinkedList<>();",
                "     static {",
                "-        _keyers.put(\"fingerprint\", new FingerprintKeyer());",
                "-        _keyers.put(\"ngram-fingerprint\", new NGramFingerprintKeyer());",
                "-        _keyers.put(\"metaphone\", new MetaphoneKeyer());",
                "-        _keyers.put(\"double-metaphone\", new DoubleMetaphoneKeyer());",
                "-        _keyers.put(\"metaphone3\", new Metaphone3Keyer());",
                "-        _keyers.put(\"soundex\", new SoundexKeyer());",
                "-        _keyers.put(\"cologne-phonetic\", new ColognePhoneticKeyer());",
                "+        put(\"fingerprint\", new FingerprintKeyer());",
                "+        put(\"ngram-fingerprint\", new NGramFingerprintKeyer());",
                "+        put(\"metaphone\", new MetaphoneKeyer());",
                "+        put(\"double-metaphone\", new DoubleMetaphoneKeyer());",
                "+        put(\"metaphone3\", new Metaphone3Keyer());",
                "+        put(\"soundex\", new SoundexKeyer());",
                "+        put(\"cologne-phonetic\", new ColognePhoneticKeyer());",
                "     }",
                "@@ -38,2 +42,3 @@ public class KeyerFactory {",
                "     \t_keyers.put(name, keyer);",
                "+    \t_keyerNames.add(name);",
                "     }",
                "@@ -42,5 +47,6 @@ public class KeyerFactory {",
                "      * Set of available keyer, by names.",
                "+     * The first keyer is considered the default one.",
                "      */",
                "-    public static Set<String> getKeyerNames() {",
                "-    \treturn _keyers.keySet();",
                "+    public static List<String> getKeyerNames() {",
                "+    \treturn Collections.unmodifiableList(_keyerNames);",
                "     }",
                "diff --git a/main/src/com/google/refine/clustering/knn/DistanceFactory.java b/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "index 7f7a71f07..9d90a82d2 100644",
                "--- a/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "+++ b/main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "@@ -2,5 +2,7 @@ package com.google.refine.clustering.knn;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Set;",
                "@@ -23,12 +25,14 @@ public class DistanceFactory {",
                "     static final protected Map<String, SimilarityDistance> _distances = new HashMap<>();",
                "+    // We cannot derive this from the hashmap as the order matters",
                "+\tprivate static List<String> _distanceNames = new LinkedList<>();",
                "     static {",
                "-        _distances.put(\"levenshtein\", new VicinoDistance(new LevenshteinDistance()));",
                "-        _distances.put(\"jaccard\", new VicinoDistance(new JaccardDistance()));",
                "-        _distances.put(\"jaro\", new VicinoDistance(new JaroDistance()));",
                "-        _distances.put(\"jaro-winkler\", new VicinoDistance(new JaroWinklerDistance()));",
                "-        _distances.put(\"jaro-winkler-tfidf\", new VicinoDistance(new JaroWinklerTFIDFDistance()));",
                "-        _distances.put(\"gzip\", new VicinoDistance(new GZipDistance()));",
                "-        _distances.put(\"bzip2\", new VicinoDistance(new BZip2Distance()));",
                "-        _distances.put(\"ppm\", new VicinoDistance(new PPMDistance()));",
                "+        put(\"levenshtein\", new VicinoDistance(new LevenshteinDistance()));",
                "+        put(\"jaccard\", new VicinoDistance(new JaccardDistance()));",
                "+        put(\"jaro\", new VicinoDistance(new JaroDistance()));",
                "+        put(\"jaro-winkler\", new VicinoDistance(new JaroWinklerDistance()));",
                "+        put(\"jaro-winkler-tfidf\", new VicinoDistance(new JaroWinklerTFIDFDistance()));",
                "+        put(\"gzip\", new VicinoDistance(new GZipDistance()));",
                "+        put(\"bzip2\", new VicinoDistance(new BZip2Distance()));",
                "+        put(\"ppm\", new VicinoDistance(new PPMDistance()));",
                "     }",
                "@@ -47,2 +51,3 @@ public class DistanceFactory {",
                "     \t_distances.put(name, distance);",
                "+    \t_distanceNames.add(name);",
                "     }",
                "@@ -52,4 +57,4 @@ public class DistanceFactory {",
                "      */",
                "-    public static Set<String> getDistanceNames() {",
                "-    \treturn _distances.keySet();",
                "+    public static List<String> getDistanceNames() {",
                "+    \treturn Collections.unmodifiableList(_distanceNames);",
                "     }",
                "diff --git a/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java b/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "index 5cc9b7482..2543d22ab 100644",
                "--- a/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "+++ b/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "@@ -4,3 +4,3 @@ package com.google.refine.commands.browsing;",
                " import java.io.IOException;",
                "-import java.util.Set;",
                "+import java.util.List;",
                "@@ -23,10 +23,6 @@ public class GetClusteringFunctionsAndDistancesCommand extends Command {",
                " \t\t@JsonProperty(\"distances\")",
                "-\t\tpublic Set<String> getDistances() {",
                "-\t\t\treturn DistanceFactory.getDistanceNames();",
                "-\t\t}",
                "+\t\tpublic List<String> distances = DistanceFactory.getDistanceNames();",
                " \t\t@JsonProperty(\"keyers\")",
                "-\t\tpublic Set<String> getKeyers() {",
                "-\t\t\treturn KeyerFactory.getKeyerNames();",
                "-\t\t}",
                "+\t\tpublic List<String> keyers = KeyerFactory.getKeyerNames();",
                " \t}",
                "diff --git a/main/webapp/modules/core/langs/translation-ceb.json b/main/webapp/modules/core/langs/translation-ceb.json",
                "index 612066984..bf59fc461 100644",
                "--- a/main/webapp/modules/core/langs/translation-ceb.json",
                "+++ b/main/webapp/modules/core/langs/translation-ceb.json",
                "@@ -159,3 +159,3 @@",
                "     \"core-dialogs/focusing-on\": \"Pagpukos sa\",",
                "-    \"core-dialogs/fingerprint\": \"Mga tudlo\",",
                "+    \"clustering-keyers/fingerprint\": \"Mga tudlo\",",
                "     \"core-dialogs/block-chars\": \"Block&nbsp; Chars&nbsp;\",",
                "@@ -163,3 +163,3 @@",
                "     \"core-dialogs/short-format\": \"Maba ang pormat sa locale\",",
                "-    \"core-dialogs/leven\": \"levenstin\",",
                "+    \"clustering-distances/levenshtein\": \"levenstin\",",
                "     \"core-dialogs/rotated-clock\": \"Gituyok sa 45\u00c2\u00b0 sa hustong oras\",",
                "@@ -169,3 +169,3 @@",
                "     \"core-dialogs/cluster-descr\": \"Kani nga kalidad tabangan mutabang sa pagpangita sa grupo sa ngkadaiyang balyo sa mga cells para aduna kay kapiliannga ikapakita sa pareho nga butang. Pananglitan, duha ka strings \\\"New York\\\" ug \\\"new york\\\" nga hapit magkapreha kung ireper nmu sa pareho nga konsepto ug nagkalahi lang sa gidak on, ug \\\"G\u00c3\u00b6del\\\" ug \\\"Godel\\\" nga kani nag reper ra sa usa ka tawo.\",",
                "-    \"core-dialogs/phonetic\": \"Kolon-ponetik\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"Kolon-ponetik\",",
                "     \"core-dialogs/found\": \"nakit an\",",
                "@@ -202,3 +202,3 @@",
                "     \"core-dialogs/json-text\": \"Ang musunod JSON text nag enkod ug mga kapilian nga imung ibutang sa uban nga tab. Makakopya ka ug isave unya, ug itapot ug balik unya iklik Iapply ang ginamit nga parehang mga pinilian.\",",
                "-    \"core-dialogs/ngram\": \"ngram-nga tudlo\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram-nga tudlo\",",
                "     \"core-dialogs/reorder-column\": \"Order ug balik / Tangtanga ang mga kolum\",",
                "@@ -210,3 +210,3 @@",
                "     \"core-dialogs/for-recon-cell\": \"Para sa inuli nga cells, resulta\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/cell-value\": \"Ang kasamtangan nga bili sa mga cell. Mao kini ang shortcut para 'cell.value'.\",",
                "@@ -262,3 +262,3 @@",
                "     \"core-dialogs/big-dot\": \"Dagko ang gidak on sa dot\",",
                "-    \"core-dialogs/metaphone\": \"metapon3\",",
                "+    \"clustering-keyers/metaphone3\": \"metapon3\",",
                "     \"core-facets/regular-dot\": \"Regular nga sukod sa dot\",",
                "diff --git a/main/webapp/modules/core/langs/translation-de.json b/main/webapp/modules/core/langs/translation-de.json",
                "index e8293456a..e4ae48233 100644",
                "--- a/main/webapp/modules/core/langs/translation-de.json",
                "+++ b/main/webapp/modules/core/langs/translation-de.json",
                "@@ -162,3 +162,3 @@",
                "     \"core-dialogs/focusing-on\": \"mit Schwerpunkt auf\",",
                "-    \"core-dialogs/fingerprint\": \"Fingerabdruck\",",
                "+    \"clustering-keyers/fingerprint\": \"Fingerabdruck\",",
                "     \"core-dialogs/block-chars\": \"Block&nbsp;Zeichen&nbsp;\",",
                "@@ -166,3 +166,3 @@",
                "     \"core-dialogs/short-format\": \"Kurzes Gebietsschema\",",
                "-    \"core-dialogs/leven\": \"Levenshtein\",",
                "+    \"clustering-distances/levenshtein\": \"Levenshtein\",",
                "     \"core-dialogs/sqlExporterIgnoreFacets\": \"Facetten und Filter ignorieren und alle Zeilen exportieren\",",
                "@@ -174,3 +174,3 @@",
                "     \"core-dialogs/cluster-descr\": \"Diese Funktion hilft Ihnen, Gruppen von verschiedenen Zellwerten zu finden, die alternative Darstellungen derselben Sache sein k\u00c3\u00b6nnten. Beispielsweise beziehen sich die beiden Zeichenketten \\\"New York\\\" und \\\"new york\\\" sehr wahrscheinlich auf dasselbe Konzept und haben nur Unterschiede in der Gro\u00c3\u009fschreibung, und \\\"G\u00c3\u00b6del\\\" und \\\"Godel\\\" beziehen sich wahrscheinlich auf dieselbe Person.\",",
                "-    \"core-dialogs/phonetic\": \"k\u00c3\u00b6lsch-phonetisch\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"k\u00c3\u00b6lsch-phonetisch\",",
                "     \"core-dialogs/found\": \"gefunden\",",
                "@@ -208,3 +208,3 @@",
                "     \"core-dialogs/json-text\": \"Der folgende JSON-Text kodiert die Optionen, die Sie in den anderen Registerkarten eingestellt haben. Sie k\u00c3\u00b6nnen es herauskopieren und f\u00c3\u00bcr sp\u00c3\u00a4ter speichern, wieder einf\u00c3\u00bcgen und auf \u00c3\u009cbernehmen klicken, um die gleichen Optionen wiederzuverwenden.\",",
                "-    \"core-dialogs/ngram\": \"ngram-Fingerabdruck\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram-Fingerabdruck\",",
                "     \"core-dialogs/reorder-column\": \"Spalten neu ordnen / entfernen\",",
                "@@ -216,3 +216,3 @@",
                "     \"core-dialogs/for-recon-cell\": \"Ausgabe f\u00c3\u00bcr abgestimmte Zellen\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/cell-value\": \"Der aktuelle Wert der Zelle. Dies ist eine Abk\u00c3\u00bcrzung f\u00c3\u00bcr 'cell.value'.\",",
                "@@ -277,3 +277,3 @@",
                "     \"core-dialogs/big-dot\": \"Gro\u00c3\u009fe Punktgr\u00c3\u00b6\u00c3\u009fe\",",
                "-    \"core-dialogs/metaphone\": \"metaphone3\",",
                "+    \"clustering-keyers/metaphone3\": \"metaphone3\",",
                "     \"core-dialogs/sql-exporter\": \"SQL-Exporteur\",",
                "diff --git a/main/webapp/modules/core/langs/translation-en.json b/main/webapp/modules/core/langs/translation-en.json",
                "index 95cf95ff5..ee6b7f666 100644",
                "--- a/main/webapp/modules/core/langs/translation-en.json",
                "+++ b/main/webapp/modules/core/langs/translation-en.json",
                "@@ -149,2 +149,3 @@",
                "     \"core-index-parser/column-names-optional\": \"comma separated\",",
                "+    \"core-dialogs/no-clustering-functions-and-distances\": \"The clustering functions and distances could not be loaded.\",",
                "     \"core-dialogs/cluster-edit\": \"Cluster & Edit column\",",
                "@@ -175,9 +176,9 @@",
                "     \"core-dialogs/keying-function\": \"Keying&nbsp;Function&nbsp;\",",
                "-    \"core-dialogs/fingerprint\": \"fingerprint\",",
                "-    \"core-dialogs/ngram\": \"ngram-fingerprint\",",
                "-    \"core-dialogs/metaphone\": \"metaphone3\",",
                "-    \"core-dialogs/phonetic\": \"cologne-phonetic\",",
                "+    \"clustering-keyers/fingerprint\": \"fingerprint\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram-fingerprint\",",
                "+    \"clustering-keyers/metaphone3\": \"metaphone3\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"cologne-phonetic\",",
                "     \"core-dialogs/distance-fun\": \"Distance&nbsp;Function&nbsp;\",",
                "-    \"core-dialogs/leven\": \"levenshtein\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/levenshtein\": \"levenshtein\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/ngram-size\": \"Ngram&nbsp;Size&nbsp;\",",
                "diff --git a/main/webapp/modules/core/langs/translation-es.json b/main/webapp/modules/core/langs/translation-es.json",
                "index b1d7601a4..a77c6126c 100644",
                "--- a/main/webapp/modules/core/langs/translation-es.json",
                "+++ b/main/webapp/modules/core/langs/translation-es.json",
                "@@ -162,3 +162,3 @@",
                "     \"core-dialogs/focusing-on\": \"enfocada en\",",
                "-    \"core-dialogs/fingerprint\": \"Huella\",",
                "+    \"clustering-keyers/fingerprint\": \"Huella\",",
                "     \"core-dialogs/block-chars\": \"Caracteres&nbsp;del&nbsp;bloque&nbsp;\",",
                "@@ -166,3 +166,3 @@",
                "     \"core-dialogs/short-format\": \"Formato corto local\",",
                "-    \"core-dialogs/leven\": \"levenshtein\",",
                "+    \"clustering-distances/levenshtein\": \"levenshtein\",",
                "     \"core-dialogs/rotated-clock\": \"Girar 45\u00c2\u00b0 en direcci\u00c3\u00b3n de las manecillas de reloj\",",
                "@@ -173,3 +173,3 @@",
                "     \"core-dialogs/cluster-descr\": \"Esta funci\u00c3\u00b3n le permite encontrar agrupaciones de diferentes valores que pueden ser representaciones alternativas de la misma cosa. Por ejemplo, \\\"New York\\\" y \\\"new york\\\" probablemente se refieren al mismo concepto, solo se presenta diferencia en la capitalizaci\u00c3\u00b3n. De la misma manera \\\"G\u00c3\u00b6del\\\" y \\\"Godel\\\" probablemente se refieren a la misma persona.\",",
                "-    \"core-dialogs/phonetic\": \"cologne-phonetic\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"cologne-phonetic\",",
                "     \"core-dialogs/found\": \"Encontrado\",",
                "@@ -198,3 +198,3 @@",
                "     \"core-dialogs/date-iso\": \"ISO 8601, p. ej., 2011-08-24T18:36:10+08:00\",",
                "-    \"core-dialogs/ngram\": \"Huella del n-grama\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"Huella del n-grama\",",
                "     \"core-dialogs/for-recon-cell\": \"Para celdas cotejadas, descargar\",",
                "@@ -214,3 +214,3 @@",
                "     \"core-dialogs/line-based\": \"Formatos de texto\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/cell-value\": \"El valor de la celda actual. Es una abreviaci\u00c3\u00b3n para 'cell.value'.\",",
                "@@ -260,3 +260,3 @@",
                "     \"core-dialogs/local-time\": \"Usar zona horaria local\",",
                "-    \"core-dialogs/metaphone\": \"metaphone3\",",
                "+    \"clustering-keyers/metaphone3\": \"metaphone3\",",
                "     \"core-dialogs/key-collision\": \"Colisi\u00c3\u00b3n de llaves\",",
                "diff --git a/main/webapp/modules/core/langs/translation-fil.json b/main/webapp/modules/core/langs/translation-fil.json",
                "index 62b6aafce..d9be4d309 100644",
                "--- a/main/webapp/modules/core/langs/translation-fil.json",
                "+++ b/main/webapp/modules/core/langs/translation-fil.json",
                "@@ -159,3 +159,3 @@",
                "     \"core-dialogs/focusing-on\": \"na tumutuon sa\",",
                "-    \"core-dialogs/fingerprint\": \"fingerprint\",",
                "+    \"clustering-keyers/fingerprint\": \"fingerprint\",",
                "     \"core-dialogs/block-chars\": \"I-block&nbsp; 1;Chars&nbsp; 2;\",",
                "@@ -163,3 +163,3 @@",
                "     \"core-dialogs/short-format\": \"Maikling format ng locale\",",
                "-    \"core-dialogs/leven\": \"levenshten\",",
                "+    \"clustering-distances/levenshtein\": \"levenshten\",",
                "     \"core-dialogs/rotated-clock\": \"Naka-rotate 45 \u00c2\u00b0 Clockwise\",",
                "@@ -169,3 +169,3 @@",
                "     \"core-dialogs/cluster-descr\": \"Ang tampok na ito ay tumutulong sa iyo na makahanap ng mga grupo ng iba't ibang mga halaga ng cell na maaaring alternatibong mga representasyon ng parehong bagay. Halimbawa, ang dalawang string na \\\"New York\\\" at \\\"new york\\\" ay malamang na tumutukoy sa parehong konsepto at mayroon lamang mga pagkakaiba sa kapitalismo, at ang \\\"G\u00c3\u00b6del\\\" at \\\"Godel\\\" marahil ay tumutukoy sa parehong tao.\",",
                "-    \"core-dialogs/phonetic\": \"cologne-ponetic\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"cologne-ponetic\",",
                "     \"core-dialogs/found\": \"nahanap\",",
                "@@ -202,3 +202,3 @@",
                "     \"core-dialogs/json-text\": \"Ang mga sumusunod na teksto ng JSON ay naka-encode ng mga pagpipilian na iyong itinakda sa iba pang mga tab. Maaari mong kopyahin ito at i-save ito para sa ibang pagkakataon, at idikit muli ito at i-click ang Ilapat upang muling gamitin ang parehong mga opsyon.\",",
                "-    \"core-dialogs/ngram\": \"ngram- fingerprint\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram- fingerprint\",",
                "     \"core-dialogs/reorder-column\": \"Muling-order / Alisin ang Mga Haligi\",",
                "@@ -210,3 +210,3 @@",
                "     \"core-dialogs/for-recon-cell\": \"Para sa mga nakipagkasundo na mga cell, output\",",
                "-    \"core-dialogs/ppm\": \"P P M\",",
                "+    \"clustering-distances/PPM\": \"P P M\",",
                "     \"core-dialogs/cell-value\": \"Ang halaga ng kasalukuyang cell. Ito ay isang shortcut para sa 'cell.value'.\",",
                "@@ -262,3 +262,3 @@",
                "     \"core-dialogs/big-dot\": \"Malaking sukat ng tuldok\",",
                "-    \"core-dialogs/metaphone\": \"meta-fone3\",",
                "+    \"clustering-keyers/metaphone3\": \"meta-fone3\",",
                "     \"core-facets/regular-dot\": \"Regular na sukat ng tuldok\",",
                "diff --git a/main/webapp/modules/core/langs/translation-fr.json b/main/webapp/modules/core/langs/translation-fr.json",
                "index 2681e1371..e841c27d5 100644",
                "--- a/main/webapp/modules/core/langs/translation-fr.json",
                "+++ b/main/webapp/modules/core/langs/translation-fr.json",
                "@@ -163,3 +163,3 @@",
                "     \"core-dialogs/focusing-on\": \"centrer sur\",",
                "-    \"core-dialogs/fingerprint\": \"empreinte\",",
                "+    \"clustering-keyers/fingerprint\": \"empreinte\",",
                "     \"core-dialogs/block-chars\": \"Bloc de caract\u00c3\u00a8res\",",
                "@@ -167,3 +167,3 @@",
                "     \"core-dialogs/short-format\": \"Format court\",",
                "-    \"core-dialogs/leven\": \"Levenshtein\",",
                "+    \"clustering-distances/levenshtein\": \"Levenshtein\",",
                "     \"core-dialogs/sqlExporterIgnoreFacets\": \"Ignorer les facettes, les filtres et exporter toutes les lignes\",",
                "@@ -175,3 +175,3 @@",
                "     \"core-dialogs/cluster-descr\": \"Cet outil vous aide \u00c3\u00a0 identifier des groupes de cellules ayant des valeurs diff\u00c3\u00a9rentes mais qui peuvent correspondre \u00c3\u00a0 des repr\u00c3\u00a9sentations alternatives de la m\u00c3\u00aame valeur. Par exemple, les deux cha\u00c3\u00aenes \\\"New York\\\" et \\\"new york\\\" n\u00e2\u0080\u0099ont qu\u00e2\u0080\u0099une diff\u00c3\u00a9rence de casse et font tr\u00c3\u00a8s certainement r\u00c3\u00a9f\u00c3\u00a9rence \u00c3\u00a0 la m\u00c3\u00aame ville. \\\"G\u00c3\u00b6del\\\" et \\\"Godel\\\" se r\u00c3\u00a9f\u00c3\u00a8rent probablement \u00c3\u00a0 la m\u00c3\u00aame personne.\",",
                "-    \"core-dialogs/phonetic\": \"phon\u00c3\u00a9tique de Cologne\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"phon\u00c3\u00a9tique de Cologne\",",
                "     \"core-dialogs/found\": \"trouv\u00c3\u00a9\",",
                "@@ -208,3 +208,3 @@",
                "     \"core-dialogs/json-text\": \"Le texte en JSON contient les options que vous avez d\u00c3\u00a9finies dans les autres onglets. Vous pouvez copier et sauver ce texte pour un usage ult\u00c3\u00a9rieur. Il suffira de le coller et de cliquer 'Appliquer' pour r\u00c3\u00a9utiliser les m\u00c3\u00aames options.\",",
                "-    \"core-dialogs/ngram\": \"empreinte N-grammes\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"empreinte N-grammes\",",
                "     \"core-dialogs/reorder-column\": \"Trier / Supprimer des colonnes\",",
                "@@ -216,3 +216,3 @@",
                "     \"core-dialogs/for-recon-cell\": \"pour r\u00c3\u00a9concilier les cellules, sortie\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/cell-value\": \"La valeur de la cellule en cours. C\u00e2\u0080\u0099est un alias de 'cell.value'.\",",
                "@@ -278,3 +278,3 @@",
                "     \"core-dialogs/big-dot\": \"Point de grande taille\",",
                "-    \"core-dialogs/metaphone\": \"metaphone3\",",
                "+    \"clustering-keyers/metaphone3\": \"metaphone3\",",
                "     \"core-dialogs/custom-tab-exp\": \"Exporteur tabulaire personnalis\u00c3\u00a9\",",
                "diff --git a/main/webapp/modules/core/langs/translation-he.json b/main/webapp/modules/core/langs/translation-he.json",
                "index 5596e168a..dc9f48813 100644",
                "--- a/main/webapp/modules/core/langs/translation-he.json",
                "+++ b/main/webapp/modules/core/langs/translation-he.json",
                "@@ -143,9 +143,9 @@",
                "     \"core-dialogs/keying-function\": \"\u00d7\u009e\u00d7\u00a4\u00d7\u00aa\u00d7\u0095\u00d7\u0097&nbsp;\u00d7\u00a4\u00d7\u0095\u00d7\u00a0\u00d7\u00a7\u00d7\u00a6\u00d7\u0099\u00d7\u0094&nbsp;\",",
                "-    \"core-dialogs/fingerprint\": \"\u00d7\u0098\u00d7\u0091\u00d7\u0099\u00d7\u00a2\u00d7\u00aa \u00d7\u0090\u00d7\u00a6\u00d7\u0091\u00d7\u00a2\",",
                "-    \"core-dialogs/ngram\": \"ngram-\u00d7\u0098\u00d7\u0091\u00d7\u0099\u00d7\u00a2\u00d7\u00aa \u00d7\u0090\u00d7\u00a6\u00d7\u0091\u00d7\u00a2\",",
                "-    \"core-dialogs/metaphone\": \"\u00d7\u009e\u00d7\u0098\u00d7\u0094\u00d7\u00a4\u00d7\u0095\u00d7\u009f3\",",
                "-    \"core-dialogs/phonetic\": \"cologne-phonetic\",",
                "+    \"clustering-keyers/fingerprint\": \"\u00d7\u0098\u00d7\u0091\u00d7\u0099\u00d7\u00a2\u00d7\u00aa \u00d7\u0090\u00d7\u00a6\u00d7\u0091\u00d7\u00a2\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram-\u00d7\u0098\u00d7\u0091\u00d7\u0099\u00d7\u00a2\u00d7\u00aa \u00d7\u0090\u00d7\u00a6\u00d7\u0091\u00d7\u00a2\",",
                "+    \"clustering-keyers/metaphone3\": \"\u00d7\u009e\u00d7\u0098\u00d7\u0094\u00d7\u00a4\u00d7\u0095\u00d7\u009f3\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"cologne-phonetic\",",
                "     \"core-dialogs/distance-fun\": \"\u00d7\u009e\u00d7\u00a8\u00d7\u0097\u00d7\u00a7&nbsp;\u00d7\u00a4\u00d7\u0095\u00d7\u00a0\u00d7\u00a7\u00d7\u00a6\u00d7\u0099\u00d7\u0099\u00d7\u00aa&nbsp;\",",
                "-    \"core-dialogs/leven\": \"levenshtein\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/levenshtein\": \"levenshtein\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/ngram-size\": \"Ngram&nbsp;\u00d7\u0092\u00d7\u0095\u00d7\u0093\u00d7\u009c&nbsp;\",",
                "diff --git a/main/webapp/modules/core/langs/translation-hu.json b/main/webapp/modules/core/langs/translation-hu.json",
                "index f1be6e9ef..b1fff5d46 100644",
                "--- a/main/webapp/modules/core/langs/translation-hu.json",
                "+++ b/main/webapp/modules/core/langs/translation-hu.json",
                "@@ -158,3 +158,3 @@",
                "     \"core-dialogs/focusing-on\": \"erre \u00c3\u00b6sszpontos\u00c3\u00adtva\",",
                "-    \"core-dialogs/fingerprint\": \"ujjlenyomat\",",
                "+    \"clustering-keyers/fingerprint\": \"ujjlenyomat\",",
                "     \"core-dialogs/block-chars\": \"Blokk-karakter\",",
                "@@ -200,3 +200,3 @@",
                "     \"core-dialogs/json-text\": \"A k\u00c3\u00b6vetkez\u00c5\u0091 JSON sz\u00c3\u00b6veg a kor\u00c3\u00a1bbi f\u00c3\u00bcleken megadott be\u00c3\u00a1ll\u00c3\u00adt\u00c3\u00a1sokat tartalmazza. Lehet\u00c5\u0091s\u00c3\u00a9g van kim\u00c3\u00a1solni, elmenteni \u00c3\u00a9s k\u00c3\u00a9s\u00c5\u0091bb \u00c3\u00bajra besz\u00c3\u00barni a jelenlegi be\u00c3\u00a1ll\u00c3\u00adt\u00c3\u00a1sok ism\u00c3\u00a9telt haszn\u00c3\u00a1lat\u00c3\u00a1hoz.\",",
                "-    \"core-dialogs/ngram\": \"ngram-ujjlenyomat\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram-ujjlenyomat\",",
                "     \"core-dialogs/reorder-column\": \"Oszlopok \u00c3\u00a1trendez\u00c3\u00a9se / elt\u00c3\u00a1vol\u00c3\u00adt\u00c3\u00a1sa\",",
                "@@ -255,3 +255,3 @@",
                "     \"core-dialogs/big-dot\": \"Nagy pontm\u00c3\u00a9ret\",",
                "-    \"core-dialogs/metaphone\": \"metaphone3\",",
                "+    \"clustering-keyers/metaphone3\": \"metaphone3\",",
                "     \"core-views/all\": \"\u00c3\u0096sszes\",",
                "diff --git a/main/webapp/modules/core/langs/translation-it.json b/main/webapp/modules/core/langs/translation-it.json",
                "index 4aa70e19a..8ab0f1c78 100644",
                "--- a/main/webapp/modules/core/langs/translation-it.json",
                "+++ b/main/webapp/modules/core/langs/translation-it.json",
                "@@ -161,3 +161,3 @@",
                "     \"core-dialogs/focusing-on\": \"incentrato su\",",
                "-    \"core-dialogs/fingerprint\": \"fingerprint\",",
                "+    \"clustering-keyers/fingerprint\": \"fingerprint\",",
                "     \"core-dialogs/block-chars\": \"Block&nbsp;Chars&nbsp;\",",
                "@@ -165,3 +165,3 @@",
                "     \"core-dialogs/short-format\": \"Formato breve\",",
                "-    \"core-dialogs/leven\": \"levenshtein\",",
                "+    \"clustering-distances/levenshtein\": \"levenshtein\",",
                "     \"core-dialogs/sqlExporterIgnoreFacets\": \"Ignora faccette e filtri ed esporta tutte le righe\",",
                "@@ -173,3 +173,3 @@",
                "     \"core-dialogs/cluster-descr\": \"Questa feature aiuta a trovare gruppi di valori che portrebbero essere rappresentazioni alternative di uno stesso dato. Ad esemmpio, le due stringhe \\\"New York\\\" e \\\"new york\\\" probabilmente si riferiscono allo stesso concetto e differisocno solo per le maiuscole, come \\\"G\u00c3\u00b6del\u00e2\u0080\u008e\\\" e \\\"Godel\\\" probabilmente si riferiscono alla stessa persona.\",",
                "-    \"core-dialogs/phonetic\": \"cologne-phonetic\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"cologne-phonetic\",",
                "     \"core-dialogs/found\": \"trovati\",",
                "@@ -206,3 +206,3 @@",
                "     \"core-dialogs/json-text\": \"Il seguente JSON codifica le opzioni impostate nelle altre schede. Puoi copiarlo e salvarlo per riutilizzarlo, incollandolo qui e cliccando Applica.\",",
                "-    \"core-dialogs/ngram\": \"ngram-fingerprint\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram-fingerprint\",",
                "     \"core-dialogs/reorder-column\": \"Riordina / Rimuovi Colonne\",",
                "@@ -214,3 +214,3 @@",
                "     \"core-dialogs/for-recon-cell\": \"Per celle riconciliate, esporta\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/cell-value\": \"Il valore della cella corrente. Questa \u00c3\u00a8 una scorcatoia per 'cell.value'.\",",
                "@@ -276,3 +276,3 @@",
                "     \"core-dialogs/big-dot\": \"Dimensione Punto: Grande\",",
                "-    \"core-dialogs/metaphone\": \"metaphone3\",",
                "+    \"clustering-keyers/metaphone3\": \"metaphone3\",",
                "     \"core-facets/regular-dot\": \"Dimensione Punto: Normale\",",
                "diff --git a/main/webapp/modules/core/langs/translation-jp.json b/main/webapp/modules/core/langs/translation-jp.json",
                "index feccb5725..5edf54c6b 100644",
                "--- a/main/webapp/modules/core/langs/translation-jp.json",
                "+++ b/main/webapp/modules/core/langs/translation-jp.json",
                "@@ -163,3 +163,3 @@",
                "     \"core-dialogs/focusing-on\": \"\u00e3\u0083\u0095\u00e3\u0082\u00a9\u00e3\u0083\u00bc\u00e3\u0082\u00ab\u00e3\u0082\u00b9\u00e5\u00af\u00be\u00e8\u00b1\u00a1\",",
                "-    \"core-dialogs/fingerprint\": \"fingerprint\",",
                "+    \"clustering-keyers/fingerprint\": \"fingerprint\",",
                "     \"core-dialogs/block-chars\": \"\u00e6\u0096\u0087\u00e5\u00ad\u0097\u00e3\u0083\u0096\u00e3\u0083\u00ad\u00e3\u0083\u0083\u00e3\u0082\u00af\",",
                "@@ -167,3 +167,3 @@",
                "     \"core-dialogs/short-format\": \"\u00e7\u009f\u00ad\u00e3\u0081\u0084\u00e3\u0083\u00ad\u00e3\u0082\u00b1\u00e3\u0083\u00bc\u00e3\u0083\u00ab\u00e5\u00bd\u00a2\u00e5\u00bc\u008f\",",
                "-    \"core-dialogs/leven\": \"\u00e3\u0083\u00ac\u00e3\u0083\u00bc\u00e3\u0083\u0099\u00e3\u0083\u00b3\u00e3\u0082\u00b7\u00e3\u0083\u00a5\u00e3\u0082\u00bf\u00e3\u0082\u00a4\u00e3\u0083\u00b3\u00e8\u00b7\u009d\u00e9\u009b\u00a2\u00e6\u00b3\u0095\",",
                "+    \"clustering-distances/levenshtein\": \"\u00e3\u0083\u00ac\u00e3\u0083\u00bc\u00e3\u0083\u0099\u00e3\u0083\u00b3\u00e3\u0082\u00b7\u00e3\u0083\u00a5\u00e3\u0082\u00bf\u00e3\u0082\u00a4\u00e3\u0083\u00b3\u00e8\u00b7\u009d\u00e9\u009b\u00a2\u00e6\u00b3\u0095\",",
                "     \"core-dialogs/sqlExporterIgnoreFacets\": \"\u00e3\u0083\u0095\u00e3\u0082\u00a1\u00e3\u0082\u00bb\u00e3\u0083\u0083\u00e3\u0083\u0088\u00e3\u0080\u0081\u00e3\u0083\u0095\u00e3\u0082\u00a3\u00e3\u0083\u00ab\u00e3\u0082\u00bf\u00e3\u0083\u00bc\u00e3\u0082\u0092\u00e7\u0084\u00a1\u00e8\u00a6\u0096\u00e3\u0081\u0097\u00e3\u0080\u0081\u00e5\u0085\u00a8\u00e8\u00a1\u008c\u00e3\u0082\u0092\u00e5\u0087\u00ba\u00e5\u008a\u009b\",",
                "@@ -175,3 +175,3 @@",
                "     \"core-dialogs/cluster-descr\": \"\u00e3\u0081\u0093\u00e3\u0081\u00ae\u00e6\u00a9\u009f\u00e8\u0083\u00bd\u00e3\u0081\u00af\u00e3\u0080\u0081\u00e5\u0090\u008c\u00e3\u0081\u0098\u00e3\u0082\u0082\u00e3\u0081\u00ae\u00e3\u0081\u00ae\u00e5\u0088\u00a5\u00e3\u0081\u00ae\u00e5\u0090\u008d\u00e5\u0089\u008d\u00e3\u0081\u008b\u00e3\u0082\u0082\u00e3\u0081\u0097\u00e3\u0082\u008c\u00e3\u0081\u00aa\u00e3\u0081\u0084\u00e3\u0082\u00bb\u00e3\u0083\u00ab\u00e3\u0081\u00ae\u00e3\u0082\u00b0\u00e3\u0083\u00ab\u00e3\u0083\u00bc\u00e3\u0083\u0097\u00e3\u0082\u0092\u00e6\u008e\u00a2\u00e3\u0081\u0099\u00e3\u0081\u00ae\u00e3\u0081\u00ab\u00e5\u00bd\u00b9\u00e7\u00ab\u008b\u00e3\u0081\u00a1\u00e3\u0081\u00be\u00e3\u0081\u0099\u00e3\u0080\u0082\u00e3\u0081\u009f\u00e3\u0081\u00a8\u00e3\u0081\u0088\u00e3\u0081\u00b0\u00e3\u0080\u0081\\\"New York\\\" \u00e3\u0081\u00a8 \\\"new york\\\" \u00e3\u0081\u00af\u00e9\u009d\u009e\u00e5\u00b8\u00b8\u00e3\u0081\u00ab\u00e4\u00bc\u00bc\u00e3\u0081\u009f\u00e6\u00a6\u0082\u00e5\u00bf\u00b5\u00e3\u0081\u00a7\u00e3\u0081\u0099\u00e3\u0081\u008c\u00e8\u00a1\u00a8\u00e8\u00a8\u0098\u00e3\u0081\u00ae\u00e9\u0081\u0095\u00e3\u0081\u0084\u00e3\u0081\u008c\u00e3\u0081\u0082\u00e3\u0082\u008a\u00e3\u0081\u00be\u00e3\u0081\u0099\u00e3\u0080\u0082\u00e3\u0081\u00be\u00e3\u0081\u009f\u00e3\u0080\u0081 \\\"G\u00c3\u00b6del\\\" \u00e3\u0081\u00a8 \\\"Godel\\\" \u00e3\u0081\u00af\u00e5\u00a4\u009a\u00e5\u0088\u0086\u00e5\u0090\u008c\u00e3\u0081\u0098\u00e4\u00ba\u00ba\u00e3\u0082\u0092\u00e7\u00a4\u00ba\u00e3\u0081\u0097\u00e3\u0081\u00be\u00e3\u0081\u0099\u00e3\u0080\u0082\",",
                "-    \"core-dialogs/phonetic\": \"cologne-phonetic\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"cologne-phonetic\",",
                "     \"core-dialogs/found\": \"\u00e7\u00b5\u0090\u00e6\u009e\u009c\",",
                "@@ -208,3 +208,3 @@",
                "     \"core-dialogs/json-text\": \"\u00e6\u00ac\u00a1\u00e3\u0081\u00aeJSON\u00e3\u0081\u00af\u00e3\u0080\u0081\u00e3\u0081\u0082\u00e3\u0081\u00aa\u00e3\u0081\u009f\u00e3\u0081\u008c\u00e8\u00a8\u00ad\u00e5\u00ae\u009a\u00e3\u0081\u0097\u00e3\u0081\u009f\u00e3\u0082\u00aa\u00e3\u0083\u0097\u00e3\u0082\u00b7\u00e3\u0083\u00a7\u00e3\u0083\u00b3\u00e3\u0082\u0092\u00e3\u0082\u00b3\u00e3\u0083\u00bc\u00e3\u0083\u0089\u00e5\u008c\u0096\u00e3\u0081\u0097\u00e3\u0081\u00a6\u00e3\u0081\u0084\u00e3\u0081\u00be\u00e3\u0081\u0099\u00e3\u0080\u0082\u00e3\u0082\u00b3\u00e3\u0083\u0094\u00e3\u0083\u00bc\u00e3\u0081\u0097\u00e3\u0081\u00a6\u00e4\u00bf\u009d\u00e5\u00ad\u0098\u00e3\u0081\u0097\u00e3\u0081\u009f\u00e3\u0082\u008a\u00e3\u0080\u0081\u00e8\u00b2\u00bc\u00e3\u0082\u008a\u00e4\u00bb\u0098\u00e3\u0081\u0091\u00e3\u0081\u00a6\u00e5\u0086\u008d\u00e5\u0088\u00a9\u00e7\u0094\u00a8\u00e3\u0081\u0099\u00e3\u0082\u008b\u00e3\u0081\u0093\u00e3\u0081\u00a8\u00e3\u0081\u008c\u00e3\u0081\u00a7\u00e3\u0081\u008d\u00e3\u0081\u00be\u00e3\u0081\u0099\u00e3\u0080\u0082\",",
                "-    \"core-dialogs/ngram\": \"ngram-fingerprint\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram-fingerprint\",",
                "     \"core-dialogs/reorder-column\": \"\u00e3\u0082\u00ab\u00e3\u0083\u00a9\u00e3\u0083\u00a0\u00e3\u0081\u00ae\u00e4\u00b8\u00a6\u00e3\u0081\u00b9\u00e6\u009b\u00bf\u00e3\u0081\u0088/\u00e5\u0089\u008a\u00e9\u0099\u00a4\",",
                "@@ -216,3 +216,3 @@",
                "     \"core-dialogs/for-recon-cell\": \"\u00e7\u0085\u00a7\u00e5\u0090\u0088\u00e3\u0081\u0097\u00e3\u0081\u009f\u00e3\u0082\u00bb\u00e3\u0083\u00ab\u00e3\u0082\u0092\u00e5\u0087\u00ba\u00e5\u008a\u009b\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/cell-value\": \"\u00e7\u008f\u00be\u00e5\u009c\u00a8\u00e3\u0081\u00ae\u00e3\u0082\u00bb\u00e3\u0083\u00ab\u00e3\u0081\u00aevalue: cell.value\u00e3\u0081\u00ae\u00e5\u0088\u00a5\u00e5\u0090\u008d\u00e3\u0081\u00a7\u00e3\u0081\u0099.\",",
                "@@ -278,3 +278,3 @@",
                "     \"core-dialogs/big-dot\": \"\u00e5\u00a4\u00a7\u00e3\u0081\u008d\u00e3\u0081\u0084\u00e3\u0083\u0089\u00e3\u0083\u0083\u00e3\u0083\u0088\",",
                "-    \"core-dialogs/metaphone\": \"metaphone3\",",
                "+    \"clustering-keyers/metaphone3\": \"metaphone3\",",
                "     \"core-dialogs/sql-exporter\": \"SQL\u00e3\u0082\u00a8\u00e3\u0082\u00af\u00e3\u0082\u00b9\u00e3\u0083\u009d\u00e3\u0083\u00bc\u00e3\u0083\u0088\",",
                "diff --git a/main/webapp/modules/core/langs/translation-nb_NO.json b/main/webapp/modules/core/langs/translation-nb_NO.json",
                "index 0a74d0120..cfcb54ae3 100644",
                "--- a/main/webapp/modules/core/langs/translation-nb_NO.json",
                "+++ b/main/webapp/modules/core/langs/translation-nb_NO.json",
                "@@ -171,7 +171,7 @@",
                "     \"core-dialogs/nearest-neighbor\": \"n\u00c3\u00a6rmeste nabo\",",
                "-    \"core-dialogs/fingerprint\": \"fingeravtrykk\",",
                "-    \"core-dialogs/ngram\": \"n-gram-fingeravtrykk\",",
                "-    \"core-dialogs/metaphone\": \"Metaphone3\",",
                "+    \"clustering-keyers/fingerprint\": \"fingeravtrykk\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"n-gram-fingeravtrykk\",",
                "+    \"clustering-keyers/metaphone3\": \"Metaphone3\",",
                "     \"core-dialogs/distance-fun\": \"Distanse&nbsp;funksjon&nbsp;\",",
                "-    \"core-dialogs/ppm\": \"DPM\",",
                "+    \"clustering-distances/PPM\": \"DPM\",",
                "     \"core-dialogs/ngram-size\": \"N-gram&nbsp;st\u00c3\u00b8rrelse&nbsp;\",",
                "diff --git a/main/webapp/modules/core/langs/translation-pt_BR.json b/main/webapp/modules/core/langs/translation-pt_BR.json",
                "index 0c5457037..935da7558 100644",
                "--- a/main/webapp/modules/core/langs/translation-pt_BR.json",
                "+++ b/main/webapp/modules/core/langs/translation-pt_BR.json",
                "@@ -161,3 +161,3 @@",
                "     \"core-dialogs/focusing-on\": \"foco em\",",
                "-    \"core-dialogs/fingerprint\": \"fingerprint\",",
                "+    \"clustering-keyers/fingerprint\": \"fingerprint\",",
                "     \"core-dialogs/block-chars\": \"Caracteres&nbsp;do&nbsp;bloco&nbsp;\",",
                "@@ -165,3 +165,3 @@",
                "     \"core-dialogs/short-format\": \"Formato local curto\",",
                "-    \"core-dialogs/leven\": \"levenshtein\",",
                "+    \"clustering-distances/levenshtein\": \"levenshtein\",",
                "     \"core-dialogs/rotated-clock\": \"Rotacionar 45\u00c2\u00b0 no sentido hor\u00c3\u00a1rio\",",
                "@@ -171,3 +171,3 @@",
                "     \"core-dialogs/cluster-descr\": \"Esta funcionalidade ajuda voc\u00c3\u00aa a encontrar grupos em diferentes c\u00c3\u00a9lulas que podem representar a mesma coisa. Por exemplo, \\\"New York\\\" e \\\"new york\\\" provavelmente se referem a mesma coisa diferenciando somente pelas letras mai\u00c3\u00basculas. Da mesma maneira, \\\"G\u00c3\u00b6del\\\" e \\\"Godel\\\" provavelmente representam a mesma pessoa.\",",
                "-    \"core-dialogs/phonetic\": \"cologne-phonetic\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"cologne-phonetic\",",
                "     \"core-dialogs/found\": \"encontrado\",",
                "@@ -196,3 +196,3 @@",
                "     \"core-dialogs/date-iso\": \"ISO 8601, ex., 2011-08-24T18:36:10+08:00\",",
                "-    \"core-dialogs/ngram\": \"ngram-fingerprint\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram-fingerprint\",",
                "     \"core-dialogs/for-recon-cell\": \"Para c\u00c3\u00a9lulas reconciliadas, sa\u00c3\u00adda\",",
                "@@ -212,3 +212,3 @@",
                "     \"core-dialogs/line-based\": \"Formatos de texto\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/cell-value\": \"O valor atual da c\u00c3\u00a9lula. \u00c3\u0089 um atalho para 'cell.value'.\",",
                "@@ -260,3 +260,3 @@",
                "     \"core-dialogs/local-time\": \"Usar fuso hor\u00c3\u00a1rio local\",",
                "-    \"core-dialogs/metaphone\": \"metaphone3\",",
                "+    \"clustering-keyers/metaphone3\": \"metaphone3\",",
                "     \"core-dialogs/key-collision\": \"colis\u00c3\u00a3o de chaves\",",
                "diff --git a/main/webapp/modules/core/langs/translation-ru.json b/main/webapp/modules/core/langs/translation-ru.json",
                "index 920103b2d..733420663 100644",
                "--- a/main/webapp/modules/core/langs/translation-ru.json",
                "+++ b/main/webapp/modules/core/langs/translation-ru.json",
                "@@ -198,3 +198,3 @@",
                "     \"core-dialogs/focusing-on\": \"\u00d1\u0084\u00d0\u00be\u00d0\u00ba\u00d1\u0083\u00d1\u0081 \u00d0\u00bd\u00d0\u00b0\",",
                "-    \"core-dialogs/fingerprint\": \"Fingerprint\",",
                "+    \"clustering-keyers/fingerprint\": \"Fingerprint\",",
                "     \"core-dialogs/block-chars\": \"\u00d0\u00a0\u00d0\u00b0\u00d0\u00b7\u00d0\u00bc\u00d0\u00b5\u00d1\u0080&nbsp;\u00d0\u00b1\u00d0\u00bb\u00d0\u00be\u00d0\u00ba\u00d0\u00b0&nbsp;\",",
                "@@ -202,3 +202,3 @@",
                "     \"core-dialogs/short-format\": \"\u00d0\u009a\u00d0\u00be\u00d1\u0080\u00d0\u00be\u00d1\u0082\u00d0\u00ba\u00d0\u00b8\u00d0\u00b9 \u00d1\u0080\u00d0\u00b5\u00d0\u00b3\u00d0\u00b8\u00d0\u00be\u00d0\u00bd\u00d0\u00b0\u00d0\u00bb\u00d1\u008c\u00d0\u00bd\u00d1\u008b\u00d0\u00b9\",",
                "-    \"core-dialogs/leven\": \"\u00d0\u009b\u00d0\u00b5\u00d0\u00b2\u00d0\u00b5\u00d0\u00bd\u00d1\u0088\u00d1\u0082\u00d0\u00b5\u00d0\u00b9\u00d0\u00bd\u00d0\u00b0\",",
                "+    \"clustering-distances/levenshtein\": \"\u00d0\u009b\u00d0\u00b5\u00d0\u00b2\u00d0\u00b5\u00d0\u00bd\u00d1\u0088\u00d1\u0082\u00d0\u00b5\u00d0\u00b9\u00d0\u00bd\u00d0\u00b0\",",
                "     \"core-dialogs/rotated-clock\": \"\u00d0\u009f\u00d0\u00be\u00d0\u00b2\u00d0\u00b5\u00d1\u0080\u00d0\u00bd\u00d1\u0083\u00d1\u0082\u00d1\u008c \u00d0\u00bd\u00d0\u00b0 45\u00c2\u00b0 \u00d0\u00bf\u00d0\u00be \u00d1\u0087\u00d0\u00b0\u00d1\u0081\u00d0\u00be\u00d0\u00b2\u00d0\u00be\u00d0\u00b9\",",
                "@@ -208,3 +208,3 @@",
                "     \"core-dialogs/cluster-descr\": \"\u00d0\u00ad\u00d1\u0082\u00d0\u00be\u00d1\u0082 \u00d1\u0084\u00d1\u0083\u00d0\u00bd\u00d0\u00ba\u00d1\u0086\u00d0\u00b8\u00d0\u00be\u00d0\u00bd\u00d0\u00b0\u00d0\u00bb \u00d0\u00bf\u00d0\u00be\u00d0\u00bc\u00d0\u00be\u00d0\u00b3\u00d0\u00b0\u00d0\u00b5\u00d1\u0082 \u00d0\u00bd\u00d0\u00b0\u00d1\u0085\u00d0\u00be\u00d0\u00b4\u00d0\u00b8\u00d1\u0082\u00d1\u008c \u00d0\u00b3\u00d1\u0080\u00d1\u0083\u00d0\u00bf\u00d0\u00bf\u00d1\u008b \u00d1\u008f\u00d1\u0087\u00d0\u00b5\u00d0\u00b5\u00d0\u00ba \u00d1\u0081 \u00d1\u0080\u00d0\u00b0\u00d0\u00b7\u00d0\u00bb\u00d0\u00b8\u00d1\u0087\u00d0\u00bd\u00d1\u008b\u00d0\u00bc\u00d0\u00b8 \u00d0\u00b7\u00d0\u00bd\u00d0\u00b0\u00d1\u0087\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d1\u008f\u00d0\u00bc\u00d0\u00b8, \u00d1\u008f\u00d0\u00b2\u00d0\u00bb\u00d1\u008f\u00d1\u008e\u00d1\u0089\u00d0\u00b8\u00d0\u00bc\u00d0\u00b8\u00d1\u0081\u00d1\u008f \u00d0\u00b0\u00d0\u00bb\u00d1\u008c\u00d1\u0082\u00d0\u00b5\u00d1\u0080\u00d0\u00bd\u00d0\u00b0\u00d1\u0082\u00d0\u00b8\u00d0\u00b2\u00d0\u00bd\u00d1\u008b\u00d0\u00bc \u00d0\u00bf\u00d1\u0080\u00d0\u00b5\u00d0\u00b4\u00d1\u0081\u00d1\u0082\u00d0\u00b0\u00d0\u00b2\u00d0\u00bb\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d0\u00b5\u00d0\u00bc \u00d0\u00be\u00d0\u00b4\u00d0\u00bd\u00d0\u00be\u00d0\u00b9 \u00d0\u00b8 \u00d1\u0082\u00d0\u00be\u00d0\u00b9 \u00d0\u00b6\u00d0\u00b5 \u00d1\u0081\u00d1\u0083\u00d1\u0089\u00d0\u00bd\u00d0\u00be\u00d1\u0081\u00d1\u0082\u00d0\u00b8. \u00d0\u009d\u00d0\u00b0\u00d0\u00bf\u00d1\u0080\u00d0\u00b8\u00d0\u00bc\u00d0\u00b5\u00d1\u0080, \u00d1\u0081\u00d1\u0082\u00d1\u0080\u00d0\u00be\u00d0\u00ba\u00d0\u00b8 \\\"New York\\\" \u00d0\u00b8 \\\"new york\\\" \u00d0\u00b2\u00d0\u00b5\u00d1\u0080\u00d0\u00be\u00d1\u008f\u00d1\u0082\u00d0\u00bd\u00d0\u00be \u00d0\u00bf\u00d1\u0080\u00d0\u00b5\u00d0\u00b4\u00d1\u0081\u00d1\u0082\u00d0\u00b0\u00d0\u00b2\u00d0\u00bb\u00d1\u008f\u00d1\u008e\u00d1\u0082 \u00d0\u00be\u00d0\u00b4\u00d0\u00bd\u00d0\u00be \u00d0\u00b8 \u00d1\u0082\u00d0\u00be \u00d0\u00b6\u00d0\u00b5 \u00d0\u00bf\u00d0\u00be\u00d0\u00bd\u00d1\u008f\u00d1\u0082\u00d0\u00b8\u00d0\u00b5 \u00d0\u00b8 \u00d1\u0080\u00d0\u00b0\u00d0\u00b7\u00d0\u00bb\u00d0\u00b8\u00d1\u0087\u00d0\u00b0\u00d1\u008e\u00d1\u0082\u00d1\u0081\u00d1\u008f \u00d1\u0080\u00d0\u00b0\u00d0\u00b7\u00d0\u00bc\u00d0\u00b5\u00d1\u0080\u00d0\u00be\u00d0\u00bc \u00d0\u00bf\u00d0\u00b5\u00d1\u0080\u00d0\u00b2\u00d0\u00be\u00d0\u00b9 \u00d0\u00b1\u00d1\u0083\u00d0\u00ba\u00d0\u00b2\u00d1\u008b, \u00d0\u00b0 \\\"G\u00c3\u00b6del\\\" \u00d0\u00b8 \\\"Godel\\\" \u00d0\u00b2\u00d0\u00be\u00d0\u00b7\u00d0\u00bc\u00d0\u00be\u00d0\u00b6\u00d0\u00bd\u00d0\u00be \u00d1\u0083\u00d0\u00ba\u00d0\u00b0\u00d0\u00b7\u00d1\u008b\u00d0\u00b2\u00d0\u00b0\u00d1\u008e\u00d1\u0082 \u00d0\u00bd\u00d0\u00b0 \u00d0\u00be\u00d0\u00b4\u00d0\u00bd\u00d0\u00be\u00d0\u00b3\u00d0\u00be \u00d0\u00b8 \u00d1\u0082\u00d0\u00be\u00d0\u00b3\u00d0\u00be \u00d0\u00b6\u00d0\u00b5 \u00d1\u0087\u00d0\u00b5\u00d0\u00bb\u00d0\u00be\u00d0\u00b2\u00d0\u00b5\u00d0\u00ba\u00d0\u00b0.\",",
                "-    \"core-dialogs/phonetic\": \"ColognePhonetic\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"ColognePhonetic\",",
                "     \"core-dialogs/found\": \"\u00d0\u00bd\u00d0\u00b0\u00d0\u00b9\u00d0\u00b4\u00d0\u00b5\u00d0\u00bd\u00d0\u00be\",",
                "@@ -241,3 +241,3 @@",
                "     \"core-dialogs/json-text\": \"\u00d0\u00ad\u00d1\u0082\u00d0\u00be\u00d1\u0082 JSON-\u00d1\u0082\u00d0\u00b5\u00d0\u00ba\u00d1\u0081\u00d1\u0082 \u00d1\u0081\u00d0\u00be\u00d0\u00b4\u00d0\u00b5\u00d1\u0080\u00d0\u00b6\u00d0\u00b8\u00d1\u0082 \u00d0\u00bd\u00d0\u00b0\u00d1\u0081\u00d1\u0082\u00d1\u0080\u00d0\u00be\u00d0\u00b9\u00d0\u00ba\u00d0\u00b8 \u00d1\u0081\u00d0\u00b4\u00d0\u00b5\u00d0\u00bb\u00d0\u00b0\u00d0\u00bd\u00d0\u00bd\u00d1\u008b\u00d0\u00b5 \u00d0\u00b2\u00d0\u00b0\u00d0\u00bc\u00d0\u00b8 \u00d0\u00bd\u00d0\u00b0 \u00d0\u00b4\u00d1\u0080\u00d1\u0083\u00d0\u00b3\u00d0\u00b8\u00d1\u0085 \u00d0\u00b7\u00d0\u00b0\u00d0\u00ba\u00d0\u00bb\u00d0\u00b0\u00d0\u00b4\u00d0\u00ba\u00d0\u00b0\u00d1\u0085. \u00d0\u0092\u00d1\u008b \u00d0\u00bc\u00d0\u00be\u00d0\u00b6\u00d0\u00b5\u00d1\u0082\u00d0\u00b5 \u00d1\u0081\u00d0\u00ba\u00d0\u00be\u00d0\u00bf\u00d0\u00b8\u00d1\u0080\u00d0\u00be\u00d0\u00b2\u00d0\u00b0\u00d1\u0082\u00d1\u008c \u00d0\u00b5\u00d0\u00b3\u00d0\u00be \u00d0\u00b8 \u00d1\u0081\u00d0\u00be\u00d1\u0085\u00d1\u0080\u00d0\u00b0\u00d0\u00bd\u00d0\u00b8\u00d1\u0082\u00d1\u008c \u00d0\u00b4\u00d0\u00bb\u00d1\u008f \u00d0\u00bf\u00d0\u00be\u00d1\u0081\u00d0\u00bb\u00d0\u00b5\u00d0\u00b4\u00d1\u0083\u00d1\u008e\u00d1\u0089\u00d0\u00b5\u00d0\u00b3\u00d0\u00be \u00d0\u00b8\u00d1\u0081\u00d0\u00bf\u00d0\u00be\u00d0\u00bb\u00d1\u008c\u00d0\u00b7\u00d0\u00be\u00d0\u00b2\u00d0\u00b0\u00d0\u00bd\u00d0\u00b8\u00d1\u008f, \u00d0\u00b0 \u00d1\u0082\u00d0\u00b0\u00d0\u00ba\u00d0\u00b6\u00d0\u00b5 \u00d0\u00b2\u00d1\u0081\u00d1\u0082\u00d0\u00b0\u00d0\u00b2\u00d0\u00b8\u00d1\u0082\u00d1\u008c \u00d0\u00b5\u00d0\u00b3\u00d0\u00be \u00d0\u00b8 \u00d0\u00bd\u00d0\u00b0\u00d0\u00b6\u00d0\u00b0\u00d1\u0082\u00d1\u008c \u00d0\u009f\u00d1\u0080\u00d0\u00b8\u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d1\u0082\u00d1\u008c \u00d1\u0087\u00d1\u0082\u00d0\u00be\u00d0\u00b1\u00d1\u008b \u00d0\u00b2\u00d0\u00be\u00d1\u0081\u00d0\u00bf\u00d0\u00be\u00d0\u00bb\u00d1\u008c\u00d0\u00b7\u00d0\u00be\u00d0\u00b2\u00d0\u00b0\u00d1\u0082\u00d1\u008c\u00d1\u0081\u00d1\u008f \u00d1\u0081\u00d0\u00be\u00d1\u0085\u00d1\u0080\u00d0\u00b0\u00d0\u00bd\u00d0\u00b5\u00d0\u00bd\u00d0\u00bd\u00d1\u008b\u00d0\u00bc\u00d0\u00b8 \u00d1\u0080\u00d0\u00b0\u00d0\u00bd\u00d0\u00b5\u00d0\u00b5 \u00d0\u00bd\u00d0\u00b0\u00d1\u0081\u00d1\u0082\u00d1\u0080\u00d0\u00be\u00d0\u00b9\u00d0\u00ba\u00d0\u00b0\u00d0\u00bc\u00d0\u00b8.\",",
                "-    \"core-dialogs/ngram\": \"Fingerprint(NGram)\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"Fingerprint(NGram)\",",
                "     \"core-dialogs/reorder-column\": \"\u00d0\u009f\u00d0\u00b5\u00d1\u0080\u00d0\u00b5\u00d1\u0083\u00d0\u00bf\u00d0\u00be\u00d1\u0080\u00d1\u008f\u00d0\u00b4\u00d0\u00be\u00d1\u0087\u00d0\u00b8\u00d1\u0082\u00d1\u008c / \u00d0\u00a3\u00d0\u00b4\u00d0\u00b0\u00d0\u00bb\u00d0\u00b8\u00d1\u0082\u00d1\u008c \u00d0\u00ba\u00d0\u00be\u00d0\u00bb\u00d0\u00be\u00d0\u00bd\u00d0\u00ba\u00d0\u00b8\",",
                "@@ -249,3 +249,3 @@",
                "     \"core-dialogs/for-recon-cell\": \"\u00d0\u0092\u00d1\u008b\u00d0\u00b2\u00d0\u00be\u00d0\u00b4 \u00d1\u008f\u00d1\u0087\u00d0\u00b5\u00d0\u00b5\u00d0\u00ba \u00d0\u00bf\u00d1\u0080\u00d0\u00be\u00d1\u0088\u00d0\u00b5\u00d0\u00b4\u00d1\u0088\u00d0\u00b8\u00d1\u0085 \u00d1\u0081\u00d0\u00b2\u00d0\u00b5\u00d1\u0080\u00d0\u00ba\u00d1\u0083\",",
                "-    \"core-dialogs/ppm\": \"\u00d0\u00a0\u00d0\u00a0\u00d0\u009c\",",
                "+    \"clustering-distances/PPM\": \"\u00d0\u00a0\u00d0\u00a0\u00d0\u009c\",",
                "     \"core-dialogs/cell-value\": \"\u00d0\u0097\u00d0\u00bd\u00d0\u00b0\u00d1\u0087\u00d0\u00b5\u00d0\u00bd\u00d0\u00b8\u00d0\u00b5 \u00d1\u0082\u00d0\u00b5\u00d0\u00ba\u00d1\u0083\u00d1\u0089\u00d0\u00b5\u00d0\u00b9 \u00d1\u008f\u00d1\u0087\u00d0\u00b5\u00d0\u00b9\u00d0\u00ba\u00d0\u00b8. \u00d0\u00a1\u00d0\u00be\u00d0\u00ba\u00d1\u0080\u00d0\u00b0\u00d1\u0089\u00d1\u0091\u00d0\u00bd\u00d0\u00bd\u00d0\u00be\u00d0\u00b5 \u00d0\u00bd\u00d0\u00b0\u00d0\u00b8\u00d0\u00bc\u00d0\u00b5\u00d0\u00bd\u00d0\u00be\u00d0\u00b2\u00d0\u00b0\u00d0\u00bd\u00d0\u00b8\u00d0\u00b5 \u00d0\u00b4\u00d0\u00bb\u00d1\u008f 'cell.value'.\",",
                "@@ -301,3 +301,3 @@",
                "     \"core-dialogs/big-dot\": \"\u00d0\u0091\u00d0\u00be\u00d0\u00bb\u00d1\u008c\u00d1\u0088\u00d0\u00be\u00d0\u00b9 \u00d1\u0080\u00d0\u00b0\u00d0\u00b7\u00d0\u00bc\u00d0\u00b5\u00d1\u0080 \u00d1\u0082\u00d0\u00be\u00d1\u0087\u00d0\u00ba\u00d0\u00b8\",",
                "-    \"core-dialogs/metaphone\": \"Metaphone3\",",
                "+    \"clustering-keyers/metaphone3\": \"Metaphone3\",",
                "     \"core-facets/regular-dot\": \"\u00d0\u00a1\u00d1\u0082\u00d0\u00b0\u00d0\u00bd\u00d0\u00b4\u00d0\u00b0\u00d1\u0080\u00d1\u0082\u00d0\u00bd\u00d1\u008b\u00d0\u00b9 \u00d1\u0080\u00d0\u00b0\u00d0\u00b7\u00d0\u00bc\u00d0\u00b5\u00d1\u0080 \u00d1\u0082\u00d0\u00be\u00d1\u0087\u00d0\u00ba\u00d0\u00b8\",",
                "diff --git a/main/webapp/modules/core/langs/translation-tl.json b/main/webapp/modules/core/langs/translation-tl.json",
                "index b91fc398e..a1af3e405 100644",
                "--- a/main/webapp/modules/core/langs/translation-tl.json",
                "+++ b/main/webapp/modules/core/langs/translation-tl.json",
                "@@ -159,3 +159,3 @@",
                "     \"core-dialogs/focusing-on\": \"nakapokus sa\",",
                "-    \"core-dialogs/fingerprint\": \"tatak ng daliri\",",
                "+    \"clustering-keyers/fingerprint\": \"tatak ng daliri\",",
                "     \"core-dialogs/block-chars\": \"Magharang&nbsp;Karakter&nbsp;\",",
                "@@ -163,3 +163,3 @@",
                "     \"core-dialogs/short-format\": \"Maikling lokal na pormat\",",
                "-    \"core-dialogs/leven\": \"ang levenshtein\",",
                "+    \"clustering-distances/levenshtein\": \"ang levenshtein\",",
                "     \"core-dialogs/rotated-clock\": \"Umiikot ng 45\u00c2\u00b0 Clockwise\",",
                "@@ -169,3 +169,3 @@",
                "     \"core-dialogs/cluster-descr\": \"Ang katagiang ito ay makakatulong sa iyong paghahanap ng ibat-ibang mga balyu ng cell na maaaring maging alternatibong pagpresenta sa magkaparehong bagay. Halimbawa, ang dalawang strings na  \\\"New York\\\" at \\\"new york\\\" ay malamang na tumutukoy sa parehong konsepto at mayroong pagkakaiba sa kapitalisasyon, at  ahhhh \\\"G\u00c3\u00b6del\\\" and \\\"Godel\\\" na maaaring nag reper sa parehong tao.\",",
                "-    \"core-dialogs/phonetic\": \"ang cologne-phonetic\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"ang cologne-phonetic\",",
                "     \"core-dialogs/found\": \"Nakita na\",",
                "@@ -202,3 +202,3 @@",
                "     \"core-dialogs/json-text\": \"Ang sumusunod na teksto ng JSON ay mag-encode ng mga opsiyon na iyong itinakda sa ibang mga tabs. Pwede mo itong kopyahin at i-save para sa ibang pagkakataon, at muling i-paste at i-klik ang Apply para muling gamiting ang parihong mga opsiyon.\",",
                "-    \"core-dialogs/ngram\": \"ang ngram-fingerprint\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ang ngram-fingerprint\",",
                "     \"core-dialogs/reorder-column\": \"Muling pagkasunod-sunod / Tanggalin ang mga kolum\",",
                "@@ -210,3 +210,3 @@",
                "     \"core-dialogs/for-recon-cell\": \"Para sa mga narekonsilang mga cells, kalalabasan\",",
                "-    \"core-dialogs/ppm\": \"PPM\",",
                "+    \"clustering-distances/PPM\": \"PPM\",",
                "     \"core-dialogs/cell-value\": \"Ang kasalukuyang balyu ng mga cell. Ito ay isang shortcut para sa 'cell.value'.\",",
                "@@ -262,3 +262,3 @@",
                "     \"core-dialogs/big-dot\": \"Malaking Sukat ng Tuldok\",",
                "-    \"core-dialogs/metaphone\": \"ang metaphone3\",",
                "+    \"clustering-keyers/metaphone3\": \"ang metaphone3\",",
                "     \"core-facets/regular-dot\": \"Katamtamang Sukat ng Tuldok\",",
                "diff --git a/main/webapp/modules/core/langs/translation-zh.json b/main/webapp/modules/core/langs/translation-zh.json",
                "index be7e99d63..34c4829a8 100644",
                "--- a/main/webapp/modules/core/langs/translation-zh.json",
                "+++ b/main/webapp/modules/core/langs/translation-zh.json",
                "@@ -143,9 +143,9 @@",
                "     \"core-dialogs/keying-function\": \"\u00e5\u0085\u00b3\u00e9\u0094\u00ae\u00e8\u00af\u008d\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "-    \"core-dialogs/fingerprint\": \"\u00e6\u008c\u0087\u00e7\u00ba\u00b9\u00e5\u0088\u0086\u00e7\u00b1\u00bb\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "-    \"core-dialogs/ngram\": \"ngram-\u00e6\u008c\u0087\u00e7\u00ba\u00b9\u00e5\u0088\u0086\u00e7\u00b1\u00bb\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "-    \"core-dialogs/metaphone\": \"metaphone3\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "-    \"core-dialogs/phonetic\": \"cologne-phonetic\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "+    \"clustering-keyers/fingerprint\": \"\u00e6\u008c\u0087\u00e7\u00ba\u00b9\u00e5\u0088\u0086\u00e7\u00b1\u00bb\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "+    \"clustering-keyers/ngram-fingerprint\": \"ngram-\u00e6\u008c\u0087\u00e7\u00ba\u00b9\u00e5\u0088\u0086\u00e7\u00b1\u00bb\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "+    \"clustering-keyers/metaphone3\": \"metaphone3\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "+    \"clustering-keyers/cologne-phonetic\": \"cologne-phonetic\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "     \"core-dialogs/distance-fun\": \"\u00e8\u00b7\u009d\u00e7\u00a6\u00bb\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "-    \"core-dialogs/leven\": \"levenshtein\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "-    \"core-dialogs/ppm\": \"PPM\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "+    \"clustering-distances/levenshtein\": \"levenshtein\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "+    \"clustering-distances/PPM\": \"PPM\u00e7\u00ae\u0097\u00e6\u00b3\u0095\",",
                "     \"core-dialogs/ngram-size\": \"Ngram&nbsp;\u00e5\u00a4\u00a7\u00e5\u00b0\u008f&nbsp;\",",
                "diff --git a/main/webapp/modules/core/scripts/dialogs/clustering-dialog.html b/main/webapp/modules/core/scripts/dialogs/clustering-dialog.html",
                "index 340fb8d6b..0417660aa 100644",
                "--- a/main/webapp/modules/core/scripts/dialogs/clustering-dialog.html",
                "+++ b/main/webapp/modules/core/scripts/dialogs/clustering-dialog.html",
                "@@ -19,13 +19,7 @@",
                "           <div class=\"binning-controls\"><span bind=\"or_dialog_keying\"></span>",
                "-          <select bind=\"keyingFunctionSelector\">",
                "-            <option selected=\"true\" bind=\"or_dialog_fingerprint\" value=\"fingerprint\"></option>",
                "-            <option bind=\"or_dialog_ngram\" value=\"ngram-fingerprint\"></option>",
                "-            <option bind=\"or_dialog_metaphone\" value=\"metaphone3\"></option>",
                "-            <option bind=\"or_dialog_phonetic\" value=\"cologne-phonetic\"></option>",
                "-          </select></div>",
                "+             <select bind=\"keyingFunctionSelector\"></select>",
                "+          </div>",
                "           <div class=\"knn-controls hidden\"><span bind=\"or_dialog_distance\"></span>",
                "-          <select bind=\"distanceFunctionSelector\">",
                "-            <option selected=\"true\" bind=\"or_dialog_leven\" value=\"levenshtein\"></option>",
                "-            <option bind=\"or_dialog_ppm\" value=\"PPM\"></option>",
                "-          </select></div>",
                "+             <select bind=\"distanceFunctionSelector\"></select>",
                "+          </div>",
                "         </td>",
                "diff --git a/main/webapp/modules/core/scripts/dialogs/clustering-dialog.js b/main/webapp/modules/core/scripts/dialogs/clustering-dialog.js",
                "index 0929c405d..09d799647 100644",
                "--- a/main/webapp/modules/core/scripts/dialogs/clustering-dialog.js",
                "+++ b/main/webapp/modules/core/scripts/dialogs/clustering-dialog.js",
                "@@ -59,9 +59,2 @@ ClusteringDialog.prototype._createDialog = function() {",
                "     this._elmts.or_dialog_keying.html($.i18n('core-dialogs/keying-function'));",
                "-    this._elmts.or_dialog_fingerprint.html($.i18n('core-dialogs/fingerprint'));",
                "-    this._elmts.or_dialog_ngram.html($.i18n('core-dialogs/ngram'));",
                "-    this._elmts.or_dialog_metaphone.html($.i18n('core-dialogs/metaphone'));",
                "-    this._elmts.or_dialog_phonetic.html($.i18n('core-dialogs/phonetic'));",
                "-    this._elmts.or_dialog_distance.html($.i18n('core-dialogs/distance-fun'));",
                "-    this._elmts.or_dialog_leven.html($.i18n('core-dialogs/leven'));",
                "-    this._elmts.or_dialog_ppm.html($.i18n('core-dialogs/ppm'));",
                "     this._elmts.or_dialog_ngramSize.html($.i18n('core-dialogs/ngram-size'));",
                "@@ -129,3 +122,31 @@ ClusteringDialog.prototype._createDialog = function() {",
                "-    this._level = DialogSystem.showDialog(dialog);",
                "+    // Fill in all the keyers and distances",
                "+    $.get(\"command/core/get-clustering-functions-and-distances\")",
                "+    .success(function(data) {",
                "+       var keyers = data.keyers != null ? data.keyers : [];",
                "+       var distances = data.distances != null ? data.distances : [];",
                "+       var i = 0;",
                "+       for(; i < keyers.length; i++) {",
                "+          var option = $('<option></option>')",
                "+             .attr('value', keyers[i])",
                "+             .text($.i18n('clustering-keyers/'+keyers[i]))",
                "+             .appendTo(self._elmts.keyingFunctionSelector);",
                "+          if (i == 0) {",
                "+             option.attr('selected', 'true');",
                "+          }",
                "+       }",
                "+       for(i = 0; i < distances.length; i++) {",
                "+          var option = $('<option></option>')",
                "+             .attr('value', distances[i])",
                "+             .text($.i18n('clustering-distances/'+distances[i]))",
                "+             .appendTo(self._elmts.distanceFunctionSelector);",
                "+          if (i == 0) {",
                "+             option.attr('selected', 'true');",
                "+          }",
                "+       }",
                "+       self._level = DialogSystem.showDialog(dialog);",
                "+    })",
                "+    .error(function(error) {",
                "+            alert($.i18n('core-dialogs/no-clustering-functions-and-distances'));",
                "+    });",
                " };"
            ],
            "changed_files": [
                "main/src/com/google/refine/clustering/binning/KeyerFactory.java",
                "main/src/com/google/refine/clustering/knn/DistanceFactory.java",
                "main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "main/webapp/modules/core/langs/translation-ceb.json",
                "main/webapp/modules/core/langs/translation-de.json",
                "main/webapp/modules/core/langs/translation-en.json",
                "main/webapp/modules/core/langs/translation-es.json",
                "main/webapp/modules/core/langs/translation-fil.json",
                "main/webapp/modules/core/langs/translation-fr.json",
                "main/webapp/modules/core/langs/translation-he.json",
                "main/webapp/modules/core/langs/translation-hu.json",
                "main/webapp/modules/core/langs/translation-it.json",
                "main/webapp/modules/core/langs/translation-jp.json",
                "main/webapp/modules/core/langs/translation-nb_NO.json",
                "main/webapp/modules/core/langs/translation-pt_BR.json",
                "main/webapp/modules/core/langs/translation-ru.json",
                "main/webapp/modules/core/langs/translation-tl.json",
                "main/webapp/modules/core/langs/translation-zh.json",
                "main/webapp/modules/core/scripts/dialogs/clustering-dialog.html",
                "main/webapp/modules/core/scripts/dialogs/clustering-dialog.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5f86798377f898f009ebbd7b116ac4a780c2268b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542804917,
            "hunks": 1,
            "message": "Remove org.json dependency in Maven configuration",
            "diff": [
                "diff --git a/main/pom.xml b/main/pom.xml",
                "index 1ce81a8af..66af6ffd1 100644",
                "--- a/main/pom.xml",
                "+++ b/main/pom.xml",
                "@@ -278,7 +278,2 @@",
                "     </dependency>",
                "-    <dependency>",
                "-      <groupId>org.json</groupId>",
                "-      <artifactId>json</artifactId>",
                "-      <version>20160810</version>",
                "-    </dependency>",
                "     <dependency>"
            ],
            "changed_files": [
                "main/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1df2d15e6d31a9463ebe0157728eba625f0f1ef1",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542799329,
            "hunks": 16,
            "message": "Remove all references to org.json in gdata extension",
            "diff": [
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java b/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "index 1a54b5ef4..8034d6fc6 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "@@ -13,5 +13,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.apache.commons.lang3.exception.ExceptionUtils;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -20,2 +17,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                " import com.fasterxml.jackson.databind.node.ObjectNode;",
                "@@ -102,3 +100,3 @@ public class GDataImportingController implements ImportingController {",
                "             }",
                "-        } catch (JSONException e) {",
                "+        } catch (IOException e) {",
                "             throw new ServletException(e);",
                "@@ -113,3 +111,3 @@ public class GDataImportingController implements ImportingController {",
                "     private void listSpreadsheets(Drive drive, JsonGenerator writer)",
                "-            throws IOException, JSONException {",
                "+            throws IOException {",
                "          com.google.api.services.drive.Drive.Files.List files = drive.files().list();",
                "@@ -144,3 +142,3 @@ public class GDataImportingController implements ImportingController {",
                "     private void listFusionTables(Fusiontables service, JsonGenerator writer)",
                "-        throws IOException, JSONException {",
                "+        throws IOException {",
                "@@ -174,4 +172,4 @@ public class GDataImportingController implements ImportingController {",
                "         String urlString = parameters.getProperty(\"docUrl\");",
                "-        JSONObject result = new JSONObject();",
                "-        JSONObject options = new JSONObject();",
                "+        ObjectNode result = ParsingUtilities.mapper.createObjectNode();",
                "+        ObjectNode options = ParsingUtilities.mapper.createObjectNode();",
                "@@ -184,3 +182,3 @@ public class GDataImportingController implements ImportingController {",
                "         if (\"spreadsheet\".equals(type)) {",
                "-            JSONArray worksheets = new JSONArray();",
                "+            ArrayNode worksheets = ParsingUtilities.mapper.createArrayNode();",
                "             // extract spreadSheetId from URL",
                "@@ -195,3 +193,3 @@ public class GDataImportingController implements ImportingController {",
                "             for (Sheet sheet : worksheetEntries) {",
                "-                JSONObject worksheetO = new JSONObject();",
                "+                ObjectNode worksheetO = ParsingUtilities.mapper.createObjectNode();",
                "                 JSONUtilities.safePut(worksheetO, \"name\", sheet.getProperties().getTitle());",
                "@@ -237,51 +235,46 @@ public class GDataImportingController implements ImportingController {",
                "         job.updating = true;",
                "+        ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "+            request.getParameter(\"options\"));",
                "+        ",
                "+        List<Exception> exceptions = new LinkedList<Exception>();",
                "+        ",
                "+        job.prepareNewProject();",
                "+        ",
                "+        GDataImporter.parse(",
                "+            token,",
                "+            job.project,",
                "+            job.metadata,",
                "+            job,",
                "+            100,",
                "+            optionObj,",
                "+            exceptions",
                "+        );",
                "+        ",
                "+        Writer w = response.getWriter();",
                "+        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "         try {",
                "-            ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "-                request.getParameter(\"options\"));",
                "-            ",
                "-            List<Exception> exceptions = new LinkedList<Exception>();",
                "-            ",
                "-            job.prepareNewProject();",
                "-            ",
                "-            GDataImporter.parse(",
                "-                token,",
                "-                job.project,",
                "-                job.metadata,",
                "-                job,",
                "-                100,",
                "-                optionObj,",
                "-                exceptions",
                "-            );",
                "-            ",
                "-            Writer w = response.getWriter();",
                "-            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "-            try {",
                "-                writer.writeStartObject();",
                "-                if (exceptions.size() == 0) {",
                "-                    job.project.update(); // update all internal models, indexes, caches, etc.",
                "-                    ",
                "-                    writer.writeStringField(\"status\", \"ok\");",
                "-                } else {",
                "-                    writer.writeStringField(\"status\", \"error\");",
                "-                    ",
                "-                    writer.writeArrayFieldStart(\"errors\");",
                "-                    DefaultImportingController.writeErrors(writer, exceptions);",
                "-                    writer.writeEndArray();",
                "-                }",
                "-                writer.writeEndObject();",
                "-            } catch (IOException e) {",
                "-                throw new ServletException(e);",
                "-            } finally {",
                "-                writer.flush();",
                "-                writer.close();",
                "-                w.flush();",
                "-                w.close();",
                "+            writer.writeStartObject();",
                "+            if (exceptions.size() == 0) {",
                "+                job.project.update(); // update all internal models, indexes, caches, etc.",
                "+                ",
                "+                writer.writeStringField(\"status\", \"ok\");",
                "+            } else {",
                "+                writer.writeStringField(\"status\", \"error\");",
                "+                ",
                "+                writer.writeArrayFieldStart(\"errors\");",
                "+                DefaultImportingController.writeErrors(writer, exceptions);",
                "+                writer.writeEndArray();",
                "             }",
                "-",
                "-        } catch (JSONException e) {",
                "+            writer.writeEndObject();",
                "+        } catch (IOException e) {",
                "             throw new ServletException(e);",
                "         } finally {",
                "-            job.touch();",
                "-            job.updating = false;",
                "+            writer.flush();",
                "+            writer.close();",
                "+            w.flush();",
                "+            w.close();",
                "         }",
                "+",
                "+        job.touch();",
                "+        job.updating = false;",
                "     }",
                "@@ -301,54 +294,50 @@ public class GDataImportingController implements ImportingController {",
                "         job.updating = true;",
                "-        try {",
                "-            final ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "-                request.getParameter(\"options\"));",
                "-            ",
                "-            final List<Exception> exceptions = new LinkedList<Exception>();",
                "-            ",
                "-            job.setState(\"creating-project\");",
                "-            ",
                "-            final Project project = new Project();",
                "-            new Thread() {",
                "-                @Override",
                "-                public void run() {",
                "-                    ProjectMetadata pm = new ProjectMetadata();",
                "-                    pm.setName(JSONUtilities.getString(optionObj, \"projectName\", \"Untitled\"));",
                "-                    pm.setEncoding(JSONUtilities.getString(optionObj, \"encoding\", \"UTF-8\"));",
                "-                    ",
                "-                    try {",
                "-                        GDataImporter.parse(",
                "-                            token,",
                "-                            project,",
                "-                            pm,",
                "-                            job,",
                "-                            -1,",
                "-                            optionObj,",
                "-                            exceptions",
                "-                        );",
                "-                    } catch (IOException e) {",
                "-                        logger.error(ExceptionUtils.getStackTrace(e));",
                "-                    }",
                "-                    ",
                "-                    if (!job.canceled) {",
                "-                        if (exceptions.size() > 0) {",
                "-                            job.setError(exceptions);",
                "-                        } else {",
                "-                            project.update(); // update all internal models, indexes, caches, etc.",
                "-                            ",
                "-                            ProjectManager.singleton.registerProject(project, pm);",
                "-                            ",
                "-                            job.setState(\"created-project\");",
                "-                            job.setProjectID(project.id);",
                "-                        }",
                "+        final ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "+            request.getParameter(\"options\"));",
                "+        ",
                "+        final List<Exception> exceptions = new LinkedList<Exception>();",
                "+        ",
                "+        job.setState(\"creating-project\");",
                "+        ",
                "+        final Project project = new Project();",
                "+        new Thread() {",
                "+            @Override",
                "+            public void run() {",
                "+                ProjectMetadata pm = new ProjectMetadata();",
                "+                pm.setName(JSONUtilities.getString(optionObj, \"projectName\", \"Untitled\"));",
                "+                pm.setEncoding(JSONUtilities.getString(optionObj, \"encoding\", \"UTF-8\"));",
                "+                ",
                "+                try {",
                "+                    GDataImporter.parse(",
                "+                        token,",
                "+                        project,",
                "+                        pm,",
                "+                        job,",
                "+                        -1,",
                "+                        optionObj,",
                "+                        exceptions",
                "+                    );",
                "+                } catch (IOException e) {",
                "+                    logger.error(ExceptionUtils.getStackTrace(e));",
                "+                }",
                "+                ",
                "+                if (!job.canceled) {",
                "+                    if (exceptions.size() > 0) {",
                "+                        job.setError(exceptions);",
                "+                    } else {",
                "+                        project.update(); // update all internal models, indexes, caches, etc.",
                "+                        ",
                "+                        ProjectManager.singleton.registerProject(project, pm);",
                "-                        job.touch();",
                "-                        job.updating = false;",
                "+                        job.setState(\"created-project\");",
                "+                        job.setProjectID(project.id);",
                "                     }",
                "+                    ",
                "+                    job.touch();",
                "+                    job.updating = false;",
                "                 }",
                "-            }.start();",
                "-            ",
                "-            HttpUtilities.respond(response, \"ok\", \"done\");",
                "-        } catch (JSONException e) {",
                "-            throw new ServletException(e);",
                "-        }",
                "+            }",
                "+        }.start();",
                "+        ",
                "+        HttpUtilities.respond(response, \"ok\", \"done\");",
                "     }"
            ],
            "changed_files": [
                "extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7ae71470efc5a408a5a1804bb6e39c2ef64e9a03",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544525489,
            "hunks": 4,
            "message": "Add new command to expose known clustering functions and distances",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistances.java b/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistances.java",
                "deleted file mode 100644",
                "index 1ace8754c..000000000",
                "--- a/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistances.java",
                "+++ /dev/null",
                "@@ -1,23 +0,0 @@",
                "-package com.google.refine.commands.browsing;",
                "-",
                "-",
                "-import java.io.IOException;",
                "-",
                "-import javax.servlet.ServletException;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                "-import com.google.refine.commands.Command;",
                "-",
                "-public class GetClusteringFunctionsAndDistances extends Command {",
                "-\tfinal static Logger logger = LoggerFactory.getLogger(\"get-clustering-functions-and-distances_command\");",
                "-",
                "-    @Override",
                "-    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "-            throws ServletException, IOException {",
                "-    \t",
                "-    }",
                "-}",
                "diff --git a/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java b/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "new file mode 100644",
                "index 000000000..5cc9b7482",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "@@ -0,0 +1,39 @@",
                "+package com.google.refine.commands.browsing;",
                "+",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Set;",
                "+",
                "+import javax.servlet.ServletException;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.google.refine.clustering.binning.KeyerFactory;",
                "+import com.google.refine.clustering.knn.DistanceFactory;",
                "+import com.google.refine.commands.Command;",
                "+",
                "+public class GetClusteringFunctionsAndDistancesCommand extends Command {",
                "+\tfinal static Logger logger = LoggerFactory.getLogger(\"get-clustering-functions-and-distances_command\");",
                "+\t",
                "+\tprivate static class FunctionsAndDistancesResponse {",
                "+\t\t@JsonProperty(\"distances\")",
                "+\t\tpublic Set<String> getDistances() {",
                "+\t\t\treturn DistanceFactory.getDistanceNames();",
                "+\t\t}",
                "+\t\t",
                "+\t\t@JsonProperty(\"keyers\")",
                "+\t\tpublic Set<String> getKeyers() {",
                "+\t\t\treturn KeyerFactory.getKeyerNames();",
                "+\t\t}",
                "+\t}",
                "+",
                "+    @Override",
                "+    public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "+            throws ServletException, IOException {",
                "+    \trespondJSON(response, new FunctionsAndDistancesResponse());",
                "+    }",
                "+}",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java b/main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java",
                "new file mode 100644",
                "index 000000000..edb608bdb",
                "--- /dev/null",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java",
                "@@ -0,0 +1,53 @@",
                "+package com.google.refine.tests.commands.browsing;",
                "+",
                "+import static org.mockito.Mockito.mock;",
                "+import static org.mockito.Mockito.when;",
                "+import static org.testng.Assert.assertTrue;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.io.StringWriter;",
                "+import java.util.Arrays;",
                "+",
                "+import javax.servlet.ServletException;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+",
                "+import org.testng.annotations.BeforeMethod;",
                "+import org.testng.annotations.Test;",
                "+",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                "+import com.google.refine.commands.Command;",
                "+import com.google.refine.commands.browsing.GetClusteringFunctionsAndDistancesCommand;",
                "+import com.google.refine.util.JSONUtilities;",
                "+import com.google.refine.util.ParsingUtilities;",
                "+",
                "+",
                "+public class GetClusteringFunctionsAndDistancesCommandTest {",
                "+\t",
                "+    protected HttpServletRequest request = null;",
                "+    protected HttpServletResponse response = null;",
                "+\tprotected StringWriter writer = null;",
                "+\tprotected Command command = null;",
                "+\t",
                "+    @BeforeMethod",
                "+    public void setUp() {",
                "+        request = mock(HttpServletRequest.class);",
                "+        response = mock(HttpServletResponse.class);",
                "+        command = new GetClusteringFunctionsAndDistancesCommand();",
                "+        writer = new StringWriter();",
                "+        try {",
                "+            when(response.getWriter()).thenReturn(new PrintWriter(writer));",
                "+        } catch (IOException e) {",
                "+            e.printStackTrace();",
                "+        }",
                "+    }",
                "+\t",
                "+    @Test",
                "+\tpublic void testGetFunctionsAndKeyers() throws ServletException, IOException {",
                "+    \tcommand.doGet(request, response);",
                "+    \tObjectNode result = ParsingUtilities.mapper.readValue(writer.toString(), ObjectNode.class);",
                "+    \tassertTrue(Arrays.asList(JSONUtilities.getStringArray(result, \"keyers\")).contains(\"metaphone\"));",
                "+    \tassertTrue(Arrays.asList(JSONUtilities.getStringArray(result, \"distances\")).contains(\"levenshtein\"));",
                "+\t}",
                "+}",
                "diff --git a/main/webapp/modules/core/MOD-INF/controller.js b/main/webapp/modules/core/MOD-INF/controller.js",
                "index 75a975104..226e77d33 100644",
                "--- a/main/webapp/modules/core/MOD-INF/controller.js",
                "+++ b/main/webapp/modules/core/MOD-INF/controller.js",
                "@@ -92,2 +92,3 @@ function registerCommands() {",
                "   RS.registerCommand(module, \"compute-clusters\", new Packages.com.google.refine.commands.browsing.ComputeClustersCommand());",
                "+  RS.registerCommand(module, \"get-clustering-functions-and-distances\", new Packages.com.google.refine.commands.browsing.GetClusteringFunctionsAndDistancesCommand());"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistances.java",
                "main/src/com/google/refine/commands/browsing/GetClusteringFunctionsAndDistancesCommand.java",
                "main/tests/server/src/com/google/refine/tests/commands/browsing/GetClusteringFunctionsAndDistancesCommandTest.java",
                "main/webapp/modules/core/MOD-INF/controller.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "39498233fba580ee46fa09c1206fe7c9667ddb3d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540146372,
            "hunks": 8,
            "message": "Jackson deserialization for ListFacetConfig",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/facets/ListFacet.java b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "index 521af7858..768b287a1 100644",
                "--- a/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "+++ b/main/src/com/google/refine/browsing/facets/ListFacet.java",
                "@@ -120,2 +120,9 @@ public class ListFacet implements Facet {",
                "+        @JsonProperty(\"selection\")",
                "+        public void setSelection(List<DecoratedValueWrapper> wrapped) {",
                "+            selection = wrapped.stream()",
                "+                    .map(e -> e.value)",
                "+                    .collect(Collectors.toList());",
                "+        }",
                "+        ",
                "         @Override",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "index 92a77bf63..f462f4710 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java",
                "@@ -2,2 +2,4 @@ package com.google.refine.tests.browsing.facets;",
                "+import java.io.IOException;",
                "+",
                " import org.json.JSONObject;",
                "@@ -5,2 +7,5 @@ import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.core.JsonParseException;",
                "+import com.fasterxml.jackson.databind.JsonMappingException;",
                "+",
                " import com.google.refine.browsing.Engine;",
                "@@ -11,2 +16,3 @@ import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -68,3 +74,3 @@ public class ListFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeListFacet() {",
                "+    public void serializeListFacet() throws JsonParseException, JsonMappingException, IOException {",
                "         Project project = createCSVProject(\"Column A\\n\" +",
                "@@ -74,4 +80,3 @@ public class ListFacetTests extends RefineTest {",
                "-        ListFacetConfig facetConfig = new ListFacetConfig();",
                "-        facetConfig.initializeFromJSON(new JSONObject(jsonConfig));",
                "+        ListFacetConfig facetConfig = ParsingUtilities.mapper.readValue(jsonConfig, ListFacetConfig.class);",
                "@@ -84,3 +89,3 @@ public class ListFacetTests extends RefineTest {",
                "     @Test",
                "-    public void serializeListFacetWithError() {",
                "+    public void serializeListFacetWithError() throws JsonParseException, JsonMappingException, IOException {",
                "         Project project = createCSVProject(\"other column\\n\" +",
                "@@ -89,4 +94,3 @@ public class ListFacetTests extends RefineTest {",
                "-        ListFacetConfig facetConfig = new ListFacetConfig();",
                "-        facetConfig.initializeFromJSON(new JSONObject(jsonConfig));",
                "+        ListFacetConfig facetConfig = ParsingUtilities.mapper.readValue(jsonConfig, ListFacetConfig.class);",
                "         Facet facet = facetConfig.apply(project);"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/facets/ListFacet.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/ListFacetTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "86d1159926d5b142779072409aeceb9657f21a60",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542647499,
            "hunks": 22,
            "message": "Migrate Engine to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/browsing/Engine.java b/main/src/com/google/refine/browsing/Engine.java",
                "index 827555d6d..db6c5b77d 100644",
                "--- a/main/src/com/google/refine/browsing/Engine.java",
                "+++ b/main/src/com/google/refine/browsing/Engine.java",
                "@@ -40,5 +40,2 @@ import java.util.stream.Collectors;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonIgnore;",
                "@@ -179,8 +176,2 @@ public class Engine  {",
                "     }",
                "-",
                "-    @Deprecated",
                "-    public void initializeFromJSON(JSONObject o) throws JSONException {",
                "-        EngineConfig config = EngineConfig.reconstruct(o);",
                "-        initializeFromConfig(config);",
                "-    }",
                "@@ -193,3 +184,3 @@ public class Engine  {",
                "-    public void computeFacets() throws JSONException {",
                "+    public void computeFacets() {",
                "         if (_config.getMode().equals(Mode.RowBased)) {",
                "diff --git a/main/src/com/google/refine/browsing/EngineConfig.java b/main/src/com/google/refine/browsing/EngineConfig.java",
                "index 0898fbd89..b706d1c31 100644",
                "--- a/main/src/com/google/refine/browsing/EngineConfig.java",
                "+++ b/main/src/com/google/refine/browsing/EngineConfig.java",
                "@@ -6,4 +6,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -40,4 +38,4 @@ public class EngineConfig  {",
                "-    public static EngineConfig reconstruct(JSONObject o) {",
                "-        if(o == null) {",
                "+    public static EngineConfig reconstruct(String json) {",
                "+        if(json == null) {",
                "             return new EngineConfig(Collections.emptyList(), Mode.RowBased);",
                "@@ -45,3 +43,3 @@ public class EngineConfig  {",
                "         try {",
                "-            return ParsingUtilities.mapper.readValue(o.toString(), EngineConfig.class);",
                "+            return ParsingUtilities.mapper.readValue(json, EngineConfig.class);",
                "         } catch (IOException e) {",
                "diff --git a/main/src/com/google/refine/commands/Command.java b/main/src/com/google/refine/commands/Command.java",
                "index 1edecbc5a..8108d207a 100644",
                "--- a/main/src/com/google/refine/commands/Command.java",
                "+++ b/main/src/com/google/refine/commands/Command.java",
                "@@ -127,3 +127,3 @@ public abstract class Command {",
                "             return (json == null) ? null :",
                "-                   EngineConfig.reconstruct(ParsingUtilities.evaluateJsonStringToObject(json));",
                "+                   EngineConfig.reconstruct(json);",
                "         } catch (JSONException e){",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/EngineConfigTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/EngineConfigTests.java",
                "index 51847b3ef..378203370 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/EngineConfigTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/EngineConfigTests.java",
                "@@ -2,3 +2,2 @@ package com.google.refine.tests.browsing.facets;",
                "-import org.json.JSONObject;",
                " import org.testng.Assert;",
                "@@ -38,3 +37,3 @@ public class EngineConfigTests {",
                "     public void serializeEngineConfig() {",
                "-        EngineConfig ec = EngineConfig.reconstruct(new JSONObject(engineConfigJson));",
                "+        EngineConfig ec = EngineConfig.reconstruct(engineConfigJson);",
                "         TestUtils.isSerializedTo(ec, engineConfigJson);",
                "@@ -44,3 +43,3 @@ public class EngineConfigTests {",
                "     public void serializeEngineConfigRecordMode() {",
                "-        EngineConfig ec = EngineConfig.reconstruct(new JSONObject(engineConfigRecordModeJson));",
                "+        EngineConfig ec = EngineConfig.reconstruct(engineConfigRecordModeJson);",
                "         TestUtils.isSerializedTo(ec, engineConfigRecordModeJson);",
                "@@ -57,3 +56,3 @@ public class EngineConfigTests {",
                "     public void reconstructNoFacetsProvided() {",
                "-        EngineConfig ec = EngineConfig.reconstruct(new JSONObject(noFacetProvided));",
                "+        EngineConfig ec = EngineConfig.reconstruct(noFacetProvided);",
                "         Assert.assertEquals(ec.getMode(), Mode.RowBased);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/CacheTests.java b/main/tests/server/src/com/google/refine/tests/model/CacheTests.java",
                "index cccacf68f..8662db575 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/CacheTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/CacheTests.java",
                "@@ -83,3 +83,3 @@ public class CacheTests extends RefineTest {",
                "         engine = new Engine(project);",
                "-        engine_config = EngineConfig.reconstruct(new JSONObject(ENGINE_JSON_DUPLICATES));",
                "+        engine_config = EngineConfig.reconstruct(ENGINE_JSON_DUPLICATES);",
                "         engine.initializeFromConfig(engine_config);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "index 06e3d58a7..6a1b87076 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "@@ -65,3 +65,3 @@ public class BlankDownTests extends RefineTest {",
                "         AbstractOperation op = new BlankDownOperation(",
                "-                EngineConfig.reconstruct(new JSONObject(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\")),",
                "+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),",
                "                 \"second\");",
                "@@ -79,3 +79,3 @@ public class BlankDownTests extends RefineTest {",
                "         AbstractOperation op = new BlankDownOperation(",
                "-                EngineConfig.reconstruct(new JSONObject(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\")),",
                "+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"),",
                "                 \"second\");",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "index 73d82f2e7..1612e363a 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "@@ -7,3 +7,2 @@ import java.util.Properties;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.Assert;",
                "@@ -63,3 +62,3 @@ public class FillDownTests extends RefineTest {",
                "         AbstractOperation op = new FillDownOperation(",
                "-                EngineConfig.reconstruct(new JSONObject(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\")),",
                "+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),",
                "                 \"key\");",
                "@@ -79,3 +78,3 @@ public class FillDownTests extends RefineTest {",
                "         AbstractOperation op = new FillDownOperation(",
                "-                EngineConfig.reconstruct(new JSONObject(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\")),",
                "+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),",
                "                 \"second\");",
                "@@ -95,3 +94,3 @@ public class FillDownTests extends RefineTest {",
                "         AbstractOperation op = new FillDownOperation(",
                "-                EngineConfig.reconstruct(new JSONObject(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\")),",
                "+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"),",
                "                 \"second\");",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "index 41101a5ff..22108ea4d 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "@@ -107,3 +107,3 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "     private Properties options;",
                "-    private EngineConfig engine_config = EngineConfig.reconstruct(new JSONObject(ENGINE_JSON_URLS));",
                "+    private EngineConfig engine_config = EngineConfig.reconstruct(ENGINE_JSON_URLS);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "index 8038c94d2..90587302e 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "@@ -148,3 +148,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "         engine = new Engine(project);",
                "-        engine_config = EngineConfig.reconstruct(new JSONObject(ENGINE_JSON_URLS));",
                "+        engine_config = EngineConfig.reconstruct(ENGINE_JSON_URLS);",
                "         engine.initializeFromConfig(engine_config);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "index 4f5c8d263..ec6be5f1c 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java",
                "@@ -9,3 +9,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -31,3 +30,3 @@ public class ReconJudgeSimilarCellsTests extends RefineTest {",
                "-    static final EngineConfig ENGINE_CONFIG = EngineConfig.reconstruct(new JSONObject(\"{\\\"mode\\\":\\\"row-based\\\"}}\"));",
                "+    static final EngineConfig ENGINE_CONFIG = EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\"}}\");"
            ],
            "changed_files": [
                "main/src/com/google/refine/browsing/Engine.java",
                "main/src/com/google/refine/browsing/EngineConfig.java",
                "main/src/com/google/refine/commands/Command.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/EngineConfigTests.java",
                "main/tests/server/src/com/google/refine/tests/model/CacheTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconJudgeSimilarCellsTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c9786d0f9a7815a3a864f4723be05dae7870d266",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542645761,
            "hunks": 3,
            "message": "Fix bug in join() GREL function",
            "diff": [
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Join.java b/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "index 64b571d32..492ab9448 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "@@ -43,2 +43,3 @@ import com.google.refine.expr.EvalError;",
                " import com.google.refine.expr.ExpressionUtils;",
                "+import com.google.refine.expr.util.JsonValueConverter;",
                " import com.google.refine.grel.ControlFunctionRegistry;",
                "@@ -77,3 +78,3 @@ public class Join implements Function {",
                "                             try {",
                "-                                sb.append(a.get(i).toString());",
                "+                                sb.append(JsonValueConverter.convert(a.get(i)).toString());",
                "                             } catch (JSONException e) {",
                "diff --git a/main/tests/server/src/com/google/refine/tests/grel/GrelTests.java b/main/tests/server/src/com/google/refine/tests/grel/GrelTests.java",
                "index e52dc1b90..9cb69544c 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/grel/GrelTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/grel/GrelTests.java",
                "@@ -181,2 +181,8 @@ public class GrelTests extends RefineTest {",
                "     }",
                "+    ",
                "+    @Test",
                "+    public void testJoinJsonArray() throws ParsingException {",
                "+        String test[] = { \"\\\"{\\\\\\\"values\\\\\\\":[\\\\\\\"one\\\\\\\",\\\\\\\"two\\\\\\\",\\\\\\\"three\\\\\\\"]}\\\".parseJson().values.join(\\\",\\\")\", \"one,two,three\" };",
                "+        parseEval(bindings, test);",
                "+    }"
            ],
            "changed_files": [
                "main/src/com/google/refine/expr/functions/arrays/Join.java",
                "main/tests/server/src/com/google/refine/tests/grel/GrelTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cb2bbbf80189cbc8b5b6594e137180c81581b6f2",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541437408,
            "hunks": 2,
            "message": "Cleanup",
            "diff": [
                "diff --git a/main/src/com/google/refine/preference/PreferenceStore.java b/main/src/com/google/refine/preference/PreferenceStore.java",
                "index 69b3bb3fd..82e61a152 100644",
                "--- a/main/src/com/google/refine/preference/PreferenceStore.java",
                "+++ b/main/src/com/google/refine/preference/PreferenceStore.java",
                "@@ -125,3 +125,2 @@ public class PreferenceStore  {",
                "             String key = i.next();",
                "-            System.out.println(key);",
                "             if (entries.get(key) != null) {",
                "@@ -142,4 +141,2 @@ public class PreferenceStore  {",
                "     static public Object loadObject(JsonNode o) {",
                "-    \tSystem.out.println(\"loading\");",
                "-    \tSystem.out.println(o.toString());",
                "         try {"
            ],
            "changed_files": [
                "main/src/com/google/refine/preference/PreferenceStore.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0a5ea4e3dd75930df149fa574b6b8a9a27f432ae",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540201135,
            "hunks": 6,
            "message": "Jackson deserialization for ReconOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/recon/ReconOperation.java b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "index 612b7d57e..92bd12b12 100644",
                "--- a/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ReconOperation.java",
                "@@ -46,2 +46,3 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -77,15 +78,13 @@ public class ReconOperation extends EngineDependentOperation {",
                "-    static public ReconOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        ",
                "-        return new ReconOperation(",
                "-            EngineConfig.reconstruct(engineConfig), ",
                "-            obj.getString(\"columnName\"),",
                "-            ReconConfig.reconstruct(obj.getJSONObject(\"config\").toString())",
                "-        );",
                "+    static public ReconOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), ReconOperation.class);",
                "     }",
                "+    @JsonCreator",
                "     public ReconOperation(",
                "+        @JsonProperty(\"engineConfig\")",
                "         EngineConfig engineConfig, ",
                "+        @JsonProperty(\"columnName\")",
                "         String columnName, ",
                "+        @JsonProperty(\"config\")",
                "         ReconConfig reconConfig"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/recon/ReconOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8758ed2cffd3be146fc964552545a1cf1bee2706",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540136271,
            "hunks": 8,
            "message": "Jackson deserialization for ReconCandidate",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/ReconCandidate.java b/main/src/com/google/refine/model/ReconCandidate.java",
                "index 6b2e86f3a..d81e0f760 100644",
                "--- a/main/src/com/google/refine/model/ReconCandidate.java",
                "+++ b/main/src/com/google/refine/model/ReconCandidate.java",
                "@@ -39,2 +39,3 @@ import java.util.Properties;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -45,2 +46,3 @@ import com.fasterxml.jackson.core.JsonToken;",
                " import com.google.refine.expr.HasFields;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -56,6 +58,15 @@ public class ReconCandidate implements HasFields {",
                "-    public ReconCandidate(String topicID, String topicName, String[] typeIDs, double score) {",
                "+    @JsonCreator",
                "+    public ReconCandidate(",
                "+            @JsonProperty(\"id\")",
                "+            String topicID,",
                "+            @JsonProperty(\"name\")",
                "+            String topicName,",
                "+            @JsonProperty(\"types\")",
                "+            String[] typeIDs,",
                "+            @JsonProperty(\"score\")",
                "+            double score) {",
                "         this.id = topicID;",
                "         this.name = topicName;",
                "-        this.types = typeIDs;",
                "+        this.types = typeIDs == null ? new String[0] : typeIDs;",
                "         this.score = score;",
                "@@ -83,11 +94,6 @@ public class ReconCandidate implements HasFields {",
                "     static public ReconCandidate loadStreaming(String s) throws Exception {",
                "-        JsonFactory jsonFactory = new JsonFactory(); ",
                "-        JsonParser jp = jsonFactory.createJsonParser(s);",
                "-        ",
                "-        if (jp.nextToken() != JsonToken.START_OBJECT) {",
                "-            return null;",
                "-        }",
                "-        return loadStreaming(jp);",
                "+        return ParsingUtilities.mapper.readValue(s, ReconCandidate.class);",
                "     }",
                "+    @Deprecated",
                "     static public ReconCandidate loadStreaming(JsonParser jp) throws Exception {",
                "diff --git a/main/src/com/google/refine/model/recon/DataExtensionReconConfig.java b/main/src/com/google/refine/model/recon/DataExtensionReconConfig.java",
                "index 29c8c3590..7cf6dbce0 100644",
                "--- a/main/src/com/google/refine/model/recon/DataExtensionReconConfig.java",
                "+++ b/main/src/com/google/refine/model/recon/DataExtensionReconConfig.java",
                "@@ -38,4 +38,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                " import com.google.refine.model.Cell;",
                "@@ -51,18 +49,2 @@ public class DataExtensionReconConfig extends StandardReconConfig {",
                "-    static public ReconConfig reconstruct(JSONObject obj) throws Exception {",
                "-        JSONObject type = obj.getJSONObject(\"type\");",
                "-        ",
                "-        ReconType typ = null;",
                "-        if(obj.has(\"id\")) {",
                "-            typ = new ReconType(obj.getString(\"id\"),",
                "-                        obj.has(\"name\") ? obj.getString(\"name\") : obj.getString(\"id\"));",
                "-        }",
                "-",
                "-        return new DataExtensionReconConfig(",
                "-            obj.getString(\"service\"),",
                "-            obj.has(\"identifierSpace\") ? obj.getString(\"identifierSpace\") : null,",
                "-            obj.has(\"schemaSpace\") ? obj.getString(\"schemaSpace\") : null,",
                "-            typ);",
                "-    }",
                "-    ",
                "     public DataExtensionReconConfig("
            ],
            "changed_files": [
                "main/src/com/google/refine/model/ReconCandidate.java",
                "main/src/com/google/refine/model/recon/DataExtensionReconConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0583ae659d509d7cce1d60cf94ba1ab471426fff",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538303528,
            "hunks": 5,
            "message": "Make FileProjectManagerTests independent from RefineTest",
            "diff": [
                "diff --git a/main/tests/server/src/com/google/refine/tests/io/FileProjectManagerTests.java b/main/tests/server/src/com/google/refine/tests/io/FileProjectManagerTests.java",
                "index 80e470c73..8d7294e1d 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/io/FileProjectManagerTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/io/FileProjectManagerTests.java",
                "@@ -2,6 +2,9 @@ package com.google.refine.tests.io;",
                "+import static org.mockito.Mockito.mock;",
                "+",
                " import java.io.File;",
                "+import java.io.IOException;",
                "+import org.testng.annotations.BeforeMethod;",
                " import org.testng.annotations.Test;",
                "-import static org.mockito.Mockito.mock;",
                "@@ -9,6 +12,11 @@ import com.google.refine.io.FileProjectManager;",
                " import com.google.refine.model.metadata.ProjectMetadata;",
                "-import com.google.refine.tests.RefineTest;",
                " import com.google.refine.tests.util.TestUtils;",
                "-public class FileProjectManagerTests extends RefineTest {",
                "+public class FileProjectManagerTests  {",
                "+    protected File workspaceDir;",
                "+    ",
                "+    @BeforeMethod",
                "+    public void createDirectory() throws IOException {",
                "+        workspaceDir = TestUtils.createTempDirectory(\"openrefine-test-workspace-dir\");",
                "+    }"
            ],
            "changed_files": [
                "main/tests/server/src/com/google/refine/tests/io/FileProjectManagerTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "af866363ca7a5ff4c782d2506ea5fa42ad1831c0",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540136238,
            "hunks": 3,
            "message": "Jackson deserialization for ReconStats",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/ReconStats.java b/main/src/com/google/refine/model/ReconStats.java",
                "index f9b887a19..89650c791 100644",
                "--- a/main/src/com/google/refine/model/ReconStats.java",
                "+++ b/main/src/com/google/refine/model/ReconStats.java",
                "@@ -38,4 +38,3 @@ import java.io.Writer;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -46,11 +45,3 @@ import com.google.refine.util.ParsingUtilities;",
                "-public class ReconStats  {",
                "-    static public ReconStats load(JSONObject obj) throws Exception {",
                "-        return new ReconStats(",
                "-                obj.getInt(\"nonBlanks\"),",
                "-                obj.getInt(\"newTopics\"),",
                "-                obj.getInt(\"matchedTopics\")",
                "-        );",
                "-    }",
                "-    ",
                "+public class ReconStats  {   ",
                "     @JsonProperty(\"nonBlanks\")",
                "@@ -62,3 +53,10 @@ public class ReconStats  {",
                "-    public ReconStats(int nonBlanks, int newTopics, int matchedTopics) {",
                "+    @JsonCreator",
                "+    public ReconStats(",
                "+            @JsonProperty(\"nonBlanks\")",
                "+            int nonBlanks,",
                "+            @JsonProperty(\"newTopics\")",
                "+            int newTopics,",
                "+            @JsonProperty(\"matchedTopics\")",
                "+            int matchedTopics) {",
                "         this.nonBlanks = nonBlanks;"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/ReconStats.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d311810c2c55d764abc5eb86865d22c1223e92d8",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542713812,
            "hunks": 17,
            "message": "Migrate SortingConfig to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/row/GetRowsCommand.java b/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "index 238c28823..cfeb21cdc 100644",
                "--- a/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "+++ b/main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "@@ -44,5 +44,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonInclude;",
                "@@ -170,6 +167,4 @@ public class GetRowsCommand extends Command {",
                "             SortingConfig sortingConfig = null;",
                "-            try{",
                "-                String json = request.getParameter(\"sorting\");",
                "-                JSONObject sortingJson = (json == null) ? null : ",
                "-                    ParsingUtilities.evaluateJsonStringToObject(json);",
                "+            try {",
                "+                String sortingJson = request.getParameter(\"sorting\");",
                "                 if (sortingJson != null) {",
                "@@ -177,3 +172,3 @@ public class GetRowsCommand extends Command {",
                "                 }",
                "-            } catch (JSONException e) {",
                "+            } catch (IOException e) {",
                "             }",
                "diff --git a/main/src/com/google/refine/commands/row/ReorderRowsCommand.java b/main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "index 244b40c3f..fdb9ed798 100644",
                "--- a/main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "+++ b/main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "@@ -35,6 +35,5 @@ package com.google.refine.commands.row;",
                "-import javax.servlet.http.HttpServletRequest;",
                "+import java.io.IOException;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "+import javax.servlet.http.HttpServletRequest;",
                "@@ -47,3 +46,2 @@ import com.google.refine.operations.row.RowReorderOperation;",
                " import com.google.refine.sorting.SortingConfig;",
                "-import com.google.refine.util.ParsingUtilities;",
                "@@ -61,5 +59,4 @@ public class ReorderRowsCommand extends EngineDependentCommand {",
                "-            JSONObject sortingJson = (json == null) ? null : ParsingUtilities.evaluateJsonStringToObject(json);",
                "-            sorting = (sortingJson == null) ? null : SortingConfig.reconstruct(sortingJson);",
                "-        } catch (JSONException e) {",
                "+            sorting = (json == null) ? null : SortingConfig.reconstruct(json);",
                "+        } catch (IOException e) {",
                "             // ignore",
                "diff --git a/main/src/com/google/refine/exporters/TemplatingExporter.java b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "index a18a62b57..92cf230c7 100644",
                "--- a/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "+++ b/main/src/com/google/refine/exporters/TemplatingExporter.java",
                "@@ -40,3 +40,2 @@ import java.util.Properties;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "@@ -90,9 +89,3 @@ public class TemplatingExporter implements WriterExporter {",
                "-        JSONObject sortingJson = null;",
                "-        try{",
                "-            String json = options.getProperty(\"sorting\");",
                "-            sortingJson = (json == null) ? null : ",
                "-                ParsingUtilities.evaluateJsonStringToObject(json);",
                "-        } catch (JSONException e) {",
                "-        }",
                "+        String sortingJson = options.getProperty(\"sorting\");",
                "diff --git a/main/src/com/google/refine/sorting/SortingConfig.java b/main/src/com/google/refine/sorting/SortingConfig.java",
                "index cda207815..5d5f961df 100644",
                "--- a/main/src/com/google/refine/sorting/SortingConfig.java",
                "+++ b/main/src/com/google/refine/sorting/SortingConfig.java",
                "@@ -4,4 +4,2 @@ import java.io.IOException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -32,4 +30,4 @@ public final class SortingConfig  {",
                "-    public static SortingConfig reconstruct(JSONObject obj) throws IOException {",
                "-        return ParsingUtilities.mapper.readValue(obj.toString(), SortingConfig.class);",
                "+    public static SortingConfig reconstruct(String obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj, SortingConfig.class);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "index adb1160bd..a21a83bb9 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "@@ -2,4 +2,2 @@ package com.google.refine.tests.operations.row;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                " import java.util.Properties;",
                "@@ -7,3 +5,2 @@ import java.util.Properties;",
                " import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.Assert;",
                "@@ -54,3 +51,3 @@ public class RowReorderOperationTests extends RefineTest {",
                "         String sortingJson = \"{\\\"criteria\\\":[{\\\"column\\\":\\\"key\\\",\\\"valueType\\\":\\\"number\\\",\\\"reverse\\\":false,\\\"blankPosition\\\":2,\\\"errorPosition\\\":1}]}\";",
                "-        SortingConfig sortingConfig = SortingConfig.reconstruct(new JSONObject(sortingJson));",
                "+        SortingConfig sortingConfig = SortingConfig.reconstruct(sortingJson);",
                "         project.rows.get(1).cells.set(0, new Cell(\"\", null));",
                "@@ -71,3 +68,2 @@ public class RowReorderOperationTests extends RefineTest {",
                "     public void serializeRowReorderOperation() throws JSONException, Exception {",
                "-        Project project = mock(Project.class);",
                "         String json = \"  {\\n\" + ",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java b/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java",
                "index 75903a1e0..837469313 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java",
                "@@ -4,4 +4,2 @@ import java.io.IOException;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.annotations.Test;",
                "@@ -13,3 +11,3 @@ public class SortingConfigTests {",
                "     @Test",
                "-    public void serializeSortingConfig() throws JSONException, IOException {",
                "+    public void serializeSortingConfig() throws IOException {",
                "         String json = \"{\\n\" + ",
                "@@ -25,3 +23,3 @@ public class SortingConfigTests {",
                "                 \"    }\";",
                "-        TestUtils.isSerializedTo(SortingConfig.reconstruct(new JSONObject(json)), json);",
                "+        TestUtils.isSerializedTo(SortingConfig.reconstruct(json), json);",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/row/GetRowsCommand.java",
                "main/src/com/google/refine/commands/row/ReorderRowsCommand.java",
                "main/src/com/google/refine/exporters/TemplatingExporter.java",
                "main/src/com/google/refine/sorting/SortingConfig.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/sorting/SortingConfigTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2873035ee21168230a5dd35c4367f5656d3a9ecf",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541167533,
            "hunks": 104,
            "message": "Migrate TabularExporter to use JsonNode",
            "diff": [
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java b/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java",
                "index 059fe66ab..230d836be 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java",
                "@@ -6,3 +6,3 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "@@ -13,2 +13,3 @@ import com.google.api.services.fusiontables.Fusiontables;",
                "+import com.google.refine.exporters.CustomizableTabularExporterConfiguration;",
                " import com.google.refine.exporters.TabularSerializer;",
                "@@ -33,3 +34,3 @@ final class FusionTableSerializer implements TabularSerializer {",
                "     @Override",
                "-    public void startFile(JSONObject options) {",
                "+    public void startFile(JsonNode options) {",
                "     }",
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java b/extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java",
                "index 145a92a2d..1aa6300e1 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java",
                "@@ -8,3 +8,2 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -12,2 +11,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+",
                " import com.google.api.services.sheets.v4.Sheets;",
                "@@ -20,2 +21,3 @@ import com.google.api.services.sheets.v4.model.RowData;",
                "+import com.google.refine.exporters.CustomizableTabularExporterConfiguration;",
                " import com.google.refine.exporters.TabularSerializer;",
                "@@ -46,3 +48,3 @@ final class SpreadsheetSerializer implements TabularSerializer {",
                "     @Override",
                "-    public void startFile(JSONObject options) {",
                "+    public void startFile(JsonNode options) {",
                "     }",
                "diff --git a/main/src/com/google/refine/exporters/CsvExporter.java b/main/src/com/google/refine/exporters/CsvExporter.java",
                "index 913d61d4f..a25276703 100644",
                "--- a/main/src/com/google/refine/exporters/CsvExporter.java",
                "+++ b/main/src/com/google/refine/exporters/CsvExporter.java",
                "@@ -40,4 +40,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -46,2 +44,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "@@ -84,5 +83,2 @@ public class CsvExporter implements WriterExporter{",
                "                 options = ParsingUtilities.mapper.readValue(optionsString, Configuration.class);",
                "-                if (options.separator == null) {",
                "-                    options.separator = Character.toString(separator);",
                "-                }",
                "             } catch (IOException e) {",
                "@@ -92,2 +88,5 @@ public class CsvExporter implements WriterExporter{",
                "         }",
                "+        if (options.separator == null) {",
                "+            options.separator = Character.toString(separator);",
                "+        }",
                "@@ -107,3 +106,3 @@ public class CsvExporter implements WriterExporter{",
                "             @Override",
                "-            public void startFile(JSONObject options) {",
                "+            public void startFile(JsonNode options) {",
                "             }",
                "diff --git a/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java b/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "index 00c203ad6..e395f8d86 100644",
                "--- a/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "+++ b/main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "@@ -35,2 +35,3 @@ package com.google.refine.exporters;",
                "+import java.io.IOException;",
                " import java.text.DateFormat;",
                "@@ -49,5 +50,8 @@ import org.apache.commons.validator.routines.UrlValidator;",
                " import org.json.JSONArray;",
                "-import org.json.JSONException;",
                " import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.core.JsonProcessingException;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                " import com.google.refine.ProjectManager;",
                "@@ -67,2 +71,4 @@ import com.google.refine.util.ParsingUtilities;",
                " abstract public class CustomizableTabularExporterUtilities {",
                "+\tfinal static private String fullIso8601 = \"yyyy-MM-dd'T'HH:mm:ss'Z'\";",
                "+\t",
                "     static public void exportRows(",
                "@@ -74,7 +80,7 @@ abstract public class CustomizableTabularExporterUtilities {",
                "         String optionsString = (params != null) ? params.getProperty(\"options\") : null;",
                "-        JSONObject optionsTemp = null;",
                "+        JsonNode optionsTemp = null;",
                "         if (optionsString != null) {",
                "             try {",
                "-                optionsTemp = ParsingUtilities.evaluateJsonStringToObject(optionsString);",
                "-            } catch (JSONException e) {",
                "+                optionsTemp = ParsingUtilities.mapper.readTree(optionsString);",
                "+            } catch (IOException e) {",
                "                 // Ignore and keep options null.",
                "@@ -82,3 +88,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "         }",
                "-        final JSONObject options = optionsTemp;",
                "+        final JsonNode options = optionsTemp;",
                "@@ -95,3 +101,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "-        JSONArray columnOptionArray = options == null ? null :",
                "+        List<JsonNode> columnOptionArray = options == null ? null :",
                "             JSONUtilities.getArray(options, \"columns\");",
                "@@ -107,3 +113,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "         } else {",
                "-            int count = columnOptionArray.length();",
                "+            int count = columnOptionArray.size();",
                "@@ -111,3 +117,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "             for (int i = 0; i < count; i++) {",
                "-                JSONObject columnOptions = JSONUtilities.getObjectElement(columnOptionArray, i);",
                "+                JsonNode columnOptions = columnOptionArray.get(i);",
                "                 if (columnOptions != null) {",
                "@@ -116,3 +122,7 @@ abstract public class CustomizableTabularExporterUtilities {",
                "                         columnNames.add(name);",
                "-                        columnNameToFormatter.put(name, new CellFormatter(columnOptions));",
                "+                        try {",
                "+\t\t\t\t\t\t\tcolumnNameToFormatter.put(name, ParsingUtilities.mapper.treeToValue(columnOptions, ColumnOptions.class));",
                "+\t\t\t\t\t\t} catch (JsonProcessingException e) {",
                "+\t\t\t\t\t\t\te.printStackTrace();",
                "+\t\t\t\t\t\t}",
                "                     }",
                "@@ -188,3 +198,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "         @Override",
                "-        public void startFile(JSONObject options) {",
                "+        public void startFile(JsonNode options) {",
                "         }",
                "@@ -203,4 +213,7 @@ abstract public class CustomizableTabularExporterUtilities {",
                "     private enum ReconOutputMode {",
                "+        @JsonProperty(\"entity-name\")",
                "         ENTITY_NAME,",
                "+        @JsonProperty(\"entity-id\")",
                "         ENTITY_ID,",
                "+        @JsonProperty(\"cell-content\")",
                "         CELL_CONTENT",
                "@@ -208,7 +221,13 @@ abstract public class CustomizableTabularExporterUtilities {",
                "     private enum DateFormatMode {",
                "+        @JsonProperty(\"iso-8601\")",
                "         ISO_8601,",
                "+        @JsonProperty(\"locale-short\")",
                "         SHORT_LOCALE,",
                "+        @JsonProperty(\"locale-medium\")",
                "         MEDIUM_LOCALE,",
                "+        @JsonProperty(\"locale-long\")",
                "         LONG_LOCALE,",
                "+        @JsonProperty(\"locale-full\")",
                "         FULL_LOCALE,",
                "+        @JsonProperty(\"custom\")",
                "         CUSTOM",
                "@@ -216,13 +235,36 @@ abstract public class CustomizableTabularExporterUtilities {",
                "-    final static private String fullIso8601 = \"yyyy-MM-dd'T'HH:mm:ss'Z'\";",
                "+    static private class ReconSettings {",
                "+        @JsonProperty(\"output\")",
                "+        ReconOutputMode outputMode = ReconOutputMode.ENTITY_NAME;",
                "+        @JsonProperty(\"blankUnmatchedCells\")",
                "+        boolean blankUnmatchedCells = false;",
                "+        @JsonProperty(\"linkToEntityPages\")",
                "+        boolean linkToEntityPages = true;",
                "+    }",
                "+    ",
                "+    static private class DateSettings {",
                "+        @JsonProperty(\"format\")",
                "+        DateFormatMode formatMode = DateFormatMode.ISO_8601;",
                "+        @JsonProperty(\"custom\")",
                "+        String custom = null;",
                "+        @JsonProperty(\"useLocalTimeZone\")",
                "+        boolean useLocalTimeZone = false;",
                "+        @JsonProperty(\"omitTime\")",
                "+        boolean omitTime = false;",
                "+    }",
                "+    ",
                "+    static public class ColumnOptions extends CellFormatter {",
                "+        @JsonProperty(\"name\")",
                "+        String columnName;",
                "+    }",
                "-    static private class CellFormatter {",
                "-        ReconOutputMode recon_outputMode = ReconOutputMode.ENTITY_NAME;",
                "-        boolean recon_blankUnmatchedCells = false;",
                "-        boolean recon_linkToEntityPages = true;",
                "+    static public class CellFormatter {",
                "+        @JsonProperty(\"reconSettings\")",
                "+        ReconSettings recon = new ReconSettings();",
                "+        @JsonProperty(\"dateSettings\")",
                "+        DateSettings date = new DateSettings();",
                "-        DateFormatMode date_formatMode = DateFormatMode.ISO_8601;",
                "-        String date_custom = null;",
                "-        boolean date_useLocalTimeZone = false;",
                "-        boolean date_omitTime = false;",
                "+        //SQLExporter parameter to convert null cell value to empty string",
                "+        @JsonProperty(\"nullValueToEmptyStr\")",
                "+        boolean includeNullFieldValue = false;",
                "@@ -234,55 +276,32 @@ abstract public class CustomizableTabularExporterUtilities {",
                "-        //SQLExporter parameter to convert null cell value to empty string",
                "-        boolean includeNullFieldValue = false;",
                "+        @JsonCreator",
                "+        CellFormatter(",
                "+                @JsonProperty(\"reconSettings\")",
                "+                ReconSettings reconSettings,",
                "+                @JsonProperty(\"dateSettings\")",
                "+                DateSettings dateSettings,",
                "+                @JsonProperty(\"nullValueToEmptyStr\")",
                "+                boolean includeNullFieldValue) {",
                "+            if(reconSettings != null) {",
                "+                recon = reconSettings;",
                "+            }",
                "+            if(dateSettings != null) {",
                "+                date = dateSettings;",
                "+            }",
                "+            setup();",
                "+        }",
                "         CellFormatter() {",
                "-            dateFormatter = new SimpleDateFormat(fullIso8601);",
                "+            setup();",
                "         }",
                "-        CellFormatter(JSONObject options) {",
                "-            JSONObject reconSettings = JSONUtilities.getObject(options, \"reconSettings\");",
                "-            includeNullFieldValue = JSONUtilities.getBoolean(options, \"nullValueToEmptyStr\", false);",
                "-            if (reconSettings != null) {",
                "-                String reconOutputString = JSONUtilities.getString(reconSettings, \"output\", null);",
                "-                if (\"entity-name\".equals(reconOutputString)) {",
                "-                    recon_outputMode = ReconOutputMode.ENTITY_NAME;",
                "-                } else if (\"entity-id\".equals(reconOutputString)) {",
                "-                    recon_outputMode = ReconOutputMode.ENTITY_ID;",
                "-                } else if (\"cell-content\".equals(reconOutputString)) {",
                "-                    recon_outputMode = ReconOutputMode.CELL_CONTENT;",
                "-                }",
                "-                ",
                "-                recon_blankUnmatchedCells = JSONUtilities.getBoolean(reconSettings, \"blankUnmatchedCells\", recon_blankUnmatchedCells);",
                "-                recon_linkToEntityPages = JSONUtilities.getBoolean(reconSettings, \"linkToEntityPages\", recon_linkToEntityPages);",
                "-            }",
                "-            JSONObject dateSettings = JSONUtilities.getObject(options, \"dateSettings\");",
                "-            if (dateSettings != null) {",
                "-                String dateFormatString = JSONUtilities.getString(dateSettings, \"format\", null);",
                "-                if (\"iso-8601\".equals(dateFormatString)) {",
                "-                    date_formatMode = DateFormatMode.ISO_8601;",
                "-                } else if (\"locale-short\".equals(dateFormatString)) {",
                "-                    date_formatMode = DateFormatMode.SHORT_LOCALE;",
                "-                } else if (\"locale-medium\".equals(dateFormatString)) {",
                "-                    date_formatMode = DateFormatMode.MEDIUM_LOCALE;",
                "-                } else if (\"locale-long\".equals(dateFormatString)) {",
                "-                    date_formatMode = DateFormatMode.LONG_LOCALE;",
                "-                } else if (\"locale-full\".equals(dateFormatString)) {",
                "-                    date_formatMode = DateFormatMode.FULL_LOCALE;",
                "-                } else if (\"custom\".equals(dateFormatString)) {",
                "-                    date_formatMode = DateFormatMode.CUSTOM;",
                "-                }",
                "-                ",
                "-                date_custom = JSONUtilities.getString(dateSettings, \"custom\", null);",
                "-                date_useLocalTimeZone = JSONUtilities.getBoolean(dateSettings, \"useLocalTimeZone\", date_useLocalTimeZone);",
                "-                date_omitTime = JSONUtilities.getBoolean(dateSettings, \"omitTime\", date_omitTime);",
                "-                ",
                "-                if (date_formatMode == DateFormatMode.CUSTOM &&",
                "-                    (date_custom == null || date_custom.isEmpty())) {",
                "-                    date_formatMode = DateFormatMode.ISO_8601;",
                "-                }",
                "+        private void setup() {",
                "+            if (date.formatMode == DateFormatMode.CUSTOM &&",
                "+                (date.custom == null || date.custom.isEmpty())) {",
                "+                date.formatMode = DateFormatMode.ISO_8601;",
                "             }",
                "-            switch (date_formatMode) {",
                "+            switch (date.formatMode) {",
                "             case SHORT_LOCALE:",
                "-                dateFormatter = date_omitTime ?",
                "+                dateFormatter = date.omitTime ?",
                "                     SimpleDateFormat.getDateInstance(SimpleDateFormat.SHORT) :",
                "@@ -291,3 +310,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "             case MEDIUM_LOCALE:",
                "-                dateFormatter = date_omitTime ?",
                "+                dateFormatter = date.omitTime ?",
                "                     SimpleDateFormat.getDateInstance(SimpleDateFormat.MEDIUM) :",
                "@@ -296,3 +315,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "             case LONG_LOCALE:",
                "-                dateFormatter = date_omitTime ?",
                "+                dateFormatter = date.omitTime ?",
                "                     SimpleDateFormat.getDateInstance(SimpleDateFormat.LONG) :",
                "@@ -301,3 +320,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "             case FULL_LOCALE:",
                "-                dateFormatter = date_omitTime ?",
                "+                dateFormatter = date.omitTime ?",
                "                     SimpleDateFormat.getDateInstance(SimpleDateFormat.FULL) :",
                "@@ -306,3 +325,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "             case CUSTOM:",
                "-                dateFormatter = new SimpleDateFormat(date_custom);",
                "+                dateFormatter = new SimpleDateFormat(date.custom);",
                "                 break;",
                "@@ -310,3 +329,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "             default:",
                "-                dateFormatter = date_omitTime ?",
                "+                dateFormatter = date.omitTime ?",
                "                     new SimpleDateFormat(\"yyyy-MM-dd\") :",
                "@@ -315,3 +334,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "-            if (!date_useLocalTimeZone) {",
                "+            if (!date.useLocalTimeZone) {",
                "                 dateFormatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));",
                "@@ -328,5 +347,5 @@ abstract public class CustomizableTabularExporterUtilities {",
                "                     if (recon.judgment == Recon.Judgment.Matched) {",
                "-                        if (recon_outputMode == ReconOutputMode.ENTITY_NAME) {",
                "+                        if (this.recon.outputMode == ReconOutputMode.ENTITY_NAME) {",
                "                             text = recon.match.name;",
                "-                        } else if (recon_outputMode == ReconOutputMode.ENTITY_ID) {",
                "+                        } else if (this.recon.outputMode == ReconOutputMode.ENTITY_ID) {",
                "                             text = recon.match.id;",
                "@@ -334,3 +353,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "-                        if (recon_linkToEntityPages) {",
                "+                        if (this.recon.linkToEntityPages) {",
                "                             buildIdentifierSpaceToUrlMap();",
                "@@ -343,3 +362,3 @@ abstract public class CustomizableTabularExporterUtilities {",
                "                         }",
                "-                    } else if (recon_blankUnmatchedCells) {",
                "+                    } else if (this.recon.blankUnmatchedCells) {",
                "                         return null;",
                "diff --git a/main/src/com/google/refine/exporters/HtmlTableExporter.java b/main/src/com/google/refine/exporters/HtmlTableExporter.java",
                "index 3cb6ee926..530a6e9d5 100644",
                "--- a/main/src/com/google/refine/exporters/HtmlTableExporter.java",
                "+++ b/main/src/com/google/refine/exporters/HtmlTableExporter.java",
                "@@ -43,2 +43,4 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+",
                " import com.google.refine.ProjectManager;",
                "@@ -60,3 +62,3 @@ public class HtmlTableExporter implements WriterExporter {",
                "             @Override",
                "-            public void startFile(JSONObject options) {",
                "+            public void startFile(JsonNode options) {",
                "                 try {",
                "diff --git a/main/src/com/google/refine/exporters/OdsExporter.java b/main/src/com/google/refine/exporters/OdsExporter.java",
                "index ee4730cb7..e397d0ded 100644",
                "--- a/main/src/com/google/refine/exporters/OdsExporter.java",
                "+++ b/main/src/com/google/refine/exporters/OdsExporter.java",
                "@@ -41,3 +41,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                " import org.odftoolkit.odfdom.doc.OdfSpreadsheetDocument;",
                "@@ -47,2 +46,4 @@ import org.odftoolkit.odfdom.doc.table.OdfTableRow;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+",
                " import com.google.refine.ProjectManager;",
                "@@ -75,3 +76,3 @@ public class OdsExporter implements StreamExporter {",
                "             @Override",
                "-            public void startFile(JSONObject options) {",
                "+            public void startFile(JsonNode options) {",
                "                 table = OdfTable.newTable(odfDoc);",
                "diff --git a/main/src/com/google/refine/exporters/TabularSerializer.java b/main/src/com/google/refine/exporters/TabularSerializer.java",
                "index 48f1c9cd3..09a7e8d73 100644",
                "--- a/main/src/com/google/refine/exporters/TabularSerializer.java",
                "+++ b/main/src/com/google/refine/exporters/TabularSerializer.java",
                "@@ -4,3 +4,3 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "@@ -27,3 +27,3 @@ public interface TabularSerializer {",
                "-    public void startFile(JSONObject options);",
                "+    public void startFile(JsonNode options);",
                "diff --git a/main/src/com/google/refine/exporters/XlsExporter.java b/main/src/com/google/refine/exporters/XlsExporter.java",
                "index 4269df0fa..3910f5cef 100644",
                "--- a/main/src/com/google/refine/exporters/XlsExporter.java",
                "+++ b/main/src/com/google/refine/exporters/XlsExporter.java",
                "@@ -50,3 +50,4 @@ import org.apache.poi.ss.util.WorkbookUtil;",
                " import org.apache.poi.xssf.usermodel.XSSFWorkbook;",
                "-import org.json.JSONObject;",
                "+",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "@@ -81,3 +82,3 @@ public class XlsExporter implements StreamExporter {",
                "             @Override",
                "-            public void startFile(JSONObject options) {",
                "+            public void startFile(JsonNode options) {",
                "                 s = wb.createSheet();",
                "diff --git a/main/src/com/google/refine/exporters/sql/SqlCreateBuilder.java b/main/src/com/google/refine/exporters/sql/SqlCreateBuilder.java",
                "index 55a62b591..7f90b9549 100755",
                "--- a/main/src/com/google/refine/exporters/sql/SqlCreateBuilder.java",
                "+++ b/main/src/com/google/refine/exporters/sql/SqlCreateBuilder.java",
                "@@ -31,6 +31,5 @@ package com.google.refine.exporters.sql;",
                "+import java.util.Collections;",
                " import java.util.List;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -38,2 +37,3 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                " import com.google.refine.util.JSONUtilities;",
                "@@ -46,9 +46,9 @@ public class SqlCreateBuilder {",
                "     private List<String> columns;",
                "-    private JSONObject options;",
                "+    private JsonNode options;",
                "-    public SqlCreateBuilder(String table, List<String> columns, JSONObject options) {",
                "+    public SqlCreateBuilder(String table, List<String> columns, JsonNode sqlOptions) {",
                "         this.table = table;",
                "         this.columns = columns;",
                "-        this.options = options;",
                "+        this.options = sqlOptions;",
                "@@ -62,3 +62,3 @@ public class SqlCreateBuilder {",
                "-        JSONArray columnOptionArray = options == null ? null : JSONUtilities.getArray(options, \"columns\");",
                "+        List<JsonNode> columnOptionArray = options == null ? Collections.emptyList() : JSONUtilities.getArray(options, \"columns\");",
                "         boolean trimColNames = options == null ? false : JSONUtilities.getBoolean(options, \"trimColumnNames\", false);",
                "@@ -67,6 +67,6 @@ public class SqlCreateBuilder {",
                "-        int count = columnOptionArray.length();",
                "+        int count = columnOptionArray.size();",
                "         for (int i = 0; i < count; i++) {",
                "-            JSONObject columnOptions = JSONUtilities.getObjectElement(columnOptionArray, i);",
                "+            JsonNode columnOptions = columnOptionArray.get(i);",
                "             if (columnOptions != null) {",
                "diff --git a/main/src/com/google/refine/exporters/sql/SqlExporter.java b/main/src/com/google/refine/exporters/sql/SqlExporter.java",
                "index 808cf45e7..dd00a2f00 100755",
                "--- a/main/src/com/google/refine/exporters/sql/SqlExporter.java",
                "+++ b/main/src/com/google/refine/exporters/sql/SqlExporter.java",
                "@@ -41,2 +41,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+",
                " import com.google.refine.ProjectManager;",
                "@@ -61,3 +63,3 @@ public class SqlExporter implements WriterExporter {",
                "     private List<ArrayList<SqlData>> sqlDataList = new ArrayList<ArrayList<SqlData>>();",
                "-    private JSONObject sqlOptions;",
                "+    private JsonNode sqlOptions;",
                "@@ -79,3 +81,3 @@ public class SqlExporter implements WriterExporter {",
                "             @Override",
                "-            public void startFile(JSONObject options) {",
                "+            public void startFile(JsonNode options) {",
                "                 sqlOptions = options;",
                "@@ -99,6 +101,6 @@ public class SqlExporter implements WriterExporter {",
                "-                    Object tableNameManual = sqlOptions.get(JSON_TABLE_NAME);",
                "+                    String tableNameManual = JSONUtilities.getString(sqlOptions, JSON_TABLE_NAME, null);",
                "-                    if (tableNameManual != null && !tableNameManual.toString().isEmpty()) {",
                "-                        tableName = tableNameManual.toString();",
                "+                    if (tableNameManual != null) {",
                "+                        tableName = tableNameManual;",
                "                     }",
                "diff --git a/main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java b/main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java",
                "index 2abedf0f5..8c49e2b01 100755",
                "--- a/main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java",
                "+++ b/main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java",
                "@@ -38,4 +38,2 @@ import java.util.stream.Collectors;",
                " import org.apache.commons.lang3.math.NumberUtils;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -43,2 +41,3 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                " import com.google.refine.util.JSONUtilities;",
                "@@ -55,3 +54,3 @@ public class SqlInsertBuilder {",
                "-    private JSONObject options;",
                "+    private JsonNode options;",
                "@@ -63,6 +62,6 @@ public class SqlInsertBuilder {",
                "      * @param rows",
                "-     * @param options",
                "+     * @param sqlOptions",
                "      * @param sqlErrors ",
                "      */",
                "-    public SqlInsertBuilder(String table, List<String> columns, List<ArrayList<SqlData>> rows, JSONObject options",
                "+    public SqlInsertBuilder(String table, List<String> columns, List<ArrayList<SqlData>> rows, JsonNode sqlOptions",
                "             ) {",
                "@@ -71,3 +70,3 @@ public class SqlInsertBuilder {",
                "         this.sqlDataList = rows;",
                "-        this.options = options;",
                "+        this.options = sqlOptions;",
                "         //logger.info(\"Column Size:{}\", columns.size());",
                "@@ -85,8 +84,7 @@ public class SqlInsertBuilder {",
                "-        JSONArray colOptionArray = options == null ? null : JSONUtilities.getArray(options, \"columns\");",
                "-        Map<String, JSONObject> colOptionsMap = new HashMap<String, JSONObject>();",
                "+        List<JsonNode> colOptionArray = options == null ? null : JSONUtilities.getArray(options, \"columns\");",
                "+        Map<String, JsonNode> colOptionsMap = new HashMap<>();",
                "         if(colOptionArray != null) {",
                "-            colOptionArray.forEach(c -> {",
                "-                JSONObject json = (JSONObject)c;  ",
                "-                colOptionsMap.put(\"\" + json.get(\"name\"), json);",
                "+            colOptionArray.forEach(json -> { ",
                "+                colOptionsMap.put(JSONUtilities.getString(json, \"name\", null), json);",
                "             });",
                "@@ -105,4 +103,4 @@ public class SqlInsertBuilder {",
                "-                JSONObject jsonOb = colOptionsMap.get(val.getColumnName());",
                "-                String type = (String)jsonOb.get(\"type\");",
                "+                JsonNode jsonOb = colOptionsMap.get(val.getColumnName());",
                "+                String type = JSONUtilities.getString(jsonOb, \"type\", null);",
                "diff --git a/main/src/com/google/refine/util/JSONUtilities.java b/main/src/com/google/refine/util/JSONUtilities.java",
                "index ea94a17e8..5d2ef8711 100644",
                "--- a/main/src/com/google/refine/util/JSONUtilities.java",
                "+++ b/main/src/com/google/refine/util/JSONUtilities.java",
                "@@ -49,4 +49,10 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.node.JsonNodeType;",
                "+",
                "+import com.google.common.collect.Lists;",
                "+",
                " public class JSONUtilities {",
                "+\t",
                "     static public JSONObject getObject(JSONObject obj, String key) {",
                "@@ -67,2 +73,10 @@ public class JSONUtilities {",
                "+    static public String getString(JsonNode obj, String key, String def) {",
                "+    \tif (obj.get(key) != null) {",
                "+    \t\treturn obj.get(key).textValue();",
                "+    \t} else {",
                "+    \t\treturn def;",
                "+    \t}",
                "+    }",
                "+    ",
                "     static public int getInt(JSONObject obj, String key, int def) {",
                "@@ -75,2 +89,10 @@ public class JSONUtilities {",
                "+    static public int getInt(JsonNode obj, String key, int def) {",
                "+    \tif (obj.get(key) != null) {",
                "+    \t\treturn obj.get(key).asInt(def);",
                "+    \t} else {",
                "+    \t\treturn def;",
                "+    \t}",
                "+    }",
                "+    ",
                "     static public boolean getBoolean(JSONObject obj, String key, boolean def) {",
                "@@ -83,2 +105,10 @@ public class JSONUtilities {",
                "+    static public boolean getBoolean(JsonNode obj, String key, boolean def) {",
                "+        if (obj.get(key) != null) {",
                "+            return obj.get(key).asBoolean(def);",
                "+        } else {",
                "+            return def;",
                "+        }",
                "+    }",
                "+    ",
                "     static public double getDouble(JSONObject obj, String key, double def) {",
                "@@ -127,2 +157,10 @@ public class JSONUtilities {",
                "+    static public List<JsonNode> getArray(JsonNode obj, String key) {",
                "+        if (obj.has(key) && obj.get(key).getNodeType().equals(JsonNodeType.ARRAY)) {",
                "+            return Lists.newArrayList(obj.get(key).elements());",
                "+        } else {",
                "+            return null;",
                "+        }",
                "+    }",
                "+    ",
                "     static public JSONArray arrayToJSONArray(String[] array) {",
                "diff --git a/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java b/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "index c6f8dcbfa..0b3073c20 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "@@ -56,2 +56,5 @@ import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.ProjectManager;",
                "@@ -70,2 +73,4 @@ import com.google.refine.tests.ProjectManagerStub;",
                " import com.google.refine.tests.RefineTest;",
                "+import com.google.refine.util.JSONUtilities;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -182,10 +187,6 @@ public class SqlExporterTests extends RefineTest {",
                "         String result = writer.toString();",
                "-       // logger.info(\"result = \\n\" + result);",
                "+",
                "         Assert.assertNotNull(result);",
                "         assertNotEquals(writer.toString(), SqlExporter.NO_OPTIONS_PRESENT_ERROR);",
                "-        boolean checkResult = result.contains(\"CREATE TABLE \" + tableName);",
                "-        //logger.info(\"checkResult1 =\" + checkResult);",
                "-        checkResult = result.contains(\"INSERT INTO \" + tableName);",
                "-       // logger.info(\"checkResult2 =\" + checkResult);",
                "-        Assert.assertEquals(checkResult,  true);",
                "+        Assert.assertTrue(result.contains(\"INSERT INTO \" + tableName));",
                "@@ -197,3 +198,3 @@ public class SqlExporterTests extends RefineTest {",
                "         String tableName = \"sql_table_test\";",
                "-        JSONObject optionsJson = createOptionsFromProject(tableName, null,null);",
                "+        ObjectNode optionsJson = (ObjectNode) createOptionsFromProject(tableName, null,null);",
                "         optionsJson.put(\"includeStructure\", false);",
                "@@ -224,3 +225,3 @@ public class SqlExporterTests extends RefineTest {",
                "         String tableName = \"sql_table_test\";",
                "-        JSONObject optionsJson = createOptionsFromProject(tableName, null, null);",
                "+        ObjectNode optionsJson = (ObjectNode) createOptionsFromProject(tableName, null, null);",
                "         optionsJson.put(\"includeContent\", false);",
                "@@ -251,3 +252,3 @@ public class SqlExporterTests extends RefineTest {",
                "         String tableName = \"sql_table_test\";",
                "-        JSONObject optionsJson = createOptionsFromProject(tableName, null, null);",
                "+        ObjectNode optionsJson = (ObjectNode) createOptionsFromProject(tableName, null, null);",
                "         optionsJson.put(\"includeStructure\", true);",
                "@@ -291,3 +292,3 @@ public class SqlExporterTests extends RefineTest {",
                "         String size = \"2\";",
                "-        JSONObject optionsJson = createOptionsFromProject(tableName, type, size);",
                "+        JsonNode optionsJson = createOptionsFromProject(tableName, type, size);",
                "        // logger.info(\"Options:: = \" + optionsJson.toString());",
                "@@ -309,3 +310,3 @@ public class SqlExporterTests extends RefineTest {",
                "         String tableName = \"sql_table_test\";",
                "-        JSONObject optionsJson = createOptionsFromProject(tableName, null, null);",
                "+        ObjectNode optionsJson = (ObjectNode) createOptionsFromProject(tableName, null, null);",
                "         optionsJson.put(\"includeStructure\", true);",
                "@@ -340,3 +341,3 @@ public class SqlExporterTests extends RefineTest {",
                "         String tableName = \"sql_table_test\";",
                "-        JSONObject optionsJson = createOptionsFromProject(tableName, null, null, null, false);",
                "+        ObjectNode optionsJson = createOptionsFromProject(tableName, null, null, null, false);",
                "         optionsJson.put(\"includeStructure\", true);",
                "@@ -499,8 +500,6 @@ public class SqlExporterTests extends RefineTest {",
                "-   protected JSONObject createOptionsFromProject(String tableName, String type, String size) {",
                "-       ",
                "-       JSONObject json = new JSONObject();",
                "-       JSONArray columns = new JSONArray();",
                "-       json.put(\"columns\", columns);",
                "+   protected JsonNode createOptionsFromProject(String tableName, String type, String size) {",
                "+       ObjectNode json = ParsingUtilities.mapper.createObjectNode();",
                "        json.put(\"tableName\", tableName);",
                "+       ArrayNode columns = json.putArray(\"columns\");",
                "@@ -510,3 +509,3 @@ public class SqlExporterTests extends RefineTest {",
                "            //logger.info(\"Column Name = \" + c.getName());",
                "-           JSONObject columnModel = new JSONObject();",
                "+           ObjectNode columnModel = ParsingUtilities.mapper.createObjectNode();",
                "            columnModel.put(\"name\", c.getName());",
                "@@ -531,3 +530,3 @@ public class SqlExporterTests extends RefineTest {",
                "-           columns.put(columnModel);",
                "+           columns.add(columnModel);",
                "@@ -535,11 +534,10 @@ public class SqlExporterTests extends RefineTest {",
                "-      return json;",
                "+       return json;",
                "    }",
                "-    protected JSONObject createOptionsFromProject(String tableName, String type, String size, String defaultValue,",
                "+    protected ObjectNode createOptionsFromProject(String tableName, String type, String size, String defaultValue,",
                "             boolean allowNull) {",
                "-       JSONObject json = new JSONObject();",
                "-       JSONArray columns = new JSONArray();",
                "-       json.put(\"columns\", columns);",
                "+       ObjectNode json = ParsingUtilities.mapper.createObjectNode();",
                "+       ArrayNode columns = json.putArray(\"columns\");",
                "        json.put(\"tableName\", tableName);",
                "@@ -550,3 +548,3 @@ public class SqlExporterTests extends RefineTest {",
                "            //logger.info(\"Column Name = \" + c.getName());",
                "-           JSONObject columnModel = new JSONObject();",
                "+           ObjectNode columnModel = ParsingUtilities.mapper.createObjectNode();",
                "            columnModel.put(\"name\", c.getName());",
                "@@ -574,3 +572,3 @@ public class SqlExporterTests extends RefineTest {",
                "-           columns.put(columnModel);",
                "+           columns.add(columnModel);"
            ],
            "changed_files": [
                "extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java",
                "extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java",
                "main/src/com/google/refine/exporters/CsvExporter.java",
                "main/src/com/google/refine/exporters/CustomizableTabularExporterUtilities.java",
                "main/src/com/google/refine/exporters/HtmlTableExporter.java",
                "main/src/com/google/refine/exporters/OdsExporter.java",
                "main/src/com/google/refine/exporters/TabularSerializer.java",
                "main/src/com/google/refine/exporters/XlsExporter.java",
                "main/src/com/google/refine/exporters/sql/SqlCreateBuilder.java",
                "main/src/com/google/refine/exporters/sql/SqlExporter.java",
                "main/src/com/google/refine/exporters/sql/SqlInsertBuilder.java",
                "main/src/com/google/refine/util/JSONUtilities.java",
                "main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0c87687e9262ac2a73cc74f8f6225eed7d82854d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1540204051,
            "hunks": 5,
            "message": "Jackson deserialization for RowStarOperation",
            "diff": [
                "diff --git a/main/src/com/google/refine/operations/row/RowStarOperation.java b/main/src/com/google/refine/operations/row/RowStarOperation.java",
                "index d7be153b4..ed88f6d31 100644",
                "--- a/main/src/com/google/refine/operations/row/RowStarOperation.java",
                "+++ b/main/src/com/google/refine/operations/row/RowStarOperation.java",
                "@@ -35,3 +35,4 @@ package com.google.refine.operations.row;",
                "- import java.util.ArrayList;",
                "+ import java.io.IOException;",
                "+import java.util.ArrayList;",
                " import java.util.List;",
                "@@ -40,2 +41,3 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonCreator;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -54,2 +56,3 @@ import com.google.refine.model.changes.RowStarChange;",
                " import com.google.refine.operations.EngineDependentOperation;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -58,13 +61,12 @@ public class RowStarOperation extends EngineDependentOperation {",
                "-    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {",
                "-        JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");",
                "-        boolean starred = obj.getBoolean(\"starred\");",
                "-        ",
                "-        return new RowStarOperation(",
                "-            EngineConfig.reconstruct(engineConfig), ",
                "-            starred",
                "-        );",
                "+    static public AbstractOperation reconstruct(Project project, JSONObject obj) throws IOException {",
                "+        return ParsingUtilities.mapper.readValue(obj.toString(), RowStarOperation.class);",
                "     }",
                "-    public RowStarOperation(EngineConfig engineConfig, boolean starred) {",
                "+    @JsonCreator",
                "+    public RowStarOperation(",
                "+            @JsonProperty(\"engineConfig\")",
                "+            EngineConfig engineConfig,",
                "+            @JsonProperty(\"starred\")",
                "+            boolean starred) {",
                "         super(engineConfig);"
            ],
            "changed_files": [
                "main/src/com/google/refine/operations/row/RowStarOperation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "47d80002a8616576fe3d83a5559ea9c0a33530a7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1539275672,
            "hunks": 31,
            "message": "Migrate GData extension out of JSONWriter",
            "diff": [
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java b/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "index 1f98f0a3d..8b243bbe6 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "@@ -16,3 +16,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -20,2 +19,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " import com.google.api.services.drive.Drive;",
                "@@ -88,7 +89,6 @@ public class GDataImportingController implements ImportingController {",
                "         Writer w = response.getWriter();",
                "-        JSONWriter writer = new JSONWriter(w);",
                "+        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "         try {",
                "-            writer.object();",
                "-            writer.key(\"documents\");",
                "-            writer.array();",
                "+            writer.writeStartObject();",
                "+            writer.writeArrayFieldStart(\"documents\");",
                "@@ -100,4 +100,4 @@ public class GDataImportingController implements ImportingController {",
                "             }  finally {",
                "-                writer.endArray();",
                "-                writer.endObject();",
                "+                writer.writeEndArray();",
                "+                writer.writeEndObject();",
                "             }",
                "@@ -106,2 +106,4 @@ public class GDataImportingController implements ImportingController {",
                "         } finally {",
                "+            writer.flush();",
                "+            writer.close();",
                "             w.flush();",
                "@@ -111,3 +113,3 @@ public class GDataImportingController implements ImportingController {",
                "-    private void listSpreadsheets(Drive drive, JSONWriter writer)",
                "+    private void listSpreadsheets(Drive drive, JsonGenerator writer)",
                "             throws IOException, JSONException {",
                "@@ -119,9 +121,9 @@ public class GDataImportingController implements ImportingController {",
                "         for (File entry : fileList.getFiles()) {",
                "-            writer.object();",
                "-            writer.key(\"docId\"); writer.value(entry.getId());",
                "-            writer.key(\"docLink\"); writer.value(entry.getWebViewLink());",
                "-            writer.key(\"docSelfLink\"); writer.value(entry.getWebViewLink());",
                "-            writer.key(\"title\"); writer.value(entry.getName());",
                "+            writer.writeStartObject();",
                "+            writer.writeStringField(\"docId\", entry.getId());",
                "+            writer.writeStringField(\"docLink\", entry.getWebViewLink());",
                "+            writer.writeStringField(\"docSelfLink\", entry.getWebViewLink());",
                "+            writer.writeStringField(\"title\", entry.getName());",
                "-            writer.key(\"type\"); writer.value(\"spreadsheet\");",
                "+            writer.writeStringField(\"type\", \"spreadsheet\");",
                "@@ -129,12 +131,12 @@ public class GDataImportingController implements ImportingController {",
                "             if (updated != null) {",
                "-                writer.key(\"updated\"); writer.value(updated.toString());",
                "+                writer.writeStringField(\"updated\", updated.toString());",
                "             }",
                "-            writer.key(\"authors\"); writer.array();",
                "+            writer.writeArrayFieldStart(\"authors\");",
                "             for (User user : entry.getOwners()) {",
                "-                writer.value(user.getDisplayName());",
                "+                writer.writeString(user.getDisplayName());",
                "             }",
                "-            writer.endArray();",
                "+            writer.writeEndArray();",
                "-            writer.endObject();",
                "+            writer.writeEndObject();",
                "         }",
                "@@ -142,3 +144,3 @@ public class GDataImportingController implements ImportingController {",
                "-    private void listFusionTables(Fusiontables service, JSONWriter writer)",
                "+    private void listFusionTables(Fusiontables service, JsonGenerator writer)",
                "         throws IOException, JSONException {",
                "@@ -157,9 +159,9 @@ public class GDataImportingController implements ImportingController {",
                "             // Add JSON object to our stream",
                "-            writer.object();",
                "-            writer.key(\"docId\"); writer.value(id);",
                "-            writer.key(\"docLink\"); writer.value(link);",
                "-            writer.key(\"docSelfLink\"); writer.value(link);",
                "-            writer.key(\"title\"); writer.value(name);",
                "-            writer.key(\"type\"); writer.value(\"table\");",
                "-            writer.endObject();",
                "+            writer.writeStartObject();",
                "+            writer.writeStringField(\"docId\", id);",
                "+            writer.writeStringField(\"docLink\", link);",
                "+            writer.writeStringField(\"docSelfLink\", link);",
                "+            writer.writeStringField(\"title\", name);",
                "+            writer.writeStringField(\"type\", \"table\");",
                "+            writer.writeEndObject();",
                "         }",
                "@@ -255,5 +257,5 @@ public class GDataImportingController implements ImportingController {",
                "             Writer w = response.getWriter();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "             try {",
                "-                writer.object();",
                "+                writer.writeStartObject();",
                "                 if (exceptions.size() == 0) {",
                "@@ -261,15 +263,16 @@ public class GDataImportingController implements ImportingController {",
                "-                    writer.key(\"status\"); writer.value(\"ok\");",
                "+                    writer.writeStringField(\"status\", \"ok\");",
                "                 } else {",
                "-                    writer.key(\"status\"); writer.value(\"error\");",
                "+                    writer.writeStringField(\"status\", \"error\");",
                "-                    writer.key(\"errors\");",
                "-                    writer.array();",
                "+                    writer.writeArrayFieldStart(\"errors\");",
                "                     DefaultImportingController.writeErrors(writer, exceptions);",
                "-                    writer.endArray();",
                "+                    writer.writeEndArray();",
                "                 }",
                "-                writer.endObject();",
                "-            } catch (JSONException e) {",
                "+                writer.writeEndObject();",
                "+            } catch (IOException e) {",
                "                 throw new ServletException(e);",
                "             } finally {",
                "+                writer.flush();",
                "+                writer.close();",
                "                 w.flush();",
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java b/extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java",
                "index 8a32541cc..f1879065a 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java",
                "@@ -17,3 +17,2 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.apache.commons.lang3.exception.ExceptionUtils;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -22,2 +21,4 @@ import org.apache.commons.codec.binary.Base64;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " import com.google.api.client.http.FileContent;",
                "@@ -36,2 +37,3 @@ import com.google.refine.io.FileProjectManager;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -63,5 +65,5 @@ public class UploadCommand extends Command {",
                "             Writer w = response.getWriter();",
                "-            JSONWriter writer = new JSONWriter(w);",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "             try {",
                "-                writer.object();",
                "+                writer.writeStartObject();",
                "@@ -70,7 +72,7 @@ public class UploadCommand extends Command {",
                "                 if (url != null) {",
                "-                    writer.key(\"status\"); writer.value(\"ok\");",
                "-                    writer.key(\"url\"); writer.value(url);",
                "+                    writer.writeStringField(\"status\", \"ok\");",
                "+                    writer.writeStringField(\"url\", url);",
                "                 } else if (exceptions.size() == 0) {",
                "-                    writer.key(\"status\"); writer.value(\"error\");",
                "-                    writer.key(\"message\"); writer.value(\"No such format\");",
                "+                    writer.writeStringField(\"status\", \"error\");",
                "+                    writer.writeStringField(\"message\", \"No such format\");",
                "                 } else {",
                "@@ -79,4 +81,4 @@ public class UploadCommand extends Command {",
                "                     }",
                "-                    writer.key(\"status\"); writer.value(\"error\");",
                "-                    writer.key(\"message\"); writer.value(exceptions.get(0).getLocalizedMessage());",
                "+                    writer.writeStringField(\"status\", \"error\");",
                "+                    writer.writeStringField(\"message\", exceptions.get(0).getLocalizedMessage());",
                "                 }",
                "@@ -84,6 +86,8 @@ public class UploadCommand extends Command {",
                "                 e.printStackTrace();",
                "-                writer.key(\"status\"); writer.value(\"error\");",
                "-                writer.key(\"message\"); writer.value(e.getMessage());",
                "+                writer.writeStringField(\"status\", \"error\");",
                "+                writer.writeStringField(\"message\", e.getMessage());",
                "             } finally {",
                "-                writer.endObject();",
                "+                writer.writeEndObject();",
                "+                writer.flush();",
                "+                writer.close();",
                "                 w.flush();"
            ],
            "changed_files": [
                "extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7ea346d08ec099cb58e89b72cbb60a2c5c8ae89e",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542735423,
            "hunks": 21,
            "message": "Migrate ReconciledDataExtensionJob to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "index db9620974..d732f2aab 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "@@ -52,6 +52,2 @@ import java.util.stream.Collectors;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -61,3 +57,5 @@ import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.fasterxml.jackson.annotation.JsonView;",
                "-import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import com.fasterxml.jackson.databind.node.ArrayNode;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.expr.functions.ToDate;",
                "@@ -108,9 +106,4 @@ public class ReconciledDataExtensionJob {",
                "-        public static DataExtensionConfig reconstruct(String json) throws JSONException {",
                "-            ObjectMapper mapper = new ObjectMapper();",
                "-            try {",
                "-                return mapper.readValue(json, DataExtensionConfig.class);",
                "-            } catch(IOException e) {",
                "-                throw new JSONException(e.toString());",
                "-            }",
                "+        public static DataExtensionConfig reconstruct(String json) throws IOException {",
                "+            return ParsingUtilities.mapper.readValue(json, DataExtensionConfig.class);",
                "         }     ",
                "@@ -161,3 +154,3 @@ public class ReconciledDataExtensionJob {",
                "-    public ReconciledDataExtensionJob(DataExtensionConfig obj, String endpoint) throws JSONException {",
                "+    public ReconciledDataExtensionJob(DataExtensionConfig obj, String endpoint) {",
                "         this.extension = obj;",
                "@@ -176,4 +169,3 @@ public class ReconciledDataExtensionJob {",
                "         try {",
                "-            String s = ParsingUtilities.inputStreamToString(is);",
                "-            JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);",
                "+        \tObjectNode o = ParsingUtilities.mapper.readValue(is, ObjectNode.class);",
                "@@ -181,3 +173,4 @@ public class ReconciledDataExtensionJob {",
                "                 // Extract the column metadata",
                "-                gatherColumnInfo(o.getJSONArray(\"meta\"), columns);    ",
                "+            \tList<ColumnInfo> newColumns = ParsingUtilities.mapper.convertValue(o.get(\"meta\"), new TypeReference<List<ColumnInfo>>() {});  ",
                "+            \tcolumns.addAll(newColumns);",
                "             }",
                "@@ -185,4 +178,4 @@ public class ReconciledDataExtensionJob {",
                "             Map<String, ReconciledDataExtensionJob.DataExtension> map = new HashMap<String, ReconciledDataExtensionJob.DataExtension>();",
                "-            if (o.has(\"rows\")){",
                "-                JSONObject records = o.getJSONObject(\"rows\");",
                "+            if (o.has(\"rows\") && o.get(\"rows\") instanceof ObjectNode){",
                "+                ObjectNode records = (ObjectNode) o.get(\"rows\");",
                "@@ -190,4 +183,4 @@ public class ReconciledDataExtensionJob {",
                "                 for (String id : ids) {",
                "-                    if (records.has(id)) {",
                "-                        JSONObject record = records.getJSONObject(id);",
                "+                    if (records.has(id) && records.get(id) instanceof ObjectNode) {",
                "+                        ObjectNode record = (ObjectNode) records.get(id);",
                "@@ -233,5 +226,5 @@ public class ReconciledDataExtensionJob {",
                "     protected ReconciledDataExtensionJob.DataExtension collectResult(",
                "-        JSONObject record,",
                "+        ObjectNode record,",
                "         Map<String, ReconCandidate> reconCandidateMap",
                "-    ) throws JSONException {",
                "+    ) {",
                "         List<Object[]> rows = new ArrayList<Object[]>();",
                "@@ -242,3 +235,3 @@ public class ReconciledDataExtensionJob {",
                "             String pid = ci.id;",
                "-            JSONArray values = record.getJSONArray(pid);        ",
                "+            ArrayNode values = JSONUtilities.getArray(record, pid);     ",
                "             if (values == null) {",
                "@@ -248,4 +241,7 @@ public class ReconciledDataExtensionJob {",
                "             // for each value",
                "-            for(int rowindex = 0; rowindex < values.length(); rowindex++) {",
                "-                JSONObject val = values.getJSONObject(rowindex);",
                "+            for(int rowindex = 0; rowindex < values.size(); rowindex++) {",
                "+            \tif (!(values.get(rowindex) instanceof ObjectNode)) {",
                "+            \t\tcontinue;",
                "+            \t}",
                "+                ObjectNode val = (ObjectNode) values.get(rowindex);",
                "                 // store a reconciled value",
                "@@ -255,9 +251,9 @@ public class ReconciledDataExtensionJob {",
                "                 // store a bare string",
                "-                    String str = val.getString(\"str\");",
                "+                    String str = val.get(\"str\").asText();",
                "                     storeCell(rows, rowindex, colindex, str); ",
                "                 } else if (val.has(\"float\")) {",
                "-                    float v = Float.parseFloat(val.getString(\"float\"));",
                "+                    double v = val.get(\"float\").asDouble();",
                "                     storeCell(rows, rowindex, colindex, v);",
                "                 } else if (val.has(\"int\")) {",
                "-                    int v = Integer.parseInt(val.getString(\"int\"));",
                "+                    int v = val.get(\"int\").asInt();",
                "                     storeCell(rows, rowindex, colindex, v);",
                "@@ -266,3 +262,3 @@ public class ReconciledDataExtensionJob {",
                "                     String[] args = new String[1];",
                "-                    args[0] = val.getString(\"date\");",
                "+                    args[0] = val.get(\"date\").asText();",
                "                     Object v = td.call(null, args);",
                "@@ -270,3 +266,3 @@ public class ReconciledDataExtensionJob {",
                "                 } else if(val.has(\"bool\")) {",
                "-                    boolean v = val.getString(\"bool\") == \"true\";",
                "+                    boolean v = val.get(\"bool\").asBoolean();",
                "                     storeCell(rows, rowindex, colindex, v);",
                "@@ -301,6 +297,6 @@ public class ReconciledDataExtensionJob {",
                "         int col,",
                "-        JSONObject obj,",
                "+        ObjectNode obj,",
                "         Map<String, ReconCandidate> reconCandidateMap",
                "-    ) throws JSONException {",
                "-        String id = obj.getString(\"id\");",
                "+    ) {",
                "+        String id = obj.get(\"id\").asText();",
                "         ReconCandidate rc;",
                "@@ -310,4 +306,4 @@ public class ReconciledDataExtensionJob {",
                "             rc = new ReconCandidate(",
                "-                    obj.getString(\"id\"),",
                "-                    obj.getString(\"name\"),",
                "+                    obj.get(\"id\").asText(),",
                "+                    obj.get(\"name\").asText(),",
                "                     JSONUtilities.getStringArray(obj, \"type\"),",
                "@@ -327,19 +323,2 @@ public class ReconciledDataExtensionJob {",
                "     }",
                "-    ",
                "-    static protected void gatherColumnInfo(JSONArray meta, List<ColumnInfo> columns) throws JSONException {",
                "-        for(int i = 0; i < meta.length(); i++) {",
                "-            JSONObject col = meta.getJSONObject(i);",
                "-",
                "-            ReconType expectedType = null;",
                "-            if(col.has(\"type\")) {",
                "-                JSONObject expectedObj = col.getJSONObject(\"type\");",
                "-                expectedType = new ReconType(expectedObj.getString(\"id\"), expectedObj.getString(\"name\"));",
                "-            }",
                "-        ",
                "-            columns.add(new ColumnInfo(",
                "-                col.getString(\"name\"),",
                "-                col.getString(\"id\"),",
                "-                expectedType));        ",
                "-        }",
                "-   }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ec1853bd2016349b661a6c8228f3aa9e192f2d0a",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1543854317,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "256a0bd83ce3aedba82e0a54982d73db6cdfc40a",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542732483,
            "hunks": 1,
            "message": "Remove unused JSObject",
            "diff": [
                "diff --git a/main/src/com/google/refine/util/JSObject.java b/main/src/com/google/refine/util/JSObject.java",
                "deleted file mode 100644",
                "index 06bb8bd56..000000000",
                "--- a/main/src/com/google/refine/util/JSObject.java",
                "+++ /dev/null",
                "@@ -1,163 +0,0 @@",
                "-/*",
                "-",
                "-Copyright 2010, Google Inc.",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are",
                "-met:",
                "-",
                "-    * Redistributions of source code must retain the above copyright",
                "-notice, this list of conditions and the following disclaimer.",
                "-    * Redistributions in binary form must reproduce the above",
                "-copyright notice, this list of conditions and the following disclaimer",
                "-in the documentation and/or other materials provided with the",
                "-distribution.",
                "-    * Neither the name of Google Inc. nor the names of its",
                "-contributors may be used to endorse or promote products derived from",
                "-this software without specific prior written permission.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
                "-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
                "-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
                "-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
                "-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           ",
                "-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           ",
                "-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
                "-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "-",
                "-*/",
                "-",
                "-package com.google.refine.util;",
                "-",
                "-import java.io.IOException;",
                "-import java.util.Collection;",
                "-import java.util.Enumeration;",
                "-import java.util.Iterator;",
                "-import java.util.Properties;",
                "-",
                "-import org.apache.commons.lang.StringEscapeUtils;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                "-/**",
                "- * A utility class for encapsulating a Javascript object that can",
                "- * then be pretty-printed out through an IndentWriter.",
                "- * ",
                "- * @author dfhuynh",
                "- */",
                "-public class JSObject extends Properties {",
                "-    private static final long serialVersionUID = 5864375136126385719L;",
                "-",
                "-    static public void writeJSObject(IndentWriter writer, JSObject jso) throws IOException, JSONException {",
                "-        writer.println(\"{\");",
                "-        writer.indent();",
                "-        {",
                "-            Enumeration<?> e = jso.propertyNames();",
                "-            while (e.hasMoreElements()) {",
                "-                String name = (String) e.nextElement();",
                "-                Object value = jso.get(name);",
                "-                ",
                "-                writer.print(\"'\");",
                "-                writer.print(name + \"' : \");",
                "-                writeObject(writer, value);",
                "-                ",
                "-                if (e.hasMoreElements()) {",
                "-                    writer.println(\",\");",
                "-                } else {",
                "-                    writer.println();",
                "-                }",
                "-            }",
                "-        }",
                "-        writer.unindent();",
                "-        writer.print(\"}\");",
                "-    }",
                "-    ",
                "-    static public void writeCollection(IndentWriter writer, Collection<?> c) throws IOException, JSONException {",
                "-        writer.println(\"[\");",
                "-        writer.indent();",
                "-        {",
                "-            Iterator<?> i = c.iterator();",
                "-            while (i.hasNext()) {",
                "-                writeObject(writer, i.next());",
                "-                if (i.hasNext()) {",
                "-                    writer.println(\",\");",
                "-                } else {",
                "-                    writer.println();",
                "-                }",
                "-            }",
                "-        }",
                "-        writer.unindent();",
                "-        writer.print(\"]\");",
                "-    }",
                "-    ",
                "-    static public void writeJSONObject(IndentWriter writer, JSONObject no) throws IOException, JSONException {",
                "-        writer.println(\"{\");",
                "-        writer.indent();",
                "-        {",
                "-            String[] names = JSONObject.getNames(no);",
                "-            for (int i = 0; i < names.length; i++) {",
                "-                String name = names[i];",
                "-                Object value = no.get(name);",
                "-                ",
                "-                writer.print(\"'\");",
                "-                writer.print(name + \"' : \");",
                "-                writeObject(writer, value);",
                "-                ",
                "-                if (i < names.length - 1) {",
                "-                    writer.println(\",\");",
                "-                } else {",
                "-                    writer.println();",
                "-                }",
                "-            }",
                "-        }",
                "-        writer.unindent();",
                "-        writer.print(\"}\");",
                "-    }",
                "-    ",
                "-    static public void writeJSONArray(IndentWriter writer, JSONArray na) throws IOException, JSONException {",
                "-        writer.println(\"[\");",
                "-        writer.indent();",
                "-        {",
                "-            int count = na.length();",
                "-            for (int i = 0; i < count; i++) {",
                "-                Object element = na.get(i);",
                "-                ",
                "-                writeObject(writer, element);",
                "-                if (i < count - 1) {",
                "-                    writer.println(\",\");",
                "-                } else {",
                "-                    writer.println();",
                "-                }",
                "-            }",
                "-        }",
                "-        writer.unindent();",
                "-        writer.print(\"]\");",
                "-    }",
                "-    ",
                "-    static public void writeObject(IndentWriter writer, Object o) throws IOException, JSONException {",
                "-        if (o == null) {",
                "-            writer.print(\"null\");",
                "-        } else if (o instanceof Boolean) {",
                "-            writer.print(((Boolean) o).booleanValue() ? \"true\" : \"false\");",
                "-        } else if (o instanceof Number) {",
                "-            writer.print(((Number) o).toString());",
                "-            ",
                "-        } else if (o instanceof Collection) {",
                "-            writeCollection(writer, (Collection<?>) o);",
                "-        } else if (o instanceof JSONArray) {",
                "-            writeJSONArray(writer, (JSONArray) o);",
                "-        } else if (o instanceof JSObject) {",
                "-            writeJSObject(writer, (JSObject) o);",
                "-        } else if (o instanceof JSONObject) {",
                "-            writeJSONObject(writer, (JSONObject) o);",
                "-            ",
                "-        } else {",
                "-            writer.print(\"\\\"\" + StringEscapeUtils.escapeJavaScript(o.toString()) + \"\\\"\");",
                "-        }",
                "-    }",
                "-}"
            ],
            "changed_files": [
                "main/src/com/google/refine/util/JSObject.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f263d8a1292c346480bcbbf012e8d1cb9b7de5c9",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538730993,
            "hunks": 35,
            "message": "Migrate commands out of JSONWriter",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/HttpUtilities.java b/main/src/com/google/refine/commands/HttpUtilities.java",
                "index 97d9cc7e2..b43a2d522 100644",
                "--- a/main/src/com/google/refine/commands/HttpUtilities.java",
                "+++ b/main/src/com/google/refine/commands/HttpUtilities.java",
                "@@ -15,3 +15,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -19,2 +18,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "+",
                " import com.google.refine.RefineServlet;",
                "@@ -45,7 +46,7 @@ abstract public class HttpUtilities {",
                "         try {",
                "-            JSONWriter writer = new JSONWriter(w);",
                "-            writer.object();",
                "-            writer.key(\"status\"); writer.value(status);",
                "-            writer.key(\"message\"); writer.value(message);",
                "-            writer.endObject();",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "+            writer.writeStartObject();",
                "+            writer.writeStringField(\"status\", status);",
                "+            writer.writeStringField(\"message\", message);",
                "+            writer.writeEndObject();",
                "             w.flush();",
                "@@ -86,6 +87,2 @@ abstract public class HttpUtilities {",
                "         try {",
                "-            JSONObject o = new JSONObject();",
                "-            o.put(\"code\", \"error\");",
                "-            o.put(\"message\", e.getMessage());",
                "-    ",
                "             StringWriter sw = new StringWriter();",
                "@@ -95,8 +92,15 @@ abstract public class HttpUtilities {",
                "             sw.flush();",
                "-    ",
                "-            o.put(\"stack\", sw.toString());",
                "-    ",
                "+            ",
                "             response.setCharacterEncoding(\"UTF-8\");",
                "             response.setHeader(\"Content-Type\", \"application/json\");",
                "-            respond(response, o.toString());",
                "+",
                "+            Writer w = response.getWriter();",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);",
                "+            writer.writeStartObject();",
                "+            writer.writeStringField(\"code\", \"error\");",
                "+            writer.writeStringField(\"message\", e.getMessage());",
                "+            writer.writeStringField(\"stack\", sw.toString());",
                "+            writer.writeEndObject();",
                "+            w.flush();",
                "+            w.close();",
                "         } catch (JSONException e1) {",
                "diff --git a/main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java b/main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java",
                "index b31e4f91d..87e4f5f7d 100644",
                "--- a/main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java",
                "+++ b/main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java",
                "@@ -41,4 +41,3 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.core.JsonGenerator;",
                "@@ -53,2 +52,3 @@ import com.google.refine.model.Column;",
                " import com.google.refine.model.Project;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -61,4 +61,2 @@ public class GetColumnsInfoCommand extends Command {",
                "         try {",
                "-            //long start = System.currentTimeMillis();",
                "-",
                "             response.setCharacterEncoding(\"UTF-8\");",
                "@@ -67,15 +65,12 @@ public class GetColumnsInfoCommand extends Command {",
                "             Project project = getProject(request);",
                "-            //Engine engine = getEngine(request, project);",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "+            JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(response.getWriter());",
                "-            writer.array();",
                "+            writer.writeStartArray();",
                "             for (Column column : project.columnModel.columns) {",
                "-                writer.object();",
                "+                writer.writeStartObject();",
                "                     write(project, column, writer);",
                "-                writer.endObject();",
                "+                writer.writeEndObject();",
                "             }",
                "-            writer.endArray();",
                "-            ",
                "-            //Refine.log(\"Obtained columns info in \" + (System.currentTimeMillis() - start) + \"ms\");",
                "+            writer.writeEndArray();",
                "         } catch (Exception e) {",
                "@@ -103,29 +98,19 @@ public class GetColumnsInfoCommand extends Command {",
                "-    private void write(Project project, Column column, JSONWriter writer) throws JSONException {",
                "+    private void write(Project project, Column column, JsonGenerator writer) throws IOException {",
                "         NumericBinIndex columnIndex = getBinIndex(project, column);",
                "         if (columnIndex != null) {",
                "-            writer.key(\"name\");",
                "-            writer.value(column.getName());",
                "+            writer.writeStringField(\"name\", column.getName());",
                "             boolean is_numeric = columnIndex.isNumeric();",
                "-            writer.key(\"is_numeric\");",
                "-            writer.value(is_numeric);",
                "-            writer.key(\"numeric_row_count\");",
                "-            writer.value(columnIndex.getNumericRowCount());",
                "-            writer.key(\"non_numeric_row_count\");",
                "-            writer.value(columnIndex.getNonNumericRowCount());",
                "-            writer.key(\"error_row_count\");",
                "-            writer.value(columnIndex.getErrorRowCount());",
                "-            writer.key(\"blank_row_count\");",
                "-            writer.value(columnIndex.getBlankRowCount());",
                "+            writer.writeBooleanField(\"is_numeric\", is_numeric);",
                "+            writer.writeNumberField(\"numeric_row_count\", columnIndex.getNumericRowCount());",
                "+            writer.writeNumberField(\"non_numeric_row_count\", columnIndex.getNonNumericRowCount());",
                "+            writer.writeNumberField(\"error_row_count\", columnIndex.getErrorRowCount());",
                "+            writer.writeNumberField(\"blank_row_count\", columnIndex.getBlankRowCount());",
                "             if (is_numeric) {",
                "-                writer.key(\"min\");",
                "-                writer.value(columnIndex.getMin());",
                "-                writer.key(\"max\");",
                "-                writer.value(columnIndex.getMax());",
                "-                writer.key(\"step\");",
                "-                writer.value(columnIndex.getStep());",
                "+                writer.writeNumberField(\"min\", columnIndex.getMin());",
                "+                writer.writeNumberField(\"max\", columnIndex.getMax());",
                "+                writer.writeNumberField(\"step\", columnIndex.getStep());",
                "             }",
                "         } else {",
                "-            writer.key(\"error\");",
                "-            writer.value(\"error finding numeric information on the '\" + column.getName() + \"' column\");",
                "+            writer.writeStringField(\"error\", \"error finding numeric information on the '\" + column.getName() + \"' column\");",
                "         }",
                "diff --git a/main/src/com/google/refine/commands/importing/GetImportingConfigurationCommand.java b/main/src/com/google/refine/commands/importing/GetImportingConfigurationCommand.java",
                "index e07e5a774..3dcc418fe 100644",
                "--- a/main/src/com/google/refine/commands/importing/GetImportingConfigurationCommand.java",
                "+++ b/main/src/com/google/refine/commands/importing/GetImportingConfigurationCommand.java",
                "@@ -36,4 +36,2 @@ package com.google.refine.commands.importing;",
                " import java.io.IOException;",
                "-import java.io.Writer;",
                "-import java.util.Properties;",
                "@@ -43,9 +41,13 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.google.refine.commands.Command;",
                "-import com.google.refine.importing.ImportingManager;",
                "+import com.google.refine.importing.ImportingManager.ImportingConfiguration;",
                " public class GetImportingConfigurationCommand extends Command {",
                "+    ",
                "+    public static class ConfigurationResponse {",
                "+        @JsonProperty(\"config\")",
                "+        ImportingConfiguration config = new ImportingConfiguration();",
                "+    }",
                "     @Override",
                "@@ -54,15 +56,3 @@ public class GetImportingConfigurationCommand extends Command {",
                "-        Writer w = response.getWriter();",
                "-        response.setContentType(\"application/json\");",
                "-        JSONWriter writer = new JSONWriter(w);",
                "-        try {",
                "-            writer.object();",
                "-            writer.key(\"config\"); ImportingManager.writeConfiguration(writer, new Properties());",
                "-            writer.endObject();",
                "-        } catch (JSONException e) {",
                "-            throw new ServletException(e);",
                "-        } finally {",
                "-            w.flush();",
                "-            w.close();",
                "-        }",
                "+        respondJSON(response, new ConfigurationResponse());",
                "     }",
                "diff --git a/main/src/com/google/refine/commands/lang/GetLanguagesCommand.java b/main/src/com/google/refine/commands/lang/GetLanguagesCommand.java",
                "index d44322bd2..cd0ea55c9 100644",
                "--- a/main/src/com/google/refine/commands/lang/GetLanguagesCommand.java",
                "+++ b/main/src/com/google/refine/commands/lang/GetLanguagesCommand.java",
                "@@ -38,2 +38,5 @@ import java.io.FileFilter;",
                " import java.io.IOException;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "@@ -44,5 +47,5 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.apache.commons.io.filefilter.WildcardFileFilter;",
                "-import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "@@ -54,2 +57,34 @@ public class GetLanguagesCommand extends Command {",
                "+    public static class LanguageRecord {",
                "+        @JsonProperty(\"code\")",
                "+        protected String code;",
                "+        @JsonProperty(\"label\")",
                "+        protected String label;",
                "+        public LanguageRecord(String code, String label) {",
                "+            this.code = code;",
                "+            this.label = label;",
                "+        }",
                "+    }",
                "+    ",
                "+    public class LanguagesResponse {",
                "+        @JsonProperty(\"languages\")",
                "+        List<LanguageRecord> languages;",
                "+        ",
                "+        public LanguagesResponse(ButterflyModule module) throws UnsupportedEncodingException {",
                "+            languages = new ArrayList<>();",
                "+            languages.add(new LanguageRecord(\"en\", \"English\"));",
                "+            FileFilter fileFilter = new WildcardFileFilter(\"translation-*.json\");",
                "+            for (File file : new File(module.getPath() + File.separator + \"langs\").listFiles(fileFilter)) {",
                "+                String lang = file.getName().split(\"-\")[1].split(\"\\\\.\")[0];",
                "+                if (!\"en\".equals(lang) && !\"default\".equals(lang)) {",
                "+                    JSONObject json = LoadLanguageCommand.loadLanguage(servlet, \"core\", lang);",
                "+                    if (json != null && json.has(\"name\")) {",
                "+                        String label = json.getString(\"name\");",
                "+                        languages.add(new LanguageRecord(lang, label));",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+    ",
                "     public GetLanguagesCommand() {",
                "@@ -75,40 +110,4 @@ public class GetLanguagesCommand extends Command {",
                "-        try {",
                "-            response.setCharacterEncoding(\"UTF-8\");",
                "-            response.setHeader(\"Content-Type\", \"application/json\");",
                "-            ",
                "-            JSONWriter writer = new JSONWriter(response.getWriter());",
                "-            ",
                "-            writer.object();",
                "-            writer.key(\"languages\");",
                "-            writer.array();",
                "-            writeLangData(writer, \"en\", \"English\"); // we always have English and it's always first",
                "-            ",
                "-            FileFilter fileFilter = new WildcardFileFilter(\"translation-*.json\");",
                "-            for (File file : new File(module.getPath() + File.separator + \"langs\").listFiles(fileFilter)) {",
                "-                String lang = file.getName().split(\"-\")[1].split(\"\\\\.\")[0];",
                "-                if (!\"en\".equals(lang) && !\"default\".equals(lang)) {",
                "-                    JSONObject json = LoadLanguageCommand.loadLanguage(this.servlet, \"core\", lang);",
                "-                    if (json != null && json.has(\"name\")) {",
                "-                        String label = json.getString(\"name\");",
                "-                        writeLangData(writer, lang, label);",
                "-                    }",
                "-                }",
                "-            }",
                "-",
                "-            writer.endArray();",
                "-            writer.endObject();",
                "-        } catch (JSONException e) {",
                "-            respondException(response, e);",
                "-        }",
                "+        respondJSON(response, new LanguagesResponse(module));",
                "     }",
                "-",
                "-    private void writeLangData(JSONWriter writer, String lang, String label)",
                "-            throws JSONException {",
                "-        writer.object();",
                "-        writer.key(\"code\"); writer.value(lang);",
                "-        writer.key(\"label\"); writer.value(label);",
                "-        writer.endObject();",
                "-    }",
                "-",
                " }",
                "diff --git a/main/src/com/google/refine/importing/ImportingManager.java b/main/src/com/google/refine/importing/ImportingManager.java",
                "index ea0540e24..53b041adf 100644",
                "--- a/main/src/com/google/refine/importing/ImportingManager.java",
                "+++ b/main/src/com/google/refine/importing/ImportingManager.java",
                "@@ -57,2 +57,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.RefineServlet;",
                "@@ -63,5 +65,9 @@ public class ImportingManager {",
                "     static public class Format {",
                "+        @JsonProperty(\"id\")",
                "         final public String id;",
                "+        @JsonProperty(\"label\")",
                "         final public String label;",
                "+        @JsonProperty(\"download\")",
                "         final public boolean download;",
                "+        @JsonProperty(\"uiClass\")",
                "         final public String uiClass;",
                "@@ -225,37 +231,9 @@ public class ImportingManager {",
                "-    static public void writeConfiguration(JSONWriter writer, Properties options) throws JSONException {",
                "-        writer.object();",
                "-        ",
                "-        writer.key(\"formats\");",
                "-        writer.object();",
                "-        for (String format : formatToRecord.keySet()) {",
                "-            Format record = formatToRecord.get(format);",
                "-            ",
                "-            writer.key(format);",
                "-            writer.object();",
                "-            writer.key(\"id\"); writer.value(record.id);",
                "-            writer.key(\"label\"); writer.value(record.label);",
                "-            writer.key(\"download\"); writer.value(record.download);",
                "-            writer.key(\"uiClass\"); writer.value(record.uiClass);",
                "-            writer.endObject();",
                "-        }",
                "-        writer.endObject();",
                "-        ",
                "-        writer.key(\"mimeTypeToFormat\");",
                "-        writer.object();",
                "-        for (String mimeType : mimeTypeToFormat.keySet()) {",
                "-            writer.key(mimeType);",
                "-            writer.value(mimeTypeToFormat.get(mimeType));",
                "-        }",
                "-        writer.endObject();",
                "-        ",
                "-        writer.key(\"extensionToFormat\");",
                "-        writer.object();",
                "-        for (String extension : extensionToFormat.keySet()) {",
                "-            writer.key(extension);",
                "-            writer.value(extensionToFormat.get(extension));",
                "-        }",
                "-        writer.endObject();",
                "-        ",
                "-        writer.endObject();",
                "+    static public class ImportingConfiguration {",
                "+        @JsonProperty(\"formats\")",
                "+        public Map<String, Format> getFormats() { return formatToRecord; }",
                "+        @JsonProperty(\"mimeTypeToFormat\")",
                "+        public Map<String, String> getMimeTypeToFormat() { return mimeTypeToFormat; }",
                "+        @JsonProperty(\"extensionToFormat\")",
                "+        public Map<String, String> getExtensionToFormat() { return extensionToFormat; }",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/HttpUtilities.java",
                "main/src/com/google/refine/commands/column/GetColumnsInfoCommand.java",
                "main/src/com/google/refine/commands/importing/GetImportingConfigurationCommand.java",
                "main/src/com/google/refine/commands/lang/GetLanguagesCommand.java",
                "main/src/com/google/refine/importing/ImportingManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5b153dcfba83010c4ae79f9ce0785fb09ac2929b",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1541436438,
            "hunks": 24,
            "message": "Migrate gdata extension importers to Jackson",
            "diff": [
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/DeAuthorizeCommand.java b/extensions/gdata/src/com/google/refine/extension/gdata/DeAuthorizeCommand.java",
                "index 7a1dd1ead..9ea0a706b 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/DeAuthorizeCommand.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/DeAuthorizeCommand.java",
                "@@ -42,3 +42,2 @@ import com.google.api.client.http.HttpTransport;",
                " import com.google.api.client.http.javanet.NetHttpTransport;",
                "-",
                " import com.google.refine.commands.Command;",
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java b/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java",
                "index c56f9d27e..2d6fd8633 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java",
                "@@ -34,4 +34,3 @@ import java.util.List;",
                "-import org.json.JSONObject;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.api.services.fusiontables.Fusiontables;",
                "@@ -40,3 +39,2 @@ import com.google.api.services.fusiontables.model.Sqlresponse;",
                " import com.google.api.services.fusiontables.model.Table;",
                "-",
                " import com.google.refine.importers.TabularImportingParserBase;",
                "@@ -62,3 +60,3 @@ public class FusionTableImporter {",
                "         int limit,",
                "-        JSONObject options,",
                "+        ObjectNode options,",
                "         List<Exception> exceptions) {",
                "@@ -208,3 +206,3 @@ public class FusionTableImporter {",
                "             int limit,",
                "-            JSONObject options,",
                "+            ObjectNode options,",
                "             List<Exception> exceptions) {",
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java b/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java",
                "index 230d836be..86e6cef90 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java",
                "@@ -7,3 +7,2 @@ import java.util.List;",
                " import com.fasterxml.jackson.databind.JsonNode;",
                "-",
                " import com.google.api.client.http.AbstractInputStreamContent;",
                "@@ -12,4 +11,2 @@ import com.google.api.client.http.HttpResponseException;",
                " import com.google.api.services.fusiontables.Fusiontables;",
                "-",
                "-import com.google.refine.exporters.CustomizableTabularExporterConfiguration;",
                " import com.google.refine.exporters.TabularSerializer;",
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java b/extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java",
                "index 05598e737..714c66167 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java",
                "@@ -8,3 +8,2 @@ import java.util.List;",
                " import org.apache.commons.lang3.exception.ExceptionUtils;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -12,2 +11,3 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.api.services.sheets.v4.Sheets;",
                "@@ -16,3 +16,2 @@ import com.google.api.services.sheets.v4.model.Spreadsheet;",
                " import com.google.api.services.sheets.v4.model.ValueRange;",
                "-",
                " import com.google.refine.importers.TabularImportingParserBase;",
                "@@ -33,3 +32,3 @@ public class GDataImporter {",
                "         int limit,",
                "-        JSONObject options,",
                "+        ObjectNode options,",
                "         List<Exception> exceptions) throws IOException {",
                "@@ -66,3 +65,3 @@ public class GDataImporter {",
                "         int limit,",
                "-        JSONObject options,",
                "+        ObjectNode options,",
                "         List<Exception> exceptions) {",
                "@@ -102,3 +101,3 @@ public class GDataImporter {",
                "         int limit,",
                "-        JSONObject options,",
                "+        ObjectNode options,",
                "         List<Exception> exceptions) {",
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java b/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "index 8b243bbe6..8a35d4612 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "@@ -20,3 +20,3 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.api.services.drive.Drive;",
                "@@ -31,3 +31,2 @@ import com.google.api.services.sheets.v4.model.Sheet;",
                " import com.google.api.services.sheets.v4.model.Spreadsheet;",
                "-",
                " import com.google.refine.ProjectManager;",
                "@@ -239,3 +238,3 @@ public class GDataImportingController implements ImportingController {",
                "         try {",
                "-            JSONObject optionObj = ParsingUtilities.evaluateJsonStringToObject(",
                "+            ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "                 request.getParameter(\"options\"));",
                "@@ -303,3 +302,3 @@ public class GDataImportingController implements ImportingController {",
                "         try {",
                "-            final JSONObject optionObj = ParsingUtilities.evaluateJsonStringToObject(",
                "+            final ObjectNode optionObj = ParsingUtilities.evaluateJsonStringToObjectNode(",
                "                 request.getParameter(\"options\"));",
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java b/extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java",
                "index dd68b505a..dc9d707e2 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java",
                "@@ -27,3 +27,2 @@ import com.google.api.services.sheets.v4.Sheets;",
                " import com.google.api.services.sheets.v4.SheetsScopes;",
                "-",
                " import com.google.refine.ProjectManager;",
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java b/extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java",
                "index 1aa6300e1..769793dcd 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java",
                "@@ -12,3 +12,2 @@ import org.slf4j.LoggerFactory;",
                " import com.fasterxml.jackson.databind.JsonNode;",
                "-",
                " import com.google.api.services.sheets.v4.Sheets;",
                "@@ -20,4 +19,2 @@ import com.google.api.services.sheets.v4.model.Request;",
                " import com.google.api.services.sheets.v4.model.RowData;",
                "-",
                "-import com.google.refine.exporters.CustomizableTabularExporterConfiguration;",
                " import com.google.refine.exporters.TabularSerializer;",
                "diff --git a/extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java b/extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java",
                "index f1879065a..e2272fecd 100644",
                "--- a/extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java",
                "+++ b/extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java",
                "@@ -16,2 +16,3 @@ import javax.servlet.http.HttpServletResponse;",
                "+import org.apache.commons.codec.binary.Base64;",
                " import org.apache.commons.lang3.exception.ExceptionUtils;",
                "@@ -19,6 +20,4 @@ import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "-import org.apache.commons.codec.binary.Base64;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "-",
                " import com.google.api.client.http.FileContent;",
                "@@ -28,3 +27,2 @@ import com.google.api.services.drive.model.File.ContentHints;",
                " import com.google.api.services.drive.model.File.ContentHints.Thumbnail;",
                "-",
                " import com.google.refine.ProjectManager;"
            ],
            "changed_files": [
                "extensions/gdata/src/com/google/refine/extension/gdata/DeAuthorizeCommand.java",
                "extensions/gdata/src/com/google/refine/extension/gdata/FusionTableImporter.java",
                "extensions/gdata/src/com/google/refine/extension/gdata/FusionTableSerializer.java",
                "extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java",
                "extensions/gdata/src/com/google/refine/extension/gdata/GDataImportingController.java",
                "extensions/gdata/src/com/google/refine/extension/gdata/GoogleAPIExtension.java",
                "extensions/gdata/src/com/google/refine/extension/gdata/SpreadsheetSerializer.java",
                "extensions/gdata/src/com/google/refine/extension/gdata/UploadCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "49f1367adc318977cf2d4afbfdf2d235b4c77cf4",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1538126803,
            "hunks": 23,
            "message": "Jackson serialization for clustering classes",
            "diff": [
                "diff --git a/main/src/com/google/refine/clustering/ClusteredEntry.java b/main/src/com/google/refine/clustering/ClusteredEntry.java",
                "new file mode 100644",
                "index 000000000..d7dc0d70e",
                "--- /dev/null",
                "+++ b/main/src/com/google/refine/clustering/ClusteredEntry.java",
                "@@ -0,0 +1,27 @@",
                "+package com.google.refine.clustering;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.Comparator;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                "+public class ClusteredEntry {",
                "+    @JsonProperty(\"v\")",
                "+    protected final Serializable value;",
                "+    @JsonProperty(\"c\")",
                "+    protected final int count;",
                "+    ",
                "+    public ClusteredEntry(",
                "+            Serializable value,",
                "+            int count) {",
                "+        this.value = value;",
                "+        this.count = count;",
                "+    }",
                "+    ",
                "+    public static Comparator<ClusteredEntry> comparator = new Comparator<ClusteredEntry>() {",
                "+        @Override",
                "+        public int compare(ClusteredEntry o1, ClusteredEntry o2) {",
                "+            return o2.count - o1.count;",
                "+        }",
                "+    };",
                "+}",
                "diff --git a/main/src/com/google/refine/clustering/ClustererConfig.java b/main/src/com/google/refine/clustering/ClustererConfig.java",
                "index d7f5d4842..95930fd99 100644",
                "--- a/main/src/com/google/refine/clustering/ClustererConfig.java",
                "+++ b/main/src/com/google/refine/clustering/ClustererConfig.java",
                "@@ -4,2 +4,4 @@ import org.json.JSONObject;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -24,2 +26,3 @@ public abstract class ClustererConfig implements Jsonizable {",
                "+    @JsonProperty(\"column\")",
                "     public String getColumnName() {",
                "@@ -34,2 +37,8 @@ public abstract class ClustererConfig implements Jsonizable {",
                "     public abstract Clusterer apply(Project project);",
                "+    ",
                "+    /**",
                "+     * Type string used in Json serialization",
                "+     */",
                "+    @JsonProperty(\"type\")",
                "+    public abstract String getType();",
                " }",
                "diff --git a/main/src/com/google/refine/clustering/binning/BinningClusterer.java b/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "index 1da042dbb..7e93013d1 100644",
                "--- a/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "+++ b/main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "@@ -45,2 +45,3 @@ import java.util.Properties;",
                " import java.util.TreeMap;",
                "+import java.util.stream.Collectors;",
                "@@ -52,2 +53,8 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonValue;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -56,2 +63,3 @@ import com.google.refine.browsing.FilteredRows;",
                " import com.google.refine.browsing.RowVisitor;",
                "+import com.google.refine.clustering.ClusteredEntry;",
                " import com.google.refine.clustering.Clusterer;",
                "@@ -65,3 +73,4 @@ public class BinningClusterer extends Clusterer {",
                "     public static class BinningClustererConfig extends ClustererConfig {",
                "-        ",
                "+       ",
                "+        @JsonProperty(\"function\")",
                "         private String _keyerName;",
                "@@ -82,2 +91,3 @@ public class BinningClusterer extends Clusterer {",
                "+        @JsonIgnore",
                "         public Keyer getKeyer() {",
                "@@ -86,2 +96,4 @@ public class BinningClusterer extends Clusterer {",
                "+        @JsonProperty(\"params\")",
                "+        @JsonInclude(Include.NON_NULL)",
                "         public BinningParameters getParameters() {",
                "@@ -110,2 +122,7 @@ public class BinningClusterer extends Clusterer {",
                "         }",
                "+",
                "+        @Override",
                "+        public String getType() {",
                "+            return \"binning\";",
                "+        }",
                "@@ -114,2 +131,4 @@ public class BinningClusterer extends Clusterer {",
                "     public static class BinningParameters implements Jsonizable {",
                "+        @JsonProperty(\"ngram-size\")",
                "+        @JsonInclude(Include.NON_DEFAULT)",
                "         public int ngramSize;",
                "@@ -278,2 +297,20 @@ public class BinningClusterer extends Clusterer {",
                "     }",
                "+    ",
                "+    protected static Map<String,Object> entryToMap(Entry<String,Integer> entry) {",
                "+        Map<String,Object> map = new HashMap<>();",
                "+        map.put(\"v\", entry.getKey());",
                "+        map.put(\"c\", entry.getValue());",
                "+        return map;",
                "+    }",
                "+    ",
                "+    @JsonValue",
                "+    public List<List<ClusteredEntry>> getJsonRepresentation() {",
                "+        EntriesComparator c = new EntriesComparator();",
                "+        return _clusters.stream()",
                "+                .map(m -> m.entrySet().stream()",
                "+                        .sorted(c)",
                "+                        .map(e -> new ClusteredEntry(e.getKey(), e.getValue()))",
                "+                        .collect(Collectors.toList()))",
                "+                .collect(Collectors.toList());",
                "+    }",
                " }",
                "diff --git a/main/src/com/google/refine/clustering/knn/kNNClusterer.java b/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "index d80f05f7c..10db49280 100644",
                "--- a/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "+++ b/main/src/com/google/refine/clustering/knn/kNNClusterer.java",
                "@@ -46,2 +46,3 @@ import java.util.Properties;",
                " import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "@@ -53,2 +54,6 @@ import org.slf4j.LoggerFactory;",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonValue;",
                "+",
                " import com.google.refine.Jsonizable;",
                "@@ -57,2 +62,3 @@ import com.google.refine.browsing.FilteredRows;",
                " import com.google.refine.browsing.RowVisitor;",
                "+import com.google.refine.clustering.ClusteredEntry;",
                " import com.google.refine.clustering.Clusterer;",
                "@@ -78,2 +84,3 @@ public class kNNClusterer extends Clusterer {",
                "     public static class kNNClustererConfig extends ClustererConfig {",
                "+        @JsonProperty(\"function\")",
                "         private String _distanceStr;",
                "@@ -107,2 +114,3 @@ public class kNNClusterer extends Clusterer {",
                "+        @JsonIgnore",
                "         public Distance getDistance() {",
                "@@ -111,2 +119,3 @@ public class kNNClusterer extends Clusterer {",
                "+        @JsonProperty(\"params\")",
                "         public kNNClustererConfigParameters getParameters() {",
                "@@ -121,2 +130,7 @@ public class kNNClusterer extends Clusterer {",
                "         }",
                "+",
                "+        @Override",
                "+        public String getType() {",
                "+            return \"knn\";",
                "+        }",
                "@@ -127,3 +141,5 @@ public class kNNClusterer extends Clusterer {",
                "         public static final int defaultBlockingNgramSize = 6;",
                "+        @JsonProperty(\"radius\")",
                "         public double radius = defaultRadius;",
                "+        @JsonProperty(\"blocking-ngram-size\")",
                "         public int blockingNgramSize = defaultBlockingNgramSize;",
                "@@ -304,2 +320,17 @@ public class kNNClusterer extends Clusterer {",
                "+    protected List<ClusteredEntry> getClusteredEntries(Set<Serializable> s) {",
                "+        return s.stream()",
                "+                .map(e -> new ClusteredEntry(e, _counts.get(e)))",
                "+                .sorted(ClusteredEntry.comparator)",
                "+                .collect(Collectors.toList());",
                "+    }",
                "+    ",
                "+    @JsonValue",
                "+    public List<List<ClusteredEntry>> getJsonRepresentation() {",
                "+        return _clusters.stream()",
                "+                        .filter(m -> m.size() > 1)",
                "+                        .map(m -> getClusteredEntries(m))",
                "+                .collect(Collectors.toList());",
                "+    }",
                "+    ",
                "     private void count(Serializable s) {"
            ],
            "changed_files": [
                "main/src/com/google/refine/clustering/ClusteredEntry.java",
                "main/src/com/google/refine/clustering/ClustererConfig.java",
                "main/src/com/google/refine/clustering/binning/BinningClusterer.java",
                "main/src/com/google/refine/clustering/knn/kNNClusterer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "377b051bac295b55434818c8e3bfebe6e078487a",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542730195,
            "hunks": 13,
            "message": "Migrate language commands to Jackson",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/lang/GetLanguagesCommand.java b/main/src/com/google/refine/commands/lang/GetLanguagesCommand.java",
                "index 560533162..7af237b3d 100644",
                "--- a/main/src/com/google/refine/commands/lang/GetLanguagesCommand.java",
                "+++ b/main/src/com/google/refine/commands/lang/GetLanguagesCommand.java",
                "@@ -47,5 +47,5 @@ import javax.servlet.http.HttpServletResponse;",
                " import org.apache.commons.io.filefilter.WildcardFileFilter;",
                "-import org.json.JSONObject;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.commands.Command;",
                "@@ -78,5 +78,5 @@ public class GetLanguagesCommand extends Command {",
                "                 if (!\"en\".equals(lang) && !\"default\".equals(lang)) {",
                "-                    JSONObject json = LoadLanguageCommand.loadLanguage(servlet, \"core\", lang);",
                "+                    ObjectNode json = LoadLanguageCommand.loadLanguage(servlet, \"core\", lang);",
                "                     if (json != null && json.has(\"name\")) {",
                "-                        String label = json.getString(\"name\");",
                "+                        String label = json.get(\"name\").asText(lang);",
                "                         languages.add(new LanguageRecord(lang, label));",
                "diff --git a/main/src/com/google/refine/commands/lang/LoadLanguageCommand.java b/main/src/com/google/refine/commands/lang/LoadLanguageCommand.java",
                "index 96a13dd1e..c29dbf377 100644",
                "--- a/main/src/com/google/refine/commands/lang/LoadLanguageCommand.java",
                "+++ b/main/src/com/google/refine/commands/lang/LoadLanguageCommand.java",
                "@@ -17,6 +17,4 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONTokener;",
                "-",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                "+import com.fasterxml.jackson.databind.node.TextNode;",
                " import com.google.refine.ProjectManager;",
                "@@ -25,2 +23,3 @@ import com.google.refine.commands.Command;",
                " import com.google.refine.preference.PreferenceStore;",
                "+import com.google.refine.util.ParsingUtilities;",
                "@@ -62,3 +61,3 @@ public class LoadLanguageCommand extends Command {",
                "-        JSONObject json = null;",
                "+        ObjectNode json = null;",
                "         boolean loaded = false;",
                "@@ -71,7 +70,7 @@ public class LoadLanguageCommand extends Command {",
                "                 try {",
                "-                    JSONObject fullJson = new JSONObject();",
                "-                    fullJson.put(\"dictionary\", json);",
                "-                    fullJson.put(\"lang\", lang);",
                "-                    fullJson.write(response.getWriter());",
                "-                } catch (JSONException e) {",
                "+                    ObjectNode node = ParsingUtilities.mapper.createObjectNode();",
                "+                    node.put(\"dictionary\", json);",
                "+                    node.put(\"lang\", new TextNode(lang));",
                "+                \tParsingUtilities.mapper.writeValue(response.getWriter(), node);",
                "+                } catch (IOException e) {",
                "                     logger.error(\"Error writing language labels to response stream\");",
                "@@ -89,6 +88,5 @@ public class LoadLanguageCommand extends Command {",
                "-    static JSONObject loadLanguage(RefineServlet servlet, String modname, String lang) throws UnsupportedEncodingException {",
                "+    static ObjectNode loadLanguage(RefineServlet servlet, String modname, String lang) throws UnsupportedEncodingException {",
                "         ButterflyModule module = servlet.getModule(modname);",
                "-        JSONObject json = null;",
                "         File langFile = new File(module.getPath(), \"langs\" + File.separator + \"translation-\" + lang + \".json\");",
                "@@ -96,9 +94,9 @@ public class LoadLanguageCommand extends Command {",
                "             Reader reader = new BufferedReader(new InputStreamReader(new FileInputStream(langFile), \"UTF-8\"));",
                "-            json = new JSONObject(new JSONTokener(reader));",
                "+            return ParsingUtilities.mapper.readValue(reader, ObjectNode.class);",
                "         } catch (FileNotFoundException e1) {",
                "             // Could be normal if we've got a list of languages as fallbacks",
                "-        } catch (JSONException e) {",
                "+        } catch (IOException e) {",
                "             logger.error(\"JSON error reading/writing language file: \" + langFile, e);",
                "         }",
                "-        return json;",
                "+        return null;",
                "     }"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/lang/GetLanguagesCommand.java",
                "main/src/com/google/refine/commands/lang/LoadLanguageCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f48cdb0c1377391a1ae594e59e6ceb25724c19a7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542652794,
            "hunks": 26,
            "message": "Remove spurious JSONExceptions",
            "diff": [
                "diff --git a/main/src/com/google/refine/ProjectManager.java b/main/src/com/google/refine/ProjectManager.java",
                "index 8b016d175..66f2e6dcd 100644",
                "--- a/main/src/com/google/refine/ProjectManager.java",
                "+++ b/main/src/com/google/refine/ProjectManager.java",
                "@@ -47,5 +47,3 @@ import java.util.Map.Entry;",
                "-import org.apache.commons.lang.exception.ExceptionUtils;",
                " import org.apache.tools.tar.TarOutputStream;",
                "-import org.json.JSONException;",
                " import org.slf4j.Logger;",
                "@@ -420,11 +418,6 @@ public abstract class ProjectManager {",
                "-        try {",
                "-            String userMeta = (String)_preferenceStore.get(PreferenceStore.USER_METADATA_KEY);",
                "-            if (userMeta == null)",
                "-                return;",
                "-            userMetadataPreference = ParsingUtilities.mapper.createArrayNode();",
                "-        } catch (JSONException e1) {",
                "-            logger.warn(\"wrong definition of userMetadata format. Please use form [{\\\"name\\\": \\\"client name\\\", \\\"display\\\":true}, {\\\"name\\\": \\\"progress\\\", \\\"display\\\":false}]\");",
                "-            logger.error(ExceptionUtils.getFullStackTrace(e1));",
                "-        }",
                "+        String userMeta = (String)_preferenceStore.get(PreferenceStore.USER_METADATA_KEY);",
                "+        if (userMeta == null)",
                "+            return;",
                "+        userMetadataPreference = ParsingUtilities.mapper.createArrayNode();",
                "diff --git a/main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java b/main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java",
                "index d54bf2230..6d0f87b08 100644",
                "--- a/main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java",
                "+++ b/main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java",
                "@@ -46,3 +46,2 @@ import javax.servlet.http.HttpServletResponse;",
                "-import org.json.JSONException;",
                " import org.json.JSONObject;",
                "@@ -97,3 +96,3 @@ public class GetScatterplotCommand extends Command {",
                "-    public void draw(OutputStream output, Project project, Engine engine, JSONObject o) throws IOException, JSONException {",
                "+    public void draw(OutputStream output, Project project, Engine engine, JSONObject o) throws IOException {",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Join.java b/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "index 492ab9448..c59522231 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "@@ -38,4 +38,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-",
                " import com.fasterxml.jackson.databind.node.ArrayNode;",
                "@@ -77,8 +75,3 @@ public class Join implements Function {",
                "                             }",
                "-                            try {",
                "-                                sb.append(JsonValueConverter.convert(a.get(i)).toString());",
                "-                            } catch (JSONException e) {",
                "-                                return new EvalError(ControlFunctionRegistry.getFunctionName(this) + ",
                "-                                    \" cannot retrieve element \" + i + \" of array\");",
                "-                            }",
                "+                            sb.append(JsonValueConverter.convert(a.get(i)).toString());",
                "                         }",
                "diff --git a/main/src/com/google/refine/importers/ExcelImporter.java b/main/src/com/google/refine/importers/ExcelImporter.java",
                "index 8bce9bcad..173fc1e73 100644",
                "--- a/main/src/com/google/refine/importers/ExcelImporter.java",
                "+++ b/main/src/com/google/refine/importers/ExcelImporter.java",
                "@@ -46,3 +46,2 @@ import java.util.Map;",
                "-import org.apache.commons.lang.exception.ExceptionUtils;",
                " import org.apache.poi.POIXMLDocument;",
                "@@ -56,3 +55,2 @@ import org.apache.poi.ss.usermodel.Workbook;",
                " import org.apache.poi.xssf.usermodel.XSSFWorkbook;",
                "-import org.json.JSONException;",
                " import org.slf4j.Logger;",
                "@@ -189,9 +187,5 @@ public class ExcelImporter extends TabularImportingParserBase {",
                "             String[] fileNameAndSheetIndex = new String[2];",
                "-            try {",
                "-                ObjectNode sheetObj = (ObjectNode) sheets.get(i);",
                "-                // value is fileName#sheetIndex",
                "-                fileNameAndSheetIndex = sheetObj.get(\"fileNameAndSheetIndex\").asText().split(\"#\");",
                "-            } catch (JSONException e) {",
                "-                logger.error(ExceptionUtils.getFullStackTrace(e));",
                "-            }",
                "+            ObjectNode sheetObj = (ObjectNode) sheets.get(i);",
                "+            // value is fileName#sheetIndex",
                "+            fileNameAndSheetIndex = sheetObj.get(\"fileNameAndSheetIndex\").asText().split(\"#\");",
                "diff --git a/main/src/com/google/refine/importers/ImportingParserBase.java b/main/src/com/google/refine/importers/ImportingParserBase.java",
                "index fe0061f96..0ca2d066d 100644",
                "--- a/main/src/com/google/refine/importers/ImportingParserBase.java",
                "+++ b/main/src/com/google/refine/importers/ImportingParserBase.java",
                "@@ -41,3 +41,2 @@ import java.util.List;",
                "-import org.json.JSONException;",
                " import org.slf4j.Logger;",
                "@@ -152,8 +151,4 @@ abstract public class ImportingParserBase implements ImportingParser {",
                "     private void pushImportingOptions(ProjectMetadata metadata, String fileSource, ObjectNode options) {",
                "-        try {",
                "-            options.put(\"fileSource\", fileSource);",
                "-        } catch (JSONException e) {",
                "-            // ignore",
                "-        }",
                "-     // set the import options to metadata:",
                "+        options.put(\"fileSource\", fileSource);",
                "+        // set the import options to metadata:",
                "         metadata.appendImportOptionMetadata(options);",
                "diff --git a/main/src/com/google/refine/importers/OdsImporter.java b/main/src/com/google/refine/importers/OdsImporter.java",
                "index 48dbb6c34..581dc1aea 100644",
                "--- a/main/src/com/google/refine/importers/OdsImporter.java",
                "+++ b/main/src/com/google/refine/importers/OdsImporter.java",
                "@@ -47,3 +47,2 @@ import java.util.Map;",
                " import org.apache.commons.lang.exception.ExceptionUtils;",
                "-import org.json.JSONException;",
                " import org.odftoolkit.odfdom.doc.OdfDocument;",
                "@@ -148,10 +147,6 @@ public class OdsImporter extends TabularImportingParserBase {",
                "             String[] fileNameAndSheetIndex = new String[2];",
                "-            try {",
                "-                ObjectNode sheetObj = JSONUtilities.getObjectElement(sheets, i);",
                "-                // value is fileName#sheetIndex",
                "-                fileNameAndSheetIndex = sheetObj.get(\"fileNameAndSheetIndex\").asText().split(\"#\");",
                "-            } catch (JSONException e) {",
                "-                logger.error(ExceptionUtils.getFullStackTrace(e));",
                "-            }",
                "-            ",
                "+            ObjectNode sheetObj = JSONUtilities.getObjectElement(sheets, i);",
                "+            // value is fileName#sheetIndex",
                "+            fileNameAndSheetIndex = sheetObj.get(\"fileNameAndSheetIndex\").asText().split(\"#\");",
                "+        ",
                "             if (!fileNameAndSheetIndex[0].equals(fileSource))",
                "diff --git a/main/src/com/google/refine/io/FileProjectManager.java b/main/src/com/google/refine/io/FileProjectManager.java",
                "index 71240ff60..271a4f5c6 100644",
                "--- a/main/src/com/google/refine/io/FileProjectManager.java",
                "+++ b/main/src/com/google/refine/io/FileProjectManager.java",
                "@@ -52,3 +52,2 @@ import org.apache.tools.tar.TarInputStream;",
                " import org.apache.tools.tar.TarOutputStream;",
                "-import org.json.JSONException;",
                " import org.slf4j.Logger;",
                "@@ -298,3 +297,3 @@ public class FileProjectManager extends ProjectManager  {",
                "-    protected void saveProjectMetadata() throws JSONException, IOException {",
                "+    protected void saveProjectMetadata() throws IOException {",
                "         for(Entry<Long,ProjectMetadata> entry : _projectsMetadata.entrySet()) {",
                "@@ -307,3 +306,3 @@ public class FileProjectManager extends ProjectManager  {",
                "-    protected boolean saveToFile(File file) throws IOException, JSONException {",
                "+    protected boolean saveToFile(File file) throws IOException {",
                "         FileWriter writer = new FileWriter(file);",
                "diff --git a/main/src/com/google/refine/io/ProjectMetadataUtilities.java b/main/src/com/google/refine/io/ProjectMetadataUtilities.java",
                "index 63601f3c9..61d5d227e 100644",
                "--- a/main/src/com/google/refine/io/ProjectMetadataUtilities.java",
                "+++ b/main/src/com/google/refine/io/ProjectMetadataUtilities.java",
                "@@ -48,6 +48,2 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.commons.lang3.exception.ExceptionUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONTokener;",
                "-import org.json.JSONWriter;",
                " import org.slf4j.Logger;",
                "@@ -63,3 +59,3 @@ public class ProjectMetadataUtilities {",
                "-    public static void save(ProjectMetadata projectMeta, File projectDir) throws JSONException, IOException  {",
                "+    public static void save(ProjectMetadata projectMeta, File projectDir) throws IOException  {",
                "         File tempFile = new File(projectDir, \"metadata.temp.json\");",
                "@@ -81,3 +77,3 @@ public class ProjectMetadataUtilities {",
                "-    protected static void saveToFile(ProjectMetadata projectMeta, File metadataFile) throws JSONException, IOException   {",
                "+    protected static void saveToFile(ProjectMetadata projectMeta, File metadataFile) throws IOException   {",
                "         Writer writer = new OutputStreamWriter(new FileOutputStream(metadataFile));",
                "diff --git a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "index 4251235e5..a120d8651 100644",
                "--- a/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "+++ b/main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "@@ -47,4 +47,2 @@ import java.util.concurrent.TimeUnit;",
                "-import org.json.JSONException;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -226,3 +224,3 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat",
                "             boolean cacheResponses",
                "-        ) throws JSONException {",
                "+        ) {",
                "             super(description);",
                "diff --git a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "index 670adda23..32dfe1538 100644",
                "--- a/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "+++ b/main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "@@ -43,4 +43,2 @@ import java.util.Set;",
                "-import org.json.JSONException;",
                "-",
                " import com.fasterxml.jackson.annotation.JsonCreator;",
                "@@ -142,3 +140,3 @@ public class ExtendDataOperation extends EngineDependentOperation {",
                "             String description",
                "-        ) throws JSONException {",
                "+        ) {",
                "             super(description);",
                "diff --git a/main/src/com/google/refine/sorting/BaseSorter.java b/main/src/com/google/refine/sorting/BaseSorter.java",
                "index 1f5346d9d..67fa23f1a 100644",
                "--- a/main/src/com/google/refine/sorting/BaseSorter.java",
                "+++ b/main/src/com/google/refine/sorting/BaseSorter.java",
                "@@ -37,4 +37,2 @@ import java.util.List;",
                "-import org.json.JSONException;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -104,3 +102,3 @@ abstract public class BaseSorter {",
                "-    public void initializeFromConfig(Project project, SortingConfig config) throws JSONException {",
                "+    public void initializeFromConfig(Project project, SortingConfig config) {",
                "         _criteria = config.getCriteria();"
            ],
            "changed_files": [
                "main/src/com/google/refine/ProjectManager.java",
                "main/src/com/google/refine/commands/browsing/GetScatterplotCommand.java",
                "main/src/com/google/refine/expr/functions/arrays/Join.java",
                "main/src/com/google/refine/importers/ExcelImporter.java",
                "main/src/com/google/refine/importers/ImportingParserBase.java",
                "main/src/com/google/refine/importers/OdsImporter.java",
                "main/src/com/google/refine/io/FileProjectManager.java",
                "main/src/com/google/refine/io/ProjectMetadataUtilities.java",
                "main/src/com/google/refine/operations/column/ColumnAdditionByFetchingURLsOperation.java",
                "main/src/com/google/refine/operations/recon/ExtendDataOperation.java",
                "main/src/com/google/refine/sorting/BaseSorter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7648ca91cadc779c2e7f4f029dd43b5a60c0360d",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1537698461,
            "hunks": 204,
            "message": "Jackson serialization for GREL functions",
            "diff": [
                "diff --git a/main/src/com/google/refine/expr/functions/Coalesce.java b/main/src/com/google/refine/expr/functions/Coalesce.java",
                "index 5ef489c35..e3b384a46 100644",
                "--- a/main/src/com/google/refine/expr/functions/Coalesce.java",
                "+++ b/main/src/com/google/refine/expr/functions/Coalesce.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -62,11 +59,17 @@ public class Coalesce implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the first non-null from a series of values\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"two or more objects\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the first non-null from a series of values\");",
                "-        writer.key(\"params\"); writer.value(\"two or more objects\");",
                "-        writer.key(\"returns\"); writer.value(\"object or null\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"object or null\";",
                "     }",
                "+  ",
                "+    \t\t\t",
                " }",
                "diff --git a/main/src/com/google/refine/expr/functions/Cross.java b/main/src/com/google/refine/expr/functions/Cross.java",
                "index 70347a941..b9ed764f2 100644",
                "--- a/main/src/com/google/refine/expr/functions/Cross.java",
                "+++ b/main/src/com/google/refine/expr/functions/Cross.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.InterProjectModel.ProjectJoin;",
                "@@ -80,10 +77,14 @@ public class Cross implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"join with another project by column\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"cell c or string value, string projectName, string columnName\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"join with another project by column\");",
                "-        writer.key(\"params\"); writer.value(\"cell c or string value, string projectName, string columnName\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/FacetCount.java b/main/src/com/google/refine/expr/functions/FacetCount.java",
                "index 42e172265..7c4c689b0 100644",
                "--- a/main/src/com/google/refine/expr/functions/FacetCount.java",
                "+++ b/main/src/com/google/refine/expr/functions/FacetCount.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.browsing.Engine;",
                "@@ -89,10 +86,14 @@ public class FacetCount implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the facet count corresponding to the given choice value\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"choiceValue, string facetExpression, string columnName\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the facet count corresponding to the given choice value\");",
                "-        writer.key(\"params\"); writer.value(\"choiceValue, string facetExpression, string columnName\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/Get.java b/main/src/com/google/refine/expr/functions/Get.java",
                "index 4e69fc020..d3dad40fd 100644",
                "--- a/main/src/com/google/refine/expr/functions/Get.java",
                "+++ b/main/src/com/google/refine/expr/functions/Get.java",
                "@@ -41,3 +41,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "@@ -168,7 +167,4 @@ public class Get implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-    ",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "+    public String getDescription() {",
                "+        return ",
                "             \"If o has fields, returns the field named 'from' of o. \" +",
                "@@ -176,6 +172,13 @@ public class Get implements Function {",
                "             \"if o is a string, returns o.substring(from, to)\"",
                "-        );",
                "-        writer.key(\"params\"); writer.value(\"o, number or string from, optional number to\");",
                "-        writer.key(\"returns\"); writer.value(\"Depends on actual arguments\");",
                "-        writer.endObject();",
                "+        ;",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"o, number or string from, optional number to\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"Depends on actual arguments\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/HasField.java b/main/src/com/google/refine/expr/functions/HasField.java",
                "index 25f8f32e9..8fb0cb282 100644",
                "--- a/main/src/com/google/refine/expr/functions/HasField.java",
                "+++ b/main/src/com/google/refine/expr/functions/HasField.java",
                "@@ -39,3 +39,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "@@ -69,10 +68,14 @@ public class HasField implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns whether o has field name\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns whether o has field name\");",
                "-        writer.key(\"params\"); writer.value(\"o, string name\");",
                "-        writer.key(\"returns\"); writer.value(\"boolean\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"o, string name\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"boolean\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/Jsonize.java b/main/src/com/google/refine/expr/functions/Jsonize.java",
                "index ab0bc9567..1fdd02dbf 100644",
                "--- a/main/src/com/google/refine/expr/functions/Jsonize.java",
                "+++ b/main/src/com/google/refine/expr/functions/Jsonize.java",
                "@@ -42,3 +42,2 @@ import org.json.JSONException;",
                " import org.json.JSONObject;",
                "-import org.json.JSONWriter;",
                "@@ -81,10 +80,14 @@ public class Jsonize implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Quotes a value as a JSON literal value\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Quotes a value as a JSON literal value\");",
                "-        writer.key(\"params\"); writer.value(\"value\");",
                "-        writer.key(\"returns\"); writer.value(\"JSON literal value\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"value\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"JSON literal value\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/Length.java b/main/src/com/google/refine/expr/functions/Length.java",
                "index bbe7c3a88..e01b45eaf 100644",
                "--- a/main/src/com/google/refine/expr/functions/Length.java",
                "+++ b/main/src/com/google/refine/expr/functions/Length.java",
                "@@ -39,4 +39,2 @@ import java.util.Properties;",
                " import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -74,10 +72,14 @@ public class Length implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the length of o\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the length of o\");",
                "-        writer.key(\"params\"); writer.value(\"array or string o\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"array or string o\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/Slice.java b/main/src/com/google/refine/expr/functions/Slice.java",
                "index c2aa63ae6..b757337ce 100644",
                "--- a/main/src/com/google/refine/expr/functions/Slice.java",
                "+++ b/main/src/com/google/refine/expr/functions/Slice.java",
                "@@ -40,3 +40,2 @@ import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -132,13 +131,17 @@ public class Slice implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-    ",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "+    public String getDescription() {",
                "+        return ",
                "             \"If o is an array, returns o[from, to]. \" +",
                "             \"if o is a string, returns o.substring(from, to)\"",
                "-        );",
                "-        writer.key(\"params\"); writer.value(\"o, number from, optional number to\");",
                "-        writer.key(\"returns\"); writer.value(\"Depends on actual arguments\");",
                "-        writer.endObject();",
                "+        ;",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"o, number from, optional number to\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"Depends on actual arguments\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/ToDate.java b/main/src/com/google/refine/expr/functions/ToDate.java",
                "index 1a20e8cdf..2eecfe4b8 100644",
                "--- a/main/src/com/google/refine/expr/functions/ToDate.java",
                "+++ b/main/src/com/google/refine/expr/functions/ToDate.java",
                "@@ -48,8 +48,6 @@ import java.util.TimeZone;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import com.google.refine.expr.EvalError;",
                "-import com.google.refine.expr.util.CalendarParserException;",
                " import com.google.refine.expr.util.CalendarParser;",
                "+import com.google.refine.expr.util.CalendarParserException;",
                " import com.google.refine.grel.ControlFunctionRegistry;",
                "@@ -190,10 +188,14 @@ public class ToDate implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-    throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns o converted to a date object, you can hint if the day or the month is listed first, or give an ordered list of possible formats using this syntax: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\");",
                "-        writer.key(\"params\"); writer.value(\"o, boolean month_first / format1, format2, ... (all optional)\");",
                "-        writer.key(\"returns\"); writer.value(\"date\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns o converted to a date object, you can hint if the day or the month is listed first, or give an ordered list of possible formats using this syntax: http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"o, boolean month_first / format1, format2, ... (all optional)\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"date\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/ToNumber.java b/main/src/com/google/refine/expr/functions/ToNumber.java",
                "index 4935b3199..e4d6c9a80 100644",
                "--- a/main/src/com/google/refine/expr/functions/ToNumber.java",
                "+++ b/main/src/com/google/refine/expr/functions/ToNumber.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -73,10 +70,14 @@ public class ToNumber implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns o converted to a number\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"o\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns o converted to a number\");",
                "-        writer.key(\"params\"); writer.value(\"o\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/ToString.java b/main/src/com/google/refine/expr/functions/ToString.java",
                "index 02bdaa203..6e90b684f 100644",
                "--- a/main/src/com/google/refine/expr/functions/ToString.java",
                "+++ b/main/src/com/google/refine/expr/functions/ToString.java",
                "@@ -39,5 +39,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -74,10 +71,14 @@ public class ToString implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns o converted to a string\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"o, string format (optional)\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns o converted to a string\");",
                "-        writer.key(\"params\"); writer.value(\"o, string format (optional)\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/Type.java b/main/src/com/google/refine/expr/functions/Type.java",
                "index c22572a54..6c01a6071 100644",
                "--- a/main/src/com/google/refine/expr/functions/Type.java",
                "+++ b/main/src/com/google/refine/expr/functions/Type.java",
                "@@ -39,5 +39,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -74,10 +71,14 @@ public class Type implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the type of o\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"object o\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the type of o\");",
                "-        writer.key(\"params\"); writer.value(\"object o\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/ArgsToArray.java b/main/src/com/google/refine/expr/functions/arrays/ArgsToArray.java",
                "index 6612e1f9d..0d6c52217 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/ArgsToArray.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/ArgsToArray.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.grel.Function;",
                "@@ -50,10 +47,14 @@ public class ArgsToArray implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns all arguments passed to it as an array\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"a1, a2, ...\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns all arguments passed to it as an array\");",
                "-        writer.key(\"params\"); writer.value(\"a1, a2, ...\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Join.java b/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "index 2930b27a1..fb3fad9a4 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Join.java",
                "@@ -40,3 +40,2 @@ import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -103,10 +102,14 @@ public class Join implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the string obtained by joining the array a with the separator sep\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the string obtained by joining the array a with the separator sep\");",
                "-        writer.key(\"params\"); writer.value(\"array a, string sep\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"array a, string sep\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Reverse.java b/main/src/com/google/refine/expr/functions/arrays/Reverse.java",
                "index be0a3289e..eedc0195e 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Reverse.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Reverse.java",
                "@@ -40,3 +40,2 @@ import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -90,10 +89,14 @@ public class Reverse implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Reverses array a\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Reverses array a\");",
                "-        writer.key(\"params\"); writer.value(\"array a\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"array a\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Sort.java b/main/src/com/google/refine/expr/functions/arrays/Sort.java",
                "index de52ea7dd..090a79968 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Sort.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Sort.java",
                "@@ -42,3 +42,2 @@ import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -88,10 +87,14 @@ public class Sort implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Sorts array a\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Sorts array a\");",
                "-        writer.key(\"params\"); writer.value(\"array a\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"array a\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/arrays/Uniques.java b/main/src/com/google/refine/expr/functions/arrays/Uniques.java",
                "index 1acd8e41b..0ee2c50ef 100644",
                "--- a/main/src/com/google/refine/expr/functions/arrays/Uniques.java",
                "+++ b/main/src/com/google/refine/expr/functions/arrays/Uniques.java",
                "@@ -42,3 +42,2 @@ import org.json.JSONArray;",
                " import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -88,10 +87,14 @@ public class Uniques implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns array a with duplicates removed\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns array a with duplicates removed\");",
                "-        writer.key(\"params\"); writer.value(\"array a\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"array a\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/booleans/And.java b/main/src/com/google/refine/expr/functions/booleans/And.java",
                "index 8794cb865..fea94814a 100644",
                "--- a/main/src/com/google/refine/expr/functions/booleans/And.java",
                "+++ b/main/src/com/google/refine/expr/functions/booleans/And.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -60,10 +57,14 @@ public class And implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-            throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"AND two or more booleans to yield a boolean\");",
                "-        writer.key(\"params\"); writer.value(\"boolean a, boolean b\");",
                "-        writer.key(\"returns\"); writer.value(\"boolean\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+    \treturn \"AND two or more booleans to yield a boolean\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"boolean a, boolean b\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"boolean\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/booleans/Not.java b/main/src/com/google/refine/expr/functions/booleans/Not.java",
                "index 4b62afb8d..05b2c7968 100644",
                "--- a/main/src/com/google/refine/expr/functions/booleans/Not.java",
                "+++ b/main/src/com/google/refine/expr/functions/booleans/Not.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -60,10 +57,14 @@ public class Not implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the opposite of b\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"boolean b\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the opposite of b\");",
                "-        writer.key(\"params\"); writer.value(\"boolean b\");",
                "-        writer.key(\"returns\"); writer.value(\"boolean\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"boolean\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/booleans/Or.java b/main/src/com/google/refine/expr/functions/booleans/Or.java",
                "index 0b1b10b0e..91b3a2b6c 100644",
                "--- a/main/src/com/google/refine/expr/functions/booleans/Or.java",
                "+++ b/main/src/com/google/refine/expr/functions/booleans/Or.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -60,10 +57,14 @@ public class Or implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"OR two or more booleans to yield a boolean\");",
                "-        writer.key(\"params\"); writer.value(\"boolean a, boolean b\");",
                "-        writer.key(\"returns\"); writer.value(\"boolean\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"OR two or more booleans to yield a boolean\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"boolean a, boolean b\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"boolean\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/booleans/Xor.java b/main/src/com/google/refine/expr/functions/booleans/Xor.java",
                "index 39bc687a6..d104772a5 100644",
                "--- a/main/src/com/google/refine/expr/functions/booleans/Xor.java",
                "+++ b/main/src/com/google/refine/expr/functions/booleans/Xor.java",
                "@@ -29,5 +29,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -47,13 +44,14 @@ public class Xor implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-            throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\");",
                "-        writer.value(\"XORs two or more boolean values\");",
                "-        writer.key(\"params\");",
                "-        writer.value(\"boolean a, boolean b\");",
                "-        writer.key(\"returns\");",
                "-        writer.value(\"boolean\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+    \treturn \"XORs two or more boolean values\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"boolean a, boolean b\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"boolean\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/date/DatePart.java b/main/src/com/google/refine/expr/functions/date/DatePart.java",
                "index 8b305470c..6f048310a 100644",
                "--- a/main/src/com/google/refine/expr/functions/date/DatePart.java",
                "+++ b/main/src/com/google/refine/expr/functions/date/DatePart.java",
                "@@ -35,6 +35,2 @@ package com.google.refine.expr.functions.date;",
                "-import java.util.Calendar;",
                "-import java.util.Date;",
                "-import java.util.Properties;",
                "-import java.util.TimeZone;",
                " import java.time.DayOfWeek;",
                "@@ -44,5 +40,6 @@ import java.time.temporal.TemporalField;",
                " import java.time.temporal.WeekFields;",
                "-",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "+import java.util.Calendar;",
                "+import java.util.Date;",
                "+import java.util.Properties;",
                "+import java.util.TimeZone;",
                "@@ -143,8 +140,14 @@ public class DatePart implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options) throws JSONException {",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns part of a date\");",
                "-        writer.key(\"params\"); writer.value(\"date d, string part\");",
                "-        writer.key(\"returns\"); writer.value(\"date\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+    \treturn \"Returns part of a date\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"date d, string part\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"date\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/date/Inc.java b/main/src/com/google/refine/expr/functions/date/Inc.java",
                "index ff521d620..a5a3c1c2e 100644",
                "--- a/main/src/com/google/refine/expr/functions/date/Inc.java",
                "+++ b/main/src/com/google/refine/expr/functions/date/Inc.java",
                "@@ -40,5 +40,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -90,8 +87,14 @@ public class Inc implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options) throws JSONException {",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns a date changed by the given amount in the given unit of time\");",
                "-        writer.key(\"params\"); writer.value(\"date d, number value, string unit (default to 'hour')\");",
                "-        writer.key(\"returns\"); writer.value(\"date\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+    \treturn \"Returns a date changed by the given amount in the given unit of time\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"date d, number value, string unit (default to 'hour')\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"date\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/date/Now.java b/main/src/com/google/refine/expr/functions/date/Now.java",
                "index 158f81a2e..ba0d88c63 100644",
                "--- a/main/src/com/google/refine/expr/functions/date/Now.java",
                "+++ b/main/src/com/google/refine/expr/functions/date/Now.java",
                "@@ -55,9 +55,9 @@ public class Now implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the current time\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the current time\");",
                "-        writer.key(\"returns\"); writer.value(\"date\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"date\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/html/InnerHtml.java b/main/src/com/google/refine/expr/functions/html/InnerHtml.java",
                "index 5e9853d46..5a0b8b4f8 100644",
                "--- a/main/src/com/google/refine/expr/functions/html/InnerHtml.java",
                "+++ b/main/src/com/google/refine/expr/functions/html/InnerHtml.java",
                "@@ -37,4 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.jsoup.nodes.Element;",
                "@@ -63,10 +61,14 @@ public class InnerHtml implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"The innerHtml of an HTML element\");",
                "-        writer.key(\"params\"); writer.value(\"Element e\");",
                "-        writer.key(\"returns\"); writer.value(\"String innerHtml\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"The innerHtml of an HTML element\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"Element e\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"String innerHtml\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/html/ParseHtml.java b/main/src/com/google/refine/expr/functions/html/ParseHtml.java",
                "index 14ae4b3cd..482fd2c7f 100644",
                "--- a/main/src/com/google/refine/expr/functions/html/ParseHtml.java",
                "+++ b/main/src/com/google/refine/expr/functions/html/ParseHtml.java",
                "@@ -37,4 +37,3 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "+import org.jsoup.Jsoup;",
                "@@ -60,10 +59,14 @@ public class ParseHtml implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Parses a string as HTML\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"HTML object\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Parses a string as HTML\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"HTML object\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/ACos.java b/main/src/com/google/refine/expr/functions/math/ACos.java",
                "index e4b31269e..99a2632fa 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/ACos.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/ACos.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class ACos implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the arc cosine of an angle, in the range 0 through PI\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the arc cosine of an angle, in the range 0 through PI\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/ASin.java b/main/src/com/google/refine/expr/functions/math/ASin.java",
                "index 6abdb5c1b..c7cbbeb7c 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/ASin.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/ASin.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class ASin implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the arc sine of an angle in the range of -PI/2 through PI/2\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the arc sine of an angle in the range of -PI/2 through PI/2\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/ATan.java b/main/src/com/google/refine/expr/functions/math/ATan.java",
                "index 76e85f513..226bd18a6 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/ATan.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/ATan.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class ATan implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the arc tangent of an angle in the range of -PI/2 through PI/2\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the arc tangent of an angle in the range of -PI/2 through PI/2\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/ATan2.java b/main/src/com/google/refine/expr/functions/math/ATan2.java",
                "index e175a5fc3..6b2019dd2 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/ATan2.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/ATan2.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -56,10 +53,14 @@ public class ATan2 implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Converts rectangular coordinates (x, y) to polar (r, theta)\");",
                "-        writer.key(\"params\"); writer.value(\"number x, number y\");",
                "-        writer.key(\"returns\"); writer.value(\"number theta\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Converts rectangular coordinates (x, y) to polar (r, theta)\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number x, number y\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number theta\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Abs.java b/main/src/com/google/refine/expr/functions/math/Abs.java",
                "index a67734377..14a5cc0cb 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Abs.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Abs.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Abs implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the absolute value of a number\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the absolute value of a number\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Ceil.java b/main/src/com/google/refine/expr/functions/math/Ceil.java",
                "index 3053df1e9..c986a0429 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Ceil.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Ceil.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Ceil implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the ceiling of a number\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the ceiling of a number\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Combin.java b/main/src/com/google/refine/expr/functions/math/Combin.java",
                "index 4ad3d849c..0e9a120c0 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Combin.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Combin.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -89,10 +86,14 @@ public class Combin implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the number of combinations for n elements as divided into k\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the number of combinations for n elements as divided into k\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Cos.java b/main/src/com/google/refine/expr/functions/math/Cos.java",
                "index 9f597df62..6d15df4dc 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Cos.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Cos.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Cos implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the trigonometric cosine of an angle\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the trigonometric cosine of an angle\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Cosh.java b/main/src/com/google/refine/expr/functions/math/Cosh.java",
                "index 867d6dce6..04420734e 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Cosh.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Cosh.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Cosh implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the hyperbolic cosine of a value\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the hyperbolic cosine of a value\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Degrees.java b/main/src/com/google/refine/expr/functions/math/Degrees.java",
                "index 03aac39d0..96c3e3b85 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Degrees.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Degrees.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Degrees implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Converts an angle from radians to degrees.\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Converts an angle from radians to degrees.\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Even.java b/main/src/com/google/refine/expr/functions/math/Even.java",
                "index 12e678495..22bef743a 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Even.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Even.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -60,10 +57,14 @@ public class Even implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Rounds the number up to the nearest even integer\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Rounds the number up to the nearest even integer\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Exp.java b/main/src/com/google/refine/expr/functions/math/Exp.java",
                "index 273bf732f..52f01b688 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Exp.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Exp.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.grel.Function;",
                "@@ -53,10 +50,14 @@ public class Exp implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns e^n\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number n\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns e^n\");",
                "-        writer.key(\"params\"); writer.value(\"number n\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Fact.java b/main/src/com/google/refine/expr/functions/math/Fact.java",
                "index e1f8ab1ec..b9aa916ce 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Fact.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Fact.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Fact implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the factorial of a number\");",
                "-        writer.key(\"params\"); writer.value(\"number i\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the factorial of a number\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number i\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/FactN.java b/main/src/com/google/refine/expr/functions/math/FactN.java",
                "index 9b2254526..dfcb73bbc 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/FactN.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/FactN.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -82,10 +79,14 @@ public class FactN implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the factorial of a number\");",
                "-        writer.key(\"params\"); writer.value(\"number i\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the factorial of a number\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number i\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Floor.java b/main/src/com/google/refine/expr/functions/math/Floor.java",
                "index ccf9aa35f..2d7602b95 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Floor.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Floor.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Floor implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the floor of a number as an integer\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the floor of a number as an integer\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/GreatestCommonDenominator.java b/main/src/com/google/refine/expr/functions/math/GreatestCommonDenominator.java",
                "index a9702f1f6..c9a115112 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/GreatestCommonDenominator.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/GreatestCommonDenominator.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -60,10 +57,14 @@ public class GreatestCommonDenominator implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the greatest common denominator of the two numbers\");",
                "-        writer.key(\"params\"); writer.value(\"number d, number e\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the greatest common denominator of the two numbers\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d, number e\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/LeastCommonMultiple.java b/main/src/com/google/refine/expr/functions/math/LeastCommonMultiple.java",
                "index 1fb8054d2..ad6635421 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/LeastCommonMultiple.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/LeastCommonMultiple.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -72,10 +69,14 @@ public class LeastCommonMultiple implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the greatest common denominator of the two numbers\");",
                "-        writer.key(\"params\"); writer.value(\"number d, number e\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the greatest common denominator of the two numbers\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d, number e\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Ln.java b/main/src/com/google/refine/expr/functions/math/Ln.java",
                "index 227eb15be..2da1c4249 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Ln.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Ln.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Ln implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the natural log of n\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number n\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the natural log of n\");",
                "-        writer.key(\"params\"); writer.value(\"number n\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Log.java b/main/src/com/google/refine/expr/functions/math/Log.java",
                "index e24b74955..efeac212d 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Log.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Log.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Log implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the base 10 log of n\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number n\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the base 10 log of n\");",
                "-        writer.key(\"params\"); writer.value(\"number n\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Max.java b/main/src/com/google/refine/expr/functions/math/Max.java",
                "index a59d86cb8..8fa28325a 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Max.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Max.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -59,10 +56,14 @@ public class Max implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the greater of two numbers\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number a, number b\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the greater of two numbers\");",
                "-        writer.key(\"params\"); writer.value(\"number a, number b\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Min.java b/main/src/com/google/refine/expr/functions/math/Min.java",
                "index 7b7b146c2..fad87784f 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Min.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Min.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -59,10 +56,14 @@ public class Min implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the smaller of two numbers\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number a, number b\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the smaller of two numbers\");",
                "-        writer.key(\"params\"); writer.value(\"number a, number b\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Mod.java b/main/src/com/google/refine/expr/functions/math/Mod.java",
                "index d48f93ced..2851f0d1d 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Mod.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Mod.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -60,10 +57,14 @@ public class Mod implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns a modulus b\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number a, number b\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns a modulus b\");",
                "-        writer.key(\"params\"); writer.value(\"number a, number b\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Multinomial.java b/main/src/com/google/refine/expr/functions/math/Multinomial.java",
                "index bf20eaa1a..64fdfe437 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Multinomial.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Multinomial.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -65,10 +62,14 @@ public class Multinomial implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Calculates the multinomial of a series of numbers\");",
                "-        writer.key(\"params\"); writer.value(\"one or more numbers\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Calculates the multinomial of a series of numbers\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"one or more numbers\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Odd.java b/main/src/com/google/refine/expr/functions/math/Odd.java",
                "index e43788417..1c5b6198e 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Odd.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Odd.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -60,10 +57,14 @@ public class Odd implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Rounds the number up to the nearest even integer\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Rounds the number up to the nearest even integer\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Pow.java b/main/src/com/google/refine/expr/functions/math/Pow.java",
                "index 32e76c860..dcfa71bdf 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Pow.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Pow.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.grel.Function;",
                "@@ -56,10 +53,14 @@ public class Pow implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns a^b\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number a, number b\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns a^b\");",
                "-        writer.key(\"params\"); writer.value(\"number a, number b\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Quotient.java b/main/src/com/google/refine/expr/functions/math/Quotient.java",
                "index c484cfb59..93f6718a4 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Quotient.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Quotient.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -56,10 +53,14 @@ public class Quotient implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the integer portion of a division\");",
                "-        writer.key(\"params\"); writer.value(\"number numerator, number denominator\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the integer portion of a division\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number numerator, number denominator\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Radians.java b/main/src/com/google/refine/expr/functions/math/Radians.java",
                "index c74e0834f..9f1115a15 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Radians.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Radians.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Radians implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Converts an angle in degrees to radians\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Converts an angle in degrees to radians\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Round.java b/main/src/com/google/refine/expr/functions/math/Round.java",
                "index f88cdadbc..4537c3067 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Round.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Round.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Round implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns n rounded\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number n\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns n rounded\");",
                "-        writer.key(\"params\"); writer.value(\"number n\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Sin.java b/main/src/com/google/refine/expr/functions/math/Sin.java",
                "index b862402ae..599eccb65 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Sin.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Sin.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Sin implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the trigonometric sine of an angle\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the trigonometric sine of an angle\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Sinh.java b/main/src/com/google/refine/expr/functions/math/Sinh.java",
                "index 9f26a42d9..94d0e2d5e 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Sinh.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Sinh.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Sinh implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the hyperbolic sine of an angle\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the hyperbolic sine of an angle\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Sum.java b/main/src/com/google/refine/expr/functions/math/Sum.java",
                "index aee0878e2..03da9acc5 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Sum.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Sum.java",
                "@@ -38,5 +38,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -84,10 +81,14 @@ public class Sum implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Sums numbers in array a\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"array a\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Sums numbers in array a\");",
                "-        writer.key(\"params\"); writer.value(\"array a\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Tan.java b/main/src/com/google/refine/expr/functions/math/Tan.java",
                "index 8eb7f9018..b510c75bb 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Tan.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Tan.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Tan implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the trigonometric tangent of an angle\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the trigonometric tangent of an angle\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/math/Tanh.java b/main/src/com/google/refine/expr/functions/math/Tanh.java",
                "index 0d9d5c6c9..49be8c5ad 100644",
                "--- a/main/src/com/google/refine/expr/functions/math/Tanh.java",
                "+++ b/main/src/com/google/refine/expr/functions/math/Tanh.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -55,10 +52,14 @@ public class Tanh implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the hyperbolic tangent of a value\");",
                "-        writer.key(\"params\"); writer.value(\"number d\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Returns the hyperbolic tangent of a value\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"number d\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Chomp.java b/main/src/com/google/refine/expr/functions/strings/Chomp.java",
                "index 8ee9b5ae2..5a0de0ae1 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Chomp.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Chomp.java",
                "@@ -38,4 +38,2 @@ import java.util.Properties;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -58,10 +56,14 @@ public class Chomp implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Removes separator from the end of str if it's there, otherwise leave it alone.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Removes separator from the end of str if it's there, otherwise leave it alone.\");",
                "-        writer.key(\"params\"); writer.value(\"string str, string separator\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string str, string separator\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Contains.java b/main/src/com/google/refine/expr/functions/strings/Contains.java",
                "index 99737b8de..2e7eb41bc 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Contains.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Contains.java",
                "@@ -39,5 +39,2 @@ import java.util.regex.Pattern;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.grel.Function;",
                "@@ -66,10 +63,14 @@ public class Contains implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns whether s contains frag\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string frag\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns whether s contains frag\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string frag\");",
                "-        writer.key(\"returns\"); writer.value(\"boolean\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"boolean\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Diff.java b/main/src/com/google/refine/expr/functions/strings/Diff.java",
                "index 155b0bfea..d6196e39e 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Diff.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Diff.java",
                "@@ -39,4 +39,2 @@ import java.util.Properties;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -106,8 +104,14 @@ public class Diff implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options) throws JSONException {",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"For strings, returns the portion where they differ. For dates, it returns the difference in given time units\");",
                "-        writer.key(\"params\"); writer.value(\"o1, o2, time unit (optional)\");",
                "-        writer.key(\"returns\"); writer.value(\"string for strings, number for dates\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+    \treturn \"For strings, returns the portion where they differ. For dates, it returns the difference in given time units\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"o1, o2, time unit (optional)\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string for strings, number for dates\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/EndsWith.java b/main/src/com/google/refine/expr/functions/strings/EndsWith.java",
                "index e9d97e391..91d51ea44 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/EndsWith.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/EndsWith.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -59,10 +56,14 @@ public class EndsWith implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns whether s ends with sub\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string sub\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns whether s ends with sub\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string sub\");",
                "-        writer.key(\"returns\"); writer.value(\"boolean\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"boolean\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Escape.java b/main/src/com/google/refine/expr/functions/strings/Escape.java",
                "index b25f532de..9f0e5d0e9 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Escape.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Escape.java",
                "@@ -40,4 +40,2 @@ import java.util.Properties;",
                " import org.apache.commons.lang3.StringEscapeUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -87,10 +85,14 @@ public class Escape implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Escapes a string depending on the given escaping mode.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Escapes a string depending on the given escaping mode.\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string mode ['html','xml','csv','url','javascript']\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string mode ['html','xml','csv','url','javascript']\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Find.java b/main/src/com/google/refine/expr/functions/strings/Find.java",
                "index dfec5d990..1220182e9 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Find.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Find.java",
                "@@ -9,5 +9,2 @@ import java.util.regex.Pattern;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -43,10 +40,14 @@ public class Find implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns all the occurances of match given regular expression\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string or regexp\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns all the occurances of match given regular expression\");",
                "-        writer.key(\"params\"); writer.value(\"string or regexp\");",
                "-        writer.key(\"returns\"); writer.value(\"array of strings\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array of strings\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Fingerprint.java b/main/src/com/google/refine/expr/functions/strings/Fingerprint.java",
                "index 2ec124915..46cff1b42 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Fingerprint.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Fingerprint.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.clustering.binning.FingerprintKeyer;",
                "@@ -59,10 +56,14 @@ public class Fingerprint implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the fingerprint of s, a derived string that aims to be a more canonical form of it (this is mostly useful for finding clusters of strings related to the same information).\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the fingerprint of s, a derived string that aims to be a more canonical form of it (this is mostly useful for finding clusters of strings related to the same information).\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/IndexOf.java b/main/src/com/google/refine/expr/functions/strings/IndexOf.java",
                "index a4e0a415c..9edf5d8ca 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/IndexOf.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/IndexOf.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -59,10 +56,14 @@ public class IndexOf implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the index of sub first ocurring in s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string sub\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the index of sub first ocurring in s\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string sub\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/LastIndexOf.java b/main/src/com/google/refine/expr/functions/strings/LastIndexOf.java",
                "index c80dac41b..bab4bf68e 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/LastIndexOf.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/LastIndexOf.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -59,10 +56,14 @@ public class LastIndexOf implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the index of sub last ocurring in s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string sub\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the index of sub last ocurring in s\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string sub\");",
                "-        writer.key(\"returns\"); writer.value(\"number\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"number\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/MD5.java b/main/src/com/google/refine/expr/functions/strings/MD5.java",
                "index 84213e877..ec2d83136 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/MD5.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/MD5.java",
                "@@ -38,4 +38,2 @@ import java.util.Properties;",
                " import org.apache.commons.codec.digest.DigestUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -58,10 +56,14 @@ public class MD5 implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the MD5 hash of s\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the MD5 hash of s\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Match.java b/main/src/com/google/refine/expr/functions/strings/Match.java",
                "index d8f5e0816..141948abf 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Match.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Match.java",
                "@@ -39,5 +39,2 @@ import java.util.regex.Pattern;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -80,10 +77,14 @@ public class Match implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns an array of the groups matching the given regular expression\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string or regexp\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns an array of the groups matching the given regular expression\");",
                "-        writer.key(\"params\"); writer.value(\"string or regexp\");",
                "-        writer.key(\"returns\"); writer.value(\"array of strings\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array of strings\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/NGram.java b/main/src/com/google/refine/expr/functions/strings/NGram.java",
                "index 4c715a938..e27c9f4c5 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/NGram.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/NGram.java",
                "@@ -38,4 +38,2 @@ import java.util.Properties;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -81,10 +79,14 @@ public class NGram implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns an array of the word ngrams of s\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns an array of the word ngrams of s\");",
                "-        writer.key(\"params\"); writer.value(\"string s, number n\");",
                "-        writer.key(\"returns\"); writer.value(\"array of strings\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, number n\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array of strings\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/NGramFingerprint.java b/main/src/com/google/refine/expr/functions/strings/NGramFingerprint.java",
                "index d6d1c4da0..c35c03ce9 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/NGramFingerprint.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/NGramFingerprint.java",
                "@@ -38,5 +38,2 @@ import java.util.TreeSet;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.clustering.binning.Keyer;",
                "@@ -78,10 +75,14 @@ public class NGramFingerprint implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the n-gram fingerprint of s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, number n\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the n-gram fingerprint of s\");",
                "-        writer.key(\"params\"); writer.value(\"string s, number n\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/ParseJson.java b/main/src/com/google/refine/expr/functions/strings/ParseJson.java",
                "index 20d1f46ab..3e2725282 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/ParseJson.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/ParseJson.java",
                "@@ -39,3 +39,2 @@ import org.json.JSONException;",
                " import org.json.JSONTokener;",
                "-import org.json.JSONWriter;",
                "@@ -64,10 +63,14 @@ public class ParseJson implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Parses a string as JSON\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Parses a string as JSON\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"JSON object\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"JSON object\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Partition.java b/main/src/com/google/refine/expr/functions/strings/Partition.java",
                "index 7163a5767..ee7acabb9 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Partition.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Partition.java",
                "@@ -39,5 +39,2 @@ import java.util.regex.Pattern;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.grel.Function;",
                "@@ -103,11 +100,15 @@ public class Partition implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return ",
                "+            \"Returns an array of strings [a,frag,b] where a is the string part before the first occurrence of frag in s and b is what's left. If omitFragment is true, frag is not returned.\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string or regex frag, optional boolean omitFragment\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-            \"Returns an array of strings [a,frag,b] where a is the string part before the first occurrence of frag in s and b is what's left. If omitFragment is true, frag is not returned.\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string or regex frag, optional boolean omitFragment\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Phonetic.java b/main/src/com/google/refine/expr/functions/strings/Phonetic.java",
                "index 004e647f5..7c2758fe1 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Phonetic.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Phonetic.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.clustering.binning.ColognePhoneticKeyer;",
                "@@ -102,10 +99,14 @@ public class Phonetic implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the a phonetic encoding of s (optionally indicating which encoding to use')\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string encoding (optional, defaults to 'metaphone3')\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the a phonetic encoding of s (optionally indicating which encoding to use')\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string encoding (optional, defaults to 'metaphone3')\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/RPartition.java b/main/src/com/google/refine/expr/functions/strings/RPartition.java",
                "index 3be977f92..caf155b84 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/RPartition.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/RPartition.java",
                "@@ -39,5 +39,2 @@ import java.util.regex.Pattern;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.grel.Function;",
                "@@ -104,11 +101,15 @@ public class RPartition implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return ",
                "+            \"Returns an array of strings [a,frag,b] where a is the string part before the last occurrence of frag in s and b is what's left. If omitFragment is true, frag is not returned.\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string or regex frag, optional boolean omitFragment\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-            \"Returns an array of strings [a,frag,b] where a is the string part before the last occurrence of frag in s and b is what's left. If omitFragment is true, frag is not returned.\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string or regex frag, optional boolean omitFragment\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Range.java b/main/src/com/google/refine/expr/functions/strings/Range.java",
                "index c26d45e5a..815ef639f 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Range.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Range.java",
                "@@ -2,8 +2,5 @@ package com.google.refine.expr.functions.strings;",
                "+import java.util.Properties;",
                " import java.util.regex.Matcher;",
                " import java.util.regex.Pattern;",
                "-import java.util.Properties;",
                "-",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -297,11 +294,15 @@ public class Range implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(",
                "-                \"Returns an array where a and b are the start and the end of the range respectively and c is the step (increment).\");",
                "-        writer.key(\"params\"); writer.value(\"A single string 'a', 'a, b' or 'a, b, c' or one, two or three integers a or a, b or a, b, c\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return ",
                "+                \"Returns an array where a and b are the start and the end of the range respectively and c is the step (increment).\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"A single string 'a', 'a, b' or 'a, b, c' or one, two or three integers a or a, b or a, b, c\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Reinterpret.java b/main/src/com/google/refine/expr/functions/strings/Reinterpret.java",
                "index d096b90ba..cc7057862 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Reinterpret.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Reinterpret.java",
                "@@ -38,5 +38,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.ProjectManager;",
                "@@ -101,10 +98,14 @@ public class Reinterpret implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns s reinterpreted thru the given encoder.\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string encoder\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns s reinterpreted thru the given encoder.\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string encoder\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Replace.java b/main/src/com/google/refine/expr/functions/strings/Replace.java",
                "index 71b96fa71..017dc082e 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Replace.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Replace.java",
                "@@ -38,5 +38,2 @@ import java.util.regex.Pattern;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -69,10 +66,14 @@ public class Replace implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the string obtained by replacing f with r in s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string or regex f, string r\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the string obtained by replacing f with r in s\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string or regex f, string r\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/ReplaceChars.java b/main/src/com/google/refine/expr/functions/strings/ReplaceChars.java",
                "index 4c32ff606..320df6055 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/ReplaceChars.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/ReplaceChars.java",
                "@@ -38,4 +38,2 @@ import java.util.Properties;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -63,10 +61,14 @@ public class ReplaceChars implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the string obtained by replacing all chars in f with the char in s at that same position\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the string obtained by replacing all chars in f with the char in s at that same position\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string f, string r\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string f, string r\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/SHA1.java b/main/src/com/google/refine/expr/functions/strings/SHA1.java",
                "index 204b5457e..97eee6946 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/SHA1.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/SHA1.java",
                "@@ -38,4 +38,2 @@ import java.util.Properties;",
                " import org.apache.commons.codec.digest.DigestUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -58,10 +56,14 @@ public class SHA1 implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the SHA-1 hash of s\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the SHA-1 hash of s\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/SmartSplit.java b/main/src/com/google/refine/expr/functions/strings/SmartSplit.java",
                "index 937852e1b..6e01ca95b 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/SmartSplit.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/SmartSplit.java",
                "@@ -38,7 +38,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                "-import au.com.bytecode.opencsv.CSVParser;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -47,2 +42,4 @@ import com.google.refine.grel.Function;",
                "+import au.com.bytecode.opencsv.CSVParser;",
                "+",
                " public class SmartSplit implements Function {",
                "@@ -106,10 +103,14 @@ public class SmartSplit implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the array of strings obtained by splitting s with separator sep. Handles quotes properly. Guesses tab or comma separator if \\\"sep\\\" is not given.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the array of strings obtained by splitting s with separator sep. Handles quotes properly. Guesses tab or comma separator if \\\"sep\\\" is not given.\");",
                "-        writer.key(\"params\"); writer.value(\"string s, optional string sep\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, optional string sep\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Split.java b/main/src/com/google/refine/expr/functions/strings/Split.java",
                "index 2532c9cfc..3a47fd8d8 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Split.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Split.java",
                "@@ -39,4 +39,2 @@ import java.util.regex.Pattern;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -78,10 +76,14 @@ public class Split implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the array of strings obtained by splitting s with separator sep. If preserveAllTokens is true, then empty segments are preserved.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the array of strings obtained by splitting s with separator sep. If preserveAllTokens is true, then empty segments are preserved.\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string or regex sep, optional boolean preserveAllTokens\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string or regex sep, optional boolean preserveAllTokens\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/SplitByCharType.java b/main/src/com/google/refine/expr/functions/strings/SplitByCharType.java",
                "index 85e316974..4f2980cb8 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/SplitByCharType.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/SplitByCharType.java",
                "@@ -38,4 +38,2 @@ import java.util.Properties;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -60,10 +58,14 @@ public class SplitByCharType implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns an array of strings obtained by splitting s grouping consecutive chars by their unicode type\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns an array of strings obtained by splitting s grouping consecutive chars by their unicode type\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/SplitByLengths.java b/main/src/com/google/refine/expr/functions/strings/SplitByLengths.java",
                "index dd827797e..41c88ce62 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/SplitByLengths.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/SplitByLengths.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -73,10 +70,14 @@ public class SplitByLengths implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns the array of strings obtained by splitting s into substrings with the given lengths\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, number n, ...\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns the array of strings obtained by splitting s into substrings with the given lengths\");",
                "-        writer.key(\"params\"); writer.value(\"string s, number n, ...\");",
                "-        writer.key(\"returns\"); writer.value(\"array\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"array\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/StartsWith.java b/main/src/com/google/refine/expr/functions/strings/StartsWith.java",
                "index acf9d3d3d..51a803618 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/StartsWith.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/StartsWith.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -58,10 +55,14 @@ public class StartsWith implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns whether s starts with sub\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string sub\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns whether s starts with sub\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string sub\");",
                "-        writer.key(\"returns\"); writer.value(\"boolean\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"boolean\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/ToLowercase.java b/main/src/com/google/refine/expr/functions/strings/ToLowercase.java",
                "index f9ec96990..2647b7112 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/ToLowercase.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/ToLowercase.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -56,10 +53,14 @@ public class ToLowercase implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns s converted to lowercase\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns s converted to lowercase\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/ToTitlecase.java b/main/src/com/google/refine/expr/functions/strings/ToTitlecase.java",
                "index e1bb2d7d8..17a1a3e7e 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/ToTitlecase.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/ToTitlecase.java",
                "@@ -38,4 +38,2 @@ import java.util.Properties;",
                " import org.apache.commons.lang3.text.WordUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -66,10 +64,14 @@ public class ToTitlecase implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns s converted to titlecase\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns s converted to titlecase\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/ToUppercase.java b/main/src/com/google/refine/expr/functions/strings/ToUppercase.java",
                "index f3b13db41..bfe0e1246 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/ToUppercase.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/ToUppercase.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -56,10 +53,14 @@ public class ToUppercase implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns s converted to uppercase\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns s converted to uppercase\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Trim.java b/main/src/com/google/refine/expr/functions/strings/Trim.java",
                "index 9f1051a57..6d75a74ca 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Trim.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Trim.java",
                "@@ -37,7 +37,3 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.common.base.CharMatcher;",
                "-",
                " import com.google.refine.expr.EvalError;",
                "@@ -58,10 +54,14 @@ public class Trim implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns copy of the string, with leading and trailing whitespace omitted.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns copy of the string, with leading and trailing whitespace omitted.\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Unescape.java b/main/src/com/google/refine/expr/functions/strings/Unescape.java",
                "index c3292d351..95a7742ae 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Unescape.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Unescape.java",
                "@@ -40,4 +40,2 @@ import java.util.Properties;",
                " import org.apache.commons.lang3.StringEscapeUtils;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "@@ -78,10 +76,14 @@ public class Unescape implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Unescapes all escaped parts of the string depending on the given escaping mode.\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Unescapes all escaped parts of the string depending on the given escaping mode.\");",
                "-        writer.key(\"params\"); writer.value(\"string s, string mode ['html','xml','csv','url','javascript']\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s, string mode ['html','xml','csv','url','javascript']\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/Unicode.java b/main/src/com/google/refine/expr/functions/strings/Unicode.java",
                "index d1bed5545..69e0f8bee 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/Unicode.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/Unicode.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.grel.Function;",
                "@@ -59,10 +56,14 @@ public class Unicode implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns an array of strings describing each character of s in their full unicode notation\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns an array of strings describing each character of s in their full unicode notation\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/strings/UnicodeType.java b/main/src/com/google/refine/expr/functions/strings/UnicodeType.java",
                "index 3ca1e9aeb..7bf2eb0f9 100644",
                "--- a/main/src/com/google/refine/expr/functions/strings/UnicodeType.java",
                "+++ b/main/src/com/google/refine/expr/functions/strings/UnicodeType.java",
                "@@ -37,5 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                "-",
                " import com.google.refine.grel.Function;",
                "@@ -96,10 +93,14 @@ public class UnicodeType implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "+    public String getDescription() {",
                "+        return \"Returns an array of strings describing each character of s in their full unicode notation\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"string s\";",
                "+    }",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Returns an array of strings describing each character of s in their full unicode notation\");",
                "-        writer.key(\"params\"); writer.value(\"string s\");",
                "-        writer.key(\"returns\"); writer.value(\"string\");",
                "-        writer.endObject();",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"string\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/xml/OwnText.java b/main/src/com/google/refine/expr/functions/xml/OwnText.java",
                "index 8066b9473..0604f8899 100644",
                "--- a/main/src/com/google/refine/expr/functions/xml/OwnText.java",
                "+++ b/main/src/com/google/refine/expr/functions/xml/OwnText.java",
                "@@ -37,4 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.jsoup.nodes.Element;",
                "@@ -64,10 +62,14 @@ public class OwnText implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Gets the text owned by this XML/HTML element only; does not get the combined text of all children.\");",
                "-        writer.key(\"params\"); writer.value(\"Element e\");",
                "-        writer.key(\"returns\"); writer.value(\"String ownText\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Gets the text owned by this XML/HTML element only; does not get the combined text of all children.\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"Element e\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"String ownText\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/xml/SelectXml.java b/main/src/com/google/refine/expr/functions/xml/SelectXml.java",
                "index 8bb8d3a84..fff66aac6 100644",
                "--- a/main/src/com/google/refine/expr/functions/xml/SelectXml.java",
                "+++ b/main/src/com/google/refine/expr/functions/xml/SelectXml.java",
                "@@ -37,4 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.jsoup.nodes.Element;",
                "@@ -66,10 +64,14 @@ public class SelectXml implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Selects an element from an XML or HTML element using selector syntax.\");",
                "-        writer.key(\"params\"); writer.value(\"Element e, String s\");",
                "-        writer.key(\"returns\"); writer.value(\"XML/HTML Elements\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Selects an element from an XML or HTML elementn using selector syntax.\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"Element e, String s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"HTML Elements\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/xml/XmlAttr.java b/main/src/com/google/refine/expr/functions/xml/XmlAttr.java",
                "index c4746038d..626514efa 100644",
                "--- a/main/src/com/google/refine/expr/functions/xml/XmlAttr.java",
                "+++ b/main/src/com/google/refine/expr/functions/xml/XmlAttr.java",
                "@@ -37,4 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.jsoup.nodes.Element;",
                "@@ -66,10 +64,14 @@ public class XmlAttr implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Selects a value from an attribute on an xml or html Element.\");",
                "-        writer.key(\"params\"); writer.value(\"Element e, String s\");",
                "-        writer.key(\"returns\"); writer.value(\"String attribute Value\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Selects a value from an attribute on an XML or HTML Element\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"Element e, String s\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"String attribute Value\";",
                "     }",
                "diff --git a/main/src/com/google/refine/expr/functions/xml/XmlText.java b/main/src/com/google/refine/expr/functions/xml/XmlText.java",
                "index 014eb8016..8d9167a3b 100644",
                "--- a/main/src/com/google/refine/expr/functions/xml/XmlText.java",
                "+++ b/main/src/com/google/refine/expr/functions/xml/XmlText.java",
                "@@ -37,4 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONWriter;",
                " import org.jsoup.nodes.Element;",
                "@@ -64,10 +62,14 @@ public class XmlText implements Function {",
                "     @Override",
                "-    public void write(JSONWriter writer, Properties options)",
                "-        throws JSONException {",
                "-",
                "-        writer.object();",
                "-        writer.key(\"description\"); writer.value(\"Selects the text from within an element (including all child elements)\");",
                "-        writer.key(\"params\"); writer.value(\"Element e\");",
                "-        writer.key(\"returns\"); writer.value(\"String text\");",
                "-        writer.endObject();",
                "+    public String getDescription() {",
                "+        return \"Selects the text from within an element (including all child elements)\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getParams() {",
                "+        return \"Element e\";",
                "+    }",
                "+    ",
                "+    @Override",
                "+    public String getReturns() {",
                "+        return \"String text\";",
                "     }",
                "diff --git a/main/src/com/google/refine/grel/Function.java b/main/src/com/google/refine/grel/Function.java",
                "index 1153bf6f8..c3c346855 100644",
                "--- a/main/src/com/google/refine/grel/Function.java",
                "+++ b/main/src/com/google/refine/grel/Function.java",
                "@@ -37,2 +37,7 @@ import java.util.Properties;",
                "+import org.json.JSONWriter;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonInclude.Include;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                " import com.google.refine.Jsonizable;",
                "@@ -45,2 +50,25 @@ public interface Function extends Jsonizable {",
                "     public Object call(Properties bindings, Object[] args);",
                "+    ",
                "+    @JsonProperty(\"description\")",
                "+    public String getDescription();",
                "+    ",
                "+    @JsonProperty(\"params\")",
                "+    @JsonInclude(Include.NON_EMPTY)",
                "+    default public String getParams() {",
                "+    \treturn \"\";",
                "+    }",
                "+    ",
                "+    @JsonProperty(\"returns\")",
                "+    public String getReturns();",
                "+    ",
                "+    @Override",
                "+    default public void write(JSONWriter writer, Properties options) {",
                "+    \twriter.object();",
                "+    \twriter.key(\"description\"); writer.value(getDescription());",
                "+    \tif (!getParams().isEmpty()) {",
                "+    \t\twriter.key(\"params\"); writer.value(getParams());",
                "+    \t}",
                "+    \twriter.key(\"returns\"); writer.value(getReturns());",
                "+    \twriter.endObject();",
                "+    }",
                " }"
            ],
            "changed_files": [
                "main/src/com/google/refine/expr/functions/Coalesce.java",
                "main/src/com/google/refine/expr/functions/Cross.java",
                "main/src/com/google/refine/expr/functions/FacetCount.java",
                "main/src/com/google/refine/expr/functions/Get.java",
                "main/src/com/google/refine/expr/functions/HasField.java",
                "main/src/com/google/refine/expr/functions/Jsonize.java",
                "main/src/com/google/refine/expr/functions/Length.java",
                "main/src/com/google/refine/expr/functions/Slice.java",
                "main/src/com/google/refine/expr/functions/ToDate.java",
                "main/src/com/google/refine/expr/functions/ToNumber.java",
                "main/src/com/google/refine/expr/functions/ToString.java",
                "main/src/com/google/refine/expr/functions/Type.java",
                "main/src/com/google/refine/expr/functions/arrays/ArgsToArray.java",
                "main/src/com/google/refine/expr/functions/arrays/Join.java",
                "main/src/com/google/refine/expr/functions/arrays/Reverse.java",
                "main/src/com/google/refine/expr/functions/arrays/Sort.java",
                "main/src/com/google/refine/expr/functions/arrays/Uniques.java",
                "main/src/com/google/refine/expr/functions/booleans/And.java",
                "main/src/com/google/refine/expr/functions/booleans/Not.java",
                "main/src/com/google/refine/expr/functions/booleans/Or.java",
                "main/src/com/google/refine/expr/functions/booleans/Xor.java",
                "main/src/com/google/refine/expr/functions/date/DatePart.java",
                "main/src/com/google/refine/expr/functions/date/Inc.java",
                "main/src/com/google/refine/expr/functions/date/Now.java",
                "main/src/com/google/refine/expr/functions/html/InnerHtml.java",
                "main/src/com/google/refine/expr/functions/html/ParseHtml.java",
                "main/src/com/google/refine/expr/functions/math/ACos.java",
                "main/src/com/google/refine/expr/functions/math/ASin.java",
                "main/src/com/google/refine/expr/functions/math/ATan.java",
                "main/src/com/google/refine/expr/functions/math/ATan2.java",
                "main/src/com/google/refine/expr/functions/math/Abs.java",
                "main/src/com/google/refine/expr/functions/math/Ceil.java",
                "main/src/com/google/refine/expr/functions/math/Combin.java",
                "main/src/com/google/refine/expr/functions/math/Cos.java",
                "main/src/com/google/refine/expr/functions/math/Cosh.java",
                "main/src/com/google/refine/expr/functions/math/Degrees.java",
                "main/src/com/google/refine/expr/functions/math/Even.java",
                "main/src/com/google/refine/expr/functions/math/Exp.java",
                "main/src/com/google/refine/expr/functions/math/Fact.java",
                "main/src/com/google/refine/expr/functions/math/FactN.java",
                "main/src/com/google/refine/expr/functions/math/Floor.java",
                "main/src/com/google/refine/expr/functions/math/GreatestCommonDenominator.java",
                "main/src/com/google/refine/expr/functions/math/LeastCommonMultiple.java",
                "main/src/com/google/refine/expr/functions/math/Ln.java",
                "main/src/com/google/refine/expr/functions/math/Log.java",
                "main/src/com/google/refine/expr/functions/math/Max.java",
                "main/src/com/google/refine/expr/functions/math/Min.java",
                "main/src/com/google/refine/expr/functions/math/Mod.java",
                "main/src/com/google/refine/expr/functions/math/Multinomial.java",
                "main/src/com/google/refine/expr/functions/math/Odd.java",
                "main/src/com/google/refine/expr/functions/math/Pow.java",
                "main/src/com/google/refine/expr/functions/math/Quotient.java",
                "main/src/com/google/refine/expr/functions/math/Radians.java",
                "main/src/com/google/refine/expr/functions/math/Round.java",
                "main/src/com/google/refine/expr/functions/math/Sin.java",
                "main/src/com/google/refine/expr/functions/math/Sinh.java",
                "main/src/com/google/refine/expr/functions/math/Sum.java",
                "main/src/com/google/refine/expr/functions/math/Tan.java",
                "main/src/com/google/refine/expr/functions/math/Tanh.java",
                "main/src/com/google/refine/expr/functions/strings/Chomp.java",
                "main/src/com/google/refine/expr/functions/strings/Contains.java",
                "main/src/com/google/refine/expr/functions/strings/Diff.java",
                "main/src/com/google/refine/expr/functions/strings/EndsWith.java",
                "main/src/com/google/refine/expr/functions/strings/Escape.java",
                "main/src/com/google/refine/expr/functions/strings/Find.java",
                "main/src/com/google/refine/expr/functions/strings/Fingerprint.java",
                "main/src/com/google/refine/expr/functions/strings/IndexOf.java",
                "main/src/com/google/refine/expr/functions/strings/LastIndexOf.java",
                "main/src/com/google/refine/expr/functions/strings/MD5.java",
                "main/src/com/google/refine/expr/functions/strings/Match.java",
                "main/src/com/google/refine/expr/functions/strings/NGram.java",
                "main/src/com/google/refine/expr/functions/strings/NGramFingerprint.java",
                "main/src/com/google/refine/expr/functions/strings/ParseJson.java",
                "main/src/com/google/refine/expr/functions/strings/Partition.java",
                "main/src/com/google/refine/expr/functions/strings/Phonetic.java",
                "main/src/com/google/refine/expr/functions/strings/RPartition.java",
                "main/src/com/google/refine/expr/functions/strings/Range.java",
                "main/src/com/google/refine/expr/functions/strings/Reinterpret.java",
                "main/src/com/google/refine/expr/functions/strings/Replace.java",
                "main/src/com/google/refine/expr/functions/strings/ReplaceChars.java",
                "main/src/com/google/refine/expr/functions/strings/SHA1.java",
                "main/src/com/google/refine/expr/functions/strings/SmartSplit.java",
                "main/src/com/google/refine/expr/functions/strings/Split.java",
                "main/src/com/google/refine/expr/functions/strings/SplitByCharType.java",
                "main/src/com/google/refine/expr/functions/strings/SplitByLengths.java",
                "main/src/com/google/refine/expr/functions/strings/StartsWith.java",
                "main/src/com/google/refine/expr/functions/strings/ToLowercase.java",
                "main/src/com/google/refine/expr/functions/strings/ToTitlecase.java",
                "main/src/com/google/refine/expr/functions/strings/ToUppercase.java",
                "main/src/com/google/refine/expr/functions/strings/Trim.java",
                "main/src/com/google/refine/expr/functions/strings/Unescape.java",
                "main/src/com/google/refine/expr/functions/strings/Unicode.java",
                "main/src/com/google/refine/expr/functions/strings/UnicodeType.java",
                "main/src/com/google/refine/expr/functions/xml/OwnText.java",
                "main/src/com/google/refine/expr/functions/xml/SelectXml.java",
                "main/src/com/google/refine/expr/functions/xml/XmlAttr.java",
                "main/src/com/google/refine/expr/functions/xml/XmlText.java",
                "main/src/com/google/refine/grel/Function.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "99e98a2e78f2d33f5097be6ee110151d09e201a2",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1542741199,
            "hunks": 121,
            "message": "Remove all references to org.json in core",
            "diff": [
                "diff --git a/main/src/com/google/refine/commands/cell/MassEditCommand.java b/main/src/com/google/refine/commands/cell/MassEditCommand.java",
                "index eecfb796a..2d4833eb3 100644",
                "--- a/main/src/com/google/refine/commands/cell/MassEditCommand.java",
                "+++ b/main/src/com/google/refine/commands/cell/MassEditCommand.java",
                "@@ -61,3 +61,3 @@ public class MassEditCommand extends EngineDependentCommand {",
                "             expression,",
                "-            ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {})",
                "+            ParsingUtilities.mapper.readValue(editsString, new TypeReference<List<Edit>>() {})",
                "         );",
                "diff --git a/main/src/com/google/refine/commands/column/ReorderColumnsCommand.java b/main/src/com/google/refine/commands/column/ReorderColumnsCommand.java",
                "index 84d824607..137fc8720 100644",
                "--- a/main/src/com/google/refine/commands/column/ReorderColumnsCommand.java",
                "+++ b/main/src/com/google/refine/commands/column/ReorderColumnsCommand.java",
                "@@ -35,4 +35,7 @@ package com.google.refine.commands.column;",
                "+import java.util.List;",
                "+",
                " import javax.servlet.http.HttpServletRequest;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -42,3 +45,2 @@ import com.google.refine.model.Project;",
                " import com.google.refine.operations.column.ColumnReorderOperation;",
                "-import com.google.refine.util.JSONUtilities;",
                " import com.google.refine.util.ParsingUtilities;",
                "@@ -53,4 +55,3 @@ public class ReorderColumnsCommand extends EngineDependentCommand {",
                "         return new ColumnReorderOperation(",
                "-                JSONUtilities.toStringList(",
                "-                        ParsingUtilities.evaluateJsonStringToArray(columnNames)));",
                "+                ParsingUtilities.mapper.readValue(columnNames, new TypeReference<List<String>>() {}));",
                "     }",
                "diff --git a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "index d732f2aab..e0328c2dd 100644",
                "--- a/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "+++ b/main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "@@ -143,3 +143,10 @@ public class ReconciledDataExtensionJob {",
                "-        protected ColumnInfo(String name, String id, ReconType expectedType) {",
                "+        @JsonCreator",
                "+        protected ColumnInfo(",
                "+        \t\t@JsonProperty(\"name\")",
                "+        \t\tString name,",
                "+        \t\t@JsonProperty(\"id\")",
                "+        \t\tString id,",
                "+        \t\t@JsonProperty(\"type\")",
                "+        \t\tReconType expectedType) {",
                "             this.name = name;",
                "diff --git a/main/src/com/google/refine/util/JSONUtilities.java b/main/src/com/google/refine/util/JSONUtilities.java",
                "index 84dd576d8..2258099e1 100644",
                "--- a/main/src/com/google/refine/util/JSONUtilities.java",
                "+++ b/main/src/com/google/refine/util/JSONUtilities.java",
                "@@ -35,14 +35,4 @@ package com.google.refine.util;",
                "-import java.time.LocalDateTime;",
                "-import java.time.OffsetDateTime;",
                "-import java.time.ZoneId;",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                "-import java.util.Calendar;",
                " import java.util.List;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-",
                " import com.fasterxml.jackson.databind.JsonNode;",
                "@@ -56,10 +46,2 @@ import com.google.refine.expr.util.JsonValueConverter;",
                " public class JSONUtilities {",
                "-\t",
                "-    static public JSONObject getObject(JSONObject obj, String key) {",
                "-        try {",
                "-            return obj.getJSONObject(key);",
                "-        } catch (JSONException e) {",
                "-            return null;",
                "-        }",
                "-    }",
                "@@ -73,10 +55,2 @@ public class JSONUtilities {",
                "-    static public String getString(JSONObject obj, String key, String def) {",
                "-        try {",
                "-            return obj.getString(key);",
                "-        } catch (JSONException e) {",
                "-            return def;",
                "-        }",
                "-    }",
                "-    ",
                "     static public String getString(JsonNode obj, String key, String def) {",
                "@@ -89,10 +63,2 @@ public class JSONUtilities {",
                "-    static public int getInt(JSONObject obj, String key, int def) {",
                "-        try {",
                "-            return obj.getInt(key);",
                "-        } catch (JSONException e) {",
                "-            return def;",
                "-        }",
                "-    }",
                "-    ",
                "     static public int getInt(JsonNode obj, String key, int def) {",
                "@@ -105,10 +71,2 @@ public class JSONUtilities {",
                "-    static public boolean getBoolean(JSONObject obj, String key, boolean def) {",
                "-        try {",
                "-            return obj.getBoolean(key);",
                "-        } catch (JSONException e) {",
                "-            return def;",
                "-        }",
                "-    }",
                "-    ",
                "     static public boolean getBoolean(JsonNode obj, String key, boolean def) {",
                "@@ -120,47 +78,3 @@ public class JSONUtilities {",
                "     }",
                "-    ",
                "-    static public double getDouble(JSONObject obj, String key, double def) {",
                "-        try {",
                "-            return obj.getDouble(key);",
                "-        } catch (JSONException e) {",
                "-            return def;",
                "-        }",
                "-    }",
                "-    ",
                "-    static public long getLong(JSONObject obj, String key, long def) {",
                "-        try {",
                "-            return obj.getLong(key);",
                "-        } catch (JSONException e) {",
                "-            return def;",
                "-        }",
                "-    }",
                "-    ",
                "-    static public OffsetDateTime getDate(JSONObject obj, String key, OffsetDateTime def) {",
                "-        try {",
                "-            OffsetDateTime d = ParsingUtilities.stringToDate(obj.getString(key));",
                "-            ",
                "-            return d != null ? d : def;",
                "-        } catch (JSONException e) {",
                "-            return def;",
                "-        }",
                "-    }",
                "-    ",
                "-    static public LocalDateTime getLocalDate(JSONObject obj, String key, LocalDateTime def) {",
                "-        try {",
                "-            LocalDateTime d = ParsingUtilities.stringToLocalDate(obj.getString(key));",
                "-            ",
                "-            return d != null ? d : def;",
                "-        } catch (JSONException e) {",
                "-            return def;",
                "-        }",
                "-    }",
                "-    ",
                "-    static public JSONArray getArray(JSONObject obj, String key) {",
                "-        try {",
                "-            return obj.getJSONArray(key);",
                "-        } catch (JSONException e) {",
                "-            return null;",
                "-        }",
                "-    }",
                "-    ",
                "+",
                "     static public ArrayNode getArray(ObjectNode obj, String key) {",
                "@@ -180,22 +94,3 @@ public class JSONUtilities {",
                "     }",
                "-    ",
                "-    static public JSONArray arrayToJSONArray(String[] array) {",
                "-        return new JSONArray(Arrays.asList(array));",
                "-    }",
                "-    ",
                "-    static public int[] getIntArray(JSONObject obj, String key) {",
                "-        try {",
                "-            JSONArray a = obj.getJSONArray(key);",
                "-            int[] r = new int[a.length()];",
                "-            ",
                "-            for (int i = 0; i < r.length; i++) {",
                "-                r[i] = a.getInt(i);",
                "-            }",
                "-            ",
                "-            return r;",
                "-        } catch (JSONException e) {",
                "-            return new int[0];",
                "-        }",
                "-    }",
                "-    ",
                "+",
                "     static public int[] getIntArray(ObjectNode obj, String key) {",
                "@@ -213,18 +108,3 @@ public class JSONUtilities {",
                "     }",
                "-    ",
                "-    static public String[] getStringArray(JSONObject obj, String key) {",
                "-        try {",
                "-            JSONArray a = obj.getJSONArray(key);",
                "-            String[] r = new String[a.length()];",
                "-            ",
                "-            for (int i = 0; i < r.length; i++) {",
                "-                r[i] = a.getString(i);",
                "-            }",
                "-            ",
                "-            return r;",
                "-        } catch (JSONException e) {",
                "-            return new String[0];",
                "-        }",
                "-    }",
                "-    ",
                "+",
                "     static public String[] getStringArray(ObjectNode obj, String key) {",
                "@@ -242,41 +122,3 @@ public class JSONUtilities {",
                "     }",
                "-    ",
                "-    static public void getStringList(JSONObject obj, String key, List<String> list) {",
                "-        try {",
                "-            JSONArray a = obj.getJSONArray(key);",
                "-            int count = a.length();",
                "-            ",
                "-            for (int i = 0; i < count; i++) {",
                "-                list.add(a.getString(i));",
                "-            }",
                "-        } catch (JSONException e) {",
                "-        }",
                "-    }",
                "-    ",
                "-    static public void putField(JSONObject obj, String key, Object value) throws JSONException {",
                "-        if (value instanceof Integer) {",
                "-            obj.put(key, ((Integer) value).intValue());",
                "-        } else if (value instanceof Long) {",
                "-            obj.put(key, ((Long) value).intValue());",
                "-        } else if (value instanceof Number) {",
                "-            obj.put(key, ((Double) value).doubleValue());",
                "-        } else if (value instanceof Boolean) {",
                "-            obj.put(key, value);",
                "-        } else if (value instanceof Calendar) {",
                "-            obj.put(key, ParsingUtilities.dateToString(OffsetDateTime.ofInstant(((Calendar)value).toInstant(), ZoneId.of(\"Z\"))));",
                "-        } else if (value instanceof String) {",
                "-            obj.put(key, value);",
                "-        } else {",
                "-            obj.put(key, value.toString());",
                "-        }",
                "-    }",
                "-    ",
                "-    static public JSONObject getObjectElement(JSONArray a, int i) {",
                "-        try {",
                "-            return a.getJSONObject(i);",
                "-        } catch (JSONException e) {",
                "-            return null;",
                "-        }",
                "-    }",
                "-    ",
                "+ ",
                "     static public ObjectNode getObjectElement(ArrayNode a, int i) {",
                "@@ -289,10 +131,2 @@ public class JSONUtilities {",
                "-    static public int getIntElement(JSONArray a, int i, int def) {",
                "-        try {",
                "-            return a.getInt(i);",
                "-        } catch (JSONException e) {",
                "-            return def;",
                "-        }",
                "-    }",
                "-    ",
                "     static public int getIntElement(ArrayNode a, int i, int def) {",
                "@@ -304,9 +138,2 @@ public class JSONUtilities {",
                "-    static public void append(JSONArray sheetRecords, JSONObject sheetRecord) {",
                "-        try {",
                "-            sheetRecords.put(sheetRecords.length(), sheetRecord);",
                "-        } catch (JSONException e) {",
                "-        }",
                "-    }",
                "-    ",
                "     static public void append(ArrayNode sheetRecords, ObjectNode sheetRecord) {",
                "@@ -319,44 +146,2 @@ public class JSONUtilities {",
                "-    static public void append(JSONArray a, Object element) {",
                "-        try {",
                "-            a.put(a.length(), element);",
                "-        } catch (JSONException e) {",
                "-        }",
                "-    }",
                "-    ",
                "-    static public void append(JSONArray a, int element) {",
                "-        try {",
                "-            a.put(a.length(), element);",
                "-        } catch (JSONException e) {",
                "-        }",
                "-    }",
                "-    ",
                "-    static public void append(JSONArray a, long element) {",
                "-        try {",
                "-            a.put(a.length(), element);",
                "-        } catch (JSONException e) {",
                "-        }",
                "-    }",
                "-    ",
                "-    static public void append(JSONArray a, double element) {",
                "-        try {",
                "-            a.put(a.length(), element);",
                "-        } catch (JSONException e) {",
                "-        }",
                "-    }",
                "-    ",
                "-    static public void append(JSONArray a, boolean element) {",
                "-        try {",
                "-            a.put(a.length(), element);",
                "-        } catch (JSONException e) {",
                "-        }",
                "-    }",
                "-    ",
                "-    static public void append(JSONArray a, String element) {",
                "-        try {",
                "-            a.put(a.length(), element);",
                "-        } catch (JSONException e) {",
                "-        }",
                "-    }",
                "-    ",
                "     static public void append(ArrayNode a, String element) {",
                "@@ -366,16 +151,3 @@ public class JSONUtilities {",
                "     static public void safePut(ObjectNode options, String key, JsonNode rootElement) {",
                "-        try {",
                "-            options.put(key, rootElement);",
                "-        } catch (JSONException e) {",
                "-            // Ignore: the JSONObject is just too happy about throwing exceptions.",
                "-        }",
                "-    }",
                "-    ",
                "-    static public void safeInc(JSONObject obj, String key) {",
                "-        try {",
                "-            int currentValue = obj.getInt(key);",
                "-            safePut(obj, key, currentValue + 1);",
                "-        } catch (JSONException e) {",
                "-            e.printStackTrace();",
                "-        }",
                "+        options.put(key, rootElement);",
                "     }",
                "@@ -391,10 +163,2 @@ public class JSONUtilities {",
                "-    static public void safePut(JSONObject obj, String key, long value) {",
                "-        try {",
                "-            obj.put(key, value);",
                "-        } catch (JSONException e) {",
                "-            // Ignore: the JSONObject is just too happy about throwing exceptions.",
                "-        }",
                "-    }",
                "-    ",
                "     static public void safePut(ObjectNode obj, String key, double value) {",
                "@@ -403,10 +167,2 @@ public class JSONUtilities {",
                "-    static public void safePut(JSONObject obj, String key, double value) {",
                "-        try {",
                "-            obj.put(key, value);",
                "-        } catch (JSONException e) {",
                "-            // Ignore: the JSONObject is just too happy about throwing exceptions.",
                "-        }",
                "-    }",
                "-    ",
                "     static public void safePut(ObjectNode obj, String key, boolean value) {",
                "@@ -415,10 +171,2 @@ public class JSONUtilities {",
                "-    static public void safePut(JSONObject obj, String key, boolean value) {",
                "-        try {",
                "-            obj.put(key, value);",
                "-        } catch (JSONException e) {",
                "-            // Ignore: the JSONObject is just too happy about throwing exceptions.",
                "-        }",
                "-    }",
                "-    ",
                "     static public void safePut(ObjectNode obj, String key, String value) {",
                "@@ -426,56 +174,2 @@ public class JSONUtilities {",
                "     }",
                "-    ",
                "-    static public void safePut(JSONObject obj, String key, String value) {",
                "-        try {",
                "-            obj.put(key, value);",
                "-        } catch (JSONException e) {",
                "-            // Ignore: the JSONObject is just too happy about throwing exceptions.",
                "-        }",
                "-    }",
                "-    ",
                "-    static public void safePut(JSONObject obj, String key, Object value) {",
                "-        try {",
                "-            obj.put(key, value);",
                "-        } catch (JSONException e) {",
                "-            // Ignore: the JSONObject is just too happy about throwing exceptions.",
                "-        }",
                "-    }",
                "-    ",
                "-    static public Object[] toArray(JSONArray a) throws JSONException {",
                "-        int l = a.length();",
                "-        ",
                "-        Object[] a2 = new Object[l];",
                "-        for (int i = 0; i < l; i++) {",
                "-            a2[i] = a.get(i);",
                "-        }",
                "-        ",
                "-        return a2;",
                "-    }",
                "-    ",
                "-    static public List<String> toStringList(JSONArray a) throws JSONException {",
                "-        int l = a.length();",
                "-        ",
                "-        List<String> list = new ArrayList<String>();",
                "-        for (int i = 0; i < l; i++) {",
                "-            list.add(a.getString(i));",
                "-        }",
                "-        ",
                "-        return list;",
                "-    }",
                "-    ",
                "-    static public void concatArray(JSONArray destArray, JSONArray srcArray)",
                "-            throws JSONException {",
                "-        for (int i = 0; i < srcArray.length(); i++) {",
                "-            destArray.put(srcArray.get(i));",
                "-        }",
                "-    }",
                "-    ",
                "-    // temporary method used during migratino",
                "-    static public ObjectNode jsonObjectToObjectNode(JSONObject obj) {",
                "-    \treturn ParsingUtilities.evaluateJsonStringToObjectNode(obj.toString());",
                "-    }",
                "-",
                "-\tpublic static JSONObject objectNodeToJsonNode(ObjectNode fieldJsonObj) {",
                "-\t\treturn new JSONObject(fieldJsonObj.toString());",
                "-\t}",
                "diff --git a/main/src/com/google/refine/util/ParsingUtilities.java b/main/src/com/google/refine/util/ParsingUtilities.java",
                "index d5fdeb5e2..7751bfc4d 100644",
                "--- a/main/src/com/google/refine/util/ParsingUtilities.java",
                "+++ b/main/src/com/google/refine/util/ParsingUtilities.java",
                "@@ -56,6 +56,2 @@ import org.apache.commons.codec.DecoderException;",
                " import org.apache.commons.codec.net.URLCodec;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                "-import org.json.JSONTokener;",
                "@@ -160,25 +156,2 @@ public class ParsingUtilities {",
                "-    static public JSONObject evaluateJsonStringToObject(String s) throws JSONException {",
                "-        if( s == null ) {",
                "-            throw new IllegalArgumentException(\"parameter 's' should not be null\");",
                "-        }",
                "-        JSONTokener t = new JSONTokener(s);",
                "-        Object o = t.nextValue();",
                "-        if (o instanceof JSONObject) {",
                "-            return (JSONObject) o;",
                "-        } else {",
                "-            throw new JSONException(s + \" couldn't be parsed as JSON object\");",
                "-        }",
                "-    }",
                "-",
                "-    static public JSONArray evaluateJsonStringToArray(String s) throws JSONException {",
                "-        JSONTokener t = new JSONTokener(s);",
                "-        Object o = t.nextValue();",
                "-        if (o instanceof JSONArray) {",
                "-            return (JSONArray) o;",
                "-        } else {",
                "-            throw new JSONException(s + \" couldn't be parsed as JSON array\");",
                "-        }",
                "-    }",
                "-",
                "     private static final URLCodec codec = new URLCodec();",
                "diff --git a/main/tests/server/src/com/google/refine/tests/RefineTest.java b/main/tests/server/src/com/google/refine/tests/RefineTest.java",
                "index 769bba1ed..4cb5192ee 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/RefineTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/RefineTest.java",
                "@@ -47,5 +47,2 @@ import java.util.List;",
                " import org.apache.commons.io.FileUtils;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.Logger;",
                "@@ -74,3 +71,2 @@ import com.google.refine.model.Row;",
                " import com.google.refine.tests.util.TestUtils;",
                "-import com.google.refine.util.JSONUtilities;",
                "@@ -283,6 +279,2 @@ public class RefineTest {",
                "-    static public void whenGetBooleanOption(String name, JSONObject options, Boolean def){",
                "-        when(options.has(name)).thenReturn(true);",
                "-        when(JSONUtilities.getBoolean(options, name, def)).thenReturn(def);",
                "-    }",
                "@@ -293,7 +285,2 @@ public class RefineTest {",
                "-    static public void whenGetIntegerOption(String name, JSONObject options, int def){",
                "-        when(options.has(name)).thenReturn(true);",
                "-        when(JSONUtilities.getInt(options, name, def)).thenReturn(def);",
                "-    }",
                "-    ",
                "     static public void whenGetIntegerOption(String name, ObjectNode options, int def){",
                "@@ -303,7 +290,2 @@ public class RefineTest {",
                "-    static public void whenGetStringOption(String name, JSONObject options, String def){",
                "-        when(options.has(name)).thenReturn(true);",
                "-        when(JSONUtilities.getString(options, name, def)).thenReturn(def);",
                "-    }",
                "-    ",
                "     static public void whenGetStringOption(String name, ObjectNode options, String def){",
                "@@ -313,7 +295,2 @@ public class RefineTest {",
                "-    static public void whenGetObjectOption(String name, JSONObject options, JSONObject def){",
                "-        when(options.has(name)).thenReturn(true);",
                "-        when(JSONUtilities.getObject(options, name)).thenReturn(def);",
                "-    }",
                "-    ",
                "     static public void whenGetObjectOption(String name, ObjectNode options, ObjectNode def){",
                "@@ -323,7 +300,2 @@ public class RefineTest {",
                "-    static public void whenGetArrayOption(String name, JSONObject options, JSONArray def){",
                "-        when(options.has(name)).thenReturn(true);",
                "-        when(JSONUtilities.getArray(options, name)).thenReturn(def);",
                "-    }",
                "-    ",
                "     static public void whenGetArrayOption(String name, ObjectNode options, ArrayNode def){",
                "@@ -333,11 +305,2 @@ public class RefineTest {",
                "-    static public void verifyGetOption(String name, JSONObject options){",
                "-        verify(options, times(1)).has(name);",
                "-        try {",
                "-            verify(options, times(1)).get(name);",
                "-        } catch (JSONException e) {",
                "-            Assert.fail(\"JSONException\",e);",
                "-        }",
                "-    }",
                "-    ",
                "     // Works for both int, String, and JSON arrays",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java b/main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java",
                "index 3fd556b40..1bfd814ec 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java",
                "@@ -37,3 +37,2 @@ import java.io.IOException;",
                "-import org.json.JSONException;",
                " import org.slf4j.LoggerFactory;",
                "@@ -84,3 +83,3 @@ public class TextSearchFacetTests extends RefineTest {",
                "     @BeforeMethod",
                "-    public void setUp() throws JSONException, IOException, ModelException {",
                "+    public void setUp() throws IOException, ModelException {",
                "         project = createCSVProject(\"TextSearchFacet\",",
                "diff --git a/main/tests/server/src/com/google/refine/tests/browsing/util/ExpressionNominalValueGrouperTests.java b/main/tests/server/src/com/google/refine/tests/browsing/util/ExpressionNominalValueGrouperTests.java",
                "index c0bbf169d..c4649fb03 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/browsing/util/ExpressionNominalValueGrouperTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/browsing/util/ExpressionNominalValueGrouperTests.java",
                "@@ -37,3 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.slf4j.LoggerFactory;",
                "@@ -81,3 +80,3 @@ public class ExpressionNominalValueGrouperTests extends RefineTest {",
                "     @BeforeMethod",
                "-    public void setUp() throws JSONException, IOException, ModelException {",
                "+    public void setUp() throws IOException, ModelException {",
                "       project = createProjectWithColumns(projectName, columnName);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/commands/CommandTests.java b/main/tests/server/src/com/google/refine/tests/commands/CommandTests.java",
                "index 2497cc1b6..8cea786be 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/commands/CommandTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/commands/CommandTests.java",
                "@@ -43,4 +43,2 @@ import javax.servlet.http.HttpServletRequest;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -133,4 +131,2 @@ public class CommandTests extends RefineTest {",
                "             Assert.assertNull(SUT.wrapGetEngineConfig(request));",
                "-        } catch (JSONException e) {",
                "-            Assert.fail();",
                "         } catch (Exception e) {",
                "@@ -144,7 +140,3 @@ public class CommandTests extends RefineTest {",
                "-        try {",
                "-            Assert.assertNull( SUT.wrapGetEngineConfig(request) );",
                "-        } catch (JSONException e) {",
                "-            Assert.fail();",
                "-        }",
                "+        Assert.assertNull( SUT.wrapGetEngineConfig(request) );",
                "@@ -160,4 +152,2 @@ public class CommandTests extends RefineTest {",
                "             Assert.assertEquals(Mode.RowBased, o.getMode());",
                "-        } catch (JSONException e) {",
                "-            Assert.fail();",
                "         } catch (Exception e) {",
                "diff --git a/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java b/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "index 68198fb38..a073c8b10 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "@@ -47,4 +47,2 @@ import java.util.stream.Collectors;",
                "-import org.json.JSONArray;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -460,7 +458,6 @@ public class SqlExporterTests extends RefineTest {",
                "-    protected JSONObject createNumericColOptionsFromProject(String tableName, String type, String size) {",
                "+    protected ObjectNode createNumericColOptionsFromProject(String tableName, String type, String size) {",
                "-        JSONObject json = new JSONObject();",
                "-        JSONArray columns = new JSONArray();",
                "-        json.put(\"columns\", columns);",
                "+        ObjectNode json = ParsingUtilities.mapper.createObjectNode();",
                "+        ArrayNode columns = json.putArray(\"columns\");",
                "         json.put(\"tableName\", tableName);",
                "@@ -471,3 +468,3 @@ public class SqlExporterTests extends RefineTest {",
                "             //logger.info(\"Column Name = \" + c.getName());",
                "-            JSONObject columnModel = new JSONObject();",
                "+            ObjectNode columnModel = ParsingUtilities.mapper.createObjectNode();",
                "             columnModel.put(\"name\", c.getName());",
                "@@ -475,3 +472,3 @@ public class SqlExporterTests extends RefineTest {",
                "                 columnModel.put(\"type\", type);",
                "-            }else {",
                "+            } else {",
                "                 columnModel.put(\"type\", \"VARCHAR\");",
                "@@ -480,3 +477,3 @@ public class SqlExporterTests extends RefineTest {",
                "                 columnModel.put(\"size\", size); ",
                "-            }else {",
                "+            } else {",
                "                 columnModel.put(\"size\", \"100\");",
                "@@ -492,3 +489,3 @@ public class SqlExporterTests extends RefineTest {",
                "-            columns.put(columnModel);",
                "+            columns.add(columnModel);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/expr/functions/FunctionTests.java b/main/tests/server/src/com/google/refine/tests/expr/functions/FunctionTests.java",
                "index dd185f47d..eb842a07b 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/expr/functions/FunctionTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/expr/functions/FunctionTests.java",
                "@@ -38,3 +38,2 @@ import java.util.Properties;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -61,3 +60,2 @@ public class FunctionTests extends RefineTest {",
                "     Project project;",
                "-    JSONObject engine_config;",
                "     Engine engine;",
                "diff --git a/main/tests/server/src/com/google/refine/tests/importers/ExcelImporterTests.java b/main/tests/server/src/com/google/refine/tests/importers/ExcelImporterTests.java",
                "index 86732e1d0..9e454c678 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/importers/ExcelImporterTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/importers/ExcelImporterTests.java",
                "@@ -55,3 +55,2 @@ import org.apache.poi.ss.usermodel.Workbook;",
                " import org.apache.poi.xssf.usermodel.XSSFWorkbook;",
                "-import org.json.JSONException;",
                " import org.slf4j.LoggerFactory;",
                "@@ -133,11 +132,7 @@ public class ExcelImporterTests extends ImporterTest {",
                "-        try {",
                "-            verify(options, times(1)).get(\"ignoreLines\");",
                "-            verify(options, times(1)).get(\"headerLines\");",
                "-            verify(options, times(1)).get(\"skipDataLines\");",
                "-            verify(options, times(1)).get(\"limit\");",
                "-            verify(options, times(1)).get(\"storeBlankCellsAsNulls\");",
                "-        } catch (JSONException e) {",
                "-            Assert.fail(\"JSON exception\",e);",
                "-        }",
                "+        verify(options, times(1)).get(\"ignoreLines\");",
                "+        verify(options, times(1)).get(\"headerLines\");",
                "+        verify(options, times(1)).get(\"skipDataLines\");",
                "+        verify(options, times(1)).get(\"limit\");",
                "+        verify(options, times(1)).get(\"storeBlankCellsAsNulls\");",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/model/CacheTests.java b/main/tests/server/src/com/google/refine/tests/model/CacheTests.java",
                "index 8662db575..7675acc79 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/model/CacheTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/model/CacheTests.java",
                "@@ -37,4 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -79,3 +77,3 @@ public class CacheTests extends RefineTest {",
                "     @BeforeMethod",
                "-    public void SetUp() throws JSONException, IOException, ModelException {",
                "+    public void SetUp() throws IOException, ModelException {",
                "         project = createProjectWithColumns(\"CacheTests\", \"Column A\");",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "index 6a1b87076..6c08bd2eb 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "@@ -6,4 +6,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.testng.Assert;",
                "@@ -53,3 +51,3 @@ public class BlankDownTests extends RefineTest {",
                "     @Test",
                "-    public void serializeBlankDownOperation() throws JSONException, Exception {",
                "+    public void serializeBlankDownOperation() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/blank-down\\\",\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "index 1612e363a..f32b08ee3 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "@@ -6,3 +6,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.testng.Assert;",
                "@@ -51,3 +50,3 @@ public class FillDownTests extends RefineTest {",
                "     @Test",
                "-    public void serializeFillDownOperation() throws JSONException, Exception {",
                "+    public void serializeFillDownOperation() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/fill-down\\\",\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java",
                "index 9e84f3c37..878d9a754 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java",
                "@@ -37,3 +37,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.slf4j.LoggerFactory;",
                "@@ -81,3 +80,3 @@ public class JoinMultiValuedCellsTests extends RefineTest {",
                "     @Test",
                "-    public void serializeMultiValuedCellJoinOperation() throws JSONException, Exception {",
                "+    public void serializeMultiValuedCellJoinOperation() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/multivalued-cell-join\\\",\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java",
                "index 5177b9298..7f1dd3054 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java",
                "@@ -44,3 +44,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.slf4j.LoggerFactory;",
                "@@ -89,3 +88,3 @@ public class KeyValueColumnizeTests extends RefineTest {",
                "     @BeforeMethod",
                "-    public void SetUp() throws JSONException, IOException, ModelException {",
                "+    public void SetUp() throws IOException, ModelException {",
                " \tservlet = new RefineServletStub();",
                "@@ -116,3 +115,3 @@ public class KeyValueColumnizeTests extends RefineTest {",
                "     @Test",
                "-    public void serializeKeyValueColumnizeOperation() throws JSONException, Exception {",
                "+    public void serializeKeyValueColumnizeOperation() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/key-value-columnize\\\",\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "index 629e1eafb..bb3bcff2e 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "@@ -4,3 +4,2 @@ import java.util.List;",
                "-import org.json.JSONException;",
                " import org.testng.Assert;",
                "@@ -28,3 +27,3 @@ public class MassOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeMassEditOperation() throws JSONException, Exception {",
                "+    public void serializeMassEditOperation() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/mass-edit\\\",\"",
                "@@ -41,3 +40,3 @@ public class MassOperationTests extends RefineTest {",
                "-        editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "+        editList = ParsingUtilities.mapper.readValue(editsString, new TypeReference<List<Edit>>() {});",
                "@@ -54,3 +53,3 @@ public class MassOperationTests extends RefineTest {",
                "-        editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "+        editList = ParsingUtilities.mapper.readValue(editsString, new TypeReference<List<Edit>>() {});",
                "@@ -68,3 +67,3 @@ public class MassOperationTests extends RefineTest {",
                "-      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "+      editList = ParsingUtilities.mapper.readValue(editsString, new TypeReference<List<Edit>>() {});",
                "@@ -81,3 +80,3 @@ public class MassOperationTests extends RefineTest {",
                "-      editList = ParsingUtilities.mapper.readValue(ParsingUtilities.evaluateJsonStringToArray(editsString).toString(), new TypeReference<List<Edit>>() {});",
                "+      editList = ParsingUtilities.mapper.readValue(editsString, new TypeReference<List<Edit>>() {});",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "index a74aebdb0..2e047e9e6 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "@@ -38,3 +38,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.slf4j.LoggerFactory;",
                "@@ -74,3 +73,3 @@ public class SplitMultiValuedCellsTests extends RefineTest {",
                "     @Test",
                "-    public void serializeMultiValuedCellSplitOperationWithSeparator() throws JSONException, Exception {",
                "+    public void serializeMultiValuedCellSplitOperationWithSeparator() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/multivalued-cell-split\\\",\"",
                "@@ -86,3 +85,3 @@ public class SplitMultiValuedCellsTests extends RefineTest {",
                "     @Test",
                "-    public void serializeMultiValuedCellSplitOperationWithLengths() throws JSONException, Exception {",
                "+    public void serializeMultiValuedCellSplitOperationWithLengths() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/multivalued-cell-split\\\",\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java b/main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java",
                "index b58977510..14917e5e0 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java",
                "@@ -35,3 +35,2 @@ package com.google.refine.tests.operations.cell;",
                "-import org.json.JSONException;",
                " import org.slf4j.LoggerFactory;",
                "@@ -56,3 +55,3 @@ public class TransposeTests extends RefineTest {",
                "     @Test",
                "-    public void testTransposeRowsIntoColumnsOperation() throws JSONException, Exception {",
                "+    public void testTransposeRowsIntoColumnsOperation() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/transpose-rows-into-columns\\\",\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "index 22108ea4d..e5770cd62 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "@@ -41,4 +41,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -49,2 +47,3 @@ import org.testng.annotations.Test;",
                "+import com.fasterxml.jackson.databind.node.ObjectNode;",
                " import com.google.refine.browsing.EngineConfig;",
                "@@ -110,3 +109,3 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "     @BeforeMethod",
                "-    public void SetUp() throws JSONException, IOException, ModelException {",
                "+    public void SetUp() throws IOException, ModelException {",
                "         project = createProjectWithColumns(\"UrlFetchingTests\", \"fruits\");       ",
                "@@ -127,3 +126,3 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeColumnAdditionByFetchingURLsOperation() throws JSONException, Exception {",
                "+    public void serializeColumnAdditionByFetchingURLsOperation() throws Exception {",
                "         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ColumnAdditionByFetchingURLsOperation.class), json);",
                "@@ -282,3 +281,3 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "         int newCol = project.columnModel.getColumnByName(\"junk\").getCellIndex();",
                "-        JSONObject headersUsed = null;",
                "+        ObjectNode headersUsed = null;",
                "@@ -289,4 +288,4 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "         try { ",
                "-            headersUsed = new JSONObject(project.rows.get(0).getCellValue(newCol).toString());",
                "-        } catch (JSONException ex) {",
                "+            headersUsed = ParsingUtilities.mapper.readValue(project.rows.get(0).getCellValue(newCol).toString(), ObjectNode.class);",
                "+        } catch (IOException ex) {",
                "             return;",
                "@@ -294,5 +293,5 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {",
                "         // Inspect the results we got from remote service",
                "-        Assert.assertEquals(headersUsed.getString(\"User-Agent\"), userAgentValue);",
                "-        Assert.assertEquals(headersUsed.getString(\"Authorization\"), authorizationValue);",
                "-        Assert.assertEquals(headersUsed.getString(\"Accept\"), acceptValue);",
                "+        Assert.assertEquals(headersUsed.get(\"User-Agent\").asText(), userAgentValue);",
                "+        Assert.assertEquals(headersUsed.get(\"Authorization\").asText(), authorizationValue);",
                "+        Assert.assertEquals(headersUsed.get(\"Accept\").asText(), acceptValue);",
                "     }",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java",
                "index 8bb492edd..0e254dbbd 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java",
                "@@ -2,3 +2,2 @@ package com.google.refine.tests.operations.column;",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -20,3 +19,3 @@ public class ColumnAdditionOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeColumnAdditionOperation() throws JSONException, Exception {",
                "+    public void serializeColumnAdditionOperation() throws Exception {",
                "         String json = \"{\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java",
                "index a0ef81029..95a3da8d0 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java",
                "@@ -2,3 +2,2 @@ package com.google.refine.tests.operations.column;",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -20,3 +19,3 @@ public class ColumnMoveOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeColumnMoveOperation() throws JSONException, Exception {",
                "+    public void serializeColumnMoveOperation() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/column-move\\\",\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java",
                "index 3caf1f463..4e964b8b4 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java",
                "@@ -2,3 +2,2 @@ package com.google.refine.tests.operations.column;",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -21,3 +20,3 @@ public class ColumnRemovalOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeColumnRemovalOperation() throws JSONException, Exception {",
                "+    public void serializeColumnRemovalOperation() throws Exception {",
                "         String json = \"{\\\"op\\\":\\\"core/column-removal\\\",\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "index 1a44a8251..9ca9727de 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "@@ -2,3 +2,2 @@ package com.google.refine.tests.operations.column;",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -19,3 +18,3 @@ public class ColumnSplitOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeColumnSplitOperationBySeparator() throws JSONException, Exception {",
                "+    public void serializeColumnSplitOperationBySeparator() throws Exception {",
                "         String json = \"{\\n\" + ",
                "@@ -39,3 +38,3 @@ public class ColumnSplitOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeColumnSplitOperationByLengths() throws JSONException, Exception {",
                "+    public void serializeColumnSplitOperationByLengths() throws Exception {",
                "         String json = \"{\\n\" + ",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "index 90587302e..a70bf75eb 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "@@ -45,4 +45,2 @@ import java.util.Set;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -118,3 +116,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     static public class ReconciledDataExtensionJobStub extends ReconciledDataExtensionJob {",
                "-        public ReconciledDataExtensionJobStub(DataExtensionConfig obj, String endpoint) throws JSONException {",
                "+        public ReconciledDataExtensionJobStub(DataExtensionConfig obj, String endpoint) {",
                "             super(obj, endpoint);",
                "@@ -142,3 +140,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     @BeforeMethod",
                "-    public void SetUp() throws JSONException, IOException, ModelException {",
                "+    public void SetUp() throws IOException, ModelException {",
                "         OperationRegistry.registerOperation(getCoreModule(), \"extend-reconciled-data\", ExtendDataOperation.class);",
                "@@ -167,3 +165,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeExtendDataOperation() throws JSONException, Exception {",
                "+    public void serializeExtendDataOperation() throws Exception {",
                "         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(operationJson, ExtendDataOperation.class), operationJson);",
                "@@ -172,3 +170,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeExtendDataProcess() throws JSONException, Exception {",
                "+    public void serializeExtendDataProcess() throws Exception {",
                "         Process p = ParsingUtilities.mapper.readValue(operationJson, ExtendDataOperation.class)",
                "@@ -179,3 +177,3 @@ public class ExtendDataOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeDataExtensionConfig() {",
                "+    public void serializeDataExtensionConfig() throws IOException {",
                "         TestUtils.isSerializedTo(DataExtensionConfig.reconstruct(dataExtensionConfigJson), dataExtensionConfigJson);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "index e5206cd17..3158d9417 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "@@ -6,3 +6,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -75,3 +74,3 @@ public class ReconOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeReconOperation() throws JSONException, Exception {",
                "+    public void serializeReconOperation() throws Exception {",
                "         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconOperation.class), json);",
                "@@ -80,3 +79,3 @@ public class ReconOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeReconProcess() throws JSONException, Exception {",
                "+    public void serializeReconProcess() throws Exception {",
                "         ReconOperation op = ParsingUtilities.mapper.readValue(json, ReconOperation.class);",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "index 249c4e967..d1b3dcbf4 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "@@ -7,3 +7,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -37,3 +36,3 @@ public class ReconUseValuesAsIdsOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeReconUseValuesAsIdentifiersOperation() throws JSONException, Exception {",
                "+    public void serializeReconUseValuesAsIdentifiersOperation() throws Exception {",
                "         TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconUseValuesAsIdentifiersOperation.class), json);",
                "@@ -42,3 +41,3 @@ public class ReconUseValuesAsIdsOperationTests extends RefineTest {",
                "     @Test",
                "-    public void testUseValuesAsIds() throws JSONException, Exception {",
                "+    public void testUseValuesAsIds() throws Exception {",
                "         Project project = createCSVProject(\"ids,v\\n\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java",
                "index 7e8457a08..c778b54d6 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java",
                "@@ -2,5 +2,2 @@ package com.google.refine.tests.operations.row;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -8,3 +5,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -22,4 +18,3 @@ public class DenormalizeOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeDenormalizeOperation() throws JSONException, Exception {",
                "-        Project project = mock(Project.class);",
                "+    public void serializeDenormalizeOperation() throws Exception {",
                "         String json = \"{\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java",
                "index d8afecad1..ca515069f 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java",
                "@@ -2,5 +2,2 @@ package com.google.refine.tests.operations.row;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -8,3 +5,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -22,4 +18,3 @@ public class RowFlagOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeRowFlagOperation() throws JSONException, Exception {",
                "-        Project project = mock(Project.class);",
                "+    public void serializeRowFlagOperation() throws Exception {",
                "         String json = \"{\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "index db168c626..ab6847066 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "@@ -2,7 +2,4 @@ package com.google.refine.tests.operations.row;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                " import java.io.IOException;",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -10,3 +7,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -24,4 +20,3 @@ public class RowRemovalOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeRowRemovalOperation() throws JSONException, IOException {",
                "-        Project project = mock(Project.class);",
                "+    public void serializeRowRemovalOperation() throws IOException {",
                "         String json = \"{\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "index a21a83bb9..76b0b56ea 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "@@ -4,3 +4,2 @@ import java.util.Properties;",
                "-import org.json.JSONException;",
                " import org.testng.Assert;",
                "@@ -67,3 +66,3 @@ public class RowReorderOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeRowReorderOperation() throws JSONException, Exception {",
                "+    public void serializeRowReorderOperation() throws Exception {",
                "         String json = \"  {\\n\" + ",
                "diff --git a/main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java b/main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java",
                "index 924c50ff4..1a3617b9b 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java",
                "@@ -2,5 +2,2 @@ package com.google.refine.tests.operations.row;",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import org.json.JSONException;",
                " import org.testng.annotations.BeforeSuite;",
                "@@ -8,3 +5,2 @@ import org.testng.annotations.Test;",
                "-import com.google.refine.model.Project;",
                " import com.google.refine.operations.OperationRegistry;",
                "@@ -22,4 +18,3 @@ public class RowStarOperationTests extends RefineTest {",
                "     @Test",
                "-    public void serializeRowStarOperation() throws JSONException, Exception {",
                "-        Project project = mock(Project.class);",
                "+    public void serializeRowStarOperation() throws Exception {",
                "         String json = \"{\"",
                "diff --git a/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java b/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "index c009683da..5dc26dd65 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "@@ -4,3 +4,2 @@ import java.io.IOException;",
                "-import org.json.JSONException;",
                " import org.testng.annotations.Test;",
                "@@ -13,3 +12,3 @@ public class BooleanCriterionTest {",
                "     @Test",
                "-    public void serializeBooleanCriterion() throws JSONException, IOException {",
                "+    public void serializeBooleanCriterion() throws IOException {",
                "         String json = ",
                "diff --git a/main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java b/main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java",
                "index 9b396ca32..aff9e2a1f 100644",
                "--- a/main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java",
                "+++ b/main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java",
                "@@ -41,4 +41,2 @@ import java.util.Map;",
                " import org.apache.commons.lang3.text.StrSubstitutor;",
                "-import org.json.JSONException;",
                "-import org.json.JSONObject;",
                " import org.slf4j.LoggerFactory;",
                "@@ -59,36 +57,2 @@ public class ParsingUtilitiesTests extends RefineTest {",
                "-    //--------------evaluateJsonStringToObject tests-----------------------",
                "-",
                "-    @Test",
                "-    public void evaluateJsonStringToObjectRegressionTest(){",
                "-        try {",
                "-            JSONObject o = ParsingUtilities.evaluateJsonStringToObject(\"{\\\"foo\\\":\\\"bar\\\"}\");",
                "-            Assert.assertNotNull(o);",
                "-            Assert.assertEquals(\"bar\", o.getString(\"foo\"));",
                "-        } catch (JSONException e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-",
                "-    @Test",
                "-    public void evaluateJsonStringToObjectWithNullParameters(){",
                "-        try {",
                "-            Assert.assertNull(ParsingUtilities.evaluateJsonStringToObject(null));",
                "-            Assert.fail();",
                "-        } catch (IllegalArgumentException e){",
                "-            //expected",
                "-        } catch (JSONException e) {",
                "-            Assert.fail();",
                "-        }",
                "-    }",
                "-",
                "-    @Test",
                "-    public void evaluateJsonStringToObjectWithMalformedParameters(){",
                "-        try {",
                "-            ParsingUtilities.evaluateJsonStringToObject(\"malformed\");",
                "-            Assert.fail();",
                "-        } catch (JSONException e) {",
                "-            //expected",
                "-        }",
                "-    }",
                "     @Test"
            ],
            "changed_files": [
                "main/src/com/google/refine/commands/cell/MassEditCommand.java",
                "main/src/com/google/refine/commands/column/ReorderColumnsCommand.java",
                "main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java",
                "main/src/com/google/refine/util/JSONUtilities.java",
                "main/src/com/google/refine/util/ParsingUtilities.java",
                "main/tests/server/src/com/google/refine/tests/RefineTest.java",
                "main/tests/server/src/com/google/refine/tests/browsing/facets/TextSearchFacetTests.java",
                "main/tests/server/src/com/google/refine/tests/browsing/util/ExpressionNominalValueGrouperTests.java",
                "main/tests/server/src/com/google/refine/tests/commands/CommandTests.java",
                "main/tests/server/src/com/google/refine/tests/exporters/sql/SqlExporterTests.java",
                "main/tests/server/src/com/google/refine/tests/expr/functions/FunctionTests.java",
                "main/tests/server/src/com/google/refine/tests/importers/ExcelImporterTests.java",
                "main/tests/server/src/com/google/refine/tests/model/CacheTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/BlankDownTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/FillDownTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/JoinMultiValuedCellsTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/KeyValueColumnizeTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/MassOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/SplitMultiValuedCellsTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/cell/TransposeTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionByFetchingURLsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnAdditionOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnMoveOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnRemovalOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/column/ColumnSplitOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ExtendDataOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/recon/ReconUseValuesAsIdsOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/DenormalizeOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowFlagOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowRemovalOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowReorderOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/operations/row/RowStarOperationTests.java",
                "main/tests/server/src/com/google/refine/tests/sorting/BooleanCriterionTest.java",
                "main/tests/server/src/com/google/refine/tests/util/ParsingUtilitiesTests.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "20c86cdd5c8affce5614ff7770070b6c0b6823a7",
            "repository": "https://github.com/OpenRefine/OpenRefine",
            "timestamp": 1544363263,
            "hunks": 0,
            "message": "Merge branch 'origin/master' into Weblate.",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.2",
                "3.2-beta",
                "3.3",
                "3.3-beta",
                "3.3-rc1",
                "3.4",
                "3.4-beta",
                "3.4-beta2",
                "3.4.1",
                "3.5-beta1",
                "3.5-beta2",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.6-beta1",
                "3.6-beta2",
                "3.6-rc1",
                "3.6.0",
                "3.6.1",
                "3.6.2",
                "3.7-beta1",
                "3.7-beta2",
                "3.7-beta3",
                "3.7-beta4",
                "3.7-beta5",
                "3.7.0",
                "3.7.1",
                "3.7.2",
                "3.7.3",
                "3.7.4",
                "3.7.5",
                "3.7.6",
                "3.7.7",
                "3.7.8",
                "3.7.9",
                "3.8-beta.3",
                "3.8-beta.4",
                "3.8-beta1",
                "3.8-beta2",
                "3.8-beta5",
                "3.8.0",
                "3.8.1",
                "3.8.2",
                "4.0-alpha1"
            ],
            "matched_rules": []
        }
    ]
}
