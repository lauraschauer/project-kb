{
    "advisory_record": {
        "cve_id": "CVE-2018-10936",
        "description": "A weakness was found in postgresql-jdbc before version 42.2.5. It was possible to provide an SSL Factory and not check the host name if a host name verifier was not provided to the driver. This could lead to a condition where a man-in-the-middle attacker could masquerade as a trusted server by providing a certificate for the wrong host, as long as it was signed by a trusted CA.",
        "reserved_timestamp": 1525824000,
        "published_timestamp": 1535634000,
        "updated_timestamp": 1573866414,
        "repository_url": null,
        "references": {
            "https://www.postgresql.org/about/news/1883/": 6,
            "": 5,
            "http://www.securityfocus.com/bid/105220": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10936": 2,
            "https://lists.apache.org/thread.html/9317fd092b257a0815434b116a8af8daea6e920b6673f4fd5583d5fe%40%3Ccommits.druid.apache.org%3E": 2,
            "commit::cdeeaca47dc3bc6f727c79a582c9e412309": 2,
            "commit::cdeeaca47dc3bc6f727c79a582c9e4123099526e": 2
        },
        "affected_products": [
            "PostgreSQL",
            "Factory",
            "SSL"
        ],
        "versions": {
            "status": "affected",
            "version": "42.2.5"
        },
        "files": [
            "man-in-the-middle",
            "postgresql-jdbc",
            "SSL"
        ],
        "keywords": [
            "certificate",
            "jdbc",
            "provide",
            "attacker",
            "condition",
            "sign",
            "host",
            "factory",
            "trust",
            "lead",
            "weakness",
            "driver",
            "masquerade",
            "name",
            "check",
            "postgresql",
            "server",
            "find",
            "verifier",
            "version"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "cdeeaca47dc3bc6f727c79a582c9e4123099526e",
            "repository": "https://github.com/pgjdbc/pgjdbc",
            "timestamp": 1534086922,
            "hunks": 77,
            "message": "security: implement SSL hostname verification for non-default (LibPQFactory) SSL factories (CVE-2018-10936) In order to configure full SLL verification, `sslmode=verify-full` should be used. However, previous versions of pgjdbc missed hostname verification for non-default SSL factories, so `sslmode=verify-full` was effectively the same as `sslmode=verify-ca`. Default sslfactory (which is LibPQFactory) is not impacted. Extra changes: - support for sslmode=allow/prefer/require - ssl=true is treated as verify-full - sslfactoryarg and socketFactoryArg are deprecated (as constructors with Properties) can be used.",
            "diff": [
                "diff --git a/.travis/travis_configure_ssl.sh b/.travis/travis_configure_ssl.sh",
                "index c01affe0..e07aa70d 100755",
                "--- a/.travis/travis_configure_ssl.sh",
                "+++ b/.travis/travis_configure_ssl.sh",
                "@@ -24,12 +24,3 @@ set_conf_property \"ssl_ca_file\" \"root.crt\"",
                "-enable_ssl_property \"testsinglecertfactory\"",
                "-enable_ssl_property \"sslhostnossl9\"",
                "-enable_ssl_property \"sslhostgh9\"",
                "-enable_ssl_property \"sslhostbh9\"",
                "-enable_ssl_property \"sslhostsslgh9\"",
                "-enable_ssl_property \"sslhostsslbh9\"",
                "-enable_ssl_property \"sslhostsslcertgh9\"",
                "-enable_ssl_property \"sslhostsslcertbh9\"",
                "-enable_ssl_property \"sslcertgh9\"",
                "-enable_ssl_property \"sslcertbh9\"",
                "+enable_ssl_property \"enable_ssl_tests\"",
                "diff --git a/build.properties b/build.properties",
                "index 91e4cd10..548d2aaf 100644",
                "--- a/build.properties",
                "+++ b/build.properties",
                "@@ -21 +21,2 @@ loggerFile=target/pgjdbc-tests.log",
                " protocolVersion=0",
                "+sslpassword=sslpwd",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/PGProperty.java b/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
                "index e56e05eb..4afefe23 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/PGProperty.java",
                "@@ -175,3 +175,3 @@ public enum PGProperty {",
                "   /**",
                "-   * Control use of SSL (any non-null value causes SSL to be required).",
                "+   * Control use of SSL: empty or {@code true} values imply {@code sslmode==verify-full}",
                "    */",
                "@@ -180,8 +180,9 @@ public enum PGProperty {",
                "   /**",
                "-   * Parameter governing the use of SSL. The allowed values are {@code require}, {@code verify-ca},",
                "-   * {@code verify-full}, or {@code disable} ({@code allow} and {@code prefer} are not implemented)",
                "-   * If not set, the {@code ssl} property may be checked to enable SSL mode.",
                "+   * Parameter governing the use of SSL. The allowed values are {@code disable}, {@code allow},",
                "+   * {@code prefer}, {@code require}, {@code verify-ca}, {@code verify-full}.",
                "+   * If {@code ssl} property is empty or set to {@code true} it implies {@code verify-full}.",
                "+   * Default mode is \"require\"",
                "    */",
                "-  SSL_MODE(\"sslmode\", null, \"Parameter governing the use of SSL\",false,",
                "-      \"disable\", \"require\", \"verify-ca\", \"verify-full\"),",
                "+  SSL_MODE(\"sslmode\", null, \"Parameter governing the use of SSL\", false,",
                "+      \"disable\", \"allow\", \"prefer\", \"require\", \"verify-ca\", \"verify-full\"),",
                "@@ -194,3 +195,5 @@ public enum PGProperty {",
                "    * The String argument to give to the constructor of the SSL Factory.",
                "+   * @deprecated use {@code ..Factory(Properties)} constructor.",
                "    */",
                "+  @Deprecated",
                "   SSL_FACTORY_ARG(\"sslfactoryarg\", null,",
                "@@ -281,3 +284,5 @@ public enum PGProperty {",
                "    * The String argument to give to the constructor of the Socket Factory.",
                "+   * @deprecated use {@code ..Factory(Properties)} constructor.",
                "    */",
                "+  @Deprecated",
                "   SOCKET_FACTORY_ARG(\"socketFactoryArg\", null,",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/core/PGStream.java b/pgjdbc/src/main/java/org/postgresql/core/PGStream.java",
                "index 63065730..6f0f3a2b 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/core/PGStream.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/core/PGStream.java",
                "@@ -23,2 +23,3 @@ import java.net.InetSocketAddress;",
                " import java.net.Socket;",
                "+import java.net.SocketTimeoutException;",
                " import java.sql.SQLException;",
                "@@ -111,3 +112,15 @@ public class PGStream implements Closeable, Flushable {",
                "   public boolean hasMessagePending() throws IOException {",
                "-    return pg_input.available() > 0 || connection.getInputStream().available() > 0;",
                "+    if (pg_input.available() > 0) {",
                "+      return true;",
                "+    }",
                "+    // In certain cases, available returns 0, yet there are bytes",
                "+    int soTimeout = getNetworkTimeout();",
                "+    setNetworkTimeout(1);",
                "+    try {",
                "+      return pg_input.peek() != -1;",
                "+    } catch (SocketTimeoutException e) {",
                "+      return false;",
                "+    } finally {",
                "+      setNetworkTimeout(soTimeout);",
                "+    }",
                "   }",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/core/SocketFactoryFactory.java b/pgjdbc/src/main/java/org/postgresql/core/SocketFactoryFactory.java",
                "index e7cfd326..09efa75f 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/core/SocketFactoryFactory.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/core/SocketFactoryFactory.java",
                "@@ -8,2 +8,3 @@ package org.postgresql.core;",
                " import org.postgresql.PGProperty;",
                "+import org.postgresql.ssl.LibPQFactory;",
                " import org.postgresql.util.GT;",
                "@@ -16,2 +17,3 @@ import java.util.Properties;",
                " import javax.net.SocketFactory;",
                "+import javax.net.ssl.SSLSocketFactory;",
                "@@ -46,2 +48,26 @@ public class SocketFactoryFactory {",
                "+  /**",
                "+   * Instantiates {@link SSLSocketFactory} based on the {@link PGProperty#SSL_FACTORY}.",
                "+   *",
                "+   * @param info connection properties",
                "+   * @return SSL socket factory",
                "+   * @throws PSQLException if something goes wrong",
                "+   */",
                "+  public static SSLSocketFactory getSslSocketFactory(Properties info) throws PSQLException {",
                "+    String classname = PGProperty.SSL_FACTORY.get(info);",
                "+    if (classname == null",
                "+        || \"org.postgresql.ssl.jdbc4.LibPQFactory\".equals(classname)",
                "+        || \"org.postgresql.ssl.LibPQFactory\".equals(classname)) {",
                "+      return new LibPQFactory(info);",
                "+    }",
                "+    try {",
                "+      return (SSLSocketFactory) ObjectFactory.instantiate(classname, info, true,",
                "+          PGProperty.SSL_FACTORY_ARG.get(info));",
                "+    } catch (Exception e) {",
                "+      throw new PSQLException(",
                "+          GT.tr(\"The SSLSocketFactory class provided {0} could not be instantiated.\", classname),",
                "+          PSQLState.CONNECTION_FAILURE, e);",
                "+    }",
                "+  }",
                "+",
                " }",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java b/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
                "index 749af958..c83ce34c 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
                "@@ -23,2 +23,3 @@ import org.postgresql.hostchooser.HostRequirement;",
                " import org.postgresql.hostchooser.HostStatus;",
                "+import org.postgresql.jdbc.SslMode;",
                " import org.postgresql.sspi.ISSPIClient;",
                "@@ -44,3 +45,2 @@ import java.util.logging.LogRecord;",
                " import java.util.logging.Logger;",
                "-",
                " import javax.net.SocketFactory;",
                "@@ -84,22 +84,36 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "-  @Override",
                "-  public QueryExecutor openConnectionImpl(HostSpec[] hostSpecs, String user, String database,",
                "-      Properties info) throws SQLException {",
                "-    // Extract interesting values from the info properties:",
                "-    // - the SSL setting",
                "-    boolean requireSSL;",
                "-    boolean trySSL;",
                "-    String sslmode = PGProperty.SSL_MODE.get(info);",
                "-    if (sslmode == null) { // Fall back to the ssl property",
                "-      // assume \"true\" if the property is set but empty",
                "-      requireSSL = trySSL = PGProperty.SSL.getBoolean(info) || \"\".equals(PGProperty.SSL.get(info));",
                "-    } else {",
                "-      if (\"disable\".equals(sslmode)) {",
                "-        requireSSL = trySSL = false;",
                "-      } else if (\"require\".equals(sslmode) || \"verify-ca\".equals(sslmode)",
                "-          || \"verify-full\".equals(sslmode)) {",
                "-        requireSSL = trySSL = true;",
                "+  private PGStream tryConnect(String user, String database,",
                "+      Properties info, SocketFactory socketFactory, HostSpec hostSpec,",
                "+      SslMode sslMode)",
                "+      throws SQLException, IOException {",
                "+    int connectTimeout = PGProperty.CONNECT_TIMEOUT.getInt(info) * 1000;",
                "+",
                "+    PGStream newStream = new PGStream(socketFactory, hostSpec, connectTimeout);",
                "+",
                "+    // Construct and send an ssl startup packet if requested.",
                "+    newStream = enableSSL(newStream, sslMode, info, connectTimeout);",
                "+",
                "+    // Set the socket timeout if the \"socketTimeout\" property has been set.",
                "+    int socketTimeout = PGProperty.SOCKET_TIMEOUT.getInt(info);",
                "+    if (socketTimeout > 0) {",
                "+      newStream.getSocket().setSoTimeout(socketTimeout * 1000);",
                "+    }",
                "+",
                "+    // Enable TCP keep-alive probe if required.",
                "+    boolean requireTCPKeepAlive = PGProperty.TCP_KEEP_ALIVE.getBoolean(info);",
                "+    newStream.getSocket().setKeepAlive(requireTCPKeepAlive);",
                "+",
                "+    // Try to set SO_SNDBUF and SO_RECVBUF socket options, if requested.",
                "+    // If receiveBufferSize and send_buffer_size are set to a value greater",
                "+    // than 0, adjust. -1 means use the system default, 0 is ignored since not",
                "+    // supported.",
                "+",
                "+    // Set SO_RECVBUF read buffer size",
                "+    int receiveBufferSize = PGProperty.RECEIVE_BUFFER_SIZE.getInt(info);",
                "+    if (receiveBufferSize > -1) {",
                "+      // value of 0 not a valid buffer size value",
                "+      if (receiveBufferSize > 0) {",
                "+        newStream.getSocket().setReceiveBufferSize(receiveBufferSize);",
                "       } else {",
                "-        throw new PSQLException(GT.tr(\"Invalid sslmode value: {0}\", sslmode),",
                "-            PSQLState.CONNECTION_UNABLE_TO_CONNECT);",
                "+        LOGGER.log(Level.WARNING, \"Ignore invalid value for receiveBufferSize: {0}\", receiveBufferSize);",
                "       }",
                "@@ -107,5 +121,30 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "-    boolean requireTCPKeepAlive = PGProperty.TCP_KEEP_ALIVE.getBoolean(info);",
                "+    // Set SO_SNDBUF write buffer size",
                "+    int sendBufferSize = PGProperty.SEND_BUFFER_SIZE.getInt(info);",
                "+    if (sendBufferSize > -1) {",
                "+      if (sendBufferSize > 0) {",
                "+        newStream.getSocket().setSendBufferSize(sendBufferSize);",
                "+      } else {",
                "+        LOGGER.log(Level.WARNING, \"Ignore invalid value for sendBufferSize: {0}\", sendBufferSize);",
                "+      }",
                "+    }",
                "-    int connectTimeout = PGProperty.CONNECT_TIMEOUT.getInt(info) * 1000;",
                "+    if (LOGGER.isLoggable(Level.FINE)) {",
                "+      LOGGER.log(Level.FINE, \"Receive Buffer Size is {0}\", newStream.getSocket().getReceiveBufferSize());",
                "+      LOGGER.log(Level.FINE, \"Send Buffer Size is {0}\", newStream.getSocket().getSendBufferSize());",
                "+    }",
                "+",
                "+    List<String[]> paramList = getParametersForStartup(user, database, info);",
                "+    sendStartupPacket(newStream, paramList);",
                "+",
                "+    // Do authentication (until AuthenticationOk).",
                "+    doAuthentication(newStream, hostSpec.getHost(), user, info);",
                "+",
                "+    return newStream;",
                "+  }",
                "+",
                "+  @Override",
                "+  public QueryExecutor openConnectionImpl(HostSpec[] hostSpecs, String user, String database,",
                "+      Properties info) throws SQLException {",
                "+    SslMode sslMode = SslMode.of(info);",
                "@@ -151,41 +190,55 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "       try {",
                "-        newStream = new PGStream(socketFactory, hostSpec, connectTimeout);",
                "-",
                "-        // Construct and send an ssl startup packet if requested.",
                "-        if (trySSL) {",
                "-          newStream = enableSSL(newStream, requireSSL, info, connectTimeout);",
                "-        }",
                "-",
                "-        // Set the socket timeout if the \"socketTimeout\" property has been set.",
                "-        int socketTimeout = PGProperty.SOCKET_TIMEOUT.getInt(info);",
                "-        if (socketTimeout > 0) {",
                "-          newStream.getSocket().setSoTimeout(socketTimeout * 1000);",
                "-        }",
                "-",
                "-        // Enable TCP keep-alive probe if required.",
                "-        newStream.getSocket().setKeepAlive(requireTCPKeepAlive);",
                "-",
                "-        // Try to set SO_SNDBUF and SO_RECVBUF socket options, if requested.",
                "-        // If receiveBufferSize and send_buffer_size are set to a value greater",
                "-        // than 0, adjust. -1 means use the system default, 0 is ignored since not",
                "-        // supported.",
                "-",
                "-        // Set SO_RECVBUF read buffer size",
                "-        int receiveBufferSize = PGProperty.RECEIVE_BUFFER_SIZE.getInt(info);",
                "-        if (receiveBufferSize > -1) {",
                "-          // value of 0 not a valid buffer size value",
                "-          if (receiveBufferSize > 0) {",
                "-            newStream.getSocket().setReceiveBufferSize(receiveBufferSize);",
                "-          } else {",
                "-            LOGGER.log(Level.WARNING, \"Ignore invalid value for receiveBufferSize: {0}\", receiveBufferSize);",
                "-          }",
                "-        }",
                "+        try {",
                "+          newStream = tryConnect(user, database, info, socketFactory, hostSpec, sslMode);",
                "+        } catch (SQLException e) {",
                "+          if (sslMode == SslMode.PREFER",
                "+              && PSQLState.INVALID_AUTHORIZATION_SPECIFICATION.getState().equals(e.getSQLState())) {",
                "+            // Try non-SSL connection to cover case like \"non-ssl only db\"",
                "+            // Note: PREFER allows loss of encryption, so no significant harm is made",
                "+            Throwable ex = null;",
                "+            try {",
                "+              newStream =",
                "+                  tryConnect(user, database, info, socketFactory, hostSpec, SslMode.DISABLE);",
                "+              LOGGER.log(Level.FINE, \"Downgraded to non-encrypted connection for host {0}\",",
                "+                  hostSpec);",
                "+            } catch (SQLException ee) {",
                "+              ex = ee;",
                "+            } catch (IOException ee) {",
                "+              ex = ee; // Can't use multi-catch in Java 6 :(",
                "+            }",
                "+            if (ex != null) {",
                "+              log(Level.FINE, \"sslMode==PREFER, however non-SSL connection failed as well\", ex);",
                "+              // non-SSL failed as well, so re-throw original exception",
                "+              //#if mvn.project.property.postgresql.jdbc.spec >= \"JDBC4.1\"",
                "+              // Add non-SSL exception as suppressed",
                "+              e.addSuppressed(ex);",
                "+              //#endif",
                "+              throw e;",
                "+            }",
                "+          } else if (sslMode == SslMode.ALLOW",
                "+              && PSQLState.INVALID_AUTHORIZATION_SPECIFICATION.getState().equals(e.getSQLState())) {",
                "+            // Try using SSL",
                "+            Throwable ex = null;",
                "+            try {",
                "+              newStream =",
                "+                  tryConnect(user, database, info, socketFactory, hostSpec, SslMode.REQUIRE);",
                "+              LOGGER.log(Level.FINE, \"Upgraded to encrypted connection for host {0}\",",
                "+                  hostSpec);",
                "+            } catch (SQLException ee) {",
                "+              ex = ee;",
                "+            } catch (IOException ee) {",
                "+              ex = ee; // Can't use multi-catch in Java 6 :(",
                "+            }",
                "+            if (ex != null) {",
                "+              log(Level.FINE, \"sslMode==ALLOW, however SSL connection failed as well\", ex);",
                "+              // non-SSL failed as well, so re-throw original exception",
                "+              //#if mvn.project.property.postgresql.jdbc.spec >= \"JDBC4.1\"",
                "+              // Add SSL exception as suppressed",
                "+              e.addSuppressed(ex);",
                "+              //#endif",
                "+              throw e;",
                "+            }",
                "-        // Set SO_SNDBUF write buffer size",
                "-        int sendBufferSize = PGProperty.SEND_BUFFER_SIZE.getInt(info);",
                "-        if (sendBufferSize > -1) {",
                "-          if (sendBufferSize > 0) {",
                "-            newStream.getSocket().setSendBufferSize(sendBufferSize);",
                "           } else {",
                "-            LOGGER.log(Level.WARNING, \"Ignore invalid value for sendBufferSize: {0}\", sendBufferSize);",
                "+            throw e;",
                "           }",
                "@@ -193,13 +246,2 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "-        if (LOGGER.isLoggable(Level.FINE)) {",
                "-          LOGGER.log(Level.FINE, \"Receive Buffer Size is {0}\", newStream.getSocket().getReceiveBufferSize());",
                "-          LOGGER.log(Level.FINE, \"Send Buffer Size is {0}\", newStream.getSocket().getSendBufferSize());",
                "-        }",
                "-",
                "-        List<String[]> paramList = getParametersForStartup(user, database, info);",
                "-        sendStartupPacket(newStream, paramList);",
                "-",
                "-        // Do authentication (until AuthenticationOk).",
                "-        doAuthentication(newStream, hostSpec.getHost(), user, info);",
                "-",
                "         int cancelSignalTimeout = PGProperty.CANCEL_SIGNAL_TIMEOUT.getInt(info) * 1000;",
                "@@ -232,4 +274,4 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "         knownStates.put(hostSpec, HostStatus.ConnectFail);",
                "-        log(Level.FINE, \"ConnectException occurred while connecting to {0}\", cex, hostSpec);",
                "         if (hostIter.hasNext()) {",
                "+          log(Level.FINE, \"ConnectException occurred while connecting to {0}\", cex, hostSpec);",
                "           // still more addresses to try",
                "@@ -244,4 +286,4 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "         knownStates.put(hostSpec, HostStatus.ConnectFail);",
                "-        log(Level.FINE, \"IOException occurred while connecting to {0}\", ioe, hostSpec);",
                "         if (hostIter.hasNext()) {",
                "+          log(Level.FINE, \"IOException occurred while connecting to {0}\", ioe, hostSpec);",
                "           // still more addresses to try",
                "@@ -253,3 +295,2 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "         closeStream(newStream);",
                "-        log(Level.FINE, \"SQLException occurred while connecting to {0}\", se, hostSpec);",
                "         GlobalHostStatusTracker.reportHostStatus(hostSpec, HostStatus.ConnectFail);",
                "@@ -257,2 +298,3 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "         if (hostIter.hasNext()) {",
                "+          log(Level.FINE, \"SQLException occurred while connecting to {0}\", se, hostSpec);",
                "           // still more addresses to try",
                "@@ -342,4 +384,13 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "-  private PGStream enableSSL(PGStream pgStream, boolean requireSSL, Properties info, int connectTimeout)",
                "-      throws IOException, SQLException {",
                "+  private PGStream enableSSL(PGStream pgStream, SslMode sslMode, Properties info,",
                "+      int connectTimeout)",
                "+      throws IOException, PSQLException {",
                "+    if (sslMode == SslMode.DISABLE) {",
                "+      return pgStream;",
                "+    }",
                "+    if (sslMode == SslMode.ALLOW) {",
                "+      // Allow ==> start with plaintext, use encryption if required by server",
                "+      return pgStream;",
                "+    }",
                "+",
                "     LOGGER.log(Level.FINEST, \" FE=> SSLRequest\");",
                "@@ -359,3 +410,3 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "         // Server doesn't even know about the SSL handshake protocol",
                "-        if (requireSSL) {",
                "+        if (sslMode.requireEncryption()) {",
                "           throw new PSQLException(GT.tr(\"The server does not support SSL.\"),",
                "@@ -372,3 +423,3 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "         // Server does not support ssl",
                "-        if (requireSSL) {",
                "+        if (sslMode.requireEncryption()) {",
                "           throw new PSQLException(GT.tr(\"The server does not support SSL.\"),",
                "@@ -610,4 +661,7 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "                 scramAuthenticator.sendScramClientFirstMessage();",
                "-                //#else",
                "-                if (true) {",
                "+                // This works as follows:",
                "+                // 1. When tests is run from IDE, it is assumed SCRAM library is on the classpath",
                "+                // 2. In regular build for Java < 8 this `if` is deactivated and the code always throws",
                "+                if (false) {",
                "+                  //#else",
                "                   throw new PSQLException(GT.tr(",
                "@@ -615,5 +669,7 @@ public class ConnectionFactoryImpl extends ConnectionFactory {",
                "                           areq), PSQLState.CONNECTION_REJECTED);",
                "+                  //#endif",
                "+                  //#if mvn.project.property.postgresql.jdbc.spec >= \"JDBC4.2\"",
                "                 }",
                "-                //#endif",
                "                 break;",
                "+                //#endif",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java b/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java",
                "index 387a9ac1..4dc7f940 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java",
                "@@ -694,3 +694,3 @@ public class QueryExecutorImpl extends QueryExecutorBase {",
                "     try {",
                "-      while (pgStream.hasMessagePending() || timeoutMillis >= 0 ) {",
                "+      while (timeoutMillis >= 0 || pgStream.hasMessagePending()) {",
                "         if (useTimeout && timeoutMillis >= 0) {",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/jdbc/SslMode.java b/pgjdbc/src/main/java/org/postgresql/jdbc/SslMode.java",
                "new file mode 100644",
                "index 00000000..bd2a3d0b",
                "--- /dev/null",
                "+++ b/pgjdbc/src/main/java/org/postgresql/jdbc/SslMode.java",
                "@@ -0,0 +1,81 @@",
                "+/*",
                "+ * Copyright (c) 2018, PostgreSQL Global Development Group",
                "+ * See the LICENSE file in the project root for more information.",
                "+ */",
                "+",
                "+package org.postgresql.jdbc;",
                "+",
                "+import org.postgresql.PGProperty;",
                "+import org.postgresql.util.GT;",
                "+import org.postgresql.util.PSQLException;",
                "+import org.postgresql.util.PSQLState;",
                "+",
                "+import java.util.Properties;",
                "+",
                "+public enum SslMode {",
                "+  /**",
                "+   * Do not use encrypted connections.",
                "+   */",
                "+  DISABLE(\"disable\"),",
                "+  /**",
                "+   * Start with non-encrypted connection, then try encrypted one.",
                "+   */",
                "+  ALLOW(\"allow\"),",
                "+  /**",
                "+   * Start with encrypted connection, fallback to non-encrypted (default).",
                "+   */",
                "+  PREFER(\"prefer\"),",
                "+  /**",
                "+   * Ensure connection is encrypted.",
                "+   */",
                "+  REQUIRE(\"require\"),",
                "+  /**",
                "+   * Ensure connection is encrypted, and client trusts server certificate.",
                "+   */",
                "+  VERIFY_CA(\"verify-ca\"),",
                "+  /**",
                "+   * Ensure connection is encrypted, client trusts server certificate, and server hostname matches",
                "+   * the one listed in the server certificate.",
                "+   */",
                "+  VERIFY_FULL(\"verify-full\"),",
                "+  ;",
                "+",
                "+  public static final SslMode[] VALUES = values();",
                "+",
                "+  public final String value;",
                "+",
                "+  SslMode(String value) {",
                "+    this.value = value;",
                "+  }",
                "+",
                "+  public boolean requireEncryption() {",
                "+    return this.compareTo(REQUIRE) >= 0;",
                "+  }",
                "+",
                "+  public boolean verifyCertificate() {",
                "+    return this == VERIFY_CA || this == VERIFY_FULL;",
                "+  }",
                "+",
                "+  public boolean verifyPeerName() {",
                "+    return this == VERIFY_FULL;",
                "+  }",
                "+",
                "+  public static SslMode of(Properties info) throws PSQLException {",
                "+    String sslmode = PGProperty.SSL_MODE.get(info);",
                "+    // If sslmode is not set, fallback to ssl parameter",
                "+    if (sslmode == null) {",
                "+      if (PGProperty.SSL.getBoolean(info) || \"\".equals(PGProperty.SSL.get(info))) {",
                "+        return VERIFY_FULL;",
                "+      }",
                "+      return PREFER;",
                "+    }",
                "+",
                "+    for (SslMode sslMode : VALUES) {",
                "+      if (sslMode.value.equalsIgnoreCase(sslmode)) {",
                "+        return sslMode;",
                "+      }",
                "+    }",
                "+    throw new PSQLException(GT.tr(\"Invalid sslmode value: {0}\", sslmode),",
                "+        PSQLState.CONNECTION_UNABLE_TO_CONNECT);",
                "+  }",
                "+}",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/ssl/DefaultJavaSSLFactory.java b/pgjdbc/src/main/java/org/postgresql/ssl/DefaultJavaSSLFactory.java",
                "new file mode 100644",
                "index 00000000..9757827e",
                "--- /dev/null",
                "+++ b/pgjdbc/src/main/java/org/postgresql/ssl/DefaultJavaSSLFactory.java",
                "@@ -0,0 +1,20 @@",
                "+/*",
                "+ * Copyright (c) 2017, PostgreSQL Global Development Group",
                "+ * See the LICENSE file in the project root for more information.",
                "+ */",
                "+",
                "+package org.postgresql.ssl;",
                "+",
                "+import java.util.Properties;",
                "+import javax.net.ssl.SSLSocketFactory;",
                "+",
                "+/**",
                "+ * Socket factory that uses Java's default truststore to validate server certificate.",
                "+ * Note: it always validates server certificate, so it might result to downgrade to non-encrypted",
                "+ * connection when default truststore lacks certificates to validate server.",
                "+ */",
                "+public class DefaultJavaSSLFactory extends WrappedFactory {",
                "+  public DefaultJavaSSLFactory(Properties info) {",
                "+    _factory = (SSLSocketFactory) SSLSocketFactory.getDefault();",
                "+  }",
                "+}",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/ssl/LazyKeyManager.java b/pgjdbc/src/main/java/org/postgresql/ssl/LazyKeyManager.java",
                "new file mode 100644",
                "index 00000000..be4db415",
                "--- /dev/null",
                "+++ b/pgjdbc/src/main/java/org/postgresql/ssl/LazyKeyManager.java",
                "@@ -0,0 +1,266 @@",
                "+/*",
                "+ * Copyright (c) 2004, PostgreSQL Global Development Group",
                "+ * See the LICENSE file in the project root for more information.",
                "+ */",
                "+",
                "+package org.postgresql.ssl;",
                "+",
                "+import org.postgresql.util.GT;",
                "+import org.postgresql.util.PSQLException;",
                "+import org.postgresql.util.PSQLState;",
                "+",
                "+import java.io.File;",
                "+import java.io.FileInputStream;",
                "+import java.io.FileNotFoundException;",
                "+import java.io.IOException;",
                "+import java.io.RandomAccessFile;",
                "+import java.net.Socket;",
                "+import java.security.AlgorithmParameters;",
                "+import java.security.GeneralSecurityException;",
                "+import java.security.Key;",
                "+import java.security.KeyFactory;",
                "+import java.security.NoSuchAlgorithmException;",
                "+import java.security.Principal;",
                "+import java.security.PrivateKey;",
                "+import java.security.cert.Certificate;",
                "+import java.security.cert.CertificateException;",
                "+import java.security.cert.CertificateFactory;",
                "+import java.security.cert.X509Certificate;",
                "+import java.security.spec.InvalidKeySpecException;",
                "+import java.security.spec.KeySpec;",
                "+import java.security.spec.PKCS8EncodedKeySpec;",
                "+import java.util.Collection;",
                "+",
                "+import javax.crypto.Cipher;",
                "+import javax.crypto.EncryptedPrivateKeyInfo;",
                "+import javax.crypto.NoSuchPaddingException;",
                "+import javax.crypto.SecretKeyFactory;",
                "+import javax.crypto.spec.PBEKeySpec;",
                "+import javax.net.ssl.X509KeyManager;",
                "+import javax.security.auth.callback.Callback;",
                "+import javax.security.auth.callback.CallbackHandler;",
                "+import javax.security.auth.callback.PasswordCallback;",
                "+import javax.security.auth.callback.UnsupportedCallbackException;",
                "+import javax.security.auth.x500.X500Principal;",
                "+",
                "+/**",
                "+ * A Key manager that only loads the keys, if necessary.",
                "+ */",
                "+public class LazyKeyManager implements X509KeyManager {",
                "+  private X509Certificate[] cert = null;",
                "+  private PrivateKey key = null;",
                "+  private String certfile;",
                "+  private String keyfile;",
                "+  private CallbackHandler cbh;",
                "+  private boolean defaultfile;",
                "+  private PSQLException error = null;",
                "+",
                "+  /**",
                "+   * Constructor. certfile and keyfile can be null, in that case no certificate is presented to the",
                "+   * server.",
                "+   *",
                "+   * @param certfile certfile",
                "+   * @param keyfile key file",
                "+   * @param cbh callback handler",
                "+   * @param defaultfile default file",
                "+   */",
                "+  public LazyKeyManager(String certfile, String keyfile, CallbackHandler cbh, boolean defaultfile) {",
                "+    this.certfile = certfile;",
                "+    this.keyfile = keyfile;",
                "+    this.cbh = cbh;",
                "+    this.defaultfile = defaultfile;",
                "+  }",
                "+",
                "+  /**",
                "+   * getCertificateChain and getPrivateKey cannot throw exeptions, therefore any exception is stored",
                "+   * in {@link #error} and can be raised by this method.",
                "+   *",
                "+   * @throws PSQLException if any exception is stored in {@link #error} and can be raised",
                "+   */",
                "+  public void throwKeyManagerException() throws PSQLException {",
                "+    if (error != null) {",
                "+      throw error;",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {",
                "+    if (certfile == null) {",
                "+      return null;",
                "+    } else {",
                "+      if (issuers == null || issuers.length == 0) {",
                "+        // Postgres 8.4 and earlier do not send the list of accepted certificate authorities",
                "+        // to the client. See BUG #5468. We only hope, that our certificate will be accepted.",
                "+        return \"user\";",
                "+      } else {",
                "+        // Sending a wrong certificate makes the connection rejected, even, if clientcert=0 in",
                "+        // pg_hba.conf.",
                "+        // therefore we only send our certificate, if the issuer is listed in issuers",
                "+        X509Certificate[] certchain = getCertificateChain(\"user\");",
                "+        if (certchain == null) {",
                "+          return null;",
                "+        } else {",
                "+          X500Principal ourissuer = certchain[certchain.length - 1].getIssuerX500Principal();",
                "+          boolean found = false;",
                "+          for (Principal issuer : issuers) {",
                "+            if (ourissuer.equals(issuer)) {",
                "+              found = true;",
                "+            }",
                "+          }",
                "+          return (found ? \"user\" : null);",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {",
                "+    return null; // We are not a server",
                "+  }",
                "+",
                "+  @Override",
                "+  public X509Certificate[] getCertificateChain(String alias) {",
                "+    if (cert == null && certfile != null) {",
                "+      // If certfile is null, we do not load the certificate",
                "+      // The certificate must be loaded",
                "+      CertificateFactory cf;",
                "+      try {",
                "+        cf = CertificateFactory.getInstance(\"X.509\");",
                "+      } catch (CertificateException ex) {",
                "+        // For some strange reason it throws CertificateException instead of",
                "+        // NoSuchAlgorithmException...",
                "+        error = new PSQLException(GT.tr(",
                "+            \"Could not find a java cryptographic algorithm: X.509 CertificateFactory not available.\"),",
                "+            PSQLState.CONNECTION_FAILURE, ex);",
                "+        return null;",
                "+      }",
                "+      Collection<? extends Certificate> certs;",
                "+      try {",
                "+        certs = cf.generateCertificates(new FileInputStream(certfile));",
                "+      } catch (FileNotFoundException ioex) {",
                "+        if (!defaultfile) { // It is not an error if there is no file at the default location",
                "+          error = new PSQLException(",
                "+              GT.tr(\"Could not open SSL certificate file {0}.\", certfile),",
                "+              PSQLState.CONNECTION_FAILURE, ioex);",
                "+        }",
                "+        return null;",
                "+      } catch (CertificateException gsex) {",
                "+        error = new PSQLException(GT.tr(\"Loading the SSL certificate {0} into a KeyManager failed.\",",
                "+            certfile), PSQLState.CONNECTION_FAILURE, gsex);",
                "+        return null;",
                "+      }",
                "+      cert = certs.toArray(new X509Certificate[certs.size()]);",
                "+    }",
                "+    return cert;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String[] getClientAliases(String keyType, Principal[] issuers) {",
                "+    String alias = chooseClientAlias(new String[]{keyType}, issuers, (Socket) null);",
                "+    return (alias == null ? new String[]{} : new String[]{alias});",
                "+  }",
                "+",
                "+  @Override",
                "+  public PrivateKey getPrivateKey(String alias) {",
                "+    RandomAccessFile raf = null;",
                "+    try {",
                "+      if (key == null && keyfile != null) {",
                "+        // If keyfile is null, we do not load the key",
                "+        // The private key must be loaded",
                "+        if (cert == null) { // We need the certificate for the algorithm",
                "+          if (getCertificateChain(\"user\") == null) {",
                "+            return null; // getCertificateChain failed...",
                "+          }",
                "+        }",
                "+",
                "+        try {",
                "+          raf = new RandomAccessFile(new File(keyfile), \"r\"); // NOSONAR",
                "+        } catch (FileNotFoundException ex) {",
                "+          if (!defaultfile) {",
                "+            // It is not an error if there is no file at the default location",
                "+            throw ex;",
                "+          }",
                "+          return null;",
                "+        }",
                "+        byte[] keydata = new byte[(int) raf.length()];",
                "+        raf.readFully(keydata);",
                "+        raf.close();",
                "+        raf = null;",
                "+",
                "+        KeyFactory kf = KeyFactory.getInstance(cert[0].getPublicKey().getAlgorithm());",
                "+        try {",
                "+          KeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keydata);",
                "+          key = kf.generatePrivate(pkcs8KeySpec);",
                "+        } catch (InvalidKeySpecException ex) {",
                "+          // The key might be password protected",
                "+          EncryptedPrivateKeyInfo ePKInfo = new EncryptedPrivateKeyInfo(keydata);",
                "+          Cipher cipher;",
                "+          try {",
                "+            cipher = Cipher.getInstance(ePKInfo.getAlgName());",
                "+          } catch (NoSuchPaddingException npex) {",
                "+            // Why is it not a subclass of NoSuchAlgorithmException?",
                "+            throw new NoSuchAlgorithmException(npex.getMessage(), npex);",
                "+          }",
                "+          // We call back for the password",
                "+          PasswordCallback pwdcb = new PasswordCallback(GT.tr(\"Enter SSL password: \"), false);",
                "+          try {",
                "+            cbh.handle(new Callback[]{pwdcb});",
                "+          } catch (UnsupportedCallbackException ucex) {",
                "+            if ((cbh instanceof LibPQFactory.ConsoleCallbackHandler)",
                "+                && (\"Console is not available\".equals(ucex.getMessage()))) {",
                "+              error = new PSQLException(GT",
                "+                  .tr(\"Could not read password for SSL key file, console is not available.\"),",
                "+                  PSQLState.CONNECTION_FAILURE, ucex);",
                "+            } else {",
                "+              error =",
                "+                  new PSQLException(",
                "+                      GT.tr(\"Could not read password for SSL key file by callbackhandler {0}.\",",
                "+                              cbh.getClass().getName()),",
                "+                      PSQLState.CONNECTION_FAILURE, ucex);",
                "+            }",
                "+            return null;",
                "+          }",
                "+          try {",
                "+            PBEKeySpec pbeKeySpec = new PBEKeySpec(pwdcb.getPassword());",
                "+            pwdcb.clearPassword();",
                "+            // Now create the Key from the PBEKeySpec",
                "+            SecretKeyFactory skFac = SecretKeyFactory.getInstance(ePKInfo.getAlgName());",
                "+            Key pbeKey = skFac.generateSecret(pbeKeySpec);",
                "+            // Extract the iteration count and the salt",
                "+            AlgorithmParameters algParams = ePKInfo.getAlgParameters();",
                "+            cipher.init(Cipher.DECRYPT_MODE, pbeKey, algParams);",
                "+            // Decrypt the encryped private key into a PKCS8EncodedKeySpec",
                "+            KeySpec pkcs8KeySpec = ePKInfo.getKeySpec(cipher);",
                "+            key = kf.generatePrivate(pkcs8KeySpec);",
                "+          } catch (GeneralSecurityException ikex) {",
                "+            error = new PSQLException(",
                "+                GT.tr(\"Could not decrypt SSL key file {0}.\", keyfile),",
                "+                PSQLState.CONNECTION_FAILURE, ikex);",
                "+            return null;",
                "+          }",
                "+        }",
                "+      }",
                "+    } catch (IOException ioex) {",
                "+      if (raf != null) {",
                "+        try {",
                "+          raf.close();",
                "+        } catch (IOException ex) {",
                "+        }",
                "+      }",
                "+",
                "+      error = new PSQLException(GT.tr(\"Could not read SSL key file {0}.\", keyfile),",
                "+          PSQLState.CONNECTION_FAILURE, ioex);",
                "+    } catch (NoSuchAlgorithmException ex) {",
                "+      error = new PSQLException(GT.tr(\"Could not find a java cryptographic algorithm: {0}.\",",
                "+              ex.getMessage()), PSQLState.CONNECTION_FAILURE, ex);",
                "+      return null;",
                "+    }",
                "+",
                "+    return key;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String[] getServerAliases(String keyType, Principal[] issuers) {",
                "+    return new String[]{};",
                "+  }",
                "+}",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/ssl/LibPQFactory.java b/pgjdbc/src/main/java/org/postgresql/ssl/LibPQFactory.java",
                "new file mode 100644",
                "index 00000000..c0c34bd2",
                "--- /dev/null",
                "+++ b/pgjdbc/src/main/java/org/postgresql/ssl/LibPQFactory.java",
                "@@ -0,0 +1,220 @@",
                "+/*",
                "+ * Copyright (c) 2004, PostgreSQL Global Development Group",
                "+ * See the LICENSE file in the project root for more information.",
                "+ */",
                "+",
                "+package org.postgresql.ssl;",
                "+",
                "+import org.postgresql.PGProperty;",
                "+import org.postgresql.jdbc.SslMode;",
                "+import org.postgresql.ssl.NonValidatingFactory.NonValidatingTM;",
                "+import org.postgresql.util.GT;",
                "+import org.postgresql.util.ObjectFactory;",
                "+import org.postgresql.util.PSQLException;",
                "+import org.postgresql.util.PSQLState;",
                "+",
                "+import java.io.Console;",
                "+import java.io.FileInputStream;",
                "+import java.io.FileNotFoundException;",
                "+import java.io.IOException;",
                "+import java.security.GeneralSecurityException;",
                "+import java.security.KeyManagementException;",
                "+import java.security.KeyStore;",
                "+import java.security.KeyStoreException;",
                "+import java.security.NoSuchAlgorithmException;",
                "+import java.security.cert.Certificate;",
                "+import java.security.cert.CertificateFactory;",
                "+import java.util.Properties;",
                "+import javax.net.ssl.KeyManager;",
                "+import javax.net.ssl.SSLContext;",
                "+import javax.net.ssl.TrustManager;",
                "+import javax.net.ssl.TrustManagerFactory;",
                "+import javax.security.auth.callback.Callback;",
                "+import javax.security.auth.callback.CallbackHandler;",
                "+import javax.security.auth.callback.PasswordCallback;",
                "+import javax.security.auth.callback.UnsupportedCallbackException;",
                "+",
                "+/**",
                "+ * Provide an SSLSocketFactory that is compatible with the libpq behaviour.",
                "+ */",
                "+public class LibPQFactory extends WrappedFactory {",
                "+",
                "+  LazyKeyManager km;",
                "+",
                "+  /**",
                "+   * @param info the connection parameters The following parameters are used:",
                "+   *        sslmode,sslcert,sslkey,sslrootcert,sslhostnameverifier,sslpasswordcallback,sslpassword",
                "+   * @throws PSQLException if security error appears when initializing factory",
                "+   */",
                "+  public LibPQFactory(Properties info) throws PSQLException {",
                "+    try {",
                "+      SSLContext ctx = SSLContext.getInstance(\"TLS\"); // or \"SSL\" ?",
                "+",
                "+      // Determining the default file location",
                "+      String pathsep = System.getProperty(\"file.separator\");",
                "+      String defaultdir;",
                "+      boolean defaultfile = false;",
                "+      if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) { // It is Windows",
                "+        defaultdir = System.getenv(\"APPDATA\") + pathsep + \"postgresql\" + pathsep;",
                "+      } else {",
                "+        defaultdir = System.getProperty(\"user.home\") + pathsep + \".postgresql\" + pathsep;",
                "+      }",
                "+",
                "+      // Load the client's certificate and key",
                "+      String sslcertfile = PGProperty.SSL_CERT.get(info);",
                "+      if (sslcertfile == null) { // Fall back to default",
                "+        defaultfile = true;",
                "+        sslcertfile = defaultdir + \"postgresql.crt\";",
                "+      }",
                "+      String sslkeyfile = PGProperty.SSL_KEY.get(info);",
                "+      if (sslkeyfile == null) { // Fall back to default",
                "+        defaultfile = true;",
                "+        sslkeyfile = defaultdir + \"postgresql.pk8\";",
                "+      }",
                "+",
                "+      // Determine the callback handler",
                "+      CallbackHandler cbh;",
                "+      String sslpasswordcallback = PGProperty.SSL_PASSWORD_CALLBACK.get(info);",
                "+      if (sslpasswordcallback != null) {",
                "+        try {",
                "+          cbh = (CallbackHandler) ObjectFactory.instantiate(sslpasswordcallback, info, false, null);",
                "+        } catch (Exception e) {",
                "+          throw new PSQLException(",
                "+              GT.tr(\"The password callback class provided {0} could not be instantiated.\",",
                "+                  sslpasswordcallback),",
                "+              PSQLState.CONNECTION_FAILURE, e);",
                "+        }",
                "+      } else {",
                "+        cbh = new ConsoleCallbackHandler(PGProperty.SSL_PASSWORD.get(info));",
                "+      }",
                "+",
                "+      // If the properties are empty, give null to prevent client key selection",
                "+      km = new LazyKeyManager((\"\".equals(sslcertfile) ? null : sslcertfile),",
                "+          (\"\".equals(sslkeyfile) ? null : sslkeyfile), cbh, defaultfile);",
                "+",
                "+      TrustManager[] tm;",
                "+      SslMode sslMode = SslMode.of(info);",
                "+      if (!sslMode.verifyCertificate()) {",
                "+        // server validation is not required",
                "+        tm = new TrustManager[]{new NonValidatingTM()};",
                "+      } else {",
                "+        // Load the server certificate",
                "+",
                "+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");",
                "+        KeyStore ks;",
                "+        try {",
                "+          ks = KeyStore.getInstance(\"jks\");",
                "+        } catch (KeyStoreException e) {",
                "+          // this should never happen",
                "+          throw new NoSuchAlgorithmException(\"jks KeyStore not available\");",
                "+        }",
                "+        String sslrootcertfile = PGProperty.SSL_ROOT_CERT.get(info);",
                "+        if (sslrootcertfile == null) { // Fall back to default",
                "+          sslrootcertfile = defaultdir + \"root.crt\";",
                "+        }",
                "+        FileInputStream fis;",
                "+        try {",
                "+          fis = new FileInputStream(sslrootcertfile); // NOSONAR",
                "+        } catch (FileNotFoundException ex) {",
                "+          throw new PSQLException(",
                "+              GT.tr(\"Could not open SSL root certificate file {0}.\", sslrootcertfile),",
                "+              PSQLState.CONNECTION_FAILURE, ex);",
                "+        }",
                "+        try {",
                "+          CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");",
                "+          // Certificate[] certs = cf.generateCertificates(fis).toArray(new Certificate[]{}); //Does",
                "+          // not work in java 1.4",
                "+          Object[] certs = cf.generateCertificates(fis).toArray(new Certificate[]{});",
                "+          ks.load(null, null);",
                "+          for (int i = 0; i < certs.length; i++) {",
                "+            ks.setCertificateEntry(\"cert\" + i, (Certificate) certs[i]);",
                "+          }",
                "+          tmf.init(ks);",
                "+        } catch (IOException ioex) {",
                "+          throw new PSQLException(",
                "+              GT.tr(\"Could not read SSL root certificate file {0}.\", sslrootcertfile),",
                "+              PSQLState.CONNECTION_FAILURE, ioex);",
                "+        } catch (GeneralSecurityException gsex) {",
                "+          throw new PSQLException(",
                "+              GT.tr(\"Loading the SSL root certificate {0} into a TrustManager failed.\",",
                "+                      sslrootcertfile),",
                "+              PSQLState.CONNECTION_FAILURE, gsex);",
                "+        } finally {",
                "+          try {",
                "+            fis.close();",
                "+          } catch (IOException e) {",
                "+            /* ignore */",
                "+          }",
                "+        }",
                "+        tm = tmf.getTrustManagers();",
                "+      }",
                "+",
                "+      // finally we can initialize the context",
                "+      try {",
                "+        ctx.init(new KeyManager[]{km}, tm, null);",
                "+      } catch (KeyManagementException ex) {",
                "+        throw new PSQLException(GT.tr(\"Could not initialize SSL context.\"),",
                "+            PSQLState.CONNECTION_FAILURE, ex);",
                "+      }",
                "+",
                "+      _factory = ctx.getSocketFactory();",
                "+    } catch (NoSuchAlgorithmException ex) {",
                "+      throw new PSQLException(GT.tr(\"Could not find a java cryptographic algorithm: {0}.\",",
                "+              ex.getMessage()), PSQLState.CONNECTION_FAILURE, ex);",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Propagates any exception from {@link LazyKeyManager}.",
                "+   *",
                "+   * @throws PSQLException if there is an exception to propagate",
                "+   */",
                "+  public void throwKeyManagerException() throws PSQLException {",
                "+    if (km != null) {",
                "+      km.throwKeyManagerException();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * A CallbackHandler that reads the password from the console or returns the password given to its",
                "+   * constructor.",
                "+   */",
                "+  static class ConsoleCallbackHandler implements CallbackHandler {",
                "+",
                "+    private char[] password = null;",
                "+",
                "+    ConsoleCallbackHandler(String password) {",
                "+      if (password != null) {",
                "+        this.password = password.toCharArray();",
                "+      }",
                "+    }",
                "+",
                "+    /**",
                "+     * Handles the callbacks.",
                "+     *",
                "+     * @param callbacks The callbacks to handle",
                "+     * @throws UnsupportedCallbackException If the console is not available or other than",
                "+     *         PasswordCallback is supplied",
                "+     */",
                "+    @Override",
                "+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {",
                "+      Console cons = System.console();",
                "+      if (cons == null && password == null) {",
                "+        throw new UnsupportedCallbackException(callbacks[0], \"Console is not available\");",
                "+      }",
                "+      for (Callback callback : callbacks) {",
                "+        if (!(callback instanceof PasswordCallback)) {",
                "+          throw new UnsupportedCallbackException(callback);",
                "+        }",
                "+        PasswordCallback pwdCallback = (PasswordCallback) callback;",
                "+        if (password != null) {",
                "+          pwdCallback.setPassword(password);",
                "+          continue;",
                "+        }",
                "+        // It is used instead of cons.readPassword(prompt), because the prompt may contain '%'",
                "+        // characters",
                "+        pwdCallback.setPassword(cons.readPassword(\"%s\", pwdCallback.getPrompt()));",
                "+      }",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/ssl/MakeSSL.java b/pgjdbc/src/main/java/org/postgresql/ssl/MakeSSL.java",
                "index d2e45355..e09d88ed 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/ssl/MakeSSL.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/ssl/MakeSSL.java",
                "@@ -9,3 +9,4 @@ import org.postgresql.PGProperty;",
                " import org.postgresql.core.PGStream;",
                "-import org.postgresql.ssl.jdbc4.LibPQFactory;",
                "+import org.postgresql.core.SocketFactoryFactory;",
                "+import org.postgresql.jdbc.SslMode;",
                " import org.postgresql.util.GT;",
                "@@ -19,3 +20,2 @@ import java.util.logging.Level;",
                " import java.util.logging.Logger;",
                "-",
                " import javax.net.ssl.HostnameVerifier;",
                "@@ -32,26 +32,3 @@ public class MakeSSL extends ObjectFactory {",
                "-    SSLSocketFactory factory;",
                "-",
                "-    String sslmode = PGProperty.SSL_MODE.get(info);",
                "-    // Use the default factory if no specific factory is requested",
                "-    // unless sslmode is set",
                "-    String classname = PGProperty.SSL_FACTORY.get(info);",
                "-    if (classname == null) {",
                "-      // If sslmode is set, use the libpq compatible factory",
                "-      if (sslmode != null) {",
                "-        factory = new LibPQFactory(info);",
                "-      } else {",
                "-        factory = (SSLSocketFactory) SSLSocketFactory.getDefault();",
                "-      }",
                "-    } else {",
                "-      try {",
                "-        factory = (SSLSocketFactory) instantiate(classname, info, true,",
                "-            PGProperty.SSL_FACTORY_ARG.get(info));",
                "-      } catch (Exception e) {",
                "-        throw new PSQLException(",
                "-            GT.tr(\"The SSLSocketFactory class provided {0} could not be instantiated.\", classname),",
                "-            PSQLState.CONNECTION_FAILURE, e);",
                "-      }",
                "-    }",
                "-",
                "+    SSLSocketFactory factory = SocketFactoryFactory.getSslSocketFactory(info);",
                "     SSLSocket newConnection;",
                "@@ -61,7 +38,5 @@ public class MakeSSL extends ObjectFactory {",
                "       // We must invoke manually, otherwise the exceptions are hidden",
                "+      newConnection.setUseClientMode(true);",
                "       newConnection.startHandshake();",
                "     } catch (IOException ex) {",
                "-      if (factory instanceof LibPQFactory) { // throw any KeyManager exception",
                "-        ((LibPQFactory) factory).throwKeyManagerException();",
                "-      }",
                "       throw new PSQLException(GT.tr(\"SSL error: {0}\", ex.getMessage()),",
                "@@ -69,6 +44,22 @@ public class MakeSSL extends ObjectFactory {",
                "     }",
                "+    if (factory instanceof LibPQFactory) { // throw any KeyManager exception",
                "+      ((LibPQFactory) factory).throwKeyManagerException();",
                "+    }",
                "+    SslMode sslMode = SslMode.of(info);",
                "+    if (sslMode.verifyPeerName()) {",
                "+      verifyPeerName(stream, info, newConnection);",
                "+    }",
                "+",
                "+    stream.changeSocket(newConnection);",
                "+  }",
                "+",
                "+  private static void verifyPeerName(PGStream stream, Properties info, SSLSocket newConnection)",
                "+      throws PSQLException {",
                "+    HostnameVerifier hvn;",
                "     String sslhostnameverifier = PGProperty.SSL_HOSTNAME_VERIFIER.get(info);",
                "-    if (sslhostnameverifier != null) {",
                "-      HostnameVerifier hvn;",
                "+    if (sslhostnameverifier == null) {",
                "+      hvn = PGjdbcHostnameVerifier.INSTANCE;",
                "+      sslhostnameverifier = \"PgjdbcHostnameVerifier\";",
                "+    } else {",
                "       try {",
                "@@ -81,20 +72,12 @@ public class MakeSSL extends ObjectFactory {",
                "       }",
                "-      if (!hvn.verify(stream.getHostSpec().getHost(), newConnection.getSession())) {",
                "-        throw new PSQLException(",
                "-            GT.tr(\"The hostname {0} could not be verified by hostnameverifier {1}.\",",
                "-                stream.getHostSpec().getHost(), sslhostnameverifier),",
                "-            PSQLState.CONNECTION_FAILURE);",
                "-      }",
                "-    } else {",
                "-      if (\"verify-full\".equals(sslmode) && factory instanceof LibPQFactory) {",
                "-        if (!(((LibPQFactory) factory).verify(stream.getHostSpec().getHost(),",
                "-            newConnection.getSession()))) {",
                "-          throw new PSQLException(",
                "-              GT.tr(\"The hostname {0} could not be verified.\", stream.getHostSpec().getHost()),",
                "-              PSQLState.CONNECTION_FAILURE);",
                "-        }",
                "-      }",
                "+    }",
                "+    if (hvn.verify(stream.getHostSpec().getHost(), newConnection.getSession())) {",
                "+      return;",
                "     }",
                "-    stream.changeSocket(newConnection);",
                "+",
                "+    throw new PSQLException(",
                "+        GT.tr(\"The hostname {0} could not be verified by hostnameverifier {1}.\",",
                "+            stream.getHostSpec().getHost(), sslhostnameverifier),",
                "+        PSQLState.CONNECTION_FAILURE);",
                "   }",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/ssl/PGjdbcHostnameVerifier.java b/pgjdbc/src/main/java/org/postgresql/ssl/PGjdbcHostnameVerifier.java",
                "new file mode 100644",
                "index 00000000..851eb3ae",
                "--- /dev/null",
                "+++ b/pgjdbc/src/main/java/org/postgresql/ssl/PGjdbcHostnameVerifier.java",
                "@@ -0,0 +1,264 @@",
                "+/*",
                "+ * Copyright (c) 2018, PostgreSQL Global Development Group",
                "+ * See the LICENSE file in the project root for more information.",
                "+ */",
                "+",
                "+package org.postgresql.ssl;",
                "+",
                "+import org.postgresql.util.GT;",
                "+",
                "+import java.net.IDN;",
                "+import java.security.cert.CertificateParsingException;",
                "+import java.security.cert.X509Certificate;",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.Comparator;",
                "+import java.util.List;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "+import javax.naming.InvalidNameException;",
                "+import javax.naming.ldap.LdapName;",
                "+import javax.naming.ldap.Rdn;",
                "+import javax.net.ssl.HostnameVerifier;",
                "+import javax.net.ssl.SSLPeerUnverifiedException;",
                "+import javax.net.ssl.SSLSession;",
                "+import javax.security.auth.x500.X500Principal;",
                "+",
                "+public class PGjdbcHostnameVerifier implements HostnameVerifier {",
                "+  private static final Logger LOGGER = Logger.getLogger(PGjdbcHostnameVerifier.class.getName());",
                "+",
                "+  public static final PGjdbcHostnameVerifier INSTANCE = new PGjdbcHostnameVerifier();",
                "+",
                "+  private static final int TYPE_DNS_NAME = 2;",
                "+  private static final int TYPE_IP_ADDRESS = 7;",
                "+",
                "+  public static Comparator<String> HOSTNAME_PATTERN_COMPARATOR = new Comparator<String>() {",
                "+    private int countChars(String value, char ch) {",
                "+      int count = 0;",
                "+      int pos = -1;",
                "+      while (true) {",
                "+        pos = value.indexOf(ch, pos + 1);",
                "+        if (pos == -1) {",
                "+          break;",
                "+        }",
                "+        count++;",
                "+      }",
                "+      return count;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int compare(String o1, String o2) {",
                "+      // The more the dots the better: a.b.c.postgresql.org is more specific than postgresql.org",
                "+      int d1 = countChars(o1, '.');",
                "+      int d2 = countChars(o2, '.');",
                "+      if (d1 != d2) {",
                "+        return d1 > d2 ? 1 : -1;",
                "+      }",
                "+",
                "+      // The less the stars the better: postgresql.org is more specific than *.*.postgresql.org",
                "+      int s1 = countChars(o1, '*');",
                "+      int s2 = countChars(o2, '*');",
                "+      if (s1 != s2) {",
                "+        return s1 < s2 ? 1 : -1;",
                "+      }",
                "+",
                "+      // The longer the better: postgresql.org is more specific than sql.org",
                "+      int l1 = o1.length();",
                "+      int l2 = o2.length();",
                "+      if (l1 != l2) {",
                "+        return l1 > l2 ? 1 : -1;",
                "+      }",
                "+",
                "+      return 0;",
                "+    }",
                "+  };",
                "+",
                "+  @Override",
                "+  public boolean verify(String hostname, SSLSession session) {",
                "+    X509Certificate[] peerCerts;",
                "+    try {",
                "+      peerCerts = (X509Certificate[]) session.getPeerCertificates();",
                "+    } catch (SSLPeerUnverifiedException e) {",
                "+      LOGGER.log(Level.SEVERE,",
                "+          GT.tr(\"Unable to parse X509Certificate for hostname {0}\", hostname), e);",
                "+      return false;",
                "+    }",
                "+    if (peerCerts == null || peerCerts.length == 0) {",
                "+      LOGGER.log(Level.SEVERE,",
                "+          GT.tr(\"No certificates found for hostname {0}\", hostname));",
                "+      return false;",
                "+    }",
                "+",
                "+    String canonicalHostname;",
                "+    if (hostname.startsWith(\"[\") && hostname.endsWith(\"]\")) {",
                "+      // IPv6 address like [2001:db8:0:1:1:1:1:1]",
                "+      canonicalHostname = hostname.substring(1, hostname.length() - 1);",
                "+    } else {",
                "+      // This converts unicode domain name to ASCII",
                "+      try {",
                "+        canonicalHostname = IDN.toASCII(hostname);",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+          LOGGER.log(Level.FINEST, \"Canonical host name for {0} is {1}\",",
                "+              new Object[]{hostname, canonicalHostname});",
                "+        }",
                "+      } catch (IllegalArgumentException e) {",
                "+        // e.g. hostname is invalid",
                "+        LOGGER.log(Level.SEVERE,",
                "+            GT.tr(\"Hostname {0} is invalid\", hostname), e);",
                "+        return false;",
                "+      }",
                "+    }",
                "+",
                "+    X509Certificate serverCert = peerCerts[0];",
                "+",
                "+    // Check for Subject Alternative Names (see RFC 6125)",
                "+",
                "+    Collection<List<?>> subjectAltNames;",
                "+    try {",
                "+      subjectAltNames = serverCert.getSubjectAlternativeNames();",
                "+      if (subjectAltNames == null) {",
                "+        subjectAltNames = Collections.emptyList();",
                "+      }",
                "+    } catch (CertificateParsingException e) {",
                "+      LOGGER.log(Level.SEVERE,",
                "+          GT.tr(\"Unable to parse certificates for hostname {0}\", hostname), e);",
                "+      return false;",
                "+    }",
                "+",
                "+    boolean anyDnsSan = false;",
                "+    /*",
                "+     * Each item in the SAN collection is a 2-element list.",
                "+     * See {@link X509Certificate#getSubjectAlternativeNames}",
                "+     * The first element in each list is a number indicating the type of entry.",
                "+     */",
                "+    for (List<?> sanItem : subjectAltNames) {",
                "+      if (sanItem.size() != 2) {",
                "+        continue;",
                "+      }",
                "+      Integer sanType = (Integer) sanItem.get(0);",
                "+      if (sanType == null) {",
                "+        // just in case",
                "+        continue;",
                "+      }",
                "+      if (sanType != TYPE_IP_ADDRESS && sanType != TYPE_DNS_NAME) {",
                "+        continue;",
                "+      }",
                "+      String san = (String) sanItem.get(1);",
                "+      if (sanType == TYPE_IP_ADDRESS && san.startsWith(\"*\")) {",
                "+        // Wildcards should not be present in the IP Address field",
                "+        continue;",
                "+      }",
                "+      anyDnsSan |= sanType == TYPE_DNS_NAME;",
                "+      if (verifyHostName(canonicalHostname, san)) {",
                "+        if (LOGGER.isLoggable(Level.FINEST)) {",
                "+          LOGGER.log(Level.SEVERE,",
                "+              GT.tr(\"Server name validation pass for {0}, subjectAltName {1}\", hostname, san));",
                "+        }",
                "+        return true;",
                "+      }",
                "+    }",
                "+",
                "+    if (anyDnsSan) {",
                "+      /*",
                "+       * RFC2818, section 3.1 (I bet you won't recheck :)",
                "+       * If a subjectAltName extension of type dNSName is present, that MUST",
                "+       * be used as the identity. Otherwise, the (most specific) Common Name",
                "+       * field in the Subject field of the certificate MUST be used. Although",
                "+       * the use of the Common Name is existing practice, it is deprecated and",
                "+       * Certification Authorities are encouraged to use the dNSName instead.",
                "+       */",
                "+      LOGGER.log(Level.SEVERE,",
                "+          GT.tr(\"Server name validation failed: certificate for host {0} dNSName entries subjectAltName,\"",
                "+              + \" but none of them match. Assuming server name validation failed\", hostname));",
                "+      return false;",
                "+    }",
                "+",
                "+    // Last attempt: no DNS Subject Alternative Name entries detected, try common name",
                "+    LdapName DN;",
                "+    try {",
                "+      DN = new LdapName(serverCert.getSubjectX500Principal().getName(X500Principal.RFC2253));",
                "+    } catch (InvalidNameException e) {",
                "+      LOGGER.log(Level.SEVERE,",
                "+          GT.tr(\"Server name validation failed: unable to extract common name\"",
                "+              + \" from X509Certificate for hostname {0}\", hostname), e);",
                "+      return false;",
                "+    }",
                "+",
                "+    List<String> commonNames = new ArrayList<String>(1);",
                "+    for (Rdn rdn : DN.getRdns()) {",
                "+      if (\"CN\".equals(rdn.getType())) {",
                "+        commonNames.add((String) rdn.getValue());",
                "+      }",
                "+    }",
                "+    if (commonNames.isEmpty()) {",
                "+      LOGGER.log(Level.SEVERE,",
                "+          GT.tr(\"Server name validation failed: certificate for hostname {0} has no DNS subjectAltNames,\"",
                "+                  + \" and it CommonName is missing as well\",",
                "+              hostname));",
                "+      return false;",
                "+    }",
                "+    if (commonNames.size() > 1) {",
                "+      /*",
                "+       * RFC2818, section 3.1",
                "+       * If a subjectAltName extension of type dNSName is present, that MUST",
                "+       * be used as the identity. Otherwise, the (most specific) Common Name",
                "+       * field in the Subject field of the certificate MUST be used",
                "+       *",
                "+       * The sort is from less specific to most specific.",
                "+       */",
                "+      Collections.sort(commonNames, HOSTNAME_PATTERN_COMPARATOR);",
                "+    }",
                "+    String commonName = commonNames.get(commonNames.size() - 1);",
                "+    boolean result = verifyHostName(canonicalHostname, commonName);",
                "+    if (!result) {",
                "+      LOGGER.log(Level.SEVERE,",
                "+          GT.tr(\"Server name validation failed: hostname {0} does not match common name {1}\",",
                "+              hostname, commonName));",
                "+    }",
                "+    return result;",
                "+  }",
                "+",
                "+  public boolean verifyHostName(String hostname, String pattern) {",
                "+    if (hostname == null || pattern == null) {",
                "+      return false;",
                "+    }",
                "+    int lastStar = pattern.lastIndexOf('*');",
                "+    if (lastStar == -1) {",
                "+      // No wildcard => just compare hostnames",
                "+      return hostname.equalsIgnoreCase(pattern);",
                "+    }",
                "+    if (lastStar > 0) {",
                "+      // Wildcards like foo*.com are not supported yet",
                "+      return false;",
                "+    }",
                "+    if (pattern.indexOf('.') == -1) {",
                "+      // Wildcard certificates should contain at least one dot",
                "+      return false;",
                "+    }",
                "+    // pattern starts with *, so hostname should be at least (pattern.length-1) long",
                "+    if (hostname.length() < pattern.length() - 1) {",
                "+      return false;",
                "+    }",
                "+    // Use case insensitive comparison",
                "+    final boolean ignoreCase = true;",
                "+    // Below code is \"hostname.endsWithIgnoreCase(pattern.withoutFirstStar())\"",
                "+",
                "+    // E.g. hostname==sub.host.com; pattern==*.host.com",
                "+    // We need to start the offset of \".host.com\" in hostname",
                "+    // For this we take hostname.length() - pattern.length()",
                "+    // and +1 is required since pattern is known to start with *",
                "+    int toffset = hostname.length() - pattern.length() + 1;",
                "+",
                "+    // Wildcard covers just one domain level",
                "+    // a.b.c.com should not be covered by *.c.com",
                "+    if (hostname.lastIndexOf('.', toffset - 1) >= 0) {",
                "+      // If there's a dot in between 0..toffset",
                "+      return false;",
                "+    }",
                "+",
                "+    return hostname.regionMatches(ignoreCase, toffset,",
                "+        pattern, 1, pattern.length() - 1);",
                "+  }",
                "+",
                "+}",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java b/pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java",
                "index 4aadabd4..7dbe9df6 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2004, PostgreSQL Global Development Group",
                "+ * Copyright (c) 2017, PostgreSQL Global Development Group",
                "  * See the LICENSE file in the project root for more information.",
                "@@ -7,52 +7,17 @@ package org.postgresql.ssl.jdbc4;",
                "-import org.postgresql.PGProperty;",
                "-import org.postgresql.ssl.MakeSSL;",
                "-import org.postgresql.ssl.NonValidatingFactory.NonValidatingTM;",
                "-import org.postgresql.ssl.WrappedFactory;",
                "-import org.postgresql.util.GT;",
                "+import org.postgresql.jdbc.SslMode;",
                "+import org.postgresql.ssl.PGjdbcHostnameVerifier;",
                " import org.postgresql.util.PSQLException;",
                "-import org.postgresql.util.PSQLState;",
                "-import java.io.Console;",
                "-import java.io.FileInputStream;",
                "-import java.io.FileNotFoundException;",
                "-import java.io.IOException;",
                "-import java.security.GeneralSecurityException;",
                "-import java.security.KeyManagementException;",
                "-import java.security.KeyStore;",
                "-import java.security.KeyStoreException;",
                "-import java.security.NoSuchAlgorithmException;",
                "-import java.security.cert.Certificate;",
                "-import java.security.cert.CertificateFactory;",
                "-import java.security.cert.CertificateParsingException;",
                "-import java.security.cert.X509Certificate;",
                "-import java.util.Collection;",
                "-import java.util.List;",
                "+import java.net.IDN;",
                " import java.util.Properties;",
                "-",
                "-import javax.naming.InvalidNameException;",
                "-import javax.naming.ldap.LdapName;",
                "-import javax.naming.ldap.Rdn;",
                " import javax.net.ssl.HostnameVerifier;",
                "-import javax.net.ssl.KeyManager;",
                "-import javax.net.ssl.SSLContext;",
                "-import javax.net.ssl.SSLPeerUnverifiedException;",
                " import javax.net.ssl.SSLSession;",
                "-import javax.net.ssl.TrustManager;",
                "-import javax.net.ssl.TrustManagerFactory;",
                "-import javax.security.auth.callback.Callback;",
                "-import javax.security.auth.callback.CallbackHandler;",
                "-import javax.security.auth.callback.PasswordCallback;",
                "-import javax.security.auth.callback.UnsupportedCallbackException;",
                "-import javax.security.auth.x500.X500Principal;",
                " /**",
                "- * Provide an SSLSocketFactory that is compatible with the libpq behaviour.",
                "+ * @deprecated prefer {@link org.postgresql.ssl.LibPQFactory}",
                "  */",
                "-public class LibPQFactory extends WrappedFactory implements HostnameVerifier {",
                "-",
                "-  private static final int ALT_DNS_NAME = 2;",
                "-",
                "-  LazyKeyManager km = null;",
                "-  String sslmode;",
                "+@Deprecated",
                "+public class LibPQFactory extends org.postgresql.ssl.LibPQFactory implements HostnameVerifier {",
                "+  private final SslMode sslMode;",
                "@@ -60,120 +25,11 @@ public class LibPQFactory extends WrappedFactory implements HostnameVerifier {",
                "    * @param info the connection parameters The following parameters are used:",
                "-   *        sslmode,sslcert,sslkey,sslrootcert,sslhostnameverifier,sslpasswordcallback,sslpassword",
                "+   *             sslmode,sslcert,sslkey,sslrootcert,sslhostnameverifier,sslpasswordcallback,sslpassword",
                "    * @throws PSQLException if security error appears when initializing factory",
                "+   * @deprecated prefer {@link org.postgresql.ssl.LibPQFactory}",
                "    */",
                "+  @Deprecated",
                "   public LibPQFactory(Properties info) throws PSQLException {",
                "-    try {",
                "-      sslmode = PGProperty.SSL_MODE.get(info);",
                "-      SSLContext ctx = SSLContext.getInstance(\"TLS\"); // or \"SSL\" ?",
                "-",
                "-      // Determining the default file location",
                "-      String pathsep = System.getProperty(\"file.separator\");",
                "-      String defaultdir;",
                "-      boolean defaultfile = false;",
                "-      if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) { // It is Windows",
                "-        defaultdir = System.getenv(\"APPDATA\") + pathsep + \"postgresql\" + pathsep;",
                "-      } else {",
                "-        defaultdir = System.getProperty(\"user.home\") + pathsep + \".postgresql\" + pathsep;",
                "-      }",
                "-",
                "-      // Load the client's certificate and key",
                "-      String sslcertfile = PGProperty.SSL_CERT.get(info);",
                "-      if (sslcertfile == null) { // Fall back to default",
                "-        defaultfile = true;",
                "-        sslcertfile = defaultdir + \"postgresql.crt\";",
                "-      }",
                "-      String sslkeyfile = PGProperty.SSL_KEY.get(info);",
                "-      if (sslkeyfile == null) { // Fall back to default",
                "-        defaultfile = true;",
                "-        sslkeyfile = defaultdir + \"postgresql.pk8\";",
                "-      }",
                "-",
                "-      // Determine the callback handler",
                "-      CallbackHandler cbh;",
                "-      String sslpasswordcallback = PGProperty.SSL_PASSWORD_CALLBACK.get(info);",
                "-      if (sslpasswordcallback != null) {",
                "-        try {",
                "-          cbh = (CallbackHandler) MakeSSL.instantiate(sslpasswordcallback, info, false, null);",
                "-        } catch (Exception e) {",
                "-          throw new PSQLException(",
                "-              GT.tr(\"The password callback class provided {0} could not be instantiated.\",",
                "-                  sslpasswordcallback),",
                "-              PSQLState.CONNECTION_FAILURE, e);",
                "-        }",
                "-      } else {",
                "-        cbh = new ConsoleCallbackHandler(PGProperty.SSL_PASSWORD.get(info));",
                "-      }",
                "-",
                "-      // If the properties are empty, give null to prevent client key selection",
                "-      km = new LazyKeyManager((\"\".equals(sslcertfile) ? null : sslcertfile),",
                "-          (\"\".equals(sslkeyfile) ? null : sslkeyfile), cbh, defaultfile);",
                "-",
                "-      TrustManager[] tm;",
                "-      if (\"verify-ca\".equals(sslmode) || \"verify-full\".equals(sslmode)) {",
                "-        // Load the server certificate",
                "-",
                "-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");",
                "-        KeyStore ks;",
                "-        try {",
                "-          ks = KeyStore.getInstance(\"jks\");",
                "-        } catch (KeyStoreException e) {",
                "-          // this should never happen",
                "-          throw new NoSuchAlgorithmException(\"jks KeyStore not available\");",
                "-        }",
                "-        String sslrootcertfile = PGProperty.SSL_ROOT_CERT.get(info);",
                "-        if (sslrootcertfile == null) { // Fall back to default",
                "-          sslrootcertfile = defaultdir + \"root.crt\";",
                "-        }",
                "-        FileInputStream fis;",
                "-        try {",
                "-          fis = new FileInputStream(sslrootcertfile); // NOSONAR",
                "-        } catch (FileNotFoundException ex) {",
                "-          throw new PSQLException(",
                "-              GT.tr(\"Could not open SSL root certificate file {0}.\", sslrootcertfile),",
                "-              PSQLState.CONNECTION_FAILURE, ex);",
                "-        }",
                "-        try {",
                "-          CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");",
                "-          // Certificate[] certs = cf.generateCertificates(fis).toArray(new Certificate[]{}); //Does",
                "-          // not work in java 1.4",
                "-          Object[] certs = cf.generateCertificates(fis).toArray(new Certificate[]{});",
                "-          ks.load(null, null);",
                "-          for (int i = 0; i < certs.length; i++) {",
                "-            ks.setCertificateEntry(\"cert\" + i, (Certificate) certs[i]);",
                "-          }",
                "-          tmf.init(ks);",
                "-        } catch (IOException ioex) {",
                "-          throw new PSQLException(",
                "-              GT.tr(\"Could not read SSL root certificate file {0}.\", sslrootcertfile),",
                "-              PSQLState.CONNECTION_FAILURE, ioex);",
                "-        } catch (GeneralSecurityException gsex) {",
                "-          throw new PSQLException(",
                "-              GT.tr(\"Loading the SSL root certificate {0} into a TrustManager failed.\",",
                "-                      sslrootcertfile),",
                "-              PSQLState.CONNECTION_FAILURE, gsex);",
                "-        } finally {",
                "-          try {",
                "-            fis.close();",
                "-          } catch (IOException e) {",
                "-            /* ignore */",
                "-          }",
                "-        }",
                "-        tm = tmf.getTrustManagers();",
                "-      } else { // server validation is not required",
                "-        tm = new TrustManager[]{new NonValidatingTM()};",
                "-      }",
                "+    super(info);",
                "-      // finally we can initialize the context",
                "-      try {",
                "-        ctx.init(new KeyManager[]{km}, tm, null);",
                "-      } catch (KeyManagementException ex) {",
                "-        throw new PSQLException(GT.tr(\"Could not initialize SSL context.\"),",
                "-            PSQLState.CONNECTION_FAILURE, ex);",
                "-      }",
                "-",
                "-      _factory = ctx.getSocketFactory();",
                "-    } catch (NoSuchAlgorithmException ex) {",
                "-      throw new PSQLException(GT.tr(\"Could not find a java cryptographic algorithm: {0}.\",",
                "-              ex.getMessage()), PSQLState.CONNECTION_FAILURE, ex);",
                "-    }",
                "+    sslMode = SslMode.of(info);",
                "   }",
                "@@ -181,88 +37,25 @@ public class LibPQFactory extends WrappedFactory implements HostnameVerifier {",
                "   /**",
                "-   * Propagates any exception from {@link LazyKeyManager}.",
                "+   * Verifies if given hostname matches pattern.",
                "    *",
                "-   * @throws PSQLException if there is an exception to propagate",
                "+   * @deprecated use {@link PGjdbcHostnameVerifier}",
                "+   * @param hostname input hostname",
                "+   * @param pattern domain name pattern",
                "+   * @return true when domain matches pattern",
                "    */",
                "-  public void throwKeyManagerException() throws PSQLException {",
                "-    if (km != null) {",
                "-      km.throwKeyManagerException();",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * A CallbackHandler that reads the password from the console or returns the password given to its",
                "-   * constructor.",
                "-   */",
                "-  static class ConsoleCallbackHandler implements CallbackHandler {",
                "-",
                "-    private char[] password = null;",
                "-",
                "-    ConsoleCallbackHandler(String password) {",
                "-      if (password != null) {",
                "-        this.password = password.toCharArray();",
                "-      }",
                "-    }",
                "-",
                "-    /**",
                "-     * Handles the callbacks.",
                "-     *",
                "-     * @param callbacks The callbacks to handle",
                "-     * @throws UnsupportedCallbackException If the console is not available or other than",
                "-     *         PasswordCallback is supplied",
                "-     */",
                "-    @Override",
                "-    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {",
                "-      Console cons = System.console();",
                "-      if (cons == null && password == null) {",
                "-        throw new UnsupportedCallbackException(callbacks[0], \"Console is not available\");",
                "-      }",
                "-      for (Callback callback : callbacks) {",
                "-        if (callback instanceof PasswordCallback) {",
                "-          if (password == null) {",
                "-            // It is used instead of cons.readPassword(prompt), because the prompt may contain '%'",
                "-            // characters",
                "-            ((PasswordCallback) callback).setPassword(",
                "-                cons.readPassword(\"%s\", ((PasswordCallback) callback).getPrompt()));",
                "-          } else {",
                "-            ((PasswordCallback) callback).setPassword(password);",
                "-          }",
                "-        } else {",
                "-          throw new UnsupportedCallbackException(callback);",
                "-        }",
                "-      }",
                "-",
                "-    }",
                "-  }",
                "-",
                "+  @Deprecated",
                "   public static boolean verifyHostName(String hostname, String pattern) {",
                "-    if (hostname == null || pattern == null) {",
                "-      return false;",
                "-    }",
                "-    if (!pattern.startsWith(\"*\")) {",
                "-      // No wildcard => just compare hostnames",
                "-      return hostname.equalsIgnoreCase(pattern);",
                "-    }",
                "-    // pattern starts with *, so hostname should be at least (pattern.length-1) long",
                "-    if (hostname.length() < pattern.length() - 1) {",
                "-      return false;",
                "-    }",
                "-    // Compare ignore case",
                "-    final boolean ignoreCase = true;",
                "-    // Below code is \"hostname.endsWithIgnoreCase(pattern.withoutFirstStar())\"",
                "-",
                "-    // E.g. hostname==sub.host.com; pattern==*.host.com",
                "-    // We need to start the offset of \".host.com\" in hostname",
                "-    // For this we take hostname.length() - pattern.length()",
                "-    // and +1 is required since pattern is known to start with *",
                "-    int toffset = hostname.length() - pattern.length() + 1;",
                "-",
                "-    // Wildcard covers just one domain level",
                "-    // a.b.c.com should not be covered by *.c.com",
                "-    if (hostname.lastIndexOf('.', toffset - 1) >= 0) {",
                "-      // If there's a dot in between 0..toffset",
                "-      return false;",
                "+    String canonicalHostname;",
                "+    if (hostname.startsWith(\"[\") && hostname.endsWith(\"]\")) {",
                "+      // IPv6 address like [2001:db8:0:1:1:1:1:1]",
                "+      canonicalHostname = hostname.substring(1, hostname.length() - 1);",
                "+    } else {",
                "+      // This converts unicode domain name to ASCII",
                "+      try {",
                "+        canonicalHostname = IDN.toASCII(hostname);",
                "+      } catch (IllegalArgumentException e) {",
                "+        // e.g. hostname is invalid",
                "+        return false;",
                "+      }",
                "     }",
                "-",
                "-    return hostname.regionMatches(ignoreCase, toffset,",
                "-        pattern, 1, pattern.length() - 1);",
                "+    return PGjdbcHostnameVerifier.INSTANCE.verifyHostName(canonicalHostname, pattern);",
                "   }",
                "@@ -276,2 +69,3 @@ public class LibPQFactory extends WrappedFactory implements HostnameVerifier {",
                "    *",
                "+   * @deprecated use PgjdbcHostnameVerifier",
                "    * @param hostname Hostname or IP address of the server.",
                "@@ -279,51 +73,12 @@ public class LibPQFactory extends WrappedFactory implements HostnameVerifier {",
                "    * @return true if the certificate belongs to the server, false otherwise.",
                "+   * @see PGjdbcHostnameVerifier",
                "    */",
                "+  @Deprecated",
                "   public boolean verify(String hostname, SSLSession session) {",
                "-    X509Certificate[] peerCerts;",
                "-    try {",
                "-      peerCerts = (X509Certificate[]) session.getPeerCertificates();",
                "-    } catch (SSLPeerUnverifiedException e) {",
                "-      return false;",
                "+    if (!sslMode.verifyPeerName()) {",
                "+      return true;",
                "     }",
                "-    if (peerCerts == null || peerCerts.length == 0) {",
                "-      return false;",
                "-    }",
                "-    // Extract the common name",
                "-    X509Certificate serverCert = peerCerts[0];",
                "-",
                "-    try {",
                "-      // Check for Subject Alternative Names (see RFC 6125)",
                "-      Collection<List<?>> subjectAltNames = serverCert.getSubjectAlternativeNames();",
                "-",
                "-      if (subjectAltNames != null) {",
                "-        for (List<?> sanit : subjectAltNames) {",
                "-          Integer type = (Integer) sanit.get(0);",
                "-          String san = (String) sanit.get(1);",
                "-",
                "-          // this mimics libpq check for ALT_DNS_NAME",
                "-          if (type != null && type == ALT_DNS_NAME && verifyHostName(hostname, san)) {",
                "-            return true;",
                "-          }",
                "-        }",
                "-      }",
                "-    } catch (CertificateParsingException e) {",
                "-      return false;",
                "-    }",
                "-",
                "-    LdapName DN;",
                "-    try {",
                "-      DN = new LdapName(serverCert.getSubjectX500Principal().getName(X500Principal.RFC2253));",
                "-    } catch (InvalidNameException e) {",
                "-      return false;",
                "-    }",
                "-    String CN = null;",
                "-    for (Rdn rdn : DN.getRdns()) {",
                "-      if (\"CN\".equals(rdn.getType())) {",
                "-        // Multiple AVAs are not treated",
                "-        CN = (String) rdn.getValue();",
                "-        break;",
                "-      }",
                "-    }",
                "-    return verifyHostName(hostname, CN);",
                "+    return PGjdbcHostnameVerifier.INSTANCE.verify(hostname, session);",
                "   }",
                "+",
                " }",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/util/ObjectFactory.java b/pgjdbc/src/main/java/org/postgresql/util/ObjectFactory.java",
                "index 4145bc54..273ac6d6 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/util/ObjectFactory.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/util/ObjectFactory.java",
                "@@ -23,3 +23,3 @@ public class ObjectFactory {",
                "    *",
                "-   * @param classname Nam of the class to instantiate",
                "+   * @param classname name of the class to instantiate",
                "    * @param info parameter to pass as Properties",
                "diff --git a/ssltest.properties b/ssltest.properties",
                "index 21d1d45a..492399a4 100644",
                "--- a/ssltest.properties",
                "+++ b/ssltest.properties",
                "@@ -1,32 +1,2 @@",
                "-",
                "-  ",
                " certdir=certdir",
                "-",
                "-# Uncomment to enable testing of SingleCertValidatingFactory",
                "-#testsinglecertfactory=true",
                "-",
                "-ssloff9=",
                "-ssloff9prefix=",
                "-",
                "-#sslhostnossl9=jdbc:postgresql://localhost:5432/hostnossldb?sslpassword=sslpwd",
                "-sslhostnossl9prefix=",
                "-",
                "-#sslhostgh9=jdbc:postgresql://localhost:5432/hostdb?sslpassword=sslpwd",
                "-sslhostgh9prefix=",
                "-#sslhostbh9=jdbc:postgresql://127.0.0.1:5432/hostdb?sslpassword=sslpwd",
                "-sslhostbh9prefix=",
                "-",
                "-#sslhostsslgh9=jdbc:postgresql://localhost:5432/hostssldb?sslpassword=sslpwd",
                "-sslhostsslgh9prefix=",
                "-#sslhostsslbh9=jdbc:postgresql://127.0.0.1:5432/hostssldb?sslpassword=sslpwd",
                "-sslhostsslbh9prefix=",
                "-",
                "-#sslhostsslcertgh9=jdbc:postgresql://localhost:5432/hostsslcertdb?sslpassword=sslpwd",
                "-sslhostsslcertgh9prefix=",
                "-#sslhostsslcertbh9=jdbc:postgresql://127.0.0.1:5432/hostsslcertdb?sslpassword=sslpwd",
                "-sslhostsslcertbh9prefix=",
                "-",
                "-#sslcertgh9=jdbc:postgresql://localhost:5432/certdb?sslpassword=sslpwd",
                "-sslcertgh9prefix=",
                "-#sslcertbh9=jdbc:postgresql://127.0.0.1:5432/certdb?sslpassword=sslpwd",
                "-sslcertbh9prefix=",
                "\\ No newline at end of file",
                "+#enable_ssl_tests=true"
            ],
            "changed_files": [
                ".travis/travis_configure_ssl.sh",
                "build.properties",
                "pgjdbc/src/main/java/org/postgresql/PGProperty.java",
                "pgjdbc/src/main/java/org/postgresql/core/PGStream.java",
                "pgjdbc/src/main/java/org/postgresql/core/SocketFactoryFactory.java",
                "pgjdbc/src/main/java/org/postgresql/core/v3/ConnectionFactoryImpl.java",
                "pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java",
                "pgjdbc/src/main/java/org/postgresql/jdbc/SslMode.java",
                "pgjdbc/src/main/java/org/postgresql/ssl/DefaultJavaSSLFactory.java",
                "pgjdbc/src/main/java/org/postgresql/ssl/LazyKeyManager.java",
                "pgjdbc/src/main/java/org/postgresql/ssl/LibPQFactory.java",
                "pgjdbc/src/main/java/org/postgresql/ssl/MakeSSL.java",
                "pgjdbc/src/main/java/org/postgresql/ssl/PGjdbcHostnameVerifier.java",
                "pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java",
                "pgjdbc/src/main/java/org/postgresql/util/ObjectFactory.java",
                "ssltest.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [
                "CVE-2018-10936"
            ],
            "twins": [],
            "tags": [
                "REL42.2.10",
                "REL42.2.11",
                "REL42.2.12",
                "REL42.2.13",
                "REL42.2.13-rc1",
                "REL42.2.14",
                "REL42.2.14-rc1",
                "REL42.2.15",
                "REL42.2.15-rc1",
                "REL42.2.15-rc2",
                "REL42.2.16",
                "REL42.2.16-rc1",
                "REL42.2.16-rc2",
                "REL42.2.17",
                "REL42.2.17-rc1",
                "REL42.2.18",
                "REL42.2.18-rc1",
                "REL42.2.19",
                "REL42.2.19-rc1",
                "REL42.2.19-rc2",
                "REL42.2.20",
                "REL42.2.20-rc1",
                "REL42.2.20-rc2",
                "REL42.2.21",
                "REL42.2.21-rc1",
                "REL42.2.21-rc2",
                "REL42.2.22",
                "REL42.2.22-rc1",
                "REL42.2.23",
                "REL42.2.23-rc1",
                "REL42.2.23-rc3",
                "REL42.2.23-rc4",
                "REL42.2.23-rc5",
                "REL42.2.23-rc6",
                "REL42.2.24",
                "REL42.2.24-rc1",
                "REL42.2.24-rc2",
                "REL42.2.25",
                "REL42.2.25-rc1",
                "REL42.2.26",
                "REL42.2.26-rc1",
                "REL42.2.26-rc2",
                "REL42.2.27",
                "REL42.2.27-rc1",
                "REL42.2.28",
                "REL42.2.28-rc1",
                "REL42.2.29",
                "REL42.2.29-rc1",
                "REL42.2.30-rc1",
                "REL42.2.5",
                "REL42.2.6",
                "REL42.2.7",
                "REL42.2.8",
                "REL42.2.9",
                "REL42.3.0",
                "REL42.3.0-rc1",
                "REL42.3.0-rc2",
                "REL42.3.1",
                "REL42.3.1-rc1",
                "REL42.3.1-rc2",
                "REL42.3.10",
                "REL42.3.10-rc1",
                "REL42.3.2",
                "REL42.3.2-rc1",
                "REL42.3.2-rc2",
                "REL42.3.3",
                "REL42.3.3-rc1",
                "REL42.3.4",
                "REL42.3.4-rc1",
                "REL42.3.5",
                "REL42.3.5-rc1",
                "REL42.3.6",
                "REL42.3.6-rc1",
                "REL42.3.7",
                "REL42.3.7-rc1",
                "REL42.3.8",
                "REL42.3.8-rc1",
                "REL42.3.9",
                "REL42.3.9-rc1",
                "REL42.4.0",
                "REL42.4.0-rc1",
                "REL42.4.1",
                "REL42.4.1-rc1",
                "REL42.4.2",
                "REL42.4.2-rc1",
                "REL42.4.3",
                "REL42.4.3-rc1",
                "REL42.4.4",
                "REL42.4.4-rc1",
                "REL42.4.5",
                "REL42.4.5-rc1",
                "REL42.5.0",
                "REL42.5.0-rc1",
                "REL42.5.1",
                "REL42.5.1-rc1",
                "REL42.5.2",
                "REL42.5.2-rc1",
                "REL42.5.2-rc2",
                "REL42.5.3",
                "REL42.5.3-rc1",
                "REL42.5.3-rc2",
                "REL42.5.4",
                "REL42.5.4-rc1",
                "REL42.5.5",
                "REL42.5.5-rc1",
                "REL42.5.6",
                "REL42.5.6-rc1",
                "REL42.6.0",
                "REL42.6.0-rc1",
                "REL42.6.1",
                "REL42.6.1-rc1",
                "REL42.6.2",
                "REL42.6.2-rc2",
                "REL42.7.0",
                "REL42.7.0-rc3",
                "REL42.7.1",
                "REL42.7.1-rc1",
                "REL42.7.1-rc2",
                "REL42.7.2",
                "REL42.7.2-rc1",
                "REL42.7.2-rc2",
                "REL42.7.2-rc3",
                "REL42.7.2-rc4",
                "REL42.7.2-rc5",
                "REL42.7.3",
                "REL42.7.3-rc1",
                "v42.2.13-rc1",
                "v42.3.0-rc1",
                "v42.3.0-rc2",
                "v42.3.0-rc5"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "VULN_ID_IN_MESSAGE",
                    "message": "The commit message mentions the vulnerability ID",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: SSL",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSL",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: factory, name, version, host",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: name, host, factory, postgresql, verifier",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fa032732acfe51c6e663ee646dd5c1beaa1af857",
            "repository": "https://github.com/pgjdbc/pgjdbc",
            "timestamp": 1535382444,
            "hunks": 2,
            "message": "docs: improve documentation on SSL",
            "diff": [
                "diff --git a/docs/documentation/head/media/css/table.css b/docs/documentation/head/media/css/table.css",
                "index cf2fd7da..5f2633ff 100644",
                "--- a/docs/documentation/head/media/css/table.css",
                "+++ b/docs/documentation/head/media/css/table.css",
                "@@ -16,3 +16,3 @@ div.tblBasic table th {",
                "         padding-top: 20px;",
                "-        border-bottom: 1px solid #EFEFEF;",
                "+        border-bottom: 1px solid #F0F8FF;",
                "         vertical-align: bottom;",
                "@@ -101 +101,7 @@ div.tblBasic table td.colLastRT {",
                " }",
                "+div.tblBasic table.tblBasicWhite th {",
                "+        background-color: aliceblue;",
                "+}",
                "+div.tblBasic table.tblBasicWhite td {",
                "+        background-color: white;",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "docs/documentation/head/media/css/table.css"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "REL42.2.10",
                "REL42.2.11",
                "REL42.2.12",
                "REL42.2.13",
                "REL42.2.13-rc1",
                "REL42.2.14",
                "REL42.2.14-rc1",
                "REL42.2.15",
                "REL42.2.15-rc1",
                "REL42.2.15-rc2",
                "REL42.2.16",
                "REL42.2.16-rc1",
                "REL42.2.16-rc2",
                "REL42.2.17",
                "REL42.2.17-rc1",
                "REL42.2.18",
                "REL42.2.18-rc1",
                "REL42.2.19",
                "REL42.2.19-rc1",
                "REL42.2.19-rc2",
                "REL42.2.20",
                "REL42.2.20-rc1",
                "REL42.2.20-rc2",
                "REL42.2.21",
                "REL42.2.21-rc1",
                "REL42.2.21-rc2",
                "REL42.2.22",
                "REL42.2.22-rc1",
                "REL42.2.23",
                "REL42.2.23-rc1",
                "REL42.2.23-rc3",
                "REL42.2.23-rc4",
                "REL42.2.23-rc5",
                "REL42.2.23-rc6",
                "REL42.2.24",
                "REL42.2.24-rc1",
                "REL42.2.24-rc2",
                "REL42.2.25",
                "REL42.2.25-rc1",
                "REL42.2.26",
                "REL42.2.26-rc1",
                "REL42.2.26-rc2",
                "REL42.2.27",
                "REL42.2.27-rc1",
                "REL42.2.28",
                "REL42.2.28-rc1",
                "REL42.2.29",
                "REL42.2.29-rc1",
                "REL42.2.30-rc1",
                "REL42.2.5",
                "REL42.2.6",
                "REL42.2.7",
                "REL42.2.8",
                "REL42.2.9",
                "REL42.3.0",
                "REL42.3.0-rc1",
                "REL42.3.0-rc2",
                "REL42.3.1",
                "REL42.3.1-rc1",
                "REL42.3.1-rc2",
                "REL42.3.10",
                "REL42.3.10-rc1",
                "REL42.3.2",
                "REL42.3.2-rc1",
                "REL42.3.2-rc2",
                "REL42.3.3",
                "REL42.3.3-rc1",
                "REL42.3.4",
                "REL42.3.4-rc1",
                "REL42.3.5",
                "REL42.3.5-rc1",
                "REL42.3.6",
                "REL42.3.6-rc1",
                "REL42.3.7",
                "REL42.3.7-rc1",
                "REL42.3.8",
                "REL42.3.8-rc1",
                "REL42.3.9",
                "REL42.3.9-rc1",
                "REL42.4.0",
                "REL42.4.0-rc1",
                "REL42.4.1",
                "REL42.4.1-rc1",
                "REL42.4.2",
                "REL42.4.2-rc1",
                "REL42.4.3",
                "REL42.4.3-rc1",
                "REL42.4.4",
                "REL42.4.4-rc1",
                "REL42.4.5",
                "REL42.4.5-rc1",
                "REL42.5.0",
                "REL42.5.0-rc1",
                "REL42.5.1",
                "REL42.5.1-rc1",
                "REL42.5.2",
                "REL42.5.2-rc1",
                "REL42.5.2-rc2",
                "REL42.5.3",
                "REL42.5.3-rc1",
                "REL42.5.3-rc2",
                "REL42.5.4",
                "REL42.5.4-rc1",
                "REL42.5.5",
                "REL42.5.5-rc1",
                "REL42.5.6",
                "REL42.5.6-rc1",
                "REL42.6.0",
                "REL42.6.0-rc1",
                "REL42.6.1",
                "REL42.6.1-rc1",
                "REL42.6.2",
                "REL42.6.2-rc2",
                "REL42.7.0",
                "REL42.7.0-rc3",
                "REL42.7.1",
                "REL42.7.1-rc1",
                "REL42.7.1-rc2",
                "REL42.7.2",
                "REL42.7.2-rc1",
                "REL42.7.2-rc2",
                "REL42.7.2-rc3",
                "REL42.7.2-rc4",
                "REL42.7.2-rc5",
                "REL42.7.3",
                "REL42.7.3-rc1",
                "v42.2.13-rc1",
                "v42.3.0-rc1",
                "v42.3.0-rc2",
                "v42.3.0-rc5"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: SSL",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "203a106ddc9eb0d94cc94838f4fb0924e37f441a",
            "repository": "https://github.com/pgjdbc/pgjdbc",
            "timestamp": 1533236349,
            "hunks": 2,
            "message": "fix: Correct typo in CopyManager comment (#1285)",
            "diff": [
                "diff --git a/pgjdbc/src/main/java/org/postgresql/copy/CopyManager.java b/pgjdbc/src/main/java/org/postgresql/copy/CopyManager.java",
                "index ed2d5876..a152b7c1 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/copy/CopyManager.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/copy/CopyManager.java",
                "@@ -97,3 +97,3 @@ public class CopyManager {",
                "       }",
                "-      try { // read until excausted or operation cancelled SQLException",
                "+      try { // read until exhausted or operation cancelled SQLException",
                "         while ((buf = cp.readFromCopy()) != null) {",
                "@@ -132,3 +132,3 @@ public class CopyManager {",
                "       }",
                "-      try { // read until excausted or operation cancelled SQLException",
                "+      try { // read until exhausted or operation cancelled SQLException",
                "         while ((buf = cp.readFromCopy()) != null) {"
            ],
            "changed_files": [
                "pgjdbc/src/main/java/org/postgresql/copy/CopyManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1285": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "REL42.2.10",
                "REL42.2.11",
                "REL42.2.12",
                "REL42.2.13",
                "REL42.2.13-rc1",
                "REL42.2.14",
                "REL42.2.14-rc1",
                "REL42.2.15",
                "REL42.2.15-rc1",
                "REL42.2.15-rc2",
                "REL42.2.16",
                "REL42.2.16-rc1",
                "REL42.2.16-rc2",
                "REL42.2.17",
                "REL42.2.17-rc1",
                "REL42.2.18",
                "REL42.2.18-rc1",
                "REL42.2.19",
                "REL42.2.19-rc1",
                "REL42.2.19-rc2",
                "REL42.2.20",
                "REL42.2.20-rc1",
                "REL42.2.20-rc2",
                "REL42.2.21",
                "REL42.2.21-rc1",
                "REL42.2.21-rc2",
                "REL42.2.22",
                "REL42.2.22-rc1",
                "REL42.2.23",
                "REL42.2.23-rc1",
                "REL42.2.23-rc3",
                "REL42.2.23-rc4",
                "REL42.2.23-rc5",
                "REL42.2.23-rc6",
                "REL42.2.24",
                "REL42.2.24-rc1",
                "REL42.2.24-rc2",
                "REL42.2.25",
                "REL42.2.25-rc1",
                "REL42.2.26",
                "REL42.2.26-rc1",
                "REL42.2.26-rc2",
                "REL42.2.27",
                "REL42.2.27-rc1",
                "REL42.2.28",
                "REL42.2.28-rc1",
                "REL42.2.29",
                "REL42.2.29-rc1",
                "REL42.2.30-rc1",
                "REL42.2.5",
                "REL42.2.6",
                "REL42.2.7",
                "REL42.2.8",
                "REL42.2.9",
                "REL42.3.0",
                "REL42.3.0-rc1",
                "REL42.3.0-rc2",
                "REL42.3.1",
                "REL42.3.1-rc1",
                "REL42.3.1-rc2",
                "REL42.3.10",
                "REL42.3.10-rc1",
                "REL42.3.2",
                "REL42.3.2-rc1",
                "REL42.3.2-rc2",
                "REL42.3.3",
                "REL42.3.3-rc1",
                "REL42.3.4",
                "REL42.3.4-rc1",
                "REL42.3.5",
                "REL42.3.5-rc1",
                "REL42.3.6",
                "REL42.3.6-rc1",
                "REL42.3.7",
                "REL42.3.7-rc1",
                "REL42.3.8",
                "REL42.3.8-rc1",
                "REL42.3.9",
                "REL42.3.9-rc1",
                "REL42.4.0",
                "REL42.4.0-rc1",
                "REL42.4.1",
                "REL42.4.1-rc1",
                "REL42.4.2",
                "REL42.4.2-rc1",
                "REL42.4.3",
                "REL42.4.3-rc1",
                "REL42.4.4",
                "REL42.4.4-rc1",
                "REL42.4.5",
                "REL42.4.5-rc1",
                "REL42.5.0",
                "REL42.5.0-rc1",
                "REL42.5.1",
                "REL42.5.1-rc1",
                "REL42.5.2",
                "REL42.5.2-rc1",
                "REL42.5.2-rc2",
                "REL42.5.3",
                "REL42.5.3-rc1",
                "REL42.5.3-rc2",
                "REL42.5.4",
                "REL42.5.4-rc1",
                "REL42.5.5",
                "REL42.5.5-rc1",
                "REL42.5.6",
                "REL42.5.6-rc1",
                "REL42.6.0",
                "REL42.6.0-rc1",
                "REL42.6.1",
                "REL42.6.1-rc1",
                "REL42.6.2",
                "REL42.6.2-rc2",
                "REL42.7.0",
                "REL42.7.0-rc3",
                "REL42.7.1",
                "REL42.7.1-rc1",
                "REL42.7.1-rc2",
                "REL42.7.2",
                "REL42.7.2-rc1",
                "REL42.7.2-rc2",
                "REL42.7.2-rc3",
                "REL42.7.2-rc4",
                "REL42.7.2-rc5",
                "REL42.7.3",
                "REL42.7.3-rc1",
                "v42.2.13-rc1",
                "v42.3.0-rc1",
                "v42.3.0-rc2",
                "v42.3.0-rc5"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: postgresql",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1285",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9534e9ca0e1840445ad5f4eee75bc1e2ac102dde",
            "repository": "https://github.com/pgjdbc/pgjdbc",
            "timestamp": 1534152571,
            "hunks": 17,
            "message": "docs: fix typos detected by github.com/client9/misspell (#1287)",
            "diff": [
                "diff --git a/docs/community/mailinglist.html b/docs/community/mailinglist.html",
                "index 7447595b..3997a37e 100644",
                "--- a/docs/community/mailinglist.html",
                "+++ b/docs/community/mailinglist.html",
                "@@ -76,3 +76,3 @@ nav: ../",
                " \t\t\t\t\t\t\tthe development process.  The mailing list was active until the code",
                "-\t\t\t\t\t\t\tbase was transfered to GitHub in late 2012. Every commit to this earlier",
                "+\t\t\t\t\t\t\tbase was transferred to GitHub in late 2012. Every commit to this earlier",
                " \t\t\t\t\t\t\tCVS repository sent out an email with the log message and links to diffs.",
                "diff --git a/docs/development/website.html b/docs/development/website.html",
                "index 68e6755c..559d3e85 100644",
                "--- a/docs/development/website.html",
                "+++ b/docs/development/website.html",
                "@@ -29,3 +29,3 @@ nav: ../",
                " \t\t\t\t\t\t\teasy to maintain and modular in nature. Templates are used from the _layout",
                "-\t\t\t\t\t\t\tand _includes directories which are then used in conjuction with content that",
                "+\t\t\t\t\t\t\tand _includes directories which are then used in conjunction with content that",
                " \t\t\t\t\t\t\tis created with <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\">Markdown</a>,",
                "@@ -65,2 +65,2 @@ nav: ../",
                " \t\t\t\t\t</div>",
                "-\t\t\t\t</div> <!-- pgContentWrap -->",
                "\\ No newline at end of file",
                "+\t\t\t\t</div> <!-- pgContentWrap -->",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/copy/CopyIn.java b/pgjdbc/src/main/java/org/postgresql/copy/CopyIn.java",
                "index a49809af..73671bb0 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/copy/CopyIn.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/copy/CopyIn.java",
                "@@ -35,3 +35,3 @@ public interface CopyIn extends CopyOperation {",
                "   /**",
                "-   * Finishes copy operation succesfully.",
                "+   * Finishes copy operation successfully.",
                "    *",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/copy/CopyOperation.java b/pgjdbc/src/main/java/org/postgresql/copy/CopyOperation.java",
                "index 9fd9c4e2..239c629b 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/copy/CopyOperation.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/copy/CopyOperation.java",
                "@@ -44,3 +44,3 @@ public interface CopyOperation {",
                "   /**",
                "-   * After succesful end of copy, returns the number of database records handled in that operation.",
                "+   * After successful end of copy, returns the number of database records handled in that operation.",
                "    * Only implemented in PostgreSQL server version 8.2 and up. Otherwise, returns -1.",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/core/VisibleBufferedInputStream.java b/pgjdbc/src/main/java/org/postgresql/core/VisibleBufferedInputStream.java",
                "index d80ebe1e..90854d44 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/core/VisibleBufferedInputStream.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/core/VisibleBufferedInputStream.java",
                "@@ -164,3 +164,3 @@ public class VisibleBufferedInputStream extends InputStream {",
                "   /**",
                "-   * Moves bytes from the buffer to the begining of the destination buffer. Also sets the index and",
                "+   * Moves bytes from the buffer to the beginning of the destination buffer. Also sets the index and",
                "    * endIndex variables.",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java b/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java",
                "index 62030e50..387a9ac1 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java",
                "@@ -313,3 +313,3 @@ public class QueryExecutorImpl extends QueryExecutorBase {",
                "         // BinaryStream that cannot provide the amount",
                "-        // of data claimed by the length arugment, and",
                "+        // of data claimed by the length argument, and",
                "         // a BinaryStream that throws an Exception",
                "@@ -416,3 +416,3 @@ public class QueryExecutorImpl extends QueryExecutorBase {",
                "   // Our message size estimation is coarse, and disregards asynchronous",
                "-  // notifications, warnings/info/debug messages, etc, so the repsonse size may be",
                "+  // notifications, warnings/info/debug messages, etc, so the response size may be",
                "   // quite different from the 250 bytes assumed here even for queries that don't",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/core/v3/SimpleQuery.java b/pgjdbc/src/main/java/org/postgresql/core/v3/SimpleQuery.java",
                "index 4be7ac43..ad013dca 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/core/v3/SimpleQuery.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/core/v3/SimpleQuery.java",
                "@@ -121,3 +121,3 @@ class SimpleQuery implements Query {",
                "   void setPrepareTypes(int[] paramTypes) {",
                "-    // Remember which parameters were unspecified since the parameters will be overriden later by",
                "+    // Remember which parameters were unspecified since the parameters will be overridden later by",
                "     // ParameterDescription message",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/jdbc/PgResultSet.java b/pgjdbc/src/main/java/org/postgresql/jdbc/PgResultSet.java",
                "index 69ebc3ba..d4a6c907 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/jdbc/PgResultSet.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/jdbc/PgResultSet.java",
                "@@ -1559,3 +1559,3 @@ public class PgResultSet implements ResultSet, org.postgresql.PGRefCursorResultS",
                "-    // this is not stricty jdbc spec, but it will make things much faster if used",
                "+    // this is not strictly jdbc spec, but it will make things much faster if used",
                "     // the user has to select oid, * from table and then we will just use oid",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/largeobject/LargeObject.java b/pgjdbc/src/main/java/org/postgresql/largeobject/LargeObject.java",
                "index 4c689fa1..31d2ad4c 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/largeobject/LargeObject.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/largeobject/LargeObject.java",
                "@@ -46,3 +46,3 @@ public class LargeObject",
                "   /**",
                "-   * Indicates a seek from the begining of a file.",
                "+   * Indicates a seek from the beginning of a file.",
                "    */",
                "@@ -281,3 +281,3 @@ public class LargeObject",
                "    *",
                "-   * @param pos position within object from begining",
                "+   * @param pos position within object from beginning",
                "    * @throws SQLException if a database-access error occurs.",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/replication/fluent/ChainedCommonStreamBuilder.java b/pgjdbc/src/main/java/org/postgresql/replication/fluent/ChainedCommonStreamBuilder.java",
                "index da3e83f4..2a412463 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/replication/fluent/ChainedCommonStreamBuilder.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/replication/fluent/ChainedCommonStreamBuilder.java",
                "@@ -39,3 +39,3 @@ public interface ChainedCommonStreamBuilder<T extends ChainedCommonStreamBuilder",
                "   /**",
                "-   * Specify start position from wich backend will start stream changes. If parameter will not",
                "+   * Specify start position from which backend will start stream changes. If parameter will not",
                "    * specify, streaming starts from restart_lsn. For more details see pg_replication_slots",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java b/pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java",
                "index 40e08df9..4aadabd4 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java",
                "@@ -68,3 +68,3 @@ public class LibPQFactory extends WrappedFactory implements HostnameVerifier {",
                "-      // Determinig the default file location",
                "+      // Determining the default file location",
                "       String pathsep = System.getProperty(\"file.separator\");",
                "diff --git a/pgjdbc/src/main/java/org/postgresql/util/Base64.java b/pgjdbc/src/main/java/org/postgresql/util/Base64.java",
                "index 0ab1d5c1..9ad6a89d 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/util/Base64.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/util/Base64.java",
                "@@ -219,3 +219,3 @@ public class Base64 {",
                "    * along their length by specifying <var>srcOffset</var> and <var>destOffset</var>. This method",
                "-   * does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 3",
                "+   * does not check to make sure your arrays are large enough to accommodate <var>srcOffset</var> + 3",
                "    * for the <var>source</var> array or <var>destOffset</var> + 4 for the <var>destination</var>",
                "@@ -405,3 +405,3 @@ public class Base64 {",
                "    * along their length by specifying <var>srcOffset</var> and <var>destOffset</var>. This method",
                "-   * does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 4",
                "+   * does not check to make sure your arrays are large enough to accommodate <var>srcOffset</var> + 4",
                "    * for the <var>source</var> array or <var>destOffset</var> + 3 for the <var>destination</var>"
            ],
            "changed_files": [
                "docs/community/mailinglist.html",
                "docs/development/website.html",
                "pgjdbc/src/main/java/org/postgresql/copy/CopyIn.java",
                "pgjdbc/src/main/java/org/postgresql/copy/CopyOperation.java",
                "pgjdbc/src/main/java/org/postgresql/core/VisibleBufferedInputStream.java",
                "pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java",
                "pgjdbc/src/main/java/org/postgresql/core/v3/SimpleQuery.java",
                "pgjdbc/src/main/java/org/postgresql/jdbc/PgResultSet.java",
                "pgjdbc/src/main/java/org/postgresql/largeobject/LargeObject.java",
                "pgjdbc/src/main/java/org/postgresql/replication/fluent/ChainedCommonStreamBuilder.java",
                "pgjdbc/src/main/java/org/postgresql/ssl/jdbc4/LibPQFactory.java",
                "pgjdbc/src/main/java/org/postgresql/util/Base64.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1287": "Integrate misspell into Travis checks #1288"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "REL42.2.10",
                "REL42.2.11",
                "REL42.2.12",
                "REL42.2.13",
                "REL42.2.13-rc1",
                "REL42.2.14",
                "REL42.2.14-rc1",
                "REL42.2.15",
                "REL42.2.15-rc1",
                "REL42.2.15-rc2",
                "REL42.2.16",
                "REL42.2.16-rc1",
                "REL42.2.16-rc2",
                "REL42.2.17",
                "REL42.2.17-rc1",
                "REL42.2.18",
                "REL42.2.18-rc1",
                "REL42.2.19",
                "REL42.2.19-rc1",
                "REL42.2.19-rc2",
                "REL42.2.20",
                "REL42.2.20-rc1",
                "REL42.2.20-rc2",
                "REL42.2.21",
                "REL42.2.21-rc1",
                "REL42.2.21-rc2",
                "REL42.2.22",
                "REL42.2.22-rc1",
                "REL42.2.23",
                "REL42.2.23-rc1",
                "REL42.2.23-rc3",
                "REL42.2.23-rc4",
                "REL42.2.23-rc5",
                "REL42.2.23-rc6",
                "REL42.2.24",
                "REL42.2.24-rc1",
                "REL42.2.24-rc2",
                "REL42.2.25",
                "REL42.2.25-rc1",
                "REL42.2.26",
                "REL42.2.26-rc1",
                "REL42.2.26-rc2",
                "REL42.2.27",
                "REL42.2.27-rc1",
                "REL42.2.28",
                "REL42.2.28-rc1",
                "REL42.2.29",
                "REL42.2.29-rc1",
                "REL42.2.30-rc1",
                "REL42.2.5",
                "REL42.2.6",
                "REL42.2.7",
                "REL42.2.8",
                "REL42.2.9",
                "REL42.3.0",
                "REL42.3.0-rc1",
                "REL42.3.0-rc2",
                "REL42.3.1",
                "REL42.3.1-rc1",
                "REL42.3.1-rc2",
                "REL42.3.10",
                "REL42.3.10-rc1",
                "REL42.3.2",
                "REL42.3.2-rc1",
                "REL42.3.2-rc2",
                "REL42.3.3",
                "REL42.3.3-rc1",
                "REL42.3.4",
                "REL42.3.4-rc1",
                "REL42.3.5",
                "REL42.3.5-rc1",
                "REL42.3.6",
                "REL42.3.6-rc1",
                "REL42.3.7",
                "REL42.3.7-rc1",
                "REL42.3.8",
                "REL42.3.8-rc1",
                "REL42.3.9",
                "REL42.3.9-rc1",
                "REL42.4.0",
                "REL42.4.0-rc1",
                "REL42.4.1",
                "REL42.4.1-rc1",
                "REL42.4.2",
                "REL42.4.2-rc1",
                "REL42.4.3",
                "REL42.4.3-rc1",
                "REL42.4.4",
                "REL42.4.4-rc1",
                "REL42.4.5",
                "REL42.4.5-rc1",
                "REL42.5.0",
                "REL42.5.0-rc1",
                "REL42.5.1",
                "REL42.5.1-rc1",
                "REL42.5.2",
                "REL42.5.2-rc1",
                "REL42.5.2-rc2",
                "REL42.5.3",
                "REL42.5.3-rc1",
                "REL42.5.3-rc2",
                "REL42.5.4",
                "REL42.5.4-rc1",
                "REL42.5.5",
                "REL42.5.5-rc1",
                "REL42.5.6",
                "REL42.5.6-rc1",
                "REL42.6.0",
                "REL42.6.0-rc1",
                "REL42.6.1",
                "REL42.6.1-rc1",
                "REL42.6.2",
                "REL42.6.2-rc2",
                "REL42.7.0",
                "REL42.7.0-rc3",
                "REL42.7.1",
                "REL42.7.1-rc1",
                "REL42.7.1-rc2",
                "REL42.7.2",
                "REL42.7.2-rc1",
                "REL42.7.2-rc2",
                "REL42.7.2-rc3",
                "REL42.7.2-rc4",
                "REL42.7.2-rc5",
                "REL42.7.3",
                "REL42.7.3-rc1",
                "v42.2.13-rc1",
                "v42.3.0-rc1",
                "v42.3.0-rc2",
                "v42.3.0-rc5"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: factory, postgresql",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1287",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c2885dd0cfc793f81e5dd3ed2300bb32476eb14a",
            "repository": "https://github.com/pgjdbc/pgjdbc",
            "timestamp": 1534320331,
            "hunks": 1,
            "message": "fix: IndexOutOfBounds on prepared multistatement with insert values Re-initialize \"isValuesFound and isCurrentReWriteCompatible\" variables so multi-statement prepared sql like INSERT INTO inttable(a) VALUES (?);... could be parsed properly. Previously it identified the second statement as multi-values since isValuesFound was not reset closes #1289",
            "diff": [
                "diff --git a/pgjdbc/src/main/java/org/postgresql/core/Parser.java b/pgjdbc/src/main/java/org/postgresql/core/Parser.java",
                "index c017de0b..993a7f00 100644",
                "--- a/pgjdbc/src/main/java/org/postgresql/core/Parser.java",
                "+++ b/pgjdbc/src/main/java/org/postgresql/core/Parser.java",
                "@@ -178,2 +178,4 @@ public class Parser {",
                "               nativeSql.setLength(0);",
                "+              isValuesFound = false;",
                "+              isCurrentReWriteCompatible = false;",
                "               valuesBraceOpenPosition = -1;"
            ],
            "changed_files": [
                "pgjdbc/src/main/java/org/postgresql/core/Parser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1289": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "REL42.2.10",
                "REL42.2.11",
                "REL42.2.12",
                "REL42.2.13",
                "REL42.2.13-rc1",
                "REL42.2.14",
                "REL42.2.14-rc1",
                "REL42.2.15",
                "REL42.2.15-rc1",
                "REL42.2.15-rc2",
                "REL42.2.16",
                "REL42.2.16-rc1",
                "REL42.2.16-rc2",
                "REL42.2.17",
                "REL42.2.17-rc1",
                "REL42.2.18",
                "REL42.2.18-rc1",
                "REL42.2.19",
                "REL42.2.19-rc1",
                "REL42.2.19-rc2",
                "REL42.2.20",
                "REL42.2.20-rc1",
                "REL42.2.20-rc2",
                "REL42.2.21",
                "REL42.2.21-rc1",
                "REL42.2.21-rc2",
                "REL42.2.22",
                "REL42.2.22-rc1",
                "REL42.2.23",
                "REL42.2.23-rc1",
                "REL42.2.23-rc3",
                "REL42.2.23-rc4",
                "REL42.2.23-rc5",
                "REL42.2.23-rc6",
                "REL42.2.24",
                "REL42.2.24-rc1",
                "REL42.2.24-rc2",
                "REL42.2.25",
                "REL42.2.25-rc1",
                "REL42.2.26",
                "REL42.2.26-rc1",
                "REL42.2.26-rc2",
                "REL42.2.27",
                "REL42.2.27-rc1",
                "REL42.2.28",
                "REL42.2.28-rc1",
                "REL42.2.29",
                "REL42.2.29-rc1",
                "REL42.2.30-rc1",
                "REL42.2.5",
                "REL42.2.6",
                "REL42.2.7",
                "REL42.2.8",
                "REL42.2.9",
                "REL42.3.0",
                "REL42.3.0-rc1",
                "REL42.3.0-rc2",
                "REL42.3.1",
                "REL42.3.1-rc1",
                "REL42.3.1-rc2",
                "REL42.3.10",
                "REL42.3.10-rc1",
                "REL42.3.2",
                "REL42.3.2-rc1",
                "REL42.3.2-rc2",
                "REL42.3.3",
                "REL42.3.3-rc1",
                "REL42.3.4",
                "REL42.3.4-rc1",
                "REL42.3.5",
                "REL42.3.5-rc1",
                "REL42.3.6",
                "REL42.3.6-rc1",
                "REL42.3.7",
                "REL42.3.7-rc1",
                "REL42.3.8",
                "REL42.3.8-rc1",
                "REL42.3.9",
                "REL42.3.9-rc1",
                "REL42.4.0",
                "REL42.4.0-rc1",
                "REL42.4.1",
                "REL42.4.1-rc1",
                "REL42.4.2",
                "REL42.4.2-rc1",
                "REL42.4.3",
                "REL42.4.3-rc1",
                "REL42.4.4",
                "REL42.4.4-rc1",
                "REL42.4.5",
                "REL42.4.5-rc1",
                "REL42.5.0",
                "REL42.5.0-rc1",
                "REL42.5.1",
                "REL42.5.1-rc1",
                "REL42.5.2",
                "REL42.5.2-rc1",
                "REL42.5.2-rc2",
                "REL42.5.3",
                "REL42.5.3-rc1",
                "REL42.5.3-rc2",
                "REL42.5.4",
                "REL42.5.4-rc1",
                "REL42.5.5",
                "REL42.5.5-rc1",
                "REL42.5.6",
                "REL42.5.6-rc1",
                "REL42.6.0",
                "REL42.6.0-rc1",
                "REL42.6.1",
                "REL42.6.1-rc1",
                "REL42.6.2",
                "REL42.6.2-rc2",
                "REL42.7.0",
                "REL42.7.0-rc3",
                "REL42.7.1",
                "REL42.7.1-rc1",
                "REL42.7.1-rc2",
                "REL42.7.2",
                "REL42.7.2-rc1",
                "REL42.7.2-rc2",
                "REL42.7.2-rc3",
                "REL42.7.2-rc4",
                "REL42.7.2-rc5",
                "REL42.7.3",
                "REL42.7.3-rc1",
                "v42.2.13-rc1",
                "v42.3.0-rc1",
                "v42.3.0-rc2",
                "v42.3.0-rc5"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: postgresql",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1289",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "556c93d35cc7f27abf2a98f087a85a76e7363c55",
            "repository": "https://github.com/pgjdbc/pgjdbc",
            "timestamp": 1535844709,
            "hunks": 3,
            "message": "Update mailinglist.html the postgresql project is using @lists.postgresql.org now  Also removed references to pg-foundry should probably fix where commits go.",
            "diff": [
                "diff --git a/docs/community/mailinglist.html b/docs/community/mailinglist.html",
                "index 3997a37e..74e0bad0 100644",
                "--- a/docs/community/mailinglist.html",
                "+++ b/docs/community/mailinglist.html",
                "@@ -16,4 +16,3 @@ nav: ../",
                " \t\t\t\t\t\t\t\t<li><a href=\"#before\">Before Mailing Anyone</a></li>",
                "-\t\t\t\t\t\t\t\t<li><a href=\"#general\">General List - pgsql-jdbc@postgresql.org</a></li>",
                "-\t\t\t\t\t\t\t\t<li><a href=\"#commits\">Commit Messages - jdbc-commits@pgfoundry.org</a></li>",
                "+\t\t\t\t\t\t\t\t<li><a href=\"#general\">General List - pgsql-jdbc@lists.postgresql.org</a></li>",
                " \t\t\t\t\t\t\t</ul>",
                "@@ -71,12 +70,4 @@ nav: ../",
                " \t\t\t\t\t<a name=\"commits\"></a>",
                "-\t\t\t\t\t<h2 class=\"underlined_10\">Commit Messages - jdbc-commits@pgfoundry.org</h2>",
                "+\t\t\t\t\t<h2 class=\"underlined_10\">Commit Messages</h2>",
                " \t\t\t\t\t<div>",
                "-\t\t\t\t\t\t<p>",
                "-\t\t\t\t\t\t\tThis mailing list is for people interested in carefully monitoring",
                "-\t\t\t\t\t\t\tthe development process.  The mailing list was active until the code",
                "-\t\t\t\t\t\t\tbase was transferred to GitHub in late 2012. Every commit to this earlier",
                "-\t\t\t\t\t\t\tCVS repository sent out an email with the log message and links to diffs.",
                "-\t\t\t\t\t\t\tSo the archive of this list, <a href=\"http://lists.pgfoundry.org/mailman/listinfo/jdbc-commits\" target=\"_blank\">pgfoundry site</a>,",
                "-\t\t\t\t\t\t\tholds the history of activity with the driver prior to 2013.",
                "-\t\t\t\t\t\t</p>",
                " \t\t\t\t\t\t<p>"
            ],
            "changed_files": [
                "docs/community/mailinglist.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "REL42.2.10",
                "REL42.2.11",
                "REL42.2.12",
                "REL42.2.13",
                "REL42.2.13-rc1",
                "REL42.2.14",
                "REL42.2.14-rc1",
                "REL42.2.15",
                "REL42.2.15-rc1",
                "REL42.2.15-rc2",
                "REL42.2.16",
                "REL42.2.16-rc1",
                "REL42.2.16-rc2",
                "REL42.2.17",
                "REL42.2.17-rc1",
                "REL42.2.18",
                "REL42.2.18-rc1",
                "REL42.2.19",
                "REL42.2.19-rc1",
                "REL42.2.19-rc2",
                "REL42.2.20",
                "REL42.2.20-rc1",
                "REL42.2.20-rc2",
                "REL42.2.21",
                "REL42.2.21-rc1",
                "REL42.2.21-rc2",
                "REL42.2.22",
                "REL42.2.22-rc1",
                "REL42.2.23",
                "REL42.2.23-rc1",
                "REL42.2.23-rc3",
                "REL42.2.23-rc4",
                "REL42.2.23-rc5",
                "REL42.2.23-rc6",
                "REL42.2.24",
                "REL42.2.24-rc1",
                "REL42.2.24-rc2",
                "REL42.2.25",
                "REL42.2.25-rc1",
                "REL42.2.26",
                "REL42.2.26-rc1",
                "REL42.2.26-rc2",
                "REL42.2.27",
                "REL42.2.27-rc1",
                "REL42.2.28",
                "REL42.2.28-rc1",
                "REL42.2.29",
                "REL42.2.29-rc1",
                "REL42.2.30-rc1",
                "REL42.2.6",
                "REL42.2.7",
                "REL42.2.8",
                "REL42.2.9",
                "REL42.3.0",
                "REL42.3.0-rc1",
                "REL42.3.0-rc2",
                "REL42.3.1",
                "REL42.3.1-rc1",
                "REL42.3.1-rc2",
                "REL42.3.10",
                "REL42.3.10-rc1",
                "REL42.3.2",
                "REL42.3.2-rc1",
                "REL42.3.2-rc2",
                "REL42.3.3",
                "REL42.3.3-rc1",
                "REL42.3.4",
                "REL42.3.4-rc1",
                "REL42.3.5",
                "REL42.3.5-rc1",
                "REL42.3.6",
                "REL42.3.6-rc1",
                "REL42.3.7",
                "REL42.3.7-rc1",
                "REL42.3.8",
                "REL42.3.8-rc1",
                "REL42.3.9",
                "REL42.3.9-rc1",
                "REL42.4.0",
                "REL42.4.0-rc1",
                "REL42.4.1",
                "REL42.4.1-rc1",
                "REL42.4.2",
                "REL42.4.2-rc1",
                "REL42.4.3",
                "REL42.4.3-rc1",
                "REL42.4.4",
                "REL42.4.4-rc1",
                "REL42.4.5",
                "REL42.4.5-rc1",
                "REL42.5.0",
                "REL42.5.0-rc1",
                "REL42.5.1",
                "REL42.5.1-rc1",
                "REL42.5.2",
                "REL42.5.2-rc1",
                "REL42.5.2-rc2",
                "REL42.5.3",
                "REL42.5.3-rc1",
                "REL42.5.3-rc2",
                "REL42.5.4",
                "REL42.5.4-rc1",
                "REL42.5.5",
                "REL42.5.5-rc1",
                "REL42.5.6",
                "REL42.5.6-rc1",
                "REL42.6.0",
                "REL42.6.0-rc1",
                "REL42.6.1",
                "REL42.6.1-rc1",
                "REL42.6.2",
                "REL42.6.2-rc2",
                "REL42.7.0",
                "REL42.7.0-rc3",
                "REL42.7.1",
                "REL42.7.1-rc1",
                "REL42.7.1-rc2",
                "REL42.7.2",
                "REL42.7.2-rc1",
                "REL42.7.2-rc2",
                "REL42.7.2-rc3",
                "REL42.7.2-rc4",
                "REL42.7.2-rc5",
                "REL42.7.3",
                "REL42.7.3-rc1",
                "v42.2.13-rc1",
                "v42.3.0-rc1",
                "v42.3.0-rc2",
                "v42.3.0-rc5"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: postgresql",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a1a5ae4f2283d4557f36756d1a0228310a3acccb",
            "repository": "https://github.com/pgjdbc/pgjdbc",
            "timestamp": 1535384310,
            "hunks": 4,
            "message": "[maven-release-plugin] prepare release REL42.2.5",
            "diff": [
                "diff --git a/pgjdbc/pom.xml b/pgjdbc/pom.xml",
                "index 2d835734..03a60912 100644",
                "--- a/pgjdbc/pom.xml",
                "+++ b/pgjdbc/pom.xml",
                "@@ -12,3 +12,3 @@",
                "   <name>PostgreSQL JDBC Driver - JDBC 4.2</name>",
                "-  <version>42.2.5-SNAPSHOT</version>",
                "+  <version>42.2.5</version>",
                "   <description>Java JDBC 4.2 (JRE 8+) driver for PostgreSQL database</description>",
                "@@ -327,2 +327,6 @@",
                "   </build>",
                "+",
                "+  <scm>",
                "+    <tag>REL42.2.5</tag>",
                "+  </scm>",
                " </project>",
                "diff --git a/pom.xml b/pom.xml",
                "index 95e94c15..2fb34844 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -11,3 +11,3 @@",
                "   <name>PostgreSQL JDBC Driver aggregate</name>",
                "-  <version>42.2.5-SNAPSHOT</version>",
                "+  <version>42.2.5</version>",
                "   <description>PgJDBC aggregate project</description>",
                "@@ -24,3 +24,3 @@",
                "     <developerConnection>scm:git:git@github.com:pgjdbc/pgjdbc.git</developerConnection>",
                "-    <tag>HEAD</tag>",
                "+    <tag>REL42.2.5</tag>",
                "   </scm>"
            ],
            "changed_files": [
                "pgjdbc/pom.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "REL42.2.10",
                "REL42.2.11",
                "REL42.2.12",
                "REL42.2.13",
                "REL42.2.13-rc1",
                "REL42.2.14",
                "REL42.2.14-rc1",
                "REL42.2.15",
                "REL42.2.15-rc1",
                "REL42.2.15-rc2",
                "REL42.2.16",
                "REL42.2.16-rc1",
                "REL42.2.16-rc2",
                "REL42.2.17",
                "REL42.2.17-rc1",
                "REL42.2.18",
                "REL42.2.18-rc1",
                "REL42.2.19",
                "REL42.2.19-rc1",
                "REL42.2.19-rc2",
                "REL42.2.20",
                "REL42.2.20-rc1",
                "REL42.2.20-rc2",
                "REL42.2.21",
                "REL42.2.21-rc1",
                "REL42.2.21-rc2",
                "REL42.2.22",
                "REL42.2.22-rc1",
                "REL42.2.23",
                "REL42.2.23-rc1",
                "REL42.2.23-rc3",
                "REL42.2.23-rc4",
                "REL42.2.23-rc5",
                "REL42.2.23-rc6",
                "REL42.2.24",
                "REL42.2.24-rc1",
                "REL42.2.24-rc2",
                "REL42.2.25",
                "REL42.2.25-rc1",
                "REL42.2.26",
                "REL42.2.26-rc1",
                "REL42.2.26-rc2",
                "REL42.2.27",
                "REL42.2.27-rc1",
                "REL42.2.28",
                "REL42.2.28-rc1",
                "REL42.2.29",
                "REL42.2.29-rc1",
                "REL42.2.30-rc1",
                "REL42.2.5",
                "REL42.2.6",
                "REL42.2.7",
                "REL42.2.8",
                "REL42.2.9",
                "REL42.3.0",
                "REL42.3.0-rc1",
                "REL42.3.0-rc2",
                "REL42.3.1",
                "REL42.3.1-rc1",
                "REL42.3.1-rc2",
                "REL42.3.10",
                "REL42.3.10-rc1",
                "REL42.3.2",
                "REL42.3.2-rc1",
                "REL42.3.2-rc2",
                "REL42.3.3",
                "REL42.3.3-rc1",
                "REL42.3.4",
                "REL42.3.4-rc1",
                "REL42.3.5",
                "REL42.3.5-rc1",
                "REL42.3.6",
                "REL42.3.6-rc1",
                "REL42.3.7",
                "REL42.3.7-rc1",
                "REL42.3.8",
                "REL42.3.8-rc1",
                "REL42.3.9",
                "REL42.3.9-rc1",
                "REL42.4.0",
                "REL42.4.0-rc1",
                "REL42.4.1",
                "REL42.4.1-rc1",
                "REL42.4.2",
                "REL42.4.2-rc1",
                "REL42.4.3",
                "REL42.4.3-rc1",
                "REL42.4.4",
                "REL42.4.4-rc1",
                "REL42.4.5",
                "REL42.4.5-rc1",
                "REL42.5.0",
                "REL42.5.0-rc1",
                "REL42.5.1",
                "REL42.5.1-rc1",
                "REL42.5.2",
                "REL42.5.2-rc1",
                "REL42.5.2-rc2",
                "REL42.5.3",
                "REL42.5.3-rc1",
                "REL42.5.3-rc2",
                "REL42.5.4",
                "REL42.5.4-rc1",
                "REL42.5.5",
                "REL42.5.5-rc1",
                "REL42.5.6",
                "REL42.5.6-rc1",
                "REL42.6.0",
                "REL42.6.0-rc1",
                "REL42.6.1",
                "REL42.6.1-rc1",
                "REL42.6.2",
                "REL42.6.2-rc2",
                "REL42.7.0",
                "REL42.7.0-rc3",
                "REL42.7.1",
                "REL42.7.1-rc1",
                "REL42.7.1-rc2",
                "REL42.7.2",
                "REL42.7.2-rc1",
                "REL42.7.2-rc2",
                "REL42.7.2-rc3",
                "REL42.7.2-rc4",
                "REL42.7.2-rc5",
                "REL42.7.3",
                "REL42.7.3-rc1",
                "v42.2.13-rc1",
                "v42.3.0-rc1",
                "v42.3.0-rc2",
                "v42.3.0-rc5"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "156db4d804931f0b82c289b8b3491f197b27aec9",
            "repository": "https://github.com/pgjdbc/pgjdbc",
            "timestamp": 1535384315,
            "hunks": 4,
            "message": "[maven-release-plugin] prepare for next development iteration",
            "diff": [
                "diff --git a/pgjdbc/pom.xml b/pgjdbc/pom.xml",
                "index 03a60912..43c90e7d 100644",
                "--- a/pgjdbc/pom.xml",
                "+++ b/pgjdbc/pom.xml",
                "@@ -12,3 +12,3 @@",
                "   <name>PostgreSQL JDBC Driver - JDBC 4.2</name>",
                "-  <version>42.2.5</version>",
                "+  <version>42.2.6-SNAPSHOT</version>",
                "   <description>Java JDBC 4.2 (JRE 8+) driver for PostgreSQL database</description>",
                "@@ -327,6 +327,2 @@",
                "   </build>",
                "-",
                "-  <scm>",
                "-    <tag>REL42.2.5</tag>",
                "-  </scm>",
                " </project>",
                "diff --git a/pom.xml b/pom.xml",
                "index 2fb34844..740c5280 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -11,3 +11,3 @@",
                "   <name>PostgreSQL JDBC Driver aggregate</name>",
                "-  <version>42.2.5</version>",
                "+  <version>42.2.6-SNAPSHOT</version>",
                "   <description>PgJDBC aggregate project</description>",
                "@@ -24,3 +24,3 @@",
                "     <developerConnection>scm:git:git@github.com:pgjdbc/pgjdbc.git</developerConnection>",
                "-    <tag>REL42.2.5</tag>",
                "+    <tag>HEAD</tag>",
                "   </scm>"
            ],
            "changed_files": [
                "pgjdbc/pom.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "REL42.2.10",
                "REL42.2.11",
                "REL42.2.12",
                "REL42.2.13",
                "REL42.2.13-rc1",
                "REL42.2.14",
                "REL42.2.14-rc1",
                "REL42.2.15",
                "REL42.2.15-rc1",
                "REL42.2.15-rc2",
                "REL42.2.16",
                "REL42.2.16-rc1",
                "REL42.2.16-rc2",
                "REL42.2.17",
                "REL42.2.17-rc1",
                "REL42.2.18",
                "REL42.2.18-rc1",
                "REL42.2.19",
                "REL42.2.19-rc1",
                "REL42.2.19-rc2",
                "REL42.2.20",
                "REL42.2.20-rc1",
                "REL42.2.20-rc2",
                "REL42.2.21",
                "REL42.2.21-rc1",
                "REL42.2.21-rc2",
                "REL42.2.22",
                "REL42.2.22-rc1",
                "REL42.2.23",
                "REL42.2.23-rc1",
                "REL42.2.23-rc3",
                "REL42.2.23-rc4",
                "REL42.2.23-rc5",
                "REL42.2.23-rc6",
                "REL42.2.24",
                "REL42.2.24-rc1",
                "REL42.2.24-rc2",
                "REL42.2.25",
                "REL42.2.25-rc1",
                "REL42.2.26",
                "REL42.2.26-rc1",
                "REL42.2.26-rc2",
                "REL42.2.27",
                "REL42.2.27-rc1",
                "REL42.2.28",
                "REL42.2.28-rc1",
                "REL42.2.29",
                "REL42.2.29-rc1",
                "REL42.2.30-rc1",
                "REL42.2.6",
                "REL42.2.7",
                "REL42.2.8",
                "REL42.2.9",
                "REL42.3.0",
                "REL42.3.0-rc1",
                "REL42.3.0-rc2",
                "REL42.3.1",
                "REL42.3.1-rc1",
                "REL42.3.1-rc2",
                "REL42.3.10",
                "REL42.3.10-rc1",
                "REL42.3.2",
                "REL42.3.2-rc1",
                "REL42.3.2-rc2",
                "REL42.3.3",
                "REL42.3.3-rc1",
                "REL42.3.4",
                "REL42.3.4-rc1",
                "REL42.3.5",
                "REL42.3.5-rc1",
                "REL42.3.6",
                "REL42.3.6-rc1",
                "REL42.3.7",
                "REL42.3.7-rc1",
                "REL42.3.8",
                "REL42.3.8-rc1",
                "REL42.3.9",
                "REL42.3.9-rc1",
                "REL42.4.0",
                "REL42.4.0-rc1",
                "REL42.4.1",
                "REL42.4.1-rc1",
                "REL42.4.2",
                "REL42.4.2-rc1",
                "REL42.4.3",
                "REL42.4.3-rc1",
                "REL42.4.4",
                "REL42.4.4-rc1",
                "REL42.4.5",
                "REL42.4.5-rc1",
                "REL42.5.0",
                "REL42.5.0-rc1",
                "REL42.5.1",
                "REL42.5.1-rc1",
                "REL42.5.2",
                "REL42.5.2-rc1",
                "REL42.5.2-rc2",
                "REL42.5.3",
                "REL42.5.3-rc1",
                "REL42.5.3-rc2",
                "REL42.5.4",
                "REL42.5.4-rc1",
                "REL42.5.5",
                "REL42.5.5-rc1",
                "REL42.5.6",
                "REL42.5.6-rc1",
                "REL42.6.0",
                "REL42.6.0-rc1",
                "REL42.6.1",
                "REL42.6.1-rc1",
                "REL42.6.2",
                "REL42.6.2-rc2",
                "REL42.7.0",
                "REL42.7.0-rc3",
                "REL42.7.1",
                "REL42.7.1-rc1",
                "REL42.7.1-rc2",
                "REL42.7.2",
                "REL42.7.2-rc1",
                "REL42.7.2-rc2",
                "REL42.7.2-rc3",
                "REL42.7.2-rc4",
                "REL42.7.2-rc5",
                "REL42.7.3",
                "REL42.7.3-rc1",
                "v42.2.13-rc1",
                "v42.3.0-rc1",
                "v42.3.0-rc2",
                "v42.3.0-rc5"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c8a639edbd0cf39453048f1fd7d9412ec8e09293",
            "repository": "https://github.com/pgjdbc/pgjdbc",
            "timestamp": 1535383387,
            "hunks": 3,
            "message": "docs: update site for 42.2.5",
            "diff": [
                "diff --git a/contributors.json b/contributors.json",
                "index bc75010f..5a43aa20 100644",
                "--- a/contributors.json",
                "+++ b/contributors.json",
                "@@ -10,2 +10,3 @@",
                "    \"Christian Ullrich\" : \"https://github.com/chrullrich\",",
                "+   \"Christoph Berg\" : \"https://github.com/ChristophBerg\",",
                "    \"Christopher Deckers\" : \"https://github.com/Chrriis\",",
                "@@ -30,3 +31,5 @@",
                "    \"Jorge Solorzano\" : \"https://github.com/jorsol\",",
                "+   \"Kazuhiro Sera\" : \"https://github.com/seratch\",",
                "    \"KimBisgaardDmi\" : \"https://github.com/KimBisgaardDmi\",",
                "+   \"Kyotaro Horiguchi\" : \"https://github.com/horiguti\",",
                "    \"Laurenz Albe\" : \"https://github.com/laurenz\","
            ],
            "changed_files": [
                "contributors.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "REL42.2.10",
                "REL42.2.11",
                "REL42.2.12",
                "REL42.2.13",
                "REL42.2.13-rc1",
                "REL42.2.14",
                "REL42.2.14-rc1",
                "REL42.2.15",
                "REL42.2.15-rc1",
                "REL42.2.15-rc2",
                "REL42.2.16",
                "REL42.2.16-rc1",
                "REL42.2.16-rc2",
                "REL42.2.17",
                "REL42.2.17-rc1",
                "REL42.2.18",
                "REL42.2.18-rc1",
                "REL42.2.19",
                "REL42.2.19-rc1",
                "REL42.2.19-rc2",
                "REL42.2.20",
                "REL42.2.20-rc1",
                "REL42.2.20-rc2",
                "REL42.2.21",
                "REL42.2.21-rc1",
                "REL42.2.21-rc2",
                "REL42.2.22",
                "REL42.2.22-rc1",
                "REL42.2.23",
                "REL42.2.23-rc1",
                "REL42.2.23-rc3",
                "REL42.2.23-rc4",
                "REL42.2.23-rc5",
                "REL42.2.23-rc6",
                "REL42.2.24",
                "REL42.2.24-rc1",
                "REL42.2.24-rc2",
                "REL42.2.25",
                "REL42.2.25-rc1",
                "REL42.2.26",
                "REL42.2.26-rc1",
                "REL42.2.26-rc2",
                "REL42.2.27",
                "REL42.2.27-rc1",
                "REL42.2.28",
                "REL42.2.28-rc1",
                "REL42.2.29",
                "REL42.2.29-rc1",
                "REL42.2.30-rc1",
                "REL42.2.5",
                "REL42.2.6",
                "REL42.2.7",
                "REL42.2.8",
                "REL42.2.9",
                "REL42.3.0",
                "REL42.3.0-rc1",
                "REL42.3.0-rc2",
                "REL42.3.1",
                "REL42.3.1-rc1",
                "REL42.3.1-rc2",
                "REL42.3.10",
                "REL42.3.10-rc1",
                "REL42.3.2",
                "REL42.3.2-rc1",
                "REL42.3.2-rc2",
                "REL42.3.3",
                "REL42.3.3-rc1",
                "REL42.3.4",
                "REL42.3.4-rc1",
                "REL42.3.5",
                "REL42.3.5-rc1",
                "REL42.3.6",
                "REL42.3.6-rc1",
                "REL42.3.7",
                "REL42.3.7-rc1",
                "REL42.3.8",
                "REL42.3.8-rc1",
                "REL42.3.9",
                "REL42.3.9-rc1",
                "REL42.4.0",
                "REL42.4.0-rc1",
                "REL42.4.1",
                "REL42.4.1-rc1",
                "REL42.4.2",
                "REL42.4.2-rc1",
                "REL42.4.3",
                "REL42.4.3-rc1",
                "REL42.4.4",
                "REL42.4.4-rc1",
                "REL42.4.5",
                "REL42.4.5-rc1",
                "REL42.5.0",
                "REL42.5.0-rc1",
                "REL42.5.1",
                "REL42.5.1-rc1",
                "REL42.5.2",
                "REL42.5.2-rc1",
                "REL42.5.2-rc2",
                "REL42.5.3",
                "REL42.5.3-rc1",
                "REL42.5.3-rc2",
                "REL42.5.4",
                "REL42.5.4-rc1",
                "REL42.5.5",
                "REL42.5.5-rc1",
                "REL42.5.6",
                "REL42.5.6-rc1",
                "REL42.6.0",
                "REL42.6.0-rc1",
                "REL42.6.1",
                "REL42.6.1-rc1",
                "REL42.6.2",
                "REL42.6.2-rc2",
                "REL42.7.0",
                "REL42.7.0-rc3",
                "REL42.7.1",
                "REL42.7.1-rc1",
                "REL42.7.1-rc2",
                "REL42.7.2",
                "REL42.7.2-rc1",
                "REL42.7.2-rc2",
                "REL42.7.2-rc3",
                "REL42.7.2-rc4",
                "REL42.7.2-rc5",
                "REL42.7.3",
                "REL42.7.3-rc1",
                "v42.2.13-rc1",
                "v42.3.0-rc1",
                "v42.3.0-rc2",
                "v42.3.0-rc5"
            ],
            "matched_rules": []
        }
    ]
}
