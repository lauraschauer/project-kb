{
    "advisory_record": {
        "cve_id": "CVE-2018-1275",
        "description": "Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.16 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack. This CVE addresses the partial fix for CVE-2018-1270 in the 4.3.x branch of the Spring Framework.",
        "reserved_timestamp": 1512518400,
        "published_timestamp": 1523232000,
        "updated_timestamp": 1634726284,
        "repository_url": null,
        "references": {
            "": 51,
            "https://access.redhat.com/support/": 15,
            "https://access.redhat.com/downloads/": 12,
            "https://access.redhat.com/errata/": 9,
            "https://access.redhat.com/labs/": 9,
            "https://access.redhat.com/management/": 6,
            "https://access.redhat.com/": 6,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 6,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 6,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 6,
            "https://access.redhat.com/products/": 6,
            "https://access.redhat.com/documentation": 6,
            "https://access.redhat.com/product-life-cycles/": 6,
            "https://access.redhat.com/security": 6,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 6,
            "https://access.redhat.com/security/security-updates/#/cve": 6,
            "https://access.redhat.com/support/contact/": 6,
            "https://status.redhat.com": 6,
            "https://access.redhat.com/errata/RHSA-2018:2939": 4,
            "https://access.redhat.com/errata/RHSA-2018:1320": 4,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1565307": 4,
            "https://access.redhat.com/downloads/content/package-browser": 3,
            "https://catalog.redhat.com/software/containers/explore/": 3,
            "https://access.redhat.com/articles/1202803": 3,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 3,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 3,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 3,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 3,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 3,
            "https://access.redhat.com/documentation/": 3,
            "https://access.redhat.com/security/": 3,
            "https://access.redhat.com/security/vulnerabilities": 3,
            "https://access.redhat.com/security/data": 3,
            "https://access.redhat.com/security/security-updates/#/security-labs": 3,
            "https://access.redhat.com/security/updates/backporting/": 3,
            "https://access.redhat.com/support/cases/": 3,
            "https://access.redhat.com/support/cases/#/troubleshoot": 3,
            "https://access.redhat.com/community": 3,
            "https://access.redhat.com/community/": 3,
            "https://access.redhat.com/discussions/": 3,
            "https://access.redhat.com/announcements/": 3,
            "https://access.redhat.com/accelerators/": 3,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 3,
            "https://cloud.redhat.com/insights": 3,
            "https://access.redhat.com/changeLanguage?language=en": 3,
            "https://access.redhat.com/changeLanguage?language=fr": 3,
            "https://access.redhat.com/changeLanguage?language=ko": 3,
            "https://access.redhat.com/changeLanguage?language=ja": 3,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 3,
            "https://access.redhat.com/products/red-hat-satellite/": 3,
            "https://access.redhat.com/products/red-hat-subscription-management/": 3,
            "https://access.redhat.com/products/red-hat-insights/": 3,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 3,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 3,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 3,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 3,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 3,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 3,
            "https://access.redhat.com/products/red-hat-quay/": 3,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 3,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 3,
            "https://access.redhat.com/products/red-hat-storage/": 3,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 3,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 3,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 3,
            "https://access.redhat.com/products/red-hat-runtimes/": 3,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 3,
            "https://access.redhat.com/products/red-hat-data-grid/": 3,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 3,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 3,
            "https://access.redhat.com/products/spring-boot/": 3,
            "https://access.redhat.com/products/nodejs/": 3,
            "https://access.redhat.com/products/quarkus/": 3,
            "https://access.redhat.com/products/red-hat-application-foundations/": 3,
            "https://access.redhat.com/products/red-hat-fuse/": 3,
            "https://access.redhat.com/products/red-hat-amq/": 3,
            "https://access.redhat.com/products/red-hat-3scale/": 3,
            "https://redhat.com/en": 3,
            "https://twitter.com/RedHat": 3,
            "https://access.redhat.com/management": 3,
            "https://access.redhat.com/support": 3,
            "https://access.redhat.com/support/customer-service": 3,
            "https://access.redhat.com/articles/33844": 3,
            "https://access.redhat.com/help/login_assistance": 3,
            "https://www.redhat.com/en/trust": 3,
            "https://www.redhat.com/en/about/browser-support": 3,
            "https://www.redhat.com/en/about/digital-accessibility": 3,
            "https://access.redhat.com/recognition/": 3,
            "https://access.redhat.com/help/colophon/": 3,
            "https://www.redhat.com/": 3,
            "http://developers.redhat.com/": 3,
            "https://connect.redhat.com/": 3,
            "https://cloud.redhat.com/": 3,
            "https://access.redhat.com/subscription-value": 3,
            "https://www.redhat.com/about/": 3,
            "http://jobs.redhat.com": 3,
            "https://redhat.com/en/about/company": 3,
            "https://redhat.com/en/jobs": 3,
            "https://redhat.com/en/events": 3,
            "https://redhat.com/en/about/office-locations": 3,
            "https://redhat.com/en/contact": 3,
            "https://redhat.com/en/blog": 3,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 3,
            "https://coolstuff.redhat.com/": 3,
            "https://www.redhat.com/en/summit": 3,
            "https://redhat.com/en/about/privacy-policy": 3,
            "https://redhat.com/en/about/terms-use": 3,
            "https://redhat.com/en/about/all-policies-guidelines": 3,
            "https://redhat.com/en/about/digital-accessibility": 3,
            "http://www.securitytracker.com/id/1041301": 2,
            "http://www.securityfocus.com/bid/103771": 2,
            "https://lists.apache.org/thread.html/4ed49b103f64a0cecb38064f26cbf1389afc12124653da2d35166dbe%40%3Cissues.activemq.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/ab825fcade0b49becfa30235b3d54f4a51bb74ea96b6c9adb5d1378c%40%3Cissues.activemq.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/dcf8599b80e43a6b60482607adb76c64672772dc2d9209ae2170f369%40%3Cissues.activemq.apache.org%3E": 2,
            "http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html": 2,
            "http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html": 2,
            "https://www.oracle.com/security-alerts/cpujul2020.html": 2,
            "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html": 2,
            "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html": 2,
            "https://pivotal.io/security/cve-2018-1275": 2,
            "https://www.oracle.com/security-alerts/cpuoct2021.html": 2,
            "https://access.redhat.com/security/cve/CVE-2018-1270": 2,
            "commit::0009806debb578e884f6dc98bd1f2dc668020021": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1548282": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1548289": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1571050": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-1271.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-1275.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-1304.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-1305.html": 2,
            "https://access.redhat.com/security/updates/classification/#critical": 2,
            "https://access.redhat.com/security/team/contact/": 2,
            "https://access.redhat.com/articles/3060411": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1494283": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1549276": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1564405": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1584376": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1607591": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-12617.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1260.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1270.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1336.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-7489.html": 1,
            "https://access.redhat.com/articles/11258": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1564408": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1272.html": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&product=catRhoar.spring.boot&version=1.5.12": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/red_hat_openshift_application_runtimes_release_notes/": 1
        },
        "affected_products": [
            "CVE",
            "STOMP",
            "WebSocket",
            "Framework",
            "Spring Framework",
            "Spring"
        ],
        "versions": {
            "status": "affected",
            "version": "Versions prior to 5.0.5 and 4.3.16"
        },
        "files": [
            "CVE",
            "CVE-2018-1270",
            "STOMP",
            "spring-messaging",
            "in-memory",
            "WebSocket"
        ],
        "keywords": [
            "lead",
            "module",
            "code",
            "endpoint",
            "attacker",
            "stomp",
            "execution",
            "message",
            "broker",
            "branch",
            "framework",
            "memory",
            "address",
            "expose",
            "version",
            "application",
            "websocket",
            "spring",
            "craft",
            "attack",
            "allow",
            "user"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "0009806debb578e884f6dc98bd1f2dc668020021",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523282750,
            "hunks": 11,
            "message": "Re-use EvaluationContext in DefaultSubscriptionRegistry Rather than create a new EvaluationContext instance per evaluation, we now create a statically shared instance, without the root object in it, and re-use it for all evalutations.",
            "diff": [
                "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java",
                "index fbd46ec9c6..a1b39bd48f 100644",
                "--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java",
                "+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java",
                "@@ -28,3 +28,2 @@ import java.util.concurrent.CopyOnWriteArraySet;",
                "-import org.springframework.expression.AccessException;",
                " import org.springframework.expression.EvaluationContext;",
                "@@ -36,3 +35,3 @@ import org.springframework.expression.spel.SpelEvaluationException;",
                " import org.springframework.expression.spel.standard.SpelExpressionParser;",
                "-import org.springframework.expression.spel.support.StandardEvaluationContext;",
                "+import org.springframework.expression.spel.support.SimpleEvaluationContext;",
                " import org.springframework.messaging.Message;",
                "@@ -66,2 +65,6 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                "+\t/** Static evaluation context to reuse */",
                "+\tprivate static EvaluationContext messageEvalContext =",
                "+\t\t\tSimpleEvaluationContext.forPropertyAccessors(new SimpMessageHeaderPropertyAccessor()).build();",
                "+",
                "@@ -193,3 +196,2 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                " \t\t}",
                "-\t\tEvaluationContext context = null;",
                " \t\tMultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>(allMatches.size());",
                "@@ -210,8 +212,4 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                " \t\t\t\t}",
                "-\t\t\t\tif (context == null) {",
                "-\t\t\t\t\tcontext = new StandardEvaluationContext(message);",
                "-\t\t\t\t\tcontext.getPropertyAccessors().add(new SimpMessageHeaderPropertyAccessor());",
                "-\t\t\t\t}",
                " \t\t\t\ttry {",
                "-\t\t\t\t\tif (expression.getValue(context, boolean.class)) {",
                "+\t\t\t\t\tif (Boolean.TRUE.equals(expression.getValue(messageEvalContext, message, Boolean.class))) {",
                " \t\t\t\t\t\tresult.add(sessionId, subId);",
                "@@ -527,3 +525,3 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                " \t\tpublic Class<?>[] getSpecificTargetClasses() {",
                "-\t\t\treturn new Class<?>[] {MessageHeaders.class};",
                "+\t\t\treturn new Class<?>[] {Message.class, MessageHeaders.class};",
                " \t\t}",
                "@@ -536,15 +534,25 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                " \t\t@Override",
                "-\t\tpublic TypedValue read(EvaluationContext context, Object target, String name) throws AccessException {",
                "-\t\t\tMessageHeaders headers = (MessageHeaders) target;",
                "-\t\t\tSimpMessageHeaderAccessor accessor =",
                "-\t\t\t\t\tMessageHeaderAccessor.getAccessor(headers, SimpMessageHeaderAccessor.class);",
                "+\t\tpublic TypedValue read(EvaluationContext context, Object target, String name) {",
                " \t\t\tObject value;",
                "-\t\t\tif (\"destination\".equalsIgnoreCase(name)) {",
                "-\t\t\t\tvalue = accessor.getDestination();",
                "+\t\t\tif (target instanceof Message) {",
                "+\t\t\t\tvalue = name.equals(\"headers\") ? ((Message) target).getHeaders() : null;",
                " \t\t\t}",
                "-\t\t\telse {",
                "-\t\t\t\tvalue = accessor.getFirstNativeHeader(name);",
                "-\t\t\t\tif (value == null) {",
                "-\t\t\t\t\tvalue = headers.get(name);",
                "+\t\t\telse if (target instanceof MessageHeaders) {",
                "+\t\t\t\tMessageHeaders headers = (MessageHeaders) target;",
                "+\t\t\t\tSimpMessageHeaderAccessor accessor =",
                "+\t\t\t\t\t\tMessageHeaderAccessor.getAccessor(headers, SimpMessageHeaderAccessor.class);",
                "+\t\t\t\tAssert.state(accessor != null, \"No SimpMessageHeaderAccessor\");",
                "+\t\t\t\tif (\"destination\".equalsIgnoreCase(name)) {",
                "+\t\t\t\t\tvalue = accessor.getDestination();",
                " \t\t\t\t}",
                "+\t\t\t\telse {",
                "+\t\t\t\t\tvalue = accessor.getFirstNativeHeader(name);",
                "+\t\t\t\t\tif (value == null) {",
                "+\t\t\t\t\t\tvalue = headers.get(name);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\telse {",
                "+\t\t\t\t// Should never happen...",
                "+\t\t\t\tthrow new IllegalStateException(\"Expected Message or MessageHeaders.\");",
                " \t\t\t}"
            ],
            "changed_files": [
                "spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: broker",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ff2228fdaf131d57b5c8c5918ee8d07c6dd9bbac",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523937390,
            "hunks": 23,
            "message": "Selector header name is exposed for configuration Issue: SPR-16732",
            "diff": [
                "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java",
                "index 15cbb79179..347857a2f6 100644",
                "--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java",
                "+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java",
                "@@ -46,2 +46,3 @@ import org.springframework.util.MultiValueMap;",
                " import org.springframework.util.PathMatcher;",
                "+import org.springframework.util.StringUtils;",
                "@@ -75,2 +76,3 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                "+\t@Nullable",
                " \tprivate String selectorHeaderName = \"selector\";",
                "@@ -116,7 +118,7 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                " \t/**",
                "-\t * Configure the name of a selector header that a subscription message can",
                "-\t * have in order to filter messages based on their headers. The value of the",
                "-\t * header can use Spring EL expressions against message headers.",
                "-\t * <p>For example the following expression expects a header called \"foo\" to",
                "-\t * have the value \"bar\":",
                "+\t * Configure the name of a header that a subscription message can have for",
                "+\t * the purpose of filtering messages matched to the subscription. The header",
                "+\t * value is expected to be a Spring EL boolean expression to be applied to",
                "+\t * the headers of messages matched to the subscription.",
                "+\t * <p>For example:",
                " \t * <pre>",
                "@@ -124,8 +126,9 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                " \t * </pre>",
                "-\t * <p>By default this is set to \"selector\".",
                "+\t * <p>By default this is set to \"selector\". You can set it to a different",
                "+\t * name, or to {@code null} to turn off support for a selector header.",
                "+\t * @param selectorHeaderName the name to use for a selector header",
                " \t * @since 4.2",
                " \t */",
                "-\tpublic void setSelectorHeaderName(String selectorHeaderName) {",
                "-\t\tAssert.notNull(selectorHeaderName, \"'selectorHeaderName' must not be null\");",
                "-\t\tthis.selectorHeaderName = selectorHeaderName;",
                "+\tpublic void setSelectorHeaderName(@Nullable String selectorHeaderName) {",
                "+\t\tthis.selectorHeaderName = StringUtils.hasText(selectorHeaderName) ? selectorHeaderName : null;",
                " \t}",
                "@@ -133,5 +136,6 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                " \t/**",
                "-\t * Return the name for the selector header.",
                "+\t * Return the name for the selector header name.",
                " \t * @since 4.2",
                " \t */",
                "+\t@Nullable",
                " \tpublic String getSelectorHeaderName() {",
                "@@ -145,16 +149,24 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                "+\t\tExpression expression = getSelectorExpression(message.getHeaders());",
                "+\t\tthis.subscriptionRegistry.addSubscription(sessionId, subsId, destination, expression);",
                "+\t\tthis.destinationCache.updateAfterNewSubscription(destination, sessionId, subsId);",
                "+\t}",
                "+",
                "+\t@Nullable",
                "+\tprivate Expression getSelectorExpression(MessageHeaders headers) {",
                " \t\tExpression expression = null;",
                "-\t\tMessageHeaders headers = message.getHeaders();",
                "-\t\tString selector = SimpMessageHeaderAccessor.getFirstNativeHeader(getSelectorHeaderName(), headers);",
                "-\t\tif (selector != null) {",
                "-\t\t\ttry {",
                "-\t\t\t\texpression = this.expressionParser.parseExpression(selector);",
                "-\t\t\t\tthis.selectorHeaderInUse = true;",
                "-\t\t\t\tif (logger.isTraceEnabled()) {",
                "-\t\t\t\t\tlogger.trace(\"Subscription selector: [\" + selector + \"]\");",
                "+\t\tif (getSelectorHeaderName() != null) {",
                "+\t\t\tString selector = SimpMessageHeaderAccessor.getFirstNativeHeader(getSelectorHeaderName(), headers);",
                "+\t\t\tif (selector != null) {",
                "+\t\t\t\ttry {",
                "+\t\t\t\t\texpression = this.expressionParser.parseExpression(selector);",
                "+\t\t\t\t\tthis.selectorHeaderInUse = true;",
                "+\t\t\t\t\tif (logger.isTraceEnabled()) {",
                "+\t\t\t\t\t\tlogger.trace(\"Subscription selector: [\" + selector + \"]\");",
                "+\t\t\t\t\t}",
                " \t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tcatch (Throwable ex) {",
                "-\t\t\t\tif (logger.isDebugEnabled()) {",
                "-\t\t\t\t\tlogger.debug(\"Failed to parse selector: \" + selector, ex);",
                "+\t\t\t\tcatch (Throwable ex) {",
                "+\t\t\t\t\tif (logger.isDebugEnabled()) {",
                "+\t\t\t\t\t\tlogger.debug(\"Failed to parse selector: \" + selector, ex);",
                "+\t\t\t\t\t}",
                " \t\t\t\t}",
                "@@ -162,4 +174,3 @@ public class DefaultSubscriptionRegistry extends AbstractSubscriptionRegistry {",
                " \t\t}",
                "-\t\tthis.subscriptionRegistry.addSubscription(sessionId, subsId, destination, expression);",
                "-\t\tthis.destinationCache.updateAfterNewSubscription(destination, sessionId, subsId);",
                "+\t\treturn expression;",
                " \t}",
                "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java",
                "index c2b884ffd5..a93e407f54 100644",
                "--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java",
                "+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java",
                "@@ -53,5 +53,2 @@ public class SimpleBrokerMessageHandler extends AbstractBrokerMessageHandler {",
                "-\tprivate final Map<String, SessionInfo> sessions = new ConcurrentHashMap<>();",
                "-",
                "-\tprivate SubscriptionRegistry subscriptionRegistry;",
                "@@ -63,2 +60,5 @@ public class SimpleBrokerMessageHandler extends AbstractBrokerMessageHandler {",
                "+\t@Nullable",
                "+\tprivate String selectorHeaderName = \"selector\";",
                "+",
                " \t@Nullable",
                "@@ -70,6 +70,11 @@ public class SimpleBrokerMessageHandler extends AbstractBrokerMessageHandler {",
                " \t@Nullable",
                "-\tprivate ScheduledFuture<?> heartbeatFuture;",
                "+\tprivate MessageHeaderInitializer headerInitializer;",
                "+",
                "+",
                "+\tprivate SubscriptionRegistry subscriptionRegistry;",
                "+",
                "+\tprivate final Map<String, SessionInfo> sessions = new ConcurrentHashMap<>();",
                " \t@Nullable",
                "-\tprivate MessageHeaderInitializer headerInitializer;",
                "+\tprivate ScheduledFuture<?> heartbeatFuture;",
                "@@ -104,2 +109,3 @@ public class SimpleBrokerMessageHandler extends AbstractBrokerMessageHandler {",
                " \t\tinitCacheLimitToUse();",
                "+\t\tinitSelectorHeaderNameToUse();",
                " \t}",
                "@@ -151,2 +157,29 @@ public class SimpleBrokerMessageHandler extends AbstractBrokerMessageHandler {",
                "+\t/**",
                "+\t * Configure the name of a header that a subscription message can have for",
                "+\t * the purpose of filtering messages matched to the subscription. The header",
                "+\t * value is expected to be a Spring EL boolean expression to be applied to",
                "+\t * the headers of messages matched to the subscription.",
                "+\t * <p>For example:",
                "+\t * <pre>",
                "+\t * headers.foo == 'bar'",
                "+\t * </pre>",
                "+\t * <p>By default this is set to \"selector\". You can set it to a different",
                "+\t * name, or to {@code null} to turn off support for a selector header.",
                "+\t * @param selectorHeaderName the name to use for a selector header",
                "+\t * @since 4.3.17",
                "+\t * @see #setSubscriptionRegistry",
                "+\t * @see DefaultSubscriptionRegistry#setSelectorHeaderName(String)",
                "+\t */",
                "+\tpublic void setSelectorHeaderName(@Nullable String selectorHeaderName) {",
                "+\t\tthis.selectorHeaderName = selectorHeaderName;",
                "+\t\tinitSelectorHeaderNameToUse();",
                "+\t}",
                "+",
                "+\tprivate void initSelectorHeaderNameToUse() {",
                "+\t\tif (this.subscriptionRegistry instanceof DefaultSubscriptionRegistry) {",
                "+\t\t\t((DefaultSubscriptionRegistry) this.subscriptionRegistry).setSelectorHeaderName(this.selectorHeaderName);",
                "+\t\t}",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/config/SimpleBrokerRegistration.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/SimpleBrokerRegistration.java",
                "index bd2d8471ba..53086ecc6e 100644",
                "--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/config/SimpleBrokerRegistration.java",
                "+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/SimpleBrokerRegistration.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -38,2 +38,5 @@ public class SimpleBrokerRegistration extends AbstractBrokerRegistration {",
                "+\t@Nullable",
                "+\tprivate String selectorHeaderName = \"selector\";",
                "+",
                "@@ -70,2 +73,20 @@ public class SimpleBrokerRegistration extends AbstractBrokerRegistration {",
                "+\t/**",
                "+\t * Configure the name of a header that a subscription message can have for",
                "+\t * the purpose of filtering messages matched to the subscription. The header",
                "+\t * value is expected to be a Spring EL boolean expression to be applied to",
                "+\t * the headers of messages matched to the subscription.",
                "+\t * <p>For example:",
                "+\t * <pre>",
                "+\t * headers.foo == 'bar'",
                "+\t * </pre>",
                "+\t * <p>By default this is set to \"selector\". You can set it to a different",
                "+\t * name, or to {@code null} to turn off support for a selector header.",
                "+\t * @param selectorHeaderName the name to use for a selector header",
                "+\t * @since 4.3.17",
                "+\t */",
                "+\tpublic void setSelectorHeaderName(@Nullable String selectorHeaderName) {",
                "+\t\tthis.selectorHeaderName = selectorHeaderName;",
                "+\t}",
                "+",
                "@@ -81,2 +102,3 @@ public class SimpleBrokerRegistration extends AbstractBrokerRegistration {",
                " \t\t}",
                "+\t\thandler.setSelectorHeaderName(this.selectorHeaderName);",
                " \t\treturn handler;",
                "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java",
                "index b8658491a7..65bd02fd04 100644",
                "--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java",
                "+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java",
                "@@ -385,2 +385,6 @@ class MessageBrokerBeanDefinitionParser implements BeanDefinitionParser {",
                " \t\t\t}",
                "+\t\t\tif (simpleBrokerElem.hasAttribute(\"selector-header\")) {",
                "+\t\t\t\tString headerName = simpleBrokerElem.getAttribute(\"selector-header\");",
                "+\t\t\t\tbrokerDef.getPropertyValues().add(\"selectorHeaderName\", headerName);",
                "+\t\t\t}",
                " \t\t}",
                "diff --git a/spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket.xsd b/spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket.xsd",
                "index c6c063bd68..659a0bc5a7 100644",
                "--- a/spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket.xsd",
                "+++ b/spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket.xsd",
                "@@ -386,2 +386,19 @@",
                " \t\t</xsd:attribute>",
                "+\t\t<xsd:attribute name=\"selector-header\" type=\"xsd:string\">",
                "+\t\t\t<xsd:annotation>",
                "+\t\t\t\t<xsd:documentation source=\"java:org.springframework.messaging.simp.stomp.SimpleBrokerMessageHandler\"><![CDATA[",
                "+\tConfigure the name of a header that a subscription message can have for",
                "+\tthe purpose of filtering messages matched to the subscription. The header",
                "+\tvalue is expected to be a Spring EL boolean expression to be applied to",
                "+\tthe headers of messages matched to the subscription.",
                "+",
                "+\tFor example:",
                "+\theaders.foo == 'bar'",
                "+",
                "+\tBy default this is set to \"selector\". You can set it to a different",
                "+\tname, or to \"\" to turn off support for a selector header.",
                "+                ]]></xsd:documentation>",
                "+\t\t\t</xsd:annotation>",
                "+\t\t</xsd:attribute>",
                "+",
                " \t</xsd:complexType>"
            ],
            "changed_files": [
                "spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java",
                "spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java",
                "spring-messaging/src/main/java/org/springframework/messaging/simp/config/SimpleBrokerRegistration.java",
                "spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java",
                "spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket.xsd"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b312a62f643c56ef0a3b830bd6b947d67a844e7d"
                ],
                [
                    "no-tag",
                    "246a6db1cad205ca9b6fca00c544ab7443ba202c"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, spring-websocket/src/main/resources/org/springframework/web/socket/config/spring-websocket.xsd, spring-messaging/src/main/java/org/springframework/messaging/simp/config/SimpleBrokerRegistration.java, spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: expose",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: broker, websocket, message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e2febbdd8c87394efcd2d09aa5aa72ef40a04a5d",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523400935,
            "hunks": 5,
            "message": "Remove unnecessary iterator allocation in type handlers HandlerMethodReturnValueHandlerComposite and AbstractMethodMessageHandler iterate using index over collections implementing RandomAccess to avoid unnecessary iterators.",
            "diff": [
                "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
                "index 76923a748f..ead36e33c1 100644",
                "--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
                "+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
                "@@ -86,3 +86,3 @@ public abstract class AbstractMethodMessageHandler<T>",
                "-\tprivate Collection<String> destinationPrefixes = new ArrayList<>();",
                "+\tprivate final List<String> destinationPrefixes = new ArrayList<>();",
                "@@ -430,3 +430,5 @@ public abstract class AbstractMethodMessageHandler<T>",
                " \t\t}",
                "-\t\tfor (String prefix : this.destinationPrefixes) {",
                "+\t\t// Avoid unnecessary iterator allocation",
                "+\t\tfor (int i = 0, size = this.destinationPrefixes.size(); i < size; i++) {",
                "+\t\t\tString prefix = this.destinationPrefixes.get(i);",
                " \t\t\tif (destination.startsWith(prefix)) {",
                "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java",
                "index f4f7622a06..5caea7474d 100644",
                "--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java",
                "+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java",
                "@@ -73,5 +73,3 @@ public class HandlerMethodArgumentResolverComposite implements HandlerMethodArgu",
                " \t\tif (argumentResolvers != null) {",
                "-\t\t\tfor (HandlerMethodArgumentResolver resolver : argumentResolvers) {",
                "-\t\t\t\tthis.argumentResolvers.add(resolver);",
                "-\t\t\t}",
                "+\t\t\tthis.argumentResolvers.addAll(argumentResolvers);",
                " \t\t}",
                "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java",
                "index 21f779b972..c019167daa 100644",
                "--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java",
                "+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java",
                "@@ -73,5 +73,3 @@ public class HandlerMethodReturnValueHandlerComposite implements AsyncHandlerMet",
                " \t\tif (handlers != null) {",
                "-\t\t\tfor (HandlerMethodReturnValueHandler handler : handlers) {",
                "-\t\t\t\tthis.returnValueHandlers.add(handler);",
                "-\t\t\t}",
                "+\t\t\tthis.returnValueHandlers.addAll(handlers);",
                " \t\t}",
                "@@ -87,3 +85,5 @@ public class HandlerMethodReturnValueHandlerComposite implements AsyncHandlerMet",
                " \tprivate HandlerMethodReturnValueHandler getReturnValueHandler(MethodParameter returnType) {",
                "-\t\tfor (HandlerMethodReturnValueHandler handler : this.returnValueHandlers) {",
                "+\t\t// Avoid allocating an iterator",
                "+\t\tfor (int i = 0, size = this.returnValueHandlers.size(); i < size; i++) {",
                "+\t\t\tHandlerMethodReturnValueHandler handler = this.returnValueHandlers.get(i);",
                " \t\t\tif (handler.supportsReturnType(returnType)) {"
            ],
            "changed_files": [
                "spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
                "spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java",
                "spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0754833b375ec403e1d3b36e7113f9959af9d766",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523732600,
            "hunks": 7,
            "message": "Local XMLUnit dependency declarations with consistent version 2.5.1",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 1ffabc3155..57af5b5d84 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -157,3 +157,2 @@ configure(allprojects) { project ->",
                " \t\ttestCompile(\"org.hamcrest:hamcrest-all:1.3\")",
                "-\t\ttestCompile(\"org.xmlunit:xmlunit-matchers:2.3.0\")",
                " \t\ttestRuntime(\"org.apache.logging.log4j:log4j-core:${log4jVersion}\")",
                "diff --git a/spring-core/spring-core.gradle b/spring-core/spring-core.gradle",
                "index 4eb3faf008..36f5fe3d3a 100644",
                "--- a/spring-core/spring-core.gradle",
                "+++ b/spring-core/spring-core.gradle",
                "@@ -88,4 +88,5 @@ dependencies {",
                " \ttestCompile(\"io.projectreactor:reactor-test\")",
                "-\ttestCompile(\"javax.xml.bind:jaxb-api:2.3.0\")",
                " \ttestCompile(\"org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}\")",
                "+\ttestCompile(\"org.xmlunit:xmlunit-matchers:2.5.1\")",
                "+\ttestCompile(\"javax.xml.bind:jaxb-api:2.3.0\")",
                " \ttestCompile(\"com.fasterxml.woodstox:woodstox-core:5.0.3\") {",
                "diff --git a/spring-messaging/spring-messaging.gradle b/spring-messaging/spring-messaging.gradle",
                "index ef90ded378..97b28b4656 100644",
                "--- a/spring-messaging/spring-messaging.gradle",
                "+++ b/spring-messaging/spring-messaging.gradle",
                "@@ -43,2 +43,3 @@ dependencies {",
                " \ttestCompile(\"org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}\")",
                "+\ttestCompile(\"org.xmlunit:xmlunit-matchers:2.5.1\")",
                " \ttestRuntime(\"com.sun.xml.bind:jaxb-core:2.3.0\")",
                "diff --git a/spring-oxm/spring-oxm.gradle b/spring-oxm/spring-oxm.gradle",
                "index c0ef3d60b0..41aa46da2f 100644",
                "--- a/spring-oxm/spring-oxm.gradle",
                "+++ b/spring-oxm/spring-oxm.gradle",
                "@@ -119,2 +119,3 @@ dependencies {",
                " \ttestCompile(files(genJaxb.classesDir).builtBy(genJaxb))",
                "+\ttestCompile(\"org.xmlunit:xmlunit-matchers:2.5.1\")",
                " \ttestRuntime(\"xerces:xercesImpl:2.11.0\")  // for Castor",
                "diff --git a/spring-web/spring-web.gradle b/spring-web/spring-web.gradle",
                "index cbe034d1b9..65178923e0 100644",
                "--- a/spring-web/spring-web.gradle",
                "+++ b/spring-web/spring-web.gradle",
                "@@ -84,2 +84,3 @@ dependencies {",
                " \ttestCompile(\"org.skyscreamer:jsonassert:1.5.0\")",
                "+\ttestCompile(\"org.xmlunit:xmlunit-matchers:2.5.1\")",
                " \ttestRuntime(\"com.sun.mail:javax.mail:1.6.1\")",
                "diff --git a/spring-webmvc/spring-webmvc.gradle b/spring-webmvc/spring-webmvc.gradle",
                "index 40974834fa..e94fa62a6c 100644",
                "--- a/spring-webmvc/spring-webmvc.gradle",
                "+++ b/spring-webmvc/spring-webmvc.gradle",
                "@@ -72,2 +72,3 @@ dependencies {",
                " \t}",
                "+\ttestCompile(\"org.xmlunit:xmlunit-matchers:2.5.1\")",
                " \ttestCompile(\"io.projectreactor:reactor-core\")"
            ],
            "changed_files": [
                "build.gradle",
                "spring-core/spring-core.gradle",
                "spring-messaging/spring-messaging.gradle",
                "spring-oxm/spring-oxm.gradle",
                "spring-web/spring-web.gradle",
                "spring-webmvc/spring-webmvc.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0f91f4b960f46b0044179bf1c8627e40f43a01a8"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: spring-messaging/spring-messaging.gradle",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cca78e42f1d5c8618ab5e077ca49eeed799059fd",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523497979,
            "hunks": 5,
            "message": "Polish",
            "diff": [
                "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
                "index ead36e33c1..658f4ba0f3 100644",
                "--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
                "+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
                "@@ -422,2 +422,3 @@ public abstract class AbstractMethodMessageHandler<T>",
                " \t */",
                "+\t@SuppressWarnings(\"ForLoopReplaceableByForEach\")",
                " \t@Nullable",
                "@@ -430,4 +431,3 @@ public abstract class AbstractMethodMessageHandler<T>",
                " \t\t}",
                "-\t\t// Avoid unnecessary iterator allocation",
                "-\t\tfor (int i = 0, size = this.destinationPrefixes.size(); i < size; i++) {",
                "+\t\tfor (int i = 0; i < this.destinationPrefixes.size(); i++) {",
                " \t\t\tString prefix = this.destinationPrefixes.get(i);",
                "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java",
                "index c019167daa..ebc9d204a8 100644",
                "--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java",
                "+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java",
                "@@ -1,3 +1,4 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+/*",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -83,6 +84,6 @@ public class HandlerMethodReturnValueHandlerComposite implements AsyncHandlerMet",
                "+\t@SuppressWarnings(\"ForLoopReplaceableByForEach\")",
                " \t@Nullable",
                " \tprivate HandlerMethodReturnValueHandler getReturnValueHandler(MethodParameter returnType) {",
                "-\t\t// Avoid allocating an iterator",
                "-\t\tfor (int i = 0, size = this.returnValueHandlers.size(); i < size; i++) {",
                "+\t\tfor (int i = 0; i < this.returnValueHandlers.size(); i++) {",
                " \t\t\tHandlerMethodReturnValueHandler handler = this.returnValueHandlers.get(i);"
            ],
            "changed_files": [
                "spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
                "spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java, spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "053ffe808faf201182bde902237d837598820d7f",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1524002222,
            "hunks": 11,
            "message": "Polish (minor) in AbstractMessageReaderArgumentResolver",
            "diff": [
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java",
                "index c3aa18e822..b32c613c9b 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java",
                "@@ -129,4 +129,4 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t * Read the body from a method argument with {@link HttpMessageReader}.",
                "-\t * @param bodyParameter the {@link MethodParameter} to read",
                "-\t * @param actualParameter the actual {@link MethodParameter} to read; could be different",
                "+\t * @param bodyParam the {@link MethodParameter} to read",
                "+\t * @param actualParam the actual {@link MethodParameter} to read; could be different",
                " \t * from {@code bodyParameter} when processing {@code HttpEntity} for example",
                "@@ -138,8 +138,7 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t */",
                "-\tprotected Mono<Object> readBody(MethodParameter bodyParameter, @Nullable MethodParameter actualParameter,",
                "+\tprotected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,",
                " \t\t\tboolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {",
                "-\t\tResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter);",
                "-\t\tResolvableType actualType = (actualParameter == null ?",
                "-\t\t\t\tbodyType : ResolvableType.forMethodParameter(actualParameter));",
                "+\t\tResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam);",
                "+\t\tResolvableType actualType = actualParam == null ? bodyType : ResolvableType.forMethodParameter(actualParam);",
                " \t\tClass<?> resolvedType = bodyType.resolve();",
                "@@ -155,3 +154,3 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t\tSupplier<Throwable> missingBodyError = isBodyRequired || (adapter != null && !adapter.supportsEmpty()) ?",
                "-\t\t\t\t() -> handleMissingBody(bodyParameter) : null;",
                "+\t\t\t\t() -> handleMissingBody(bodyParam) : null;",
                "@@ -162,3 +161,3 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t\t\t\t\tFlux<?> flux = reader.read(actualType, elementType, request, response, readHints);",
                "-\t\t\t\t\tflux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParameter, ex)));",
                "+\t\t\t\t\tflux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)));",
                " \t\t\t\t\tif (missingBodyError != null) {",
                "@@ -166,6 +165,6 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t\t\t\t\t}",
                "-\t\t\t\t\tObject[] hints = extractValidationHints(bodyParameter);",
                "+\t\t\t\t\tObject[] hints = extractValidationHints(bodyParam);",
                " \t\t\t\t\tif (hints != null) {",
                " \t\t\t\t\t\tflux = flux.doOnNext(target ->",
                "-\t\t\t\t\t\t\t\tvalidate(target, hints, bodyParameter, bindingContext, exchange));",
                "+\t\t\t\t\t\t\t\tvalidate(target, hints, bodyParam, bindingContext, exchange));",
                " \t\t\t\t\t}",
                "@@ -176,3 +175,3 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t\t\t\t\tMono<?> mono = reader.readMono(actualType, elementType, request, response, readHints);",
                "-\t\t\t\t\tmono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParameter, ex)));",
                "+\t\t\t\t\tmono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)));",
                " \t\t\t\t\tif (missingBodyError != null) {",
                "@@ -180,13 +179,8 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t\t\t\t\t}",
                "-\t\t\t\t\tObject[] hints = extractValidationHints(bodyParameter);",
                "+\t\t\t\t\tObject[] hints = extractValidationHints(bodyParam);",
                " \t\t\t\t\tif (hints != null) {",
                " \t\t\t\t\t\tmono = mono.doOnNext(target ->",
                "-\t\t\t\t\t\t\t\tvalidate(target, hints, bodyParameter, bindingContext, exchange));",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\tif (adapter != null) {",
                "-\t\t\t\t\t\treturn Mono.just(adapter.fromPublisher(mono));",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\telse {",
                "-\t\t\t\t\t\treturn Mono.from(mono);",
                "+\t\t\t\t\t\t\t\tvalidate(target, hints, bodyParam, bindingContext, exchange));",
                " \t\t\t\t\t}",
                "+\t\t\t\t\treturn adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono);",
                " \t\t\t\t}"
            ],
            "changed_files": [
                "spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "06041ea4e2b25662fb26af84ee7e9c1d2b387e62"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8f7e5e7c1a74a3228663b4bff0aa9da65ce6ca66",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523537186,
            "hunks": 15,
            "message": "Fine-tuned JCA MessageEndpoint exception logging and propagation Issue: SPR-16717 (cherry picked from commit 8e1ecec)",
            "diff": [
                "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.java b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.java",
                "index c10d2c3318..a18caa18c0 100644",
                "--- a/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.java",
                "+++ b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2016 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -86,2 +86,3 @@ public class JmsMessageEndpointFactory extends AbstractMessageEndpointFactory  {",
                " \t\tpublic void onMessage(Message message) {",
                "+\t\t\tThrowable endpointEx = null;",
                " \t\t\tboolean applyDeliveryCalls = !hasBeforeDeliveryBeenCalled();",
                "@@ -99,2 +100,3 @@ public class JmsMessageEndpointFactory extends AbstractMessageEndpointFactory  {",
                " \t\t\tcatch (RuntimeException | Error ex) {",
                "+\t\t\t\tendpointEx = ex;",
                " \t\t\t\tonEndpointException(ex);",
                "@@ -108,3 +110,5 @@ public class JmsMessageEndpointFactory extends AbstractMessageEndpointFactory  {",
                " \t\t\t\t\tcatch (ResourceException ex) {",
                "-\t\t\t\t\t\tthrow new JmsResourceException(ex);",
                "+\t\t\t\t\t\tif (endpointEx == null) {",
                "+\t\t\t\t\t\t\tthrow new JmsResourceException(ex);",
                "+\t\t\t\t\t\t}",
                " \t\t\t\t\t}",
                "diff --git a/spring-tx/src/main/java/org/springframework/jca/endpoint/AbstractMessageEndpointFactory.java b/spring-tx/src/main/java/org/springframework/jca/endpoint/AbstractMessageEndpointFactory.java",
                "index 0cd6d234cb..ea0d9fae39 100644",
                "--- a/spring-tx/src/main/java/org/springframework/jca/endpoint/AbstractMessageEndpointFactory.java",
                "+++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/AbstractMessageEndpointFactory.java",
                "@@ -271,5 +271,6 @@ public abstract class AbstractMessageEndpointFactory implements MessageEndpointF",
                " \t\t */",
                "-\t\tprotected final void onEndpointException(Throwable ex) {",
                "+\t\tprotected void onEndpointException(Throwable ex) {",
                " \t\t\tAssert.state(this.transactionDelegate != null, \"Not initialized\");",
                " \t\t\tthis.transactionDelegate.setRollbackOnly();",
                "+\t\t\tlogger.debug(\"Transaction marked as rollback-only after endpoint exception\", ex);",
                " \t\t}",
                "@@ -293,2 +294,3 @@ public abstract class AbstractMessageEndpointFactory implements MessageEndpointF",
                " \t\t\tcatch (Throwable ex) {",
                "+\t\t\t\tlogger.warn(\"Failed to complete transaction after endpoint delivery\", ex);",
                " \t\t\t\tthrow new ApplicationServerInternalException(\"Failed to complete transaction\", ex);",
                "@@ -305,3 +307,3 @@ public abstract class AbstractMessageEndpointFactory implements MessageEndpointF",
                " \t\t\t\tcatch (Throwable ex) {",
                "-\t\t\t\t\tlogger.error(\"Could not complete unfinished transaction on endpoint release\", ex);",
                "+\t\t\t\t\tlogger.warn(\"Could not complete unfinished transaction on endpoint release\", ex);",
                " \t\t\t\t}",
                "diff --git a/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointFactory.java b/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointFactory.java",
                "index e7d55bc4f3..581ddeb64e 100644",
                "--- a/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointFactory.java",
                "+++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointFactory.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -110,2 +110,3 @@ public class GenericMessageEndpointFactory extends AbstractMessageEndpointFactor",
                " \t\tpublic Object invoke(MethodInvocation methodInvocation) throws Throwable {",
                "+\t\t\tThrowable endpointEx = null;",
                " \t\t\tboolean applyDeliveryCalls = !hasBeforeDeliveryBeenCalled();",
                "@@ -116,8 +117,3 @@ public class GenericMessageEndpointFactory extends AbstractMessageEndpointFactor",
                " \t\t\t\tcatch (ResourceException ex) {",
                "-\t\t\t\t\tif (ReflectionUtils.declaresException(methodInvocation.getMethod(), ex.getClass())) {",
                "-\t\t\t\t\t\tthrow ex;",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\telse {",
                "-\t\t\t\t\t\tthrow new InternalResourceException(ex);",
                "-\t\t\t\t\t}",
                "+\t\t\t\t\tthrow adaptExceptionIfNecessary(methodInvocation, ex);",
                " \t\t\t\t}",
                "@@ -128,2 +124,3 @@ public class GenericMessageEndpointFactory extends AbstractMessageEndpointFactor",
                " \t\t\tcatch (Throwable ex) {",
                "+\t\t\t\tendpointEx = ex;",
                " \t\t\t\tonEndpointException(ex);",
                "@@ -137,7 +134,4 @@ public class GenericMessageEndpointFactory extends AbstractMessageEndpointFactor",
                " \t\t\t\t\tcatch (ResourceException ex) {",
                "-\t\t\t\t\t\tif (ReflectionUtils.declaresException(methodInvocation.getMethod(), ex.getClass())) {",
                "-\t\t\t\t\t\t\tthrow ex;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t\telse {",
                "-\t\t\t\t\t\t\tthrow new InternalResourceException(ex);",
                "+\t\t\t\t\t\tif (endpointEx == null) {",
                "+\t\t\t\t\t\t\tthrow adaptExceptionIfNecessary(methodInvocation, ex);",
                " \t\t\t\t\t\t}",
                "@@ -148,2 +142,11 @@ public class GenericMessageEndpointFactory extends AbstractMessageEndpointFactor",
                "+\t\tprivate Exception adaptExceptionIfNecessary(MethodInvocation methodInvocation, ResourceException ex) {",
                "+\t\t\tif (ReflectionUtils.declaresException(methodInvocation.getMethod(), ex.getClass())) {",
                "+\t\t\t\treturn ex;",
                "+\t\t\t}",
                "+\t\t\telse {",
                "+\t\t\t\treturn new InternalResourceException(ex);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                " \t\t@Override",
                "@@ -166,3 +169,3 @@ public class GenericMessageEndpointFactory extends AbstractMessageEndpointFactor",
                "-\t\tprotected InternalResourceException(ResourceException cause) {",
                "+\t\tpublic InternalResourceException(ResourceException cause) {",
                " \t\t\tsuper(cause);"
            ],
            "changed_files": [
                "spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.java",
                "spring-tx/src/main/java/org/springframework/jca/endpoint/AbstractMessageEndpointFactory.java",
                "spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e54c9d4a9378d51e092252b60b53ec812e99bd1b"
                ],
                [
                    "no-tag",
                    "8e1ececd972340775b928a255220a0cbfb9729c3"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: endpoint, message",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: endpoint, message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ab78854f1bee1ab4053bab210ab17edc7f8cb5c7",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523470238,
            "hunks": 14,
            "message": "Avoid inifinite recursion in UndertowServerHttpResponse Undertow does not provide a way to check if we can write so with the current implementation of isWritePossible, deep recursion can occur when writing slows down. We now use a flag to keep track of write ChannelListener callbacks. This commit also addresses a related issue in AbstractListenerWriteProcessor that went undected since #3c2d186 where after a large (single) buffer that is not written fully, the completion signal is processed before the all data is written. Issue: SPR-16702",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java",
                "index 9009026bbc..f88416283c 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java",
                "@@ -134,2 +134,4 @@ public abstract class AbstractListenerWriteFlushProcessor<T> implements Processo",
                " \t * return true after.",
                "+\t * <p>This is primarily for the Servlet non-blocking I/O API where flush",
                "+\t * cannot be called without a readyToWrite check.",
                " \t */",
                "@@ -139,2 +141,4 @@ public abstract class AbstractListenerWriteFlushProcessor<T> implements Processo",
                " \t * Whether flushing is pending.",
                "+\t * <p>This is primarily for the Servlet non-blocking I/O API where flush",
                "+\t * cannot be called without a readyToWrite check.",
                " \t */",
                "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java",
                "index 7aed653eb2..bc55d0052b 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java",
                "@@ -195,2 +195,8 @@ public abstract class AbstractListenerWriteProcessor<T> implements Processor<T,",
                "+\tprivate void changeStateToReceived(State oldState) {",
                "+\t\tif (changeState(oldState, State.RECEIVED)) {",
                "+\t\t\twriteIfPossible();",
                "+\t\t}",
                "+\t}",
                "+",
                " \tprivate void changeStateToComplete(State oldState) {",
                "@@ -257,5 +263,3 @@ public abstract class AbstractListenerWriteProcessor<T> implements Processor<T,",
                " \t\t\t\t\tprocessor.dataReceived(data);",
                "-\t\t\t\t\tif (processor.changeState(this, RECEIVED)) {",
                "-\t\t\t\t\t\tprocessor.writeIfPossible();",
                "-\t\t\t\t\t}",
                "+\t\t\t\t\tprocessor.changeStateToReceived(this);",
                " \t\t\t\t}",
                "@@ -288,9 +292,4 @@ public abstract class AbstractListenerWriteProcessor<T> implements Processor<T,",
                " \t\t\t\t\t\t}",
                "-\t\t\t\t\t\telse if (processor.changeState(WRITING, RECEIVED)) {",
                "-\t\t\t\t\t\t\tif (processor.subscriberCompleted) {",
                "-\t\t\t\t\t\t\t\tprocessor.changeStateToComplete(RECEIVED);",
                "-\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\telse {",
                "-\t\t\t\t\t\t\t\tprocessor.writeIfPossible();",
                "-\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\telse {",
                "+\t\t\t\t\t\t\tprocessor.changeStateToReceived(WRITING);",
                " \t\t\t\t\t\t}",
                "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java",
                "index 52abd5e5d0..b00e338010 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java",
                "@@ -135,12 +135,2 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                "-\tprivate boolean isWritePossible() {",
                "-\t\tif (this.responseChannel == null) {",
                "-\t\t\tthis.responseChannel = this.exchange.getResponseChannel();",
                "-\t\t}",
                "-\t\tif (!this.responseChannel.isWriteResumed()) {",
                "-\t\t\tthis.responseChannel.resumeWrites();",
                "-\t\t}",
                "-\t\treturn this.responseChannel.isWriteResumed();",
                "-\t}",
                "-",
                "@@ -153,2 +143,6 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                "+\t\t/** Keep track of write listener calls, for {@link #writePossible}. */",
                "+\t\tprivate volatile boolean writePossible;",
                "+",
                "+",
                " \t\tpublic ResponseBodyProcessor(StreamSinkChannel channel) {",
                "@@ -156,3 +150,6 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                " \t\t\tthis.channel = channel;",
                "-\t\t\tthis.channel.getWriteSetter().set(c -> onWritePossible());",
                "+\t\t\tthis.channel.getWriteSetter().set(c -> {",
                "+\t\t\t\tthis.writePossible = true;",
                "+\t\t\t\tonWritePossible();",
                "+\t\t\t});",
                " \t\t\tthis.channel.suspendWrites();",
                "@@ -162,3 +159,4 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                " \t\tprotected boolean isWritePossible() {",
                "-\t\t\treturn UndertowServerHttpResponse.this.isWritePossible();",
                "+\t\t\tthis.channel.resumeWrites();",
                "+\t\t\treturn this.writePossible;",
                " \t\t}",
                "@@ -174,2 +172,6 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                " \t\t\t}",
                "+",
                "+\t\t\t// Track write listener calls from here on..",
                "+\t\t\tthis.writePossible = false;",
                "+",
                " \t\t\tint total = buffer.remaining();",
                "@@ -183,2 +185,6 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                " \t\t\t}",
                "+",
                "+\t\t\t// We wrote all, so can still write more..",
                "+\t\t\tthis.writePossible = true;",
                "+",
                " \t\t\tif (logger.isTraceEnabled()) {",
                "@@ -241,3 +247,4 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                " \t\tprotected void flush() throws IOException {",
                "-\t\t\tif (UndertowServerHttpResponse.this.responseChannel != null) {",
                "+\t\t\tStreamSinkChannel channel = UndertowServerHttpResponse.this.responseChannel;",
                "+\t\t\tif (channel != null) {",
                " \t\t\t\tif (logger.isTraceEnabled()) {",
                "@@ -245,3 +252,3 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                " \t\t\t\t}",
                "-\t\t\t\tUndertowServerHttpResponse.this.responseChannel.flush();",
                "+\t\t\t\tchannel.flush();",
                " \t\t\t}",
                "@@ -257,3 +264,9 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                " \t\tprotected boolean isWritePossible() {",
                "-\t\t\treturn UndertowServerHttpResponse.this.isWritePossible();",
                "+\t\t\tStreamSinkChannel channel = UndertowServerHttpResponse.this.responseChannel;",
                "+\t\t\tif (channel != null) {",
                "+\t\t\t\t// We can always call flush, just ensure writes are on..",
                "+\t\t\t\tchannel.resumeWrites();",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                "+\t\t\treturn false;",
                " \t\t}"
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java",
                "spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java",
                "spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3": "HibernateTemplate.load does not throw ObjectRetrievalFailureException [SPR-1164] #5866 Have HotSwappableTargetSource.swap() take effect immediately if called within an interceptor [SPR-1238] #5941 Handle nested brackets in a map keys [SPR-1274] #5976 Null property values in nested paths relating to <spring:bind> tag, <form:xxx> tags, and ServletRequestDataBinder [SPR-1860] #6554 javadoc - here be dragons - (10 cosmetic/missing issues with javadoc) [SPR-3139] #7825 Document the use of ParameterMappingInterceptor for typical Portlet MVC setup [SPR-3162] #7848 No JavaDoc for ManagedNotification annotation [SPR-3206] #7892 Allow ControllerClassNameHandlerMapping and @Controller to work together [SPR-4129] #8808 Add option to check for matching number of arguments for a given PreparedStatement in ArgPreparedStatementSetter and enhance JdbcTemplate to optionally use it [SPR-5678] #10349 When Ibatis Integrated into Spring, it always close statement twice [SPR-6704] #11370 Hibernate 3.5.3 inside Spring 3.0.3 fails to validate named queries on Tomcat 7.0.0-beta [SPR-7350] #12009 Debian : Spring Build system has no licence / copyright [SPR-7352] #12011 JdbcTemplate failed to get data from StoredProc by using column alias [SPR-7506] #12163 automatic registration of PSPC when @PropertySource is used [SPR-8539] #13183 Can't get real ID of the application context in ApplicationContextAware.setApplicationContext() [SPR-8816] #13458 Deadlock in DefaultListableBeanFactory/DefaultSingletonBeanRegistry [SPR-10020] #14654 Corrupt Data - data on second page of submit is corrupted when referenced via \"path\" attribute (but is fine when referenced using jstl) [SPR-10442] #15075 Default model values are always copied into the redirect model when RedirectAttributes are used [SPR-10516] #15147 client-side stomp authentication headers are passed to the message broker [SPR-11154] #15781 TransactionSynchronizationManager uses static ThreadLocals for synchronizations - bad design [SPR-11980] #16596 StompDecoder StringIndexOutOfBoundsException with Apache ActiveMQ [SPR-12418] #17025 Multi resource XA transactions sometimes act incorrectly [SPR-12535] #17140 @Autowired List<ToAutoWire> into Configuration that defines @Bean ToAutoWire fails [SPR-12646] #17247 Improve RedirectAttributes reference documentation [SPR-12759] #17356 RequestMappingInfoHandlerMapping.handleNoMatch throws 415 when it should throw 406 [SPR-14397] #18969 ForwardedHeaderFilter garbles query params during sendRedirect() [SPR-16506] #21049 Spring WebFlux \"ResourceLeakDetector:LEAK\" #25213 LEAK: ByteBuf.release() #26937 webclient netty memory leak #29876"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3549745e37f0b1171163732f84216b994c7acb84"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: address",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4cf179535908846e918ab2bfeb3f49a2b82398e2",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522359844,
            "hunks": 10,
            "message": "Consistent to/cc/bcc array handling and revised hashCode without text Issue: SPR-16671 (cherry picked from commit 1cc513d)",
            "diff": [
                "diff --git a/spring-context-support/src/main/java/org/springframework/mail/SimpleMailMessage.java b/spring-context-support/src/main/java/org/springframework/mail/SimpleMailMessage.java",
                "index e5d4d83850..862fc6881b 100644",
                "--- a/spring-context-support/src/main/java/org/springframework/mail/SimpleMailMessage.java",
                "+++ b/spring-context-support/src/main/java/org/springframework/mail/SimpleMailMessage.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -76,11 +76,5 @@ public class SimpleMailMessage implements MailMessage, Serializable {",
                " \t\tthis.replyTo = original.getReplyTo();",
                "-\t\tif (original.getTo() != null) {",
                "-\t\t\tthis.to = copy(original.getTo());",
                "-\t\t}",
                "-\t\tif (original.getCc() != null) {",
                "-\t\t\tthis.cc = copy(original.getCc());",
                "-\t\t}",
                "-\t\tif (original.getBcc() != null) {",
                "-\t\t\tthis.bcc = copy(original.getBcc());",
                "-\t\t}",
                "+\t\tthis.to = copyOrNull(original.getTo());",
                "+\t\tthis.cc = copyOrNull(original.getCc());",
                "+\t\tthis.bcc = copyOrNull(original.getBcc());",
                " \t\tthis.sentDate = original.getSentDate();",
                "@@ -184,3 +178,3 @@ public class SimpleMailMessage implements MailMessage, Serializable {",
                " \tpublic void copyTo(MailMessage target) {",
                "-\t\tAssert.notNull(target, \"'target' message argument must not be null\");",
                "+\t\tAssert.notNull(target, \"'target' MailMessage must not be null\");",
                " \t\tif (getFrom() != null) {",
                "@@ -192,9 +186,9 @@ public class SimpleMailMessage implements MailMessage, Serializable {",
                " \t\tif (getTo() != null) {",
                "-\t\t\ttarget.setTo(getTo());",
                "+\t\t\ttarget.setTo(copy(getTo()));",
                " \t\t}",
                " \t\tif (getCc() != null) {",
                "-\t\t\ttarget.setCc(getCc());",
                "+\t\t\ttarget.setCc(copy(getCc()));",
                " \t\t}",
                " \t\tif (getBcc() != null) {",
                "-\t\t\ttarget.setBcc(getBcc());",
                "+\t\t\ttarget.setBcc(copy(getBcc()));",
                " \t\t}",
                "@@ -212,16 +206,2 @@ public class SimpleMailMessage implements MailMessage, Serializable {",
                "-\t@Override",
                "-\tpublic String toString() {",
                "-\t\tStringBuilder sb = new StringBuilder(\"SimpleMailMessage: \");",
                "-\t\tsb.append(\"from=\").append(this.from).append(\"; \");",
                "-\t\tsb.append(\"replyTo=\").append(this.replyTo).append(\"; \");",
                "-\t\tsb.append(\"to=\").append(StringUtils.arrayToCommaDelimitedString(this.to)).append(\"; \");",
                "-\t\tsb.append(\"cc=\").append(StringUtils.arrayToCommaDelimitedString(this.cc)).append(\"; \");",
                "-\t\tsb.append(\"bcc=\").append(StringUtils.arrayToCommaDelimitedString(this.bcc)).append(\"; \");",
                "-\t\tsb.append(\"sentDate=\").append(this.sentDate).append(\"; \");",
                "-\t\tsb.append(\"subject=\").append(this.subject).append(\"; \");",
                "-\t\tsb.append(\"text=\").append(this.text);",
                "-\t\treturn sb.toString();",
                "-\t}",
                "-",
                " \t@Override",
                "@@ -237,5 +217,5 @@ public class SimpleMailMessage implements MailMessage, Serializable {",
                " \t\t\t\tObjectUtils.nullSafeEquals(this.replyTo, otherMessage.replyTo) &&",
                "-\t\t\t\tjava.util.Arrays.equals(this.to, otherMessage.to) &&",
                "-\t\t\t\tjava.util.Arrays.equals(this.cc, otherMessage.cc) &&",
                "-\t\t\t\tjava.util.Arrays.equals(this.bcc, otherMessage.bcc) &&",
                "+\t\t\t\tObjectUtils.nullSafeEquals(this.to, otherMessage.to) &&",
                "+\t\t\t\tObjectUtils.nullSafeEquals(this.cc, otherMessage.cc) &&",
                "+\t\t\t\tObjectUtils.nullSafeEquals(this.bcc, otherMessage.bcc) &&",
                " \t\t\t\tObjectUtils.nullSafeEquals(this.sentDate, otherMessage.sentDate) &&",
                "@@ -247,16 +227,9 @@ public class SimpleMailMessage implements MailMessage, Serializable {",
                " \tpublic int hashCode() {",
                "-\t\tint hashCode = (this.from == null ? 0 : this.from.hashCode());",
                "-\t\thashCode = 29 * hashCode + (this.replyTo == null ? 0 : this.replyTo.hashCode());",
                "-\t\tfor (int i = 0; this.to != null && i < this.to.length; i++) {",
                "-\t\t\thashCode = 29 * hashCode + (this.to == null ? 0 : this.to[i].hashCode());",
                "-\t\t}",
                "-\t\tfor (int i = 0; this.cc != null && i < this.cc.length; i++) {",
                "-\t\t\thashCode = 29 * hashCode + (this.cc == null ? 0 : this.cc[i].hashCode());",
                "-\t\t}",
                "-\t\tfor (int i = 0; this.bcc != null && i < this.bcc.length; i++) {",
                "-\t\t\thashCode = 29 * hashCode + (this.bcc == null ? 0 : this.bcc[i].hashCode());",
                "-\t\t}",
                "-\t\thashCode = 29 * hashCode + (this.sentDate == null ? 0 : this.sentDate.hashCode());",
                "-\t\thashCode = 29 * hashCode + (this.subject == null ? 0 : this.subject.hashCode());",
                "-\t\thashCode = 29 * hashCode + (this.text == null ? 0 : this.text.hashCode());",
                "+\t\tint hashCode = ObjectUtils.nullSafeHashCode(this.from);",
                "+\t\thashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.replyTo);",
                "+\t\thashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.to);",
                "+\t\thashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.cc);",
                "+\t\thashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.bcc);",
                "+\t\thashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.sentDate);",
                "+\t\thashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.subject);",
                " \t\treturn hashCode;",
                "@@ -264,2 +237,23 @@ public class SimpleMailMessage implements MailMessage, Serializable {",
                "+\t@Override",
                "+\tpublic String toString() {",
                "+\t\tStringBuilder sb = new StringBuilder(\"SimpleMailMessage: \");",
                "+\t\tsb.append(\"from=\").append(this.from).append(\"; \");",
                "+\t\tsb.append(\"replyTo=\").append(this.replyTo).append(\"; \");",
                "+\t\tsb.append(\"to=\").append(StringUtils.arrayToCommaDelimitedString(this.to)).append(\"; \");",
                "+\t\tsb.append(\"cc=\").append(StringUtils.arrayToCommaDelimitedString(this.cc)).append(\"; \");",
                "+\t\tsb.append(\"bcc=\").append(StringUtils.arrayToCommaDelimitedString(this.bcc)).append(\"; \");",
                "+\t\tsb.append(\"sentDate=\").append(this.sentDate).append(\"; \");",
                "+\t\tsb.append(\"subject=\").append(this.subject).append(\"; \");",
                "+\t\tsb.append(\"text=\").append(this.text);",
                "+\t\treturn sb.toString();",
                "+\t}",
                "+",
                "+",
                "+\tprivate static String[] copyOrNull(String[] state) {",
                "+\t\tif (state == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\treturn copy(state);",
                "+\t}"
            ],
            "changed_files": [
                "spring-context-support/src/main/java/org/springframework/mail/SimpleMailMessage.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.15.RELEASE",
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e69",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1520878300,
            "hunks": 13,
            "message": "Modify SpEL code gen to take account of null safe refs With this change the code generation for method and property references is modified to include branching logic in the case of null safe dereferencing (?.). This is complicated by the possible usage of primitives on the left hand side of the dereference. To cope with this case primitives are promoted to boxed types when this situation occurs enabling null to be passed as a possible result. Issue: SPR-16489",
            "diff": [
                "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java",
                "index 7f860b49cf..33e77e7791 100644",
                "--- a/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java",
                "+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java",
                "@@ -1005,2 +1005,17 @@ public class CodeFlow implements Opcodes {",
                "+\tpublic static String toBoxedDescriptor(String primitiveDescriptor) {",
                "+\t\tswitch (primitiveDescriptor.charAt(0)) {",
                "+\t\t\tcase 'I': return \"Ljava/lang/Integer\";",
                "+\t\t\tcase 'J': return \"Ljava/lang/Long\";",
                "+\t\t\tcase 'F': return \"Ljava/lang/Float\";",
                "+\t\t\tcase 'D': return \"Ljava/lang/Double\";",
                "+\t\t\tcase 'B': return \"Ljava/lang/Byte\";",
                "+\t\t\tcase 'C': return \"Ljava/lang/Character\";",
                "+\t\t\tcase 'S': return \"Ljava/lang/Short\";",
                "+\t\t\tcase 'Z': return \"Ljava/lang/Boolean\";",
                "+\t\t\tdefault:",
                "+\t\t\t\tthrow new IllegalArgumentException(\"Unexpected non primitive descriptor \"+primitiveDescriptor);",
                "+\t\t}\t",
                "+\t}",
                "+",
                " }",
                "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java",
                "index eec56219e8..e1045ec95d 100644",
                "--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java",
                "+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java",
                "@@ -26,2 +26,3 @@ import java.util.List;",
                "+import org.springframework.asm.Label;",
                " import org.springframework.asm.MethodVisitor;",
                "@@ -55,2 +56,4 @@ public class MethodReference extends SpelNodeImpl {",
                "+\tprivate String originalPrimitiveExitTypeDescriptor = null;",
                "+",
                " \tprivate volatile CachedMethodExecutor cachedExecutor;",
                "@@ -235,3 +238,10 @@ public class MethodReference extends SpelNodeImpl {",
                " \t\t\tMethod method = ((ReflectiveMethodExecutor) executorToCheck.get()).getMethod();",
                "-\t\t\tthis.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType());",
                "+\t\t\tString descriptor = CodeFlow.toDescriptor(method.getReturnType());",
                "+\t\t\tif (this.nullSafe && CodeFlow.isPrimitive(descriptor)) {",
                "+\t\t\t\toriginalPrimitiveExitTypeDescriptor = descriptor;",
                "+\t\t\t\tthis.exitTypeDescriptor = CodeFlow.toBoxedDescriptor(descriptor);",
                "+\t\t\t}",
                "+\t\t\telse {",
                "+\t\t\t\tthis.exitTypeDescriptor = descriptor;",
                "+\t\t\t}",
                " \t\t}",
                "@@ -295,13 +305,19 @@ public class MethodReference extends SpelNodeImpl {",
                "-\t\tif (descriptor == null) {",
                "-\t\t\tif (!isStaticMethod) {",
                "-\t\t\t\t// Nothing on the stack but something is needed",
                "-\t\t\t\tcf.loadTarget(mv);",
                "-\t\t\t}",
                "+\t\tLabel skipIfNull = null;",
                "+\t\tif (descriptor == null && !isStaticMethod) {",
                "+\t\t\t// Nothing on the stack but something is needed",
                "+\t\t\tcf.loadTarget(mv);",
                " \t\t}",
                "-\t\telse {",
                "-\t\t\tif (isStaticMethod) {",
                "-\t\t\t\t// Something on the stack when nothing is needed",
                "-\t\t\t\tmv.visitInsn(POP);",
                "-\t\t\t}",
                "+\t\tif ((descriptor != null || !isStaticMethod) && nullSafe) {",
                "+\t\t\tmv.visitInsn(DUP);",
                "+\t\t\tskipIfNull = new Label();",
                "+\t\t\tLabel continueLabel = new Label();",
                "+\t\t\tmv.visitJumpInsn(IFNONNULL,continueLabel);",
                "+\t\t\tCodeFlow.insertCheckCast(mv, this.exitTypeDescriptor);",
                "+\t\t\tmv.visitJumpInsn(GOTO, skipIfNull);",
                "+\t\t\tmv.visitLabel(continueLabel);",
                "+\t\t}",
                "+\t\tif (descriptor != null && isStaticMethod) {",
                "+\t\t\t// Something on the stack when nothing is needed",
                "+\t\t\tmv.visitInsn(POP);",
                " \t\t}",
                "@@ -325,2 +341,10 @@ public class MethodReference extends SpelNodeImpl {",
                " \t\tcf.pushDescriptor(this.exitTypeDescriptor);",
                "+\t\tif (originalPrimitiveExitTypeDescriptor != null) {",
                "+\t\t\t// The output of the accessor will be a primitive but from the block above it might be null,",
                "+\t\t\t// so to have a 'common stack' element at skipIfNull target we need to box the primitive",
                "+\t\t\tCodeFlow.insertBoxIfNecessary(mv, originalPrimitiveExitTypeDescriptor);",
                "+\t\t}",
                "+\t\tif (skipIfNull != null) {",
                "+\t\t\tmv.visitLabel(skipIfNull);",
                "+\t\t}",
                " \t}",
                "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java",
                "index ec908dfefc..646cb7d915 100644",
                "--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java",
                "+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java",
                "@@ -23,2 +23,3 @@ import java.util.Map;",
                "+import org.springframework.asm.Label;",
                " import org.springframework.asm.MethodVisitor;",
                "@@ -49,2 +50,4 @@ public class PropertyOrFieldReference extends SpelNodeImpl {",
                "+\tprivate String originalPrimitiveExitTypeDescriptor = null;",
                "+",
                " \tprivate final String name;",
                "@@ -85,3 +88,3 @@ public class PropertyOrFieldReference extends SpelNodeImpl {",
                " \t\t\tCompilablePropertyAccessor accessor = (CompilablePropertyAccessor) accessorToUse;",
                "-\t\t\tthis.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType());",
                "+\t\t\tsetExitTypeDescriptor(CodeFlow.toDescriptor(accessor.getPropertyType()));",
                " \t\t}",
                "@@ -352,4 +355,36 @@ public class PropertyOrFieldReference extends SpelNodeImpl {",
                " \t\t}",
                "+\t\tLabel skipIfNull = null;",
                "+\t\tif (nullSafe) {",
                "+\t\t\tmv.visitInsn(DUP);",
                "+\t\t\tskipIfNull = new Label();",
                "+\t\t\tLabel continueLabel = new Label();",
                "+\t\t\tmv.visitJumpInsn(IFNONNULL,continueLabel);",
                "+\t\t\tCodeFlow.insertCheckCast(mv, this.exitTypeDescriptor);",
                "+\t\t\tmv.visitJumpInsn(GOTO, skipIfNull);",
                "+\t\t\tmv.visitLabel(continueLabel);",
                "+\t\t}",
                " \t\t((CompilablePropertyAccessor) accessorToUse).generateCode(this.name, mv, cf);",
                " \t\tcf.pushDescriptor(this.exitTypeDescriptor);",
                "+\t\tif (originalPrimitiveExitTypeDescriptor != null) {",
                "+\t\t\t// The output of the accessor is a primitive but from the block above it might be null,",
                "+\t\t\t// so to have a common stack element type at skipIfNull target it is necessary",
                "+\t\t\t// to box the primitive",
                "+\t\t\tCodeFlow.insertBoxIfNecessary(mv, originalPrimitiveExitTypeDescriptor);",
                "+\t\t}",
                "+\t\tif (skipIfNull != null) {",
                "+\t\t\tmv.visitLabel(skipIfNull);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tvoid setExitTypeDescriptor(String descriptor) {",
                "+\t\t// If this property or field access would return a primitive - and yet",
                "+\t\t// it is also marked null safe - then the exit type descriptor must be",
                "+\t\t// promoted to the box type to allow a null value to be passed on",
                "+\t\tif (this.nullSafe && CodeFlow.isPrimitive(descriptor)) {",
                "+\t\t\tthis.originalPrimitiveExitTypeDescriptor = descriptor;",
                "+\t\t\tthis.exitTypeDescriptor = CodeFlow.toBoxedDescriptor(descriptor);",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\tthis.exitTypeDescriptor = descriptor;",
                "+\t\t}",
                " \t}",
                "@@ -381,4 +416,3 @@ public class PropertyOrFieldReference extends SpelNodeImpl {",
                " \t\t\tif (accessorToUse instanceof CompilablePropertyAccessor) {",
                "-\t\t\t\tthis.ref.exitTypeDescriptor =",
                "-\t\t\t\t\t\tCodeFlow.toDescriptor(((CompilablePropertyAccessor) accessorToUse).getPropertyType());",
                "+\t\t\t\tthis.ref.setExitTypeDescriptor(CodeFlow.toDescriptor(((CompilablePropertyAccessor) accessorToUse).getPropertyType()));",
                " \t\t\t}"
            ],
            "changed_files": [
                "spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java",
                "spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java",
                "spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, branch",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ba13950d3ac3078f525cc3a6a974ce3ecbfddf2d",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523285879,
            "hunks": 1,
            "message": "Next Development Version",
            "diff": [
                "diff --git a/gradle.properties b/gradle.properties",
                "index fd5d15a4d2..a07f151ad7 100644",
                "--- a/gradle.properties",
                "+++ b/gradle.properties",
                "@@ -1 +1 @@",
                "-version=4.3.16.BUILD-SNAPSHOT",
                "+version=4.3.17.BUILD-SNAPSHOT"
            ],
            "changed_files": [
                "gradle.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "573f1d77f285ba34253d98a9ed056e0bb4bba219"
                ],
                [
                    "no-tag",
                    "4967dd887dc3c3cacdf619824a00280cd6701a71"
                ]
            ],
            "tags": [
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9d37c099a8fcffb1923b031c35de721b47abf210",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523956215,
            "hunks": 16,
            "message": "OperatorMatches flags misguided evaluation attempts as FLAWED_PATTERN Issue: SPR-16731 (cherry picked from commit d4a55a2)",
            "diff": [
                "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/VariableNotAvailableException.java b/spring-context/src/main/java/org/springframework/cache/interceptor/VariableNotAvailableException.java",
                "index 6f7fdde3c2..52951bb3fa 100644",
                "--- a/spring-context/src/main/java/org/springframework/cache/interceptor/VariableNotAvailableException.java",
                "+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/VariableNotAvailableException.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2016 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -32,4 +32,5 @@ class VariableNotAvailableException extends EvaluationException {",
                "+",
                " \tpublic VariableNotAvailableException(String name) {",
                "-\t\tsuper(\"Variable '\" + name + \"' is not available\");",
                "+\t\tsuper(\"Variable not available\");",
                " \t\tthis.name = name;",
                "@@ -38,5 +39,6 @@ class VariableNotAvailableException extends EvaluationException {",
                "-\tpublic String getName() {",
                "+\tpublic final String getName() {",
                " \t\treturn this.name;",
                " \t}",
                "+",
                " }",
                "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java",
                "index b2fa91ec64..03787c84a5 100644",
                "--- a/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java",
                "+++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java",
                "@@ -158,3 +158,3 @@ public enum SpelMessage {",
                "-\tMORE_INPUT(Kind.ERROR,1041,",
                "+\tMORE_INPUT(Kind.ERROR, 1041,",
                " \t\t\t\"After parsing a valid expression, there is still more data in the expression: ''{0}''\"),",
                "@@ -228,17 +228,18 @@ public enum SpelMessage {",
                " \tINITIALIZER_LENGTH_INCORRECT(Kind.ERROR, 1064,",
                "-\t\t\t\"array initializer size does not match array dimensions\"),",
                "+\t\t\t\"Array initializer size does not match array dimensions\"),",
                "-\tUNEXPECTED_ESCAPE_CHAR(Kind.ERROR, 1065, \"unexpected escape character.\"),",
                "+\tUNEXPECTED_ESCAPE_CHAR(Kind.ERROR, 1065,",
                "+\t\t\t\"Unexpected escape character\"),",
                " \tOPERAND_NOT_INCREMENTABLE(Kind.ERROR, 1066,",
                "-\t\t\t\"the expression component ''{0}'' does not support increment\"),",
                "+\t\t\t\"The expression component ''{0}'' does not support increment\"),",
                " \tOPERAND_NOT_DECREMENTABLE(Kind.ERROR, 1067,",
                "-\t\t\t\"the expression component ''{0}'' does not support decrement\"),",
                "+\t\t\t\"The expression component ''{0}'' does not support decrement\"),",
                " \tNOT_ASSIGNABLE(Kind.ERROR, 1068,",
                "-\t\t\t\"the expression component ''{0}'' is not assignable\"),",
                "+\t\t\t\"The expression component ''{0}'' is not assignable\"),",
                " \tMISSING_CHARACTER(Kind.ERROR, 1069,",
                "-\t\t\t\"missing expected character ''{0}''\"),",
                "+\t\t\t\"Missing expected character ''{0}''\"),",
                "@@ -250,4 +251,9 @@ public enum SpelMessage {",
                "-\tEXCEPTION_RUNNING_COMPILED_EXPRESSION(Kind.ERROR,1072,",
                "-\t\t\t\"An exception occurred whilst evaluating a compiled expression\");",
                "+\t/** @since 4.1 */",
                "+\tEXCEPTION_RUNNING_COMPILED_EXPRESSION(Kind.ERROR, 1072,",
                "+\t\t\t\"An exception occurred whilst evaluating a compiled expression\"),",
                "+",
                "+\t/** @since 4.3.17 */",
                "+\tFLAWED_PATTERN(Kind.ERROR, 1073,",
                "+\t\t\t\"Failed to efficiently evaluate pattern ''{0}'': consider redesigning it\");",
                "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/OperatorMatches.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OperatorMatches.java",
                "index f53ad97fc8..d97f18e6bb 100644",
                "--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/OperatorMatches.java",
                "+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OperatorMatches.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -42,2 +42,4 @@ public class OperatorMatches extends Operator {",
                "+\tprivate static final int PATTERN_ACCESS_THRESHOLD = 1000000;",
                "+",
                " \tprivate final ConcurrentMap<String, Pattern> patternCache = new ConcurrentHashMap<>();",
                "@@ -81,3 +83,3 @@ public class OperatorMatches extends Operator {",
                " \t\t\t}",
                "-\t\t\tMatcher matcher = pattern.matcher(left);",
                "+\t\t\tMatcher matcher = pattern.matcher(new MatcherInput(left, new AccessCount()));",
                " \t\t\treturn BooleanTypedValue.forValue(matcher.matches());",
                "@@ -85,3 +87,51 @@ public class OperatorMatches extends Operator {",
                " \t\tcatch (PatternSyntaxException ex) {",
                "-\t\t\tthrow new SpelEvaluationException(rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right);",
                "+\t\t\tthrow new SpelEvaluationException(",
                "+\t\t\t\t\trightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right);",
                "+\t\t}",
                "+\t\tcatch (IllegalStateException ex) {",
                "+\t\t\tthrow new SpelEvaluationException(",
                "+\t\t\t\t\trightOp.getStartPosition(), ex, SpelMessage.FLAWED_PATTERN, right);",
                "+\t\t}",
                "+\t}",
                "+",
                "+",
                "+\tprivate static class AccessCount {",
                "+",
                "+\t\tprivate int count;",
                "+",
                "+\t\tpublic void check() throws IllegalStateException {",
                "+\t\t\tif (this.count++ > PATTERN_ACCESS_THRESHOLD) {",
                "+\t\t\t\tthrow new IllegalStateException(\"Pattern access threshold exceeded\");",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+",
                "+\tprivate static class MatcherInput implements CharSequence {",
                "+",
                "+\t\tprivate final CharSequence value;",
                "+",
                "+\t\tprivate AccessCount access;",
                "+",
                "+\t\tpublic MatcherInput(CharSequence value, AccessCount access) {",
                "+\t\t\tthis.value = value;",
                "+\t\t\tthis.access = access;",
                "+\t\t}",
                "+",
                "+\t\tpublic char charAt(int index) {",
                "+\t\t\tthis.access.check();",
                "+\t\t\treturn this.value.charAt(index);",
                "+\t\t}",
                "+",
                "+\t\tpublic CharSequence subSequence(int start, int end) {",
                "+\t\t\treturn new MatcherInput(this.value.subSequence(start, end), this.access);",
                "+\t\t}",
                "+",
                "+\t\tpublic int length() {",
                "+\t\t\treturn this.value.length();",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic String toString() {",
                "+\t\t\treturn this.value.toString();",
                " \t\t}"
            ],
            "changed_files": [
                "spring-context/src/main/java/org/springframework/cache/interceptor/VariableNotAvailableException.java",
                "spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java",
                "spring-expression/src/main/java/org/springframework/expression/spel/ast/OperatorMatches.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d4a55a257b798130a89b27408198ef235e7cc67f"
                ],
                [
                    "no-tag",
                    "6a727e1ed77a846c5fe53abe3f4df01fae222090"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b0ed385f84f8610f5fe482d319c881f3aaa771ac",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522508793,
            "hunks": 43,
            "message": "Polishing",
            "diff": [
                "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "index a5ed7d1131..898602433d 100644",
                "--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -229,3 +229,3 @@ public abstract class AbstractAspectJAdvice implements Advice, AspectJPrecedence",
                " \t/**",
                "-\t * Sets the <b>declaration order</b> of this advice within the aspect",
                "+\t * Set the declaration order of this advice within the aspect.",
                " \t */",
                "@@ -368,3 +368,3 @@ public abstract class AbstractAspectJAdvice implements Advice, AspectJPrecedence",
                " \t */",
                "-\tpublic synchronized final void calculateArgumentBindings() {",
                "+\tpublic final synchronized void calculateArgumentBindings() {",
                " \t\t// The simple case... nothing to bind.",
                "@@ -376,6 +376,4 @@ public abstract class AbstractAspectJAdvice implements Advice, AspectJPrecedence",
                " \t\tClass<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes();",
                "-\t\tif (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {",
                "-\t\t\tnumUnboundArgs--;",
                "-\t\t}",
                "-\t\telse if (maybeBindJoinPointStaticPart(parameterTypes[0])) {",
                "+\t\tif (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0]) ||",
                "+\t\t\t\tmaybeBindJoinPointStaticPart(parameterTypes[0])) {",
                " \t\t\tnumUnboundArgs--;",
                "diff --git a/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java",
                "index 723f31cddc..dbc949dd72 100644",
                "--- a/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java",
                "+++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java",
                "@@ -383,6 +383,4 @@ public class GroovyBeanDefinitionReader extends AbstractBeanDefinitionReader imp",
                " \t\t\tboolean parentRef = false;",
                "-\t\t\tif (args.length > 1) {",
                "-\t\t\t\tif (args[1] instanceof Boolean) {",
                "-\t\t\t\t\tparentRef = (Boolean) args[1];",
                "-\t\t\t\t}",
                "+\t\t\tif (args.length > 1 && args[1] instanceof Boolean) {",
                "+\t\t\t\tparentRef = (Boolean) args[1];",
                " \t\t\t}",
                "@@ -413,8 +411,3 @@ public class GroovyBeanDefinitionReader extends AbstractBeanDefinitionReader imp",
                " \tprivate boolean addDeferredProperty(String property, Object newValue) {",
                "-\t\tif (newValue instanceof List) {",
                "-\t\t\tthis.deferredProperties.put(this.currentBeanDefinition.getBeanName() + '.' + property,",
                "-\t\t\t\t\tnew DeferredProperty(this.currentBeanDefinition, property, newValue));",
                "-\t\t\treturn true;",
                "-\t\t}",
                "-\t\telse if (newValue instanceof Map) {",
                "+\t\tif (newValue instanceof List || newValue instanceof Map) {",
                " \t\t\tthis.deferredProperties.put(this.currentBeanDefinition.getBeanName() + '.' + property,",
                "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java",
                "index ca0ea7ab45..0cdf050a2a 100644",
                "--- a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java",
                "+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java",
                "@@ -313,5 +313,5 @@ public abstract class BeanUtils {",
                " \t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tint firstParen = signature.indexOf('(');",
                "-\t\tint lastParen = signature.indexOf(')');",
                "-\t\tif (firstParen > -1 && lastParen == -1) {",
                "+\t\tint startParen = signature.indexOf('(');",
                "+\t\tint endParen = signature.indexOf(')');",
                "+\t\tif (startParen > -1 && endParen == -1) {",
                " \t\t\tthrow new IllegalArgumentException(\"Invalid method signature '\" + signature +",
                "@@ -319,3 +319,3 @@ public abstract class BeanUtils {",
                " \t\t}",
                "-\t\telse if (lastParen > -1 && firstParen == -1) {",
                "+\t\telse if (startParen == -1 && endParen > -1) {",
                " \t\t\tthrow new IllegalArgumentException(\"Invalid method signature '\" + signature +",
                "@@ -323,3 +323,3 @@ public abstract class BeanUtils {",
                " \t\t}",
                "-\t\telse if (firstParen == -1 && lastParen == -1) {",
                "+\t\telse if (startParen == -1 && endParen == -1) {",
                " \t\t\treturn findMethodWithMinimalParameters(clazz, signature);",
                "@@ -327,5 +327,5 @@ public abstract class BeanUtils {",
                " \t\telse {",
                "-\t\t\tString methodName = signature.substring(0, firstParen);",
                "+\t\t\tString methodName = signature.substring(0, startParen);",
                " \t\t\tString[] parameterTypeNames =",
                "-\t\t\t\t\tStringUtils.commaDelimitedListToStringArray(signature.substring(firstParen + 1, lastParen));",
                "+\t\t\t\t\tStringUtils.commaDelimitedListToStringArray(signature.substring(startParen + 1, endParen));",
                " \t\t\tClass<?>[] parameterTypes = new Class<?>[parameterTypeNames.length];",
                "diff --git a/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java",
                "index efb4ae9bbd..8167613a0f 100644",
                "--- a/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java",
                "+++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2014 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -264,3 +264,3 @@ public class MutablePropertyValues implements PropertyValues, Serializable {",
                " \t * @param propertyName the name to search for",
                "-\t * @return the raw property value, or {@code null}",
                "+\t * @return the raw property value, or {@code null} if none found",
                " \t * @since 4.0",
                "@@ -285,7 +285,3 @@ public class MutablePropertyValues implements PropertyValues, Serializable {",
                " \t\t\tPropertyValue pvOld = old.getPropertyValue(newPv.getName());",
                "-\t\t\tif (pvOld == null) {",
                "-\t\t\t\tchanges.addPropertyValue(newPv);",
                "-\t\t\t}",
                "-\t\t\telse if (!pvOld.equals(newPv)) {",
                "-\t\t\t\t// it's changed",
                "+\t\t\tif (pvOld == null || !pvOld.equals(newPv)) {",
                " \t\t\t\tchanges.addPropertyValue(newPv);",
                "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java",
                "index b6af650b19..cde17d81c5 100644",
                "--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java",
                "+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java",
                "@@ -563,3 +563,3 @@ class ConfigurationClassParser {",
                " \tprivate void processImports(ConfigurationClass configClass, SourceClass currentSourceClass,",
                "-\t\t\tCollection<SourceClass> importCandidates, boolean checkForCircularImports) throws IOException {",
                "+\t\t\tCollection<SourceClass> importCandidates, boolean checkForCircularImports) {",
                "@@ -704,3 +704,4 @@ class ConfigurationClassParser {",
                "-\t\tprivate final MultiValueMap<String, AnnotationMetadata> imports = new LinkedMultiValueMap<String, AnnotationMetadata>();",
                "+\t\tprivate final MultiValueMap<String, AnnotationMetadata> imports =",
                "+\t\t\t\tnew LinkedMultiValueMap<String, AnnotationMetadata>();",
                "@@ -950,5 +951,5 @@ class ConfigurationClassParser {",
                " \t\t\t\t\t\"Illegal attempt by @Configuration class '%s' to import class '%s' as '%s' is \" +",
                "-\t\t\t\t\t\"already present in the current import stack %s\", importStack.peek().getSimpleName(),",
                "+\t\t\t\t\t\"already present in the current import stack %s\", importStack.element().getSimpleName(),",
                " \t\t\t\t\tattemptedImport.getSimpleName(), attemptedImport.getSimpleName(), importStack),",
                "-\t\t\t\t\tnew Location(importStack.peek().getResource(), attemptedImport.getMetadata()));",
                "+\t\t\t\t\tnew Location(importStack.element().getResource(), attemptedImport.getMetadata()));",
                " \t\t}",
                "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java",
                "index 46eb746bbc..eca80014c6 100644",
                "--- a/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java",
                "+++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2016 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -136,4 +136,5 @@ public class ListenableFutureCallbackRegistry<T> {",
                " \t\t\tthis.result = result;",
                "-\t\t\twhile (!this.successCallbacks.isEmpty()) {",
                "-\t\t\t\tnotifySuccess(this.successCallbacks.poll());",
                "+\t\t\tSuccessCallback<? super T> callback;",
                "+\t\t\twhile ((callback = this.successCallbacks.poll()) != null) {",
                "+\t\t\t\tnotifySuccess(callback);",
                " \t\t\t}",
                "@@ -151,4 +152,5 @@ public class ListenableFutureCallbackRegistry<T> {",
                " \t\t\tthis.result = ex;",
                "-\t\t\twhile (!this.failureCallbacks.isEmpty()) {",
                "-\t\t\t\tnotifyFailure(this.failureCallbacks.poll());",
                "+\t\t\tFailureCallback callback;",
                "+\t\t\twhile ((callback = this.failureCallbacks.poll()) != null) {",
                "+\t\t\t\tnotifyFailure(callback);",
                " \t\t\t}",
                "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/ValueRef.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ValueRef.java",
                "index 8ba7f0ad1a..8e9b8a87b5 100644",
                "--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/ValueRef.java",
                "+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ValueRef.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2014 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -59,3 +59,3 @@ public interface ValueRef {",
                " \t */",
                "-\tstatic class NullValueRef implements ValueRef {",
                "+\tclass NullValueRef implements ValueRef {",
                "@@ -86,3 +86,3 @@ public interface ValueRef {",
                " \t */",
                "-\tstatic class TypedValueHolderValueRef implements ValueRef {",
                "+\tclass TypedValueHolderValueRef implements ValueRef {",
                "@@ -92,3 +92,3 @@ public interface ValueRef {",
                "-\t\tpublic TypedValueHolderValueRef(TypedValue typedValue,SpelNodeImpl node) {",
                "+\t\tpublic TypedValueHolderValueRef(TypedValue typedValue, SpelNodeImpl node) {",
                " \t\t\tthis.typedValue = typedValue;",
                "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java",
                "index 0766dbbe47..d6a8f6e218 100644",
                "--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java",
                "+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java",
                "@@ -351,6 +351,3 @@ public class ReflectivePropertyAccessor implements PropertyAccessor {",
                " \t\t\ttry {",
                "-\t\t\t\tif (canRead(context, target, name)) {",
                "-\t\t\t\t\ttypeDescriptor = this.typeDescriptorCache.get(cacheKey);",
                "-\t\t\t\t}",
                "-\t\t\t\telse if (canWrite(context, target, name)) {",
                "+\t\t\t\tif (canRead(context, target, name) || canWrite(context, target, name)) {",
                " \t\t\t\t\ttypeDescriptor = this.typeDescriptorCache.get(cacheKey);",
                "diff --git a/spring-jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java b/spring-jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java",
                "index 2bc28bc073..01d6bc253c 100644",
                "--- a/spring-jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java",
                "+++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -265,12 +265,9 @@ abstract class AbstractListenerContainerParser implements BeanDefinitionParser {",
                " \t\tString replyDestinationType = containerEle.getAttribute(RESPONSE_DESTINATION_TYPE_ATTRIBUTE);",
                "-\t\tif (DESTINATION_TYPE_TOPIC.equals(replyDestinationType)) {",
                "-\t\t\treplyPubSubDomain = true;",
                "-\t\t}",
                "-\t\telse if (DESTINATION_TYPE_QUEUE.equals(replyDestinationType)) {",
                "-\t\t\treplyPubSubDomain = false;",
                "+\t\tif (!StringUtils.hasText(replyDestinationType)) {",
                "+\t\t\treplyPubSubDomain = pubSubDomain;  // the default: same value as pubSubDomain",
                " \t\t}",
                "-\t\telse if (!StringUtils.hasText(replyDestinationType)) {",
                "-\t\t\treplyPubSubDomain = pubSubDomain; // the default: same value as pubSubDomain",
                "+\t\telse if (DESTINATION_TYPE_TOPIC.equals(replyDestinationType)) {",
                "+\t\t\treplyPubSubDomain = true;",
                " \t\t}",
                "-\t\telse if (StringUtils.hasText(replyDestinationType)) {",
                "+\t\telse if (!DESTINATION_TYPE_QUEUE.equals(replyDestinationType)) {",
                " \t\t\tparserContext.getReaderContext().error(\"Invalid listener container 'response-destination-type': only \" +",
                "diff --git a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java",
                "index 9aea5252a3..88de97452b 100644",
                "--- a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java",
                "+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -130,6 +130,4 @@ public class ShallowEtagHeaderFilter extends OncePerRequestFilter {",
                " \t\t\tString requestETag = request.getHeader(HEADER_IF_NONE_MATCH);",
                "-\t\t\tif (requestETag != null",
                "-\t\t\t\t\t&& (responseETag.equals(requestETag)",
                "-\t\t\t\t\t|| responseETag.replaceFirst(\"^W/\", \"\").equals(requestETag.replaceFirst(\"^W/\", \"\"))",
                "-\t\t\t\t\t|| \"*\".equals(requestETag))) {",
                "+\t\t\tif (requestETag != null && (\"*\".equals(requestETag) || responseETag.equals(requestETag) ||",
                "+\t\t\t\t\tresponseETag.replaceFirst(\"^W/\", \"\").equals(requestETag.replaceFirst(\"^W/\", \"\")))) {",
                " \t\t\t\tif (logger.isTraceEnabled()) {",
                "@@ -167,3 +165,3 @@ public class ShallowEtagHeaderFilter extends OncePerRequestFilter {",
                " \t * @param inputStream the response body",
                "-\t * @return {@code true} if eligible for ETag generation; {@code false} otherwise",
                "+\t * @return {@code true} if eligible for ETag generation, {@code false} otherwise",
                " \t */",
                "@@ -173,5 +171,3 @@ public class ShallowEtagHeaderFilter extends OncePerRequestFilter {",
                " \t\tString method = request.getMethod();",
                "-\t\tif (responseStatusCode >= 200 && responseStatusCode < 300",
                "-\t\t\t\t&& HttpMethod.GET.matches(method)) {",
                "-",
                "+\t\tif (responseStatusCode >= 200 && responseStatusCode < 300 && HttpMethod.GET.matches(method)) {",
                " \t\t\tString cacheControl = null;",
                "@@ -196,3 +192,3 @@ public class ShallowEtagHeaderFilter extends OncePerRequestFilter {",
                " \tprotected String generateETagHeaderValue(InputStream inputStream, boolean isWeak) throws IOException {",
                "-\t\t// length of W/ + 0 + \" + 32bits md5 hash + \"",
                "+\t\t// length of W/ + \" + 0 + 32bits md5 hash + \"",
                " \t\tStringBuilder builder = new StringBuilder(37);",
                "diff --git a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java",
                "index e5d87d5153..5acd5ed672 100644",
                "--- a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java",
                "+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java",
                "@@ -261,6 +261,3 @@ public class UrlPathHelper {",
                " \t\t\t}",
                "-\t\t\tif (c1 == c2) {",
                "-\t\t\t\tcontinue;",
                "-\t\t\t}",
                "-\t\t\telse if (ignoreCase && (Character.toLowerCase(c1) == Character.toLowerCase(c2))) {",
                "+\t\t\tif (c1 == c2 || (ignoreCase && (Character.toLowerCase(c1) == Character.toLowerCase(c2)))) {",
                " \t\t\t\tcontinue;",
                "diff --git a/src/asciidoc/core-validation.adoc b/src/asciidoc/core-validation.adoc",
                "index 64604b6dab..d3555a7e0b 100644",
                "--- a/src/asciidoc/core-validation.adoc",
                "+++ b/src/asciidoc/core-validation.adoc",
                "@@ -1097,3 +1097,3 @@ The `datetime` package provides a `DateFormatter` to format `java.util.Date` obj",
                " a `java.text.DateFormat`. The `datetime.joda` package provides comprehensive datetime",
                "-formatting support based on the http://joda-time.sourceforge.net[Joda Time library].",
                "+formatting support based on the http://joda-time.sourceforge.net[Joda-Time library].",
                "@@ -1229,3 +1229,3 @@ A portable format annotation API exists in the `org.springframework.format.annot",
                " package. Use @NumberFormat to format java.lang.Number fields. Use @DateTimeFormat to",
                "-format java.util.Date, java.util.Calendar, java.util.Long, or Joda Time fields.",
                "+format java.util.Date, java.util.Calendar, java.util.Long, or Joda-Time fields.",
                "@@ -1330,6 +1330,6 @@ you should register all formatters manually. Use the",
                " `org.springframework.format.datetime.DateFormatterRegistrar` class depending on whether",
                "-you use the Joda Time library.",
                "+you use the Joda-Time library.",
                " For example, the following Java configuration will register a global ' `yyyyMMdd`'",
                "-format. This example does not depend on the Joda Time library:",
                "+format. This example does not depend on the Joda-Time library:",
                "@@ -1398,3 +1398,3 @@ Time:",
                " ====",
                "-Joda Time provides separate distinct types to represent `date`, `time` and `date-time`",
                "+Joda-Time provides separate distinct types to represent `date`, `time` and `date-time`",
                " values. The `dateFormatter`, `timeFormatter` and `dateTimeFormatter` properties of the",
                "diff --git a/src/asciidoc/web-mvc.adoc b/src/asciidoc/web-mvc.adoc",
                "index 6a7096ef51..ae051ad653 100644",
                "--- a/src/asciidoc/web-mvc.adoc",
                "+++ b/src/asciidoc/web-mvc.adoc",
                "@@ -4843,3 +4843,3 @@ in addition to the JavaBeans PropertyEditors used for Data Binding.",
                " through the `ConversionService`.",
                "-. Support for <<format,formatting>> `Date`, `Calendar`, `Long`, and Joda Time fields using the",
                "+. Support for <<format,formatting>> `Date`, `Calendar`, `Long`, and Joda-Time fields using the",
                " `@DateTimeFormat` annotation.",
                "@@ -4927,4 +4927,4 @@ available.",
                " By default formatters for `Number` and `Date` types are installed, including support for",
                "-the `@NumberFormat` and `@DateTimeFormat` annotations. Full support for the Joda Time",
                "-formatting library is also installed if Joda Time is present on the classpath. To",
                "+the `@NumberFormat` and `@DateTimeFormat` annotations. Full support for the Joda-Time",
                "+formatting library is also installed if Joda-Time is present on the classpath. To",
                " register custom formatters and converters, override the `addFormatters` method:"
            ],
            "changed_files": [
                "spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java",
                "spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java",
                "spring-beans/src/main/java/org/springframework/beans/BeanUtils.java",
                "spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java",
                "spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java",
                "spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java",
                "spring-expression/src/main/java/org/springframework/expression/spel/ast/ValueRef.java",
                "spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java",
                "spring-jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java",
                "spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java",
                "spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java",
                "src/asciidoc/core-validation.adoc",
                "src/asciidoc/web-mvc.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "de8c4179fb57c3c18c515a1c5e6b99e913c16481"
                ],
                [
                    "no-tag",
                    "1ca06537c115899c32adf5748d1a410c0e49921f"
                ],
                [
                    "no-tag",
                    "475c4d4425b2170c4a0f19d5bd39b70e752e38a1"
                ],
                [
                    "no-tag",
                    "c2fdd561078a99140b4c8e3c37cff8d291572402"
                ],
                [
                    "no-tag",
                    "49eafe426142f55f415c2c289333e133180d13e5"
                ],
                [
                    "no-tag",
                    "912c270f2bebf3f24dd16dcaea576a58d500852e"
                ],
                [
                    "no-tag",
                    "cc379f1cc74124974d9261f94371da51433ffc15"
                ]
            ],
            "tags": [
                "v4.3.15.RELEASE",
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: allow",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "daa2d37ad401ddf24530e17bd235c92d6fa8a0fc",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1524002119,
            "hunks": 7,
            "message": "Avoid creating Exception instance if not needed Issue: SPR-16726",
            "diff": [
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java",
                "index a91fee78fd..498443e14d 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java",
                "@@ -193,4 +193,4 @@ class DefaultRenderingResponseBuilder implements RenderingResponse.Builder {",
                " \t\t\t\t\t.next()",
                "-\t\t\t\t\t.switchIfEmpty(Mono.error(new IllegalArgumentException(\"Could not resolve view with name '\" +",
                "-\t\t\t\t\t\t\tname() +\"'\")))",
                "+\t\t\t\t\t.switchIfEmpty(Mono.error(() ->",
                "+\t\t\t\t\t\t\tnew IllegalArgumentException(\"Could not resolve view with name '\" + name() + \"'\")))",
                " \t\t\t\t\t.flatMap(view -> {",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java",
                "index 9cf06c9cb7..c3aa18e822 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -24,2 +24,3 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.function.Supplier;",
                " import java.util.stream.Collectors;",
                "@@ -153,2 +154,5 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                "+\t\tSupplier<Throwable> missingBodyError = isBodyRequired || (adapter != null && !adapter.supportsEmpty()) ?",
                "+\t\t\t\t() -> handleMissingBody(bodyParameter) : null;",
                "+",
                " \t\tfor (HttpMessageReader<?> reader : getMessageReaders()) {",
                "@@ -159,4 +163,4 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t\t\t\t\tflux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParameter, ex)));",
                "-\t\t\t\t\tif (isBodyRequired || !adapter.supportsEmpty()) {",
                "-\t\t\t\t\t\tflux = flux.switchIfEmpty(Flux.error(handleMissingBody(bodyParameter)));",
                "+\t\t\t\t\tif (missingBodyError != null) {",
                "+\t\t\t\t\t\tflux = flux.switchIfEmpty(Flux.error(missingBodyError));",
                " \t\t\t\t\t}",
                "@@ -173,4 +177,4 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t\t\t\t\tmono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParameter, ex)));",
                "-\t\t\t\t\tif (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {",
                "-\t\t\t\t\t\tmono = mono.switchIfEmpty(Mono.error(handleMissingBody(bodyParameter)));",
                "+\t\t\t\t\tif (missingBodyError != null) {",
                "+\t\t\t\t\t\tmono = mono.switchIfEmpty(Mono.error(missingBodyError));",
                " \t\t\t\t\t}",
                "@@ -199,4 +203,4 @@ public abstract class AbstractMessageReaderArgumentResolver extends HandlerMetho",
                " \t\t\t});",
                "-\t\t\tif (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {",
                "-\t\t\t\tbody = body.switchIfEmpty(Mono.error(handleMissingBody(bodyParameter)));",
                "+\t\t\tif (missingBodyError != null) {",
                "+\t\t\t\tbody = body.switchIfEmpty(Mono.error(missingBodyError));",
                " \t\t\t}"
            ],
            "changed_files": [
                "spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "babe6c59c4a47f17cc765f429ecb9b7640ac902b"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4d2d88914295e0ad2aea13bd702514327cce12c3",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522789623,
            "hunks": 1,
            "message": "Initiate 5.0.x branch",
            "diff": [
                "diff --git a/gradle.properties b/gradle.properties",
                "index 750bef1dd9..46019fa20f 100644",
                "--- a/gradle.properties",
                "+++ b/gradle.properties",
                "@@ -1 +1 @@",
                "-version=5.0.5.RELEASE",
                "+version=5.0.6.BUILD-SNAPSHOT"
            ],
            "changed_files": [
                "gradle.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: branch",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4b9bc50fd057bb20278dc137820159f600cce324",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522786276,
            "hunks": 1,
            "message": "Release version 5.0.5.RELEASE",
            "diff": [
                "diff --git a/gradle.properties b/gradle.properties",
                "index 06a57c112d..750bef1dd9 100644",
                "--- a/gradle.properties",
                "+++ b/gradle.properties",
                "@@ -1 +1 @@",
                "-version=5.0.5.BUILD-SNAPSHOT",
                "+version=5.0.5.RELEASE"
            ],
            "changed_files": [
                "gradle.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "97ee94f4ca7e1d0c6f7e218e0ba8448940b7ba24",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523525497,
            "hunks": 18,
            "message": "Expose env and context in Kotlin beans DSL This commit introduces a deferred initialization of the declared beans in order to make it possible to access to the environment (and even to the context for advanced use-cases) in the beans { } Kotlin DSL. Issues: SPR-16269, SPR-16412",
            "diff": [
                "diff --git a/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt b/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt",
                "index 930d3cd51f..71f140d2fa 100644",
                "--- a/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt",
                "+++ b/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -65,3 +65,3 @@ fun beans(init: BeanDefinitionDsl.() -> Unit): BeanDefinitionDsl {",
                " \tval beans = BeanDefinitionDsl()",
                "-\tbeans.init()",
                "+\tbeans.init = init",
                " \treturn beans",
                "@@ -81,5 +81,2 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                "-\t@PublishedApi",
                "-\tinternal val registrations = arrayListOf<(GenericApplicationContext) -> Unit>()",
                "-",
                " \t@PublishedApi",
                "@@ -87,2 +84,17 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                "+\tinternal lateinit var init: BeanDefinitionDsl.() -> Unit",
                "+",
                "+\t/**",
                "+\t * Access to the context for advanced use-cases.",
                "+\t * @since 5.1",
                "+\t */",
                "+\tlateinit var context: GenericApplicationContext",
                "+",
                "+\t/**",
                "+\t * Shortcut for `context.environment`",
                "+\t * @since 5.1",
                "+\t */",
                "+\tval env : ConfigurableEnvironment",
                "+\t\tget() = context.environment",
                "+",
                " \t/**",
                "@@ -132,30 +144,2 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                "-\t/**",
                "-\t * Provide read access to some application context facilities.",
                "-\t * @constructor Create a new bean definition context.",
                "-\t * @param context the `ApplicationContext` instance to use for retrieving bean",
                "-\t * references, `Environment`, etc.",
                "-\t */",
                "-\tinner class BeanDefinitionContext(@PublishedApi internal val context: GenericApplicationContext) {",
                "-",
                "-\t\t/**",
                "-\t\t * Get a reference to the bean by type or type + name with the syntax",
                "-\t\t * `ref<Foo>()` or `ref<Foo>(\"foo\")`. When leveraging Kotlin type inference",
                "-\t\t * it could be as short as `ref()` or `ref(\"foo\")`.",
                "-\t\t * @param name the name of the bean to retrieve",
                "-\t\t * @param T type the bean must match, can be an interface or superclass",
                "-\t\t */",
                "-\t\tinline fun <reified T : Any> ref(name: String? = null) : T = when (name) {",
                "-\t\t\tnull -> context.getBean(T::class.java)",
                "-\t\t\telse -> context.getBean(name, T::class.java)",
                "-\t\t}",
                "-",
                "-\t\t/**",
                "-\t\t * Get the [ConfigurableEnvironment] associated to the underlying [GenericApplicationContext].",
                "-\t\t */",
                "-\t\tval env : ConfigurableEnvironment",
                "-\t\t\tget() = context.environment",
                "-\t\t",
                "-\t}",
                "-",
                " \t/**",
                "@@ -179,19 +163,18 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                " \t\t\t\t\t\t\t\t\t  isAutowireCandidate: Boolean? = null) {",
                "-\t\t",
                "-\t\tregistrations.add {",
                "-\t\t\tval customizer = BeanDefinitionCustomizer { bd -> ",
                "-\t\t\t\tscope?.let { bd.scope = scope.name.toLowerCase() }",
                "-\t\t\t\tisLazyInit?.let { bd.isLazyInit = isLazyInit }",
                "-\t\t\t\tisPrimary?.let { bd.isPrimary = isPrimary }",
                "-\t\t\t\tisAutowireCandidate?.let { bd.isAutowireCandidate = isAutowireCandidate }",
                "-\t\t\t\tif (bd is AbstractBeanDefinition) {",
                "-\t\t\t\t\tbd.autowireMode = autowireMode.ordinal",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\t",
                "-\t\t\twhen (name) {",
                "-\t\t\t\tnull -> it.registerBean(T::class.java, customizer)",
                "-\t\t\t\telse -> it.registerBean(name, T::class.java, customizer)",
                "+",
                "+\t\tval customizer = BeanDefinitionCustomizer { bd ->",
                "+\t\t\tscope?.let { bd.scope = scope.name.toLowerCase() }",
                "+\t\t\tisLazyInit?.let { bd.isLazyInit = isLazyInit }",
                "+\t\t\tisPrimary?.let { bd.isPrimary = isPrimary }",
                "+\t\t\tisAutowireCandidate?.let { bd.isAutowireCandidate = isAutowireCandidate }",
                "+\t\t\tif (bd is AbstractBeanDefinition) {",
                "+\t\t\t\tbd.autowireMode = autowireMode.ordinal",
                " \t\t\t}",
                " \t\t}",
                "+",
                "+\t\twhen (name) {",
                "+\t\t\tnull -> context.registerBean(T::class.java, customizer)",
                "+\t\t\telse -> context.registerBean(name, T::class.java, customizer)",
                "+\t\t}",
                "+",
                " \t}",
                "@@ -218,3 +201,3 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                " \t\t\t\t\t\t\t\t\t  isAutowireCandidate: Boolean? = null,",
                "-\t\t\t\t\t\t\t\t\t  crossinline function: BeanDefinitionContext.() -> T) {",
                "+\t\t\t\t\t\t\t\t\t  crossinline function: () -> T) {",
                "@@ -230,11 +213,22 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                "-\t\tregistrations.add {",
                "-\t\t\tval beanContext = BeanDefinitionContext(it)",
                "-\t\t\twhen (name) {",
                "-\t\t\t\tnull -> it.registerBean(T::class.java,",
                "-\t\t\t\t\t\tSupplier { function.invoke(beanContext) }, customizer)",
                "-\t\t\t\telse -> it.registerBean(name, T::class.java,",
                "-\t\t\t\t\t\tSupplier { function.invoke(beanContext) }, customizer)",
                "-\t\t\t}",
                "+",
                "+\t\twhen (name) {",
                "+\t\t\tnull -> context.registerBean(T::class.java,",
                "+\t\t\t\t\tSupplier { function.invoke() }, customizer)",
                "+\t\t\telse -> context.registerBean(name, T::class.java,",
                "+\t\t\t\t\tSupplier { function.invoke() }, customizer)",
                " \t\t}",
                "+",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Get a reference to the bean by type or type + name with the syntax",
                "+\t * `ref<Foo>()` or `ref<Foo>(\"foo\")`. When leveraging Kotlin type inference",
                "+\t * it could be as short as `ref()` or `ref(\"foo\")`.",
                "+\t * @param name the name of the bean to retrieve",
                "+\t * @param T type the bean must match, can be an interface or superclass",
                "+\t */",
                "+\tinline fun <reified T : Any> ref(name: String? = null) : T = when (name) {",
                "+\t\tnull -> context.getBean(T::class.java)",
                "+\t\telse -> context.getBean(name, T::class.java)",
                " \t}",
                "@@ -245,7 +239,6 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                " \t */",
                "-\tfun profile(profile: String, init: BeanDefinitionDsl.() -> Unit): BeanDefinitionDsl {",
                "+\tfun profile(profile: String, init: BeanDefinitionDsl.() -> Unit) {",
                " \t\tval beans = BeanDefinitionDsl({ it.activeProfiles.contains(profile) })",
                "-\t\tbeans.init()",
                "+\t\tbeans.init = init",
                " \t\tchildren.add(beans)",
                "-\t\treturn beans",
                " \t}",
                "@@ -259,7 +252,6 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                " \tfun environment(condition: ConfigurableEnvironment.() -> Boolean,",
                "-\t\t\t\t\tinit: BeanDefinitionDsl.() -> Unit): BeanDefinitionDsl {",
                "+\t\t\t\t\tinit: BeanDefinitionDsl.() -> Unit) {",
                " \t\tval beans = BeanDefinitionDsl(condition::invoke)",
                "-\t\tbeans.init()",
                "+\t\tbeans.init = init",
                " \t\tchildren.add(beans)",
                "-\t\treturn beans",
                " \t}",
                "@@ -271,7 +263,3 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                " \toverride fun initialize(context: GenericApplicationContext) {",
                "-\t\tfor (registration in registrations) {",
                "-\t\t\tif (condition.invoke(context.environment)) {",
                "-\t\t\t\tregistration.invoke(context)",
                "-\t\t\t}",
                "-\t\t}",
                "+\t\tthis.context = context",
                " \t\tfor (child in children) {",
                "@@ -279,2 +267,3 @@ open class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) ->",
                " \t\t}",
                "+\t\tinit()",
                " \t}"
            ],
            "changed_files": [
                "spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: expose",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "aba882af4c4f7d2ec6e0b859dbffc1bcf65e000c",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522843494,
            "hunks": 15,
            "message": "Clean up warnings in spring-webmvc",
            "diff": [
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java",
                "index 8c71b36346..3aa4f2d7b9 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java",
                "@@ -756,2 +756,3 @@ public abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMap",
                "+\t\t@SuppressWarnings(\"unused\")",
                " \t\tpublic void handle() {",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java",
                "index 382377ea99..6ff9c0e625 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java",
                "@@ -449,2 +449,3 @@ public abstract class RequestMappingInfoHandlerMapping extends AbstractHandlerMe",
                "+\t\t@SuppressWarnings(\"unused\")",
                " \t\tpublic HttpHeaders handle() {",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java",
                "index a378765f02..9081bae65b 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -289,3 +289,3 @@ public abstract class AbstractMessageConverterMethodArgumentResolver implements",
                " \t\tif (parameter.getParameterType() == Optional.class) {",
                "-\t\t\tif (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||",
                "+\t\t\tif (arg == null || (arg instanceof Collection && ((Collection<?>) arg).isEmpty()) ||",
                " \t\t\t\t\t(arg instanceof Object[] && ((Object[]) arg).length == 0)) {",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java",
                "index 807affee65..b9712d8b72 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java",
                "@@ -192,3 +192,3 @@ public abstract class AbstractMessageConverterMethodProcessor extends AbstractMe",
                " \t\t}",
                "-\t\t",
                "+",
                " \t\tif (isResourceType(value, returnType)) {",
                "@@ -264,3 +264,3 @@ public abstract class AbstractMessageConverterMethodProcessor extends AbstractMe",
                " \t\t\t\t\t\tconverter.canWrite(valueType, selectedMediaType)) {",
                "-\t\t\t\t\toutputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,",
                "+\t\t\t\t\toutputValue = getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,",
                " \t\t\t\t\t\t\t(Class<? extends HttpMessageConverter<?>>) converter.getClass(),",
                "@@ -323,3 +323,3 @@ public abstract class AbstractMessageConverterMethodProcessor extends AbstractMe",
                " \t */",
                "-\t@SuppressWarnings({\"unchecked\", \"unused\"})",
                "+\t@SuppressWarnings(\"unused\")",
                " \tprotected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass) {",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java",
                "index d361090cc8..0f96b85169 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -115,2 +115,3 @@ public class ResponseBodyEmitterReturnValueHandler implements HandlerMethodRetur",
                " \t@Override",
                "+\t@SuppressWarnings(\"resource\")",
                " \tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.java",
                "index 92e076a1fc..46c259233c 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -59,2 +59,3 @@ public class StreamingResponseBodyReturnValueHandler implements HandlerMethodRet",
                " \t@Override",
                "+\t@SuppressWarnings(\"resource\")",
                " \tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java",
                "index ce45ccac55..2777e13639 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java",
                "@@ -120,2 +120,3 @@ public class AppCacheManifestTransformer extends ResourceTransformerSupport {",
                "+\t\t@SuppressWarnings(\"resource\")",
                " \t\tScanner scanner = new Scanner(content);",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java",
                "index 5b37280f69..53b828b945 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java",
                "@@ -19,3 +19,2 @@ package org.springframework.web.servlet.resource;",
                " import java.util.ArrayList;",
                "-import java.util.Collections;",
                " import java.util.Comparator;",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java",
                "index 83ab402e41..94a65b2826 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -167,3 +167,3 @@ public class MarshallingView extends AbstractView {",
                " \t\tif (value instanceof JAXBElement) {",
                "-\t\t\tclassToCheck = ((JAXBElement) value).getDeclaredType();",
                "+\t\t\tclassToCheck = ((JAXBElement<?>) value).getDeclaredType();",
                " \t\t}"
            ],
            "changed_files": [
                "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: message",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8da0e46ff253bab5783713078eae8898708996ba",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523285861,
            "hunks": 1,
            "message": "Release version 4.3.16.RELEASE",
            "diff": [
                "diff --git a/gradle.properties b/gradle.properties",
                "index fd5d15a4d2..7961f33e86 100644",
                "--- a/gradle.properties",
                "+++ b/gradle.properties",
                "@@ -1 +1 @@",
                "-version=4.3.16.BUILD-SNAPSHOT",
                "+version=4.3.16.RELEASE"
            ],
            "changed_files": [
                "gradle.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.16.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7e2726f40018ad83be9ae1d9d5b59f59e981d66a",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523351625,
            "hunks": 16,
            "message": "Add remoteAddress() to ServerRequest Issue: SPR-16681",
            "diff": [
                "diff --git a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java",
                "index 8499476861..a6130387d8 100644",
                "--- a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java",
                "+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java",
                "@@ -90,2 +90,5 @@ public class MockServerRequest implements ServerRequest {",
                "+\t@Nullable",
                "+\tprivate final InetSocketAddress remoteAddress;",
                "+",
                "@@ -94,3 +97,4 @@ public class MockServerRequest implements ServerRequest {",
                " \t\t\tMap<String, Object> attributes, MultiValueMap<String, String> queryParams,",
                "-\t\t\tMap<String, String> pathVariables, @Nullable WebSession session, @Nullable Principal principal) {",
                "+\t\t\tMap<String, String> pathVariables, @Nullable WebSession session, @Nullable Principal principal,",
                "+\t\t\t@Nullable InetSocketAddress remoteAddress) {",
                "@@ -107,2 +111,3 @@ public class MockServerRequest implements ServerRequest {",
                " \t\tthis.principal = principal;",
                "+\t\tthis.remoteAddress = remoteAddress;",
                " \t}",
                "@@ -145,2 +150,7 @@ public class MockServerRequest implements ServerRequest {",
                "+\t@Override",
                "+\tpublic Optional<InetSocketAddress> remoteAddress() {",
                "+\t\treturn Optional.ofNullable(this.remoteAddress);",
                "+\t}",
                "+",
                " \t@Override",
                "@@ -264,4 +274,12 @@ public class MockServerRequest implements ServerRequest {",
                "+\t\t/**",
                "+\t\t * @deprecated  in favor of {@link #principal(Principal)}",
                "+\t\t */",
                "+\t\t@Deprecated",
                " \t\tBuilder session(Principal principal);",
                "+\t\tBuilder principal(Principal principal);",
                "+",
                "+\t\tBuilder remoteAddress(InetSocketAddress remoteAddress);",
                "+",
                " \t\tMockServerRequest body(Object body);",
                "@@ -299,2 +317,5 @@ public class MockServerRequest implements ServerRequest {",
                "+\t\t@Nullable",
                "+\t\tprivate InetSocketAddress remoteAddress;",
                "+",
                " \t\t@Override",
                "@@ -403,2 +424,7 @@ public class MockServerRequest implements ServerRequest {",
                " \t\tpublic Builder session(Principal principal) {",
                "+\t\t\treturn principal(principal);",
                "+\t\t}",
                "+",
                "+\t\t@Override",
                "+\t\tpublic Builder principal(Principal principal) {",
                " \t\t\tAssert.notNull(principal, \"'principal' must not be null\");",
                "@@ -408,2 +434,9 @@ public class MockServerRequest implements ServerRequest {",
                "+\t\t@Override",
                "+\t\tpublic Builder remoteAddress(InetSocketAddress remoteAddress) {",
                "+\t\t\tAssert.notNull(remoteAddress, \"'remoteAddress' must not be null\");",
                "+\t\t\tthis.remoteAddress = remoteAddress;",
                "+\t\t\treturn this;",
                "+\t\t}",
                "+",
                " \t\t@Override",
                "@@ -413,3 +446,3 @@ public class MockServerRequest implements ServerRequest {",
                " \t\t\t\t\tthis.cookies, this.body, this.attributes, this.queryParams, this.pathVariables,",
                "-\t\t\t\t\tthis.session, this.principal);",
                "+\t\t\t\t\tthis.session, this.principal, this.remoteAddress);",
                " \t\t}",
                "@@ -420,3 +453,3 @@ public class MockServerRequest implements ServerRequest {",
                " \t\t\t\t\tthis.cookies, null, this.attributes, this.queryParams, this.pathVariables,",
                "-\t\t\t\t\tthis.session, this.principal);",
                "+\t\t\t\t\tthis.session, this.principal, this.remoteAddress);",
                " \t\t}",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java",
                "index a8c115b4fb..6ff81115e3 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java",
                "@@ -118,2 +118,7 @@ class DefaultServerRequest implements ServerRequest {",
                "+\t@Override",
                "+\tpublic Optional<InetSocketAddress> remoteAddress() {",
                "+\t\treturn Optional.ofNullable(request().getRemoteAddress());",
                "+\t}",
                "+",
                " \t@Override",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java",
                "index 654990265a..49a22fcacb 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java",
                "@@ -18,2 +18,3 @@ package org.springframework.web.reactive.function.server;",
                "+import java.net.InetSocketAddress;",
                " import java.net.URI;",
                "@@ -515,2 +516,7 @@ public abstract class RequestPredicates {",
                "+\t\t@Override",
                "+\t\tpublic Optional<InetSocketAddress> remoteAddress() {",
                "+\t\t\treturn this.request.remoteAddress();",
                "+\t\t}",
                "+",
                " \t\t@Override",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java",
                "index 9ee7d8cb2d..bc19f197c6 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java",
                "@@ -116,2 +116,8 @@ public interface ServerRequest {",
                "+\t/**",
                "+\t * Return the remote address where this request is connected to, if available.",
                "+\t * @since 5.1",
                "+\t */",
                "+\tOptional<InetSocketAddress> remoteAddress();",
                "+",
                " \t/**",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java",
                "index dde16b7dd1..ee3538ee3a 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java",
                "@@ -118,2 +118,7 @@ public class ServerRequestWrapper implements ServerRequest {",
                "+\t@Override",
                "+\tpublic Optional<InetSocketAddress> remoteAddress() {",
                "+\t\treturn this.delegate.remoteAddress();",
                "+\t}",
                "+",
                " \t@Override"
            ],
            "changed_files": [
                "spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: address",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "28ea718d2d62a43bd54a5795f5c511284508df15",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522531051,
            "hunks": 17,
            "message": "Build setup allows for JDK 10 as source/test target compatibility Includes upgrade to Groovy 2.4.15 and HtmlUnit 2.30. Issue: SPR-16390",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 05d84c74bb..87e262c85c 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -45,3 +45,3 @@ configure(allprojects) { project ->",
                " \text.freemarkerVersion    = \"2.3.27-incubating\"",
                "-\text.groovyVersion        = \"2.4.14\"",
                "+\text.groovyVersion        = \"2.4.15\"",
                " \text.hsqldbVersion        = \"2.4.0\"",
                "@@ -115,3 +115,3 @@ configure(allprojects) { project ->",
                " \tcompileJava {",
                "-\t\tsourceCompatibility = 1.8",
                "+\t\tsourceCompatibility = 1.8  // can be switched to 10 for testing",
                " \t\ttargetCompatibility = 1.8",
                "@@ -121,3 +121,3 @@ configure(allprojects) { project ->",
                " \tcompileTestJava {",
                "-\t\tsourceCompatibility = 1.8",
                "+\t\tsourceCompatibility = 1.8  // can be switched to 10 for testing",
                " \t\ttargetCompatibility = 1.8",
                "diff --git a/spring-aspects/spring-aspects.gradle b/spring-aspects/spring-aspects.gradle",
                "index aa05384ce9..2203096d78 100644",
                "--- a/spring-aspects/spring-aspects.gradle",
                "+++ b/spring-aspects/spring-aspects.gradle",
                "@@ -12,7 +12,3 @@ configurations {",
                "-// exclude spring-aspects as a module within IDEA until IDEA-64446 is resolved",
                "-tasks.getByName(\"idea\").onlyIf { false }",
                "-tasks.getByName(\"ideaModule\").onlyIf { false }",
                "-",
                "-compileJava  {",
                "+compileJava {",
                " \tactions = []",
                "@@ -21,3 +17,2 @@ compileJava  {",
                " \tdef outputDir = project.sourceSets.main.java.outputDir",
                "-",
                " \tinputs.files(project.sourceSets.main.allSource + project.sourceSets.main.compileClasspath)",
                "@@ -25,4 +20,4 @@ compileJava  {",
                "-\text.sourceCompatibility = project(\":spring-core\").compileJava.sourceCompatibility",
                "-\text.targetCompatibility = project(\":spring-core\").compileJava.targetCompatibility",
                "+\tsourceCompatibility = 1.8  // fixed even when general compatibility level set to e.g. 10",
                "+\ttargetCompatibility = 1.8",
                "@@ -51,3 +46,3 @@ compileJava  {",
                "-compileTestJava  {",
                "+compileTestJava {",
                " \tactions = []",
                "@@ -57,3 +52,2 @@ compileTestJava  {",
                " \tdef outputDir = project.sourceSets.test.java.outputDir",
                "-",
                " \tinputs.files(project.sourceSets.test.allSource + project.sourceSets.test.compileClasspath)",
                "@@ -61,4 +55,4 @@ compileTestJava  {",
                "-\text.sourceCompatibility = project(\":spring-core\").compileTestJava.sourceCompatibility",
                "-\text.targetCompatibility = project(\":spring-core\").compileTestJava.targetCompatibility",
                "+\tsourceCompatibility = 1.8  // fixed even when general compatibility level set to e.g. 10",
                "+\ttargetCompatibility = 1.8",
                "diff --git a/spring-context-support/spring-context-support.gradle b/spring-context-support/spring-context-support.gradle",
                "index 84fd61f5ab..b69b27e9e9 100644",
                "--- a/spring-context-support/spring-context-support.gradle",
                "+++ b/spring-context-support/spring-context-support.gradle",
                "@@ -19,2 +19,3 @@ dependencies {",
                " \ttestCompile(\"org.hibernate:hibernate-validator:6.0.9.Final\")",
                "+\ttestCompile(\"javax.annotation:javax.annotation-api:1.3.2\")",
                " \ttestRuntime(\"org.ehcache:jcache:1.0.1\")",
                "@@ -22,3 +23,2 @@ dependencies {",
                " \ttestRuntime(\"org.glassfish:javax.el:3.0.1-b08\")",
                "-\ttestRuntime(\"javax.annotation:javax.annotation-api:1.3.2\")",
                " \ttestRuntime(\"com.sun.mail:javax.mail:1.6.1\")",
                "diff --git a/spring-test/spring-test.gradle b/spring-test/spring-test.gradle",
                "index d2cd0964a9..f921f589a7 100644",
                "--- a/spring-test/spring-test.gradle",
                "+++ b/spring-test/spring-test.gradle",
                "@@ -44,6 +44,6 @@ dependencies {",
                " \t}",
                "-\toptional(\"net.sourceforge.htmlunit:htmlunit:2.29\") {",
                "+\toptional(\"net.sourceforge.htmlunit:htmlunit:2.30\") {",
                " \t\texclude group: \"commons-logging\", module: \"commons-logging\"",
                " \t}",
                "-\toptional(\"org.seleniumhq.selenium:htmlunit-driver:2.29.3\") {",
                "+\toptional(\"org.seleniumhq.selenium:htmlunit-driver:2.30.0\") {",
                " \t\texclude group: \"commons-logging\", module: \"commons-logging\"",
                "@@ -62,2 +62,3 @@ dependencies {",
                " \ttestCompile(project(\":spring-oxm\"))",
                "+\ttestCompile(\"javax.annotation:javax.annotation-api:1.3.2\")",
                " \ttestCompile(\"javax.cache:cache-api:1.1.0\")",
                "@@ -84,2 +85,3 @@ dependencies {",
                " \t// so that we can run JUnit 4 tests in IntelliJ IDEA.",
                "+\ttestCompile('de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1')",
                " \ttestRuntime(\"org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}\")",
                "@@ -87,4 +89,2 @@ dependencies {",
                " \ttestRuntime(\"org.junit.vintage:junit-vintage-engine:${junitVintageVersion}\")",
                "-\ttestCompile('de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1')",
                "-\ttestRuntime(\"javax.annotation:javax.annotation-api:1.3.2\")",
                " \ttestRuntime(\"org.glassfish:javax.el:3.0.1-b08\")",
                "diff --git a/spring-web/spring-web.gradle b/spring-web/spring-web.gradle",
                "index e03cd9ccae..cbe034d1b9 100644",
                "--- a/spring-web/spring-web.gradle",
                "+++ b/spring-web/spring-web.gradle",
                "@@ -31,2 +31,3 @@ dependencies {",
                " \toptional(\"javax.xml.ws:jaxws-api:2.3.0\")",
                "+\toptional(\"org.glassfish.main:javax.jws:4.0-b33\")",
                " \toptional(\"io.reactivex:rxjava:${rxjavaVersion}\")"
            ],
            "changed_files": [
                "build.gradle",
                "spring-aspects/spring-aspects.gradle",
                "spring-context-support/spring-context-support.gradle",
                "spring-test/spring-test.gradle",
                "spring-web/spring-web.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "bbe850d33a9c5e6d98f65b5ea7e46827194276a6",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523617607,
            "hunks": 2,
            "message": "Fix typo in javadoc Closes gh-1791",
            "diff": [
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java",
                "index 838c401039..0655f3a684 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -53,3 +53,3 @@ import org.springframework.web.server.WebHandler;",
                "  *",
                "- * <p>{@code DispatcherHandler} s also designed to be a Spring bean itself and",
                "+ * <p>{@code DispatcherHandler} is also designed to be a Spring bean itself and",
                "  * implements {@link ApplicationContextAware} for access to the context it runs"
            ],
            "changed_files": [
                "spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1791": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "961c6419733926d6dfa2ca75af1edf7a886b2f66"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1791",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2c648379abc56f5ce5ad83f2522d63b24ad72ffb",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522843284,
            "hunks": 3,
            "message": "Delete dead code in spring-webmvc",
            "diff": [
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java",
                "index 43aefc9532..3175b8ffb4 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java",
                "@@ -29,3 +29,2 @@ import org.springframework.beans.factory.config.BeanDefinition;",
                " import org.springframework.beans.factory.config.BeanDefinitionHolder;",
                "-import org.springframework.beans.factory.config.BeanReference;",
                " import org.springframework.beans.factory.config.RuntimeBeanReference;",
                "@@ -62,3 +61,2 @@ import org.springframework.util.Assert;",
                " import org.springframework.util.ClassUtils;",
                "-import org.springframework.util.StringUtils;",
                " import org.springframework.util.xml.DomUtils;",
                "@@ -666,23 +664,2 @@ class AnnotationDrivenBeanDefinitionParser implements BeanDefinitionParser {",
                "-    private ManagedList<BeanReference> extractBeanRefSubElements(Element parentElement, ParserContext parserContext){",
                "-        ManagedList<BeanReference> list = new ManagedList<>();",
                "-        list.setSource(parserContext.extractSource(parentElement));",
                "-        for (Element refElement : DomUtils.getChildElementsByTagName(parentElement, \"ref\")) {",
                "-            BeanReference reference;",
                "-            if (StringUtils.hasText(\"bean\")) {",
                "-                reference = new RuntimeBeanReference(refElement.getAttribute(\"bean\"),false);",
                "-                list.add(reference);",
                "-            }",
                "-\t\t\telse if (StringUtils.hasText(\"parent\")){",
                "-                reference = new RuntimeBeanReference(refElement.getAttribute(\"parent\"),true);",
                "-                list.add(reference);",
                "-            }",
                "-\t\t\telse {",
                "-                parserContext.getReaderContext().error(\"'bean' or 'parent' attribute is required for <ref> element\",",
                "-                        parserContext.extractSource(parentElement));",
                "-            }",
                "-        }",
                "-        return list;",
                "-    }",
                "-"
            ],
            "changed_files": [
                "spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "bc07a54075f540240791311e1276222450589802",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522530510,
            "hunks": 5,
            "message": "Clear AnnotationUtils cache after context refresh (along with others) Issue: SPR-16675",
            "diff": [
                "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "index a265d32168..4ec03e7680 100644",
                "--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -68,2 +68,3 @@ import org.springframework.context.weaving.LoadTimeWeaverAwareProcessor;",
                " import org.springframework.core.ResolvableType;",
                "+import org.springframework.core.annotation.AnnotationUtils;",
                " import org.springframework.core.convert.ConversionService;",
                "@@ -902,6 +903,8 @@ public abstract class AbstractApplicationContext extends DefaultResourceLoader",
                " \t/**",
                "-\t * Reset Spring's common core caches, in particular the {@link ReflectionUtils},",
                "-\t * {@link ResolvableType} and {@link CachedIntrospectionResults} caches.",
                "+\t * Reset Spring's common reflection metadata caches, in particular the",
                "+\t * {@link ReflectionUtils}, {@link AnnotationUtils}, {@link ResolvableType}",
                "+\t * and {@link CachedIntrospectionResults} caches.",
                " \t * @since 4.2",
                " \t * @see ReflectionUtils#clearCache()",
                "+\t * @see AnnotationUtils#clearCache()",
                " \t * @see ResolvableType#clearCache()",
                "@@ -911,2 +914,3 @@ public abstract class AbstractApplicationContext extends DefaultResourceLoader",
                " \t\tReflectionUtils.clearCache();",
                "+\t\tAnnotationUtils.clearCache();",
                " \t\tResolvableType.clearCache();"
            ],
            "changed_files": [
                "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: application",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "69e3fde295d4c04e3b5de9d0c7d747f021cbd9aa",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523563004,
            "hunks": 5,
            "message": "Avoid duplicate Accept header values in RestTemplate Prior to this commit, the various `HttpMessageConverter` instances configured for a given `RestTemplate` instance could all contribute `MediaType` values to the \"Accept:\" request header. This could lead to duplicate media types in that request header, cluttering for the HTTP request for no reason. This commit ensures that only distinct values are added to the request. Issue: SPR-16690",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java",
                "index 18b41589a6..abaa231784 100644",
                "--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java",
                "+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java",
                "@@ -27,2 +27,4 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "@@ -838,27 +840,14 @@ public class RestTemplate extends InterceptingHttpAccessor implements RestOperat",
                " \t\t\tif (this.responseType != null) {",
                "-\t\t\t\tClass<?> responseClass = null;",
                "-\t\t\t\tif (this.responseType instanceof Class) {",
                "-\t\t\t\t\tresponseClass = (Class<?>) this.responseType;",
                "-\t\t\t\t}",
                "-\t\t\t\tList<MediaType> allSupportedMediaTypes = new ArrayList<>();",
                "-\t\t\t\tfor (HttpMessageConverter<?> converter : getMessageConverters()) {",
                "-\t\t\t\t\tif (responseClass != null) {",
                "-\t\t\t\t\t\tif (converter.canRead(responseClass, null)) {",
                "-\t\t\t\t\t\t\tallSupportedMediaTypes.addAll(getSupportedMediaTypes(converter));",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\telse if (converter instanceof GenericHttpMessageConverter) {",
                "-\t\t\t\t\t\tGenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter;",
                "-\t\t\t\t\t\tif (genericConverter.canRead(this.responseType, null, null)) {",
                "-\t\t\t\t\t\t\tallSupportedMediaTypes.addAll(getSupportedMediaTypes(converter));",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\tif (!allSupportedMediaTypes.isEmpty()) {",
                "-\t\t\t\t\tMediaType.sortBySpecificity(allSupportedMediaTypes);",
                "-\t\t\t\t\tif (logger.isDebugEnabled()) {",
                "-\t\t\t\t\t\tlogger.debug(\"Setting request Accept header to \" + allSupportedMediaTypes);",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\trequest.getHeaders().setAccept(allSupportedMediaTypes);",
                "+\t\t\t\tfinal Class<?> responseClass = (this.responseType instanceof Class) ?",
                "+\t\t\t\t\t\t(Class<?>) this.responseType : null;",
                "+\t\t\t\tfinal List<MediaType> allSupportedMediaTypes = getMessageConverters().stream()",
                "+\t\t\t\t\t\t.filter(converter -> canReadResponse(responseClass, converter))",
                "+\t\t\t\t\t\t.flatMap(this::getSupportedMediaTypes)",
                "+\t\t\t\t\t\t.distinct()",
                "+\t\t\t\t\t\t.sorted(MediaType.SPECIFICITY_COMPARATOR)",
                "+\t\t\t\t\t\t.collect(Collectors.toList());",
                "+\t\t\t\tif (logger.isDebugEnabled()) {",
                "+\t\t\t\t\tlogger.debug(\"Setting request Accept header to \" + allSupportedMediaTypes);",
                " \t\t\t\t}",
                "+\t\t\t\trequest.getHeaders().setAccept(allSupportedMediaTypes);",
                " \t\t\t}",
                "@@ -866,13 +855,24 @@ public class RestTemplate extends InterceptingHttpAccessor implements RestOperat",
                "-\t\tprivate List<MediaType> getSupportedMediaTypes(HttpMessageConverter<?> messageConverter) {",
                "-\t\t\tList<MediaType> supportedMediaTypes = messageConverter.getSupportedMediaTypes();",
                "-\t\t\tList<MediaType> result = new ArrayList<>(supportedMediaTypes.size());",
                "-\t\t\tfor (MediaType supportedMediaType : supportedMediaTypes) {",
                "-\t\t\t\tif (supportedMediaType.getCharset() != null) {",
                "-\t\t\t\t\tsupportedMediaType =",
                "-\t\t\t\t\t\t\tnew MediaType(supportedMediaType.getType(), supportedMediaType.getSubtype());",
                "-\t\t\t\t}",
                "-\t\t\t\tresult.add(supportedMediaType);",
                "+\t\tprivate boolean canReadResponse(@Nullable Class<?> responseClass, HttpMessageConverter<?> converter) {",
                "+\t\t\tif (responseClass != null) {",
                "+\t\t\t\treturn converter.canRead(responseClass, null);",
                "+\t\t\t}",
                "+\t\t\telse if (converter instanceof GenericHttpMessageConverter) {",
                "+\t\t\t\tGenericHttpMessageConverter<?> genericConverter =",
                "+\t\t\t\t\t\t(GenericHttpMessageConverter<?>) converter;",
                "+\t\t\t\treturn genericConverter",
                "+\t\t\t\t\t\t.canRead(this.responseType, null, null);",
                " \t\t\t}",
                "-\t\t\treturn result;",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+",
                "+\t\tprivate Stream<MediaType> getSupportedMediaTypes(HttpMessageConverter<?> messageConverter) {",
                "+\t\t\treturn messageConverter.getSupportedMediaTypes()",
                "+\t\t\t\t\t.stream()",
                "+\t\t\t\t\t.map(mediaType -> {",
                "+\t\t\t\t\t\tif (mediaType.getCharset() != null) {",
                "+\t\t\t\t\t\t\treturn new MediaType(mediaType.getType(), mediaType.getSubtype());",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t\treturn mediaType;",
                "+\t\t\t\t\t});",
                " \t\t}"
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/web/client/RestTemplate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: lead, message",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "89932891ec67df1f716e65f09826f2647baf2f17",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522786232,
            "hunks": 1,
            "message": "Release version 4.3.15.RELEASE",
            "diff": [
                "diff --git a/gradle.properties b/gradle.properties",
                "index 297fc945e3..53eb3c998f 100644",
                "--- a/gradle.properties",
                "+++ b/gradle.properties",
                "@@ -1 +1 @@",
                "-version=4.3.15.BUILD-SNAPSHOT",
                "+version=4.3.15.RELEASE"
            ],
            "changed_files": [
                "gradle.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.15.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2f4010e8d33dcceaaeff8c8c06a8c07508dfec1d",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1524001062,
            "hunks": 1,
            "message": "Correctly delegate to OrderUtils.getPriority for DecoratingProxy Issue: SPR-16739",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java",
                "index ec4471b1d3..ca496f8f36 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java",
                "@@ -109,3 +109,3 @@ public class AnnotationAwareOrderComparator extends OrderComparator {",
                " \t\tif (priority == null && obj instanceof DecoratingProxy) {",
                "-\t\t\tpriority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass());",
                "+\t\t\tpriority = OrderUtils.getPriority(((DecoratingProxy) obj).getDecoratedClass());",
                " \t\t}"
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8d67a982ece90ed00deb98014656c6c4cb35a50e"
                ],
                [
                    "no-tag",
                    "f800df12e318ce6341fed9a629db514960db708c"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2989f01013f4983e9cb2c968cd619e598ab6543d",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523561937,
            "hunks": 144,
            "message": "Cache-safety check for sibling loaders resolving the same classes Issue: SPR-16714",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "index 89418ced65..0b161158e9 100644",
                "--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "@@ -287,7 +287,6 @@ public abstract class ClassUtils {",
                " \t\tcatch (ClassNotFoundException ex) {",
                "-\t\t\tthrow new IllegalArgumentException(\"Cannot find class [\" + className + \"]\", ex);",
                "+\t\t\tthrow new IllegalArgumentException(\"Could not find class [\" + className + \"]\", ex);",
                " \t\t}",
                "-\t\tcatch (LinkageError ex) {",
                "-\t\t\tthrow new IllegalArgumentException(",
                "-\t\t\t\t\t\"Error loading class [\" + className + \"]: problem with class file or dependent class.\", ex);",
                "+\t\tcatch (LinkageError err) {",
                "+\t\t\tthrow new IllegalArgumentException(\"Unresolvable class definition for class [\" + className + \"]\", err);",
                " \t\t}",
                "@@ -295,23 +294,2 @@ public abstract class ClassUtils {",
                "-\t/**",
                "-\t * Resolve the given class name as primitive class, if appropriate,",
                "-\t * according to the JVM's naming rules for primitive classes.",
                "-\t * <p>Also supports the JVM's internal class names for primitive arrays.",
                "-\t * Does <i>not</i> support the \"[]\" suffix notation for primitive arrays;",
                "-\t * this is only supported by {@link #forName(String, ClassLoader)}.",
                "-\t * @param name the name of the potentially primitive class",
                "-\t * @return the primitive class, or {@code null} if the name does not denote",
                "-\t * a primitive class or primitive array class",
                "-\t */",
                "-\tpublic static Class<?> resolvePrimitiveClassName(String name) {",
                "-\t\tClass<?> result = null;",
                "-\t\t// Most class names will be quite long, considering that they",
                "-\t\t// SHOULD sit in a package, so a length check is worthwhile.",
                "-\t\tif (name != null && name.length() <= 8) {",
                "-\t\t\t// Could be a primitive - likely.",
                "-\t\t\tresult = primitiveTypeNameMap.get(name);",
                "-\t\t}",
                "-\t\treturn result;",
                "-\t}",
                "-",
                " \t/**",
                "@@ -322,3 +300,3 @@ public abstract class ClassUtils {",
                " \t * @param classLoader the class loader to use",
                "-\t * (may be {@code null}, which indicates the default class loader)",
                "+\t * (may be {@code null} which indicates the default class loader)",
                " \t * @return whether the specified class is present",
                "@@ -337,27 +315,19 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the user-defined class for the given instance: usually simply",
                "-\t * the class of the given instance, but the original class in case of a",
                "-\t * CGLIB-generated subclass.",
                "-\t * @param instance the instance to check",
                "-\t * @return the user-defined class",
                "-\t */",
                "-\tpublic static Class<?> getUserClass(Object instance) {",
                "-\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "-\t\treturn getUserClass(instance.getClass());",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Return the user-defined class for the given class: usually simply the given",
                "-\t * class, but the original class in case of a CGLIB-generated subclass.",
                "-\t * @param clazz the class to check",
                "-\t * @return the user-defined class",
                "+\t * Check whether the given class is visible in the given ClassLoader.",
                "+\t * @param clazz the class to check (typically an interface)",
                "+\t * @param classLoader the ClassLoader to check against",
                "+\t * (may be {@code null} in which case this method will always return {@code true})",
                " \t */",
                "-\tpublic static Class<?> getUserClass(Class<?> clazz) {",
                "-\t\tif (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {",
                "-\t\t\tClass<?> superclass = clazz.getSuperclass();",
                "-\t\t\tif (superclass != null && Object.class != superclass) {",
                "-\t\t\t\treturn superclass;",
                "-\t\t\t}",
                "+\tpublic static boolean isVisible(Class<?> clazz, ClassLoader classLoader) {",
                "+\t\tif (classLoader == null) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+\t\ttry {",
                "+\t\t\treturn (clazz == classLoader.loadClass(clazz.getName()));",
                "+\t\t\t// Else: different class with same name found",
                "+\t\t}",
                "+\t\tcatch (ClassNotFoundException ex) {",
                "+\t\t\t// No corresponding class found at all",
                "+\t\t\treturn false;",
                " \t\t}",
                "-\t\treturn clazz;",
                " \t}",
                "@@ -369,2 +339,3 @@ public abstract class ClassUtils {",
                " \t * @param classLoader the ClassLoader to potentially cache metadata in",
                "+\t * (may be {@code null} which indicates the system class loader)",
                " \t */",
                "@@ -374,12 +345,14 @@ public abstract class ClassUtils {",
                " \t\t\tClassLoader target = clazz.getClassLoader();",
                "-\t\t\tif (target == null) {",
                "+\t\t\t// Common cases",
                "+\t\t\tif (target == classLoader || target == null) {",
                " \t\t\t\treturn true;",
                " \t\t\t}",
                "-\t\t\tClassLoader cur = classLoader;",
                "-\t\t\tif (cur == target) {",
                "-\t\t\t\treturn true;",
                "+\t\t\tif (classLoader == null) {",
                "+\t\t\t\treturn false;",
                " \t\t\t}",
                "-\t\t\twhile (cur != null) {",
                "-\t\t\t\tcur = cur.getParent();",
                "-\t\t\t\tif (cur == target) {",
                "+\t\t\t// Check for match in ancestors -> positive",
                "+\t\t\tClassLoader current = classLoader;",
                "+\t\t\twhile (current != null) {",
                "+\t\t\t\tcurrent = current.getParent();",
                "+\t\t\t\tif (current == target) {",
                " \t\t\t\t\treturn true;",
                "@@ -387,27 +360,38 @@ public abstract class ClassUtils {",
                " \t\t\t}",
                "-\t\t\treturn false;",
                "+\t\t\t// Check for match in children -> negative",
                "+\t\t\twhile (target != null) {",
                "+\t\t\t\ttarget = target.getParent();",
                "+\t\t\t\tif (target == classLoader) {",
                "+\t\t\t\t\treturn false;",
                "+\t\t\t\t}",
                "+\t\t\t}",
                " \t\t}",
                " \t\tcatch (SecurityException ex) {",
                "-\t\t\t// Probably from the system ClassLoader - let's consider it safe.",
                "-\t\t\treturn true;",
                "+\t\t\t// Fall through to Class reference comparison below",
                " \t\t}",
                "-\t}",
                "+\t\t// Fallback for ClassLoaders without parent/child relationship:",
                "+\t\t// safe if same Class can be loaded from given ClassLoader",
                "+\t\treturn (classLoader != null && isVisible(clazz, classLoader));",
                "+\t}",
                " \t/**",
                "-\t * Get the class name without the qualified package name.",
                "-\t * @param className the className to get the short name for",
                "-\t * @return the class name of the class without the package name",
                "-\t * @throws IllegalArgumentException if the className is empty",
                "+\t * Resolve the given class name as primitive class, if appropriate,",
                "+\t * according to the JVM's naming rules for primitive classes.",
                "+\t * <p>Also supports the JVM's internal class names for primitive arrays.",
                "+\t * Does <i>not</i> support the \"[]\" suffix notation for primitive arrays;",
                "+\t * this is only supported by {@link #forName(String, ClassLoader)}.",
                "+\t * @param name the name of the potentially primitive class",
                "+\t * @return the primitive class, or {@code null} if the name does not denote",
                "+\t * a primitive class or primitive array class",
                " \t */",
                "-\tpublic static String getShortName(String className) {",
                "-\t\tAssert.hasLength(className, \"Class name must not be empty\");",
                "-\t\tint lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\tint nameEndIndex = className.indexOf(CGLIB_CLASS_SEPARATOR);",
                "-\t\tif (nameEndIndex == -1) {",
                "-\t\t\tnameEndIndex = className.length();",
                "+\tpublic static Class<?> resolvePrimitiveClassName(String name) {",
                "+\t\tClass<?> result = null;",
                "+\t\t// Most class names will be quite long, considering that they",
                "+\t\t// SHOULD sit in a package, so a length check is worthwhile.",
                "+\t\tif (name != null && name.length() <= 8) {",
                "+\t\t\t// Could be a primitive - likely.",
                "+\t\t\tresult = primitiveTypeNameMap.get(name);",
                " \t\t}",
                "-\t\tString shortName = className.substring(lastDotIndex + 1, nameEndIndex);",
                "-\t\tshortName = shortName.replace(INNER_CLASS_SEPARATOR, PACKAGE_SEPARATOR);",
                "-\t\treturn shortName;",
                "+\t\treturn result;",
                " \t}",
                "@@ -415,8 +399,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Get the class name without the qualified package name.",
                "-\t * @param clazz the class to get the short name for",
                "-\t * @return the class name of the class without the package name",
                "+\t * Check if the given class represents a primitive wrapper,",
                "+\t * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.",
                "+\t * @param clazz the class to check",
                "+\t * @return whether the given class is a primitive wrapper class",
                " \t */",
                "-\tpublic static String getShortName(Class<?> clazz) {",
                "-\t\treturn getShortName(getQualifiedName(clazz));",
                "+\tpublic static boolean isPrimitiveWrapper(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\treturn primitiveWrapperTypeMap.containsKey(clazz);",
                " \t}",
                "@@ -424,13 +410,11 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the short string name of a Java class in uncapitalized JavaBeans",
                "-\t * property format. Strips the outer class name in case of an inner class.",
                "-\t * @param clazz the class",
                "-\t * @return the short name rendered in a standard JavaBeans property format",
                "-\t * @see java.beans.Introspector#decapitalize(String)",
                "+\t * Check if the given class represents a primitive (i.e. boolean, byte,",
                "+\t * char, short, int, long, float, or double) or a primitive wrapper",
                "+\t * (i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double).",
                "+\t * @param clazz the class to check",
                "+\t * @return whether the given class is a primitive or primitive wrapper class",
                " \t */",
                "-\tpublic static String getShortNameAsProperty(Class<?> clazz) {",
                "-\t\tString shortName = getShortName(clazz);",
                "-\t\tint dotIndex = shortName.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\tshortName = (dotIndex != -1 ? shortName.substring(dotIndex + 1) : shortName);",
                "-\t\treturn Introspector.decapitalize(shortName);",
                "+\tpublic static boolean isPrimitiveOrWrapper(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\treturn (clazz.isPrimitive() || isPrimitiveWrapper(clazz));",
                " \t}",
                "@@ -438,12 +422,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine the name of the class file, relative to the containing",
                "-\t * package: e.g. \"String.class\"",
                "-\t * @param clazz the class",
                "-\t * @return the file name of the \".class\" file",
                "+\t * Check if the given class represents an array of primitives,",
                "+\t * i.e. boolean, byte, char, short, int, long, float, or double.",
                "+\t * @param clazz the class to check",
                "+\t * @return whether the given class is a primitive array class",
                " \t */",
                "-\tpublic static String getClassFileName(Class<?> clazz) {",
                "+\tpublic static boolean isPrimitiveArray(Class<?> clazz) {",
                " \t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tString className = clazz.getName();",
                "-\t\tint lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\treturn className.substring(lastDotIndex + 1) + CLASS_FILE_SUFFIX;",
                "+\t\treturn (clazz.isArray() && clazz.getComponentType().isPrimitive());",
                " \t}",
                "@@ -451,11 +433,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine the name of the package of the given class,",
                "-\t * e.g. \"java.lang\" for the {@code java.lang.String} class.",
                "-\t * @param clazz the class",
                "-\t * @return the package name, or the empty String if the class",
                "-\t * is defined in the default package",
                "+\t * Check if the given class represents an array of primitive wrappers,",
                "+\t * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.",
                "+\t * @param clazz the class to check",
                "+\t * @return whether the given class is a primitive wrapper array class",
                " \t */",
                "-\tpublic static String getPackageName(Class<?> clazz) {",
                "+\tpublic static boolean isPrimitiveWrapperArray(Class<?> clazz) {",
                " \t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn getPackageName(clazz.getName());",
                "+\t\treturn (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));",
                " \t}",
                "@@ -463,12 +444,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine the name of the package of the given fully-qualified class name,",
                "-\t * e.g. \"java.lang\" for the {@code java.lang.String} class name.",
                "-\t * @param fqClassName the fully-qualified class name",
                "-\t * @return the package name, or the empty String if the class",
                "-\t * is defined in the default package",
                "+\t * Resolve the given class if it is a primitive class,",
                "+\t * returning the corresponding primitive wrapper type instead.",
                "+\t * @param clazz the class to check",
                "+\t * @return the original class, or a primitive wrapper for the original primitive type",
                " \t */",
                "-\tpublic static String getPackageName(String fqClassName) {",
                "-\t\tAssert.notNull(fqClassName, \"Class name must not be null\");",
                "-\t\tint lastDotIndex = fqClassName.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\treturn (lastDotIndex != -1 ? fqClassName.substring(0, lastDotIndex) : \"\");",
                "+\tpublic static Class<?> resolvePrimitiveIfNecessary(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\treturn (clazz.isPrimitive() && clazz != void.class ? primitiveTypeToWrapperMap.get(clazz) : clazz);",
                " \t}",
                "@@ -476,15 +455,29 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the qualified name of the given class: usually simply",
                "-\t * the class name, but component type class name + \"[]\" for arrays.",
                "-\t * @param clazz the class",
                "-\t * @return the qualified name of the class",
                "+\t * Check if the right-hand side type may be assigned to the left-hand side",
                "+\t * type, assuming setting by reflection. Considers primitive wrapper",
                "+\t * classes as assignable to the corresponding primitive types.",
                "+\t * @param lhsType the target type",
                "+\t * @param rhsType the value type that should be assigned to the target type",
                "+\t * @return if the target type is assignable from the value type",
                "+\t * @see TypeUtils#isAssignable",
                " \t */",
                "-\tpublic static String getQualifiedName(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tif (clazz.isArray()) {",
                "-\t\t\treturn getQualifiedNameForArray(clazz);",
                "+\tpublic static boolean isAssignable(Class<?> lhsType, Class<?> rhsType) {",
                "+\t\tAssert.notNull(lhsType, \"Left-hand side type must not be null\");",
                "+\t\tAssert.notNull(rhsType, \"Right-hand side type must not be null\");",
                "+\t\tif (lhsType.isAssignableFrom(rhsType)) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+\t\tif (lhsType.isPrimitive()) {",
                "+\t\t\tClass<?> resolvedPrimitive = primitiveWrapperTypeMap.get(rhsType);",
                "+\t\t\tif (lhsType == resolvedPrimitive) {",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                " \t\t}",
                " \t\telse {",
                "-\t\t\treturn clazz.getName();",
                "+\t\t\tClass<?> resolvedWrapper = primitiveTypeToWrapperMap.get(rhsType);",
                "+\t\t\tif (resolvedWrapper != null && lhsType.isAssignableFrom(resolvedWrapper)) {",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                " \t\t}",
                "+\t\treturn false;",
                " \t}",
                "@@ -492,15 +485,12 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Build a nice qualified name for an array:",
                "-\t * component type class name + \"[]\".",
                "-\t * @param clazz the array class",
                "-\t * @return a qualified name for the array class",
                "+\t * Determine if the given type is assignable from the given value,",
                "+\t * assuming setting by reflection. Considers primitive wrapper classes",
                "+\t * as assignable to the corresponding primitive types.",
                "+\t * @param type the target type",
                "+\t * @param value the value that should be assigned to the type",
                "+\t * @return if the type is assignable from the value",
                " \t */",
                "-\tprivate static String getQualifiedNameForArray(Class<?> clazz) {",
                "-\t\tStringBuilder result = new StringBuilder();",
                "-\t\twhile (clazz.isArray()) {",
                "-\t\t\tclazz = clazz.getComponentType();",
                "-\t\t\tresult.append(ARRAY_SUFFIX);",
                "-\t\t}",
                "-\t\tresult.insert(0, clazz.getName());",
                "-\t\treturn result.toString();",
                "+\tpublic static boolean isAssignableValue(Class<?> type, Object value) {",
                "+\t\tAssert.notNull(type, \"Type must not be null\");",
                "+\t\treturn (value != null ? isAssignable(type, value.getClass()) : !type.isPrimitive());",
                " \t}",
                "@@ -508,9 +498,9 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the qualified name of the given method, consisting of",
                "-\t * fully qualified interface/class name + \".\" + method name.",
                "-\t * @param method the method",
                "-\t * @return the qualified name of the method",
                "+\t * Convert a \"/\"-based resource path to a \".\"-based fully qualified class name.",
                "+\t * @param resourcePath the resource path pointing to a class",
                "+\t * @return the corresponding fully qualified class name",
                " \t */",
                "-\tpublic static String getQualifiedMethodName(Method method) {",
                "-\t\treturn getQualifiedMethodName(method, null);",
                "+\tpublic static String convertResourcePathToClassName(String resourcePath) {",
                "+\t\tAssert.notNull(resourcePath, \"Resource path must not be null\");",
                "+\t\treturn resourcePath.replace(PATH_SEPARATOR, PACKAGE_SEPARATOR);",
                " \t}",
                "@@ -518,13 +508,9 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the qualified name of the given method, consisting of",
                "-\t * fully qualified interface/class name + \".\" + method name.",
                "-\t * @param method the method",
                "-\t * @param clazz the clazz that the method is being invoked on",
                "-\t * (may be {@code null} to indicate the method's declaring class)",
                "-\t * @return the qualified name of the method",
                "-\t * @since 4.3.4",
                "+\t * Convert a \".\"-based fully qualified class name to a \"/\"-based resource path.",
                "+\t * @param className the fully qualified class name",
                "+\t * @return the corresponding resource path, pointing to the class",
                " \t */",
                "-\tpublic static String getQualifiedMethodName(Method method, Class<?> clazz) {",
                "-\t\tAssert.notNull(method, \"Method must not be null\");",
                "-\t\treturn (clazz != null ? clazz : method.getDeclaringClass()).getName() + '.' + method.getName();",
                "+\tpublic static String convertClassNameToResourcePath(String className) {",
                "+\t\tAssert.notNull(className, \"Class name must not be null\");",
                "+\t\treturn className.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
                " \t}",
                "@@ -532,55 +518,23 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return a descriptive name for the given object's type: usually simply",
                "-\t * the class name, but component type class name + \"[]\" for arrays,",
                "-\t * and an appended list of implemented interfaces for JDK proxies.",
                "-\t * @param value the value to introspect",
                "-\t * @return the qualified name of the class",
                "-\t */",
                "-\tpublic static String getDescriptiveType(Object value) {",
                "-\t\tif (value == null) {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-\t\tClass<?> clazz = value.getClass();",
                "-\t\tif (Proxy.isProxyClass(clazz)) {",
                "-\t\t\tStringBuilder result = new StringBuilder(clazz.getName());",
                "-\t\t\tresult.append(\" implementing \");",
                "-\t\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "-\t\t\tfor (int i = 0; i < ifcs.length; i++) {",
                "-\t\t\t\tresult.append(ifcs[i].getName());",
                "-\t\t\t\tif (i < ifcs.length - 1) {",
                "-\t\t\t\t\tresult.append(',');",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\treturn result.toString();",
                "-\t\t}",
                "-\t\telse if (clazz.isArray()) {",
                "-\t\t\treturn getQualifiedNameForArray(clazz);",
                "-\t\t}",
                "-\t\telse {",
                "-\t\t\treturn clazz.getName();",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Check whether the given class matches the user-specified type name.",
                "-\t * @param clazz the class to check",
                "-\t * @param typeName the type name to match",
                "-\t */",
                "-\tpublic static boolean matchesTypeName(Class<?> clazz, String typeName) {",
                "-\t\treturn (typeName != null &&",
                "-\t\t\t\t(typeName.equals(clazz.getName()) || typeName.equals(clazz.getSimpleName()) ||",
                "-\t\t\t\t(clazz.isArray() && typeName.equals(getQualifiedNameForArray(clazz)))));",
                "-\t}",
                "-",
                "-",
                "-\t/**",
                "-\t * Determine whether the given class has a public constructor with the given signature.",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to \"false\".",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * @return whether the class has a corresponding constructor",
                "-\t * @see Class#getMethod",
                "+\t * Return a path suitable for use with {@code ClassLoader.getResource}",
                "+\t * (also suitable for use with {@code Class.getResource} by prepending a",
                "+\t * slash ('/') to the return value). Built by taking the package of the specified",
                "+\t * class file, converting all dots ('.') to slashes ('/'), adding a trailing slash",
                "+\t * if necessary, and concatenating the specified resource name to this.",
                "+\t * <br/>As such, this function may be used to build a path suitable for",
                "+\t * loading a resource file that is in the same package as a class file,",
                "+\t * although {@link org.springframework.core.io.ClassPathResource} is usually",
                "+\t * even more convenient.",
                "+\t * @param clazz the Class whose package will be used as the base",
                "+\t * @param resourceName the resource name to append. A leading slash is optional.",
                "+\t * @return the built-up resource path",
                "+\t * @see ClassLoader#getResource",
                "+\t * @see Class#getResource",
                " \t */",
                "-\tpublic static boolean hasConstructor(Class<?> clazz, Class<?>... paramTypes) {",
                "-\t\treturn (getConstructorIfAvailable(clazz, paramTypes) != null);",
                "+\tpublic static String addResourcePathToPackagePath(Class<?> clazz, String resourceName) {",
                "+\t\tAssert.notNull(resourceName, \"Resource name must not be null\");",
                "+\t\tif (!resourceName.startsWith(\"/\")) {",
                "+\t\t\treturn classPackageAsResourcePath(clazz) + '/' + resourceName;",
                "+\t\t}",
                "+\t\treturn classPackageAsResourcePath(clazz) + resourceName;",
                " \t}",
                "@@ -588,18 +542,26 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given class has a public constructor with the given signature,",
                "-\t * and return it if available (else return {@code null}).",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to {@code null}.",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * @return the constructor, or {@code null} if not found",
                "-\t * @see Class#getConstructor",
                "+\t * Given an input class object, return a string which consists of the",
                "+\t * class's package name as a pathname, i.e., all dots ('.') are replaced by",
                "+\t * slashes ('/'). Neither a leading nor trailing slash is added. The result",
                "+\t * could be concatenated with a slash and the name of a resource and fed",
                "+\t * directly to {@code ClassLoader.getResource()}. For it to be fed to",
                "+\t * {@code Class.getResource} instead, a leading slash would also have",
                "+\t * to be prepended to the returned value.",
                "+\t * @param clazz the input class. A {@code null} value or the default",
                "+\t * (empty) package will result in an empty string (\"\") being returned.",
                "+\t * @return a path which represents the package name",
                "+\t * @see ClassLoader#getResource",
                "+\t * @see Class#getResource",
                " \t */",
                "-\tpublic static <T> Constructor<T> getConstructorIfAvailable(Class<T> clazz, Class<?>... paramTypes) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\ttry {",
                "-\t\t\treturn clazz.getConstructor(paramTypes);",
                "+\tpublic static String classPackageAsResourcePath(Class<?> clazz) {",
                "+\t\tif (clazz == null) {",
                "+\t\t\treturn \"\";",
                " \t\t}",
                "-\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\treturn null;",
                "+\t\tString className = clazz.getName();",
                "+\t\tint packageEndIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\tif (packageEndIndex == -1) {",
                "+\t\t\treturn \"\";",
                " \t\t}",
                "+\t\tString packageName = className.substring(0, packageEndIndex);",
                "+\t\treturn packageName.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
                " \t}",
                "@@ -607,12 +569,12 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given class has a public method with the given signature.",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to \"false\".",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param methodName the name of the method",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * @return whether the class has a corresponding method",
                "-\t * @see Class#getMethod",
                "+\t * Build a String that consists of the names of the classes/interfaces",
                "+\t * in the given array.",
                "+\t * <p>Basically like {@code AbstractCollection.toString()}, but stripping",
                "+\t * the \"class \"/\"interface \" prefix before every class name.",
                "+\t * @param classes an array of Class objects",
                "+\t * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"",
                "+\t * @see java.util.AbstractCollection#toString()",
                " \t */",
                "-\tpublic static boolean hasMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {",
                "-\t\treturn (getMethodIfAvailable(clazz, methodName, paramTypes) != null);",
                "+\tpublic static String classNamesToString(Class<?>... classes) {",
                "+\t\treturn classNamesToString(Arrays.asList(classes));",
                " \t}",
                "@@ -620,44 +582,24 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given class has a public method with the given signature,",
                "-\t * and return it if available (else throws an {@code IllegalStateException}).",
                "-\t * <p>In case of any signature specified, only returns the method if there is a",
                "-\t * unique candidate, i.e. a single public method with the specified name.",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to {@code IllegalStateException}.",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param methodName the name of the method",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * (may be {@code null} to indicate any signature)",
                "-\t * @return the method (never {@code null})",
                "-\t * @throws IllegalStateException if the method has not been found",
                "-\t * @see Class#getMethod",
                "+\t * Build a String that consists of the names of the classes/interfaces",
                "+\t * in the given collection.",
                "+\t * <p>Basically like {@code AbstractCollection.toString()}, but stripping",
                "+\t * the \"class \"/\"interface \" prefix before every class name.",
                "+\t * @param classes a Collection of Class objects (may be {@code null})",
                "+\t * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"",
                "+\t * @see java.util.AbstractCollection#toString()",
                " \t */",
                "-\tpublic static Method getMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\tif (paramTypes != null) {",
                "-\t\t\ttry {",
                "-\t\t\t\treturn clazz.getMethod(methodName, paramTypes);",
                "-\t\t\t}",
                "-\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\tthrow new IllegalStateException(\"Expected method not found: \" + ex);",
                "-\t\t\t}",
                "+\tpublic static String classNamesToString(Collection<Class<?>> classes) {",
                "+\t\tif (CollectionUtils.isEmpty(classes)) {",
                "+\t\t\treturn \"[]\";",
                " \t\t}",
                "-\t\telse {",
                "-\t\t\tSet<Method> candidates = new HashSet<Method>(1);",
                "-\t\t\tMethod[] methods = clazz.getMethods();",
                "-\t\t\tfor (Method method : methods) {",
                "-\t\t\t\tif (methodName.equals(method.getName())) {",
                "-\t\t\t\t\tcandidates.add(method);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tif (candidates.size() == 1) {",
                "-\t\t\t\treturn candidates.iterator().next();",
                "-\t\t\t}",
                "-\t\t\telse if (candidates.isEmpty()) {",
                "-\t\t\t\tthrow new IllegalStateException(\"Expected method not found: \" + clazz.getName() + '.' + methodName);",
                "-\t\t\t}",
                "-\t\t\telse {",
                "-\t\t\t\tthrow new IllegalStateException(\"No unique method found: \" + clazz.getName() + '.' + methodName);",
                "+\t\tStringBuilder sb = new StringBuilder(\"[\");",
                "+\t\tfor (Iterator<Class<?>> it = classes.iterator(); it.hasNext(); ) {",
                "+\t\t\tClass<?> clazz = it.next();",
                "+\t\t\tsb.append(clazz.getName());",
                "+\t\t\tif (it.hasNext()) {",
                "+\t\t\t\tsb.append(\", \");",
                " \t\t\t}",
                " \t\t}",
                "+\t\tsb.append(\"]\");",
                "+\t\treturn sb.toString();",
                " \t}",
                "@@ -665,38 +607,14 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given class has a public method with the given signature,",
                "-\t * and return it if available (else return {@code null}).",
                "-\t * <p>In case of any signature specified, only returns the method if there is a",
                "-\t * unique candidate, i.e. a single public method with the specified name.",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to {@code null}.",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param methodName the name of the method",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * (may be {@code null} to indicate any signature)",
                "-\t * @return the method, or {@code null} if not found",
                "-\t * @see Class#getMethod",
                "+\t * Copy the given {@code Collection} into a {@code Class} array.",
                "+\t * <p>The {@code Collection} must contain {@code Class} elements only.",
                "+\t * @param collection the {@code Collection} to copy",
                "+\t * @return the {@code Class} array",
                "+\t * @since 3.1",
                "+\t * @see StringUtils#toStringArray",
                " \t */",
                "-\tpublic static Method getMethodIfAvailable(Class<?> clazz, String methodName, Class<?>... paramTypes) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\tif (paramTypes != null) {",
                "-\t\t\ttry {",
                "-\t\t\t\treturn clazz.getMethod(methodName, paramTypes);",
                "-\t\t\t}",
                "-\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\treturn null;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\telse {",
                "-\t\t\tSet<Method> candidates = new HashSet<Method>(1);",
                "-\t\t\tMethod[] methods = clazz.getMethods();",
                "-\t\t\tfor (Method method : methods) {",
                "-\t\t\t\tif (methodName.equals(method.getName())) {",
                "-\t\t\t\t\tcandidates.add(method);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tif (candidates.size() == 1) {",
                "-\t\t\t\treturn candidates.iterator().next();",
                "-\t\t\t}",
                "+\tpublic static Class<?>[] toClassArray(Collection<Class<?>> collection) {",
                "+\t\tif (collection == null) {",
                " \t\t\treturn null;",
                " \t\t}",
                "+\t\treturn collection.toArray(new Class<?>[collection.size()]);",
                " \t}",
                "@@ -704,26 +622,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the number of methods with a given name (with any argument types),",
                "-\t * for the given class and/or its superclasses. Includes non-public methods.",
                "-\t * @param clazz\tthe clazz to check",
                "-\t * @param methodName the name of the method",
                "-\t * @return the number of methods with the given name",
                "+\t * Return all interfaces that the given instance implements as an array,",
                "+\t * including ones implemented by superclasses.",
                "+\t * @param instance the instance to analyze for interfaces",
                "+\t * @return all interfaces that the given instance implements as an array",
                " \t */",
                "-\tpublic static int getMethodCountForName(Class<?> clazz, String methodName) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\tint count = 0;",
                "-\t\tMethod[] declaredMethods = clazz.getDeclaredMethods();",
                "-\t\tfor (Method method : declaredMethods) {",
                "-\t\t\tif (methodName.equals(method.getName())) {",
                "-\t\t\t\tcount++;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "-\t\tfor (Class<?> ifc : ifcs) {",
                "-\t\t\tcount += getMethodCountForName(ifc, methodName);",
                "-\t\t}",
                "-\t\tif (clazz.getSuperclass() != null) {",
                "-\t\t\tcount += getMethodCountForName(clazz.getSuperclass(), methodName);",
                "-\t\t}",
                "-\t\treturn count;",
                "+\tpublic static Class<?>[] getAllInterfaces(Object instance) {",
                "+\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "+\t\treturn getAllInterfacesForClass(instance.getClass());",
                " \t}",
                "@@ -731,25 +633,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Does the given class or one of its superclasses at least have one or more",
                "-\t * methods with the supplied name (with any argument types)?",
                "-\t * Includes non-public methods.",
                "-\t * @param clazz\tthe clazz to check",
                "-\t * @param methodName the name of the method",
                "-\t * @return whether there is at least one method with the given name",
                "+\t * Return all interfaces that the given class implements as an array,",
                "+\t * including ones implemented by superclasses.",
                "+\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "+\t * @param clazz the class to analyze for interfaces",
                "+\t * @return all interfaces that the given object implements as an array",
                " \t */",
                "-\tpublic static boolean hasAtLeastOneMethodWithName(Class<?> clazz, String methodName) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\tMethod[] declaredMethods = clazz.getDeclaredMethods();",
                "-\t\tfor (Method method : declaredMethods) {",
                "-\t\t\tif (method.getName().equals(methodName)) {",
                "-\t\t\t\treturn true;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "-\t\tfor (Class<?> ifc : ifcs) {",
                "-\t\t\tif (hasAtLeastOneMethodWithName(ifc, methodName)) {",
                "-\t\t\t\treturn true;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\treturn (clazz.getSuperclass() != null && hasAtLeastOneMethodWithName(clazz.getSuperclass(), methodName));",
                "+\tpublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz) {",
                "+\t\treturn getAllInterfacesForClass(clazz, null);",
                " \t}",
                "@@ -757,44 +644,23 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Given a method, which may come from an interface, and a target class used",
                "-\t * in the current reflective invocation, find the corresponding target method",
                "-\t * if there is one. E.g. the method may be {@code IFoo.bar()} and the",
                "-\t * target class may be {@code DefaultFoo}. In this case, the method may be",
                "-\t * {@code DefaultFoo.bar()}. This enables attributes on that method to be found.",
                "-\t * <p><b>NOTE:</b> In contrast to {@link org.springframework.aop.support.AopUtils#getMostSpecificMethod},",
                "-\t * this method does <i>not</i> resolve Java 5 bridge methods automatically.",
                "-\t * Call {@link org.springframework.core.BridgeMethodResolver#findBridgedMethod}",
                "-\t * if bridge method resolution is desirable (e.g. for obtaining metadata from",
                "-\t * the original method definition).",
                "-\t * <p><b>NOTE:</b> Since Spring 3.1.1, if Java security settings disallow reflective",
                "-\t * access (e.g. calls to {@code Class#getDeclaredMethods} etc, this implementation",
                "-\t * will fall back to returning the originally provided method.",
                "-\t * @param method the method to be invoked, which may come from an interface",
                "-\t * @param targetClass the target class for the current invocation.",
                "-\t * May be {@code null} or may not even implement the method.",
                "-\t * @return the specific target method, or the original method if the",
                "-\t * {@code targetClass} doesn't implement it or is {@code null}",
                "+\t * Return all interfaces that the given class implements as an array,",
                "+\t * including ones implemented by superclasses.",
                "+\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "+\t * @param clazz the class to analyze for interfaces",
                "+\t * @param classLoader the ClassLoader that the interfaces need to be visible in",
                "+\t * (may be {@code null} when accepting all declared interfaces)",
                "+\t * @return all interfaces that the given object implements as an array",
                " \t */",
                "-\tpublic static Method getMostSpecificMethod(Method method, Class<?> targetClass) {",
                "-\t\tif (method != null && isOverridable(method, targetClass) &&",
                "-\t\t\t\ttargetClass != null && targetClass != method.getDeclaringClass()) {",
                "-\t\t\ttry {",
                "-\t\t\t\tif (Modifier.isPublic(method.getModifiers())) {",
                "-\t\t\t\t\ttry {",
                "-\t\t\t\t\t\treturn targetClass.getMethod(method.getName(), method.getParameterTypes());",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\t\t\treturn method;",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\telse {",
                "-\t\t\t\t\tMethod specificMethod =",
                "-\t\t\t\t\t\t\tReflectionUtils.findMethod(targetClass, method.getName(), method.getParameterTypes());",
                "-\t\t\t\t\treturn (specificMethod != null ? specificMethod : method);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tcatch (SecurityException ex) {",
                "-\t\t\t\t// Security settings are disallowing reflective access; fall back to 'method' below.",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\treturn method;",
                "+\tpublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz, ClassLoader classLoader) {",
                "+\t\treturn toClassArray(getAllInterfacesForClassAsSet(clazz, classLoader));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Return all interfaces that the given instance implements as a Set,",
                "+\t * including ones implemented by superclasses.",
                "+\t * @param instance the instance to analyze for interfaces",
                "+\t * @return all interfaces that the given instance implements as a Set",
                "+\t */",
                "+\tpublic static Set<Class<?>> getAllInterfacesAsSet(Object instance) {",
                "+\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "+\t\treturn getAllInterfacesForClassAsSet(instance.getClass());",
                " \t}",
                "@@ -802,19 +668,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given method is declared by the user or at least pointing to",
                "-\t * a user-declared method.",
                "-\t * <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the",
                "-\t * {@code GroovyObject} interface (for interface methods; on an implementation class,",
                "-\t * implementations of the {@code GroovyObject} methods will be marked as synthetic anyway).",
                "-\t * Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered",
                "-\t * as user-level methods since they are eventually pointing to a user-declared generic method.",
                "-\t * @param method the method to check",
                "-\t * @return {@code true} if the method can be considered as user-declared; [@code false} otherwise",
                "+\t * Return all interfaces that the given class implements as a Set,",
                "+\t * including ones implemented by superclasses.",
                "+\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "+\t * @param clazz the class to analyze for interfaces",
                "+\t * @return all interfaces that the given object implements as a Set",
                " \t */",
                "-\tpublic static boolean isUserLevelMethod(Method method) {",
                "-\t\tAssert.notNull(method, \"Method must not be null\");",
                "-\t\treturn (method.isBridge() || (!method.isSynthetic() && !isGroovyObjectMethod(method)));",
                "-\t}",
                "-",
                "-\tprivate static boolean isGroovyObjectMethod(Method method) {",
                "-\t\treturn method.getDeclaringClass().getName().equals(\"groovy.lang.GroovyObject\");",
                "+\tpublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz) {",
                "+\t\treturn getAllInterfacesForClassAsSet(clazz, null);",
                " \t}",
                "@@ -822,14 +679,25 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given method is overridable in the given target class.",
                "-\t * @param method the method to check",
                "-\t * @param targetClass the target class to check against",
                "+\t * Return all interfaces that the given class implements as a Set,",
                "+\t * including ones implemented by superclasses.",
                "+\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "+\t * @param clazz the class to analyze for interfaces",
                "+\t * @param classLoader the ClassLoader that the interfaces need to be visible in",
                "+\t * (may be {@code null} when accepting all declared interfaces)",
                "+\t * @return all interfaces that the given object implements as a Set",
                " \t */",
                "-\tprivate static boolean isOverridable(Method method, Class<?> targetClass) {",
                "-\t\tif (Modifier.isPrivate(method.getModifiers())) {",
                "-\t\t\treturn false;",
                "+\tpublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tif (clazz.isInterface() && isVisible(clazz, classLoader)) {",
                "+\t\t\treturn Collections.<Class<?>>singleton(clazz);",
                " \t\t}",
                "-\t\tif (Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers())) {",
                "-\t\t\treturn true;",
                "+\t\tSet<Class<?>> interfaces = new LinkedHashSet<Class<?>>();",
                "+\t\tClass<?> current = clazz;",
                "+\t\twhile (current != null) {",
                "+\t\t\tClass<?>[] ifcs = current.getInterfaces();",
                "+\t\t\tfor (Class<?> ifc : ifcs) {",
                "+\t\t\t\tinterfaces.addAll(getAllInterfacesForClassAsSet(ifc, classLoader));",
                "+\t\t\t}",
                "+\t\t\tcurrent = current.getSuperclass();",
                " \t\t}",
                "-\t\treturn getPackageName(method.getDeclaringClass()).equals(getPackageName(targetClass));",
                "+\t\treturn interfaces;",
                " \t}",
                "@@ -837,31 +705,56 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return a public static method of a class.",
                "-\t * @param clazz the class which defines the method",
                "-\t * @param methodName the static method name",
                "-\t * @param args the parameter types to the method",
                "-\t * @return the static method, or {@code null} if no static method was found",
                "-\t * @throws IllegalArgumentException if the method name is blank or the clazz is null",
                "+\t * Create a composite interface Class for the given interfaces,",
                "+\t * implementing the given interfaces in one single Class.",
                "+\t * <p>This implementation builds a JDK proxy class for the given interfaces.",
                "+\t * @param interfaces the interfaces to merge",
                "+\t * @param classLoader the ClassLoader to create the composite Class in",
                "+\t * @return the merged interface as Class",
                "+\t * @see java.lang.reflect.Proxy#getProxyClass",
                " \t */",
                "-\tpublic static Method getStaticMethod(Class<?> clazz, String methodName, Class<?>... args) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\ttry {",
                "-\t\t\tMethod method = clazz.getMethod(methodName, args);",
                "-\t\t\treturn Modifier.isStatic(method.getModifiers()) ? method : null;",
                "+\tpublic static Class<?> createCompositeInterface(Class<?>[] interfaces, ClassLoader classLoader) {",
                "+\t\tAssert.notEmpty(interfaces, \"Interfaces must not be empty\");",
                "+\t\treturn Proxy.getProxyClass(classLoader, interfaces);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Determine the common ancestor of the given classes, if any.",
                "+\t * @param clazz1 the class to introspect",
                "+\t * @param clazz2 the other class to introspect",
                "+\t * @return the common ancestor (i.e. common superclass, one interface",
                "+\t * extending the other), or {@code null} if none found. If any of the",
                "+\t * given classes is {@code null}, the other class will be returned.",
                "+\t * @since 3.2.6",
                "+\t */",
                "+\tpublic static Class<?> determineCommonAncestor(Class<?> clazz1, Class<?> clazz2) {",
                "+\t\tif (clazz1 == null) {",
                "+\t\t\treturn clazz2;",
                " \t\t}",
                "-\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\treturn null;",
                "+\t\tif (clazz2 == null) {",
                "+\t\t\treturn clazz1;",
                "+\t\t}",
                "+\t\tif (clazz1.isAssignableFrom(clazz2)) {",
                "+\t\t\treturn clazz1;",
                "+\t\t}",
                "+\t\tif (clazz2.isAssignableFrom(clazz1)) {",
                "+\t\t\treturn clazz2;",
                "+\t\t}",
                "+\t\tClass<?> ancestor = clazz1;",
                "+\t\tdo {",
                "+\t\t\tancestor = ancestor.getSuperclass();",
                "+\t\t\tif (ancestor == null || Object.class == ancestor) {",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                " \t\t}",
                "+\t\twhile (!ancestor.isAssignableFrom(clazz2));",
                "+\t\treturn ancestor;",
                " \t}",
                "-",
                " \t/**",
                "-\t * Check if the given class represents a primitive wrapper,",
                "-\t * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.",
                "-\t * @param clazz the class to check",
                "-\t * @return whether the given class is a primitive wrapper class",
                "+\t * Check whether the given object is a CGLIB proxy.",
                "+\t * @param object the object to check",
                "+\t * @see #isCglibProxyClass(Class)",
                "+\t * @see org.springframework.aop.support.AopUtils#isCglibProxy(Object)",
                " \t */",
                "-\tpublic static boolean isPrimitiveWrapper(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn primitiveWrapperTypeMap.containsKey(clazz);",
                "+\tpublic static boolean isCglibProxy(Object object) {",
                "+\t\treturn isCglibProxyClass(object.getClass());",
                " \t}",
                "@@ -869,11 +762,8 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check if the given class represents a primitive (i.e. boolean, byte,",
                "-\t * char, short, int, long, float, or double) or a primitive wrapper",
                "-\t * (i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double).",
                "+\t * Check whether the specified class is a CGLIB-generated class.",
                " \t * @param clazz the class to check",
                "-\t * @return whether the given class is a primitive or primitive wrapper class",
                "+\t * @see #isCglibProxyClassName(String)",
                " \t */",
                "-\tpublic static boolean isPrimitiveOrWrapper(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn (clazz.isPrimitive() || isPrimitiveWrapper(clazz));",
                "+\tpublic static boolean isCglibProxyClass(Class<?> clazz) {",
                "+\t\treturn (clazz != null && isCglibProxyClassName(clazz.getName()));",
                " \t}",
                "@@ -881,10 +771,7 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check if the given class represents an array of primitives,",
                "-\t * i.e. boolean, byte, char, short, int, long, float, or double.",
                "-\t * @param clazz the class to check",
                "-\t * @return whether the given class is a primitive array class",
                "+\t * Check whether the specified class name is a CGLIB-generated class.",
                "+\t * @param className the class name to check",
                " \t */",
                "-\tpublic static boolean isPrimitiveArray(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn (clazz.isArray() && clazz.getComponentType().isPrimitive());",
                "+\tpublic static boolean isCglibProxyClassName(String className) {",
                "+\t\treturn (className != null && className.contains(CGLIB_CLASS_SEPARATOR));",
                " \t}",
                "@@ -892,10 +779,11 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check if the given class represents an array of primitive wrappers,",
                "-\t * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.",
                "-\t * @param clazz the class to check",
                "-\t * @return whether the given class is a primitive wrapper array class",
                "+\t * Return the user-defined class for the given instance: usually simply",
                "+\t * the class of the given instance, but the original class in case of a",
                "+\t * CGLIB-generated subclass.",
                "+\t * @param instance the instance to check",
                "+\t * @return the user-defined class",
                " \t */",
                "-\tpublic static boolean isPrimitiveWrapperArray(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));",
                "+\tpublic static Class<?> getUserClass(Object instance) {",
                "+\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "+\t\treturn getUserClass(instance.getClass());",
                " \t}",
                "@@ -903,10 +791,15 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Resolve the given class if it is a primitive class,",
                "-\t * returning the corresponding primitive wrapper type instead.",
                "+\t * Return the user-defined class for the given class: usually simply the given",
                "+\t * class, but the original class in case of a CGLIB-generated subclass.",
                " \t * @param clazz the class to check",
                "-\t * @return the original class, or a primitive wrapper for the original primitive type",
                "+\t * @return the user-defined class",
                " \t */",
                "-\tpublic static Class<?> resolvePrimitiveIfNecessary(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn (clazz.isPrimitive() && clazz != void.class ? primitiveTypeToWrapperMap.get(clazz) : clazz);",
                "+\tpublic static Class<?> getUserClass(Class<?> clazz) {",
                "+\t\tif (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {",
                "+\t\t\tClass<?> superclass = clazz.getSuperclass();",
                "+\t\t\tif (superclass != null && Object.class != superclass) {",
                "+\t\t\t\treturn superclass;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\treturn clazz;",
                " \t}",
                "@@ -914,29 +807,31 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check if the right-hand side type may be assigned to the left-hand side",
                "-\t * type, assuming setting by reflection. Considers primitive wrapper",
                "-\t * classes as assignable to the corresponding primitive types.",
                "-\t * @param lhsType the target type",
                "-\t * @param rhsType the value type that should be assigned to the target type",
                "-\t * @return if the target type is assignable from the value type",
                "-\t * @see TypeUtils#isAssignable",
                "+\t * Return a descriptive name for the given object's type: usually simply",
                "+\t * the class name, but component type class name + \"[]\" for arrays,",
                "+\t * and an appended list of implemented interfaces for JDK proxies.",
                "+\t * @param value the value to introspect",
                "+\t * @return the qualified name of the class",
                " \t */",
                "-\tpublic static boolean isAssignable(Class<?> lhsType, Class<?> rhsType) {",
                "-\t\tAssert.notNull(lhsType, \"Left-hand side type must not be null\");",
                "-\t\tAssert.notNull(rhsType, \"Right-hand side type must not be null\");",
                "-\t\tif (lhsType.isAssignableFrom(rhsType)) {",
                "-\t\t\treturn true;",
                "+\tpublic static String getDescriptiveType(Object value) {",
                "+\t\tif (value == null) {",
                "+\t\t\treturn null;",
                " \t\t}",
                "-\t\tif (lhsType.isPrimitive()) {",
                "-\t\t\tClass<?> resolvedPrimitive = primitiveWrapperTypeMap.get(rhsType);",
                "-\t\t\tif (lhsType == resolvedPrimitive) {",
                "-\t\t\t\treturn true;",
                "+\t\tClass<?> clazz = value.getClass();",
                "+\t\tif (Proxy.isProxyClass(clazz)) {",
                "+\t\t\tStringBuilder result = new StringBuilder(clazz.getName());",
                "+\t\t\tresult.append(\" implementing \");",
                "+\t\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "+\t\t\tfor (int i = 0; i < ifcs.length; i++) {",
                "+\t\t\t\tresult.append(ifcs[i].getName());",
                "+\t\t\t\tif (i < ifcs.length - 1) {",
                "+\t\t\t\t\tresult.append(',');",
                "+\t\t\t\t}",
                " \t\t\t}",
                "+\t\t\treturn result.toString();",
                "+\t\t}",
                "+\t\telse if (clazz.isArray()) {",
                "+\t\t\treturn getQualifiedNameForArray(clazz);",
                " \t\t}",
                " \t\telse {",
                "-\t\t\tClass<?> resolvedWrapper = primitiveTypeToWrapperMap.get(rhsType);",
                "-\t\t\tif (resolvedWrapper != null && lhsType.isAssignableFrom(resolvedWrapper)) {",
                "-\t\t\t\treturn true;",
                "-\t\t\t}",
                "+\t\t\treturn clazz.getName();",
                " \t\t}",
                "-\t\treturn false;",
                " \t}",
                "@@ -944,23 +839,28 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine if the given type is assignable from the given value,",
                "-\t * assuming setting by reflection. Considers primitive wrapper classes",
                "-\t * as assignable to the corresponding primitive types.",
                "-\t * @param type the target type",
                "-\t * @param value the value that should be assigned to the type",
                "-\t * @return if the type is assignable from the value",
                "+\t * Check whether the given class matches the user-specified type name.",
                "+\t * @param clazz the class to check",
                "+\t * @param typeName the type name to match",
                " \t */",
                "-\tpublic static boolean isAssignableValue(Class<?> type, Object value) {",
                "-\t\tAssert.notNull(type, \"Type must not be null\");",
                "-\t\treturn (value != null ? isAssignable(type, value.getClass()) : !type.isPrimitive());",
                "+\tpublic static boolean matchesTypeName(Class<?> clazz, String typeName) {",
                "+\t\treturn (typeName != null &&",
                "+\t\t\t\t(typeName.equals(clazz.getName()) || typeName.equals(clazz.getSimpleName()) ||",
                "+\t\t\t\t\t\t(clazz.isArray() && typeName.equals(getQualifiedNameForArray(clazz)))));",
                " \t}",
                "-",
                " \t/**",
                "-\t * Convert a \"/\"-based resource path to a \".\"-based fully qualified class name.",
                "-\t * @param resourcePath the resource path pointing to a class",
                "-\t * @return the corresponding fully qualified class name",
                "+\t * Get the class name without the qualified package name.",
                "+\t * @param className the className to get the short name for",
                "+\t * @return the class name of the class without the package name",
                "+\t * @throws IllegalArgumentException if the className is empty",
                " \t */",
                "-\tpublic static String convertResourcePathToClassName(String resourcePath) {",
                "-\t\tAssert.notNull(resourcePath, \"Resource path must not be null\");",
                "-\t\treturn resourcePath.replace(PATH_SEPARATOR, PACKAGE_SEPARATOR);",
                "+\tpublic static String getShortName(String className) {",
                "+\t\tAssert.hasLength(className, \"Class name must not be empty\");",
                "+\t\tint lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\tint nameEndIndex = className.indexOf(CGLIB_CLASS_SEPARATOR);",
                "+\t\tif (nameEndIndex == -1) {",
                "+\t\t\tnameEndIndex = className.length();",
                "+\t\t}",
                "+\t\tString shortName = className.substring(lastDotIndex + 1, nameEndIndex);",
                "+\t\tshortName = shortName.replace(INNER_CLASS_SEPARATOR, PACKAGE_SEPARATOR);",
                "+\t\treturn shortName;",
                " \t}",
                "@@ -968,9 +868,8 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Convert a \".\"-based fully qualified class name to a \"/\"-based resource path.",
                "-\t * @param className the fully qualified class name",
                "-\t * @return the corresponding resource path, pointing to the class",
                "+\t * Get the class name without the qualified package name.",
                "+\t * @param clazz the class to get the short name for",
                "+\t * @return the class name of the class without the package name",
                " \t */",
                "-\tpublic static String convertClassNameToResourcePath(String className) {",
                "-\t\tAssert.notNull(className, \"Class name must not be null\");",
                "-\t\treturn className.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
                "+\tpublic static String getShortName(Class<?> clazz) {",
                "+\t\treturn getShortName(getQualifiedName(clazz));",
                " \t}",
                "@@ -978,23 +877,13 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return a path suitable for use with {@code ClassLoader.getResource}",
                "-\t * (also suitable for use with {@code Class.getResource} by prepending a",
                "-\t * slash ('/') to the return value). Built by taking the package of the specified",
                "-\t * class file, converting all dots ('.') to slashes ('/'), adding a trailing slash",
                "-\t * if necessary, and concatenating the specified resource name to this.",
                "-\t * <br/>As such, this function may be used to build a path suitable for",
                "-\t * loading a resource file that is in the same package as a class file,",
                "-\t * although {@link org.springframework.core.io.ClassPathResource} is usually",
                "-\t * even more convenient.",
                "-\t * @param clazz the Class whose package will be used as the base",
                "-\t * @param resourceName the resource name to append. A leading slash is optional.",
                "-\t * @return the built-up resource path",
                "-\t * @see ClassLoader#getResource",
                "-\t * @see Class#getResource",
                "+\t * Return the short string name of a Java class in uncapitalized JavaBeans",
                "+\t * property format. Strips the outer class name in case of an inner class.",
                "+\t * @param clazz the class",
                "+\t * @return the short name rendered in a standard JavaBeans property format",
                "+\t * @see java.beans.Introspector#decapitalize(String)",
                " \t */",
                "-\tpublic static String addResourcePathToPackagePath(Class<?> clazz, String resourceName) {",
                "-\t\tAssert.notNull(resourceName, \"Resource name must not be null\");",
                "-\t\tif (!resourceName.startsWith(\"/\")) {",
                "-\t\t\treturn classPackageAsResourcePath(clazz) + '/' + resourceName;",
                "-\t\t}",
                "-\t\treturn classPackageAsResourcePath(clazz) + resourceName;",
                "+\tpublic static String getShortNameAsProperty(Class<?> clazz) {",
                "+\t\tString shortName = getShortName(clazz);",
                "+\t\tint dotIndex = shortName.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\tshortName = (dotIndex != -1 ? shortName.substring(dotIndex + 1) : shortName);",
                "+\t\treturn Introspector.decapitalize(shortName);",
                " \t}",
                "@@ -1002,26 +891,12 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Given an input class object, return a string which consists of the",
                "-\t * class's package name as a pathname, i.e., all dots ('.') are replaced by",
                "-\t * slashes ('/'). Neither a leading nor trailing slash is added. The result",
                "-\t * could be concatenated with a slash and the name of a resource and fed",
                "-\t * directly to {@code ClassLoader.getResource()}. For it to be fed to",
                "-\t * {@code Class.getResource} instead, a leading slash would also have",
                "-\t * to be prepended to the returned value.",
                "-\t * @param clazz the input class. A {@code null} value or the default",
                "-\t * (empty) package will result in an empty string (\"\") being returned.",
                "-\t * @return a path which represents the package name",
                "-\t * @see ClassLoader#getResource",
                "-\t * @see Class#getResource",
                "+\t * Determine the name of the class file, relative to the containing",
                "+\t * package: e.g. \"String.class\"",
                "+\t * @param clazz the class",
                "+\t * @return the file name of the \".class\" file",
                " \t */",
                "-\tpublic static String classPackageAsResourcePath(Class<?> clazz) {",
                "-\t\tif (clazz == null) {",
                "-\t\t\treturn \"\";",
                "-\t\t}",
                "+\tpublic static String getClassFileName(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                " \t\tString className = clazz.getName();",
                "-\t\tint packageEndIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\tif (packageEndIndex == -1) {",
                "-\t\t\treturn \"\";",
                "-\t\t}",
                "-\t\tString packageName = className.substring(0, packageEndIndex);",
                "-\t\treturn packageName.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
                "+\t\tint lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\treturn className.substring(lastDotIndex + 1) + CLASS_FILE_SUFFIX;",
                " \t}",
                "@@ -1029,12 +904,11 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Build a String that consists of the names of the classes/interfaces",
                "-\t * in the given array.",
                "-\t * <p>Basically like {@code AbstractCollection.toString()}, but stripping",
                "-\t * the \"class \"/\"interface \" prefix before every class name.",
                "-\t * @param classes an array of Class objects",
                "-\t * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"",
                "-\t * @see java.util.AbstractCollection#toString()",
                "+\t * Determine the name of the package of the given class,",
                "+\t * e.g. \"java.lang\" for the {@code java.lang.String} class.",
                "+\t * @param clazz the class",
                "+\t * @return the package name, or the empty String if the class",
                "+\t * is defined in the default package",
                " \t */",
                "-\tpublic static String classNamesToString(Class<?>... classes) {",
                "-\t\treturn classNamesToString(Arrays.asList(classes));",
                "+\tpublic static String getPackageName(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\treturn getPackageName(clazz.getName());",
                " \t}",
                "@@ -1042,24 +916,28 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Build a String that consists of the names of the classes/interfaces",
                "-\t * in the given collection.",
                "-\t * <p>Basically like {@code AbstractCollection.toString()}, but stripping",
                "-\t * the \"class \"/\"interface \" prefix before every class name.",
                "-\t * @param classes a Collection of Class objects (may be {@code null})",
                "-\t * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"",
                "-\t * @see java.util.AbstractCollection#toString()",
                "+\t * Determine the name of the package of the given fully-qualified class name,",
                "+\t * e.g. \"java.lang\" for the {@code java.lang.String} class name.",
                "+\t * @param fqClassName the fully-qualified class name",
                "+\t * @return the package name, or the empty String if the class",
                "+\t * is defined in the default package",
                " \t */",
                "-\tpublic static String classNamesToString(Collection<Class<?>> classes) {",
                "-\t\tif (CollectionUtils.isEmpty(classes)) {",
                "-\t\t\treturn \"[]\";",
                "+\tpublic static String getPackageName(String fqClassName) {",
                "+\t\tAssert.notNull(fqClassName, \"Class name must not be null\");",
                "+\t\tint lastDotIndex = fqClassName.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\treturn (lastDotIndex != -1 ? fqClassName.substring(0, lastDotIndex) : \"\");",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Return the qualified name of the given class: usually simply",
                "+\t * the class name, but component type class name + \"[]\" for arrays.",
                "+\t * @param clazz the class",
                "+\t * @return the qualified name of the class",
                "+\t */",
                "+\tpublic static String getQualifiedName(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tif (clazz.isArray()) {",
                "+\t\t\treturn getQualifiedNameForArray(clazz);",
                " \t\t}",
                "-\t\tStringBuilder sb = new StringBuilder(\"[\");",
                "-\t\tfor (Iterator<Class<?>> it = classes.iterator(); it.hasNext(); ) {",
                "-\t\t\tClass<?> clazz = it.next();",
                "-\t\t\tsb.append(clazz.getName());",
                "-\t\t\tif (it.hasNext()) {",
                "-\t\t\t\tsb.append(\", \");",
                "-\t\t\t}",
                "+\t\telse {",
                "+\t\t\treturn clazz.getName();",
                " \t\t}",
                "-\t\tsb.append(\"]\");",
                "-\t\treturn sb.toString();",
                " \t}",
                "@@ -1067,14 +945,15 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Copy the given {@code Collection} into a {@code Class} array.",
                "-\t * <p>The {@code Collection} must contain {@code Class} elements only.",
                "-\t * @param collection the {@code Collection} to copy",
                "-\t * @return the {@code Class} array",
                "-\t * @since 3.1",
                "-\t * @see StringUtils#toStringArray",
                "+\t * Build a nice qualified name for an array:",
                "+\t * component type class name + \"[]\".",
                "+\t * @param clazz the array class",
                "+\t * @return a qualified name for the array class",
                " \t */",
                "-\tpublic static Class<?>[] toClassArray(Collection<Class<?>> collection) {",
                "-\t\tif (collection == null) {",
                "-\t\t\treturn null;",
                "+\tprivate static String getQualifiedNameForArray(Class<?> clazz) {",
                "+\t\tStringBuilder result = new StringBuilder();",
                "+\t\twhile (clazz.isArray()) {",
                "+\t\t\tclazz = clazz.getComponentType();",
                "+\t\t\tresult.append(ARRAY_SUFFIX);",
                " \t\t}",
                "-\t\treturn collection.toArray(new Class<?>[collection.size()]);",
                "+\t\tresult.insert(0, clazz.getName());",
                "+\t\treturn result.toString();",
                " \t}",
                "@@ -1082,10 +961,9 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given instance implements as an array,",
                "-\t * including ones implemented by superclasses.",
                "-\t * @param instance the instance to analyze for interfaces",
                "-\t * @return all interfaces that the given instance implements as an array",
                "+\t * Return the qualified name of the given method, consisting of",
                "+\t * fully qualified interface/class name + \".\" + method name.",
                "+\t * @param method the method",
                "+\t * @return the qualified name of the method",
                " \t */",
                "-\tpublic static Class<?>[] getAllInterfaces(Object instance) {",
                "-\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "-\t\treturn getAllInterfacesForClass(instance.getClass());",
                "+\tpublic static String getQualifiedMethodName(Method method) {",
                "+\t\treturn getQualifiedMethodName(method, null);",
                " \t}",
                "@@ -1093,10 +971,13 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given class implements as an array,",
                "-\t * including ones implemented by superclasses.",
                "-\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "-\t * @param clazz the class to analyze for interfaces",
                "-\t * @return all interfaces that the given object implements as an array",
                "+\t * Return the qualified name of the given method, consisting of",
                "+\t * fully qualified interface/class name + \".\" + method name.",
                "+\t * @param method the method",
                "+\t * @param clazz the clazz that the method is being invoked on",
                "+\t * (may be {@code null} to indicate the method's declaring class)",
                "+\t * @return the qualified name of the method",
                "+\t * @since 4.3.4",
                " \t */",
                "-\tpublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz) {",
                "-\t\treturn getAllInterfacesForClass(clazz, null);",
                "+\tpublic static String getQualifiedMethodName(Method method, Class<?> clazz) {",
                "+\t\tAssert.notNull(method, \"Method must not be null\");",
                "+\t\treturn (clazz != null ? clazz : method.getDeclaringClass()).getName() + '.' + method.getName();",
                " \t}",
                "@@ -1104,12 +985,11 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given class implements as an array,",
                "-\t * including ones implemented by superclasses.",
                "-\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "-\t * @param clazz the class to analyze for interfaces",
                "-\t * @param classLoader the ClassLoader that the interfaces need to be visible in",
                "-\t * (may be {@code null} when accepting all declared interfaces)",
                "-\t * @return all interfaces that the given object implements as an array",
                "+\t * Determine whether the given class has a public constructor with the given signature.",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to \"false\".",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * @return whether the class has a corresponding constructor",
                "+\t * @see Class#getMethod",
                " \t */",
                "-\tpublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz, ClassLoader classLoader) {",
                "-\t\treturn toClassArray(getAllInterfacesForClassAsSet(clazz, classLoader));",
                "+\tpublic static boolean hasConstructor(Class<?> clazz, Class<?>... paramTypes) {",
                "+\t\treturn (getConstructorIfAvailable(clazz, paramTypes) != null);",
                " \t}",
                "@@ -1117,10 +997,18 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given instance implements as a Set,",
                "-\t * including ones implemented by superclasses.",
                "-\t * @param instance the instance to analyze for interfaces",
                "-\t * @return all interfaces that the given instance implements as a Set",
                "+\t * Determine whether the given class has a public constructor with the given signature,",
                "+\t * and return it if available (else return {@code null}).",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to {@code null}.",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * @return the constructor, or {@code null} if not found",
                "+\t * @see Class#getConstructor",
                " \t */",
                "-\tpublic static Set<Class<?>> getAllInterfacesAsSet(Object instance) {",
                "-\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "-\t\treturn getAllInterfacesForClassAsSet(instance.getClass());",
                "+\tpublic static <T> Constructor<T> getConstructorIfAvailable(Class<T> clazz, Class<?>... paramTypes) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\ttry {",
                "+\t\t\treturn clazz.getConstructor(paramTypes);",
                "+\t\t}",
                "+\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                " \t}",
                "@@ -1128,10 +1016,12 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given class implements as a Set,",
                "-\t * including ones implemented by superclasses.",
                "-\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "-\t * @param clazz the class to analyze for interfaces",
                "-\t * @return all interfaces that the given object implements as a Set",
                "+\t * Determine whether the given class has a public method with the given signature.",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to \"false\".",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param methodName the name of the method",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * @return whether the class has a corresponding method",
                "+\t * @see Class#getMethod",
                " \t */",
                "-\tpublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz) {",
                "-\t\treturn getAllInterfacesForClassAsSet(clazz, null);",
                "+\tpublic static boolean hasMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {",
                "+\t\treturn (getMethodIfAvailable(clazz, methodName, paramTypes) != null);",
                " \t}",
                "@@ -1139,25 +1029,44 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given class implements as a Set,",
                "-\t * including ones implemented by superclasses.",
                "-\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "-\t * @param clazz the class to analyze for interfaces",
                "-\t * @param classLoader the ClassLoader that the interfaces need to be visible in",
                "-\t * (may be {@code null} when accepting all declared interfaces)",
                "-\t * @return all interfaces that the given object implements as a Set",
                "+\t * Determine whether the given class has a public method with the given signature,",
                "+\t * and return it if available (else throws an {@code IllegalStateException}).",
                "+\t * <p>In case of any signature specified, only returns the method if there is a",
                "+\t * unique candidate, i.e. a single public method with the specified name.",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to {@code IllegalStateException}.",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param methodName the name of the method",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * (may be {@code null} to indicate any signature)",
                "+\t * @return the method (never {@code null})",
                "+\t * @throws IllegalStateException if the method has not been found",
                "+\t * @see Class#getMethod",
                " \t */",
                "-\tpublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) {",
                "+\tpublic static Method getMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {",
                " \t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tif (clazz.isInterface() && isVisible(clazz, classLoader)) {",
                "-\t\t\treturn Collections.<Class<?>>singleton(clazz);",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\tif (paramTypes != null) {",
                "+\t\t\ttry {",
                "+\t\t\t\treturn clazz.getMethod(methodName, paramTypes);",
                "+\t\t\t}",
                "+\t\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\t\tthrow new IllegalStateException(\"Expected method not found: \" + ex);",
                "+\t\t\t}",
                " \t\t}",
                "-\t\tSet<Class<?>> interfaces = new LinkedHashSet<Class<?>>();",
                "-\t\tClass<?> current = clazz;",
                "-\t\twhile (current != null) {",
                "-\t\t\tClass<?>[] ifcs = current.getInterfaces();",
                "-\t\t\tfor (Class<?> ifc : ifcs) {",
                "-\t\t\t\tinterfaces.addAll(getAllInterfacesForClassAsSet(ifc, classLoader));",
                "+\t\telse {",
                "+\t\t\tSet<Method> candidates = new HashSet<Method>(1);",
                "+\t\t\tMethod[] methods = clazz.getMethods();",
                "+\t\t\tfor (Method method : methods) {",
                "+\t\t\t\tif (methodName.equals(method.getName())) {",
                "+\t\t\t\t\tcandidates.add(method);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif (candidates.size() == 1) {",
                "+\t\t\t\treturn candidates.iterator().next();",
                "+\t\t\t}",
                "+\t\t\telse if (candidates.isEmpty()) {",
                "+\t\t\t\tthrow new IllegalStateException(\"Expected method not found: \" + clazz.getName() + '.' + methodName);",
                "+\t\t\t}",
                "+\t\t\telse {",
                "+\t\t\t\tthrow new IllegalStateException(\"No unique method found: \" + clazz.getName() + '.' + methodName);",
                " \t\t\t}",
                "-\t\t\tcurrent = current.getSuperclass();",
                " \t\t}",
                "-\t\treturn interfaces;",
                " \t}",
                "@@ -1165,13 +1074,38 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Create a composite interface Class for the given interfaces,",
                "-\t * implementing the given interfaces in one single Class.",
                "-\t * <p>This implementation builds a JDK proxy class for the given interfaces.",
                "-\t * @param interfaces the interfaces to merge",
                "-\t * @param classLoader the ClassLoader to create the composite Class in",
                "-\t * @return the merged interface as Class",
                "-\t * @see java.lang.reflect.Proxy#getProxyClass",
                "+\t * Determine whether the given class has a public method with the given signature,",
                "+\t * and return it if available (else return {@code null}).",
                "+\t * <p>In case of any signature specified, only returns the method if there is a",
                "+\t * unique candidate, i.e. a single public method with the specified name.",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to {@code null}.",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param methodName the name of the method",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * (may be {@code null} to indicate any signature)",
                "+\t * @return the method, or {@code null} if not found",
                "+\t * @see Class#getMethod",
                " \t */",
                "-\tpublic static Class<?> createCompositeInterface(Class<?>[] interfaces, ClassLoader classLoader) {",
                "-\t\tAssert.notEmpty(interfaces, \"Interfaces must not be empty\");",
                "-\t\treturn Proxy.getProxyClass(classLoader, interfaces);",
                "+\tpublic static Method getMethodIfAvailable(Class<?> clazz, String methodName, Class<?>... paramTypes) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\tif (paramTypes != null) {",
                "+\t\t\ttry {",
                "+\t\t\t\treturn clazz.getMethod(methodName, paramTypes);",
                "+\t\t\t}",
                "+\t\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\tSet<Method> candidates = new HashSet<Method>(1);",
                "+\t\t\tMethod[] methods = clazz.getMethods();",
                "+\t\t\tfor (Method method : methods) {",
                "+\t\t\t\tif (methodName.equals(method.getName())) {",
                "+\t\t\t\t\tcandidates.add(method);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif (candidates.size() == 1) {",
                "+\t\t\t\treturn candidates.iterator().next();",
                "+\t\t\t}",
                "+\t\t\treturn null;",
                "+\t\t}",
                " \t}",
                "@@ -1179,32 +1113,52 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine the common ancestor of the given classes, if any.",
                "-\t * @param clazz1 the class to introspect",
                "-\t * @param clazz2 the other class to introspect",
                "-\t * @return the common ancestor (i.e. common superclass, one interface",
                "-\t * extending the other), or {@code null} if none found. If any of the",
                "-\t * given classes is {@code null}, the other class will be returned.",
                "-\t * @since 3.2.6",
                "+\t * Return the number of methods with a given name (with any argument types),",
                "+\t * for the given class and/or its superclasses. Includes non-public methods.",
                "+\t * @param clazz\tthe clazz to check",
                "+\t * @param methodName the name of the method",
                "+\t * @return the number of methods with the given name",
                " \t */",
                "-\tpublic static Class<?> determineCommonAncestor(Class<?> clazz1, Class<?> clazz2) {",
                "-\t\tif (clazz1 == null) {",
                "-\t\t\treturn clazz2;",
                "+\tpublic static int getMethodCountForName(Class<?> clazz, String methodName) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\tint count = 0;",
                "+\t\tMethod[] declaredMethods = clazz.getDeclaredMethods();",
                "+\t\tfor (Method method : declaredMethods) {",
                "+\t\t\tif (methodName.equals(method.getName())) {",
                "+\t\t\t\tcount++;",
                "+\t\t\t}",
                " \t\t}",
                "-\t\tif (clazz2 == null) {",
                "-\t\t\treturn clazz1;",
                "+\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "+\t\tfor (Class<?> ifc : ifcs) {",
                "+\t\t\tcount += getMethodCountForName(ifc, methodName);",
                " \t\t}",
                "-\t\tif (clazz1.isAssignableFrom(clazz2)) {",
                "-\t\t\treturn clazz1;",
                "+\t\tif (clazz.getSuperclass() != null) {",
                "+\t\t\tcount += getMethodCountForName(clazz.getSuperclass(), methodName);",
                " \t\t}",
                "-\t\tif (clazz2.isAssignableFrom(clazz1)) {",
                "-\t\t\treturn clazz2;",
                "+\t\treturn count;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Does the given class or one of its superclasses at least have one or more",
                "+\t * methods with the supplied name (with any argument types)?",
                "+\t * Includes non-public methods.",
                "+\t * @param clazz\tthe clazz to check",
                "+\t * @param methodName the name of the method",
                "+\t * @return whether there is at least one method with the given name",
                "+\t */",
                "+\tpublic static boolean hasAtLeastOneMethodWithName(Class<?> clazz, String methodName) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\tMethod[] declaredMethods = clazz.getDeclaredMethods();",
                "+\t\tfor (Method method : declaredMethods) {",
                "+\t\t\tif (method.getName().equals(methodName)) {",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                " \t\t}",
                "-\t\tClass<?> ancestor = clazz1;",
                "-\t\tdo {",
                "-\t\t\tancestor = ancestor.getSuperclass();",
                "-\t\t\tif (ancestor == null || Object.class == ancestor) {",
                "-\t\t\t\treturn null;",
                "+\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "+\t\tfor (Class<?> ifc : ifcs) {",
                "+\t\t\tif (hasAtLeastOneMethodWithName(ifc, methodName)) {",
                "+\t\t\t\treturn true;",
                " \t\t\t}",
                " \t\t}",
                "-\t\twhile (!ancestor.isAssignableFrom(clazz2));",
                "-\t\treturn ancestor;",
                "+\t\treturn (clazz.getSuperclass() != null && hasAtLeastOneMethodWithName(clazz.getSuperclass(), methodName));",
                " \t}",
                "@@ -1212,20 +1166,44 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check whether the given class is visible in the given ClassLoader.",
                "-\t * @param clazz the class to check (typically an interface)",
                "-\t * @param classLoader the ClassLoader to check against (may be {@code null},",
                "-\t * in which case this method will always return {@code true})",
                "+\t * Given a method, which may come from an interface, and a target class used",
                "+\t * in the current reflective invocation, find the corresponding target method",
                "+\t * if there is one. E.g. the method may be {@code IFoo.bar()} and the",
                "+\t * target class may be {@code DefaultFoo}. In this case, the method may be",
                "+\t * {@code DefaultFoo.bar()}. This enables attributes on that method to be found.",
                "+\t * <p><b>NOTE:</b> In contrast to {@link org.springframework.aop.support.AopUtils#getMostSpecificMethod},",
                "+\t * this method does <i>not</i> resolve Java 5 bridge methods automatically.",
                "+\t * Call {@link org.springframework.core.BridgeMethodResolver#findBridgedMethod}",
                "+\t * if bridge method resolution is desirable (e.g. for obtaining metadata from",
                "+\t * the original method definition).",
                "+\t * <p><b>NOTE:</b> Since Spring 3.1.1, if Java security settings disallow reflective",
                "+\t * access (e.g. calls to {@code Class#getDeclaredMethods} etc, this implementation",
                "+\t * will fall back to returning the originally provided method.",
                "+\t * @param method the method to be invoked, which may come from an interface",
                "+\t * @param targetClass the target class for the current invocation.",
                "+\t * May be {@code null} or may not even implement the method.",
                "+\t * @return the specific target method, or the original method if the",
                "+\t * {@code targetClass} doesn't implement it or is {@code null}",
                " \t */",
                "-\tpublic static boolean isVisible(Class<?> clazz, ClassLoader classLoader) {",
                "-\t\tif (classLoader == null) {",
                "-\t\t\treturn true;",
                "-\t\t}",
                "-\t\ttry {",
                "-\t\t\tClass<?> actualClass = classLoader.loadClass(clazz.getName());",
                "-\t\t\treturn (clazz == actualClass);",
                "-\t\t\t// Else: different interface class found...",
                "-\t\t}",
                "-\t\tcatch (ClassNotFoundException ex) {",
                "-\t\t\t// No interface class found...",
                "-\t\t\treturn false;",
                "+\tpublic static Method getMostSpecificMethod(Method method, Class<?> targetClass) {",
                "+\t\tif (method != null && isOverridable(method, targetClass) &&",
                "+\t\t\t\ttargetClass != null && targetClass != method.getDeclaringClass()) {",
                "+\t\t\ttry {",
                "+\t\t\t\tif (Modifier.isPublic(method.getModifiers())) {",
                "+\t\t\t\t\ttry {",
                "+\t\t\t\t\t\treturn targetClass.getMethod(method.getName(), method.getParameterTypes());",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\t\t\t\treturn method;",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\telse {",
                "+\t\t\t\t\tMethod specificMethod =",
                "+\t\t\t\t\t\t\tReflectionUtils.findMethod(targetClass, method.getName(), method.getParameterTypes());",
                "+\t\t\t\t\treturn (specificMethod != null ? specificMethod : method);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tcatch (SecurityException ex) {",
                "+\t\t\t\t// Security settings are disallowing reflective access; fall back to 'method' below.",
                "+\t\t\t}",
                " \t\t}",
                "+\t\treturn method;",
                " \t}",
                "@@ -1233,9 +1211,19 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check whether the given object is a CGLIB proxy.",
                "-\t * @param object the object to check",
                "-\t * @see #isCglibProxyClass(Class)",
                "-\t * @see org.springframework.aop.support.AopUtils#isCglibProxy(Object)",
                "+\t * Determine whether the given method is declared by the user or at least pointing to",
                "+\t * a user-declared method.",
                "+\t * <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the",
                "+\t * {@code GroovyObject} interface (for interface methods; on an implementation class,",
                "+\t * implementations of the {@code GroovyObject} methods will be marked as synthetic anyway).",
                "+\t * Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered",
                "+\t * as user-level methods since they are eventually pointing to a user-declared generic method.",
                "+\t * @param method the method to check",
                "+\t * @return {@code true} if the method can be considered as user-declared; [@code false} otherwise",
                " \t */",
                "-\tpublic static boolean isCglibProxy(Object object) {",
                "-\t\treturn isCglibProxyClass(object.getClass());",
                "+\tpublic static boolean isUserLevelMethod(Method method) {",
                "+\t\tAssert.notNull(method, \"Method must not be null\");",
                "+\t\treturn (method.isBridge() || (!method.isSynthetic() && !isGroovyObjectMethod(method)));",
                "+\t}",
                "+",
                "+\tprivate static boolean isGroovyObjectMethod(Method method) {",
                "+\t\treturn method.getDeclaringClass().getName().equals(\"groovy.lang.GroovyObject\");",
                " \t}",
                "@@ -1243,8 +1231,14 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check whether the specified class is a CGLIB-generated class.",
                "-\t * @param clazz the class to check",
                "-\t * @see #isCglibProxyClassName(String)",
                "+\t * Determine whether the given method is overridable in the given target class.",
                "+\t * @param method the method to check",
                "+\t * @param targetClass the target class to check against",
                " \t */",
                "-\tpublic static boolean isCglibProxyClass(Class<?> clazz) {",
                "-\t\treturn (clazz != null && isCglibProxyClassName(clazz.getName()));",
                "+\tprivate static boolean isOverridable(Method method, Class<?> targetClass) {",
                "+\t\tif (Modifier.isPrivate(method.getModifiers())) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+\t\tif (Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers())) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+\t\treturn getPackageName(method.getDeclaringClass()).equals(getPackageName(targetClass));",
                " \t}",
                "@@ -1252,7 +1246,19 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check whether the specified class name is a CGLIB-generated class.",
                "-\t * @param className the class name to check",
                "+\t * Return a public static method of a class.",
                "+\t * @param clazz the class which defines the method",
                "+\t * @param methodName the static method name",
                "+\t * @param args the parameter types to the method",
                "+\t * @return the static method, or {@code null} if no static method was found",
                "+\t * @throws IllegalArgumentException if the method name is blank or the clazz is null",
                " \t */",
                "-\tpublic static boolean isCglibProxyClassName(String className) {",
                "-\t\treturn (className != null && className.contains(CGLIB_CLASS_SEPARATOR));",
                "+\tpublic static Method getStaticMethod(Class<?> clazz, String methodName, Class<?>... args) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\ttry {",
                "+\t\t\tMethod method = clazz.getMethod(methodName, args);",
                "+\t\t\treturn Modifier.isStatic(method.getModifiers()) ? method : null;",
                "+\t\t}",
                "+\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                " \t}"
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/util/ClassUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "295929cc16f9ee48118c9903112b46aefdeaff55"
                ],
                [
                    "no-tag",
                    "46e3a919fed710fe9e3404f57a4e0d801e0685db"
                ]
            ],
            "tags": [
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f28a5d0cf72a02023c439e838bf0ebefe83303b6",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523455554,
            "hunks": 9,
            "message": "Proper exception for controller method return types that do not work with MvcUriComponentsBuilder (e.g. final classes) Includes direct use of ControllerMethodInvocationInterceptor for return type Object, avoiding the attempt to generate an Object subclass. Issue: SPR-16710",
            "diff": [
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java",
                "index f217e911b8..fbf4bbcb1d 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java",
                "@@ -255,6 +255,4 @@ public class MvcUriComponentsBuilder {",
                " \t * </pre>",
                "-\t *",
                " \t * <p><strong>Note:</strong> This method extracts values from \"Forwarded\"",
                " \t * and \"X-Forwarded-*\" headers if found. See class-level docs.",
                "-\t *",
                " \t * @param info either the value returned from a \"mock\" controller",
                "@@ -612,3 +610,7 @@ public class MvcUriComponentsBuilder {",
                " \tprivate static <T> T initProxy(Class<?> type, ControllerMethodInvocationInterceptor interceptor) {",
                "-\t\tif (type.isInterface()) {",
                "+\t\tif (type == Object.class) {",
                "+\t\t\treturn (T) interceptor;",
                "+\t\t}",
                "+",
                "+\t\telse if (type.isInterface()) {",
                " \t\t\tProxyFactory factory = new ProxyFactory(EmptyTargetSource.INSTANCE);",
                "@@ -711,4 +713,14 @@ public class MvcUriComponentsBuilder {",
                "+\tpublic interface MethodInvocationInfo {",
                "+",
                "+\t\tClass<?> getControllerType();",
                "+",
                "+\t\tMethod getControllerMethod();",
                "+",
                "+\t\tObject[] getArgumentValues();",
                "+\t}",
                "+",
                "+",
                " \tprivate static class ControllerMethodInvocationInterceptor",
                "-\t\t\timplements org.springframework.cglib.proxy.MethodInterceptor, MethodInterceptor {",
                "+\t\t\timplements org.springframework.cglib.proxy.MethodInterceptor, MethodInterceptor, MethodInvocationInfo {",
                "@@ -729,3 +741,6 @@ public class MvcUriComponentsBuilder {",
                " \t\tpublic Object intercept(Object obj, Method method, Object[] args, @Nullable MethodProxy proxy) {",
                "-\t\t\tif (method.getName().equals(\"getControllerMethod\")) {",
                "+\t\t\tif (method.getName().equals(\"getControllerType\")) {",
                "+\t\t\t\treturn this.controllerType;",
                "+\t\t\t}",
                "+\t\t\telse if (method.getName().equals(\"getControllerMethod\")) {",
                " \t\t\t\treturn this.controllerMethod;",
                "@@ -735,5 +750,2 @@ public class MvcUriComponentsBuilder {",
                " \t\t\t}",
                "-\t\t\telse if (method.getName().equals(\"getControllerType\")) {",
                "-\t\t\t\treturn this.controllerType;",
                "-\t\t\t}",
                " \t\t\telse if (ReflectionUtils.isObjectMethod(method)) {",
                "@@ -745,3 +757,9 @@ public class MvcUriComponentsBuilder {",
                " \t\t\t\tClass<?> returnType = method.getReturnType();",
                "-\t\t\t\treturn (void.class == returnType ? null : returnType.cast(initProxy(returnType, this)));",
                "+\t\t\t\ttry {",
                "+\t\t\t\t\treturn (returnType == void.class ? null : returnType.cast(initProxy(returnType, this)));",
                "+\t\t\t\t}",
                "+\t\t\t\tcatch (Throwable ex) {",
                "+\t\t\t\t\tthrow new IllegalStateException(",
                "+\t\t\t\t\t\t\t\"Failed to create proxy for controller method return type: \" + method, ex);",
                "+\t\t\t\t}",
                " \t\t\t}",
                "@@ -754,12 +772,19 @@ public class MvcUriComponentsBuilder {",
                " \t\t}",
                "-\t}",
                "+\t\t@Override",
                "+\t\tpublic Class<?> getControllerType() {",
                "+\t\t\treturn this.controllerType;",
                "+\t\t}",
                "-\tpublic interface MethodInvocationInfo {",
                "-",
                "-\t\tMethod getControllerMethod();",
                "-",
                "-\t\tObject[] getArgumentValues();",
                "+\t\t@Override",
                "+\t\tpublic Method getControllerMethod() {",
                "+\t\t\tAssert.state(this.controllerMethod != null, \"Not initialized yet\");",
                "+\t\t\treturn this.controllerMethod;",
                "+\t\t}",
                "-\t\tClass<?> getControllerType();",
                "+\t\t@Override",
                "+\t\tpublic Object[] getArgumentValues() {",
                "+\t\t\tAssert.state(this.argumentValues != null, \"Not initialized yet\");",
                "+\t\t\treturn this.argumentValues;",
                "+\t\t}",
                " \t}"
            ],
            "changed_files": [
                "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "98536e1387712f42f11383fa2cc12b04fe76ca67"
                ],
                [
                    "no-tag",
                    "861b9dc9388511bb5bb1cca93e8732ed569aac26"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c4296fa785ae99d37642b827443b84e184db61f0",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523470996,
            "hunks": 4,
            "message": "Remove write pausing in Undertow response Using the simple example shown in the ticket but switching from Mono<String> to Flux<String> (and 5,000,000 onNext calls) shows that constant pausing causes significant overhead and is not worth the trouble vs ignoring the onWritePossible in REQUESTED state. Issue: SPR-16702",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java",
                "index bc55d0052b..50a245dc30 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java",
                "@@ -164,3 +164,7 @@ public abstract class AbstractListenerWriteProcessor<T> implements Processor<T,",
                " \t * <p>The default implementation is a no-op.",
                "+\t * @deprecated originally introduced for Undertow to stop write notifications",
                "+\t * when no data is available, but deprecated as of as of 5.0.6 since constant",
                "+\t * switching on every requested item causes a significant slowdown.",
                " \t */",
                "+\t@Deprecated",
                " \tprotected void writingPaused() {",
                "@@ -273,2 +277,3 @@ public abstract class AbstractListenerWriteProcessor<T> implements Processor<T,",
                " \t\tRECEIVED {",
                "+\t\t\t@SuppressWarnings(\"deprecation\")",
                " \t\t\t@Override",
                "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java",
                "index b00e338010..58aed42f29 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java",
                "@@ -219,7 +219,2 @@ class UndertowServerHttpResponse extends AbstractListenerServerHttpResponse impl",
                "-\t\t@Override",
                "-\t\tprotected void writingPaused() {",
                "-\t\t\tthis.channel.suspendWrites();",
                "-\t\t}",
                "-",
                " \t\t@Override"
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java",
                "spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "224589ea74a2bfd4230e67331c109944df7260b4"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1ab0850303737e78d3e50e5846cacee0c15c2297",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522750989,
            "hunks": 3,
            "message": "Revised mime.types file with cpp extension and updated modification docs Issue: SPR-16678 (cherry picked from commit 9601d4b)",
            "diff": [
                "diff --git a/spring-context-support/src/main/resources/org/springframework/mail/javamail/mime.types b/spring-context-support/src/main/resources/org/springframework/mail/javamail/mime.types",
                "index 7d625b684d..1eabbf5d2f 100644",
                "--- a/spring-context-support/src/main/resources/org/springframework/mail/javamail/mime.types",
                "+++ b/spring-context-support/src/main/resources/org/springframework/mail/javamail/mime.types",
                "@@ -1,3 +1,3 @@",
                " ################################################################################",
                "-# Copyright 2002-2010 the original author or authors.",
                "+# Copyright 2002-2018 the original author or authors.",
                " #",
                "@@ -18,5 +18,6 @@",
                " #",
                "-# Defaults for the Java Activation Framework",
                "-# Additional extensions registered in this file:",
                "-# text/plain\t\t\t\tjava c c++ pl cc h",
                "+# Defaults for the Java Activation Framework (revised).",
                "+# Modified extensions registered in this file:",
                "+# text/plain\t\t\tjava c c++ cpp pl cc h",
                "+# image/png\t\t\t\tpng",
                " #",
                "@@ -25,3 +26,3 @@",
                " text/html\t\t\t\thtml htm HTML HTM",
                "-text/plain\t\t\t\ttxt text TXT TEXT java c c++ pl cc h",
                "+text/plain\t\t\t\ttxt text TXT TEXT java c c++ cpp pl cc h",
                " image/gif\t\t\t\tgif GIF"
            ],
            "changed_files": [
                "spring-context-support/src/main/resources/org/springframework/mail/javamail/mime.types"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9601d4bb5b40f3abba3d81b2347c7e43d07be64c"
                ]
            ],
            "tags": [
                "v4.3.15.RELEASE",
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "433877e5cb6230e9c3a325d596c23281872c1c0f",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523443827,
            "hunks": 2,
            "message": "AnnotationUtils.getAnnotation non-null check for synthesizeAnnotation Issue: SPR-16708 (cherry picked from commit da80502)",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "index ea3facd7c9..54b64dbaac 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "@@ -128,2 +128,3 @@ public abstract class AnnotationUtils {",
                "+\t@SuppressWarnings(\"unused\")",
                " \t@Deprecated  // just here for older tool versions trying to reflectively clear the cache",
                "@@ -167,3 +168,4 @@ public abstract class AnnotationUtils {",
                " \t\ttry {",
                "-\t\t\treturn synthesizeAnnotation(annotatedElement.getAnnotation(annotationType), annotatedElement);",
                "+\t\t\tA metaAnn = annotatedElement.getAnnotation(annotationType);",
                "+\t\t\treturn (metaAnn != null ? synthesizeAnnotation(metaAnn, annotatedElement) : null);",
                " \t\t}"
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "da80502ea6ed4860f5bf7b668300644cdfe3bb5a"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4cd43dc79308f536b8a937055c0fe7c3106633ce",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523971923,
            "hunks": 3,
            "message": "Workaround for generic parameter types on inner class constructors Issue: SPR-16734",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/core/MethodParameter.java b/spring-core/src/main/java/org/springframework/core/MethodParameter.java",
                "index 317aae575e..ad3b190f62 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/MethodParameter.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java",
                "@@ -421,3 +421,14 @@ public class MethodParameter {",
                " \t\t\telse {",
                "-\t\t\t\tparamType = this.executable.getGenericParameterTypes()[this.parameterIndex];",
                "+\t\t\t\tType[] genericParameterTypes = this.executable.getGenericParameterTypes();",
                "+\t\t\t\tint index = this.parameterIndex;",
                "+\t\t\t\tif (this.executable instanceof Constructor &&",
                "+\t\t\t\t\t\tClassUtils.isInnerClass(this.executable.getDeclaringClass()) &&",
                "+\t\t\t\t\t\tgenericParameterTypes.length == this.executable.getParameterCount() - 1) {",
                "+\t\t\t\t\t// Bug in javac: type array excludes enclosing instance parameter",
                "+\t\t\t\t\t// for inner classes with at least one generic constructor parameter,",
                "+\t\t\t\t\t// so access it with the actual parameter index lowered by 1",
                "+\t\t\t\t\tindex = this.parameterIndex - 1;",
                "+\t\t\t\t}",
                "+\t\t\t\tparamType = (index >= 0 && index < genericParameterTypes.length ?",
                "+\t\t\t\t\t\tgenericParameterTypes[index] : getParameterType());",
                " \t\t\t}",
                "@@ -527,8 +538,4 @@ public class MethodParameter {",
                " \t\t\t}",
                "-\t\t\tif (index >= 0 && index < annotationArray.length) {",
                "-\t\t\t\tparamAnns = adaptAnnotationArray(annotationArray[index]);",
                "-\t\t\t}",
                "-\t\t\telse {",
                "-\t\t\t\tparamAnns = EMPTY_ANNOTATION_ARRAY;",
                "-\t\t\t}",
                "+\t\t\tparamAnns = (index >= 0 && index < annotationArray.length ?",
                "+\t\t\t\t\tadaptAnnotationArray(annotationArray[index]) : EMPTY_ANNOTATION_ARRAY);",
                " \t\t\tthis.parameterAnnotations = paramAnns;",
                "@@ -772,3 +779,2 @@ public class MethodParameter {",
                " \t\t}",
                "-\t\t",
                " \t}"
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/core/MethodParameter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c09e10405b12768b2a57d08e24804d82b2cb9f4a"
                ],
                [
                    "no-tag",
                    "51be8a7303f6422462037ec3f99e7d69017aed19"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eb573d8b9e5ae115abeea393be5980cb1baebe30",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523955376,
            "hunks": 2,
            "message": "Restore original MethodMapTransactionAttributeSource matching rules Issue: SPR-16733 (cherry picked from commit c5b524d)",
            "diff": [
                "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java",
                "index a2898fecff..3ed7dfd22a 100644",
                "--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java",
                "+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java",
                "@@ -34,3 +34,2 @@ import org.springframework.util.ObjectUtils;",
                " import org.springframework.util.PatternMatchUtils;",
                "-import org.springframework.util.ReflectionUtils;",
                "@@ -147,3 +146,3 @@ public class MethodMapTransactionAttributeSource",
                "-\t\tMethod[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);",
                "+\t\tMethod[] methods = clazz.getDeclaredMethods();",
                " \t\tList<Method> matchingMethods = new ArrayList<>();"
            ],
            "changed_files": [
                "spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c5b524db7c08da8ec5aca3267d1ee6191f982cbd"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b5922f75bb286d0dcf168ef0b5788f531a31d83e",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523711405,
            "hunks": 27,
            "message": "AspectJExpressionPointcut consistently resolves superinterface methods Includes efficient check for same ClassLoader in ClassUtils.isVisible, efficient MethodMatchers check for IntroductionAwareMethodMatcher, and supertype method resolution in MethodMapTransactionAttributeSource. Issue: SPR-16723 (cherry picked from commit b95e05d)",
            "diff": [
                "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java",
                "index 91ab40742a..7b56b21a90 100644",
                "--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java",
                "+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -51,3 +51,2 @@ import org.springframework.aop.interceptor.ExposeInvocationInterceptor;",
                " import org.springframework.aop.support.AbstractExpressionPointcut;",
                "-import org.springframework.aop.support.AopUtils;",
                " import org.springframework.beans.factory.BeanFactory;",
                "@@ -58,2 +57,3 @@ import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;",
                " import org.springframework.beans.factory.config.ConfigurableBeanFactory;",
                "+import org.springframework.core.BridgeMethodResolver;",
                " import org.springframework.lang.Nullable;",
                "@@ -291,6 +291,5 @@ public class AspectJExpressionPointcut extends AbstractExpressionPointcut",
                " \t@Override",
                "-\tpublic boolean matches(Method method, @Nullable Class<?> targetClass, boolean beanHasIntroductions) {",
                "+\tpublic boolean matches(Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) {",
                " \t\tobtainPointcutExpression();",
                "-\t\tMethod targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);",
                "-\t\tShadowMatch shadowMatch = getShadowMatch(targetMethod, method);",
                "+\t\tShadowMatch shadowMatch = getTargetShadowMatch(method, targetClass);",
                "@@ -307,3 +306,3 @@ public class AspectJExpressionPointcut extends AbstractExpressionPointcut",
                " \t\t\t// the maybe case",
                "-\t\t\tif (beanHasIntroductions) {",
                "+\t\t\tif (hasIntroductions) {",
                " \t\t\t\treturn true;",
                "@@ -333,4 +332,3 @@ public class AspectJExpressionPointcut extends AbstractExpressionPointcut",
                " \t\tobtainPointcutExpression();",
                "-\t\tShadowMatch shadowMatch = getShadowMatch(AopUtils.getMostSpecificMethod(method, targetClass), method);",
                "-\t\tShadowMatch originalShadowMatch = getShadowMatch(method, method);",
                "+\t\tShadowMatch shadowMatch = getTargetShadowMatch(method, targetClass);",
                "@@ -369,3 +367,3 @@ public class AspectJExpressionPointcut extends AbstractExpressionPointcut",
                " \t\t\tif (pmi != null && thisObject != null) {  // there is a current invocation",
                "-\t\t\t\tRuntimeTestWalker originalMethodResidueTest = getRuntimeTestWalker(originalShadowMatch);",
                "+\t\t\t\tRuntimeTestWalker originalMethodResidueTest = getRuntimeTestWalker(getShadowMatch(method, method));",
                " \t\t\t\tif (!originalMethodResidueTest.testThisInstanceOfResidue(thisObject.getClass())) {",
                "@@ -429,2 +427,19 @@ public class AspectJExpressionPointcut extends AbstractExpressionPointcut",
                "+\tprivate ShadowMatch getTargetShadowMatch(Method method, @Nullable Class<?> targetClass) {",
                "+\t\tMethod targetMethod = method;",
                "+\t\tif (targetClass != null) {",
                "+\t\t\ttargetMethod = ClassUtils.getMostSpecificMethod(method, ClassUtils.getUserClass(targetClass));",
                "+\t\t\tif (targetMethod.getDeclaringClass().isInterface()) {",
                "+\t\t\t\tSet<Class<?>> ifcs = ClassUtils.getAllInterfacesForClassAsSet(targetClass);",
                "+\t\t\t\tif (ifcs.size() > 1) {",
                "+\t\t\t\t\tClass<?> compositeInterface = ClassUtils.createCompositeInterface(",
                "+\t\t\t\t\t\t\tClassUtils.toClassArray(ifcs), targetClass.getClassLoader());",
                "+\t\t\t\t\ttargetMethod = ClassUtils.getMostSpecificMethod(targetMethod, compositeInterface);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\ttargetMethod = BridgeMethodResolver.findBridgedMethod(targetMethod);",
                "+\t\treturn getShadowMatch(targetMethod, method);",
                "+\t}",
                "+",
                " \tprivate ShadowMatch getShadowMatch(Method targetMethod, Method originalMethod) {",
                "@@ -436,5 +451,5 @@ public class AspectJExpressionPointcut extends AbstractExpressionPointcut",
                " \t\t\t\tPointcutExpression fallbackExpression = null;",
                "-\t\t\t\tMethod methodToMatch = targetMethod;",
                " \t\t\t\tshadowMatch = this.shadowMatchCache.get(targetMethod);",
                " \t\t\t\tif (shadowMatch == null) {",
                "+\t\t\t\t\tMethod methodToMatch = targetMethod;",
                " \t\t\t\t\ttry {",
                "@@ -461,3 +476,3 @@ public class AspectJExpressionPointcut extends AbstractExpressionPointcut",
                " \t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\tcatch (ReflectionWorldException ex3) {",
                "+\t\t\t\t\t\t\tcatch (ReflectionWorldException ex) {",
                " \t\t\t\t\t\t\t\t// Could neither introspect the target class nor the proxy class ->",
                "@@ -470,3 +485,3 @@ public class AspectJExpressionPointcut extends AbstractExpressionPointcut",
                " \t\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\t\tcatch (ReflectionWorldException ex4) {",
                "+\t\t\t\t\t\t\t\tcatch (ReflectionWorldException ex2) {",
                " \t\t\t\t\t\t\t\t\tfallbackExpression = null;",
                "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java",
                "index dae5b46a83..30de25c2c1 100644",
                "--- a/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java",
                "+++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -92,4 +92,4 @@ public abstract class MethodMatchers {",
                " \t\tAssert.notNull(mm, \"MethodMatcher must not be null\");",
                "-\t\treturn ((mm instanceof IntroductionAwareMethodMatcher &&",
                "-\t\t\t\t((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||",
                "+\t\treturn (mm instanceof IntroductionAwareMethodMatcher ?",
                "+\t\t\t\t((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions) :",
                " \t\t\t\tmm.matches(method, targetClass));",
                "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "index 8cbd7024cb..c3bd9c9d51 100644",
                "--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "@@ -350,9 +350,12 @@ public abstract class ClassUtils {",
                " \t\ttry {",
                "-\t\t\treturn (clazz == classLoader.loadClass(clazz.getName()));",
                "-\t\t\t// Else: different class with same name found",
                "+\t\t\tif (clazz.getClassLoader() == classLoader) {",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                " \t\t}",
                "-\t\tcatch (ClassNotFoundException ex) {",
                "-\t\t\t// No corresponding class found at all",
                "-\t\t\treturn false;",
                "+\t\tcatch (SecurityException ex) {",
                "+\t\t\t// Fall through to loadable check below",
                " \t\t}",
                "+",
                "+\t\t// Visible if same Class can be loaded from given ClassLoader",
                "+\t\treturn isLoadable(clazz, classLoader);",
                " \t}",
                "@@ -394,3 +397,3 @@ public abstract class ClassUtils {",
                " \t\tcatch (SecurityException ex) {",
                "-\t\t\t// Fall through to Class reference comparison below",
                "+\t\t\t// Fall through to loadable check below",
                " \t\t}",
                "@@ -399,3 +402,20 @@ public abstract class ClassUtils {",
                " \t\t// safe if same Class can be loaded from given ClassLoader",
                "-\t\treturn (classLoader != null && isVisible(clazz, classLoader));",
                "+\t\treturn (classLoader != null && isLoadable(clazz, classLoader));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Check whether the given class is loadable in the given ClassLoader.",
                "+\t * @param clazz the class to check (typically an interface)",
                "+\t * @param classLoader the ClassLoader to check against",
                "+\t * @since 5.0.6",
                "+\t */",
                "+\tprivate static boolean isLoadable(Class<?> clazz, ClassLoader classLoader) {",
                "+\t\ttry {",
                "+\t\t\treturn (clazz == classLoader.loadClass(clazz.getName()));",
                "+\t\t\t// Else: different class with same name found",
                "+\t\t}",
                "+\t\tcatch (ClassNotFoundException ex) {",
                "+\t\t\t// No corresponding class found at all",
                "+\t\t\treturn false;",
                "+\t\t}",
                " \t}",
                "@@ -713,3 +733,3 @@ public abstract class ClassUtils {",
                " \t\tif (clazz.isInterface() && isVisible(clazz, classLoader)) {",
                "-\t\t\treturn Collections.<Class<?>>singleton(clazz);",
                "+\t\t\treturn Collections.singleton(clazz);",
                " \t\t}",
                "@@ -720,3 +740,5 @@ public abstract class ClassUtils {",
                " \t\t\tfor (Class<?> ifc : ifcs) {",
                "-\t\t\t\tinterfaces.addAll(getAllInterfacesForClassAsSet(ifc, classLoader));",
                "+\t\t\t\tif (isVisible(ifc, classLoader)) {",
                "+\t\t\t\t\tinterfaces.add(ifc);",
                "+\t\t\t\t}",
                " \t\t\t}",
                "@@ -1213,4 +1235,3 @@ public abstract class ClassUtils {",
                " \tpublic static Method getMostSpecificMethod(Method method, @Nullable Class<?> targetClass) {",
                "-\t\tif (isOverridable(method, targetClass) &&",
                "-\t\t\t\ttargetClass != null && targetClass != method.getDeclaringClass()) {",
                "+\t\tif (targetClass != null && targetClass != method.getDeclaringClass() && isOverridable(method, targetClass)) {",
                " \t\t\ttry {",
                "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java",
                "index a4aaf3c970..a2898fecff 100644",
                "--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java",
                "+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -34,2 +34,3 @@ import org.springframework.util.ObjectUtils;",
                " import org.springframework.util.PatternMatchUtils;",
                "+import org.springframework.util.ReflectionUtils;",
                "@@ -146,3 +147,3 @@ public class MethodMapTransactionAttributeSource",
                "-\t\tMethod[] methods = clazz.getDeclaredMethods();",
                "+\t\tMethod[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);",
                " \t\tList<Method> matchingMethods = new ArrayList<>();",
                "@@ -158,3 +159,3 @@ public class MethodMapTransactionAttributeSource",
                "-\t\t// register all matching methods",
                "+\t\t// Register all matching methods",
                " \t\tfor (Method method : matchingMethods) {"
            ],
            "changed_files": [
                "spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java",
                "spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java",
                "spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b95e05db04aa025360107212506e563cb556e896"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "551505bd93003e983fb97bbf30221a45de138178",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523887174,
            "hunks": 6,
            "message": "Restore handling of 0 bytes read Issue: SPR-16728",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java",
                "index e83dc84cfc..4ff71ca397 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java",
                "@@ -322,3 +322,4 @@ public abstract class AbstractListenerReadPublisher<T> implements Publisher<T> {",
                " \t\t\t\t\ttry {",
                "-\t\t\t\t\t\tboolean demandAvailable = publisher.readAndPublish();",
                "+\t\t\t\t\t\tboolean demandAvailable = publisher.",
                "+\t\t\t\t\t\t\t\treadAndPublish();",
                " \t\t\t\t\t\tif (demandAvailable) {",
                "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java",
                "index 4111a9e144..db7c599577 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java",
                "@@ -200,2 +200,4 @@ class ServletServerHttpRequest extends AbstractServerHttpRequest {",
                " \t * Invoked only when {@link ServletInputStream#isReady()} returns \"true\".",
                "+\t * @return a DataBuffer with data read, or {@link #EOF_BUFFER} if the input",
                "+\t * stream returned -1, or null if 0 bytes were read.",
                " \t */",
                "@@ -213,3 +215,4 @@ class ServletServerHttpRequest extends AbstractServerHttpRequest {",
                " \t\t}",
                "-\t\telse if (read == -1) {",
                "+",
                "+\t\tif (read == -1) {",
                " \t\t\treturn EOF_BUFFER;",
                "@@ -275,9 +278,8 @@ class ServletServerHttpRequest extends AbstractServerHttpRequest {",
                " \t\t\t\tDataBuffer dataBuffer = readFromInputStream();",
                "-\t\t\t\tif (dataBuffer != EOF_BUFFER) {",
                "-\t\t\t\t\treturn dataBuffer;",
                "-\t\t\t\t}",
                "-\t\t\t\telse {",
                "+\t\t\t\tif (dataBuffer == EOF_BUFFER) {",
                " \t\t\t\t\t// No need to wait for container callback...",
                " \t\t\t\t\tonAllDataRead();",
                "+\t\t\t\t\tdataBuffer = null;",
                " \t\t\t\t}",
                "+\t\t\t\treturn dataBuffer;",
                " \t\t\t}"
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java",
                "spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "567733d2a1e2095316c4898dd645b1c85ce145ae"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f1727bfbdb9c08d510247871fc3e2611ef7be1bf",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522832629,
            "hunks": 1,
            "message": "Cleanup settings.gradle pluginManagement configuration",
            "diff": [
                "diff --git a/settings.gradle b/settings.gradle",
                "index ed1b9e9abd..3f17c52cf9 100644",
                "--- a/settings.gradle",
                "+++ b/settings.gradle",
                "@@ -1,20 +1 @@",
                "-/*",
                "-pluginManagement {",
                "-\trepositories {",
                "-\t\tmaven {",
                "-\t\t\turl \"https://dl.bintray.com/kotlin/kotlin-eap-1.1\"",
                "-\t\t}",
                "-\t\tgradlePluginPortal()",
                "-\t}",
                "-}",
                "-*/",
                "-",
                "-// Workaround for https://github.com/Kotlin/dokka/issues/146",
                "-pluginManagement {",
                "-\trepositories {",
                "-\t\tjcenter()",
                "-\t\tgradlePluginPortal()",
                "-\t}",
                "-}",
                "-",
                " include \"spring-aop\""
            ],
            "changed_files": [
                "settings.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "be1aaa06e77a388482a997acd4997a3119e1f1e6"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "89d069b09d7151becf7d907b1a77fea5d949c6e9",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523450322,
            "hunks": 3,
            "message": "Add default ctor to Reactive UrlBasedCorsConfigurationSource Issue: SPR-16712",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java",
                "index d4720c5a48..f644f9207b 100644",
                "--- a/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java",
                "+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -44,3 +44,17 @@ public class UrlBasedCorsConfigurationSource implements CorsConfigurationSource",
                " \tprivate final PathPatternParser patternParser;",
                "-\t",
                "+",
                "+",
                "+\t/**",
                "+\t * Construct a new {@code UrlBasedCorsConfigurationSource} instance with default",
                "+\t * {@code PathPatternParser}.",
                "+\t * @since 5.0.6",
                "+\t */",
                "+\tpublic UrlBasedCorsConfigurationSource() {",
                "+\t\tthis(new PathPatternParser());",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Construct a new {@code UrlBasedCorsConfigurationSource} instance from the supplied",
                "+\t * {@code PathPatternParser}.",
                "+\t */",
                " \tpublic UrlBasedCorsConfigurationSource(PathPatternParser patternParser) {",
                "@@ -50,2 +64,3 @@ public class UrlBasedCorsConfigurationSource implements CorsConfigurationSource",
                "+",
                " \t/**"
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "eda272047117642afbb706b846cdfa78bce31939"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "697d2e326f09c0a8945982a5fce0dfa309582768",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523498072,
            "hunks": 0,
            "message": "Merge pull request #1785 from cakofony/iterator_allocation",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1785": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1785",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "26652a6b8323ece74866fcf5bd928496b24009f5",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523976268,
            "hunks": 1,
            "message": "Avoid repeated superclass introspection in findAnnotation(Method,...) Issue: SPR-16730 (cherry picked from commit d78e27f)",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "index 54b64dbaac..7e534efb38 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "@@ -557,9 +557,14 @@ public abstract class AnnotationUtils {",
                " \t\t\t\t}",
                "-\t\t\t\ttry {",
                "-\t\t\t\t\tMethod equivalentMethod = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());",
                "-\t\t\t\t\tMethod resolvedEquivalentMethod = BridgeMethodResolver.findBridgedMethod(equivalentMethod);",
                "-\t\t\t\t\tresult = findAnnotation((AnnotatedElement) resolvedEquivalentMethod, annotationType);",
                "-\t\t\t\t}",
                "-\t\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\t\t// No equivalent method found",
                "+\t\t\t\tSet<Method> annotatedMethods = getAnnotatedMethodsInBaseType(clazz);",
                "+\t\t\t\tif (!annotatedMethods.isEmpty()) {",
                "+\t\t\t\t\tfor (Method annotatedMethod : annotatedMethods) {",
                "+\t\t\t\t\t\tif (annotatedMethod.getName().equals(method.getName()) &&",
                "+\t\t\t\t\t\t\t\tArrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {",
                "+\t\t\t\t\t\t\tMethod resolvedSuperMethod = BridgeMethodResolver.findBridgedMethod(annotatedMethod);",
                "+\t\t\t\t\t\t\tresult = findAnnotation((AnnotatedElement) resolvedSuperMethod, annotationType);",
                "+\t\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\t\tbreak;",
                "+\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t}",
                " \t\t\t\t}"
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d78e27f1e9be6c0aeea293c2be19c706cc6c29cd"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "27e87e559362026b132c42856c7d7bf7ff65f9ee",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523267663,
            "hunks": 4,
            "message": "Document why \"charset=UTF-8\" is specified for JSON Issue: SPR-14715",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java",
                "index 17cd1e233e..d7962f3929 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/MediaType.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java",
                "@@ -98,2 +98,8 @@ public class MediaType extends MimeType implements Serializable {",
                " \t * Public constant media type for {@code application/json;charset=UTF-8}.",
                "+\t *",
                "+\t * <p>This {@link MediaType#APPLICATION_JSON} variant should be used to set JSON",
                "+\t * content type because while",
                "+\t * <a href=\"https://tools.ietf.org/html/rfc7159#section-11\">RFC7159</a>",
                "+\t * clearly states that \"no charset parameter is defined for this registration\", some",
                "+\t * browsers require it for interpreting correctly UTF-8 special characters.",
                " \t */",
                "@@ -103,2 +109,8 @@ public class MediaType extends MimeType implements Serializable {",
                " \t * A String equivalent of {@link MediaType#APPLICATION_JSON_UTF8}.",
                "+\t *",
                "+\t * <p>This {@link MediaType#APPLICATION_JSON_VALUE} variant should be used to set JSON",
                "+\t * content type because while",
                "+\t * <a href=\"https://tools.ietf.org/html/rfc7159#section-11\">RFC7159</a>",
                "+\t * clearly states that \"no charset parameter is defined for this registration\", some",
                "+\t * browsers require it for interpreting correctly UTF-8 special characters.",
                " \t */",
                "diff --git a/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java",
                "index 3436f50ae0..16aec34610 100644",
                "--- a/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java",
                "+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java",
                "@@ -195,6 +195,6 @@ public @interface RequestMapping {",
                " \t * produces = {\"text/plain\", \"application/*\"}",
                "-\t * produces = \"application/json; charset=UTF-8\"",
                "+\t * produces = MediaType.APPLICATION_JSON_UTF8_VALUE",
                " \t * </pre>",
                " \t * <p>It affects the actual content type written, for example to produce a JSON response",
                "-\t * with UTF-8 encoding, {@code \"application/json; charset=UTF-8\"} should be used.",
                "+\t * with UTF-8 encoding, {@link org.springframework.http.MediaType#APPLICATION_JSON_UTF8_VALUE} should be used.",
                " \t * <p>Expressions can be negated by using the \"!\" operator, as in \"!text/plain\", which matches"
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/http/MediaType.java",
                "spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "387917992786ca0d048385b9fd3febeb40df8f37"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6184c4ecc904fe58374245c454a6bc768ace6d37",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523538881,
            "hunks": 3,
            "message": "Consistent getTypeForFactoryMethod result for parameterized method Issue: SPR-16720",
            "diff": [
                "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java",
                "index feeb34d188..04a68b4376 100644",
                "--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java",
                "+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java",
                "@@ -754,3 +754,4 @@ public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFac",
                " \t\t\t\t\t\t\t\tfactoryMethod, args, getBeanClassLoader());",
                "-\t\t\t\t\t\tuniqueCandidate = (commonType == null ? factoryMethod : null);",
                "+\t\t\t\t\t\tuniqueCandidate = (commonType == null && returnType == factoryMethod.getReturnType() ?",
                "+\t\t\t\t\t\t\t\tfactoryMethod : null);",
                " \t\t\t\t\t\tcommonType = ClassUtils.determineCommonAncestor(returnType, commonType);",
                "@@ -778,8 +779,11 @@ public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFac",
                "-\t\tif (commonType != null) {",
                "-\t\t\t// Clear return type found: all factory methods return same type.",
                "-\t\t\tmbd.factoryMethodReturnType = (uniqueCandidate != null ?",
                "-\t\t\t\t\tResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));",
                "+\t\tif (commonType == null) {",
                "+\t\t\treturn null;",
                " \t\t}",
                "-\t\treturn commonType;",
                "+\t\t// Common return type found: all factory methods return same type. For a non-parameterized",
                "+\t\t// unique candidate, cache the full type declaration context of the target factory method.",
                "+\t\tcachedReturnType = (uniqueCandidate != null ?",
                "+\t\t\t\tResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));",
                "+\t\tmbd.factoryMethodReturnType = cachedReturnType;",
                "+\t\treturn cachedReturnType.resolve();",
                " \t}"
            ],
            "changed_files": [
                "spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c6a7732a30b169f342c4200aedc88e01c71c43d4"
                ],
                [
                    "no-tag",
                    "4763154193fab3b06f04e85cf289ecd1d33056b7"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b1048975d2966b5c5ab3315403c4e5f0c736bc4d",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522431341,
            "hunks": 2,
            "message": "Minor updates based on PR#1058 The original repo no longer exists: https://github.com/spring-projects/spring-framework/pull/1058",
            "diff": [
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java",
                "index 4b02317bd0..71fd4a7a1e 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java",
                "@@ -230,3 +230,5 @@ public final class PatternsRequestCondition extends AbstractRequestCondition<Pat",
                " \t\t}",
                "-\t\tmatches.sort(this.pathMatcher.getPatternComparator(lookupPath));",
                "+\t\tif (matches.size() > 1) {",
                "+\t\t\tmatches.sort(this.pathMatcher.getPatternComparator(lookupPath));",
                "+\t\t}",
                " \t\treturn matches;",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java",
                "index ec1d5ea3bf..df665ce73b 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java",
                "@@ -164,3 +164,3 @@ public class SseEmitter extends ResponseBodyEmitter {",
                " \t\t/**",
                "-\t\t * Add an SSE \"event\" line.",
                "+\t\t * Add an SSE \"retry\" line.",
                " \t\t */"
            ],
            "changed_files": [
                "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1058": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1058",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fb0e3e935638e866b39429faddec2c187c356384",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1524043408,
            "hunks": 2,
            "message": "Fix a typo in @Nullable Javadoc",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/lang/Nullable.java b/spring-core/src/main/java/org/springframework/lang/Nullable.java",
                "index 3bfbe0e11d..1c343cd4d2 100644",
                "--- a/spring-core/src/main/java/org/springframework/lang/Nullable.java",
                "+++ b/spring-core/src/main/java/org/springframework/lang/Nullable.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -35,3 +35,3 @@ import javax.annotation.meta.When;",
                "  *",
                "- * <p>Can be used in association with {@code NonNullApi} or {@code @NonNullFields} to",
                "+ * <p>Can be used in association with {@code @NonNullApi} or {@code @NonNullFields} to",
                "  * override the default non-nullable semantic to nullable."
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/lang/Nullable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ea8317a1f98e6ed5bd529db1cb2ec848d67a9dc4"
                ]
            ],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "19d311dcb251474dfaf731a83ba9a5b53b191068",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523618165,
            "hunks": 0,
            "message": "Merge pull request #1791 from nkjackzhang:patch-1 * pr/1791:   Fix typo in javadoc",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1791": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1791",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1cbc353dd1ee9db38490fa9a862c8a1673db595c",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522448444,
            "hunks": 31,
            "message": "Consistent Ordered.LOWEST_PRECEDENCE declarations for default order (cherry picked from commit 6393e5c)",
            "diff": [
                "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java",
                "index 2c3de88958..74f3073b93 100644",
                "--- a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java",
                "+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -52,5 +52,5 @@ public class ProxyProcessorSupport extends ProxyConfig implements Ordered, BeanC",
                " \t/**",
                "-\t * Set the ordering which will apply to this class's implementation",
                "-\t * of Ordered, used when applying multiple processors.",
                "-\t * <p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered.",
                "+\t * Set the ordering which will apply to this processor's implementation",
                "+\t * of {@link Ordered}, used when applying multiple processors.",
                "+\t * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.",
                " \t * @param order the ordering value",
                "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java",
                "index 8219737a22..17b167010f 100644",
                "--- a/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java",
                "+++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java",
                "@@ -47,3 +47,3 @@ public class DefaultIntroductionAdvisor implements IntroductionAdvisor, ClassFil",
                "-\tprivate int order = Integer.MAX_VALUE;",
                "+\tprivate int order = Ordered.LOWEST_PRECEDENCE;",
                "@@ -120,3 +120,2 @@ public class DefaultIntroductionAdvisor implements IntroductionAdvisor, ClassFil",
                "-",
                " \tpublic void setOrder(int order) {",
                "@@ -130,3 +129,2 @@ public class DefaultIntroductionAdvisor implements IntroductionAdvisor, ClassFil",
                "-",
                " \t@Override",
                "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java b/spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java",
                "index 9dbe10dbf4..3ba109a1ac 100644",
                "--- a/spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java",
                "+++ b/spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2012 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -38,6 +38,6 @@ public abstract class StaticMethodMatcherPointcutAdvisor extends StaticMethodMat",
                "-\tprivate int order = Integer.MAX_VALUE;",
                "-",
                " \tprivate Advice advice;",
                "+\tprivate int order = Integer.MAX_VALUE;",
                "+",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java",
                "index 8b27621845..9617cdedb7 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -27,2 +27,3 @@ import org.springframework.beans.factory.BeanInitializationException;",
                " import org.springframework.context.ApplicationContext;",
                "+import org.springframework.core.Ordered;",
                " import org.springframework.util.Assert;",
                "@@ -64,3 +65,3 @@ public class ResourceHandlerRegistry {",
                "-\tprivate int order = Integer.MAX_VALUE -1;",
                "+\tprivate int order = Ordered.LOWEST_PRECEDENCE - 1;",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java",
                "index 0ecab435b4..13012abb03 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java",
                "@@ -68,4 +68,2 @@ public abstract class AbstractHandlerMapping extends WebApplicationObjectSupport",
                "-\tprivate int order = Integer.MAX_VALUE;  // default: same as non-Ordered",
                "-",
                " \tprivate Object defaultHandler;",
                "@@ -84,16 +82,4 @@ public abstract class AbstractHandlerMapping extends WebApplicationObjectSupport",
                "+\tprivate int order = Ordered.LOWEST_PRECEDENCE;  // default: same as non-Ordered",
                "-\t/**",
                "-\t * Specify the order value for this HandlerMapping bean.",
                "-\t * <p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered.",
                "-\t * @see org.springframework.core.Ordered#getOrder()",
                "-\t */",
                "-\tpublic final void setOrder(int order) {",
                "-\t  this.order = order;",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic final int getOrder() {",
                "-\t  return this.order;",
                "-\t}",
                "@@ -237,2 +223,16 @@ public abstract class AbstractHandlerMapping extends WebApplicationObjectSupport",
                "+\t/**",
                "+\t * Specify the order value for this HandlerMapping bean.",
                "+\t * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.",
                "+\t * @see org.springframework.core.Ordered#getOrder()",
                "+\t */",
                "+\tpublic void setOrder(int order) {",
                "+\t\tthis.order = order;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic int getOrder() {",
                "+\t\treturn this.order;",
                "+\t}",
                "+",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java",
                "index 803b595d4b..2a7c47a6a9 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2014 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -47,3 +47,3 @@ public abstract class AbstractHandlerMethodAdapter extends WebContentGenerator i",
                " \t * Specify the order value for this HandlerAdapter bean.",
                "-\t * <p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered.",
                "+\t * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.",
                " \t * @see org.springframework.core.Ordered#getOrder()",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/BeanNameViewResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/BeanNameViewResolver.java",
                "index 3788079802..8bc7f71c2e 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/BeanNameViewResolver.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/BeanNameViewResolver.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2014 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -55,5 +55,10 @@ public class BeanNameViewResolver extends WebApplicationObjectSupport implements",
                "-\tprivate int order = Integer.MAX_VALUE;  // default: same as non-Ordered",
                "+\tprivate int order = Ordered.LOWEST_PRECEDENCE;  // default: same as non-Ordered",
                "+\t/**",
                "+\t * Specify the order value for this ViewResolver bean.",
                "+\t * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.",
                "+\t * @see org.springframework.core.Ordered#getOrder()",
                "+\t */",
                " \tpublic void setOrder(int order) {",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java",
                "index 78731a71b5..8e8313f34d 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2014 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -65,7 +65,5 @@ public class ResourceBundleViewResolver extends AbstractCachingViewResolver",
                " \t/** The default basename if no other basename is supplied. */",
                "-\tpublic final static String DEFAULT_BASENAME = \"views\";",
                "+\tpublic static final String DEFAULT_BASENAME = \"views\";",
                "-\tprivate int order = Integer.MAX_VALUE;  // default: same as non-Ordered",
                "-",
                " \tprivate String[] basenames = new String[] {DEFAULT_BASENAME};",
                "@@ -78,2 +76,4 @@ public class ResourceBundleViewResolver extends AbstractCachingViewResolver",
                "+\tprivate int order = Ordered.LOWEST_PRECEDENCE;  // default: same as non-Ordered",
                "+",
                " \t/* Locale -> BeanFactory */",
                "@@ -87,11 +87,2 @@ public class ResourceBundleViewResolver extends AbstractCachingViewResolver",
                "-\tpublic void setOrder(int order) {",
                "-\t\tthis.order = order;",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic int getOrder() {",
                "-\t\treturn this.order;",
                "-\t}",
                "-",
                " \t/**",
                "@@ -177,2 +168,16 @@ public class ResourceBundleViewResolver extends AbstractCachingViewResolver",
                "+\t/**",
                "+\t * Specify the order value for this ViewResolver bean.",
                "+\t * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.",
                "+\t * @see org.springframework.core.Ordered#getOrder()",
                "+\t */",
                "+\tpublic void setOrder(int order) {",
                "+\t\tthis.order = order;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic int getOrder() {",
                "+\t\treturn this.order;",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java",
                "index 9b09f8a965..ef7cd69e26 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2016 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -130,3 +130,3 @@ public class UrlBasedViewResolver extends AbstractCachingViewResolver implements",
                "-\tprivate int order = Integer.MAX_VALUE;",
                "+\tprivate int order = Ordered.LOWEST_PRECEDENCE;",
                "@@ -409,4 +409,5 @@ public class UrlBasedViewResolver extends AbstractCachingViewResolver implements",
                " \t/**",
                "-\t * Set the order in which this {@link org.springframework.web.servlet.ViewResolver}",
                "-\t * is evaluated.",
                "+\t * Specify the order value for this ViewResolver bean.",
                "+\t * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.",
                "+\t * @see org.springframework.core.Ordered#getOrder()",
                " \t */",
                "@@ -416,6 +417,2 @@ public class UrlBasedViewResolver extends AbstractCachingViewResolver implements",
                "-\t/**",
                "-\t * Return the order in which this {@link org.springframework.web.servlet.ViewResolver}",
                "-\t * is evaluated.",
                "-\t */",
                " \t@Override",
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/XmlViewResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/XmlViewResolver.java",
                "index 2dff254793..9b4eb3ddb5 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/XmlViewResolver.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/XmlViewResolver.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2012 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -59,7 +59,5 @@ public class XmlViewResolver extends AbstractCachingViewResolver",
                " \t/** Default if no other location is supplied */",
                "-\tpublic final static String DEFAULT_LOCATION = \"/WEB-INF/views.xml\";",
                "+\tpublic static final String DEFAULT_LOCATION = \"/WEB-INF/views.xml\";",
                "-\tprivate int order = Integer.MAX_VALUE;  // default: same as non-Ordered",
                "-",
                " \tprivate Resource location;",
                "@@ -68,11 +66,4 @@ public class XmlViewResolver extends AbstractCachingViewResolver",
                "+\tprivate int order = Ordered.LOWEST_PRECEDENCE;  // default: same as non-Ordered",
                "-\tpublic void setOrder(int order) {",
                "-\t\tthis.order = order;",
                "-\t}",
                "-",
                "-\t@Override",
                "-\tpublic int getOrder() {",
                "-\t\treturn this.order;",
                "-\t}",
                "@@ -87,2 +78,16 @@ public class XmlViewResolver extends AbstractCachingViewResolver",
                "+\t/**",
                "+\t * Specify the order value for this ViewResolver bean.",
                "+\t * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.",
                "+\t * @see org.springframework.core.Ordered#getOrder()",
                "+\t */",
                "+\tpublic void setOrder(int order) {",
                "+\t\tthis.order = order;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic int getOrder() {",
                "+\t\treturn this.order;",
                "+\t}",
                "+",
                " \t/**"
            ],
            "changed_files": [
                "spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java",
                "spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java",
                "spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/view/BeanNameViewResolver.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java",
                "spring-webmvc/src/main/java/org/springframework/web/servlet/view/XmlViewResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6393e5ce0cfb6e5502e7415f29e1ea73b363f2a2"
                ]
            ],
            "tags": [
                "v4.3.15.RELEASE",
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2fa060f0e9933aa2e9ea290cec05f19232afa97e",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522832087,
            "hunks": 3,
            "message": "Fix Dokka reference to Spring Framework's Javadoc This commit specifies a local packageListUrl and defines that dokka task must be executed after the api task in order to be able to build KDoc during the release process when the Spring Framework's Javadoc is not published yet. Issue: SPR-16687",
            "diff": [
                "diff --git a/gradle/docs.gradle b/gradle/docs.gradle",
                "index 56f5c55a12..2698b456a8 100644",
                "--- a/gradle/docs.gradle",
                "+++ b/gradle/docs.gradle",
                "@@ -51,8 +51,5 @@ task api(type: Javadoc) {",
                "-// Need https://github.com/Kotlin/dokka/issues/184 to be fixed to avoid \"Can't find node by signature\" log spam",
                " dokka {",
                " \tdependsOn {",
                "-\t\tsubprojects.collect {",
                "-\t\t\tit.tasks.getByName(\"jar\")",
                "-\t\t}",
                "+\t\ttasks.getByName(\"api\")",
                " \t}",
                "@@ -71,2 +68,6 @@ dokka {",
                " \t})",
                "+\texternalDocumentationLink {",
                "+\t\turl = new URL(\"https://docs.spring.io/spring-framework/docs/$version/javadoc-api/\")",
                "+\t\tpackageListUrl = new File(buildDir, \"api/package-list\").toURI().toURL()",
                "+\t}",
                " \texternalDocumentationLink {"
            ],
            "changed_files": [
                "gradle/docs.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c7c743872aa7ee9143f95fc74d654914df4938fa"
                ]
            ],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8a9321652d45b6a524921e2cc5988696495ecaaa",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522530428,
            "hunks": 4,
            "message": "Refined javadoc",
            "diff": [
                "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java",
                "index f9783feaf8..a0dc4417a2 100644",
                "--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java",
                "+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java",
                "@@ -91,3 +91,3 @@ public class ResourceBundleViewResolver extends AbstractCachingViewResolver",
                " \t * The default is \"views\".",
                "-\t * <p>{@code ResourceBundle} supports different suffixes. For example,",
                "+\t * <p>{@code ResourceBundle} supports different locale suffixes. For example,",
                " \t * a base name of \"views\" might map to {@code ResourceBundle} files",
                "@@ -109,9 +109,8 @@ public class ResourceBundleViewResolver extends AbstractCachingViewResolver",
                " \t * conventions. The default is a single basename \"views\".",
                "-\t * <p>{@code ResourceBundle} supports different suffixes. For example,",
                "+\t * <p>{@code ResourceBundle} supports different locale suffixes. For example,",
                " \t * a base name of \"views\" might map to {@code ResourceBundle} files",
                " \t * \"views\", \"views_en_au\" and \"views_de\".",
                "-\t * <p>The associated resource bundles will be checked sequentially",
                "-\t * when resolving a message code. Note that message definitions in a",
                "-\t * <i>previous</i> resource bundle will override ones in a later bundle,",
                "-\t * due to the sequential lookup.",
                "+\t * <p>The associated resource bundles will be checked sequentially when resolving",
                "+\t * a message code. Note that message definitions in a <i>previous</i> resource",
                "+\t * bundle will override ones in a later bundle, due to the sequential lookup.",
                " \t * <p>Note that ResourceBundle names are effectively classpath locations: As a",
                "@@ -122,2 +121,3 @@ public class ResourceBundleViewResolver extends AbstractCachingViewResolver",
                " \t * @see ResourceBundle#getBundle(String)",
                "+\t * @see ResourceBundle#getBundle(String, Locale)",
                " \t */"
            ],
            "changed_files": [
                "spring-webmvc/src/main/java/org/springframework/web/servlet/view/ResourceBundleViewResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d232fffa63096811d2e157ef7a9057008ca60835",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1474197429,
            "hunks": 3,
            "message": "Use whenComplete since (null) return value not needed",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java",
                "index c9b28a79a8..42910bf902 100644",
                "--- a/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java",
                "+++ b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java",
                "@@ -23,2 +23,3 @@ import java.util.concurrent.TimeUnit;",
                " import java.util.concurrent.TimeoutException;",
                "+import java.util.function.BiConsumer;",
                "@@ -52,3 +53,3 @@ public class CompletableToListenableFutureAdapter<T> implements ListenableFuture",
                " \t\tthis.completableFuture = completableFuture;",
                "-\t\tthis.completableFuture.handle((result, ex) -> {",
                "+\t\tthis.completableFuture.whenComplete((result, ex) -> {",
                " \t\t\tif (ex != null) {",
                "@@ -59,3 +60,2 @@ public class CompletableToListenableFutureAdapter<T> implements ListenableFuture",
                " \t\t\t}",
                "-\t\t\treturn null;",
                " \t\t});"
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e88ca0d6338aa870ed3c61043aa2fa46c3e49ce4",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523455586,
            "hunks": 1,
            "message": "Upgrade framework build to Tomcat 9.0 and Undertow 2.0 Issue: SPR-16470",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 354d2999b0..8b5b34ec65 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -61,4 +61,4 @@ configure(allprojects) { project ->",
                " \text.tiles3Version        = \"3.0.8\"",
                "-\text.tomcatVersion        = \"8.5.29\"",
                "-\text.undertowVersion      = \"1.4.23.Final\"",
                "+\text.tomcatVersion        = \"9.0.7\"",
                "+\text.undertowVersion      = \"2.0.4.Final\""
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "66a3a82fb31b610e63bb27e7ddef02c2b63d8c50",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522534875,
            "hunks": 17,
            "message": "Avoid reference to HandlerMethod class in ServerErrorException This breaks the package dependency cycle between web.server/web.method and makes ServerErrorException more generally applicable. Includes deprecation of the plain reason constructor variant, in favor of providing a Method or MethodParameter context (which MatrixVariableMethodArgumentResolver does now).",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java b/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java",
                "index 523b44d751..5f18a9f021 100644",
                "--- a/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java",
                "+++ b/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java",
                "@@ -18,2 +18,4 @@ package org.springframework.web.server;",
                "+import java.lang.reflect.Method;",
                "+",
                " import org.springframework.core.MethodParameter;",
                "@@ -21,3 +23,2 @@ import org.springframework.http.HttpStatus;",
                " import org.springframework.lang.Nullable;",
                "-import org.springframework.web.method.HandlerMethod;",
                "@@ -35,3 +36,3 @@ public class ServerErrorException extends ResponseStatusException {",
                " \t@Nullable",
                "-\tprivate final HandlerMethod handlerMethod;",
                "+\tprivate final Method handlerMethod;",
                "@@ -42,6 +43,7 @@ public class ServerErrorException extends ResponseStatusException {",
                " \t/**",
                "-\t * Constructor with an explanation only.",
                "+\t * Constructor for a 500 error with a reason and an optional cause.",
                "+\t * @since 5.0.5",
                " \t */",
                "-\tpublic ServerErrorException(String reason) {",
                "-\t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, null);",
                "+\tpublic ServerErrorException(String reason, @Nullable Throwable cause) {",
                "+\t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);",
                " \t\tthis.handlerMethod = null;",
                "@@ -51,8 +53,8 @@ public class ServerErrorException extends ResponseStatusException {",
                " \t/**",
                "-\t * Constructor with a reason and root cause.",
                "+\t * Constructor for a 500 error with a handler {@link Method} and an optional cause.",
                " \t * @since 5.0.5",
                " \t */",
                "-\tpublic ServerErrorException(String reason, Throwable cause) {",
                "+\tpublic ServerErrorException(String reason, Method handlerMethod, @Nullable Throwable cause) {",
                " \t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);",
                "-\t\tthis.handlerMethod = null;",
                "+\t\tthis.handlerMethod = handlerMethod;",
                " \t\tthis.parameter = null;",
                "@@ -61,3 +63,3 @@ public class ServerErrorException extends ResponseStatusException {",
                " \t/**",
                "-\t * Constructor for a 500 error with a {@link MethodParameter}.",
                "+\t * Constructor for a 500 error with a {@link MethodParameter} and an optional cause.",
                " \t */",
                "@@ -65,3 +67,3 @@ public class ServerErrorException extends ResponseStatusException {",
                " \t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);",
                "-\t\tthis.handlerMethod = null;",
                "+\t\tthis.handlerMethod = parameter.getMethod();",
                " \t\tthis.parameter = parameter;",
                "@@ -69,11 +71,2 @@ public class ServerErrorException extends ResponseStatusException {",
                "-\t/**",
                "-\t * Constructor for a 500 error with a root cause.",
                "-\t */",
                "-\tpublic ServerErrorException(String reason, HandlerMethod handlerMethod, @Nullable Throwable cause) {",
                "-\t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);",
                "-\t\tthis.handlerMethod = handlerMethod;",
                "-\t\tthis.parameter = null;",
                "-\t}",
                "-",
                " \t/**",
                "@@ -87,5 +80,16 @@ public class ServerErrorException extends ResponseStatusException {",
                "+\t/**",
                "+\t * Constructor for a 500 error with a reason only.",
                "+\t * @deprecated in favor of {@link #ServerErrorException(String, Throwable)}",
                "+\t */",
                "+\t@Deprecated",
                "+\tpublic ServerErrorException(String reason) {",
                "+\t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, null);",
                "+\t\tthis.handlerMethod = null;",
                "+\t\tthis.parameter = null;",
                "+\t}",
                "+",
                " \t/**",
                "-\t * Return the controller method associated with the error, if any.",
                "+\t * Return the handler method associated with the error, if any.",
                " \t * @since 5.0.5",
                "@@ -93,3 +97,3 @@ public class ServerErrorException extends ResponseStatusException {",
                " \t@Nullable",
                "-\tpublic HandlerMethod getHandlerMethod() {",
                "+\tpublic Method getHandlerMethod() {",
                " \t\treturn this.handlerMethod;",
                "@@ -98,3 +102,3 @@ public class ServerErrorException extends ResponseStatusException {",
                " \t/**",
                "-\t * Return the controller method argument associated with this error, if any.",
                "+\t * Return the specific method parameter associated with the error, if any.",
                " \t */",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "index c60f24b88b..afd59abc7d 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "@@ -111,3 +111,3 @@ public class SyncInvocableHandlerMethod extends HandlerMethod {",
                " \t\t\t\tthrow (ex instanceof ServerErrorException ? (ServerErrorException) ex :",
                "-\t\t\t\t\t\tnew ServerErrorException(\"Failed to invoke: \" + getShortLogMessage(), this, ex));",
                "+\t\t\t\t\t\tnew ServerErrorException(\"Failed to invoke: \" + getShortLogMessage(), getMethod(), ex));",
                " \t\t\t}",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMethodArgumentResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMethodArgumentResolver.java",
                "index a2824b4c85..0e999c84d3 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMethodArgumentResolver.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMethodArgumentResolver.java",
                "@@ -100,3 +100,4 @@ public class MatrixVariableMethodArgumentResolver extends AbstractNamedValueSync",
                " \t\t\t\t\t\t\t\t\"Found more than one match for URI path parameter '\" + name +",
                "-\t\t\t\t\t\t\t\t\"' for parameter type [\" + paramType + \"]. Use 'pathVar' attribute to disambiguate.\");",
                "+\t\t\t\t\t\t\t\t\"' for parameter type [\" + paramType + \"]. Use 'pathVar' attribute to disambiguate.\",",
                "+\t\t\t\t\t\t\t\tparam, null);",
                " \t\t\t\t\t}"
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/MatrixVariableMethodArgumentResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "97735e4ffcc9039f67a4c6d97eb9cdc4260bd2d3",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522534026,
            "hunks": 2,
            "message": "Proper references to JDK 9+ (including JDK 10) in build comments",
            "diff": [
                "diff --git a/spring-aspects/spring-aspects.gradle b/spring-aspects/spring-aspects.gradle",
                "index 2203096d78..269b0a8f20 100644",
                "--- a/spring-aspects/spring-aspects.gradle",
                "+++ b/spring-aspects/spring-aspects.gradle",
                "@@ -2,4 +2,3 @@ description = \"Spring Aspects\"",
                "-// redefine the compileJava and compileTestJava tasks in order to",
                "-// compile sources with ajc instead of javac",
                "+// Redefine the compileJava and compileTestJava tasks in order to compile sources with ajc instead of javac",
                "@@ -83,4 +82,4 @@ dependencies {",
                " \taspects(project(\":spring-orm\"))",
                "-\tajc(\"org.aspectj:aspectjtools:1.9.0.RC2\")  // for JDK 9 build compatibility",
                "-\trt(\"org.aspectj:aspectjrt:1.9.0.RC2\")  // for JDK 9 build compatibility",
                "+\tajc(\"org.aspectj:aspectjtools:1.9.0.RC2\")  // for JDK 9+ build compatibility",
                "+\trt(\"org.aspectj:aspectjrt:1.9.0.RC2\")  // for JDK 9+ build compatibility",
                " \tcompile(\"org.aspectj:aspectjweaver:${aspectjVersion}\")  // for Maven POM exposure"
            ],
            "changed_files": [
                "spring-aspects/spring-aspects.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "61c3db0869416bf61e7e4cbc5bd7dd2ece24b0a2",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523443675,
            "hunks": 14,
            "message": "MethodHandles.Lookup.defineClass for CGLIB class definition purposes Spring's CGLIB fork is patched with local copies of affected files here, introducing the notion of a \"contextClass\" (e.g. the proxy superclass) which gets passed through to ReflectUtils.defineClass for delegating to MethodHandles.Lookup.defineClass eventually, against a privateLookupIn(contextClass) lookup context on JDK 9/10/11. Issue: SPR-15859",
            "diff": [
                "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java",
                "index 0d04031fb3..71b2bf1dda 100644",
                "--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java",
                "+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -207,5 +207,4 @@ class CglibAopProxy implements AopProxy, Serializable {",
                " \t\tcatch (CodeGenerationException | IllegalArgumentException ex) {",
                "-\t\t\tthrow new AopConfigException(\"Could not generate CGLIB subclass of class [\" +",
                "-\t\t\t\t\tthis.advised.getTargetClass() + \"]: \" +",
                "-\t\t\t\t\t\"Common causes of this problem include using a final class or a non-visible class\",",
                "+\t\t\tthrow new AopConfigException(\"Could not generate CGLIB subclass of \" + this.advised.getTargetClass() +",
                "+\t\t\t\t\t\": Common causes of this problem include using a final class or a non-visible class\",",
                " \t\t\t\t\tex);",
                "@@ -745,3 +744,3 @@ class CglibAopProxy implements AopProxy, Serializable {",
                " \t\tprotected Object invokeJoinpoint() throws Throwable {",
                "-\t\t\tif (this.publicMethod) {",
                "+\t\t\tif (this.publicMethod && getMethod().getDeclaringClass() != Object.class) {",
                " \t\t\t\treturn this.methodProxy.invoke(this.target, this.arguments);",
                "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "index b7a6d67e14..7ffaafd8ea 100644",
                "--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "@@ -120,5 +120,5 @@ class ConfigurationClassEnhancer {",
                " \t */",
                "-\tprivate Enhancer newEnhancer(Class<?> superclass, @Nullable ClassLoader classLoader) {",
                "+\tprivate Enhancer newEnhancer(Class<?> configSuperClass, @Nullable ClassLoader classLoader) {",
                " \t\tEnhancer enhancer = new Enhancer();",
                "-\t\tenhancer.setSuperclass(superclass);",
                "+\t\tenhancer.setSuperclass(configSuperClass);",
                " \t\tenhancer.setInterfaces(new Class<?>[] {EnhancedConfiguration.class});",
                "diff --git a/spring-core/spring-core.gradle b/spring-core/spring-core.gradle",
                "index 7a5281d7bc..dd190d50c2 100644",
                "--- a/spring-core/spring-core.gradle",
                "+++ b/spring-core/spring-core.gradle",
                "@@ -42,3 +42,3 @@ task cglibRepackJar(type: Jar) { repackJar ->",
                " \t\t\t\trule(pattern: \"net.sf.cglib.**\", result: \"org.springframework.cglib.@1\")",
                "-\t\t\t\t// As mentioned above, transform cglib\"s internal asm dependencies from",
                "+\t\t\t\t// As mentioned above, transform cglib's internal asm dependencies from",
                " \t\t\t\t// org.objectweb.asm => org.springframework.asm. Doing this counts on the",
                "@@ -100,2 +100,7 @@ jar {",
                " \t\tinclude \"org/springframework/cglib/**\"",
                "+\t\texclude \"org/springframework/cglib/core/AbstractClassGenerator*.class\"",
                "+\t\texclude \"org/springframework/cglib/core/KeyFactory*.class\"",
                "+\t\texclude \"org/springframework/cglib/core/ReflectUtils*.class\"",
                "+\t\texclude \"org/springframework/cglib/proxy/Enhancer*.class\"",
                "+\t\texclude \"org/springframework/cglib/proxy/MethodProxy*.class\"",
                " \t}",
                "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "new file mode 100644",
                "index 0000000000..85a37b60f9",
                "--- /dev/null",
                "+++ b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "@@ -0,0 +1,379 @@",
                "+/*",
                "+ * Copyright 2003,2004 The Apache Software Foundation",
                "+ *",
                "+ *  Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.springframework.cglib.core;",
                "+",
                "+import java.lang.ref.WeakReference;",
                "+import java.security.ProtectionDomain;",
                "+import java.util.HashSet;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+import java.util.WeakHashMap;",
                "+",
                "+import org.springframework.asm.ClassReader;",
                "+import org.springframework.cglib.core.internal.Function;",
                "+import org.springframework.cglib.core.internal.LoadingCache;",
                "+",
                "+/**",
                "+ * Abstract class for all code-generating CGLIB utilities.",
                "+ * In addition to caching generated classes for performance, it provides hooks for",
                "+ * customizing the <code>ClassLoader</code>, name of the generated class, and transformations",
                "+ * applied before generation.",
                "+ */",
                "+@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
                "+abstract public class AbstractClassGenerator<T> implements ClassGenerator {",
                "+",
                "+\tprivate static final ThreadLocal CURRENT = new ThreadLocal();",
                "+",
                "+\tprivate static volatile Map<ClassLoader, ClassLoaderData> CACHE = new WeakHashMap<ClassLoader, ClassLoaderData>();",
                "+",
                "+\tprivate GeneratorStrategy strategy = DefaultGeneratorStrategy.INSTANCE;",
                "+",
                "+\tprivate NamingPolicy namingPolicy = DefaultNamingPolicy.INSTANCE;",
                "+",
                "+\tprivate Source source;",
                "+",
                "+\tprivate ClassLoader classLoader;",
                "+",
                "+\tprivate Class contextClass;",
                "+",
                "+\tprivate String namePrefix;",
                "+",
                "+\tprivate Object key;",
                "+",
                "+\tprivate boolean useCache = true;",
                "+",
                "+\tprivate String className;",
                "+",
                "+\tprivate boolean attemptLoad;",
                "+",
                "+",
                "+\tprotected static class ClassLoaderData {",
                "+",
                "+\t\tprivate final Set<String> reservedClassNames = new HashSet<String>();",
                "+",
                "+\t\t/**",
                "+\t\t * {@link AbstractClassGenerator} here holds \"cache key\" (e.g. {@link org.springframework.cglib.proxy.Enhancer}",
                "+\t\t * configuration), and the value is the generated class plus some additional values",
                "+\t\t * (see {@link #unwrapCachedValue(Object)}.",
                "+\t\t * <p>The generated classes can be reused as long as their classloader is reachable.</p>",
                "+\t\t * <p>Note: the only way to access a class is to find it through generatedClasses cache, thus",
                "+\t\t * the key should not expire as long as the class itself is alive (its classloader is alive).</p>",
                "+\t\t */",
                "+\t\tprivate final LoadingCache<AbstractClassGenerator, Object, Object> generatedClasses;",
                "+",
                "+\t\t/**",
                "+\t\t * Note: ClassLoaderData object is stored as a value of {@code WeakHashMap<ClassLoader, ...>} thus",
                "+\t\t * this classLoader reference should be weak otherwise it would make classLoader strongly reachable",
                "+\t\t * and alive forever.",
                "+\t\t * Reference queue is not required since the cleanup is handled by {@link WeakHashMap}.",
                "+\t\t */",
                "+\t\tprivate final WeakReference<ClassLoader> classLoader;",
                "+",
                "+\t\tprivate final Predicate uniqueNamePredicate = new Predicate() {",
                "+\t\t\tpublic boolean evaluate(Object name) {",
                "+\t\t\t\treturn reservedClassNames.contains(name);",
                "+\t\t\t}",
                "+\t\t};",
                "+",
                "+\t\tprivate static final Function<AbstractClassGenerator, Object> GET_KEY = new Function<AbstractClassGenerator, Object>() {",
                "+\t\t\tpublic Object apply(AbstractClassGenerator gen) {",
                "+\t\t\t\treturn gen.key;",
                "+\t\t\t}",
                "+\t\t};",
                "+",
                "+\t\tpublic ClassLoaderData(ClassLoader classLoader) {",
                "+\t\t\tif (classLoader == null) {",
                "+\t\t\t\tthrow new IllegalArgumentException(\"classLoader == null is not yet supported\");",
                "+\t\t\t}",
                "+\t\t\tthis.classLoader = new WeakReference<ClassLoader>(classLoader);",
                "+\t\t\tFunction<AbstractClassGenerator, Object> load =",
                "+\t\t\t\t\tnew Function<AbstractClassGenerator, Object>() {",
                "+\t\t\t\t\t\tpublic Object apply(AbstractClassGenerator gen) {",
                "+\t\t\t\t\t\t\tClass klass = gen.generate(ClassLoaderData.this);",
                "+\t\t\t\t\t\t\treturn gen.wrapCachedClass(klass);",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t};",
                "+\t\t\tgeneratedClasses = new LoadingCache<AbstractClassGenerator, Object, Object>(GET_KEY, load);",
                "+\t\t}",
                "+",
                "+\t\tpublic ClassLoader getClassLoader() {",
                "+\t\t\treturn classLoader.get();",
                "+\t\t}",
                "+",
                "+\t\tpublic void reserveName(String name) {",
                "+\t\t\treservedClassNames.add(name);",
                "+\t\t}",
                "+",
                "+\t\tpublic Predicate getUniqueNamePredicate() {",
                "+\t\t\treturn uniqueNamePredicate;",
                "+\t\t}",
                "+",
                "+\t\tpublic Object get(AbstractClassGenerator gen, boolean useCache) {",
                "+\t\t\tif (!useCache) {",
                "+\t\t\t\treturn gen.generate(ClassLoaderData.this);",
                "+\t\t\t}",
                "+\t\t\telse {",
                "+\t\t\t\tObject cachedValue = generatedClasses.get(gen);",
                "+\t\t\t\treturn gen.unwrapCachedValue(cachedValue);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+",
                "+\tprotected T wrapCachedClass(Class klass) {",
                "+\t\treturn (T) new WeakReference(klass);",
                "+\t}",
                "+",
                "+\tprotected Object unwrapCachedValue(T cached) {",
                "+\t\treturn ((WeakReference) cached).get();",
                "+\t}",
                "+",
                "+",
                "+\tprotected static class Source {",
                "+",
                "+\t\tString name;",
                "+",
                "+\t\tpublic Source(String name) {",
                "+\t\t\tthis.name = name;",
                "+\t\t}",
                "+\t}",
                "+",
                "+",
                "+\tprotected AbstractClassGenerator(Source source) {",
                "+\t\tthis.source = source;",
                "+\t}",
                "+",
                "+\tprotected void setNamePrefix(String namePrefix) {",
                "+\t\tthis.namePrefix = namePrefix;",
                "+\t}",
                "+",
                "+\tfinal protected String getClassName() {",
                "+\t\treturn className;",
                "+\t}",
                "+",
                "+\tprivate void setClassName(String className) {",
                "+\t\tthis.className = className;",
                "+\t}",
                "+",
                "+\tprivate String generateClassName(Predicate nameTestPredicate) {",
                "+\t\treturn namingPolicy.getClassName(namePrefix, source.name, key, nameTestPredicate);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set the <code>ClassLoader</code> in which the class will be generated.",
                "+\t * Concrete subclasses of <code>AbstractClassGenerator</code> (such as <code>Enhancer</code>)",
                "+\t * will try to choose an appropriate default if this is unset.",
                "+\t * <p>",
                "+\t * Classes are cached per-<code>ClassLoader</code> using a <code>WeakHashMap</code>, to allow",
                "+\t * the generated classes to be removed when the associated loader is garbage collected.",
                "+\t * @param classLoader the loader to generate the new class with, or null to use the default",
                "+\t */",
                "+\tpublic void setClassLoader(ClassLoader classLoader) {",
                "+\t\tthis.classLoader = classLoader;",
                "+\t}",
                "+",
                "+\t// SPRING PATCH BEGIN",
                "+\tpublic void setContextClass(Class contextClass) {",
                "+\t\tthis.contextClass = contextClass;",
                "+\t}",
                "+\t// SPRING PATCH END",
                "+",
                "+\t/**",
                "+\t * Override the default naming policy.",
                "+\t * @param namingPolicy the custom policy, or null to use the default",
                "+\t * @see DefaultNamingPolicy",
                "+\t */",
                "+\tpublic void setNamingPolicy(NamingPolicy namingPolicy) {",
                "+\t\tif (namingPolicy == null)",
                "+\t\t\tnamingPolicy = DefaultNamingPolicy.INSTANCE;",
                "+\t\tthis.namingPolicy = namingPolicy;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @see #setNamingPolicy",
                "+\t */",
                "+\tpublic NamingPolicy getNamingPolicy() {",
                "+\t\treturn namingPolicy;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Whether use and update the static cache of generated classes",
                "+\t * for a class with the same properties. Default is <code>true</code>.",
                "+\t */",
                "+\tpublic void setUseCache(boolean useCache) {",
                "+\t\tthis.useCache = useCache;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @see #setUseCache",
                "+\t */",
                "+\tpublic boolean getUseCache() {",
                "+\t\treturn useCache;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * If set, CGLIB will attempt to load classes from the specified",
                "+\t * <code>ClassLoader</code> before generating them. Because generated",
                "+\t * class names are not guaranteed to be unique, the default is <code>false</code>.",
                "+\t */",
                "+\tpublic void setAttemptLoad(boolean attemptLoad) {",
                "+\t\tthis.attemptLoad = attemptLoad;",
                "+\t}",
                "+",
                "+\tpublic boolean getAttemptLoad() {",
                "+\t\treturn attemptLoad;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set the strategy to use to create the bytecode from this generator.",
                "+\t * By default an instance of {@see DefaultGeneratorStrategy} is used.",
                "+\t */",
                "+\tpublic void setStrategy(GeneratorStrategy strategy) {",
                "+\t\tif (strategy == null)",
                "+\t\t\tstrategy = DefaultGeneratorStrategy.INSTANCE;",
                "+\t\tthis.strategy = strategy;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * @see #setStrategy",
                "+\t */",
                "+\tpublic GeneratorStrategy getStrategy() {",
                "+\t\treturn strategy;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Used internally by CGLIB. Returns the <code>AbstractClassGenerator</code>",
                "+\t * that is being used to generate a class in the current thread.",
                "+\t */",
                "+\tpublic static AbstractClassGenerator getCurrent() {",
                "+\t\treturn (AbstractClassGenerator) CURRENT.get();",
                "+\t}",
                "+",
                "+\tpublic ClassLoader getClassLoader() {",
                "+\t\tClassLoader t = classLoader;",
                "+\t\tif (t == null) {",
                "+\t\t\tt = getDefaultClassLoader();",
                "+\t\t}",
                "+\t\tif (t == null) {",
                "+\t\t\tt = getClass().getClassLoader();",
                "+\t\t}",
                "+\t\tif (t == null) {",
                "+\t\t\tt = Thread.currentThread().getContextClassLoader();",
                "+\t\t}",
                "+\t\tif (t == null) {",
                "+\t\t\tthrow new IllegalStateException(\"Cannot determine classloader\");",
                "+\t\t}",
                "+\t\treturn t;",
                "+\t}",
                "+",
                "+\tabstract protected ClassLoader getDefaultClassLoader();",
                "+",
                "+\t/**",
                "+\t * Returns the protection domain to use when defining the class.",
                "+\t * <p>",
                "+\t * Default implementation returns <code>null</code> for using a default protection domain. Sub-classes may",
                "+\t * override to use a more specific protection domain.",
                "+\t * </p>",
                "+\t * @return the protection domain (<code>null</code> for using a default)",
                "+\t */",
                "+\tprotected ProtectionDomain getProtectionDomain() {",
                "+\t\treturn null;",
                "+\t}",
                "+",
                "+\tprotected Object create(Object key) {",
                "+\t\ttry {",
                "+\t\t\tClassLoader loader = getClassLoader();",
                "+\t\t\tMap<ClassLoader, ClassLoaderData> cache = CACHE;",
                "+\t\t\tClassLoaderData data = cache.get(loader);",
                "+\t\t\tif (data == null) {",
                "+\t\t\t\tsynchronized (AbstractClassGenerator.class) {",
                "+\t\t\t\t\tcache = CACHE;",
                "+\t\t\t\t\tdata = cache.get(loader);",
                "+\t\t\t\t\tif (data == null) {",
                "+\t\t\t\t\t\tMap<ClassLoader, ClassLoaderData> newCache = new WeakHashMap<ClassLoader, ClassLoaderData>(cache);",
                "+\t\t\t\t\t\tdata = new ClassLoaderData(loader);",
                "+\t\t\t\t\t\tnewCache.put(loader, data);",
                "+\t\t\t\t\t\tCACHE = newCache;",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tthis.key = key;",
                "+\t\t\tObject obj = data.get(this, getUseCache());",
                "+\t\t\tif (obj instanceof Class) {",
                "+\t\t\t\treturn firstInstance((Class) obj);",
                "+\t\t\t}",
                "+\t\t\treturn nextInstance(obj);",
                "+\t\t}",
                "+\t\tcatch (RuntimeException | Error ex) {",
                "+\t\t\tthrow ex;",
                "+\t\t}",
                "+\t\tcatch (Exception ex) {",
                "+\t\t\tthrow new CodeGenerationException(ex);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprotected Class generate(ClassLoaderData data) {",
                "+\t\tClass gen;",
                "+\t\tObject save = CURRENT.get();",
                "+\t\tCURRENT.set(this);",
                "+\t\ttry {",
                "+\t\t\tClassLoader classLoader = data.getClassLoader();",
                "+\t\t\tif (classLoader == null) {",
                "+\t\t\t\tthrow new IllegalStateException(\"ClassLoader is null while trying to define class \" +",
                "+\t\t\t\t\t\tgetClassName() + \". It seems that the loader has been expired from a weak reference somehow. \" +",
                "+\t\t\t\t\t\t\"Please file an issue at cglib's issue tracker.\");",
                "+\t\t\t}",
                "+\t\t\tsynchronized (classLoader) {",
                "+\t\t\t\tString name = generateClassName(data.getUniqueNamePredicate());",
                "+\t\t\t\tdata.reserveName(name);",
                "+\t\t\t\tthis.setClassName(name);",
                "+\t\t\t}",
                "+\t\t\tif (attemptLoad) {",
                "+\t\t\t\ttry {",
                "+\t\t\t\t\tgen = classLoader.loadClass(getClassName());",
                "+\t\t\t\t\treturn gen;",
                "+\t\t\t\t}",
                "+\t\t\t\tcatch (ClassNotFoundException e) {",
                "+\t\t\t\t\t// ignore",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tbyte[] b = strategy.generate(this);",
                "+\t\t\tString className = ClassNameReader.getClassName(new ClassReader(b));",
                "+\t\t\tProtectionDomain protectionDomain = getProtectionDomain();",
                "+\t\t\tsynchronized (classLoader) { // just in case",
                "+\t\t\t\t// SPRING PATCH BEGIN",
                "+\t\t\t\tgen = ReflectUtils.defineClass(className, b, classLoader, protectionDomain, contextClass);",
                "+\t\t\t\t// SPRING PATCH END",
                "+\t\t\t}",
                "+\t\t\treturn gen;",
                "+\t\t}",
                "+\t\tcatch (RuntimeException | Error ex) {",
                "+\t\t\tthrow ex;",
                "+\t\t}",
                "+\t\tcatch (Exception ex) {",
                "+\t\t\tthrow new CodeGenerationException(ex);",
                "+\t\t}",
                "+\t\tfinally {",
                "+\t\t\tCURRENT.set(save);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tabstract protected Object firstInstance(Class type) throws Exception;",
                "+",
                "+\tabstract protected Object nextInstance(Object instance) throws Exception;",
                "+",
                "+}",
                "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/KeyFactory.java b/spring-core/src/main/java/org/springframework/cglib/core/KeyFactory.java",
                "new file mode 100644",
                "index 0000000000..3adee79367",
                "--- /dev/null",
                "+++ b/spring-core/src/main/java/org/springframework/cglib/core/KeyFactory.java",
                "@@ -0,0 +1,363 @@",
                "+/*",
                "+ * Copyright 2003,2004 The Apache Software Foundation",
                "+ *",
                "+ *  Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.springframework.cglib.core;",
                "+",
                "+import java.lang.reflect.Method;",
                "+import java.security.ProtectionDomain;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+",
                "+import org.springframework.asm.ClassVisitor;",
                "+import org.springframework.asm.Label;",
                "+import org.springframework.asm.Type;",
                "+import org.springframework.cglib.core.internal.CustomizerRegistry;",
                "+",
                "+/**",
                "+ * Generates classes to handle multi-valued keys, for use in things such as Maps and Sets.",
                "+ * Code for <code>equals</code> and <code>hashCode</code> methods follow the",
                "+ * the rules laid out in <i>Effective Java</i> by Joshua Bloch.",
                "+ * <p>",
                "+ * To generate a <code>KeyFactory</code>, you need to supply an interface which",
                "+ * describes the structure of the key. The interface should have a",
                "+ * single method named <code>newInstance</code>, which returns an",
                "+ * <code>Object</code>. The arguments array can be",
                "+ * <i>anything</i>--Objects, primitive values, or single or",
                "+ * multi-dimension arrays of either. For example:",
                "+ * <p><pre>",
                "+ *     private interface IntStringKey {",
                "+ *         public Object newInstance(int i, String s);",
                "+ *     }",
                "+ * </pre><p>",
                "+ * Once you have made a <code>KeyFactory</code>, you generate a new key by calling",
                "+ * the <code>newInstance</code> method defined by your interface.",
                "+ * <p><pre>",
                "+ *     IntStringKey factory = (IntStringKey)KeyFactory.create(IntStringKey.class);",
                "+ *     Object key1 = factory.newInstance(4, \"Hello\");",
                "+ *     Object key2 = factory.newInstance(4, \"World\");",
                "+ * </pre><p>",
                "+ * <b>Note:</b>",
                "+ * <code>hashCode</code> equality between two keys <code>key1</code> and <code>key2</code> is only guaranteed if",
                "+ * <code>key1.equals(key2)</code> <i>and</i> the keys were produced by the same factory.",
                "+ * @version $Id: KeyFactory.java,v 1.26 2006/03/05 02:43:19 herbyderby Exp $",
                "+ */",
                "+@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
                "+abstract public class KeyFactory {",
                "+",
                "+\tprivate static final Signature GET_NAME =",
                "+\t\t\tTypeUtils.parseSignature(\"String getName()\");",
                "+",
                "+\tprivate static final Signature GET_CLASS =",
                "+\t\t\tTypeUtils.parseSignature(\"Class getClass()\");",
                "+",
                "+\tprivate static final Signature HASH_CODE =",
                "+\t\t\tTypeUtils.parseSignature(\"int hashCode()\");",
                "+",
                "+\tprivate static final Signature EQUALS =",
                "+\t\t\tTypeUtils.parseSignature(\"boolean equals(Object)\");",
                "+",
                "+\tprivate static final Signature TO_STRING =",
                "+\t\t\tTypeUtils.parseSignature(\"String toString()\");",
                "+",
                "+\tprivate static final Signature APPEND_STRING =",
                "+\t\t\tTypeUtils.parseSignature(\"StringBuffer append(String)\");",
                "+",
                "+\tprivate static final Type KEY_FACTORY =",
                "+\t\t\tTypeUtils.parseType(\"org.springframework.cglib.core.KeyFactory\");",
                "+",
                "+\tprivate static final Signature GET_SORT =",
                "+\t\t\tTypeUtils.parseSignature(\"int getSort()\");",
                "+",
                "+\t//generated numbers:",
                "+\tprivate final static int PRIMES[] = {",
                "+\t\t\t11, 73, 179, 331,",
                "+\t\t\t521, 787, 1213, 1823,",
                "+\t\t\t2609, 3691, 5189, 7247,",
                "+\t\t\t10037, 13931, 19289, 26627,",
                "+\t\t\t36683, 50441, 69403, 95401,",
                "+\t\t\t131129, 180179, 247501, 340057,",
                "+\t\t\t467063, 641371, 880603, 1209107,",
                "+\t\t\t1660097, 2279161, 3129011, 4295723,",
                "+\t\t\t5897291, 8095873, 11114263, 15257791,",
                "+\t\t\t20946017, 28754629, 39474179, 54189869,",
                "+\t\t\t74391461, 102123817, 140194277, 192456917,",
                "+\t\t\t264202273, 362693231, 497900099, 683510293,",
                "+\t\t\t938313161, 1288102441, 1768288259};",
                "+",
                "+",
                "+\tpublic static final Customizer CLASS_BY_NAME = new Customizer() {",
                "+\t\tpublic void customize(CodeEmitter e, Type type) {",
                "+\t\t\tif (type.equals(Constants.TYPE_CLASS)) {",
                "+\t\t\t\te.invoke_virtual(Constants.TYPE_CLASS, GET_NAME);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t};",
                "+",
                "+\tpublic static final FieldTypeCustomizer STORE_CLASS_AS_STRING = new FieldTypeCustomizer() {",
                "+\t\tpublic void customize(CodeEmitter e, int index, Type type) {",
                "+\t\t\tif (type.equals(Constants.TYPE_CLASS)) {",
                "+\t\t\t\te.invoke_virtual(Constants.TYPE_CLASS, GET_NAME);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tpublic Type getOutType(int index, Type type) {",
                "+\t\t\tif (type.equals(Constants.TYPE_CLASS)) {",
                "+\t\t\t\treturn Constants.TYPE_STRING;",
                "+\t\t\t}",
                "+\t\t\treturn type;",
                "+\t\t}",
                "+\t};",
                "+",
                "+\t/**",
                "+\t * {@link Type#hashCode()} is very expensive as it traverses full descriptor to calculate hash code.",
                "+\t * This customizer uses {@link Type#getSort()} as a hash code.",
                "+\t */",
                "+\tpublic static final HashCodeCustomizer HASH_ASM_TYPE = new HashCodeCustomizer() {",
                "+\t\tpublic boolean customize(CodeEmitter e, Type type) {",
                "+\t\t\tif (Constants.TYPE_TYPE.equals(type)) {",
                "+\t\t\t\te.invoke_virtual(type, GET_SORT);",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+\t};",
                "+",
                "+\t/**",
                "+\t * @deprecated this customizer might result in unexpected class leak since key object still holds a strong reference to the Object and class.",
                "+\t * It is recommended to have pre-processing method that would strip Objects and represent Classes as Strings",
                "+\t */",
                "+\t@Deprecated",
                "+\tpublic static final Customizer OBJECT_BY_CLASS = new Customizer() {",
                "+\t\tpublic void customize(CodeEmitter e, Type type) {",
                "+\t\t\te.invoke_virtual(Constants.TYPE_OBJECT, GET_CLASS);",
                "+\t\t}",
                "+\t};",
                "+",
                "+\tprotected KeyFactory() {",
                "+\t}",
                "+",
                "+\tpublic static KeyFactory create(Class keyInterface) {",
                "+\t\treturn create(keyInterface, null);",
                "+\t}",
                "+",
                "+\tpublic static KeyFactory create(Class keyInterface, Customizer customizer) {",
                "+\t\treturn create(keyInterface.getClassLoader(), keyInterface, customizer);",
                "+\t}",
                "+",
                "+\tpublic static KeyFactory create(Class keyInterface, KeyFactoryCustomizer first, List<KeyFactoryCustomizer> next) {",
                "+\t\treturn create(keyInterface.getClassLoader(), keyInterface, first, next);",
                "+\t}",
                "+",
                "+\tpublic static KeyFactory create(ClassLoader loader, Class keyInterface, Customizer customizer) {",
                "+\t\treturn create(loader, keyInterface, customizer, Collections.<KeyFactoryCustomizer>emptyList());",
                "+\t}",
                "+",
                "+\tpublic static KeyFactory create(ClassLoader loader, Class keyInterface, KeyFactoryCustomizer customizer,",
                "+\t\t\tList<KeyFactoryCustomizer> next) {",
                "+\t\tGenerator gen = new Generator();",
                "+\t\tgen.setInterface(keyInterface);",
                "+\t\t// SPRING PATCH BEGIN",
                "+\t\tgen.setContextClass(keyInterface);",
                "+\t\t// SPRING PATCH END",
                "+",
                "+\t\tif (customizer != null) {",
                "+\t\t\tgen.addCustomizer(customizer);",
                "+\t\t}",
                "+\t\tif (next != null && !next.isEmpty()) {",
                "+\t\t\tfor (KeyFactoryCustomizer keyFactoryCustomizer : next) {",
                "+\t\t\t\tgen.addCustomizer(keyFactoryCustomizer);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tgen.setClassLoader(loader);",
                "+\t\treturn gen.create();",
                "+\t}",
                "+",
                "+",
                "+\tpublic static class Generator extends AbstractClassGenerator {",
                "+",
                "+\t\tprivate static final Source SOURCE = new Source(KeyFactory.class.getName());",
                "+",
                "+\t\tprivate static final Class[] KNOWN_CUSTOMIZER_TYPES = new Class[]{Customizer.class, FieldTypeCustomizer.class};",
                "+",
                "+\t\tprivate Class keyInterface;",
                "+",
                "+\t\t// TODO: Make me final when deprecated methods are removed",
                "+\t\tprivate CustomizerRegistry customizers = new CustomizerRegistry(KNOWN_CUSTOMIZER_TYPES);",
                "+",
                "+\t\tprivate int constant;",
                "+",
                "+\t\tprivate int multiplier;",
                "+",
                "+\t\tpublic Generator() {",
                "+\t\t\tsuper(SOURCE);",
                "+\t\t}",
                "+",
                "+\t\tprotected ClassLoader getDefaultClassLoader() {",
                "+\t\t\treturn keyInterface.getClassLoader();",
                "+\t\t}",
                "+",
                "+\t\tprotected ProtectionDomain getProtectionDomain() {",
                "+\t\t\treturn ReflectUtils.getProtectionDomain(keyInterface);",
                "+\t\t}",
                "+",
                "+\t\t/**",
                "+\t\t * @deprecated Use {@link #addCustomizer(KeyFactoryCustomizer)} instead.",
                "+\t\t */",
                "+\t\t@Deprecated",
                "+\t\tpublic void setCustomizer(Customizer customizer) {",
                "+\t\t\tcustomizers = CustomizerRegistry.singleton(customizer);",
                "+\t\t}",
                "+",
                "+\t\tpublic void addCustomizer(KeyFactoryCustomizer customizer) {",
                "+\t\t\tcustomizers.add(customizer);",
                "+\t\t}",
                "+",
                "+\t\tpublic <T> List<T> getCustomizers(Class<T> klass) {",
                "+\t\t\treturn customizers.get(klass);",
                "+\t\t}",
                "+",
                "+\t\tpublic void setInterface(Class keyInterface) {",
                "+\t\t\tthis.keyInterface = keyInterface;",
                "+\t\t}",
                "+",
                "+\t\tpublic KeyFactory create() {",
                "+\t\t\tsetNamePrefix(keyInterface.getName());",
                "+\t\t\treturn (KeyFactory) super.create(keyInterface.getName());",
                "+\t\t}",
                "+",
                "+\t\tpublic void setHashConstant(int constant) {",
                "+\t\t\tthis.constant = constant;",
                "+\t\t}",
                "+",
                "+\t\tpublic void setHashMultiplier(int multiplier) {",
                "+\t\t\tthis.multiplier = multiplier;",
                "+\t\t}",
                "+",
                "+\t\tprotected Object firstInstance(Class type) {",
                "+\t\t\treturn ReflectUtils.newInstance(type);",
                "+\t\t}",
                "+",
                "+\t\tprotected Object nextInstance(Object instance) {",
                "+\t\t\treturn instance;",
                "+\t\t}",
                "+",
                "+\t\tpublic void generateClass(ClassVisitor v) {",
                "+\t\t\tClassEmitter ce = new ClassEmitter(v);",
                "+",
                "+\t\t\tMethod newInstance = ReflectUtils.findNewInstance(keyInterface);",
                "+\t\t\tif (!newInstance.getReturnType().equals(Object.class)) {",
                "+\t\t\t\tthrow new IllegalArgumentException(\"newInstance method must return Object\");",
                "+\t\t\t}",
                "+",
                "+\t\t\tType[] parameterTypes = TypeUtils.getTypes(newInstance.getParameterTypes());",
                "+\t\t\tce.begin_class(Constants.V1_2,",
                "+\t\t\t\t\tConstants.ACC_PUBLIC,",
                "+\t\t\t\t\tgetClassName(),",
                "+\t\t\t\t\tKEY_FACTORY,",
                "+\t\t\t\t\tnew Type[]{Type.getType(keyInterface)},",
                "+\t\t\t\t\tConstants.SOURCE_FILE);",
                "+\t\t\tEmitUtils.null_constructor(ce);",
                "+\t\t\tEmitUtils.factory_method(ce, ReflectUtils.getSignature(newInstance));",
                "+",
                "+\t\t\tint seed = 0;",
                "+\t\t\tCodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC,",
                "+\t\t\t\t\tTypeUtils.parseConstructor(parameterTypes),",
                "+\t\t\t\t\tnull);",
                "+\t\t\te.load_this();",
                "+\t\t\te.super_invoke_constructor();",
                "+\t\t\te.load_this();",
                "+\t\t\tList<FieldTypeCustomizer> fieldTypeCustomizers = getCustomizers(FieldTypeCustomizer.class);",
                "+\t\t\tfor (int i = 0; i < parameterTypes.length; i++) {",
                "+\t\t\t\tType parameterType = parameterTypes[i];",
                "+\t\t\t\tType fieldType = parameterType;",
                "+\t\t\t\tfor (FieldTypeCustomizer customizer : fieldTypeCustomizers) {",
                "+\t\t\t\t\tfieldType = customizer.getOutType(i, fieldType);",
                "+\t\t\t\t}",
                "+\t\t\t\tseed += fieldType.hashCode();",
                "+\t\t\t\tce.declare_field(Constants.ACC_PRIVATE | Constants.ACC_FINAL,",
                "+\t\t\t\t\t\tgetFieldName(i),",
                "+\t\t\t\t\t\tfieldType,",
                "+\t\t\t\t\t\tnull);",
                "+\t\t\t\te.dup();",
                "+\t\t\t\te.load_arg(i);",
                "+\t\t\t\tfor (FieldTypeCustomizer customizer : fieldTypeCustomizers) {",
                "+\t\t\t\t\tcustomizer.customize(e, i, parameterType);",
                "+\t\t\t\t}",
                "+\t\t\t\te.putfield(getFieldName(i));",
                "+\t\t\t}",
                "+\t\t\te.return_value();",
                "+\t\t\te.end_method();",
                "+",
                "+\t\t\t// hash code",
                "+\t\t\te = ce.begin_method(Constants.ACC_PUBLIC, HASH_CODE, null);",
                "+\t\t\tint hc = (constant != 0) ? constant : PRIMES[(Math.abs(seed) % PRIMES.length)];",
                "+\t\t\tint hm = (multiplier != 0) ? multiplier : PRIMES[(Math.abs(seed * 13) % PRIMES.length)];",
                "+\t\t\te.push(hc);",
                "+\t\t\tfor (int i = 0; i < parameterTypes.length; i++) {",
                "+\t\t\t\te.load_this();",
                "+\t\t\t\te.getfield(getFieldName(i));",
                "+\t\t\t\tEmitUtils.hash_code(e, parameterTypes[i], hm, customizers);",
                "+\t\t\t}",
                "+\t\t\te.return_value();",
                "+\t\t\te.end_method();",
                "+",
                "+\t\t\t// equals",
                "+\t\t\te = ce.begin_method(Constants.ACC_PUBLIC, EQUALS, null);",
                "+\t\t\tLabel fail = e.make_label();",
                "+\t\t\te.load_arg(0);",
                "+\t\t\te.instance_of_this();",
                "+\t\t\te.if_jump(CodeEmitter.EQ, fail);",
                "+\t\t\tfor (int i = 0; i < parameterTypes.length; i++) {",
                "+\t\t\t\te.load_this();",
                "+\t\t\t\te.getfield(getFieldName(i));",
                "+\t\t\t\te.load_arg(0);",
                "+\t\t\t\te.checkcast_this();",
                "+\t\t\t\te.getfield(getFieldName(i));",
                "+\t\t\t\tEmitUtils.not_equals(e, parameterTypes[i], fail, customizers);",
                "+\t\t\t}",
                "+\t\t\te.push(1);",
                "+\t\t\te.return_value();",
                "+\t\t\te.mark(fail);",
                "+\t\t\te.push(0);",
                "+\t\t\te.return_value();",
                "+\t\t\te.end_method();",
                "+",
                "+\t\t\t// toString",
                "+\t\t\te = ce.begin_method(Constants.ACC_PUBLIC, TO_STRING, null);",
                "+\t\t\te.new_instance(Constants.TYPE_STRING_BUFFER);",
                "+\t\t\te.dup();",
                "+\t\t\te.invoke_constructor(Constants.TYPE_STRING_BUFFER);",
                "+\t\t\tfor (int i = 0; i < parameterTypes.length; i++) {",
                "+\t\t\t\tif (i > 0) {",
                "+\t\t\t\t\te.push(\", \");",
                "+\t\t\t\t\te.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);",
                "+\t\t\t\t}",
                "+\t\t\t\te.load_this();",
                "+\t\t\t\te.getfield(getFieldName(i));",
                "+\t\t\t\tEmitUtils.append_string(e, parameterTypes[i], EmitUtils.DEFAULT_DELIMITERS, customizers);",
                "+\t\t\t}",
                "+\t\t\te.invoke_virtual(Constants.TYPE_STRING_BUFFER, TO_STRING);",
                "+\t\t\te.return_value();",
                "+\t\t\te.end_method();",
                "+",
                "+\t\t\tce.end_class();",
                "+\t\t}",
                "+",
                "+\t\tprivate String getFieldName(int arg) {",
                "+\t\t\treturn \"FIELD_\" + arg;",
                "+\t\t}",
                "+\t}",
                "+",
                "+}",
                "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java",
                "new file mode 100644",
                "index 0000000000..89256606e8",
                "--- /dev/null",
                "+++ b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java",
                "@@ -0,0 +1,617 @@",
                "+/*",
                "+ * Copyright 2003,2004 The Apache Software Foundation",
                "+ *",
                "+ *  Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.springframework.cglib.core;",
                "+",
                "+import java.beans.BeanInfo;",
                "+import java.beans.IntrospectionException;",
                "+import java.beans.Introspector;",
                "+import java.beans.PropertyDescriptor;",
                "+import java.lang.invoke.MethodHandles;",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Member;",
                "+import java.lang.reflect.Method;",
                "+import java.lang.reflect.Modifier;",
                "+import java.security.AccessController;",
                "+import java.security.PrivilegedAction;",
                "+import java.security.PrivilegedExceptionAction;",
                "+import java.security.ProtectionDomain;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.asm.Attribute;",
                "+import org.springframework.asm.Type;",
                "+",
                "+/**",
                "+ * @version $Id: ReflectUtils.java,v 1.30 2009/01/11 19:47:49 herbyderby Exp $",
                "+ */",
                "+@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
                "+public class ReflectUtils {",
                "+",
                "+\tprivate ReflectUtils() {",
                "+\t}",
                "+",
                "+\tprivate static final Map primitives = new HashMap(8);",
                "+",
                "+\tprivate static final Map transforms = new HashMap(8);",
                "+",
                "+\tprivate static final ClassLoader defaultLoader = ReflectUtils.class.getClassLoader();",
                "+",
                "+\t// SPRING PATCH BEGIN",
                "+\tprivate static final Method privateLookupInMethod;",
                "+",
                "+\tprivate static final Method lookupDefineClassMethod;",
                "+",
                "+\tprivate static final Method classLoaderDefineClassMethod;",
                "+",
                "+\tprivate static final ProtectionDomain PROTECTION_DOMAIN;",
                "+",
                "+\tprivate static final Throwable THROWABLE;",
                "+",
                "+\tprivate static final List<Method> OBJECT_METHODS = new ArrayList<Method>();",
                "+",
                "+\tstatic {",
                "+\t\tMethod privateLookupIn;",
                "+\t\tMethod lookupDefineClass;",
                "+\t\tMethod classLoaderDefineClass;",
                "+\t\tProtectionDomain protectionDomain;",
                "+\t\tThrowable throwable = null;",
                "+\t\ttry {",
                "+\t\t\tprivateLookupIn = (Method) AccessController.doPrivileged(new PrivilegedExceptionAction() {",
                "+\t\t\t\tpublic Object run() throws Exception {",
                "+\t\t\t\t\ttry {",
                "+\t\t\t\t\t\treturn MethodHandles.class.getMethod(\"privateLookupIn\", Class.class, MethodHandles.Lookup.class);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\t\t\t\treturn null;",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+\t\t\tlookupDefineClass = (Method) AccessController.doPrivileged(new PrivilegedExceptionAction() {",
                "+\t\t\t\tpublic Object run() throws Exception {",
                "+\t\t\t\t\ttry {",
                "+\t\t\t\t\t\treturn MethodHandles.Lookup.class.getMethod(\"defineClass\", byte[].class);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\t\t\t\treturn null;",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+\t\t\tclassLoaderDefineClass = (Method) AccessController.doPrivileged(new PrivilegedExceptionAction() {",
                "+\t\t\t\tpublic Object run() throws Exception {",
                "+\t\t\t\t\treturn ClassLoader.class.getDeclaredMethod(\"defineClass\",",
                "+\t\t\t\t\t\t\tString.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class);",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+\t\t\tprotectionDomain = getProtectionDomain(ReflectUtils.class);",
                "+\t\t\tAccessController.doPrivileged(new PrivilegedExceptionAction() {",
                "+\t\t\t\tpublic Object run() throws Exception {",
                "+\t\t\t\t\tMethod[] methods = Object.class.getDeclaredMethods();",
                "+\t\t\t\t\tfor (Method method : methods) {",
                "+\t\t\t\t\t\tif (\"finalize\".equals(method.getName())",
                "+\t\t\t\t\t\t\t\t|| (method.getModifiers() & (Modifier.FINAL | Modifier.STATIC)) > 0) {",
                "+\t\t\t\t\t\t\tcontinue;",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t\tOBJECT_METHODS.add(method);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\treturn null;",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+\t\t}",
                "+\t\tcatch (Throwable t) {",
                "+\t\t\tprivateLookupIn = null;",
                "+\t\t\tlookupDefineClass = null;",
                "+\t\t\tclassLoaderDefineClass = null;",
                "+\t\t\tprotectionDomain = null;",
                "+\t\t\tthrowable = t;",
                "+\t\t}",
                "+\t\tprivateLookupInMethod = privateLookupIn;",
                "+\t\tlookupDefineClassMethod = lookupDefineClass;",
                "+\t\tclassLoaderDefineClassMethod = classLoaderDefineClass;",
                "+\t\tPROTECTION_DOMAIN = protectionDomain;",
                "+\t\tTHROWABLE = throwable;",
                "+\t}",
                "+\t// SPRING PATCH END",
                "+",
                "+\tprivate static final String[] CGLIB_PACKAGES = {",
                "+\t\t\t\"java.lang\",",
                "+\t};",
                "+",
                "+\tstatic {",
                "+\t\tprimitives.put(\"byte\", Byte.TYPE);",
                "+\t\tprimitives.put(\"char\", Character.TYPE);",
                "+\t\tprimitives.put(\"double\", Double.TYPE);",
                "+\t\tprimitives.put(\"float\", Float.TYPE);",
                "+\t\tprimitives.put(\"int\", Integer.TYPE);",
                "+\t\tprimitives.put(\"long\", Long.TYPE);",
                "+\t\tprimitives.put(\"short\", Short.TYPE);",
                "+\t\tprimitives.put(\"boolean\", Boolean.TYPE);",
                "+",
                "+\t\ttransforms.put(\"byte\", \"B\");",
                "+\t\ttransforms.put(\"char\", \"C\");",
                "+\t\ttransforms.put(\"double\", \"D\");",
                "+\t\ttransforms.put(\"float\", \"F\");",
                "+\t\ttransforms.put(\"int\", \"I\");",
                "+\t\ttransforms.put(\"long\", \"J\");",
                "+\t\ttransforms.put(\"short\", \"S\");",
                "+\t\ttransforms.put(\"boolean\", \"Z\");",
                "+\t}",
                "+",
                "+\tpublic static ProtectionDomain getProtectionDomain(final Class source) {",
                "+\t\tif (source == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\treturn (ProtectionDomain) AccessController.doPrivileged(new PrivilegedAction() {",
                "+\t\t\tpublic Object run() {",
                "+\t\t\t\treturn source.getProtectionDomain();",
                "+\t\t\t}",
                "+\t\t});",
                "+\t}",
                "+",
                "+\tpublic static Type[] getExceptionTypes(Member member) {",
                "+\t\tif (member instanceof Method) {",
                "+\t\t\treturn TypeUtils.getTypes(((Method) member).getExceptionTypes());",
                "+\t\t}",
                "+\t\telse if (member instanceof Constructor) {",
                "+\t\t\treturn TypeUtils.getTypes(((Constructor) member).getExceptionTypes());",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\tthrow new IllegalArgumentException(\"Cannot get exception types of a field\");",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic static Signature getSignature(Member member) {",
                "+\t\tif (member instanceof Method) {",
                "+\t\t\treturn new Signature(member.getName(), Type.getMethodDescriptor((Method) member));",
                "+\t\t}",
                "+\t\telse if (member instanceof Constructor) {",
                "+\t\t\tType[] types = TypeUtils.getTypes(((Constructor) member).getParameterTypes());",
                "+\t\t\treturn new Signature(Constants.CONSTRUCTOR_NAME,",
                "+\t\t\t\t\tType.getMethodDescriptor(Type.VOID_TYPE, types));",
                "+",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\tthrow new IllegalArgumentException(\"Cannot get signature of a field\");",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic static Constructor findConstructor(String desc) {",
                "+\t\treturn findConstructor(desc, defaultLoader);",
                "+\t}",
                "+",
                "+\tpublic static Constructor findConstructor(String desc, ClassLoader loader) {",
                "+\t\ttry {",
                "+\t\t\tint lparen = desc.indexOf('(');",
                "+\t\t\tString className = desc.substring(0, lparen).trim();",
                "+\t\t\treturn getClass(className, loader).getConstructor(parseTypes(desc, loader));",
                "+\t\t}",
                "+\t\tcatch (ClassNotFoundException | NoSuchMethodException ex) {",
                "+\t\t\tthrow new CodeGenerationException(ex);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic static Method findMethod(String desc) {",
                "+\t\treturn findMethod(desc, defaultLoader);",
                "+\t}",
                "+",
                "+\tpublic static Method findMethod(String desc, ClassLoader loader) {",
                "+\t\ttry {",
                "+\t\t\tint lparen = desc.indexOf('(');",
                "+\t\t\tint dot = desc.lastIndexOf('.', lparen);",
                "+\t\t\tString className = desc.substring(0, dot).trim();",
                "+\t\t\tString methodName = desc.substring(dot + 1, lparen).trim();",
                "+\t\t\treturn getClass(className, loader).getDeclaredMethod(methodName, parseTypes(desc, loader));",
                "+\t\t}",
                "+\t\tcatch (ClassNotFoundException | NoSuchMethodException ex) {",
                "+\t\t\tthrow new CodeGenerationException(ex);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate static Class[] parseTypes(String desc, ClassLoader loader) throws ClassNotFoundException {",
                "+\t\tint lparen = desc.indexOf('(');",
                "+\t\tint rparen = desc.indexOf(')', lparen);",
                "+\t\tList params = new ArrayList();",
                "+\t\tint start = lparen + 1;",
                "+\t\tfor (; ; ) {",
                "+\t\t\tint comma = desc.indexOf(',', start);",
                "+\t\t\tif (comma < 0) {",
                "+\t\t\t\tbreak;",
                "+\t\t\t}",
                "+\t\t\tparams.add(desc.substring(start, comma).trim());",
                "+\t\t\tstart = comma + 1;",
                "+\t\t}",
                "+\t\tif (start < rparen) {",
                "+\t\t\tparams.add(desc.substring(start, rparen).trim());",
                "+\t\t}",
                "+\t\tClass[] types = new Class[params.size()];",
                "+\t\tfor (int i = 0; i < types.length; i++) {",
                "+\t\t\ttypes[i] = getClass((String) params.get(i), loader);",
                "+\t\t}",
                "+\t\treturn types;",
                "+\t}",
                "+",
                "+\tprivate static Class getClass(String className, ClassLoader loader) throws ClassNotFoundException {",
                "+\t\treturn getClass(className, loader, CGLIB_PACKAGES);",
                "+\t}",
                "+",
                "+\tprivate static Class getClass(String className, ClassLoader loader, String[] packages) throws ClassNotFoundException {",
                "+\t\tString save = className;",
                "+\t\tint dimensions = 0;",
                "+\t\tint index = 0;",
                "+\t\twhile ((index = className.indexOf(\"[]\", index) + 1) > 0) {",
                "+\t\t\tdimensions++;",
                "+\t\t}",
                "+\t\tStringBuffer brackets = new StringBuffer(className.length() - dimensions);",
                "+\t\tfor (int i = 0; i < dimensions; i++) {",
                "+\t\t\tbrackets.append('[');",
                "+\t\t}",
                "+\t\tclassName = className.substring(0, className.length() - 2 * dimensions);",
                "+",
                "+\t\tString prefix = (dimensions > 0) ? brackets + \"L\" : \"\";",
                "+\t\tString suffix = (dimensions > 0) ? \";\" : \"\";",
                "+\t\ttry {",
                "+\t\t\treturn Class.forName(prefix + className + suffix, false, loader);",
                "+\t\t}",
                "+\t\tcatch (ClassNotFoundException ignore) {",
                "+\t\t}",
                "+\t\tfor (int i = 0; i < packages.length; i++) {",
                "+\t\t\ttry {",
                "+\t\t\t\treturn Class.forName(prefix + packages[i] + '.' + className + suffix, false, loader);",
                "+\t\t\t}",
                "+\t\t\tcatch (ClassNotFoundException ignore) {",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif (dimensions == 0) {",
                "+\t\t\tClass c = (Class) primitives.get(className);",
                "+\t\t\tif (c != null) {",
                "+\t\t\t\treturn c;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\tString transform = (String) transforms.get(className);",
                "+\t\t\tif (transform != null) {",
                "+\t\t\t\ttry {",
                "+\t\t\t\t\treturn Class.forName(brackets + transform, false, loader);",
                "+\t\t\t\t}",
                "+\t\t\t\tcatch (ClassNotFoundException ignore) {",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tthrow new ClassNotFoundException(save);",
                "+\t}",
                "+",
                "+\tpublic static Object newInstance(Class type) {",
                "+\t\treturn newInstance(type, Constants.EMPTY_CLASS_ARRAY, null);",
                "+\t}",
                "+",
                "+\tpublic static Object newInstance(Class type, Class[] parameterTypes, Object[] args) {",
                "+\t\treturn newInstance(getConstructor(type, parameterTypes), args);",
                "+\t}",
                "+",
                "+\t@SuppressWarnings(\"deprecation\")  // on JDK 9",
                "+\tpublic static Object newInstance(final Constructor cstruct, final Object[] args) {",
                "+\t\tboolean flag = cstruct.isAccessible();",
                "+\t\ttry {",
                "+\t\t\tif (!flag) {",
                "+\t\t\t\tcstruct.setAccessible(true);",
                "+\t\t\t}",
                "+\t\t\tObject result = cstruct.newInstance(args);",
                "+\t\t\treturn result;",
                "+\t\t}",
                "+\t\tcatch (InstantiationException e) {",
                "+\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t}",
                "+\t\tcatch (IllegalAccessException e) {",
                "+\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t}",
                "+\t\tcatch (InvocationTargetException e) {",
                "+\t\t\tthrow new CodeGenerationException(e.getTargetException());",
                "+\t\t}",
                "+\t\tfinally {",
                "+\t\t\tif (!flag) {",
                "+\t\t\t\tcstruct.setAccessible(flag);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic static Constructor getConstructor(Class type, Class[] parameterTypes) {",
                "+\t\ttry {",
                "+\t\t\tConstructor constructor = type.getDeclaredConstructor(parameterTypes);",
                "+\t\t\tconstructor.setAccessible(true);",
                "+\t\t\treturn constructor;",
                "+\t\t}",
                "+\t\tcatch (NoSuchMethodException e) {",
                "+\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic static String[] getNames(Class[] classes) {",
                "+\t\tif (classes == null)",
                "+\t\t\treturn null;",
                "+\t\tString[] names = new String[classes.length];",
                "+\t\tfor (int i = 0; i < names.length; i++) {",
                "+\t\t\tnames[i] = classes[i].getName();",
                "+\t\t}",
                "+\t\treturn names;",
                "+\t}",
                "+",
                "+\tpublic static Class[] getClasses(Object[] objects) {",
                "+\t\tClass[] classes = new Class[objects.length];",
                "+\t\tfor (int i = 0; i < objects.length; i++) {",
                "+\t\t\tclasses[i] = objects[i].getClass();",
                "+\t\t}",
                "+\t\treturn classes;",
                "+\t}",
                "+",
                "+\tpublic static Method findNewInstance(Class iface) {",
                "+\t\tMethod m = findInterfaceMethod(iface);",
                "+\t\tif (!m.getName().equals(\"newInstance\")) {",
                "+\t\t\tthrow new IllegalArgumentException(iface + \" missing newInstance method\");",
                "+\t\t}",
                "+\t\treturn m;",
                "+\t}",
                "+",
                "+\tpublic static Method[] getPropertyMethods(PropertyDescriptor[] properties, boolean read, boolean write) {",
                "+\t\tSet methods = new HashSet();",
                "+\t\tfor (int i = 0; i < properties.length; i++) {",
                "+\t\t\tPropertyDescriptor pd = properties[i];",
                "+\t\t\tif (read) {",
                "+\t\t\t\tmethods.add(pd.getReadMethod());",
                "+\t\t\t}",
                "+\t\t\tif (write) {",
                "+\t\t\t\tmethods.add(pd.getWriteMethod());",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tmethods.remove(null);",
                "+\t\treturn (Method[]) methods.toArray(new Method[methods.size()]);",
                "+\t}",
                "+",
                "+\tpublic static PropertyDescriptor[] getBeanProperties(Class type) {",
                "+\t\treturn getPropertiesHelper(type, true, true);",
                "+\t}",
                "+",
                "+\tpublic static PropertyDescriptor[] getBeanGetters(Class type) {",
                "+\t\treturn getPropertiesHelper(type, true, false);",
                "+\t}",
                "+",
                "+\tpublic static PropertyDescriptor[] getBeanSetters(Class type) {",
                "+\t\treturn getPropertiesHelper(type, false, true);",
                "+\t}",
                "+",
                "+\tprivate static PropertyDescriptor[] getPropertiesHelper(Class type, boolean read, boolean write) {",
                "+\t\ttry {",
                "+\t\t\tBeanInfo info = Introspector.getBeanInfo(type, Object.class);",
                "+\t\t\tPropertyDescriptor[] all = info.getPropertyDescriptors();",
                "+\t\t\tif (read && write) {",
                "+\t\t\t\treturn all;",
                "+\t\t\t}",
                "+\t\t\tList properties = new ArrayList(all.length);",
                "+\t\t\tfor (int i = 0; i < all.length; i++) {",
                "+\t\t\t\tPropertyDescriptor pd = all[i];",
                "+\t\t\t\tif ((read && pd.getReadMethod() != null) ||",
                "+\t\t\t\t\t\t(write && pd.getWriteMethod() != null)) {",
                "+\t\t\t\t\tproperties.add(pd);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\treturn (PropertyDescriptor[]) properties.toArray(new PropertyDescriptor[properties.size()]);",
                "+\t\t}",
                "+\t\tcatch (IntrospectionException e) {",
                "+\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic static Method findDeclaredMethod(final Class type,",
                "+\t\t\tfinal String methodName, final Class[] parameterTypes)",
                "+\t\t\tthrows NoSuchMethodException {",
                "+",
                "+\t\tClass cl = type;",
                "+\t\twhile (cl != null) {",
                "+\t\t\ttry {",
                "+\t\t\t\treturn cl.getDeclaredMethod(methodName, parameterTypes);",
                "+\t\t\t}",
                "+\t\t\tcatch (NoSuchMethodException e) {",
                "+\t\t\t\tcl = cl.getSuperclass();",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tthrow new NoSuchMethodException(methodName);",
                "+\t}",
                "+",
                "+\tpublic static List addAllMethods(final Class type, final List list) {",
                "+\t\tif (type == Object.class) {",
                "+\t\t\tlist.addAll(OBJECT_METHODS);",
                "+\t\t}",
                "+\t\telse",
                "+\t\t\tlist.addAll(java.util.Arrays.asList(type.getDeclaredMethods()));",
                "+",
                "+\t\tClass superclass = type.getSuperclass();",
                "+\t\tif (superclass != null) {",
                "+\t\t\taddAllMethods(superclass, list);",
                "+\t\t}",
                "+\t\tClass[] interfaces = type.getInterfaces();",
                "+\t\tfor (int i = 0; i < interfaces.length; i++) {",
                "+\t\t\taddAllMethods(interfaces[i], list);",
                "+\t\t}",
                "+",
                "+\t\treturn list;",
                "+\t}",
                "+",
                "+\tpublic static List addAllInterfaces(Class type, List list) {",
                "+\t\tClass superclass = type.getSuperclass();",
                "+\t\tif (superclass != null) {",
                "+\t\t\tlist.addAll(Arrays.asList(type.getInterfaces()));",
                "+\t\t\taddAllInterfaces(superclass, list);",
                "+\t\t}",
                "+\t\treturn list;",
                "+\t}",
                "+",
                "+",
                "+\tpublic static Method findInterfaceMethod(Class iface) {",
                "+\t\tif (!iface.isInterface()) {",
                "+\t\t\tthrow new IllegalArgumentException(iface + \" is not an interface\");",
                "+\t\t}",
                "+\t\tMethod[] methods = iface.getDeclaredMethods();",
                "+\t\tif (methods.length != 1) {",
                "+\t\t\tthrow new IllegalArgumentException(\"expecting exactly 1 method in \" + iface);",
                "+\t\t}",
                "+\t\treturn methods[0];",
                "+\t}",
                "+",
                "+\t// SPRING PATCH BEGIN",
                "+\tpublic static Class defineClass(String className, byte[] b, ClassLoader loader) throws Exception {",
                "+\t\treturn defineClass(className, b, loader, null, null);",
                "+\t}",
                "+",
                "+\tpublic static Class defineClass(String className, byte[] b, ClassLoader loader,",
                "+\t\t\tProtectionDomain protectionDomain) throws Exception {",
                "+",
                "+\t\treturn defineClass(className, b, loader, protectionDomain, null);",
                "+\t}",
                "+",
                "+\t@SuppressWarnings(\"deprecation\")  // on JDK 9",
                "+\tpublic static Class defineClass(String className, byte[] b, ClassLoader loader,",
                "+\t\t\tProtectionDomain protectionDomain, Class<?> contextClass) throws Exception {",
                "+",
                "+\t\tClass c = null;",
                "+\t\tif (contextClass != null && privateLookupInMethod != null && lookupDefineClassMethod != null) {",
                "+\t\t\ttry {",
                "+\t\t\t\tMethodHandles.Lookup lookup =",
                "+\t\t\t\t\t\t(MethodHandles.Lookup) privateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());",
                "+\t\t\t\tc = (Class) lookupDefineClassMethod.invoke(lookup, b);",
                "+\t\t\t}",
                "+\t\t\tcatch (InvocationTargetException ex) {",
                "+\t\t\t\tif (!(ex.getTargetException() instanceof IllegalArgumentException)) {",
                "+\t\t\t\t\tthrow new CodeGenerationException(ex.getTargetException());",
                "+\t\t\t\t}",
                "+\t\t\t\t// in case of IllegalArgumentException: fall through to defineClass",
                "+\t\t\t}",
                "+\t\t\tcatch (Throwable ex) {",
                "+\t\t\t\tthrow new CodeGenerationException(ex);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif (protectionDomain == null) {",
                "+\t\t\tprotectionDomain = PROTECTION_DOMAIN;",
                "+\t\t}",
                "+\t\tif (c == null) {",
                "+\t\t\tif (classLoaderDefineClassMethod != null) {",
                "+\t\t\t\tObject[] args = new Object[]{className, b, 0, b.length, protectionDomain};",
                "+\t\t\t\ttry {",
                "+\t\t\t\t\tif (!classLoaderDefineClassMethod.isAccessible()) {",
                "+\t\t\t\t\t\tclassLoaderDefineClassMethod.setAccessible(true);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tc = (Class) classLoaderDefineClassMethod.invoke(loader, args);",
                "+\t\t\t\t}",
                "+\t\t\t\tcatch (InvocationTargetException ex) {",
                "+\t\t\t\t\tthrow new CodeGenerationException(ex.getTargetException());",
                "+\t\t\t\t}",
                "+\t\t\t\tcatch (Throwable ex) {",
                "+\t\t\t\t\tthrow new CodeGenerationException(ex);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\telse {",
                "+\t\t\t\tthrow new CodeGenerationException(THROWABLE);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\t// Force static initializers to run.",
                "+\t\tClass.forName(className, true, loader);",
                "+\t\treturn c;",
                "+\t}",
                "+\t// SPRING PATCH END",
                "+",
                "+\tpublic static int findPackageProtected(Class[] classes) {",
                "+\t\tfor (int i = 0; i < classes.length; i++) {",
                "+\t\t\tif (!Modifier.isPublic(classes[i].getModifiers())) {",
                "+\t\t\t\treturn i;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\treturn 0;",
                "+\t}",
                "+",
                "+\tpublic static MethodInfo getMethodInfo(final Member member, final int modifiers) {",
                "+\t\tfinal Signature sig = getSignature(member);",
                "+\t\treturn new MethodInfo() {",
                "+\t\t\tprivate ClassInfo ci;",
                "+",
                "+\t\t\tpublic ClassInfo getClassInfo() {",
                "+\t\t\t\tif (ci == null)",
                "+\t\t\t\t\tci = ReflectUtils.getClassInfo(member.getDeclaringClass());",
                "+\t\t\t\treturn ci;",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic int getModifiers() {",
                "+\t\t\t\treturn modifiers;",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic Signature getSignature() {",
                "+\t\t\t\treturn sig;",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic Type[] getExceptionTypes() {",
                "+\t\t\t\treturn ReflectUtils.getExceptionTypes(member);",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic Attribute getAttribute() {",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                "+\t\t};",
                "+\t}",
                "+",
                "+\tpublic static MethodInfo getMethodInfo(Member member) {",
                "+\t\treturn getMethodInfo(member, member.getModifiers());",
                "+\t}",
                "+",
                "+\tpublic static ClassInfo getClassInfo(final Class clazz) {",
                "+\t\tfinal Type type = Type.getType(clazz);",
                "+\t\tfinal Type sc = (clazz.getSuperclass() == null) ? null : Type.getType(clazz.getSuperclass());",
                "+\t\treturn new ClassInfo() {",
                "+\t\t\tpublic Type getType() {",
                "+\t\t\t\treturn type;",
                "+\t\t\t}",
                "+\t\t\tpublic Type getSuperType() {",
                "+\t\t\t\treturn sc;",
                "+\t\t\t}",
                "+\t\t\tpublic Type[] getInterfaces() {",
                "+\t\t\t\treturn TypeUtils.getTypes(clazz.getInterfaces());",
                "+\t\t\t}",
                "+\t\t\tpublic int getModifiers() {",
                "+\t\t\t\treturn clazz.getModifiers();",
                "+\t\t\t}",
                "+\t\t};",
                "+\t}",
                "+",
                "+\t// used by MethodInterceptorGenerated generated code",
                "+\tpublic static Method[] findMethods(String[] namesAndDescriptors, Method[] methods) {",
                "+\t\tMap map = new HashMap();",
                "+\t\tfor (int i = 0; i < methods.length; i++) {",
                "+\t\t\tMethod method = methods[i];",
                "+\t\t\tmap.put(method.getName() + Type.getMethodDescriptor(method), method);",
                "+\t\t}",
                "+\t\tMethod[] result = new Method[namesAndDescriptors.length / 2];",
                "+\t\tfor (int i = 0; i < result.length; i++) {",
                "+\t\t\tresult[i] = (Method) map.get(namesAndDescriptors[i * 2] + namesAndDescriptors[i * 2 + 1]);",
                "+\t\t\tif (result[i] == null) {",
                "+\t\t\t\t// TODO: error?",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\treturn result;",
                "+\t}",
                "+",
                "+}",
                "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/package-info.java b/spring-core/src/main/java/org/springframework/cglib/core/package-info.java",
                "new file mode 100644",
                "index 0000000000..a2ed94ff2e",
                "--- /dev/null",
                "+++ b/spring-core/src/main/java/org/springframework/cglib/core/package-info.java",
                "@@ -0,0 +1,10 @@",
                "+/**",
                "+ * Spring's repackaging of the",
                "+ * <a href=\"http://cglib.sourceforge.net\">CGLIB</a> core package",
                "+ * (for internal use only).",
                "+ *",
                "+ * <p>As this repackaging happens at the class file level, sources",
                "+ * and javadocs are not available here... except for a few files",
                "+ * that have been patched for Spring's purposes on JDK 9/10/11.",
                "+ */",
                "+package org.springframework.cglib.core;",
                "diff --git a/spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java b/spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java",
                "new file mode 100644",
                "index 0000000000..98fe3a99db",
                "--- /dev/null",
                "+++ b/spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java",
                "@@ -0,0 +1,1435 @@",
                "+/*",
                "+ * Copyright 2002,2003,2004 The Apache Software Foundation",
                "+ *",
                "+ *  Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.springframework.cglib.proxy;",
                "+",
                "+import java.lang.ref.WeakReference;",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.Field;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.security.ProtectionDomain;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.asm.ClassVisitor;",
                "+import org.springframework.asm.Label;",
                "+import org.springframework.asm.Type;",
                "+import org.springframework.cglib.core.AbstractClassGenerator;",
                "+import org.springframework.cglib.core.ClassEmitter;",
                "+import org.springframework.cglib.core.CodeEmitter;",
                "+import org.springframework.cglib.core.CodeGenerationException;",
                "+import org.springframework.cglib.core.CollectionUtils;",
                "+import org.springframework.cglib.core.Constants;",
                "+import org.springframework.cglib.core.DuplicatesPredicate;",
                "+import org.springframework.cglib.core.EmitUtils;",
                "+import org.springframework.cglib.core.KeyFactory;",
                "+import org.springframework.cglib.core.Local;",
                "+import org.springframework.cglib.core.MethodInfo;",
                "+import org.springframework.cglib.core.MethodInfoTransformer;",
                "+import org.springframework.cglib.core.MethodWrapper;",
                "+import org.springframework.cglib.core.ObjectSwitchCallback;",
                "+import org.springframework.cglib.core.ProcessSwitchCallback;",
                "+import org.springframework.cglib.core.ReflectUtils;",
                "+import org.springframework.cglib.core.RejectModifierPredicate;",
                "+import org.springframework.cglib.core.Signature;",
                "+import org.springframework.cglib.core.Transformer;",
                "+import org.springframework.cglib.core.TypeUtils;",
                "+import org.springframework.cglib.core.VisibilityPredicate;",
                "+import org.springframework.cglib.core.WeakCacheKey;",
                "+",
                "+/**",
                "+ * Generates dynamic subclasses to enable method interception. This",
                "+ * class started as a substitute for the standard Dynamic Proxy support",
                "+ * included with JDK 1.3, but one that allowed the proxies to extend a",
                "+ * concrete base class, in addition to implementing interfaces. The dynamically",
                "+ * generated subclasses override the non-final methods of the superclass and",
                "+ * have hooks which callback to user-defined interceptor",
                "+ * implementations.",
                "+ * <p>",
                "+ * The original and most general callback type is the {@link MethodInterceptor}, which",
                "+ * in AOP terms enables \"around advice\"--that is, you can invoke custom code both before",
                "+ * and after the invocation of the \"super\" method. In addition you can modify the",
                "+ * arguments before calling the super method, or not call it at all.",
                "+ * <p>",
                "+ * Although <code>MethodInterceptor</code> is generic enough to meet any",
                "+ * interception need, it is often overkill. For simplicity and performance, additional",
                "+ * specialized callback types, such as {@link LazyLoader} are also available.",
                "+ * Often a single callback will be used per enhanced class, but you can control",
                "+ * which callback is used on a per-method basis with a {@link CallbackFilter}.",
                "+ * <p>",
                "+ * The most common uses of this class are embodied in the static helper methods. For",
                "+ * advanced needs, such as customizing the <code>ClassLoader</code> to use, you should create",
                "+ * a new instance of <code>Enhancer</code>. Other classes within CGLIB follow a similar pattern.",
                "+ * <p>",
                "+ * All enhanced objects implement the {@link Factory} interface, unless {@link #setUseFactory} is",
                "+ * used to explicitly disable this feature. The <code>Factory</code> interface provides an API",
                "+ * to change the callbacks of an existing object, as well as a faster and easier way to create",
                "+ * new instances of the same type.",
                "+ * <p>",
                "+ * For an almost drop-in replacement for",
                "+ * <code>java.lang.reflect.Proxy</code>, see the {@link Proxy} class.",
                "+ */",
                "+@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
                "+public class Enhancer extends AbstractClassGenerator {",
                "+",
                "+\tprivate static final CallbackFilter ALL_ZERO = new CallbackFilter() {",
                "+\t\tpublic int accept(Method method) {",
                "+\t\t\treturn 0;",
                "+\t\t}",
                "+\t};",
                "+",
                "+\tprivate static final Source SOURCE = new Source(Enhancer.class.getName());",
                "+",
                "+\tprivate static final EnhancerKey KEY_FACTORY =",
                "+\t\t\t(EnhancerKey) KeyFactory.create(EnhancerKey.class, KeyFactory.HASH_ASM_TYPE, null);",
                "+",
                "+\tprivate static final String BOUND_FIELD = \"CGLIB$BOUND\";",
                "+",
                "+\tprivate static final String FACTORY_DATA_FIELD = \"CGLIB$FACTORY_DATA\";",
                "+",
                "+\tprivate static final String THREAD_CALLBACKS_FIELD = \"CGLIB$THREAD_CALLBACKS\";",
                "+",
                "+\tprivate static final String STATIC_CALLBACKS_FIELD = \"CGLIB$STATIC_CALLBACKS\";",
                "+",
                "+\tprivate static final String SET_THREAD_CALLBACKS_NAME = \"CGLIB$SET_THREAD_CALLBACKS\";",
                "+",
                "+\tprivate static final String SET_STATIC_CALLBACKS_NAME = \"CGLIB$SET_STATIC_CALLBACKS\";",
                "+",
                "+\tprivate static final String CONSTRUCTED_FIELD = \"CGLIB$CONSTRUCTED\";",
                "+",
                "+\t/**",
                "+\t * {@link org.springframework.cglib.core.AbstractClassGenerator.ClassLoaderData#generatedClasses} requires to keep cache key",
                "+\t * in a good shape (the keys should be up and running if the proxy class is alive), and one of the cache keys is",
                "+\t * {@link CallbackFilter}. That is why the generated class contains static field that keeps strong reference to",
                "+\t * the {@link #filter}.",
                "+\t * <p>This dance achieves two goals: ensures generated class is reusable and available through generatedClasses",
                "+\t * cache, and it enables to unload classloader and the related {@link CallbackFilter} in case user does not need",
                "+\t * that</p>",
                "+\t */",
                "+\tprivate static final String CALLBACK_FILTER_FIELD = \"CGLIB$CALLBACK_FILTER\";",
                "+",
                "+\tprivate static final Type OBJECT_TYPE =",
                "+\t\t\tTypeUtils.parseType(\"Object\");",
                "+",
                "+\tprivate static final Type FACTORY =",
                "+\t\t\tTypeUtils.parseType(\"org.springframework.cglib.proxy.Factory\");",
                "+",
                "+\tprivate static final Type ILLEGAL_STATE_EXCEPTION =",
                "+\t\t\tTypeUtils.parseType(\"IllegalStateException\");",
                "+",
                "+\tprivate static final Type ILLEGAL_ARGUMENT_EXCEPTION =",
                "+\t\t\tTypeUtils.parseType(\"IllegalArgumentException\");",
                "+",
                "+\tprivate static final Type THREAD_LOCAL =",
                "+\t\t\tTypeUtils.parseType(\"ThreadLocal\");",
                "+",
                "+\tprivate static final Type CALLBACK =",
                "+\t\t\tTypeUtils.parseType(\"org.springframework.cglib.proxy.Callback\");",
                "+",
                "+\tprivate static final Type CALLBACK_ARRAY =",
                "+\t\t\tType.getType(Callback[].class);",
                "+",
                "+\tprivate static final Signature CSTRUCT_NULL =",
                "+\t\t\tTypeUtils.parseConstructor(\"\");",
                "+",
                "+\tprivate static final Signature SET_THREAD_CALLBACKS =",
                "+\t\t\tnew Signature(SET_THREAD_CALLBACKS_NAME, Type.VOID_TYPE, new Type[]{CALLBACK_ARRAY});",
                "+",
                "+\tprivate static final Signature SET_STATIC_CALLBACKS =",
                "+\t\t\tnew Signature(SET_STATIC_CALLBACKS_NAME, Type.VOID_TYPE, new Type[]{CALLBACK_ARRAY});",
                "+",
                "+\tprivate static final Signature NEW_INSTANCE =",
                "+\t\t\tnew Signature(\"newInstance\", Constants.TYPE_OBJECT, new Type[]{CALLBACK_ARRAY});",
                "+",
                "+\tprivate static final Signature MULTIARG_NEW_INSTANCE =",
                "+\t\t\tnew Signature(\"newInstance\", Constants.TYPE_OBJECT, new Type[]{",
                "+\t\t\t\t\tConstants.TYPE_CLASS_ARRAY,",
                "+\t\t\t\t\tConstants.TYPE_OBJECT_ARRAY,",
                "+\t\t\t\t\tCALLBACK_ARRAY,",
                "+\t\t\t});",
                "+",
                "+\tprivate static final Signature SINGLE_NEW_INSTANCE =",
                "+\t\t\tnew Signature(\"newInstance\", Constants.TYPE_OBJECT, new Type[]{CALLBACK});",
                "+",
                "+\tprivate static final Signature SET_CALLBACK =",
                "+\t\t\tnew Signature(\"setCallback\", Type.VOID_TYPE, new Type[]{Type.INT_TYPE, CALLBACK});",
                "+",
                "+\tprivate static final Signature GET_CALLBACK =",
                "+\t\t\tnew Signature(\"getCallback\", CALLBACK, new Type[]{Type.INT_TYPE});",
                "+",
                "+\tprivate static final Signature SET_CALLBACKS =",
                "+\t\t\tnew Signature(\"setCallbacks\", Type.VOID_TYPE, new Type[]{CALLBACK_ARRAY});",
                "+",
                "+\tprivate static final Signature GET_CALLBACKS =",
                "+\t\t\tnew Signature(\"getCallbacks\", CALLBACK_ARRAY, new Type[0]);",
                "+",
                "+\tprivate static final Signature THREAD_LOCAL_GET =",
                "+\t\t\tTypeUtils.parseSignature(\"Object get()\");",
                "+",
                "+\tprivate static final Signature THREAD_LOCAL_SET =",
                "+\t\t\tTypeUtils.parseSignature(\"void set(Object)\");",
                "+",
                "+\tprivate static final Signature BIND_CALLBACKS =",
                "+\t\t\tTypeUtils.parseSignature(\"void CGLIB$BIND_CALLBACKS(Object)\");",
                "+",
                "+\tprivate EnhancerFactoryData currentData;",
                "+",
                "+\tprivate Object currentKey;",
                "+",
                "+",
                "+\t/**",
                "+\t * Internal interface, only public due to ClassLoader issues.",
                "+\t */",
                "+\tpublic interface EnhancerKey {",
                "+",
                "+\t\tpublic Object newInstance(String type,",
                "+\t\t\t\tString[] interfaces,",
                "+\t\t\t\tWeakCacheKey<CallbackFilter> filter,",
                "+\t\t\t\tType[] callbackTypes,",
                "+\t\t\t\tboolean useFactory,",
                "+\t\t\t\tboolean interceptDuringConstruction,",
                "+\t\t\t\tLong serialVersionUID);",
                "+\t}",
                "+",
                "+",
                "+\tprivate Class[] interfaces;",
                "+",
                "+\tprivate CallbackFilter filter;",
                "+",
                "+\tprivate Callback[] callbacks;",
                "+",
                "+\tprivate Type[] callbackTypes;",
                "+",
                "+\tprivate boolean validateCallbackTypes;",
                "+",
                "+\tprivate boolean classOnly;",
                "+",
                "+\tprivate Class superclass;",
                "+",
                "+\tprivate Class[] argumentTypes;",
                "+",
                "+\tprivate Object[] arguments;",
                "+",
                "+\tprivate boolean useFactory = true;",
                "+",
                "+\tprivate Long serialVersionUID;",
                "+",
                "+\tprivate boolean interceptDuringConstruction = true;",
                "+",
                "+\t/**",
                "+\t * Create a new <code>Enhancer</code>. A new <code>Enhancer</code>",
                "+\t * object should be used for each generated object, and should not",
                "+\t * be shared across threads. To create additional instances of a",
                "+\t * generated class, use the <code>Factory</code> interface.",
                "+\t * @see Factory",
                "+\t */",
                "+\tpublic Enhancer() {",
                "+\t\tsuper(SOURCE);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set the class which the generated class will extend. As a convenience,",
                "+\t * if the supplied superclass is actually an interface, <code>setInterfaces</code>",
                "+\t * will be called with the appropriate argument instead.",
                "+\t * A non-interface argument must not be declared as final, and must have an",
                "+\t * accessible constructor.",
                "+\t * @param superclass class to extend or interface to implement",
                "+\t * @see #setInterfaces(Class[])",
                "+\t */",
                "+\tpublic void setSuperclass(Class superclass) {",
                "+\t\tif (superclass != null && superclass.isInterface()) {",
                "+\t\t\tsetInterfaces(new Class[]{superclass});",
                "+\t\t}",
                "+\t\telse if (superclass != null && superclass.equals(Object.class)) {",
                "+\t\t\t// affects choice of ClassLoader",
                "+\t\t\tthis.superclass = null;",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\tthis.superclass = superclass;",
                "+\t\t\t// SPRING PATCH BEGIN",
                "+\t\t\tsetContextClass(superclass);",
                "+\t\t\t// SPRING PATCH END",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set the interfaces to implement. The <code>Factory</code> interface will",
                "+\t * always be implemented regardless of what is specified here.",
                "+\t * @param interfaces array of interfaces to implement, or null",
                "+\t * @see Factory",
                "+\t */",
                "+\tpublic void setInterfaces(Class[] interfaces) {",
                "+\t\tthis.interfaces = interfaces;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set the {@link CallbackFilter} used to map the generated class' methods",
                "+\t * to a particular callback index.",
                "+\t * New object instances will always use the same mapping, but may use different",
                "+\t * actual callback objects.",
                "+\t * @param filter the callback filter to use when generating a new class",
                "+\t * @see #setCallbacks",
                "+\t */",
                "+\tpublic void setCallbackFilter(CallbackFilter filter) {",
                "+\t\tthis.filter = filter;",
                "+\t}",
                "+",
                "+",
                "+\t/**",
                "+\t * Set the single {@link Callback} to use.",
                "+\t * Ignored if you use {@link #createClass}.",
                "+\t * @param callback the callback to use for all methods",
                "+\t * @see #setCallbacks",
                "+\t */",
                "+\tpublic void setCallback(final Callback callback) {",
                "+\t\tsetCallbacks(new Callback[]{callback});",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set the array of callbacks to use.",
                "+\t * Ignored if you use {@link #createClass}.",
                "+\t * You must use a {@link CallbackFilter} to specify the index into this",
                "+\t * array for each method in the proxied class.",
                "+\t * @param callbacks the callback array",
                "+\t * @see #setCallbackFilter",
                "+\t * @see #setCallback",
                "+\t */",
                "+\tpublic void setCallbacks(Callback[] callbacks) {",
                "+\t\tif (callbacks != null && callbacks.length == 0) {",
                "+\t\t\tthrow new IllegalArgumentException(\"Array cannot be empty\");",
                "+\t\t}",
                "+\t\tthis.callbacks = callbacks;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set whether the enhanced object instances should implement",
                "+\t * the {@link Factory} interface.",
                "+\t * This was added for tools that need for proxies to be more",
                "+\t * indistinguishable from their targets. Also, in some cases it may",
                "+\t * be necessary to disable the <code>Factory</code> interface to",
                "+\t * prevent code from changing the underlying callbacks.",
                "+\t * @param useFactory whether to implement <code>Factory</code>; default is <code>true</code>",
                "+\t */",
                "+\tpublic void setUseFactory(boolean useFactory) {",
                "+\t\tthis.useFactory = useFactory;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set whether methods called from within the proxy's constructer",
                "+\t * will be intercepted. The default value is true. Unintercepted methods",
                "+\t * will call the method of the proxy's base class, if it exists.",
                "+\t * @param interceptDuringConstruction whether to intercept methods called from the constructor",
                "+\t */",
                "+\tpublic void setInterceptDuringConstruction(boolean interceptDuringConstruction) {",
                "+\t\tthis.interceptDuringConstruction = interceptDuringConstruction;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set the single type of {@link Callback} to use.",
                "+\t * This may be used instead of {@link #setCallback} when calling",
                "+\t * {@link #createClass}, since it may not be possible to have",
                "+\t * an array of actual callback instances.",
                "+\t * @param callbackType the type of callback to use for all methods",
                "+\t * @see #setCallbackTypes",
                "+\t */",
                "+\tpublic void setCallbackType(Class callbackType) {",
                "+\t\tsetCallbackTypes(new Class[]{callbackType});",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Set the array of callback types to use.",
                "+\t * This may be used instead of {@link #setCallbacks} when calling",
                "+\t * {@link #createClass}, since it may not be possible to have",
                "+\t * an array of actual callback instances.",
                "+\t * You must use a {@link CallbackFilter} to specify the index into this",
                "+\t * array for each method in the proxied class.",
                "+\t * @param callbackTypes the array of callback types",
                "+\t */",
                "+\tpublic void setCallbackTypes(Class[] callbackTypes) {",
                "+\t\tif (callbackTypes != null && callbackTypes.length == 0) {",
                "+\t\t\tthrow new IllegalArgumentException(\"Array cannot be empty\");",
                "+\t\t}",
                "+\t\tthis.callbackTypes = CallbackInfo.determineTypes(callbackTypes);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Generate a new class if necessary and uses the specified",
                "+\t * callbacks (if any) to create a new object instance.",
                "+\t * Uses the no-arg constructor of the superclass.",
                "+\t * @return a new instance",
                "+\t */",
                "+\tpublic Object create() {",
                "+\t\tclassOnly = false;",
                "+\t\targumentTypes = null;",
                "+\t\treturn createHelper();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Generate a new class if necessary and uses the specified",
                "+\t * callbacks (if any) to create a new object instance.",
                "+\t * Uses the constructor of the superclass matching the <code>argumentTypes</code>",
                "+\t * parameter, with the given arguments.",
                "+\t * @param argumentTypes constructor signature",
                "+\t * @param arguments compatible wrapped arguments to pass to constructor",
                "+\t * @return a new instance",
                "+\t */",
                "+\tpublic Object create(Class[] argumentTypes, Object[] arguments) {",
                "+\t\tclassOnly = false;",
                "+\t\tif (argumentTypes == null || arguments == null || argumentTypes.length != arguments.length) {",
                "+\t\t\tthrow new IllegalArgumentException(\"Arguments must be non-null and of equal length\");",
                "+\t\t}",
                "+\t\tthis.argumentTypes = argumentTypes;",
                "+\t\tthis.arguments = arguments;",
                "+\t\treturn createHelper();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Generate a new class if necessary and return it without creating a new instance.",
                "+\t * This ignores any callbacks that have been set.",
                "+\t * To create a new instance you will have to use reflection, and methods",
                "+\t * called during the constructor will not be intercepted. To avoid this problem,",
                "+\t * use the multi-arg <code>create</code> method.",
                "+\t * @see #create(Class[], Object[])",
                "+\t */",
                "+\tpublic Class createClass() {",
                "+\t\tclassOnly = true;",
                "+\t\treturn (Class) createHelper();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Insert a static serialVersionUID field into the generated class.",
                "+\t * @param sUID the field value, or null to avoid generating field.",
                "+\t */",
                "+\tpublic void setSerialVersionUID(Long sUID) {",
                "+\t\tserialVersionUID = sUID;",
                "+\t}",
                "+",
                "+\tprivate void preValidate() {",
                "+\t\tif (callbackTypes == null) {",
                "+\t\t\tcallbackTypes = CallbackInfo.determineTypes(callbacks, false);",
                "+\t\t\tvalidateCallbackTypes = true;",
                "+\t\t}",
                "+\t\tif (filter == null) {",
                "+\t\t\tif (callbackTypes.length > 1) {",
                "+\t\t\t\tthrow new IllegalStateException(\"Multiple callback types possible but no filter specified\");",
                "+\t\t\t}",
                "+\t\t\tfilter = ALL_ZERO;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate void validate() {",
                "+\t\tif (classOnly ^ (callbacks == null)) {",
                "+\t\t\tif (classOnly) {",
                "+\t\t\t\tthrow new IllegalStateException(\"createClass does not accept callbacks\");",
                "+\t\t\t}",
                "+\t\t\telse {",
                "+\t\t\t\tthrow new IllegalStateException(\"Callbacks are required\");",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif (classOnly && (callbackTypes == null)) {",
                "+\t\t\tthrow new IllegalStateException(\"Callback types are required\");",
                "+\t\t}",
                "+\t\tif (validateCallbackTypes) {",
                "+\t\t\tcallbackTypes = null;",
                "+\t\t}",
                "+\t\tif (callbacks != null && callbackTypes != null) {",
                "+\t\t\tif (callbacks.length != callbackTypes.length) {",
                "+\t\t\t\tthrow new IllegalStateException(\"Lengths of callback and callback types array must be the same\");",
                "+\t\t\t}",
                "+\t\t\tType[] check = CallbackInfo.determineTypes(callbacks);",
                "+\t\t\tfor (int i = 0; i < check.length; i++) {",
                "+\t\t\t\tif (!check[i].equals(callbackTypes[i])) {",
                "+\t\t\t\t\tthrow new IllegalStateException(\"Callback \" + check[i] + \" is not assignable to \" + callbackTypes[i]);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\telse if (callbacks != null) {",
                "+\t\t\tcallbackTypes = CallbackInfo.determineTypes(callbacks);",
                "+\t\t}",
                "+\t\tif (interfaces != null) {",
                "+\t\t\tfor (int i = 0; i < interfaces.length; i++) {",
                "+\t\t\t\tif (interfaces[i] == null) {",
                "+\t\t\t\t\tthrow new IllegalStateException(\"Interfaces cannot be null\");",
                "+\t\t\t\t}",
                "+\t\t\t\tif (!interfaces[i].isInterface()) {",
                "+\t\t\t\t\tthrow new IllegalStateException(interfaces[i] + \" is not an interface\");",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * The idea of the class is to cache relevant java.lang.reflect instances so",
                "+\t * proxy-class can be instantiated faster that when using {@link ReflectUtils#newInstance(Class, Class[], Object[])}",
                "+\t * and {@link Enhancer#setThreadCallbacks(Class, Callback[])}",
                "+\t */",
                "+\tstatic class EnhancerFactoryData {",
                "+",
                "+\t\tpublic final Class generatedClass;",
                "+",
                "+\t\tprivate final Method setThreadCallbacks;",
                "+",
                "+\t\tprivate final Class[] primaryConstructorArgTypes;",
                "+",
                "+\t\tprivate final Constructor primaryConstructor;",
                "+",
                "+\t\tpublic EnhancerFactoryData(Class generatedClass, Class[] primaryConstructorArgTypes, boolean classOnly) {",
                "+\t\t\tthis.generatedClass = generatedClass;",
                "+\t\t\ttry {",
                "+\t\t\t\tsetThreadCallbacks = getCallbacksSetter(generatedClass, SET_THREAD_CALLBACKS_NAME);",
                "+\t\t\t\tif (classOnly) {",
                "+\t\t\t\t\tthis.primaryConstructorArgTypes = null;",
                "+\t\t\t\t\tthis.primaryConstructor = null;",
                "+\t\t\t\t}",
                "+\t\t\t\telse {",
                "+\t\t\t\t\tthis.primaryConstructorArgTypes = primaryConstructorArgTypes;",
                "+\t\t\t\t\tthis.primaryConstructor = ReflectUtils.getConstructor(generatedClass, primaryConstructorArgTypes);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tcatch (NoSuchMethodException e) {",
                "+\t\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\t/**",
                "+\t\t * Creates proxy instance for given argument types, and assigns the callbacks.",
                "+\t\t * Ideally, for each proxy class, just one set of argument types should be used,",
                "+\t\t * otherwise it would have to spend time on constructor lookup.",
                "+\t\t * Technically, it is a re-implementation of {@link Enhancer#createUsingReflection(Class)},",
                "+\t\t * with \"cache {@link #setThreadCallbacks} and {@link #primaryConstructor}\"",
                "+\t\t * @param argumentTypes constructor argument types",
                "+\t\t * @param arguments constructor arguments",
                "+\t\t * @param callbacks callbacks to set for the new instance",
                "+\t\t * @return newly created proxy",
                "+\t\t * @see #createUsingReflection(Class)",
                "+\t\t */",
                "+\t\tpublic Object newInstance(Class[] argumentTypes, Object[] arguments, Callback[] callbacks) {",
                "+\t\t\tsetThreadCallbacks(callbacks);",
                "+\t\t\ttry {",
                "+\t\t\t\t// Explicit reference equality is added here just in case Arrays.equals does not have one",
                "+\t\t\t\tif (primaryConstructorArgTypes == argumentTypes ||",
                "+\t\t\t\t\t\tArrays.equals(primaryConstructorArgTypes, argumentTypes)) {",
                "+\t\t\t\t\t// If we have relevant Constructor instance at hand, just call it",
                "+\t\t\t\t\t// This skips \"get constructors\" machinery",
                "+\t\t\t\t\treturn ReflectUtils.newInstance(primaryConstructor, arguments);",
                "+\t\t\t\t}",
                "+\t\t\t\t// Take a slow path if observing unexpected argument types",
                "+\t\t\t\treturn ReflectUtils.newInstance(generatedClass, argumentTypes, arguments);",
                "+\t\t\t}",
                "+\t\t\tfinally {",
                "+\t\t\t\t// clear thread callbacks to allow them to be gc'd",
                "+\t\t\t\tsetThreadCallbacks(null);",
                "+\t\t\t}",
                "+",
                "+\t\t}",
                "+",
                "+\t\tprivate void setThreadCallbacks(Callback[] callbacks) {",
                "+\t\t\ttry {",
                "+\t\t\t\tsetThreadCallbacks.invoke(generatedClass, (Object) callbacks);",
                "+\t\t\t}",
                "+\t\t\tcatch (IllegalAccessException e) {",
                "+\t\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t\t}",
                "+\t\t\tcatch (InvocationTargetException e) {",
                "+\t\t\t\tthrow new CodeGenerationException(e.getTargetException());",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate Object createHelper() {",
                "+\t\tpreValidate();",
                "+\t\tObject key = KEY_FACTORY.newInstance((superclass != null) ? superclass.getName() : null,",
                "+\t\t\t\tReflectUtils.getNames(interfaces),",
                "+\t\t\t\tfilter == ALL_ZERO ? null : new WeakCacheKey<CallbackFilter>(filter),",
                "+\t\t\t\tcallbackTypes,",
                "+\t\t\t\tuseFactory,",
                "+\t\t\t\tinterceptDuringConstruction,",
                "+\t\t\t\tserialVersionUID);",
                "+\t\tthis.currentKey = key;",
                "+\t\tObject result = super.create(key);",
                "+\t\treturn result;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected Class generate(ClassLoaderData data) {",
                "+\t\tvalidate();",
                "+\t\tif (superclass != null) {",
                "+\t\t\tsetNamePrefix(superclass.getName());",
                "+\t\t}",
                "+\t\telse if (interfaces != null) {",
                "+\t\t\tsetNamePrefix(interfaces[ReflectUtils.findPackageProtected(interfaces)].getName());",
                "+\t\t}",
                "+\t\treturn super.generate(data);",
                "+\t}",
                "+",
                "+\tprotected ClassLoader getDefaultClassLoader() {",
                "+\t\tif (superclass != null) {",
                "+\t\t\treturn superclass.getClassLoader();",
                "+\t\t}",
                "+\t\telse if (interfaces != null) {",
                "+\t\t\treturn interfaces[0].getClassLoader();",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprotected ProtectionDomain getProtectionDomain() {",
                "+\t\tif (superclass != null) {",
                "+\t\t\treturn ReflectUtils.getProtectionDomain(superclass);",
                "+\t\t}",
                "+\t\telse if (interfaces != null) {",
                "+\t\t\treturn ReflectUtils.getProtectionDomain(interfaces[0]);",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate Signature rename(Signature sig, int index) {",
                "+\t\treturn new Signature(\"CGLIB$\" + sig.getName() + \"$\" + index,",
                "+\t\t\t\tsig.getDescriptor());",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Finds all of the methods that will be extended by an",
                "+\t * Enhancer-generated class using the specified superclass and",
                "+\t * interfaces. This can be useful in building a list of Callback",
                "+\t * objects. The methods are added to the end of the given list.  Due",
                "+\t * to the subclassing nature of the classes generated by Enhancer,",
                "+\t * the methods are guaranteed to be non-static, non-final, and",
                "+\t * non-private. Each method signature will only occur once, even if",
                "+\t * it occurs in multiple classes.",
                "+\t * @param superclass the class that will be extended, or null",
                "+\t * @param interfaces the list of interfaces that will be implemented, or null",
                "+\t * @param methods the list into which to copy the applicable methods",
                "+\t */",
                "+\tpublic static void getMethods(Class superclass, Class[] interfaces, List methods) {",
                "+\t\tgetMethods(superclass, interfaces, methods, null, null);",
                "+\t}",
                "+",
                "+\tprivate static void getMethods(Class superclass, Class[] interfaces, List methods, List interfaceMethods, Set forcePublic) {",
                "+\t\tReflectUtils.addAllMethods(superclass, methods);",
                "+\t\tList target = (interfaceMethods != null) ? interfaceMethods : methods;",
                "+\t\tif (interfaces != null) {",
                "+\t\t\tfor (int i = 0; i < interfaces.length; i++) {",
                "+\t\t\t\tif (interfaces[i] != Factory.class) {",
                "+\t\t\t\t\tReflectUtils.addAllMethods(interfaces[i], target);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif (interfaceMethods != null) {",
                "+\t\t\tif (forcePublic != null) {",
                "+\t\t\t\tforcePublic.addAll(MethodWrapper.createSet(interfaceMethods));",
                "+\t\t\t}",
                "+\t\t\tmethods.addAll(interfaceMethods);",
                "+\t\t}",
                "+\t\tCollectionUtils.filter(methods, new RejectModifierPredicate(Constants.ACC_STATIC));",
                "+\t\tCollectionUtils.filter(methods, new VisibilityPredicate(superclass, true));",
                "+\t\tCollectionUtils.filter(methods, new DuplicatesPredicate());",
                "+\t\tCollectionUtils.filter(methods, new RejectModifierPredicate(Constants.ACC_FINAL));",
                "+\t}",
                "+",
                "+\tpublic void generateClass(ClassVisitor v) throws Exception {",
                "+\t\tClass sc = (superclass == null) ? Object.class : superclass;",
                "+",
                "+\t\tif (TypeUtils.isFinal(sc.getModifiers()))",
                "+\t\t\tthrow new IllegalArgumentException(\"Cannot subclass final class \" + sc.getName());",
                "+\t\tList constructors = new ArrayList(Arrays.asList(sc.getDeclaredConstructors()));",
                "+\t\tfilterConstructors(sc, constructors);",
                "+",
                "+\t\t// Order is very important: must add superclass, then",
                "+\t\t// its superclass chain, then each interface and",
                "+\t\t// its superinterfaces.",
                "+\t\tList actualMethods = new ArrayList();",
                "+\t\tList interfaceMethods = new ArrayList();",
                "+\t\tfinal Set forcePublic = new HashSet();",
                "+\t\tgetMethods(sc, interfaces, actualMethods, interfaceMethods, forcePublic);",
                "+",
                "+\t\tList methods = CollectionUtils.transform(actualMethods, new Transformer() {",
                "+\t\t\tpublic Object transform(Object value) {",
                "+\t\t\t\tMethod method = (Method) value;",
                "+\t\t\t\tint modifiers = Constants.ACC_FINAL",
                "+\t\t\t\t\t\t| (method.getModifiers()",
                "+\t\t\t\t\t\t& ~Constants.ACC_ABSTRACT",
                "+\t\t\t\t\t\t& ~Constants.ACC_NATIVE",
                "+\t\t\t\t\t\t& ~Constants.ACC_SYNCHRONIZED);",
                "+\t\t\t\tif (forcePublic.contains(MethodWrapper.create(method))) {",
                "+\t\t\t\t\tmodifiers = (modifiers & ~Constants.ACC_PROTECTED) | Constants.ACC_PUBLIC;",
                "+\t\t\t\t}",
                "+\t\t\t\treturn ReflectUtils.getMethodInfo(method, modifiers);",
                "+\t\t\t}",
                "+\t\t});",
                "+",
                "+\t\tClassEmitter e = new ClassEmitter(v);",
                "+\t\tif (currentData == null) {",
                "+\t\t\te.begin_class(Constants.V1_2,",
                "+\t\t\t\t\tConstants.ACC_PUBLIC,",
                "+\t\t\t\t\tgetClassName(),",
                "+\t\t\t\t\tType.getType(sc),",
                "+\t\t\t\t\t(useFactory ?",
                "+\t\t\t\t\t\t\tTypeUtils.add(TypeUtils.getTypes(interfaces), FACTORY) :",
                "+\t\t\t\t\t\t\tTypeUtils.getTypes(interfaces)),",
                "+\t\t\t\t\tConstants.SOURCE_FILE);",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\te.begin_class(Constants.V1_2,",
                "+\t\t\t\t\tConstants.ACC_PUBLIC,",
                "+\t\t\t\t\tgetClassName(),",
                "+\t\t\t\t\tnull,",
                "+\t\t\t\t\tnew Type[]{FACTORY},",
                "+\t\t\t\t\tConstants.SOURCE_FILE);",
                "+\t\t}",
                "+\t\tList constructorInfo = CollectionUtils.transform(constructors, MethodInfoTransformer.getInstance());",
                "+",
                "+\t\te.declare_field(Constants.ACC_PRIVATE, BOUND_FIELD, Type.BOOLEAN_TYPE, null);",
                "+\t\te.declare_field(Constants.ACC_PUBLIC | Constants.ACC_STATIC, FACTORY_DATA_FIELD, OBJECT_TYPE, null);",
                "+\t\tif (!interceptDuringConstruction) {",
                "+\t\t\te.declare_field(Constants.ACC_PRIVATE, CONSTRUCTED_FIELD, Type.BOOLEAN_TYPE, null);",
                "+\t\t}",
                "+\t\te.declare_field(Constants.PRIVATE_FINAL_STATIC, THREAD_CALLBACKS_FIELD, THREAD_LOCAL, null);",
                "+\t\te.declare_field(Constants.PRIVATE_FINAL_STATIC, STATIC_CALLBACKS_FIELD, CALLBACK_ARRAY, null);",
                "+\t\tif (serialVersionUID != null) {",
                "+\t\t\te.declare_field(Constants.PRIVATE_FINAL_STATIC, Constants.SUID_FIELD_NAME, Type.LONG_TYPE, serialVersionUID);",
                "+\t\t}",
                "+",
                "+\t\tfor (int i = 0; i < callbackTypes.length; i++) {",
                "+\t\t\te.declare_field(Constants.ACC_PRIVATE, getCallbackField(i), callbackTypes[i], null);",
                "+\t\t}",
                "+\t\t// This is declared private to avoid \"public field\" pollution",
                "+\t\te.declare_field(Constants.ACC_PRIVATE | Constants.ACC_STATIC, CALLBACK_FILTER_FIELD, OBJECT_TYPE, null);",
                "+",
                "+\t\tif (currentData == null) {",
                "+\t\t\temitMethods(e, methods, actualMethods);",
                "+\t\t\temitConstructors(e, constructorInfo);",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\temitDefaultConstructor(e);",
                "+\t\t}",
                "+\t\temitSetThreadCallbacks(e);",
                "+\t\temitSetStaticCallbacks(e);",
                "+\t\temitBindCallbacks(e);",
                "+",
                "+\t\tif (useFactory || currentData != null) {",
                "+\t\t\tint[] keys = getCallbackKeys();",
                "+\t\t\temitNewInstanceCallbacks(e);",
                "+\t\t\temitNewInstanceCallback(e);",
                "+\t\t\temitNewInstanceMultiarg(e, constructorInfo);",
                "+\t\t\temitGetCallback(e, keys);",
                "+\t\t\temitSetCallback(e, keys);",
                "+\t\t\temitGetCallbacks(e);",
                "+\t\t\temitSetCallbacks(e);",
                "+\t\t}",
                "+",
                "+\t\te.end_class();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Filter the list of constructors from the superclass. The",
                "+\t * constructors which remain will be included in the generated",
                "+\t * class. The default implementation is to filter out all private",
                "+\t * constructors, but subclasses may extend Enhancer to override this",
                "+\t * behavior.",
                "+\t * @param sc the superclass",
                "+\t * @param constructors the list of all declared constructors from the superclass",
                "+\t * @throws IllegalArgumentException if there are no non-private constructors",
                "+\t */",
                "+\tprotected void filterConstructors(Class sc, List constructors) {",
                "+\t\tCollectionUtils.filter(constructors, new VisibilityPredicate(sc, true));",
                "+\t\tif (constructors.size() == 0)",
                "+\t\t\tthrow new IllegalArgumentException(\"No visible constructors in \" + sc);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * This method should not be called in regular flow.",
                "+\t * Technically speaking {@link #wrapCachedClass(Class)} uses {@link EnhancerFactoryData} as a cache value,",
                "+\t * and the latter enables faster instantiation than plain old reflection lookup and invoke.",
                "+\t * This method is left intact for backward compatibility reasons: just in case it was ever used.",
                "+\t * @param type class to instantiate",
                "+\t * @return newly created proxy instance",
                "+\t * @throws Exception if something goes wrong",
                "+\t */",
                "+\tprotected Object firstInstance(Class type) throws Exception {",
                "+\t\tif (classOnly) {",
                "+\t\t\treturn type;",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\treturn createUsingReflection(type);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprotected Object nextInstance(Object instance) {",
                "+\t\tEnhancerFactoryData data = (EnhancerFactoryData) instance;",
                "+",
                "+\t\tif (classOnly) {",
                "+\t\t\treturn data.generatedClass;",
                "+\t\t}",
                "+",
                "+\t\tClass[] argumentTypes = this.argumentTypes;",
                "+\t\tObject[] arguments = this.arguments;",
                "+\t\tif (argumentTypes == null) {",
                "+\t\t\targumentTypes = Constants.EMPTY_CLASS_ARRAY;",
                "+\t\t\targuments = null;",
                "+\t\t}",
                "+\t\treturn data.newInstance(argumentTypes, arguments, callbacks);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected Object wrapCachedClass(Class klass) {",
                "+\t\tClass[] argumentTypes = this.argumentTypes;",
                "+\t\tif (argumentTypes == null) {",
                "+\t\t\targumentTypes = Constants.EMPTY_CLASS_ARRAY;",
                "+\t\t}",
                "+\t\tEnhancerFactoryData factoryData = new EnhancerFactoryData(klass, argumentTypes, classOnly);",
                "+\t\tField factoryDataField = null;",
                "+\t\ttry {",
                "+\t\t\t// The subsequent dance is performed just once for each class,",
                "+\t\t\t// so it does not matter much how fast it goes",
                "+\t\t\tfactoryDataField = klass.getField(FACTORY_DATA_FIELD);",
                "+\t\t\tfactoryDataField.set(null, factoryData);",
                "+\t\t\tField callbackFilterField = klass.getDeclaredField(CALLBACK_FILTER_FIELD);",
                "+\t\t\tcallbackFilterField.setAccessible(true);",
                "+\t\t\tcallbackFilterField.set(null, this.filter);",
                "+\t\t}",
                "+\t\tcatch (NoSuchFieldException e) {",
                "+\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t}",
                "+\t\tcatch (IllegalAccessException e) {",
                "+\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t}",
                "+\t\treturn new WeakReference<EnhancerFactoryData>(factoryData);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tprotected Object unwrapCachedValue(Object cached) {",
                "+\t\tif (currentKey instanceof EnhancerKey) {",
                "+\t\t\tEnhancerFactoryData data = ((WeakReference<EnhancerFactoryData>) cached).get();",
                "+\t\t\treturn data;",
                "+\t\t}",
                "+\t\treturn super.unwrapCachedValue(cached);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Call this method to register the {@link Callback} array to use before",
                "+\t * creating a new instance of the generated class via reflection. If you are using",
                "+\t * an instance of <code>Enhancer</code> or the {@link Factory} interface to create",
                "+\t * new instances, this method is unnecessary. Its primary use is for when you want to",
                "+\t * cache and reuse a generated class yourself, and the generated class does",
                "+\t * <i>not</i> implement the {@link Factory} interface.",
                "+\t * <p>",
                "+\t * Note that this method only registers the callbacks on the current thread.",
                "+\t * If you want to register callbacks for instances created by multiple threads,",
                "+\t * use {@link #registerStaticCallbacks}.",
                "+\t * <p>",
                "+\t * The registered callbacks are overwritten and subsequently cleared",
                "+\t * when calling any of the <code>create</code> methods (such as",
                "+\t * {@link #create}), or any {@link Factory} <code>newInstance</code> method.",
                "+\t * Otherwise they are <i>not</i> cleared, and you should be careful to set them",
                "+\t * back to <code>null</code> after creating new instances via reflection if",
                "+\t * memory leakage is a concern.",
                "+\t * @param generatedClass a class previously created by {@link Enhancer}",
                "+\t * @param callbacks the array of callbacks to use when instances of the generated",
                "+\t * class are created",
                "+\t * @see #setUseFactory",
                "+\t */",
                "+\tpublic static void registerCallbacks(Class generatedClass, Callback[] callbacks) {",
                "+\t\tsetThreadCallbacks(generatedClass, callbacks);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Similar to {@link #registerCallbacks}, but suitable for use",
                "+\t * when multiple threads will be creating instances of the generated class.",
                "+\t * The thread-level callbacks will always override the static callbacks.",
                "+\t * Static callbacks are never cleared.",
                "+\t * @param generatedClass a class previously created by {@link Enhancer}",
                "+\t * @param callbacks the array of callbacks to use when instances of the generated",
                "+\t * class are created",
                "+\t */",
                "+\tpublic static void registerStaticCallbacks(Class generatedClass, Callback[] callbacks) {",
                "+\t\tsetCallbacksHelper(generatedClass, callbacks, SET_STATIC_CALLBACKS_NAME);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Determine if a class was generated using <code>Enhancer</code>.",
                "+\t * @param type any class",
                "+\t * @return whether the class was generated  using <code>Enhancer</code>",
                "+\t */",
                "+\tpublic static boolean isEnhanced(Class type) {",
                "+\t\ttry {",
                "+\t\t\tgetCallbacksSetter(type, SET_THREAD_CALLBACKS_NAME);",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+\t\tcatch (NoSuchMethodException e) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate static void setThreadCallbacks(Class type, Callback[] callbacks) {",
                "+\t\tsetCallbacksHelper(type, callbacks, SET_THREAD_CALLBACKS_NAME);",
                "+\t}",
                "+",
                "+\tprivate static void setCallbacksHelper(Class type, Callback[] callbacks, String methodName) {",
                "+\t\t// TODO: optimize",
                "+\t\ttry {",
                "+\t\t\tMethod setter = getCallbacksSetter(type, methodName);",
                "+\t\t\tsetter.invoke(null, new Object[]{callbacks});",
                "+\t\t}",
                "+\t\tcatch (NoSuchMethodException e) {",
                "+\t\t\tthrow new IllegalArgumentException(type + \" is not an enhanced class\");",
                "+\t\t}",
                "+\t\tcatch (IllegalAccessException e) {",
                "+\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t}",
                "+\t\tcatch (InvocationTargetException e) {",
                "+\t\t\tthrow new CodeGenerationException(e);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate static Method getCallbacksSetter(Class type, String methodName) throws NoSuchMethodException {",
                "+\t\treturn type.getDeclaredMethod(methodName, new Class[]{Callback[].class});",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Instantiates a proxy instance and assigns callback values.",
                "+\t * Implementation detail: java.lang.reflect instances are not cached, so this method should not",
                "+\t * be used on a hot path.",
                "+\t * This method is used when {@link #setUseCache(boolean)} is set to {@code false}.",
                "+\t * @param type class to instantiate",
                "+\t * @return newly created instance",
                "+\t */",
                "+\tprivate Object createUsingReflection(Class type) {",
                "+\t\tsetThreadCallbacks(type, callbacks);",
                "+\t\ttry {",
                "+",
                "+\t\t\tif (argumentTypes != null) {",
                "+",
                "+\t\t\t\treturn ReflectUtils.newInstance(type, argumentTypes, arguments);",
                "+",
                "+\t\t\t}",
                "+\t\t\telse {",
                "+",
                "+\t\t\t\treturn ReflectUtils.newInstance(type);",
                "+",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfinally {",
                "+\t\t\t// clear thread callbacks to allow them to be gc'd",
                "+\t\t\tsetThreadCallbacks(type, null);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Helper method to create an intercepted object.",
                "+\t * For finer control over the generated instance, use a new instance of <code>Enhancer</code>",
                "+\t * instead of this static method.",
                "+\t * @param type class to extend or interface to implement",
                "+\t * @param callback the callback to use for all methods",
                "+\t */",
                "+\tpublic static Object create(Class type, Callback callback) {",
                "+\t\tEnhancer e = new Enhancer();",
                "+\t\te.setSuperclass(type);",
                "+\t\te.setCallback(callback);",
                "+\t\treturn e.create();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Helper method to create an intercepted object.",
                "+\t * For finer control over the generated instance, use a new instance of <code>Enhancer</code>",
                "+\t * instead of this static method.",
                "+\t * @param superclass class to extend or interface to implement",
                "+\t * @param interfaces array of interfaces to implement, or null",
                "+\t * @param callback the callback to use for all methods",
                "+\t */",
                "+\tpublic static Object create(Class superclass, Class interfaces[], Callback callback) {",
                "+\t\tEnhancer e = new Enhancer();",
                "+\t\te.setSuperclass(superclass);",
                "+\t\te.setInterfaces(interfaces);",
                "+\t\te.setCallback(callback);",
                "+\t\treturn e.create();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Helper method to create an intercepted object.",
                "+\t * For finer control over the generated instance, use a new instance of <code>Enhancer</code>",
                "+\t * instead of this static method.",
                "+\t * @param superclass class to extend or interface to implement",
                "+\t * @param interfaces array of interfaces to implement, or null",
                "+\t * @param filter the callback filter to use when generating a new class",
                "+\t * @param callbacks callback implementations to use for the enhanced object",
                "+\t */",
                "+\tpublic static Object create(Class superclass, Class[] interfaces, CallbackFilter filter, Callback[] callbacks) {",
                "+\t\tEnhancer e = new Enhancer();",
                "+\t\te.setSuperclass(superclass);",
                "+\t\te.setInterfaces(interfaces);",
                "+\t\te.setCallbackFilter(filter);",
                "+\t\te.setCallbacks(callbacks);",
                "+\t\treturn e.create();",
                "+\t}",
                "+",
                "+\tprivate void emitDefaultConstructor(ClassEmitter ce) {",
                "+\t\tConstructor<Object> declaredConstructor;",
                "+\t\ttry {",
                "+\t\t\tdeclaredConstructor = Object.class.getDeclaredConstructor();",
                "+\t\t}",
                "+\t\tcatch (NoSuchMethodException e) {",
                "+\t\t\tthrow new IllegalStateException(\"Object should have default constructor \", e);",
                "+\t\t}",
                "+\t\tMethodInfo constructor = (MethodInfo) MethodInfoTransformer.getInstance().transform(declaredConstructor);",
                "+\t\tCodeEmitter e = EmitUtils.begin_method(ce, constructor, Constants.ACC_PUBLIC);",
                "+\t\te.load_this();",
                "+\t\te.dup();",
                "+\t\tSignature sig = constructor.getSignature();",
                "+\t\te.super_invoke_constructor(sig);",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitConstructors(ClassEmitter ce, List constructors) {",
                "+\t\tboolean seenNull = false;",
                "+\t\tfor (Iterator it = constructors.iterator(); it.hasNext(); ) {",
                "+\t\t\tMethodInfo constructor = (MethodInfo) it.next();",
                "+\t\t\tif (currentData != null && !\"()V\".equals(constructor.getSignature().getDescriptor())) {",
                "+\t\t\t\tcontinue;",
                "+\t\t\t}",
                "+\t\t\tCodeEmitter e = EmitUtils.begin_method(ce, constructor, Constants.ACC_PUBLIC);",
                "+\t\t\te.load_this();",
                "+\t\t\te.dup();",
                "+\t\t\te.load_args();",
                "+\t\t\tSignature sig = constructor.getSignature();",
                "+\t\t\tseenNull = seenNull || sig.getDescriptor().equals(\"()V\");",
                "+\t\t\te.super_invoke_constructor(sig);",
                "+\t\t\tif (currentData == null) {",
                "+\t\t\t\te.invoke_static_this(BIND_CALLBACKS);",
                "+\t\t\t\tif (!interceptDuringConstruction) {",
                "+\t\t\t\t\te.load_this();",
                "+\t\t\t\t\te.push(1);",
                "+\t\t\t\t\te.putfield(CONSTRUCTED_FIELD);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\te.return_value();",
                "+\t\t\te.end_method();",
                "+\t\t}",
                "+\t\tif (!classOnly && !seenNull && arguments == null)",
                "+\t\t\tthrow new IllegalArgumentException(\"Superclass has no null constructors but no arguments were given\");",
                "+\t}",
                "+",
                "+\tprivate int[] getCallbackKeys() {",
                "+\t\tint[] keys = new int[callbackTypes.length];",
                "+\t\tfor (int i = 0; i < callbackTypes.length; i++) {",
                "+\t\t\tkeys[i] = i;",
                "+\t\t}",
                "+\t\treturn keys;",
                "+\t}",
                "+",
                "+\tprivate void emitGetCallback(ClassEmitter ce, int[] keys) {",
                "+\t\tfinal CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, GET_CALLBACK, null);",
                "+\t\te.load_this();",
                "+\t\te.invoke_static_this(BIND_CALLBACKS);",
                "+\t\te.load_this();",
                "+\t\te.load_arg(0);",
                "+\t\te.process_switch(keys, new ProcessSwitchCallback() {",
                "+\t\t\tpublic void processCase(int key, Label end) {",
                "+\t\t\t\te.getfield(getCallbackField(key));",
                "+\t\t\t\te.goTo(end);",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic void processDefault() {",
                "+\t\t\t\te.pop(); // stack height",
                "+\t\t\t\te.aconst_null();",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitSetCallback(ClassEmitter ce, int[] keys) {",
                "+\t\tfinal CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, SET_CALLBACK, null);",
                "+\t\te.load_arg(0);",
                "+\t\te.process_switch(keys, new ProcessSwitchCallback() {",
                "+\t\t\tpublic void processCase(int key, Label end) {",
                "+\t\t\t\te.load_this();",
                "+\t\t\t\te.load_arg(1);",
                "+\t\t\t\te.checkcast(callbackTypes[key]);",
                "+\t\t\t\te.putfield(getCallbackField(key));",
                "+\t\t\t\te.goTo(end);",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic void processDefault() {",
                "+\t\t\t\t// TODO: error?",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitSetCallbacks(ClassEmitter ce) {",
                "+\t\tCodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, SET_CALLBACKS, null);",
                "+\t\te.load_this();",
                "+\t\te.load_arg(0);",
                "+\t\tfor (int i = 0; i < callbackTypes.length; i++) {",
                "+\t\t\te.dup2();",
                "+\t\t\te.aaload(i);",
                "+\t\t\te.checkcast(callbackTypes[i]);",
                "+\t\t\te.putfield(getCallbackField(i));",
                "+\t\t}",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitGetCallbacks(ClassEmitter ce) {",
                "+\t\tCodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, GET_CALLBACKS, null);",
                "+\t\te.load_this();",
                "+\t\te.invoke_static_this(BIND_CALLBACKS);",
                "+\t\te.load_this();",
                "+\t\te.push(callbackTypes.length);",
                "+\t\te.newarray(CALLBACK);",
                "+\t\tfor (int i = 0; i < callbackTypes.length; i++) {",
                "+\t\t\te.dup();",
                "+\t\t\te.push(i);",
                "+\t\t\te.load_this();",
                "+\t\t\te.getfield(getCallbackField(i));",
                "+\t\t\te.aastore();",
                "+\t\t}",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitNewInstanceCallbacks(ClassEmitter ce) {",
                "+\t\tCodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, NEW_INSTANCE, null);",
                "+\t\tType thisType = getThisType(e);",
                "+\t\te.load_arg(0);",
                "+\t\te.invoke_static(thisType, SET_THREAD_CALLBACKS);",
                "+\t\temitCommonNewInstance(e);",
                "+\t}",
                "+",
                "+\tprivate Type getThisType(CodeEmitter e) {",
                "+\t\tif (currentData == null) {",
                "+\t\t\treturn e.getClassEmitter().getClassType();",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\treturn Type.getType(currentData.generatedClass);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate void emitCommonNewInstance(CodeEmitter e) {",
                "+\t\tType thisType = getThisType(e);",
                "+\t\te.new_instance(thisType);",
                "+\t\te.dup();",
                "+\t\te.invoke_constructor(thisType);",
                "+\t\te.aconst_null();",
                "+\t\te.invoke_static(thisType, SET_THREAD_CALLBACKS);",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitNewInstanceCallback(ClassEmitter ce) {",
                "+\t\tCodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, SINGLE_NEW_INSTANCE, null);",
                "+\t\tswitch (callbackTypes.length) {",
                "+\t\t\tcase 0:",
                "+\t\t\t\t// TODO: make sure Callback is null",
                "+\t\t\t\tbreak;",
                "+\t\t\tcase 1:",
                "+\t\t\t\t// for now just make a new array; TODO: optimize",
                "+\t\t\t\te.push(1);",
                "+\t\t\t\te.newarray(CALLBACK);",
                "+\t\t\t\te.dup();",
                "+\t\t\t\te.push(0);",
                "+\t\t\t\te.load_arg(0);",
                "+\t\t\t\te.aastore();",
                "+\t\t\t\te.invoke_static(getThisType(e), SET_THREAD_CALLBACKS);",
                "+\t\t\t\tbreak;",
                "+\t\t\tdefault:",
                "+\t\t\t\te.throw_exception(ILLEGAL_STATE_EXCEPTION, \"More than one callback object required\");",
                "+\t\t}",
                "+\t\temitCommonNewInstance(e);",
                "+\t}",
                "+",
                "+\tprivate void emitNewInstanceMultiarg(ClassEmitter ce, List constructors) {",
                "+\t\tfinal CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, MULTIARG_NEW_INSTANCE, null);",
                "+\t\tfinal Type thisType = getThisType(e);",
                "+\t\te.load_arg(2);",
                "+\t\te.invoke_static(thisType, SET_THREAD_CALLBACKS);",
                "+\t\te.new_instance(thisType);",
                "+\t\te.dup();",
                "+\t\te.load_arg(0);",
                "+\t\tEmitUtils.constructor_switch(e, constructors, new ObjectSwitchCallback() {",
                "+\t\t\tpublic void processCase(Object key, Label end) {",
                "+\t\t\t\tMethodInfo constructor = (MethodInfo) key;",
                "+\t\t\t\tType types[] = constructor.getSignature().getArgumentTypes();",
                "+\t\t\t\tfor (int i = 0; i < types.length; i++) {",
                "+\t\t\t\t\te.load_arg(1);",
                "+\t\t\t\t\te.push(i);",
                "+\t\t\t\t\te.aaload();",
                "+\t\t\t\t\te.unbox(types[i]);",
                "+\t\t\t\t}",
                "+\t\t\t\te.invoke_constructor(thisType, constructor.getSignature());",
                "+\t\t\t\te.goTo(end);",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic void processDefault() {",
                "+\t\t\t\te.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Constructor not found\");",
                "+\t\t\t}",
                "+\t\t});",
                "+\t\te.aconst_null();",
                "+\t\te.invoke_static(thisType, SET_THREAD_CALLBACKS);",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitMethods(final ClassEmitter ce, List methods, List actualMethods) {",
                "+\t\tCallbackGenerator[] generators = CallbackInfo.getGenerators(callbackTypes);",
                "+",
                "+\t\tMap groups = new HashMap();",
                "+\t\tfinal Map indexes = new HashMap();",
                "+\t\tfinal Map originalModifiers = new HashMap();",
                "+\t\tfinal Map positions = CollectionUtils.getIndexMap(methods);",
                "+\t\tfinal Map declToBridge = new HashMap();",
                "+",
                "+\t\tIterator it1 = methods.iterator();",
                "+\t\tIterator it2 = (actualMethods != null) ? actualMethods.iterator() : null;",
                "+",
                "+\t\twhile (it1.hasNext()) {",
                "+\t\t\tMethodInfo method = (MethodInfo) it1.next();",
                "+\t\t\tMethod actualMethod = (it2 != null) ? (Method) it2.next() : null;",
                "+\t\t\tint index = filter.accept(actualMethod);",
                "+\t\t\tif (index >= callbackTypes.length) {",
                "+\t\t\t\tthrow new IllegalArgumentException(\"Callback filter returned an index that is too large: \" + index);",
                "+\t\t\t}",
                "+\t\t\toriginalModifiers.put(method, (actualMethod != null ? actualMethod.getModifiers() : method.getModifiers()));",
                "+\t\t\tindexes.put(method, index);",
                "+\t\t\tList group = (List) groups.get(generators[index]);",
                "+\t\t\tif (group == null) {",
                "+\t\t\t\tgroups.put(generators[index], group = new ArrayList(methods.size()));",
                "+\t\t\t}",
                "+\t\t\tgroup.add(method);",
                "+",
                "+\t\t\t// Optimization: build up a map of Class -> bridge methods in class",
                "+\t\t\t// so that we can look up all the bridge methods in one pass for a class.",
                "+\t\t\tif (TypeUtils.isBridge(actualMethod.getModifiers())) {",
                "+\t\t\t\tSet bridges = (Set) declToBridge.get(actualMethod.getDeclaringClass());",
                "+\t\t\t\tif (bridges == null) {",
                "+\t\t\t\t\tbridges = new HashSet();",
                "+\t\t\t\t\tdeclToBridge.put(actualMethod.getDeclaringClass(), bridges);",
                "+\t\t\t\t}",
                "+\t\t\t\tbridges.add(method.getSignature());",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tfinal Map bridgeToTarget = new BridgeMethodResolver(declToBridge, getClassLoader()).resolveAll();",
                "+",
                "+\t\tSet seenGen = new HashSet();",
                "+\t\tCodeEmitter se = ce.getStaticHook();",
                "+\t\tse.new_instance(THREAD_LOCAL);",
                "+\t\tse.dup();",
                "+\t\tse.invoke_constructor(THREAD_LOCAL, CSTRUCT_NULL);",
                "+\t\tse.putfield(THREAD_CALLBACKS_FIELD);",
                "+",
                "+\t\tfinal Object[] state = new Object[1];",
                "+\t\tCallbackGenerator.Context context = new CallbackGenerator.Context() {",
                "+\t\t\tpublic ClassLoader getClassLoader() {",
                "+\t\t\t\treturn Enhancer.this.getClassLoader();",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic int getOriginalModifiers(MethodInfo method) {",
                "+\t\t\t\treturn ((Integer) originalModifiers.get(method)).intValue();",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic int getIndex(MethodInfo method) {",
                "+\t\t\t\treturn ((Integer) indexes.get(method)).intValue();",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic void emitCallback(CodeEmitter e, int index) {",
                "+\t\t\t\temitCurrentCallback(e, index);",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic Signature getImplSignature(MethodInfo method) {",
                "+\t\t\t\treturn rename(method.getSignature(), ((Integer) positions.get(method)).intValue());",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic void emitLoadArgsAndInvoke(CodeEmitter e, MethodInfo method) {",
                "+\t\t\t\t// If this is a bridge and we know the target was called from invokespecial,",
                "+\t\t\t\t// then we need to invoke_virtual w/ the bridge target instead of doing",
                "+\t\t\t\t// a super, because super may itself be using super, which would bypass",
                "+\t\t\t\t// any proxies on the target.",
                "+\t\t\t\tSignature bridgeTarget = (Signature) bridgeToTarget.get(method.getSignature());",
                "+\t\t\t\tif (bridgeTarget != null) {",
                "+\t\t\t\t\t// checkcast each argument against the target's argument types",
                "+\t\t\t\t\tfor (int i = 0; i < bridgeTarget.getArgumentTypes().length; i++) {",
                "+\t\t\t\t\t\te.load_arg(i);",
                "+\t\t\t\t\t\tType target = bridgeTarget.getArgumentTypes()[i];",
                "+\t\t\t\t\t\tif (!target.equals(method.getSignature().getArgumentTypes()[i])) {",
                "+\t\t\t\t\t\t\te.checkcast(target);",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\te.invoke_virtual_this(bridgeTarget);",
                "+",
                "+\t\t\t\t\tType retType = method.getSignature().getReturnType();",
                "+\t\t\t\t\t// Not necessary to cast if the target & bridge have",
                "+\t\t\t\t\t// the same return type.",
                "+\t\t\t\t\t// (This conveniently includes void and primitive types,",
                "+\t\t\t\t\t// which would fail if casted.  It's not possible to",
                "+\t\t\t\t\t// covariant from boxed to unbox (or vice versa), so no having",
                "+\t\t\t\t\t// to box/unbox for bridges).",
                "+\t\t\t\t\t// TODO: It also isn't necessary to checkcast if the return is",
                "+\t\t\t\t\t// assignable from the target.  (This would happen if a subclass",
                "+\t\t\t\t\t// used covariant returns to narrow the return type within a bridge",
                "+\t\t\t\t\t// method.)",
                "+\t\t\t\t\tif (!retType.equals(bridgeTarget.getReturnType())) {",
                "+\t\t\t\t\t\te.checkcast(retType);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\telse {",
                "+\t\t\t\t\te.load_args();",
                "+\t\t\t\t\te.super_invoke(method.getSignature());",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic CodeEmitter beginMethod(ClassEmitter ce, MethodInfo method) {",
                "+\t\t\t\tCodeEmitter e = EmitUtils.begin_method(ce, method);",
                "+\t\t\t\tif (!interceptDuringConstruction &&",
                "+\t\t\t\t\t\t!TypeUtils.isAbstract(method.getModifiers())) {",
                "+\t\t\t\t\tLabel constructed = e.make_label();",
                "+\t\t\t\t\te.load_this();",
                "+\t\t\t\t\te.getfield(CONSTRUCTED_FIELD);",
                "+\t\t\t\t\te.if_jump(CodeEmitter.NE, constructed);",
                "+\t\t\t\t\te.load_this();",
                "+\t\t\t\t\te.load_args();",
                "+\t\t\t\t\te.super_invoke();",
                "+\t\t\t\t\te.return_value();",
                "+\t\t\t\t\te.mark(constructed);",
                "+\t\t\t\t}",
                "+\t\t\t\treturn e;",
                "+\t\t\t}",
                "+\t\t};",
                "+\t\tfor (int i = 0; i < callbackTypes.length; i++) {",
                "+\t\t\tCallbackGenerator gen = generators[i];",
                "+\t\t\tif (!seenGen.contains(gen)) {",
                "+\t\t\t\tseenGen.add(gen);",
                "+\t\t\t\tfinal List fmethods = (List) groups.get(gen);",
                "+\t\t\t\tif (fmethods != null) {",
                "+\t\t\t\t\ttry {",
                "+\t\t\t\t\t\tgen.generate(ce, context, fmethods);",
                "+\t\t\t\t\t\tgen.generateStatic(se, context, fmethods);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tcatch (RuntimeException x) {",
                "+\t\t\t\t\t\tthrow x;",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tcatch (Exception x) {",
                "+\t\t\t\t\t\tthrow new CodeGenerationException(x);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tse.return_value();",
                "+\t\tse.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitSetThreadCallbacks(ClassEmitter ce) {",
                "+\t\tCodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC | Constants.ACC_STATIC,",
                "+\t\t\t\tSET_THREAD_CALLBACKS,",
                "+\t\t\t\tnull);",
                "+\t\te.getfield(THREAD_CALLBACKS_FIELD);",
                "+\t\te.load_arg(0);",
                "+\t\te.invoke_virtual(THREAD_LOCAL, THREAD_LOCAL_SET);",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitSetStaticCallbacks(ClassEmitter ce) {",
                "+\t\tCodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC | Constants.ACC_STATIC,",
                "+\t\t\t\tSET_STATIC_CALLBACKS,",
                "+\t\t\t\tnull);",
                "+\t\te.load_arg(0);",
                "+\t\te.putfield(STATIC_CALLBACKS_FIELD);",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate void emitCurrentCallback(CodeEmitter e, int index) {",
                "+\t\te.load_this();",
                "+\t\te.getfield(getCallbackField(index));",
                "+\t\te.dup();",
                "+\t\tLabel end = e.make_label();",
                "+\t\te.ifnonnull(end);",
                "+\t\te.pop(); // stack height",
                "+\t\te.load_this();",
                "+\t\te.invoke_static_this(BIND_CALLBACKS);",
                "+\t\te.load_this();",
                "+\t\te.getfield(getCallbackField(index));",
                "+\t\te.mark(end);",
                "+\t}",
                "+",
                "+\tprivate void emitBindCallbacks(ClassEmitter ce) {",
                "+\t\tCodeEmitter e = ce.begin_method(Constants.PRIVATE_FINAL_STATIC,",
                "+\t\t\t\tBIND_CALLBACKS,",
                "+\t\t\t\tnull);",
                "+\t\tLocal me = e.make_local();",
                "+\t\te.load_arg(0);",
                "+\t\te.checkcast_this();",
                "+\t\te.store_local(me);",
                "+",
                "+\t\tLabel end = e.make_label();",
                "+\t\te.load_local(me);",
                "+\t\te.getfield(BOUND_FIELD);",
                "+\t\te.if_jump(CodeEmitter.NE, end);",
                "+\t\te.load_local(me);",
                "+\t\te.push(1);",
                "+\t\te.putfield(BOUND_FIELD);",
                "+",
                "+\t\te.getfield(THREAD_CALLBACKS_FIELD);",
                "+\t\te.invoke_virtual(THREAD_LOCAL, THREAD_LOCAL_GET);",
                "+\t\te.dup();",
                "+\t\tLabel found_callback = e.make_label();",
                "+\t\te.ifnonnull(found_callback);",
                "+\t\te.pop();",
                "+",
                "+\t\te.getfield(STATIC_CALLBACKS_FIELD);",
                "+\t\te.dup();",
                "+\t\te.ifnonnull(found_callback);",
                "+\t\te.pop();",
                "+\t\te.goTo(end);",
                "+",
                "+\t\te.mark(found_callback);",
                "+\t\te.checkcast(CALLBACK_ARRAY);",
                "+\t\te.load_local(me);",
                "+\t\te.swap();",
                "+\t\tfor (int i = callbackTypes.length - 1; i >= 0; i--) {",
                "+\t\t\tif (i != 0) {",
                "+\t\t\t\te.dup2();",
                "+\t\t\t}",
                "+\t\t\te.aaload(i);",
                "+\t\t\te.checkcast(callbackTypes[i]);",
                "+\t\t\te.putfield(getCallbackField(i));",
                "+\t\t}",
                "+",
                "+\t\te.mark(end);",
                "+\t\te.return_value();",
                "+\t\te.end_method();",
                "+\t}",
                "+",
                "+\tprivate static String getCallbackField(int index) {",
                "+\t\treturn \"CGLIB$CALLBACK_\" + index;",
                "+\t}",
                "+",
                "+}",
                "diff --git a/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java",
                "new file mode 100644",
                "index 0000000000..0e15a823ca",
                "--- /dev/null",
                "+++ b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java",
                "@@ -0,0 +1,251 @@",
                "+/*",
                "+ * Copyright 2003,2004 The Apache Software Foundation",
                "+ *",
                "+ *  Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.springframework.cglib.proxy;",
                "+",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+",
                "+import org.springframework.cglib.core.AbstractClassGenerator;",
                "+import org.springframework.cglib.core.CodeGenerationException;",
                "+import org.springframework.cglib.core.GeneratorStrategy;",
                "+import org.springframework.cglib.core.NamingPolicy;",
                "+import org.springframework.cglib.core.Signature;",
                "+import org.springframework.cglib.reflect.FastClass;",
                "+",
                "+/**",
                "+ * Classes generated by {@link Enhancer} pass this object to the",
                "+ * registered {@link MethodInterceptor} objects when an intercepted method is invoked. It can",
                "+ * be used to either invoke the original method, or call the same method on a different",
                "+ * object of the same type.",
                "+ * @version $Id: MethodProxy.java,v 1.16 2009/01/11 20:09:48 herbyderby Exp $",
                "+ */",
                "+@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
                "+public class MethodProxy {",
                "+",
                "+\tprivate Signature sig1;",
                "+",
                "+\tprivate Signature sig2;",
                "+",
                "+\tprivate CreateInfo createInfo;",
                "+",
                "+\tprivate final Object initLock = new Object();",
                "+",
                "+\tprivate volatile FastClassInfo fastClassInfo;",
                "+",
                "+\t/**",
                "+\t * For internal use by {@link Enhancer} only; see the {@link org.springframework.cglib.reflect.FastMethod} class",
                "+\t * for similar functionality.",
                "+\t */",
                "+\tpublic static MethodProxy create(Class c1, Class c2, String desc, String name1, String name2) {",
                "+\t\tMethodProxy proxy = new MethodProxy();",
                "+\t\tproxy.sig1 = new Signature(name1, desc);",
                "+\t\tproxy.sig2 = new Signature(name2, desc);",
                "+\t\tproxy.createInfo = new CreateInfo(c1, c2);",
                "+\t\treturn proxy;",
                "+\t}",
                "+",
                "+\tprivate void init() {",
                "+\t\t/*",
                "+\t\t * Using a volatile invariant allows us to initialize the FastClass and",
                "+\t\t * method index pairs atomically.",
                "+\t\t *",
                "+\t\t * Double-checked locking is safe with volatile in Java 5.  Before 1.5 this",
                "+\t\t * code could allow fastClassInfo to be instantiated more than once, which",
                "+\t\t * appears to be benign.",
                "+\t\t */",
                "+\t\tif (fastClassInfo == null) {",
                "+\t\t\tsynchronized (initLock) {",
                "+\t\t\t\tif (fastClassInfo == null) {",
                "+\t\t\t\t\tCreateInfo ci = createInfo;",
                "+",
                "+\t\t\t\t\tFastClassInfo fci = new FastClassInfo();",
                "+\t\t\t\t\tfci.f1 = helper(ci, ci.c1);",
                "+\t\t\t\t\tfci.f2 = helper(ci, ci.c2);",
                "+\t\t\t\t\tfci.i1 = fci.f1.getIndex(sig1);",
                "+\t\t\t\t\tfci.i2 = fci.f2.getIndex(sig2);",
                "+\t\t\t\t\tfastClassInfo = fci;",
                "+\t\t\t\t\tcreateInfo = null;",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+",
                "+\tprivate static class FastClassInfo {",
                "+",
                "+\t\tFastClass f1;",
                "+",
                "+\t\tFastClass f2;",
                "+",
                "+\t\tint i1;",
                "+",
                "+\t\tint i2;",
                "+\t}",
                "+",
                "+",
                "+\tprivate static class CreateInfo {",
                "+",
                "+\t\tClass c1;",
                "+",
                "+\t\tClass c2;",
                "+",
                "+\t\tNamingPolicy namingPolicy;",
                "+",
                "+\t\tGeneratorStrategy strategy;",
                "+",
                "+\t\tboolean attemptLoad;",
                "+",
                "+\t\tpublic CreateInfo(Class c1, Class c2) {",
                "+\t\t\tthis.c1 = c1;",
                "+\t\t\tthis.c2 = c2;",
                "+\t\t\tAbstractClassGenerator fromEnhancer = AbstractClassGenerator.getCurrent();",
                "+\t\t\tif (fromEnhancer != null) {",
                "+\t\t\t\tnamingPolicy = fromEnhancer.getNamingPolicy();",
                "+\t\t\t\tstrategy = fromEnhancer.getStrategy();",
                "+\t\t\t\tattemptLoad = fromEnhancer.getAttemptLoad();",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+",
                "+\tprivate static FastClass helper(CreateInfo ci, Class type) {",
                "+\t\tFastClass.Generator g = new FastClass.Generator();",
                "+\t\tg.setType(type);",
                "+\t\t// SPRING PATCH BEGIN",
                "+\t\tg.setContextClass(type);",
                "+\t\t// SPRING PATCH END",
                "+\t\tg.setClassLoader(ci.c2.getClassLoader());",
                "+\t\tg.setNamingPolicy(ci.namingPolicy);",
                "+\t\tg.setStrategy(ci.strategy);",
                "+\t\tg.setAttemptLoad(ci.attemptLoad);",
                "+\t\treturn g.create();",
                "+\t}",
                "+",
                "+\tprivate MethodProxy() {",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Return the signature of the proxied method.",
                "+\t */",
                "+\tpublic Signature getSignature() {",
                "+\t\treturn sig1;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Return the name of the synthetic method created by CGLIB which is",
                "+\t * used by {@link #invokeSuper} to invoke the superclass",
                "+\t * (non-intercepted) method implementation. The parameter types are",
                "+\t * the same as the proxied method.",
                "+\t */",
                "+\tpublic String getSuperName() {",
                "+\t\treturn sig2.getName();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Return the {@link org.springframework.cglib.reflect.FastClass} method index",
                "+\t * for the method used by {@link #invokeSuper}. This index uniquely",
                "+\t * identifies the method within the generated proxy, and therefore",
                "+\t * can be useful to reference external metadata.",
                "+\t * @see #getSuperName",
                "+\t */",
                "+\tpublic int getSuperIndex() {",
                "+\t\tinit();",
                "+\t\treturn fastClassInfo.i2;",
                "+\t}",
                "+",
                "+\t// For testing",
                "+\tFastClass getFastClass() {",
                "+\t\tinit();",
                "+\t\treturn fastClassInfo.f1;",
                "+\t}",
                "+",
                "+\t// For testing",
                "+\tFastClass getSuperFastClass() {",
                "+\t\tinit();",
                "+\t\treturn fastClassInfo.f2;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Return the <code>MethodProxy</code> used when intercepting the method",
                "+\t * matching the given signature.",
                "+\t * @param type the class generated by Enhancer",
                "+\t * @param sig the signature to match",
                "+\t * @return the MethodProxy instance, or null if no applicable matching method is found",
                "+\t * @throws IllegalArgumentException if the Class was not created by Enhancer or does not use a MethodInterceptor",
                "+\t */",
                "+\tpublic static MethodProxy find(Class type, Signature sig) {",
                "+\t\ttry {",
                "+\t\t\tMethod m = type.getDeclaredMethod(MethodInterceptorGenerator.FIND_PROXY_NAME,",
                "+\t\t\t\t\tMethodInterceptorGenerator.FIND_PROXY_TYPES);",
                "+\t\t\treturn (MethodProxy) m.invoke(null, new Object[]{sig});",
                "+\t\t}",
                "+\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\tthrow new IllegalArgumentException(\"Class \" + type + \" does not use a MethodInterceptor\");",
                "+\t\t}",
                "+\t\tcatch (IllegalAccessException | InvocationTargetException ex) {",
                "+\t\t\tthrow new CodeGenerationException(ex);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Invoke the original method, on a different object of the same type.",
                "+\t * @param obj the compatible object; recursion will result if you use the object passed as the first",
                "+\t * argument to the MethodInterceptor (usually not what you want)",
                "+\t * @param args the arguments passed to the intercepted method; you may substitute a different",
                "+\t * argument array as long as the types are compatible",
                "+\t * @throws Throwable the bare exceptions thrown by the called method are passed through",
                "+\t * without wrapping in an <code>InvocationTargetException</code>",
                "+\t * @see MethodInterceptor#intercept",
                "+\t */",
                "+\tpublic Object invoke(Object obj, Object[] args) throws Throwable {",
                "+\t\ttry {",
                "+\t\t\tinit();",
                "+\t\t\tFastClassInfo fci = fastClassInfo;",
                "+\t\t\treturn fci.f1.invoke(fci.i1, obj, args);",
                "+\t\t}",
                "+\t\tcatch (InvocationTargetException ex) {",
                "+\t\t\tthrow ex.getTargetException();",
                "+\t\t}",
                "+\t\tcatch (IllegalArgumentException ex) {",
                "+\t\t\tif (fastClassInfo.i1 < 0)",
                "+\t\t\t\tthrow new IllegalArgumentException(\"Protected method: \" + sig1);",
                "+\t\t\tthrow ex;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Invoke the original (super) method on the specified object.",
                "+\t * @param obj the enhanced object, must be the object passed as the first",
                "+\t * argument to the MethodInterceptor",
                "+\t * @param args the arguments passed to the intercepted method; you may substitute a different",
                "+\t * argument array as long as the types are compatible",
                "+\t * @throws Throwable the bare exceptions thrown by the called method are passed through",
                "+\t * without wrapping in an <code>InvocationTargetException</code>",
                "+\t * @see MethodInterceptor#intercept",
                "+\t */",
                "+\tpublic Object invokeSuper(Object obj, Object[] args) throws Throwable {",
                "+\t\ttry {",
                "+\t\t\tinit();",
                "+\t\t\tFastClassInfo fci = fastClassInfo;",
                "+\t\t\treturn fci.f2.invoke(fci.i2, obj, args);",
                "+\t\t}",
                "+\t\tcatch (InvocationTargetException e) {",
                "+\t\t\tthrow e.getTargetException();",
                "+\t\t}",
                "+\t}",
                "+",
                "+}",
                "diff --git a/spring-core/src/main/java/org/springframework/cglib/proxy/package-info.java b/spring-core/src/main/java/org/springframework/cglib/proxy/package-info.java",
                "new file mode 100644",
                "index 0000000000..0d651c8f04",
                "--- /dev/null",
                "+++ b/spring-core/src/main/java/org/springframework/cglib/proxy/package-info.java",
                "@@ -0,0 +1,10 @@",
                "+/**",
                "+ * Spring's repackaging of the",
                "+ * <a href=\"http://cglib.sourceforge.net\">CGLIB</a> proxy package",
                "+ * (for internal use only).",
                "+ *",
                "+ * <p>As this repackaging happens at the class file level, sources",
                "+ * and javadocs are not available here... except for a few files",
                "+ * that have been patched for Spring's purposes on JDK 9/10/11.",
                "+ */",
                "+package org.springframework.cglib.proxy;"
            ],
            "changed_files": [
                "spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java",
                "spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "spring-core/spring-core.gradle",
                "spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java",
                "spring-core/src/main/java/org/springframework/cglib/core/KeyFactory.java",
                "spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java",
                "spring-core/src/main/java/org/springframework/cglib/core/package-info.java",
                "spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java",
                "spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java",
                "spring-core/src/main/java/org/springframework/cglib/proxy/package-info.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2523c3ab77ef8bd14ac0affb5960229fd636097c",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523440835,
            "hunks": 3,
            "message": "Clean up deprecation warning in spring-test",
            "diff": [
                "diff --git a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java",
                "index a6130387d8..842e2e8f49 100644",
                "--- a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java",
                "+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java",
                "@@ -275,3 +275,3 @@ public class MockServerRequest implements ServerRequest {",
                " \t\t/**",
                "-\t\t * @deprecated  in favor of {@link #principal(Principal)}",
                "+\t\t * @deprecated in favor of {@link #principal(Principal)}",
                " \t\t */",
                "@@ -423,2 +423,3 @@ public class MockServerRequest implements ServerRequest {",
                " \t\t@Override",
                "+\t\t@Deprecated",
                " \t\tpublic Builder session(Principal principal) {",
                "@@ -544,3 +545,2 @@ public class MockServerRequest implements ServerRequest {",
                "-",
                " }"
            ],
            "changed_files": [
                "spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2a9eaab6741055f05895985e3461ec26227dec8e",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522531940,
            "hunks": 6,
            "message": "Remove outdated declarations from spring-aspects build",
            "diff": [
                "diff --git a/spring-aspects/aspects.gradle b/spring-aspects/aspects.gradle",
                "index 2c68dff4da..78491cc0bd 100644",
                "--- a/spring-aspects/aspects.gradle",
                "+++ b/spring-aspects/aspects.gradle",
                "@@ -1,3 +1,2 @@",
                "-// redefine the compileJava and compileTestJava tasks in order to",
                "-// compile sources with ajc instead of javac",
                "+// Redefine the compileJava and compileTestJava tasks in order to compile sources with ajc instead of javac",
                "@@ -10,6 +9,2 @@ configurations {",
                "-// exclude spring-aspects as a module within IDEA until IDEA-64446 is resolved",
                "-tasks.getByName(\"idea\").onlyIf { false }",
                "-tasks.getByName(\"ideaModule\").onlyIf { false }",
                "-",
                " compileJava  {",
                "@@ -19,3 +14,2 @@ compileJava  {",
                " \tdef outputDir = project.sourceSets.main.output.classesDir",
                "-",
                " \tinputs.files(project.sourceSets.main.allSource + project.sourceSets.main.compileClasspath)",
                "@@ -23,5 +17,2 @@ compileJava  {",
                "-\text.sourceCompatibility = project(\":spring-core\").compileJava.sourceCompatibility",
                "-\text.targetCompatibility = project(\":spring-core\").compileJava.targetCompatibility",
                "-",
                " \tdoLast{",
                "@@ -55,3 +46,2 @@ compileTestJava  {",
                " \tdef outputDir = project.sourceSets.test.output.classesDir",
                "-",
                " \tinputs.files(project.sourceSets.test.allSource + project.sourceSets.test.compileClasspath)",
                "@@ -59,5 +49,2 @@ compileTestJava  {",
                "-\text.sourceCompatibility = project(\":spring-core\").compileTestJava.sourceCompatibility",
                "-\text.targetCompatibility = project(\":spring-core\").compileTestJava.targetCompatibility",
                "-",
                " \tdoLast{"
            ],
            "changed_files": [
                "spring-aspects/aspects.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.15.RELEASE",
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ac19c696fed200a0e5da13eebb38bbc0feea9af4",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523537111,
            "hunks": 3,
            "message": "Revised reference example for linkable controller method signature Issue: SPR-16710 (cherry picked from commit 7ee6130)",
            "diff": [
                "diff --git a/src/asciidoc/web-mvc.adoc b/src/asciidoc/web-mvc.adoc",
                "index ae051ad653..cc82277717 100644",
                "--- a/src/asciidoc/web-mvc.adoc",
                "+++ b/src/asciidoc/web-mvc.adoc",
                "@@ -3316,3 +3316,4 @@ also have the literal part of the servlet mapping included:",
                "-Spring MVC also provides a mechanism for building links to controller methods. For example, given:",
                "+Spring MVC provides a mechanism to prepare links to controller methods. For example,",
                "+the following MVC controller easily allows for link creation:",
                "@@ -3326,3 +3327,3 @@ Spring MVC also provides a mechanism for building links to controller methods. F",
                " \t\t@GetMapping(\"/bookings/{booking}\")",
                "-\t\tpublic String getBooking(@PathVariable Long booking) {",
                "+\t\tpublic ModelAndView getBooking(@PathVariable Long booking) {",
                " \t\t\t// ...",
                "@@ -3363,2 +3364,12 @@ akin to mock testing through proxies to avoid referring to the controller method",
                "+[NOTE]",
                "+====",
                "+Controller method signatures are limited in their design when supposed to be usable for",
                "+link creation with `fromMethodCall`. Aside from needing a proper parameter signature,",
                "+there is a technical limitation on the return type: namely generating a runtime proxy",
                "+for link builder invocations, so the return type must not be `final`. In particular,",
                "+the common `String` return type for view names does not work here; use `ModelAndView`",
                "+or even plain `Object` (with a `String` return value) instead.",
                "+====",
                "+",
                " The above examples use static methods in `MvcUriComponentsBuilder`. Internally they rely"
            ],
            "changed_files": [
                "src/asciidoc/web-mvc.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4da27c2a734e89bd44f5fcadacdce9f1a830d396",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522448294,
            "hunks": 25,
            "message": "Avoid unnecessary introspection on methods and meta-annotations Issue: SPR-16667",
            "diff": [
                "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "index c10e3d98c1..cf5eac08aa 100644",
                "--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -433,3 +433,4 @@ class ConfigurationClassEnhancer {",
                " \t\tpublic boolean isMatch(Method candidateMethod) {",
                "-\t\t\treturn BeanAnnotationHelper.isBeanAnnotated(candidateMethod);",
                "+\t\t\treturn (candidateMethod.getDeclaringClass() != Object.class &&",
                "+\t\t\t\t\tBeanAnnotationHelper.isBeanAnnotated(candidateMethod));",
                " \t\t}",
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "index 0bd78ec559..41b8303241 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "@@ -32,2 +32,3 @@ import org.springframework.core.BridgeMethodResolver;",
                " import org.springframework.lang.Nullable;",
                "+import org.springframework.util.CollectionUtils;",
                " import org.springframework.util.LinkedMultiValueMap;",
                "@@ -234,3 +235,2 @@ public class AnnotatedElementUtils {",
                " \t\t\tsearchWithGetSemantics(element, annotationType, annotationName, new SimpleAnnotationProcessor<Boolean>() {",
                "-",
                " \t\t\t\t@Override",
                "@@ -952,3 +952,3 @@ public class AnnotatedElementUtils {",
                " \t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "-\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) {",
                "+\t\t\tif (hasSearchableMetaAnnotations(currentAnnotationType, annotationType, annotationName)) {",
                " \t\t\t\tT result = searchWithGetSemantics(currentAnnotationType, annotationType,",
                "@@ -1085,6 +1085,6 @@ public class AnnotatedElementUtils {",
                "-\t\t\t\t// Search in meta annotations on local annotations",
                "+\t\t\t\t// Recursively search in meta-annotations",
                " \t\t\t\tfor (Annotation annotation : annotations) {",
                " \t\t\t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "-\t\t\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) {",
                "+\t\t\t\t\tif (hasSearchableMetaAnnotations(currentAnnotationType, annotationType, annotationName)) {",
                " \t\t\t\t\t\tT result = searchWithFindSemantics(currentAnnotationType, annotationType, annotationName,",
                "@@ -1103,3 +1103,3 @@ public class AnnotatedElementUtils {",
                "-\t\t\t\tif (aggregatedResults != null) {",
                "+\t\t\t\tif (!CollectionUtils.isEmpty(aggregatedResults)) {",
                " \t\t\t\t\t// Prepend to support top-down ordering within class hierarchies",
                "@@ -1110,2 +1110,3 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tMethod method = (Method) element;",
                "+\t\t\t\t\tT result;",
                "@@ -1113,6 +1114,8 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tMethod resolvedMethod = BridgeMethodResolver.findBridgedMethod(method);",
                "-\t\t\t\t\tT result = searchWithFindSemantics(resolvedMethod, annotationType, annotationName, containerType,",
                "-\t\t\t\t\t\t\tprocessor, visited, metaDepth);",
                "-\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\tif (resolvedMethod != method) {",
                "+\t\t\t\t\t\tresult = searchWithFindSemantics(resolvedMethod, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth);",
                "+\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\t}",
                " \t\t\t\t\t}",
                "@@ -1121,6 +1124,8 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tClass<?>[] ifcs = method.getDeclaringClass().getInterfaces();",
                "-\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName, containerType, processor,",
                "-\t\t\t\t\t\t\tvisited, metaDepth, ifcs);",
                "-\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\tif (ifcs.length > 0) {",
                "+\t\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName, containerType,",
                "+\t\t\t\t\t\t\t\tprocessor, visited, metaDepth, ifcs);",
                "+\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\t}",
                " \t\t\t\t\t}",
                "@@ -1191,6 +1196,6 @@ public class AnnotatedElementUtils {",
                "-\t\tfor (Class<?> iface : ifcs) {",
                "-\t\t\tif (AnnotationUtils.isInterfaceWithAnnotatedMethods(iface)) {",
                "+\t\tfor (Class<?> ifc : ifcs) {",
                "+\t\t\tif (AnnotationUtils.isInterfaceWithAnnotatedMethods(ifc)) {",
                " \t\t\t\ttry {",
                "-\t\t\t\t\tMethod equivalentMethod = iface.getMethod(method.getName(), method.getParameterTypes());",
                "+\t\t\t\t\tMethod equivalentMethod = ifc.getMethod(method.getName(), method.getParameterTypes());",
                " \t\t\t\t\tT result = searchWithFindSemantics(equivalentMethod, annotationType, annotationName, containerType,",
                "@@ -1210,2 +1215,22 @@ public class AnnotatedElementUtils {",
                "+\t/**",
                "+\t * Determine whether the current annotation type is generally expected to have",
                "+\t * meta-annotations of the specified annotation type that we're searching for,",
                "+\t * explicitly excluding some common cases that would never deliver any results.",
                "+\t */",
                "+\tprivate static boolean hasSearchableMetaAnnotations(Class<? extends Annotation> currentAnnotationType,",
                "+\t\t\t@Nullable Class<?> annotationType, @Nullable String annotationName) {",
                "+",
                "+\t\tif (AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+\t\tif (currentAnnotationType == Nullable.class || currentAnnotationType.getName().startsWith(\"java\")) {",
                "+\t\t\t// @Nullable and standard Java annotations are only meant to have standard Java meta-annotations",
                "+\t\t\t// -> not worth searching otherwise.",
                "+\t\t\treturn ((annotationType != null && annotationType.getName().startsWith(\"java\")) ||",
                "+\t\t\t\t\t(annotationName != null && annotationName.startsWith(\"java\")));",
                "+\t\t}",
                "+\t\treturn true;",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "index 2c296bbd5f..29b7d63c0a 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "@@ -42,2 +42,3 @@ import org.springframework.lang.Nullable;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.ClassUtils;",
                " import org.springframework.util.ConcurrentReferenceHashMap;",
                "@@ -149,3 +150,3 @@ public abstract class AnnotationUtils {",
                " \t * {@code find*()} methods instead.",
                "-\t * @param ann the Annotation to check",
                "+\t * @param annotation the Annotation to check",
                " \t * @param annotationType the annotation type to look for, both locally and as a meta-annotation",
                "@@ -156,7 +157,7 @@ public abstract class AnnotationUtils {",
                " \t@Nullable",
                "-\tpublic static <A extends Annotation> A getAnnotation(Annotation ann, Class<A> annotationType) {",
                "-\t\tif (annotationType.isInstance(ann)) {",
                "-\t\t\treturn synthesizeAnnotation((A) ann);",
                "+\tpublic static <A extends Annotation> A getAnnotation(Annotation annotation, Class<A> annotationType) {",
                "+\t\tif (annotationType.isInstance(annotation)) {",
                "+\t\t\treturn synthesizeAnnotation((A) annotation);",
                " \t\t}",
                "-\t\tClass<? extends Annotation> annotatedElement = ann.annotationType();",
                "+\t\tClass<? extends Annotation> annotatedElement = annotation.annotationType();",
                " \t\ttry {",
                "@@ -576,6 +577,6 @@ public abstract class AnnotationUtils {",
                " \t\tA annotation = null;",
                "-\t\tfor (Class<?> iface : ifcs) {",
                "-\t\t\tif (isInterfaceWithAnnotatedMethods(iface)) {",
                "+\t\tfor (Class<?> ifc : ifcs) {",
                "+\t\t\tif (isInterfaceWithAnnotatedMethods(ifc)) {",
                " \t\t\t\ttry {",
                "-\t\t\t\t\tMethod equivalentMethod = iface.getMethod(method.getName(), method.getParameterTypes());",
                "+\t\t\t\t\tMethod equivalentMethod = ifc.getMethod(method.getName(), method.getParameterTypes());",
                " \t\t\t\t\tannotation = getAnnotation(equivalentMethod, annotationType);",
                "@@ -593,4 +594,8 @@ public abstract class AnnotationUtils {",
                "-\tstatic boolean isInterfaceWithAnnotatedMethods(Class<?> iface) {",
                "-\t\tBoolean found = annotatedInterfaceCache.get(iface);",
                "+\tstatic boolean isInterfaceWithAnnotatedMethods(Class<?> ifc) {",
                "+\t\tif (ClassUtils.isJavaLanguageInterface(ifc)) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+",
                "+\t\tBoolean found = annotatedInterfaceCache.get(ifc);",
                " \t\tif (found != null) {",
                "@@ -599,5 +604,6 @@ public abstract class AnnotationUtils {",
                " \t\tfound = Boolean.FALSE;",
                "-\t\tfor (Method ifcMethod : iface.getMethods()) {",
                "+\t\tfor (Method ifcMethod : ifc.getMethods()) {",
                " \t\t\ttry {",
                "-\t\t\t\tif (ifcMethod.getAnnotations().length > 0) {",
                "+\t\t\t\tAnnotation[] anns = ifcMethod.getAnnotations();",
                "+\t\t\t\tif (anns.length > 1 || (anns.length == 1 && anns[0].annotationType() != Nullable.class)) {",
                " \t\t\t\t\tfound = Boolean.TRUE;",
                "@@ -610,3 +616,3 @@ public abstract class AnnotationUtils {",
                " \t\t}",
                "-\t\tannotatedInterfaceCache.put(iface, found);",
                "+\t\tannotatedInterfaceCache.put(ifc, found);",
                " \t\treturn found;",
                "diff --git a/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java b/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java",
                "index 664d477f9f..e69facab99 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java",
                "@@ -116,3 +116,4 @@ public class AnnotationTypeFilter extends AbstractTypeHierarchyTraversingFilter",
                " \t\t\tif (!this.annotationType.getName().startsWith(\"java\")) {",
                "-\t\t\t\t// Standard Java classes don't have non-standard annotations on them.",
                "+\t\t\t\t// Standard Java types do not have non-standard annotations on them ->",
                "+\t\t\t\t// skip any load attempt, in particular for Java language interfaces.",
                " \t\t\t\treturn false;"
            ],
            "changed_files": [
                "spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5d54adfb9a3582d1d89f5979c514601fe787685b",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522508639,
            "hunks": 46,
            "message": "Selective backport of annotation retrieval refinements (from 5.0.5) In particular AnnotationTypeFilter's ignoring of standard Java interfaces, AnnotationUtils.clearCache() and a few extra common classes in ClassUtils. Issue: SPR-16667 Issue: SPR-16675",
            "diff": [
                "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "index 294d765c1c..e26b1e23ff 100644",
                "--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -419,3 +419,4 @@ class ConfigurationClassEnhancer {",
                " \t\tpublic boolean isMatch(Method candidateMethod) {",
                "-\t\t\treturn BeanAnnotationHelper.isBeanAnnotated(candidateMethod);",
                "+\t\t\treturn (candidateMethod.getDeclaringClass() != Object.class &&",
                "+\t\t\t\t\tBeanAnnotationHelper.isBeanAnnotated(candidateMethod));",
                " \t\t}",
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "index 01fec3f0d4..75f42f02de 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "@@ -31,2 +31,3 @@ import org.springframework.core.BridgeMethodResolver;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.CollectionUtils;",
                " import org.springframework.util.LinkedMultiValueMap;",
                "@@ -242,3 +243,2 @@ public class AnnotatedElementUtils {",
                " \t\t\tsearchWithGetSemantics(element, annotationType, annotationName, new SimpleAnnotationProcessor<Boolean>() {",
                "-",
                " \t\t\t\t@Override",
                "@@ -272,3 +272,2 @@ public class AnnotatedElementUtils {",
                " \t\t}",
                "-",
                " \t\treturn Boolean.TRUE.equals(searchWithGetSemantics(element, annotationType, null, alwaysTrueAnnotationProcessor));",
                "@@ -617,3 +616,2 @@ public class AnnotatedElementUtils {",
                " \t\t}",
                "-",
                " \t\treturn Boolean.TRUE.equals(searchWithFindSemantics(element, annotationType, null, alwaysTrueAnnotationProcessor));",
                "@@ -875,4 +873,4 @@ public class AnnotatedElementUtils {",
                " \t */",
                "-\tprivate static <T> T searchWithGetSemantics(AnnotatedElement element, Class<? extends Annotation> annotationType,",
                "-\t\t\tString annotationName, Processor<T> processor) {",
                "+\tprivate static <T> T searchWithGetSemantics(AnnotatedElement element,",
                "+\t\t\tClass<? extends Annotation> annotationType, String annotationName, Processor<T> processor) {",
                "@@ -895,8 +893,9 @@ public class AnnotatedElementUtils {",
                " \t */",
                "-\tprivate static <T> T searchWithGetSemantics(AnnotatedElement element, Class<? extends Annotation> annotationType,",
                "-\t\t\tString annotationName, Class<? extends Annotation> containerType, Processor<T> processor) {",
                "+\tprivate static <T> T searchWithGetSemantics(AnnotatedElement element,",
                "+\t\t\tClass<? extends Annotation> annotationType, String annotationName,",
                "+\t\t\tClass<? extends Annotation> containerType, Processor<T> processor) {",
                " \t\ttry {",
                "-\t\t\treturn searchWithGetSemantics(element, annotationType, annotationName, containerType, processor,",
                "-\t\t\t\t\tnew HashSet<AnnotatedElement>(), 0);",
                "+\t\t\treturn searchWithGetSemantics(element, annotationType, annotationName,",
                "+\t\t\t\t\tcontainerType, processor, new HashSet<AnnotatedElement>(), 0);",
                " \t\t}",
                "@@ -925,4 +924,5 @@ public class AnnotatedElementUtils {",
                " \t */",
                "-\tprivate static <T> T searchWithGetSemantics(AnnotatedElement element, Class<? extends Annotation> annotationType,",
                "-\t\t\tString annotationName, Class<? extends Annotation> containerType, Processor<T> processor,",
                "+\tprivate static <T> T searchWithGetSemantics(AnnotatedElement element,",
                "+\t\t\tClass<? extends Annotation> annotationType, String annotationName,",
                "+\t\t\tClass<? extends Annotation> containerType, Processor<T> processor,",
                " \t\t\tSet<AnnotatedElement> visited, int metaDepth) {",
                "@@ -941,3 +941,3 @@ public class AnnotatedElementUtils {",
                "-\t\t\t\tif (element instanceof Class) { // otherwise getAnnotations doesn't return anything new",
                "+\t\t\t\tif (element instanceof Class) {  // otherwise getAnnotations does not return anything new",
                " \t\t\t\t\tList<Annotation> inheritedAnnotations = new ArrayList<Annotation>();",
                "@@ -988,5 +988,5 @@ public class AnnotatedElementUtils {",
                " \tprivate static <T> T searchWithGetSemanticsInAnnotations(AnnotatedElement element,",
                "-\t\t\tList<Annotation> annotations, Class<? extends Annotation> annotationType, String annotationName,",
                "-\t\t\tClass<? extends Annotation> containerType, Processor<T> processor, Set<AnnotatedElement> visited,",
                "-\t\t\tint metaDepth) {",
                "+\t\t\tList<Annotation> annotations, Class<? extends Annotation> annotationType,",
                "+\t\t\tString annotationName, Class<? extends Annotation> containerType,",
                "+\t\t\tProcessor<T> processor, Set<AnnotatedElement> visited, int metaDepth) {",
                "@@ -1056,3 +1056,4 @@ public class AnnotatedElementUtils {",
                " \t */",
                "-\tprivate static <T> T searchWithFindSemantics(AnnotatedElement element, Class<? extends Annotation> annotationType,",
                "+\tprivate static <T> T searchWithFindSemantics(AnnotatedElement element,",
                "+\t\t\tClass<? extends Annotation> annotationType,",
                " \t\t\tString annotationName, Processor<T> processor) {",
                "@@ -1076,4 +1077,5 @@ public class AnnotatedElementUtils {",
                " \t */",
                "-\tprivate static <T> T searchWithFindSemantics(AnnotatedElement element, Class<? extends Annotation> annotationType,",
                "-\t\t\tString annotationName, Class<? extends Annotation> containerType, Processor<T> processor) {",
                "+\tprivate static <T> T searchWithFindSemantics(AnnotatedElement element,",
                "+\t\t\tClass<? extends Annotation> annotationType, String annotationName,",
                "+\t\t\tClass<? extends Annotation> containerType, Processor<T> processor) {",
                "@@ -1085,4 +1087,4 @@ public class AnnotatedElementUtils {",
                " \t\ttry {",
                "-\t\t\treturn searchWithFindSemantics(",
                "-\t\t\t\t\telement, annotationType, annotationName, containerType, processor, new HashSet<AnnotatedElement>(), 0);",
                "+\t\t\treturn searchWithFindSemantics(element, annotationType, annotationName,",
                "+\t\t\t\t\tcontainerType, processor, new HashSet<AnnotatedElement>(), 0);",
                " \t\t}",
                "@@ -1122,29 +1124,31 @@ public class AnnotatedElementUtils {",
                " \t\t\t\tAnnotation[] annotations = element.getDeclaredAnnotations();",
                "-\t\t\t\tList<T> aggregatedResults = (processor.aggregates() ? new ArrayList<T>() : null);",
                "-",
                "-\t\t\t\t// Search in local annotations",
                "-\t\t\t\tfor (Annotation annotation : annotations) {",
                "-\t\t\t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "-\t\t\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) {",
                "-\t\t\t\t\t\tif (currentAnnotationType == annotationType ||",
                "-\t\t\t\t\t\t\t\tcurrentAnnotationType.getName().equals(annotationName) ||",
                "-\t\t\t\t\t\t\t\tprocessor.alwaysProcesses()) {",
                "-\t\t\t\t\t\t\tT result = processor.process(element, annotation, metaDepth);",
                "-\t\t\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\t\t\tif (processor.aggregates() && metaDepth == 0) {",
                "-\t\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "-\t\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\t\telse {",
                "-\t\t\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\tif (annotations.length > 0) {",
                "+\t\t\t\t\tList<T> aggregatedResults = (processor.aggregates() ? new ArrayList<T>() : null);",
                "+",
                "+\t\t\t\t\t// Search in local annotations",
                "+\t\t\t\t\tfor (Annotation annotation : annotations) {",
                "+\t\t\t\t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "+\t\t\t\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) {",
                "+\t\t\t\t\t\t\tif (currentAnnotationType == annotationType ||",
                "+\t\t\t\t\t\t\t\t\tcurrentAnnotationType.getName().equals(annotationName) ||",
                "+\t\t\t\t\t\t\t\t\tprocessor.alwaysProcesses()) {",
                "+\t\t\t\t\t\t\t\tT result = processor.process(element, annotation, metaDepth);",
                "+\t\t\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\t\t\tif (aggregatedResults != null && metaDepth == 0) {",
                "+\t\t\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "+\t\t\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t\t\t\telse {",
                "+\t\t\t\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\t\t\t\t}",
                " \t\t\t\t\t\t\t\t}",
                " \t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t// Repeatable annotations in container?",
                "-\t\t\t\t\t\telse if (currentAnnotationType == containerType) {",
                "-\t\t\t\t\t\t\tfor (Annotation contained : getRawAnnotationsFromContainer(element, annotation)) {",
                "-\t\t\t\t\t\t\t\tT result = processor.process(element, contained, metaDepth);",
                "-\t\t\t\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\t\t\t\t// No need to post-process since repeatable annotations within a",
                "-\t\t\t\t\t\t\t\t\t// container cannot be composed annotations.",
                "-\t\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "+\t\t\t\t\t\t\t// Repeatable annotations in container?",
                "+\t\t\t\t\t\t\telse if (currentAnnotationType == containerType) {",
                "+\t\t\t\t\t\t\t\tfor (Annotation contained : getRawAnnotationsFromContainer(element, annotation)) {",
                "+\t\t\t\t\t\t\t\t\tT result = processor.process(element, contained, metaDepth);",
                "+\t\t\t\t\t\t\t\t\tif (aggregatedResults != null && result != null) {",
                "+\t\t\t\t\t\t\t\t\t\t// No need to post-process since repeatable annotations within a",
                "+\t\t\t\t\t\t\t\t\t\t// container cannot be composed annotations.",
                "+\t\t\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "+\t\t\t\t\t\t\t\t\t}",
                " \t\t\t\t\t\t\t\t}",
                "@@ -1153,17 +1157,17 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\t// Search in meta annotations on local annotations",
                "-\t\t\t\tfor (Annotation annotation : annotations) {",
                "-\t\t\t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "-\t\t\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) {",
                "-\t\t\t\t\t\tT result = searchWithFindSemantics(currentAnnotationType, annotationType, annotationName,",
                "-\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth + 1);",
                "-\t\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\t\tprocessor.postProcess(currentAnnotationType, annotation, result);",
                "-\t\t\t\t\t\t\tif (processor.aggregates() && metaDepth == 0) {",
                "-\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "-\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\telse {",
                "-\t\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t// Recursively search in meta-annotations",
                "+\t\t\t\t\tfor (Annotation annotation : annotations) {",
                "+\t\t\t\t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "+\t\t\t\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) {",
                "+\t\t\t\t\t\t\tT result = searchWithFindSemantics(currentAnnotationType, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth + 1);",
                "+\t\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\t\tprocessor.postProcess(currentAnnotationType, annotation, result);",
                "+\t\t\t\t\t\t\t\tif (aggregatedResults != null && metaDepth == 0) {",
                "+\t\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "+\t\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t\t\telse {",
                "+\t\t\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\t\t\t}",
                " \t\t\t\t\t\t\t}",
                "@@ -1171,7 +1175,7 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\tif (processor.aggregates()) {",
                "-\t\t\t\t\t// Prepend to support top-down ordering within class hierarchies",
                "-\t\t\t\t\tprocessor.getAggregatedResults().addAll(0, aggregatedResults);",
                "+\t\t\t\t\tif (!CollectionUtils.isEmpty(aggregatedResults)) {",
                "+\t\t\t\t\t\t// Prepend to support top-down ordering within class hierarchies",
                "+\t\t\t\t\t\tprocessor.getAggregatedResults().addAll(0, aggregatedResults);",
                "+\t\t\t\t\t}",
                " \t\t\t\t}",
                "@@ -1180,2 +1184,3 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tMethod method = (Method) element;",
                "+\t\t\t\t\tT result;",
                "@@ -1183,6 +1188,8 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tMethod resolvedMethod = BridgeMethodResolver.findBridgedMethod(method);",
                "-\t\t\t\t\tT result = searchWithFindSemantics(resolvedMethod, annotationType, annotationName, containerType,",
                "-\t\t\t\t\t\t\tprocessor, visited, metaDepth);",
                "-\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\tif (resolvedMethod != method) {",
                "+\t\t\t\t\t\tresult = searchWithFindSemantics(resolvedMethod, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth);",
                "+\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\t}",
                " \t\t\t\t\t}",
                "@@ -1191,6 +1198,8 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tClass<?>[] ifcs = method.getDeclaringClass().getInterfaces();",
                "-\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName, containerType, processor,",
                "-\t\t\t\t\t\t\tvisited, metaDepth, ifcs);",
                "-\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\tif (ifcs.length > 0) {",
                "+\t\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth, ifcs);",
                "+\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\t}",
                " \t\t\t\t\t}",
                "@@ -1204,3 +1213,2 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\t\t}",
                "-",
                " \t\t\t\t\t\ttry {",
                "@@ -1217,6 +1225,5 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\t\t}",
                "-",
                " \t\t\t\t\t\t// Search on interfaces declared on superclass",
                "-\t\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName, containerType, processor,",
                "-\t\t\t\t\t\t\t\tvisited, metaDepth, clazz.getInterfaces());",
                "+\t\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth, clazz.getInterfaces());",
                " \t\t\t\t\t\tif (result != null) {",
                "@@ -1231,4 +1238,4 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tfor (Class<?> ifc : clazz.getInterfaces()) {",
                "-\t\t\t\t\t\tT result = searchWithFindSemantics(ifc, annotationType, annotationName, containerType,",
                "-\t\t\t\t\t\t\t\tprocessor, visited, metaDepth);",
                "+\t\t\t\t\t\tT result = searchWithFindSemantics(ifc, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth);",
                " \t\t\t\t\t\tif (result != null) {",
                "@@ -1241,4 +1248,4 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tif (superclass != null && Object.class != superclass) {",
                "-\t\t\t\t\t\tT result = searchWithFindSemantics(superclass, annotationType, annotationName, containerType,",
                "-\t\t\t\t\t\t\t\tprocessor, visited, metaDepth);",
                "+\t\t\t\t\t\tT result = searchWithFindSemantics(superclass, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth);",
                " \t\t\t\t\t\tif (result != null) {",
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "index ed091d85d6..971568dab0 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "@@ -147,3 +147,3 @@ public abstract class AnnotationUtils {",
                " \t * {@code find*()} methods instead.",
                "-\t * @param ann the Annotation to check",
                "+\t * @param annotation the Annotation to check",
                " \t * @param annotationType the annotation type to look for, both locally and as a meta-annotation",
                "@@ -153,7 +153,7 @@ public abstract class AnnotationUtils {",
                " \t@SuppressWarnings(\"unchecked\")",
                "-\tpublic static <A extends Annotation> A getAnnotation(Annotation ann, Class<A> annotationType) {",
                "-\t\tif (annotationType.isInstance(ann)) {",
                "-\t\t\treturn synthesizeAnnotation((A) ann);",
                "+\tpublic static <A extends Annotation> A getAnnotation(Annotation annotation, Class<A> annotationType) {",
                "+\t\tif (annotationType.isInstance(annotation)) {",
                "+\t\t\treturn synthesizeAnnotation((A) annotation);",
                " \t\t}",
                "-\t\tClass<? extends Annotation> annotatedElement = ann.annotationType();",
                "+\t\tClass<? extends Annotation> annotatedElement = annotation.annotationType();",
                " \t\ttry {",
                "@@ -570,3 +570,2 @@ public abstract class AnnotationUtils {",
                " \t\t\tresult = findAnnotation((AnnotatedElement) resolvedMethod, annotationType);",
                "-",
                " \t\t\tif (result == null) {",
                "@@ -605,6 +604,6 @@ public abstract class AnnotationUtils {",
                " \t\tA annotation = null;",
                "-\t\tfor (Class<?> iface : ifcs) {",
                "-\t\t\tif (isInterfaceWithAnnotatedMethods(iface)) {",
                "+\t\tfor (Class<?> ifc : ifcs) {",
                "+\t\t\tif (isInterfaceWithAnnotatedMethods(ifc)) {",
                " \t\t\t\ttry {",
                "-\t\t\t\t\tMethod equivalentMethod = iface.getMethod(method.getName(), method.getParameterTypes());",
                "+\t\t\t\t\tMethod equivalentMethod = ifc.getMethod(method.getName(), method.getParameterTypes());",
                " \t\t\t\t\tannotation = getAnnotation(equivalentMethod, annotationType);",
                "@@ -622,4 +621,4 @@ public abstract class AnnotationUtils {",
                "-\tstatic boolean isInterfaceWithAnnotatedMethods(Class<?> iface) {",
                "-\t\tBoolean found = annotatedInterfaceCache.get(iface);",
                "+\tstatic boolean isInterfaceWithAnnotatedMethods(Class<?> ifc) {",
                "+\t\tBoolean found = annotatedInterfaceCache.get(ifc);",
                " \t\tif (found != null) {",
                "@@ -628,3 +627,3 @@ public abstract class AnnotationUtils {",
                " \t\tfound = Boolean.FALSE;",
                "-\t\tfor (Method ifcMethod : iface.getMethods()) {",
                "+\t\tfor (Method ifcMethod : ifc.getMethods()) {",
                " \t\t\ttry {",
                "@@ -639,3 +638,3 @@ public abstract class AnnotationUtils {",
                " \t\t}",
                "-\t\tannotatedInterfaceCache.put(iface, found);",
                "+\t\tannotatedInterfaceCache.put(ifc, found);",
                " \t\treturn found;",
                "@@ -1288,3 +1287,2 @@ public abstract class AnnotationUtils {",
                " \t\t\t\tboolean valuePresent = (value != null && !(value instanceof DefaultValueHolder));",
                "-",
                " \t\t\t\tfor (String aliasedAttributeName : aliasMap.get(attributeName)) {",
                "@@ -1293,6 +1291,4 @@ public abstract class AnnotationUtils {",
                " \t\t\t\t\t}",
                "-",
                " \t\t\t\t\tObject aliasedValue = attributes.get(aliasedAttributeName);",
                " \t\t\t\t\tboolean aliasPresent = (aliasedValue != null && !(aliasedValue instanceof DefaultValueHolder));",
                "-",
                " \t\t\t\t\t// Something to validate or replace with an alias?",
                "@@ -1921,2 +1917,16 @@ public abstract class AnnotationUtils {",
                "+\t/**",
                "+\t * Clear the internal annotation metadata cache.",
                "+\t * @since 4.3.15",
                "+\t */",
                "+\tpublic static void clearCache() {",
                "+\t\tfindAnnotationCache.clear();",
                "+\t\tmetaPresentCache.clear();",
                "+\t\tannotatedInterfaceCache.clear();",
                "+\t\tsynthesizableCache.clear();",
                "+\t\tattributeAliasesCache.clear();",
                "+\t\tattributeMethodsCache.clear();",
                "+\t\taliasDescriptorCache.clear();",
                "+\t}",
                "+",
                "diff --git a/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java b/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java",
                "index 2b2faa4d05..9aaea29032 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2015 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -72,3 +72,5 @@ public class AnnotationTypeFilter extends AbstractTypeHierarchyTraversingFilter",
                " \t */",
                "-\tpublic AnnotationTypeFilter(Class<? extends Annotation> annotationType, boolean considerMetaAnnotations, boolean considerInterfaces) {",
                "+\tpublic AnnotationTypeFilter(",
                "+\t\t\tClass<? extends Annotation> annotationType, boolean considerMetaAnnotations, boolean considerInterfaces) {",
                "+",
                " \t\tsuper(annotationType.isAnnotationPresent(Inherited.class), considerInterfaces);",
                "@@ -101,2 +103,7 @@ public class AnnotationTypeFilter extends AbstractTypeHierarchyTraversingFilter",
                " \t\telse if (typeName.startsWith(\"java\")) {",
                "+\t\t\tif (!this.annotationType.getName().startsWith(\"java\")) {",
                "+\t\t\t\t// Standard Java types do not have non-standard annotations on them ->",
                "+\t\t\t\t// skip any load attempt, in particular for Java language interfaces.",
                "+\t\t\t\treturn false;",
                "+\t\t\t}",
                " \t\t\ttry {",
                "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "index 07481ed13b..89418ced65 100644",
                "--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "@@ -114,3 +114,3 @@ public abstract class ClassUtils {",
                "-\t\tSet<Class<?>> primitiveTypes = new HashSet<Class<?>>(32);",
                "+\t\tSet<Class<?>> primitiveTypes = new HashSet<Class<?>>(64);",
                " \t\tprimitiveTypes.addAll(primitiveWrapperTypeMap.values());",
                "@@ -127,5 +127,6 @@ public abstract class ClassUtils {",
                " \t\tregisterCommonClasses(Number.class, Number[].class, String.class, String[].class,",
                "-\t\t\t\tObject.class, Object[].class, Class.class, Class[].class);",
                "+\t\t\t\tClass.class, Class[].class, Object.class, Object[].class);",
                " \t\tregisterCommonClasses(Throwable.class, Exception.class, RuntimeException.class,",
                " \t\t\t\tError.class, StackTraceElement.class, StackTraceElement[].class);",
                "+\t\tregisterCommonClasses(Enum.class, Iterable.class, Cloneable.class, Comparable.class);",
                " \t}"
            ],
            "changed_files": [
                "spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java",
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java",
                "spring-core/src/main/java/org/springframework/util/ClassUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.15.RELEASE",
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6a34ca24ceb031d45fb9f6ce4847eaeb82774901",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523452172,
            "hunks": 1,
            "message": "Restore org.springframework.cglib.core.KeyFactoryCustomizer.class Issue: SPR-15859",
            "diff": [
                "diff --git a/spring-core/spring-core.gradle b/spring-core/spring-core.gradle",
                "index dd190d50c2..4eb3faf008 100644",
                "--- a/spring-core/spring-core.gradle",
                "+++ b/spring-core/spring-core.gradle",
                "@@ -101,3 +101,4 @@ jar {",
                " \t\texclude \"org/springframework/cglib/core/AbstractClassGenerator*.class\"",
                "-\t\texclude \"org/springframework/cglib/core/KeyFactory*.class\"",
                "+\t\texclude \"org/springframework/cglib/core/KeyFactory.class\"",
                "+\t\texclude \"org/springframework/cglib/core/KeyFactory\\$*.class\"",
                " \t\texclude \"org/springframework/cglib/core/ReflectUtils*.class\""
            ],
            "changed_files": [
                "spring-core/spring-core.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c82bf0b004d934af1af5917c510d641165b2e2cc",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523044139,
            "hunks": 1,
            "message": "Upgrade to Mockito 2.17",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index db1e135374..c14c20e817 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -147,3 +147,3 @@ configure(allprojects) { project ->",
                " \t\t}",
                "-\t\ttestCompile(\"org.mockito:mockito-core:2.12.0\") {",
                "+\t\ttestCompile(\"org.mockito:mockito-core:2.17.0\") {",
                " \t\t\texclude group:'org.hamcrest', module:'hamcrest-core'"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4454ffd2b103b939a890ea7330bf192a32eec622",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522509464,
            "hunks": 3,
            "message": "Replace remaining use of block operator",
            "diff": [
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "index fe6057cf03..216ecf7a0c 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -23,2 +23,4 @@ import java.util.stream.Collectors;",
                "+import reactor.core.publisher.MonoProcessor;",
                "+",
                " import org.springframework.core.DefaultParameterNameDiscoverer;",
                "@@ -100,4 +102,17 @@ public class SyncInvocableHandlerMethod extends HandlerMethod {",
                "-\t\t// This will not block with only sync resolvers allowed",
                "-\t\treturn this.delegate.invoke(exchange, bindingContext, providedArgs).block();",
                "+\t\tMonoProcessor<HandlerResult> processor = MonoProcessor.create();",
                "+\t\tthis.delegate.invoke(exchange, bindingContext, providedArgs).subscribeWith(processor);",
                "+",
                "+\t\tif (processor.isTerminated()) {",
                "+\t\t\tThrowable error = processor.getError();",
                "+\t\t\tif (error != null) {",
                "+\t\t\t\tthrow (RuntimeException) error;",
                "+\t\t\t}",
                "+\t\t\treturn processor.peek();",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\t// Should never happen...",
                "+\t\t\tthrow new IllegalStateException(",
                "+\t\t\t\t\t\"SyncInvocableHandlerMethod should have completed synchronously.\");",
                "+\t\t}",
                " \t}"
            ],
            "changed_files": [
                "spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "17c16eaa9efac10d04db8c61146c2c93dcdd2ee1",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522377661,
            "hunks": 4,
            "message": "Upgrade to Gradle 4.6 Issue: SPR-16475",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index cd4b629afc..0a2bf09846 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -285,3 +285,3 @@ configure(rootProject) {",
                " \t\tdescription = \"Generates gradlew[.bat] scripts\"",
                "-\t\tgradleVersion = '4.4.1'",
                "+\t\tgradleVersion = '4.6'",
                "diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar",
                "index 01b8bf6b1f..f6b961fd5a 100644",
                "Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ",
                "diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties",
                "index 2c2bbe5f9a..bf3de21830 100644",
                "--- a/gradle/wrapper/gradle-wrapper.properties",
                "+++ b/gradle/wrapper/gradle-wrapper.properties",
                "@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME",
                " distributionPath=wrapper/dists",
                "+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-bin.zip",
                " zipStoreBase=GRADLE_USER_HOME",
                " zipStorePath=wrapper/dists",
                "-distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4.1-bin.zip",
                "diff --git a/spring-beans/spring-beans.gradle b/spring-beans/spring-beans.gradle",
                "index ceb20fb7f8..a93a798118 100644",
                "--- a/spring-beans/spring-beans.gradle",
                "+++ b/spring-beans/spring-beans.gradle",
                "@@ -29,3 +29,4 @@ compileGroovy {",
                " // We need to redefine dependencies to break task cycles.",
                "-compileGroovy.dependsOn = compileGroovy.taskDependencies.values - 'compileJava'",
                "+def deps = compileGroovy.taskDependencies.immutableValues + compileGroovy.taskDependencies.mutableValues",
                "+compileGroovy.dependsOn = deps - 'compileJava'",
                " compileKotlin.dependsOn(compileGroovy)"
            ],
            "changed_files": [
                "build.gradle",
                "gradle/wrapper/gradle-wrapper.jar",
                "gradle/wrapper/gradle-wrapper.properties",
                "spring-beans/spring-beans.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5d0700b9360399802bf929a0b7b845cb6bb73813",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522750863,
            "hunks": 1,
            "message": "AnnotationUtils.annotatedInterfaceCache available as deprecated field Issue: SPR-16675",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "index 26ac630d24..ea3facd7c9 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "@@ -128,2 +128,5 @@ public abstract class AnnotationUtils {",
                "+\t@Deprecated  // just here for older tool versions trying to reflectively clear the cache",
                "+\tprivate static final Map<Class<?>, ?> annotatedInterfaceCache = annotatedBaseTypeCache;",
                "+",
                " \tprivate static final Map<Class<? extends Annotation>, Boolean> synthesizableCache ="
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a6fd9a77251e046b592c5672e81b67bf4695721a",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522917003,
            "hunks": 2,
            "message": "Upgrade to FreeMarker 2.3.28 and Netty 4.1.23",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 0a2bf09846..db1e135374 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -44,3 +44,3 @@ configure(allprojects) { project ->",
                " \text.aspectjVersion       = \"1.8.13\"",
                "-\text.freemarkerVersion    = \"2.3.27-incubating\"",
                "+\text.freemarkerVersion    = \"2.3.28\"",
                " \text.groovyVersion        = \"2.4.15\"",
                "@@ -54,3 +54,3 @@ configure(allprojects) { project ->",
                " \text.log4jVersion         = \"2.11.0\"",
                "-\text.nettyVersion         = \"4.1.22.Final\"",
                "+\text.nettyVersion         = \"4.1.23.Final\"",
                " \text.reactorVersion       = \"Bismuth-SR8\""
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7be4193933783d7fbc12660fb603c5192615cefa",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522763112,
            "hunks": 1,
            "message": "Upgrade to Reactor Bismuth-SR8",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 8da0638858..f7e354b271 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -55,3 +55,3 @@ configure(allprojects) { project ->",
                " \text.nettyVersion         = \"4.1.22.Final\"",
                "-\text.reactorVersion       = \"Bismuth-BUILD-SNAPSHOT\"",
                "+\text.reactorVersion       = \"Bismuth-SR8\"",
                " \text.rxjavaVersion        = \"1.3.8\""
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0efa7a05ad71ee33d89800810932760a5e8d2271",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523559326,
            "hunks": 131,
            "message": "ClassUtils.isCacheSafe delegates to isVisible for resolving classes Issue: SPR-16714",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "index 61c54a84a1..8cbd7024cb 100644",
                "--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java",
                "@@ -305,3 +305,5 @@ public abstract class ClassUtils {",
                " \t */",
                "-\tpublic static Class<?> resolveClassName(String className, @Nullable ClassLoader classLoader) throws IllegalArgumentException {",
                "+\tpublic static Class<?> resolveClassName(String className, @Nullable ClassLoader classLoader)",
                "+\t\t\tthrows IllegalArgumentException {",
                "+",
                " \t\ttry {",
                "@@ -317,24 +319,2 @@ public abstract class ClassUtils {",
                "-\t/**",
                "-\t * Resolve the given class name as primitive class, if appropriate,",
                "-\t * according to the JVM's naming rules for primitive classes.",
                "-\t * <p>Also supports the JVM's internal class names for primitive arrays.",
                "-\t * Does <i>not</i> support the \"[]\" suffix notation for primitive arrays;",
                "-\t * this is only supported by {@link #forName(String, ClassLoader)}.",
                "-\t * @param name the name of the potentially primitive class",
                "-\t * @return the primitive class, or {@code null} if the name does not denote",
                "-\t * a primitive class or primitive array class",
                "-\t */",
                "-\t@Nullable",
                "-\tpublic static Class<?> resolvePrimitiveClassName(@Nullable String name) {",
                "-\t\tClass<?> result = null;",
                "-\t\t// Most class names will be quite long, considering that they",
                "-\t\t// SHOULD sit in a package, so a length check is worthwhile.",
                "-\t\tif (name != null && name.length() <= 8) {",
                "-\t\t\t// Could be a primitive - likely.",
                "-\t\t\tresult = primitiveTypeNameMap.get(name);",
                "-\t\t}",
                "-\t\treturn result;",
                "-\t}",
                "-",
                " \t/**",
                "@@ -345,3 +325,3 @@ public abstract class ClassUtils {",
                " \t * @param classLoader the class loader to use",
                "-\t * (may be {@code null}, which indicates the default class loader)",
                "+\t * (may be {@code null} which indicates the default class loader)",
                " \t * @return whether the specified class is present",
                "@@ -360,38 +340,19 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the user-defined class for the given instance: usually simply",
                "-\t * the class of the given instance, but the original class in case of a",
                "-\t * CGLIB-generated subclass.",
                "-\t * @param instance the instance to check",
                "-\t * @return the user-defined class",
                "-\t */",
                "-\tpublic static Class<?> getUserClass(Object instance) {",
                "-\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "-\t\treturn getUserClass(instance.getClass());",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Return the user-defined class for the given class: usually simply the given",
                "-\t * class, but the original class in case of a CGLIB-generated subclass.",
                "-\t * @param clazz the class to check",
                "-\t * @return the user-defined class",
                "+\t * Check whether the given class is visible in the given ClassLoader.",
                "+\t * @param clazz the class to check (typically an interface)",
                "+\t * @param classLoader the ClassLoader to check against",
                "+\t * (may be {@code null} in which case this method will always return {@code true})",
                " \t */",
                "-\tpublic static Class<?> getUserClass(Class<?> clazz) {",
                "-\t\tif (clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {",
                "-\t\t\tClass<?> superclass = clazz.getSuperclass();",
                "-\t\t\tif (superclass != null && Object.class != superclass) {",
                "-\t\t\t\treturn superclass;",
                "-\t\t\t}",
                "+\tpublic static boolean isVisible(Class<?> clazz, @Nullable ClassLoader classLoader) {",
                "+\t\tif (classLoader == null) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+\t\ttry {",
                "+\t\t\treturn (clazz == classLoader.loadClass(clazz.getName()));",
                "+\t\t\t// Else: different class with same name found",
                "+\t\t}",
                "+\t\tcatch (ClassNotFoundException ex) {",
                "+\t\t\t// No corresponding class found at all",
                "+\t\t\treturn false;",
                " \t\t}",
                "-\t\treturn clazz;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Determine if the supplied class is an <em>inner class</em>,",
                "-\t * i.e. a non-static member of an enclosing class.",
                "-\t * @return {@code true} if the supplied class is an inner class",
                "-\t * @since 5.0.5",
                "-\t * @see Class#isMemberClass()",
                "-\t */",
                "-\tpublic static boolean isInnerClass(Class<?> clazz) {",
                "-\t\treturn (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers()));",
                " \t}",
                "@@ -403,2 +364,3 @@ public abstract class ClassUtils {",
                " \t * @param classLoader the ClassLoader to potentially cache metadata in",
                "+\t * (may be {@code null} which indicates the system class loader)",
                " \t */",
                "@@ -435,29 +397,27 @@ public abstract class ClassUtils {",
                "-\t\ttry {",
                "-\t\t\t// Fallback for ClassLoaders without parent/child relationship:",
                "-\t\t\t// safe if same Class can be loaded from given ClassLoader",
                "-\t\t\treturn (clazz == forName(clazz.getName(), classLoader));",
                "-\t\t}",
                "-\t\tcatch (ClassNotFoundException ex) {",
                "-\t\t\treturn false;",
                "-\t\t}",
                "+\t\t// Fallback for ClassLoaders without parent/child relationship:",
                "+\t\t// safe if same Class can be loaded from given ClassLoader",
                "+\t\treturn (classLoader != null && isVisible(clazz, classLoader));",
                " \t}",
                "-",
                " \t/**",
                "-\t * Get the class name without the qualified package name.",
                "-\t * @param className the className to get the short name for",
                "-\t * @return the class name of the class without the package name",
                "-\t * @throws IllegalArgumentException if the className is empty",
                "+\t * Resolve the given class name as primitive class, if appropriate,",
                "+\t * according to the JVM's naming rules for primitive classes.",
                "+\t * <p>Also supports the JVM's internal class names for primitive arrays.",
                "+\t * Does <i>not</i> support the \"[]\" suffix notation for primitive arrays;",
                "+\t * this is only supported by {@link #forName(String, ClassLoader)}.",
                "+\t * @param name the name of the potentially primitive class",
                "+\t * @return the primitive class, or {@code null} if the name does not denote",
                "+\t * a primitive class or primitive array class",
                " \t */",
                "-\tpublic static String getShortName(String className) {",
                "-\t\tAssert.hasLength(className, \"Class name must not be empty\");",
                "-\t\tint lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\tint nameEndIndex = className.indexOf(CGLIB_CLASS_SEPARATOR);",
                "-\t\tif (nameEndIndex == -1) {",
                "-\t\t\tnameEndIndex = className.length();",
                "+\t@Nullable",
                "+\tpublic static Class<?> resolvePrimitiveClassName(@Nullable String name) {",
                "+\t\tClass<?> result = null;",
                "+\t\t// Most class names will be quite long, considering that they",
                "+\t\t// SHOULD sit in a package, so a length check is worthwhile.",
                "+\t\tif (name != null && name.length() <= 8) {",
                "+\t\t\t// Could be a primitive - likely.",
                "+\t\t\tresult = primitiveTypeNameMap.get(name);",
                " \t\t}",
                "-\t\tString shortName = className.substring(lastDotIndex + 1, nameEndIndex);",
                "-\t\tshortName = shortName.replace(INNER_CLASS_SEPARATOR, PACKAGE_SEPARATOR);",
                "-\t\treturn shortName;",
                "+\t\treturn result;",
                " \t}",
                "@@ -465,8 +425,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Get the class name without the qualified package name.",
                "-\t * @param clazz the class to get the short name for",
                "-\t * @return the class name of the class without the package name",
                "+\t * Check if the given class represents a primitive wrapper,",
                "+\t * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.",
                "+\t * @param clazz the class to check",
                "+\t * @return whether the given class is a primitive wrapper class",
                " \t */",
                "-\tpublic static String getShortName(Class<?> clazz) {",
                "-\t\treturn getShortName(getQualifiedName(clazz));",
                "+\tpublic static boolean isPrimitiveWrapper(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\treturn primitiveWrapperTypeMap.containsKey(clazz);",
                " \t}",
                "@@ -474,13 +436,11 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the short string name of a Java class in uncapitalized JavaBeans",
                "-\t * property format. Strips the outer class name in case of an inner class.",
                "-\t * @param clazz the class",
                "-\t * @return the short name rendered in a standard JavaBeans property format",
                "-\t * @see java.beans.Introspector#decapitalize(String)",
                "+\t * Check if the given class represents a primitive (i.e. boolean, byte,",
                "+\t * char, short, int, long, float, or double) or a primitive wrapper",
                "+\t * (i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double).",
                "+\t * @param clazz the class to check",
                "+\t * @return whether the given class is a primitive or primitive wrapper class",
                " \t */",
                "-\tpublic static String getShortNameAsProperty(Class<?> clazz) {",
                "-\t\tString shortName = getShortName(clazz);",
                "-\t\tint dotIndex = shortName.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\tshortName = (dotIndex != -1 ? shortName.substring(dotIndex + 1) : shortName);",
                "-\t\treturn Introspector.decapitalize(shortName);",
                "+\tpublic static boolean isPrimitiveOrWrapper(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\treturn (clazz.isPrimitive() || isPrimitiveWrapper(clazz));",
                " \t}",
                "@@ -488,12 +448,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine the name of the class file, relative to the containing",
                "-\t * package: e.g. \"String.class\"",
                "-\t * @param clazz the class",
                "-\t * @return the file name of the \".class\" file",
                "+\t * Check if the given class represents an array of primitives,",
                "+\t * i.e. boolean, byte, char, short, int, long, float, or double.",
                "+\t * @param clazz the class to check",
                "+\t * @return whether the given class is a primitive array class",
                " \t */",
                "-\tpublic static String getClassFileName(Class<?> clazz) {",
                "+\tpublic static boolean isPrimitiveArray(Class<?> clazz) {",
                " \t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tString className = clazz.getName();",
                "-\t\tint lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\treturn className.substring(lastDotIndex + 1) + CLASS_FILE_SUFFIX;",
                "+\t\treturn (clazz.isArray() && clazz.getComponentType().isPrimitive());",
                " \t}",
                "@@ -501,11 +459,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine the name of the package of the given class,",
                "-\t * e.g. \"java.lang\" for the {@code java.lang.String} class.",
                "-\t * @param clazz the class",
                "-\t * @return the package name, or the empty String if the class",
                "-\t * is defined in the default package",
                "+\t * Check if the given class represents an array of primitive wrappers,",
                "+\t * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.",
                "+\t * @param clazz the class to check",
                "+\t * @return whether the given class is a primitive wrapper array class",
                " \t */",
                "-\tpublic static String getPackageName(Class<?> clazz) {",
                "+\tpublic static boolean isPrimitiveWrapperArray(Class<?> clazz) {",
                " \t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn getPackageName(clazz.getName());",
                "+\t\treturn (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));",
                " \t}",
                "@@ -513,12 +470,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine the name of the package of the given fully-qualified class name,",
                "-\t * e.g. \"java.lang\" for the {@code java.lang.String} class name.",
                "-\t * @param fqClassName the fully-qualified class name",
                "-\t * @return the package name, or the empty String if the class",
                "-\t * is defined in the default package",
                "+\t * Resolve the given class if it is a primitive class,",
                "+\t * returning the corresponding primitive wrapper type instead.",
                "+\t * @param clazz the class to check",
                "+\t * @return the original class, or a primitive wrapper for the original primitive type",
                " \t */",
                "-\tpublic static String getPackageName(String fqClassName) {",
                "-\t\tAssert.notNull(fqClassName, \"Class name must not be null\");",
                "-\t\tint lastDotIndex = fqClassName.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\treturn (lastDotIndex != -1 ? fqClassName.substring(0, lastDotIndex) : \"\");",
                "+\tpublic static Class<?> resolvePrimitiveIfNecessary(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\treturn (clazz.isPrimitive() && clazz != void.class ? primitiveTypeToWrapperMap.get(clazz) : clazz);",
                " \t}",
                "@@ -526,10 +481,29 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the qualified name of the given class: usually simply",
                "-\t * the class name, but component type class name + \"[]\" for arrays.",
                "-\t * @param clazz the class",
                "-\t * @return the qualified name of the class",
                "+\t * Check if the right-hand side type may be assigned to the left-hand side",
                "+\t * type, assuming setting by reflection. Considers primitive wrapper",
                "+\t * classes as assignable to the corresponding primitive types.",
                "+\t * @param lhsType the target type",
                "+\t * @param rhsType the value type that should be assigned to the target type",
                "+\t * @return if the target type is assignable from the value type",
                "+\t * @see TypeUtils#isAssignable",
                " \t */",
                "-\tpublic static String getQualifiedName(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn clazz.getTypeName();",
                "+\tpublic static boolean isAssignable(Class<?> lhsType, Class<?> rhsType) {",
                "+\t\tAssert.notNull(lhsType, \"Left-hand side type must not be null\");",
                "+\t\tAssert.notNull(rhsType, \"Right-hand side type must not be null\");",
                "+\t\tif (lhsType.isAssignableFrom(rhsType)) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+\t\tif (lhsType.isPrimitive()) {",
                "+\t\t\tClass<?> resolvedPrimitive = primitiveWrapperTypeMap.get(rhsType);",
                "+\t\t\tif (lhsType == resolvedPrimitive) {",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\tClass<?> resolvedWrapper = primitiveTypeToWrapperMap.get(rhsType);",
                "+\t\t\tif (resolvedWrapper != null && lhsType.isAssignableFrom(resolvedWrapper)) {",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\treturn false;",
                " \t}",
                "@@ -537,9 +511,12 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the qualified name of the given method, consisting of",
                "-\t * fully qualified interface/class name + \".\" + method name.",
                "-\t * @param method the method",
                "-\t * @return the qualified name of the method",
                "+\t * Determine if the given type is assignable from the given value,",
                "+\t * assuming setting by reflection. Considers primitive wrapper classes",
                "+\t * as assignable to the corresponding primitive types.",
                "+\t * @param type the target type",
                "+\t * @param value the value that should be assigned to the type",
                "+\t * @return if the type is assignable from the value",
                " \t */",
                "-\tpublic static String getQualifiedMethodName(Method method) {",
                "-\t\treturn getQualifiedMethodName(method, null);",
                "+\tpublic static boolean isAssignableValue(Class<?> type, @Nullable Object value) {",
                "+\t\tAssert.notNull(type, \"Type must not be null\");",
                "+\t\treturn (value != null ? isAssignable(type, value.getClass()) : !type.isPrimitive());",
                " \t}",
                "@@ -547,13 +524,9 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the qualified name of the given method, consisting of",
                "-\t * fully qualified interface/class name + \".\" + method name.",
                "-\t * @param method the method",
                "-\t * @param clazz the clazz that the method is being invoked on",
                "-\t * (may be {@code null} to indicate the method's declaring class)",
                "-\t * @return the qualified name of the method",
                "-\t * @since 4.3.4",
                "+\t * Convert a \"/\"-based resource path to a \".\"-based fully qualified class name.",
                "+\t * @param resourcePath the resource path pointing to a class",
                "+\t * @return the corresponding fully qualified class name",
                " \t */",
                "-\tpublic static String getQualifiedMethodName(Method method, @Nullable Class<?> clazz) {",
                "-\t\tAssert.notNull(method, \"Method must not be null\");",
                "-\t\treturn (clazz != null ? clazz : method.getDeclaringClass()).getName() + '.' + method.getName();",
                "+\tpublic static String convertResourcePathToClassName(String resourcePath) {",
                "+\t\tAssert.notNull(resourcePath, \"Resource path must not be null\");",
                "+\t\treturn resourcePath.replace(PATH_SEPARATOR, PACKAGE_SEPARATOR);",
                " \t}",
                "@@ -561,29 +534,9 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return a descriptive name for the given object's type: usually simply",
                "-\t * the class name, but component type class name + \"[]\" for arrays,",
                "-\t * and an appended list of implemented interfaces for JDK proxies.",
                "-\t * @param value the value to introspect",
                "-\t * @return the qualified name of the class",
                "+\t * Convert a \".\"-based fully qualified class name to a \"/\"-based resource path.",
                "+\t * @param className the fully qualified class name",
                "+\t * @return the corresponding resource path, pointing to the class",
                " \t */",
                "-\t@Nullable",
                "-\tpublic static String getDescriptiveType(@Nullable Object value) {",
                "-\t\tif (value == null) {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-\t\tClass<?> clazz = value.getClass();",
                "-\t\tif (Proxy.isProxyClass(clazz)) {",
                "-\t\t\tStringBuilder result = new StringBuilder(clazz.getName());",
                "-\t\t\tresult.append(\" implementing \");",
                "-\t\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "-\t\t\tfor (int i = 0; i < ifcs.length; i++) {",
                "-\t\t\t\tresult.append(ifcs[i].getName());",
                "-\t\t\t\tif (i < ifcs.length - 1) {",
                "-\t\t\t\t\tresult.append(',');",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\treturn result.toString();",
                "-\t\t}",
                "-\t\telse {",
                "-\t\t\treturn clazz.getTypeName();",
                "-\t\t}",
                "+\tpublic static String convertClassNameToResourcePath(String className) {",
                "+\t\tAssert.notNull(className, \"Class name must not be null\");",
                "+\t\treturn className.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
                " \t}",
                "@@ -591,22 +544,63 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check whether the given class matches the user-specified type name.",
                "-\t * @param clazz the class to check",
                "-\t * @param typeName the type name to match",
                "+\t * Return a path suitable for use with {@code ClassLoader.getResource}",
                "+\t * (also suitable for use with {@code Class.getResource} by prepending a",
                "+\t * slash ('/') to the return value). Built by taking the package of the specified",
                "+\t * class file, converting all dots ('.') to slashes ('/'), adding a trailing slash",
                "+\t * if necessary, and concatenating the specified resource name to this.",
                "+\t * <br/>As such, this function may be used to build a path suitable for",
                "+\t * loading a resource file that is in the same package as a class file,",
                "+\t * although {@link org.springframework.core.io.ClassPathResource} is usually",
                "+\t * even more convenient.",
                "+\t * @param clazz the Class whose package will be used as the base",
                "+\t * @param resourceName the resource name to append. A leading slash is optional.",
                "+\t * @return the built-up resource path",
                "+\t * @see ClassLoader#getResource",
                "+\t * @see Class#getResource",
                " \t */",
                "-\tpublic static boolean matchesTypeName(Class<?> clazz, @Nullable String typeName) {",
                "-\t\treturn (typeName != null &&",
                "-\t\t\t\t(typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));",
                "+\tpublic static String addResourcePathToPackagePath(Class<?> clazz, String resourceName) {",
                "+\t\tAssert.notNull(resourceName, \"Resource name must not be null\");",
                "+\t\tif (!resourceName.startsWith(\"/\")) {",
                "+\t\t\treturn classPackageAsResourcePath(clazz) + '/' + resourceName;",
                "+\t\t}",
                "+\t\treturn classPackageAsResourcePath(clazz) + resourceName;",
                " \t}",
                "+\t/**",
                "+\t * Given an input class object, return a string which consists of the",
                "+\t * class's package name as a pathname, i.e., all dots ('.') are replaced by",
                "+\t * slashes ('/'). Neither a leading nor trailing slash is added. The result",
                "+\t * could be concatenated with a slash and the name of a resource and fed",
                "+\t * directly to {@code ClassLoader.getResource()}. For it to be fed to",
                "+\t * {@code Class.getResource} instead, a leading slash would also have",
                "+\t * to be prepended to the returned value.",
                "+\t * @param clazz the input class. A {@code null} value or the default",
                "+\t * (empty) package will result in an empty string (\"\") being returned.",
                "+\t * @return a path which represents the package name",
                "+\t * @see ClassLoader#getResource",
                "+\t * @see Class#getResource",
                "+\t */",
                "+\tpublic static String classPackageAsResourcePath(@Nullable Class<?> clazz) {",
                "+\t\tif (clazz == null) {",
                "+\t\t\treturn \"\";",
                "+\t\t}",
                "+\t\tString className = clazz.getName();",
                "+\t\tint packageEndIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\tif (packageEndIndex == -1) {",
                "+\t\t\treturn \"\";",
                "+\t\t}",
                "+\t\tString packageName = className.substring(0, packageEndIndex);",
                "+\t\treturn packageName.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
                "+\t}",
                " \t/**",
                "-\t * Determine whether the given class has a public constructor with the given signature.",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to \"false\".",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * @return whether the class has a corresponding constructor",
                "-\t * @see Class#getMethod",
                "+\t * Build a String that consists of the names of the classes/interfaces",
                "+\t * in the given array.",
                "+\t * <p>Basically like {@code AbstractCollection.toString()}, but stripping",
                "+\t * the \"class \"/\"interface \" prefix before every class name.",
                "+\t * @param classes an array of Class objects",
                "+\t * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"",
                "+\t * @see java.util.AbstractCollection#toString()",
                " \t */",
                "-\tpublic static boolean hasConstructor(Class<?> clazz, Class<?>... paramTypes) {",
                "-\t\treturn (getConstructorIfAvailable(clazz, paramTypes) != null);",
                "+\tpublic static String classNamesToString(Class<?>... classes) {",
                "+\t\treturn classNamesToString(Arrays.asList(classes));",
                " \t}",
                "@@ -614,19 +608,24 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given class has a public constructor with the given signature,",
                "-\t * and return it if available (else return {@code null}).",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to {@code null}.",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * @return the constructor, or {@code null} if not found",
                "-\t * @see Class#getConstructor",
                "+\t * Build a String that consists of the names of the classes/interfaces",
                "+\t * in the given collection.",
                "+\t * <p>Basically like {@code AbstractCollection.toString()}, but stripping",
                "+\t * the \"class \"/\"interface \" prefix before every class name.",
                "+\t * @param classes a Collection of Class objects (may be {@code null})",
                "+\t * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"",
                "+\t * @see java.util.AbstractCollection#toString()",
                " \t */",
                "-\t@Nullable",
                "-\tpublic static <T> Constructor<T> getConstructorIfAvailable(Class<T> clazz, Class<?>... paramTypes) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\ttry {",
                "-\t\t\treturn clazz.getConstructor(paramTypes);",
                "+\tpublic static String classNamesToString(@Nullable Collection<Class<?>> classes) {",
                "+\t\tif (CollectionUtils.isEmpty(classes)) {",
                "+\t\t\treturn \"[]\";",
                " \t\t}",
                "-\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\treturn null;",
                "+\t\tStringBuilder sb = new StringBuilder(\"[\");",
                "+\t\tfor (Iterator<Class<?>> it = classes.iterator(); it.hasNext(); ) {",
                "+\t\t\tClass<?> clazz = it.next();",
                "+\t\t\tsb.append(clazz.getName());",
                "+\t\t\tif (it.hasNext()) {",
                "+\t\t\t\tsb.append(\", \");",
                "+\t\t\t}",
                " \t\t}",
                "+\t\tsb.append(\"]\");",
                "+\t\treturn sb.toString();",
                " \t}",
                "@@ -634,12 +633,11 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given class has a public method with the given signature.",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to \"false\".",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param methodName the name of the method",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * @return whether the class has a corresponding method",
                "-\t * @see Class#getMethod",
                "+\t * Copy the given {@code Collection} into a {@code Class} array.",
                "+\t * <p>The {@code Collection} must contain {@code Class} elements only.",
                "+\t * @param collection the {@code Collection} to copy",
                "+\t * @return the {@code Class} array",
                "+\t * @since 3.1",
                "+\t * @see StringUtils#toStringArray",
                " \t */",
                "-\tpublic static boolean hasMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {",
                "-\t\treturn (getMethodIfAvailable(clazz, methodName, paramTypes) != null);",
                "+\tpublic static Class<?>[] toClassArray(Collection<Class<?>> collection) {",
                "+\t\treturn collection.toArray(new Class<?>[0]);",
                " \t}",
                "@@ -647,44 +645,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given class has a public method with the given signature,",
                "-\t * and return it if available (else throws an {@code IllegalStateException}).",
                "-\t * <p>In case of any signature specified, only returns the method if there is a",
                "-\t * unique candidate, i.e. a single public method with the specified name.",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to {@code IllegalStateException}.",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param methodName the name of the method",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * (may be {@code null} to indicate any signature)",
                "-\t * @return the method (never {@code null})",
                "-\t * @throws IllegalStateException if the method has not been found",
                "-\t * @see Class#getMethod",
                "+\t * Return all interfaces that the given instance implements as an array,",
                "+\t * including ones implemented by superclasses.",
                "+\t * @param instance the instance to analyze for interfaces",
                "+\t * @return all interfaces that the given instance implements as an array",
                " \t */",
                "-\tpublic static Method getMethod(Class<?> clazz, String methodName, @Nullable Class<?>... paramTypes) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\tif (paramTypes != null) {",
                "-\t\t\ttry {",
                "-\t\t\t\treturn clazz.getMethod(methodName, paramTypes);",
                "-\t\t\t}",
                "-\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\tthrow new IllegalStateException(\"Expected method not found: \" + ex);",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\telse {",
                "-\t\t\tSet<Method> candidates = new HashSet<>(1);",
                "-\t\t\tMethod[] methods = clazz.getMethods();",
                "-\t\t\tfor (Method method : methods) {",
                "-\t\t\t\tif (methodName.equals(method.getName())) {",
                "-\t\t\t\t\tcandidates.add(method);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tif (candidates.size() == 1) {",
                "-\t\t\t\treturn candidates.iterator().next();",
                "-\t\t\t}",
                "-\t\t\telse if (candidates.isEmpty()) {",
                "-\t\t\t\tthrow new IllegalStateException(\"Expected method not found: \" + clazz.getName() + '.' + methodName);",
                "-\t\t\t}",
                "-\t\t\telse {",
                "-\t\t\t\tthrow new IllegalStateException(\"No unique method found: \" + clazz.getName() + '.' + methodName);",
                "-\t\t\t}",
                "-\t\t}",
                "+\tpublic static Class<?>[] getAllInterfaces(Object instance) {",
                "+\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "+\t\treturn getAllInterfacesForClass(instance.getClass());",
                " \t}",
                "@@ -692,39 +656,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given class has a public method with the given signature,",
                "-\t * and return it if available (else return {@code null}).",
                "-\t * <p>In case of any signature specified, only returns the method if there is a",
                "-\t * unique candidate, i.e. a single public method with the specified name.",
                "-\t * <p>Essentially translates {@code NoSuchMethodException} to {@code null}.",
                "-\t * @param clazz the clazz to analyze",
                "-\t * @param methodName the name of the method",
                "-\t * @param paramTypes the parameter types of the method",
                "-\t * (may be {@code null} to indicate any signature)",
                "-\t * @return the method, or {@code null} if not found",
                "-\t * @see Class#getMethod",
                "+\t * Return all interfaces that the given class implements as an array,",
                "+\t * including ones implemented by superclasses.",
                "+\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "+\t * @param clazz the class to analyze for interfaces",
                "+\t * @return all interfaces that the given object implements as an array",
                " \t */",
                "-\t@Nullable",
                "-\tpublic static Method getMethodIfAvailable(Class<?> clazz, String methodName, @Nullable Class<?>... paramTypes) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\tif (paramTypes != null) {",
                "-\t\t\ttry {",
                "-\t\t\t\treturn clazz.getMethod(methodName, paramTypes);",
                "-\t\t\t}",
                "-\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\treturn null;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\telse {",
                "-\t\t\tSet<Method> candidates = new HashSet<>(1);",
                "-\t\t\tMethod[] methods = clazz.getMethods();",
                "-\t\t\tfor (Method method : methods) {",
                "-\t\t\t\tif (methodName.equals(method.getName())) {",
                "-\t\t\t\t\tcandidates.add(method);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tif (candidates.size() == 1) {",
                "-\t\t\t\treturn candidates.iterator().next();",
                "-\t\t\t}",
                "-\t\t\treturn null;",
                "-\t\t}",
                "+\tpublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz) {",
                "+\t\treturn getAllInterfacesForClass(clazz, null);",
                " \t}",
                "@@ -732,26 +667,12 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return the number of methods with a given name (with any argument types),",
                "-\t * for the given class and/or its superclasses. Includes non-public methods.",
                "-\t * @param clazz\tthe clazz to check",
                "-\t * @param methodName the name of the method",
                "-\t * @return the number of methods with the given name",
                "+\t * Return all interfaces that the given class implements as an array,",
                "+\t * including ones implemented by superclasses.",
                "+\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "+\t * @param clazz the class to analyze for interfaces",
                "+\t * @param classLoader the ClassLoader that the interfaces need to be visible in",
                "+\t * (may be {@code null} when accepting all declared interfaces)",
                "+\t * @return all interfaces that the given object implements as an array",
                " \t */",
                "-\tpublic static int getMethodCountForName(Class<?> clazz, String methodName) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\tint count = 0;",
                "-\t\tMethod[] declaredMethods = clazz.getDeclaredMethods();",
                "-\t\tfor (Method method : declaredMethods) {",
                "-\t\t\tif (methodName.equals(method.getName())) {",
                "-\t\t\t\tcount++;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "-\t\tfor (Class<?> ifc : ifcs) {",
                "-\t\t\tcount += getMethodCountForName(ifc, methodName);",
                "-\t\t}",
                "-\t\tif (clazz.getSuperclass() != null) {",
                "-\t\t\tcount += getMethodCountForName(clazz.getSuperclass(), methodName);",
                "-\t\t}",
                "-\t\treturn count;",
                "+\tpublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz, @Nullable ClassLoader classLoader) {",
                "+\t\treturn toClassArray(getAllInterfacesForClassAsSet(clazz, classLoader));",
                " \t}",
                "@@ -759,25 +680,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Does the given class or one of its superclasses at least have one or more",
                "-\t * methods with the supplied name (with any argument types)?",
                "-\t * Includes non-public methods.",
                "-\t * @param clazz\tthe clazz to check",
                "-\t * @param methodName the name of the method",
                "-\t * @return whether there is at least one method with the given name",
                "+\t * Return all interfaces that the given instance implements as a Set,",
                "+\t * including ones implemented by superclasses.",
                "+\t * @param instance the instance to analyze for interfaces",
                "+\t * @return all interfaces that the given instance implements as a Set",
                " \t */",
                "-\tpublic static boolean hasAtLeastOneMethodWithName(Class<?> clazz, String methodName) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\tMethod[] declaredMethods = clazz.getDeclaredMethods();",
                "-\t\tfor (Method method : declaredMethods) {",
                "-\t\t\tif (method.getName().equals(methodName)) {",
                "-\t\t\t\treturn true;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "-\t\tfor (Class<?> ifc : ifcs) {",
                "-\t\t\tif (hasAtLeastOneMethodWithName(ifc, methodName)) {",
                "-\t\t\t\treturn true;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\treturn (clazz.getSuperclass() != null && hasAtLeastOneMethodWithName(clazz.getSuperclass(), methodName));",
                "+\tpublic static Set<Class<?>> getAllInterfacesAsSet(Object instance) {",
                "+\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "+\t\treturn getAllInterfacesForClassAsSet(instance.getClass());",
                " \t}",
                "@@ -785,44 +691,36 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Given a method, which may come from an interface, and a target class used",
                "-\t * in the current reflective invocation, find the corresponding target method",
                "-\t * if there is one. E.g. the method may be {@code IFoo.bar()} and the",
                "-\t * target class may be {@code DefaultFoo}. In this case, the method may be",
                "-\t * {@code DefaultFoo.bar()}. This enables attributes on that method to be found.",
                "-\t * <p><b>NOTE:</b> In contrast to {@link org.springframework.aop.support.AopUtils#getMostSpecificMethod},",
                "-\t * this method does <i>not</i> resolve Java 5 bridge methods automatically.",
                "-\t * Call {@link org.springframework.core.BridgeMethodResolver#findBridgedMethod}",
                "-\t * if bridge method resolution is desirable (e.g. for obtaining metadata from",
                "-\t * the original method definition).",
                "-\t * <p><b>NOTE:</b> Since Spring 3.1.1, if Java security settings disallow reflective",
                "-\t * access (e.g. calls to {@code Class#getDeclaredMethods} etc, this implementation",
                "-\t * will fall back to returning the originally provided method.",
                "-\t * @param method the method to be invoked, which may come from an interface",
                "-\t * @param targetClass the target class for the current invocation.",
                "-\t * May be {@code null} or may not even implement the method.",
                "-\t * @return the specific target method, or the original method if the",
                "-\t * {@code targetClass} doesn't implement it or is {@code null}",
                "+\t * Return all interfaces that the given class implements as a Set,",
                "+\t * including ones implemented by superclasses.",
                "+\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "+\t * @param clazz the class to analyze for interfaces",
                "+\t * @return all interfaces that the given object implements as a Set",
                " \t */",
                "-\tpublic static Method getMostSpecificMethod(Method method, @Nullable Class<?> targetClass) {",
                "-\t\tif (isOverridable(method, targetClass) &&",
                "-\t\t\t\ttargetClass != null && targetClass != method.getDeclaringClass()) {",
                "-\t\t\ttry {",
                "-\t\t\t\tif (Modifier.isPublic(method.getModifiers())) {",
                "-\t\t\t\t\ttry {",
                "-\t\t\t\t\t\treturn targetClass.getMethod(method.getName(), method.getParameterTypes());",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\t\t\treturn method;",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\telse {",
                "-\t\t\t\t\tMethod specificMethod =",
                "-\t\t\t\t\t\t\tReflectionUtils.findMethod(targetClass, method.getName(), method.getParameterTypes());",
                "-\t\t\t\t\treturn (specificMethod != null ? specificMethod : method);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tcatch (SecurityException ex) {",
                "-\t\t\t\t// Security settings are disallowing reflective access; fall back to 'method' below.",
                "+\tpublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz) {",
                "+\t\treturn getAllInterfacesForClassAsSet(clazz, null);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Return all interfaces that the given class implements as a Set,",
                "+\t * including ones implemented by superclasses.",
                "+\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "+\t * @param clazz the class to analyze for interfaces",
                "+\t * @param classLoader the ClassLoader that the interfaces need to be visible in",
                "+\t * (may be {@code null} when accepting all declared interfaces)",
                "+\t * @return all interfaces that the given object implements as a Set",
                "+\t */",
                "+\tpublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, @Nullable ClassLoader classLoader) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tif (clazz.isInterface() && isVisible(clazz, classLoader)) {",
                "+\t\t\treturn Collections.<Class<?>>singleton(clazz);",
                "+\t\t}",
                "+\t\tSet<Class<?>> interfaces = new LinkedHashSet<>();",
                "+\t\tClass<?> current = clazz;",
                "+\t\twhile (current != null) {",
                "+\t\t\tClass<?>[] ifcs = current.getInterfaces();",
                "+\t\t\tfor (Class<?> ifc : ifcs) {",
                "+\t\t\t\tinterfaces.addAll(getAllInterfacesForClassAsSet(ifc, classLoader));",
                " \t\t\t}",
                "+\t\t\tcurrent = current.getSuperclass();",
                " \t\t}",
                "-\t\treturn method;",
                "+\t\treturn interfaces;",
                " \t}",
                "@@ -830,19 +728,14 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given method is declared by the user or at least pointing to",
                "-\t * a user-declared method.",
                "-\t * <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the",
                "-\t * {@code GroovyObject} interface (for interface methods; on an implementation class,",
                "-\t * implementations of the {@code GroovyObject} methods will be marked as synthetic anyway).",
                "-\t * Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered",
                "-\t * as user-level methods since they are eventually pointing to a user-declared generic method.",
                "-\t * @param method the method to check",
                "-\t * @return {@code true} if the method can be considered as user-declared; [@code false} otherwise",
                "+\t * Create a composite interface Class for the given interfaces,",
                "+\t * implementing the given interfaces in one single Class.",
                "+\t * <p>This implementation builds a JDK proxy class for the given interfaces.",
                "+\t * @param interfaces the interfaces to merge",
                "+\t * @param classLoader the ClassLoader to create the composite Class in",
                "+\t * @return the merged interface as Class",
                "+\t * @see java.lang.reflect.Proxy#getProxyClass",
                " \t */",
                "-\tpublic static boolean isUserLevelMethod(Method method) {",
                "-\t\tAssert.notNull(method, \"Method must not be null\");",
                "-\t\treturn (method.isBridge() || (!method.isSynthetic() && !isGroovyObjectMethod(method)));",
                "-\t}",
                "-",
                "-\tprivate static boolean isGroovyObjectMethod(Method method) {",
                "-\t\treturn method.getDeclaringClass().getName().equals(\"groovy.lang.GroovyObject\");",
                "+\t@SuppressWarnings(\"deprecation\")",
                "+\tpublic static Class<?> createCompositeInterface(Class<?>[] interfaces, @Nullable ClassLoader classLoader) {",
                "+\t\tAssert.notEmpty(interfaces, \"Interfaces must not be empty\");",
                "+\t\treturn Proxy.getProxyClass(classLoader, interfaces);",
                " \t}",
                "@@ -850,15 +743,33 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given method is overridable in the given target class.",
                "-\t * @param method the method to check",
                "-\t * @param targetClass the target class to check against",
                "+\t * Determine the common ancestor of the given classes, if any.",
                "+\t * @param clazz1 the class to introspect",
                "+\t * @param clazz2 the other class to introspect",
                "+\t * @return the common ancestor (i.e. common superclass, one interface",
                "+\t * extending the other), or {@code null} if none found. If any of the",
                "+\t * given classes is {@code null}, the other class will be returned.",
                "+\t * @since 3.2.6",
                " \t */",
                "-\tprivate static boolean isOverridable(Method method, @Nullable Class<?> targetClass) {",
                "-\t\tif (Modifier.isPrivate(method.getModifiers())) {",
                "-\t\t\treturn false;",
                "+\t@Nullable",
                "+\tpublic static Class<?> determineCommonAncestor(@Nullable Class<?> clazz1, @Nullable Class<?> clazz2) {",
                "+\t\tif (clazz1 == null) {",
                "+\t\t\treturn clazz2;",
                " \t\t}",
                "-\t\tif (Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers())) {",
                "-\t\t\treturn true;",
                "+\t\tif (clazz2 == null) {",
                "+\t\t\treturn clazz1;",
                " \t\t}",
                "-\t\treturn (targetClass == null ||",
                "-\t\t\t\tgetPackageName(method.getDeclaringClass()).equals(getPackageName(targetClass)));",
                "+\t\tif (clazz1.isAssignableFrom(clazz2)) {",
                "+\t\t\treturn clazz1;",
                "+\t\t}",
                "+\t\tif (clazz2.isAssignableFrom(clazz1)) {",
                "+\t\t\treturn clazz2;",
                "+\t\t}",
                "+\t\tClass<?> ancestor = clazz1;",
                "+\t\tdo {",
                "+\t\t\tancestor = ancestor.getSuperclass();",
                "+\t\t\tif (ancestor == null || Object.class == ancestor) {",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\twhile (!ancestor.isAssignableFrom(clazz2));",
                "+\t\treturn ancestor;",
                " \t}",
                "@@ -866,32 +777,33 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return a public static method of a class.",
                "-\t * @param clazz the class which defines the method",
                "-\t * @param methodName the static method name",
                "-\t * @param args the parameter types to the method",
                "-\t * @return the static method, or {@code null} if no static method was found",
                "-\t * @throws IllegalArgumentException if the method name is blank or the clazz is null",
                "+\t * Determine whether the given interface is a common Java language interface:",
                "+\t * {@link Serializable}, {@link Externalizable}, {@link Closeable}, {@link AutoCloseable},",
                "+\t * {@link Cloneable}, {@link Comparable} - all of which can be ignored when looking",
                "+\t * for 'primary' user-level interfaces. Common characteristics: no service-level",
                "+\t * operations, no bean property methods, no default methods.",
                "+\t * @param ifc the interface to check",
                "+\t * @since 5.0.3",
                " \t */",
                "-\t@Nullable",
                "-\tpublic static Method getStaticMethod(Class<?> clazz, String methodName, Class<?>... args) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "-\t\ttry {",
                "-\t\t\tMethod method = clazz.getMethod(methodName, args);",
                "-\t\t\treturn Modifier.isStatic(method.getModifiers()) ? method : null;",
                "-\t\t}",
                "-\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "+\tpublic static boolean isJavaLanguageInterface(Class<?> ifc) {",
                "+\t\treturn javaLanguageInterfaces.contains(ifc);",
                " \t}",
                "+\t/**",
                "+\t * Determine if the supplied class is an <em>inner class</em>,",
                "+\t * i.e. a non-static member of an enclosing class.",
                "+\t * @return {@code true} if the supplied class is an inner class",
                "+\t * @since 5.0.5",
                "+\t * @see Class#isMemberClass()",
                "+\t */",
                "+\tpublic static boolean isInnerClass(Class<?> clazz) {",
                "+\t\treturn (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers()));",
                "+\t}",
                " \t/**",
                "-\t * Check if the given class represents a primitive wrapper,",
                "-\t * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.",
                "-\t * @param clazz the class to check",
                "-\t * @return whether the given class is a primitive wrapper class",
                "+\t * Check whether the given object is a CGLIB proxy.",
                "+\t * @param object the object to check",
                "+\t * @see #isCglibProxyClass(Class)",
                "+\t * @see org.springframework.aop.support.AopUtils#isCglibProxy(Object)",
                " \t */",
                "-\tpublic static boolean isPrimitiveWrapper(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn primitiveWrapperTypeMap.containsKey(clazz);",
                "+\tpublic static boolean isCglibProxy(Object object) {",
                "+\t\treturn isCglibProxyClass(object.getClass());",
                " \t}",
                "@@ -899,11 +811,8 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check if the given class represents a primitive (i.e. boolean, byte,",
                "-\t * char, short, int, long, float, or double) or a primitive wrapper",
                "-\t * (i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double).",
                "+\t * Check whether the specified class is a CGLIB-generated class.",
                " \t * @param clazz the class to check",
                "-\t * @return whether the given class is a primitive or primitive wrapper class",
                "+\t * @see #isCglibProxyClassName(String)",
                " \t */",
                "-\tpublic static boolean isPrimitiveOrWrapper(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn (clazz.isPrimitive() || isPrimitiveWrapper(clazz));",
                "+\tpublic static boolean isCglibProxyClass(@Nullable Class<?> clazz) {",
                "+\t\treturn (clazz != null && isCglibProxyClassName(clazz.getName()));",
                " \t}",
                "@@ -911,10 +820,7 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check if the given class represents an array of primitives,",
                "-\t * i.e. boolean, byte, char, short, int, long, float, or double.",
                "-\t * @param clazz the class to check",
                "-\t * @return whether the given class is a primitive array class",
                "+\t * Check whether the specified class name is a CGLIB-generated class.",
                "+\t * @param className the class name to check",
                " \t */",
                "-\tpublic static boolean isPrimitiveArray(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn (clazz.isArray() && clazz.getComponentType().isPrimitive());",
                "+\tpublic static boolean isCglibProxyClassName(@Nullable String className) {",
                "+\t\treturn (className != null && className.contains(CGLIB_CLASS_SEPARATOR));",
                " \t}",
                "@@ -922,10 +828,11 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check if the given class represents an array of primitive wrappers,",
                "-\t * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double.",
                "-\t * @param clazz the class to check",
                "-\t * @return whether the given class is a primitive wrapper array class",
                "+\t * Return the user-defined class for the given instance: usually simply",
                "+\t * the class of the given instance, but the original class in case of a",
                "+\t * CGLIB-generated subclass.",
                "+\t * @param instance the instance to check",
                "+\t * @return the user-defined class",
                " \t */",
                "-\tpublic static boolean isPrimitiveWrapperArray(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));",
                "+\tpublic static Class<?> getUserClass(Object instance) {",
                "+\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "+\t\treturn getUserClass(instance.getClass());",
                " \t}",
                "@@ -933,10 +840,15 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Resolve the given class if it is a primitive class,",
                "-\t * returning the corresponding primitive wrapper type instead.",
                "+\t * Return the user-defined class for the given class: usually simply the given",
                "+\t * class, but the original class in case of a CGLIB-generated subclass.",
                " \t * @param clazz the class to check",
                "-\t * @return the original class, or a primitive wrapper for the original primitive type",
                "+\t * @return the user-defined class",
                " \t */",
                "-\tpublic static Class<?> resolvePrimitiveIfNecessary(Class<?> clazz) {",
                "-\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\treturn (clazz.isPrimitive() && clazz != void.class ? primitiveTypeToWrapperMap.get(clazz) : clazz);",
                "+\tpublic static Class<?> getUserClass(Class<?> clazz) {",
                "+\t\tif (clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {",
                "+\t\t\tClass<?> superclass = clazz.getSuperclass();",
                "+\t\t\tif (superclass != null && Object.class != superclass) {",
                "+\t\t\t\treturn superclass;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\treturn clazz;",
                " \t}",
                "@@ -944,29 +856,29 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check if the right-hand side type may be assigned to the left-hand side",
                "-\t * type, assuming setting by reflection. Considers primitive wrapper",
                "-\t * classes as assignable to the corresponding primitive types.",
                "-\t * @param lhsType the target type",
                "-\t * @param rhsType the value type that should be assigned to the target type",
                "-\t * @return if the target type is assignable from the value type",
                "-\t * @see TypeUtils#isAssignable",
                "+\t * Return a descriptive name for the given object's type: usually simply",
                "+\t * the class name, but component type class name + \"[]\" for arrays,",
                "+\t * and an appended list of implemented interfaces for JDK proxies.",
                "+\t * @param value the value to introspect",
                "+\t * @return the qualified name of the class",
                " \t */",
                "-\tpublic static boolean isAssignable(Class<?> lhsType, Class<?> rhsType) {",
                "-\t\tAssert.notNull(lhsType, \"Left-hand side type must not be null\");",
                "-\t\tAssert.notNull(rhsType, \"Right-hand side type must not be null\");",
                "-\t\tif (lhsType.isAssignableFrom(rhsType)) {",
                "-\t\t\treturn true;",
                "+\t@Nullable",
                "+\tpublic static String getDescriptiveType(@Nullable Object value) {",
                "+\t\tif (value == null) {",
                "+\t\t\treturn null;",
                " \t\t}",
                "-\t\tif (lhsType.isPrimitive()) {",
                "-\t\t\tClass<?> resolvedPrimitive = primitiveWrapperTypeMap.get(rhsType);",
                "-\t\t\tif (lhsType == resolvedPrimitive) {",
                "-\t\t\t\treturn true;",
                "+\t\tClass<?> clazz = value.getClass();",
                "+\t\tif (Proxy.isProxyClass(clazz)) {",
                "+\t\t\tStringBuilder result = new StringBuilder(clazz.getName());",
                "+\t\t\tresult.append(\" implementing \");",
                "+\t\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "+\t\t\tfor (int i = 0; i < ifcs.length; i++) {",
                "+\t\t\t\tresult.append(ifcs[i].getName());",
                "+\t\t\t\tif (i < ifcs.length - 1) {",
                "+\t\t\t\t\tresult.append(',');",
                "+\t\t\t\t}",
                " \t\t\t}",
                "+\t\t\treturn result.toString();",
                " \t\t}",
                " \t\telse {",
                "-\t\t\tClass<?> resolvedWrapper = primitiveTypeToWrapperMap.get(rhsType);",
                "-\t\t\tif (resolvedWrapper != null && lhsType.isAssignableFrom(resolvedWrapper)) {",
                "-\t\t\t\treturn true;",
                "-\t\t\t}",
                "+\t\t\treturn clazz.getTypeName();",
                " \t\t}",
                "-\t\treturn false;",
                " \t}",
                "@@ -974,23 +886,36 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine if the given type is assignable from the given value,",
                "-\t * assuming setting by reflection. Considers primitive wrapper classes",
                "-\t * as assignable to the corresponding primitive types.",
                "-\t * @param type the target type",
                "-\t * @param value the value that should be assigned to the type",
                "-\t * @return if the type is assignable from the value",
                "+\t * Check whether the given class matches the user-specified type name.",
                "+\t * @param clazz the class to check",
                "+\t * @param typeName the type name to match",
                " \t */",
                "-\tpublic static boolean isAssignableValue(Class<?> type, @Nullable Object value) {",
                "-\t\tAssert.notNull(type, \"Type must not be null\");",
                "-\t\treturn (value != null ? isAssignable(type, value.getClass()) : !type.isPrimitive());",
                "+\tpublic static boolean matchesTypeName(Class<?> clazz, @Nullable String typeName) {",
                "+\t\treturn (typeName != null &&",
                "+\t\t\t\t(typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));",
                " \t}",
                "+\t/**",
                "+\t * Get the class name without the qualified package name.",
                "+\t * @param className the className to get the short name for",
                "+\t * @return the class name of the class without the package name",
                "+\t * @throws IllegalArgumentException if the className is empty",
                "+\t */",
                "+\tpublic static String getShortName(String className) {",
                "+\t\tAssert.hasLength(className, \"Class name must not be empty\");",
                "+\t\tint lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\tint nameEndIndex = className.indexOf(CGLIB_CLASS_SEPARATOR);",
                "+\t\tif (nameEndIndex == -1) {",
                "+\t\t\tnameEndIndex = className.length();",
                "+\t\t}",
                "+\t\tString shortName = className.substring(lastDotIndex + 1, nameEndIndex);",
                "+\t\tshortName = shortName.replace(INNER_CLASS_SEPARATOR, PACKAGE_SEPARATOR);",
                "+\t\treturn shortName;",
                "+\t}",
                " \t/**",
                "-\t * Convert a \"/\"-based resource path to a \".\"-based fully qualified class name.",
                "-\t * @param resourcePath the resource path pointing to a class",
                "-\t * @return the corresponding fully qualified class name",
                "+\t * Get the class name without the qualified package name.",
                "+\t * @param clazz the class to get the short name for",
                "+\t * @return the class name of the class without the package name",
                " \t */",
                "-\tpublic static String convertResourcePathToClassName(String resourcePath) {",
                "-\t\tAssert.notNull(resourcePath, \"Resource path must not be null\");",
                "-\t\treturn resourcePath.replace(PATH_SEPARATOR, PACKAGE_SEPARATOR);",
                "+\tpublic static String getShortName(Class<?> clazz) {",
                "+\t\treturn getShortName(getQualifiedName(clazz));",
                " \t}",
                "@@ -998,9 +923,13 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Convert a \".\"-based fully qualified class name to a \"/\"-based resource path.",
                "-\t * @param className the fully qualified class name",
                "-\t * @return the corresponding resource path, pointing to the class",
                "+\t * Return the short string name of a Java class in uncapitalized JavaBeans",
                "+\t * property format. Strips the outer class name in case of an inner class.",
                "+\t * @param clazz the class",
                "+\t * @return the short name rendered in a standard JavaBeans property format",
                "+\t * @see java.beans.Introspector#decapitalize(String)",
                " \t */",
                "-\tpublic static String convertClassNameToResourcePath(String className) {",
                "-\t\tAssert.notNull(className, \"Class name must not be null\");",
                "-\t\treturn className.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
                "+\tpublic static String getShortNameAsProperty(Class<?> clazz) {",
                "+\t\tString shortName = getShortName(clazz);",
                "+\t\tint dotIndex = shortName.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\tshortName = (dotIndex != -1 ? shortName.substring(dotIndex + 1) : shortName);",
                "+\t\treturn Introspector.decapitalize(shortName);",
                " \t}",
                "@@ -1008,23 +937,12 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return a path suitable for use with {@code ClassLoader.getResource}",
                "-\t * (also suitable for use with {@code Class.getResource} by prepending a",
                "-\t * slash ('/') to the return value). Built by taking the package of the specified",
                "-\t * class file, converting all dots ('.') to slashes ('/'), adding a trailing slash",
                "-\t * if necessary, and concatenating the specified resource name to this.",
                "-\t * <br/>As such, this function may be used to build a path suitable for",
                "-\t * loading a resource file that is in the same package as a class file,",
                "-\t * although {@link org.springframework.core.io.ClassPathResource} is usually",
                "-\t * even more convenient.",
                "-\t * @param clazz the Class whose package will be used as the base",
                "-\t * @param resourceName the resource name to append. A leading slash is optional.",
                "-\t * @return the built-up resource path",
                "-\t * @see ClassLoader#getResource",
                "-\t * @see Class#getResource",
                "+\t * Determine the name of the class file, relative to the containing",
                "+\t * package: e.g. \"String.class\"",
                "+\t * @param clazz the class",
                "+\t * @return the file name of the \".class\" file",
                " \t */",
                "-\tpublic static String addResourcePathToPackagePath(Class<?> clazz, String resourceName) {",
                "-\t\tAssert.notNull(resourceName, \"Resource name must not be null\");",
                "-\t\tif (!resourceName.startsWith(\"/\")) {",
                "-\t\t\treturn classPackageAsResourcePath(clazz) + '/' + resourceName;",
                "-\t\t}",
                "-\t\treturn classPackageAsResourcePath(clazz) + resourceName;",
                "+\tpublic static String getClassFileName(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tString className = clazz.getName();",
                "+\t\tint lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\treturn className.substring(lastDotIndex + 1) + CLASS_FILE_SUFFIX;",
                " \t}",
                "@@ -1032,26 +950,11 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Given an input class object, return a string which consists of the",
                "-\t * class's package name as a pathname, i.e., all dots ('.') are replaced by",
                "-\t * slashes ('/'). Neither a leading nor trailing slash is added. The result",
                "-\t * could be concatenated with a slash and the name of a resource and fed",
                "-\t * directly to {@code ClassLoader.getResource()}. For it to be fed to",
                "-\t * {@code Class.getResource} instead, a leading slash would also have",
                "-\t * to be prepended to the returned value.",
                "-\t * @param clazz the input class. A {@code null} value or the default",
                "-\t * (empty) package will result in an empty string (\"\") being returned.",
                "-\t * @return a path which represents the package name",
                "-\t * @see ClassLoader#getResource",
                "-\t * @see Class#getResource",
                "+\t * Determine the name of the package of the given class,",
                "+\t * e.g. \"java.lang\" for the {@code java.lang.String} class.",
                "+\t * @param clazz the class",
                "+\t * @return the package name, or the empty String if the class",
                "+\t * is defined in the default package",
                " \t */",
                "-\tpublic static String classPackageAsResourcePath(@Nullable Class<?> clazz) {",
                "-\t\tif (clazz == null) {",
                "-\t\t\treturn \"\";",
                "-\t\t}",
                "-\t\tString className = clazz.getName();",
                "-\t\tint packageEndIndex = className.lastIndexOf(PACKAGE_SEPARATOR);",
                "-\t\tif (packageEndIndex == -1) {",
                "-\t\t\treturn \"\";",
                "-\t\t}",
                "-\t\tString packageName = className.substring(0, packageEndIndex);",
                "-\t\treturn packageName.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);",
                "+\tpublic static String getPackageName(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\treturn getPackageName(clazz.getName());",
                " \t}",
                "@@ -1059,12 +962,12 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Build a String that consists of the names of the classes/interfaces",
                "-\t * in the given array.",
                "-\t * <p>Basically like {@code AbstractCollection.toString()}, but stripping",
                "-\t * the \"class \"/\"interface \" prefix before every class name.",
                "-\t * @param classes an array of Class objects",
                "-\t * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"",
                "-\t * @see java.util.AbstractCollection#toString()",
                "+\t * Determine the name of the package of the given fully-qualified class name,",
                "+\t * e.g. \"java.lang\" for the {@code java.lang.String} class name.",
                "+\t * @param fqClassName the fully-qualified class name",
                "+\t * @return the package name, or the empty String if the class",
                "+\t * is defined in the default package",
                " \t */",
                "-\tpublic static String classNamesToString(Class<?>... classes) {",
                "-\t\treturn classNamesToString(Arrays.asList(classes));",
                "+\tpublic static String getPackageName(String fqClassName) {",
                "+\t\tAssert.notNull(fqClassName, \"Class name must not be null\");",
                "+\t\tint lastDotIndex = fqClassName.lastIndexOf(PACKAGE_SEPARATOR);",
                "+\t\treturn (lastDotIndex != -1 ? fqClassName.substring(0, lastDotIndex) : \"\");",
                " \t}",
                "@@ -1072,24 +975,10 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Build a String that consists of the names of the classes/interfaces",
                "-\t * in the given collection.",
                "-\t * <p>Basically like {@code AbstractCollection.toString()}, but stripping",
                "-\t * the \"class \"/\"interface \" prefix before every class name.",
                "-\t * @param classes a Collection of Class objects (may be {@code null})",
                "-\t * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"",
                "-\t * @see java.util.AbstractCollection#toString()",
                "+\t * Return the qualified name of the given class: usually simply",
                "+\t * the class name, but component type class name + \"[]\" for arrays.",
                "+\t * @param clazz the class",
                "+\t * @return the qualified name of the class",
                " \t */",
                "-\tpublic static String classNamesToString(@Nullable Collection<Class<?>> classes) {",
                "-\t\tif (CollectionUtils.isEmpty(classes)) {",
                "-\t\t\treturn \"[]\";",
                "-\t\t}",
                "-\t\tStringBuilder sb = new StringBuilder(\"[\");",
                "-\t\tfor (Iterator<Class<?>> it = classes.iterator(); it.hasNext(); ) {",
                "-\t\t\tClass<?> clazz = it.next();",
                "-\t\t\tsb.append(clazz.getName());",
                "-\t\t\tif (it.hasNext()) {",
                "-\t\t\t\tsb.append(\", \");",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\tsb.append(\"]\");",
                "-\t\treturn sb.toString();",
                "+\tpublic static String getQualifiedName(Class<?> clazz) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\treturn clazz.getTypeName();",
                " \t}",
                "@@ -1097,11 +986,9 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Copy the given {@code Collection} into a {@code Class} array.",
                "-\t * <p>The {@code Collection} must contain {@code Class} elements only.",
                "-\t * @param collection the {@code Collection} to copy",
                "-\t * @return the {@code Class} array",
                "-\t * @since 3.1",
                "-\t * @see StringUtils#toStringArray",
                "+\t * Return the qualified name of the given method, consisting of",
                "+\t * fully qualified interface/class name + \".\" + method name.",
                "+\t * @param method the method",
                "+\t * @return the qualified name of the method",
                " \t */",
                "-\tpublic static Class<?>[] toClassArray(Collection<Class<?>> collection) {",
                "-\t\treturn collection.toArray(new Class<?>[0]);",
                "+\tpublic static String getQualifiedMethodName(Method method) {",
                "+\t\treturn getQualifiedMethodName(method, null);",
                " \t}",
                "@@ -1109,10 +996,13 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given instance implements as an array,",
                "-\t * including ones implemented by superclasses.",
                "-\t * @param instance the instance to analyze for interfaces",
                "-\t * @return all interfaces that the given instance implements as an array",
                "+\t * Return the qualified name of the given method, consisting of",
                "+\t * fully qualified interface/class name + \".\" + method name.",
                "+\t * @param method the method",
                "+\t * @param clazz the clazz that the method is being invoked on",
                "+\t * (may be {@code null} to indicate the method's declaring class)",
                "+\t * @return the qualified name of the method",
                "+\t * @since 4.3.4",
                " \t */",
                "-\tpublic static Class<?>[] getAllInterfaces(Object instance) {",
                "-\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "-\t\treturn getAllInterfacesForClass(instance.getClass());",
                "+\tpublic static String getQualifiedMethodName(Method method, @Nullable Class<?> clazz) {",
                "+\t\tAssert.notNull(method, \"Method must not be null\");",
                "+\t\treturn (clazz != null ? clazz : method.getDeclaringClass()).getName() + '.' + method.getName();",
                " \t}",
                "@@ -1120,10 +1010,11 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given class implements as an array,",
                "-\t * including ones implemented by superclasses.",
                "-\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "-\t * @param clazz the class to analyze for interfaces",
                "-\t * @return all interfaces that the given object implements as an array",
                "+\t * Determine whether the given class has a public constructor with the given signature.",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to \"false\".",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * @return whether the class has a corresponding constructor",
                "+\t * @see Class#getMethod",
                " \t */",
                "-\tpublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz) {",
                "-\t\treturn getAllInterfacesForClass(clazz, null);",
                "+\tpublic static boolean hasConstructor(Class<?> clazz, Class<?>... paramTypes) {",
                "+\t\treturn (getConstructorIfAvailable(clazz, paramTypes) != null);",
                " \t}",
                "@@ -1131,12 +1022,19 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given class implements as an array,",
                "-\t * including ones implemented by superclasses.",
                "-\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "-\t * @param clazz the class to analyze for interfaces",
                "-\t * @param classLoader the ClassLoader that the interfaces need to be visible in",
                "-\t * (may be {@code null} when accepting all declared interfaces)",
                "-\t * @return all interfaces that the given object implements as an array",
                "+\t * Determine whether the given class has a public constructor with the given signature,",
                "+\t * and return it if available (else return {@code null}).",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to {@code null}.",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * @return the constructor, or {@code null} if not found",
                "+\t * @see Class#getConstructor",
                " \t */",
                "-\tpublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz, @Nullable ClassLoader classLoader) {",
                "-\t\treturn toClassArray(getAllInterfacesForClassAsSet(clazz, classLoader));",
                "+\t@Nullable",
                "+\tpublic static <T> Constructor<T> getConstructorIfAvailable(Class<T> clazz, Class<?>... paramTypes) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\ttry {",
                "+\t\t\treturn clazz.getConstructor(paramTypes);",
                "+\t\t}",
                "+\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                " \t}",
                "@@ -1144,10 +1042,12 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given instance implements as a Set,",
                "-\t * including ones implemented by superclasses.",
                "-\t * @param instance the instance to analyze for interfaces",
                "-\t * @return all interfaces that the given instance implements as a Set",
                "+\t * Determine whether the given class has a public method with the given signature.",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to \"false\".",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param methodName the name of the method",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * @return whether the class has a corresponding method",
                "+\t * @see Class#getMethod",
                " \t */",
                "-\tpublic static Set<Class<?>> getAllInterfacesAsSet(Object instance) {",
                "-\t\tAssert.notNull(instance, \"Instance must not be null\");",
                "-\t\treturn getAllInterfacesForClassAsSet(instance.getClass());",
                "+\tpublic static boolean hasMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {",
                "+\t\treturn (getMethodIfAvailable(clazz, methodName, paramTypes) != null);",
                " \t}",
                "@@ -1155,10 +1055,44 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given class implements as a Set,",
                "-\t * including ones implemented by superclasses.",
                "-\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "-\t * @param clazz the class to analyze for interfaces",
                "-\t * @return all interfaces that the given object implements as a Set",
                "+\t * Determine whether the given class has a public method with the given signature,",
                "+\t * and return it if available (else throws an {@code IllegalStateException}).",
                "+\t * <p>In case of any signature specified, only returns the method if there is a",
                "+\t * unique candidate, i.e. a single public method with the specified name.",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to {@code IllegalStateException}.",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param methodName the name of the method",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * (may be {@code null} to indicate any signature)",
                "+\t * @return the method (never {@code null})",
                "+\t * @throws IllegalStateException if the method has not been found",
                "+\t * @see Class#getMethod",
                " \t */",
                "-\tpublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz) {",
                "-\t\treturn getAllInterfacesForClassAsSet(clazz, null);",
                "+\tpublic static Method getMethod(Class<?> clazz, String methodName, @Nullable Class<?>... paramTypes) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\tif (paramTypes != null) {",
                "+\t\t\ttry {",
                "+\t\t\t\treturn clazz.getMethod(methodName, paramTypes);",
                "+\t\t\t}",
                "+\t\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\t\tthrow new IllegalStateException(\"Expected method not found: \" + ex);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\telse {",
                "+\t\t\tSet<Method> candidates = new HashSet<>(1);",
                "+\t\t\tMethod[] methods = clazz.getMethods();",
                "+\t\t\tfor (Method method : methods) {",
                "+\t\t\t\tif (methodName.equals(method.getName())) {",
                "+\t\t\t\t\tcandidates.add(method);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif (candidates.size() == 1) {",
                "+\t\t\t\treturn candidates.iterator().next();",
                "+\t\t\t}",
                "+\t\t\telse if (candidates.isEmpty()) {",
                "+\t\t\t\tthrow new IllegalStateException(\"Expected method not found: \" + clazz.getName() + '.' + methodName);",
                "+\t\t\t}",
                "+\t\t\telse {",
                "+\t\t\t\tthrow new IllegalStateException(\"No unique method found: \" + clazz.getName() + '.' + methodName);",
                "+\t\t\t}",
                "+\t\t}",
                " \t}",
                "@@ -1166,25 +1100,39 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Return all interfaces that the given class implements as a Set,",
                "-\t * including ones implemented by superclasses.",
                "-\t * <p>If the class itself is an interface, it gets returned as sole interface.",
                "-\t * @param clazz the class to analyze for interfaces",
                "-\t * @param classLoader the ClassLoader that the interfaces need to be visible in",
                "-\t * (may be {@code null} when accepting all declared interfaces)",
                "-\t * @return all interfaces that the given object implements as a Set",
                "+\t * Determine whether the given class has a public method with the given signature,",
                "+\t * and return it if available (else return {@code null}).",
                "+\t * <p>In case of any signature specified, only returns the method if there is a",
                "+\t * unique candidate, i.e. a single public method with the specified name.",
                "+\t * <p>Essentially translates {@code NoSuchMethodException} to {@code null}.",
                "+\t * @param clazz the clazz to analyze",
                "+\t * @param methodName the name of the method",
                "+\t * @param paramTypes the parameter types of the method",
                "+\t * (may be {@code null} to indicate any signature)",
                "+\t * @return the method, or {@code null} if not found",
                "+\t * @see Class#getMethod",
                " \t */",
                "-\tpublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, @Nullable ClassLoader classLoader) {",
                "+\t@Nullable",
                "+\tpublic static Method getMethodIfAvailable(Class<?> clazz, String methodName, @Nullable Class<?>... paramTypes) {",
                " \t\tAssert.notNull(clazz, \"Class must not be null\");",
                "-\t\tif (clazz.isInterface() && isVisible(clazz, classLoader)) {",
                "-\t\t\treturn Collections.<Class<?>>singleton(clazz);",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\tif (paramTypes != null) {",
                "+\t\t\ttry {",
                "+\t\t\t\treturn clazz.getMethod(methodName, paramTypes);",
                "+\t\t\t}",
                "+\t\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\t\treturn null;",
                "+\t\t\t}",
                " \t\t}",
                "-\t\tSet<Class<?>> interfaces = new LinkedHashSet<>();",
                "-\t\tClass<?> current = clazz;",
                "-\t\twhile (current != null) {",
                "-\t\t\tClass<?>[] ifcs = current.getInterfaces();",
                "-\t\t\tfor (Class<?> ifc : ifcs) {",
                "-\t\t\t\tinterfaces.addAll(getAllInterfacesForClassAsSet(ifc, classLoader));",
                "+\t\telse {",
                "+\t\t\tSet<Method> candidates = new HashSet<>(1);",
                "+\t\t\tMethod[] methods = clazz.getMethods();",
                "+\t\t\tfor (Method method : methods) {",
                "+\t\t\t\tif (methodName.equals(method.getName())) {",
                "+\t\t\t\t\tcandidates.add(method);",
                "+\t\t\t\t}",
                " \t\t\t}",
                "-\t\t\tcurrent = current.getSuperclass();",
                "+\t\t\tif (candidates.size() == 1) {",
                "+\t\t\t\treturn candidates.iterator().next();",
                "+\t\t\t}",
                "+\t\t\treturn null;",
                " \t\t}",
                "-\t\treturn interfaces;",
                " \t}",
                "@@ -1192,14 +1140,26 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Create a composite interface Class for the given interfaces,",
                "-\t * implementing the given interfaces in one single Class.",
                "-\t * <p>This implementation builds a JDK proxy class for the given interfaces.",
                "-\t * @param interfaces the interfaces to merge",
                "-\t * @param classLoader the ClassLoader to create the composite Class in",
                "-\t * @return the merged interface as Class",
                "-\t * @see java.lang.reflect.Proxy#getProxyClass",
                "+\t * Return the number of methods with a given name (with any argument types),",
                "+\t * for the given class and/or its superclasses. Includes non-public methods.",
                "+\t * @param clazz\tthe clazz to check",
                "+\t * @param methodName the name of the method",
                "+\t * @return the number of methods with the given name",
                " \t */",
                "-\t@SuppressWarnings(\"deprecation\")",
                "-\tpublic static Class<?> createCompositeInterface(Class<?>[] interfaces, @Nullable ClassLoader classLoader) {",
                "-\t\tAssert.notEmpty(interfaces, \"Interfaces must not be empty\");",
                "-\t\treturn Proxy.getProxyClass(classLoader, interfaces);",
                "+\tpublic static int getMethodCountForName(Class<?> clazz, String methodName) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\tint count = 0;",
                "+\t\tMethod[] declaredMethods = clazz.getDeclaredMethods();",
                "+\t\tfor (Method method : declaredMethods) {",
                "+\t\t\tif (methodName.equals(method.getName())) {",
                "+\t\t\t\tcount++;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "+\t\tfor (Class<?> ifc : ifcs) {",
                "+\t\t\tcount += getMethodCountForName(ifc, methodName);",
                "+\t\t}",
                "+\t\tif (clazz.getSuperclass() != null) {",
                "+\t\t\tcount += getMethodCountForName(clazz.getSuperclass(), methodName);",
                "+\t\t}",
                "+\t\treturn count;",
                " \t}",
                "@@ -1207,33 +1167,25 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine the common ancestor of the given classes, if any.",
                "-\t * @param clazz1 the class to introspect",
                "-\t * @param clazz2 the other class to introspect",
                "-\t * @return the common ancestor (i.e. common superclass, one interface",
                "-\t * extending the other), or {@code null} if none found. If any of the",
                "-\t * given classes is {@code null}, the other class will be returned.",
                "-\t * @since 3.2.6",
                "+\t * Does the given class or one of its superclasses at least have one or more",
                "+\t * methods with the supplied name (with any argument types)?",
                "+\t * Includes non-public methods.",
                "+\t * @param clazz\tthe clazz to check",
                "+\t * @param methodName the name of the method",
                "+\t * @return whether there is at least one method with the given name",
                " \t */",
                "-\t@Nullable",
                "-\tpublic static Class<?> determineCommonAncestor(@Nullable Class<?> clazz1, @Nullable Class<?> clazz2) {",
                "-\t\tif (clazz1 == null) {",
                "-\t\t\treturn clazz2;",
                "-\t\t}",
                "-\t\tif (clazz2 == null) {",
                "-\t\t\treturn clazz1;",
                "-\t\t}",
                "-\t\tif (clazz1.isAssignableFrom(clazz2)) {",
                "-\t\t\treturn clazz1;",
                "-\t\t}",
                "-\t\tif (clazz2.isAssignableFrom(clazz1)) {",
                "-\t\t\treturn clazz2;",
                "+\tpublic static boolean hasAtLeastOneMethodWithName(Class<?> clazz, String methodName) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\tMethod[] declaredMethods = clazz.getDeclaredMethods();",
                "+\t\tfor (Method method : declaredMethods) {",
                "+\t\t\tif (method.getName().equals(methodName)) {",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                " \t\t}",
                "-\t\tClass<?> ancestor = clazz1;",
                "-\t\tdo {",
                "-\t\t\tancestor = ancestor.getSuperclass();",
                "-\t\t\tif (ancestor == null || Object.class == ancestor) {",
                "-\t\t\t\treturn null;",
                "+\t\tClass<?>[] ifcs = clazz.getInterfaces();",
                "+\t\tfor (Class<?> ifc : ifcs) {",
                "+\t\t\tif (hasAtLeastOneMethodWithName(ifc, methodName)) {",
                "+\t\t\t\treturn true;",
                " \t\t\t}",
                " \t\t}",
                "-\t\twhile (!ancestor.isAssignableFrom(clazz2));",
                "-\t\treturn ancestor;",
                "+\t\treturn (clazz.getSuperclass() != null && hasAtLeastOneMethodWithName(clazz.getSuperclass(), methodName));",
                " \t}",
                "@@ -1241,20 +1193,44 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check whether the given class is visible in the given ClassLoader.",
                "-\t * @param clazz the class to check (typically an interface)",
                "-\t * @param classLoader the ClassLoader to check against (may be {@code null},",
                "-\t * in which case this method will always return {@code true})",
                "+\t * Given a method, which may come from an interface, and a target class used",
                "+\t * in the current reflective invocation, find the corresponding target method",
                "+\t * if there is one. E.g. the method may be {@code IFoo.bar()} and the",
                "+\t * target class may be {@code DefaultFoo}. In this case, the method may be",
                "+\t * {@code DefaultFoo.bar()}. This enables attributes on that method to be found.",
                "+\t * <p><b>NOTE:</b> In contrast to {@link org.springframework.aop.support.AopUtils#getMostSpecificMethod},",
                "+\t * this method does <i>not</i> resolve Java 5 bridge methods automatically.",
                "+\t * Call {@link org.springframework.core.BridgeMethodResolver#findBridgedMethod}",
                "+\t * if bridge method resolution is desirable (e.g. for obtaining metadata from",
                "+\t * the original method definition).",
                "+\t * <p><b>NOTE:</b> Since Spring 3.1.1, if Java security settings disallow reflective",
                "+\t * access (e.g. calls to {@code Class#getDeclaredMethods} etc, this implementation",
                "+\t * will fall back to returning the originally provided method.",
                "+\t * @param method the method to be invoked, which may come from an interface",
                "+\t * @param targetClass the target class for the current invocation.",
                "+\t * May be {@code null} or may not even implement the method.",
                "+\t * @return the specific target method, or the original method if the",
                "+\t * {@code targetClass} doesn't implement it or is {@code null}",
                " \t */",
                "-\tpublic static boolean isVisible(Class<?> clazz, @Nullable ClassLoader classLoader) {",
                "-\t\tif (classLoader == null) {",
                "-\t\t\treturn true;",
                "-\t\t}",
                "-\t\ttry {",
                "-\t\t\tClass<?> actualClass = classLoader.loadClass(clazz.getName());",
                "-\t\t\treturn (clazz == actualClass);",
                "-\t\t\t// Else: different interface class found...",
                "-\t\t}",
                "-\t\tcatch (ClassNotFoundException ex) {",
                "-\t\t\t// No interface class found...",
                "-\t\t\treturn false;",
                "+\tpublic static Method getMostSpecificMethod(Method method, @Nullable Class<?> targetClass) {",
                "+\t\tif (isOverridable(method, targetClass) &&",
                "+\t\t\t\ttargetClass != null && targetClass != method.getDeclaringClass()) {",
                "+\t\t\ttry {",
                "+\t\t\t\tif (Modifier.isPublic(method.getModifiers())) {",
                "+\t\t\t\t\ttry {",
                "+\t\t\t\t\t\treturn targetClass.getMethod(method.getName(), method.getParameterTypes());",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\t\t\t\treturn method;",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\telse {",
                "+\t\t\t\t\tMethod specificMethod =",
                "+\t\t\t\t\t\t\tReflectionUtils.findMethod(targetClass, method.getName(), method.getParameterTypes());",
                "+\t\t\t\t\treturn (specificMethod != null ? specificMethod : method);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tcatch (SecurityException ex) {",
                "+\t\t\t\t// Security settings are disallowing reflective access; fall back to 'method' below.",
                "+\t\t\t}",
                " \t\t}",
                "+\t\treturn method;",
                " \t}",
                "@@ -1262,22 +1238,19 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Determine whether the given interface is a common Java language interface:",
                "-\t * {@link Serializable}, {@link Externalizable}, {@link Closeable}, {@link AutoCloseable},",
                "-\t * {@link Cloneable}, {@link Comparable} - all of which can be ignored when looking",
                "-\t * for 'primary' user-level interfaces. Common characteristics: no service-level",
                "-\t * operations, no bean property methods, no default methods.",
                "-\t * @param ifc the interface to check",
                "-\t * @since 5.0.3",
                "+\t * Determine whether the given method is declared by the user or at least pointing to",
                "+\t * a user-declared method.",
                "+\t * <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the",
                "+\t * {@code GroovyObject} interface (for interface methods; on an implementation class,",
                "+\t * implementations of the {@code GroovyObject} methods will be marked as synthetic anyway).",
                "+\t * Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered",
                "+\t * as user-level methods since they are eventually pointing to a user-declared generic method.",
                "+\t * @param method the method to check",
                "+\t * @return {@code true} if the method can be considered as user-declared; [@code false} otherwise",
                " \t */",
                "-\tpublic static boolean isJavaLanguageInterface(Class<?> ifc) {",
                "-\t\treturn javaLanguageInterfaces.contains(ifc);",
                "+\tpublic static boolean isUserLevelMethod(Method method) {",
                "+\t\tAssert.notNull(method, \"Method must not be null\");",
                "+\t\treturn (method.isBridge() || (!method.isSynthetic() && !isGroovyObjectMethod(method)));",
                " \t}",
                "-\t/**",
                "-\t * Check whether the given object is a CGLIB proxy.",
                "-\t * @param object the object to check",
                "-\t * @see #isCglibProxyClass(Class)",
                "-\t * @see org.springframework.aop.support.AopUtils#isCglibProxy(Object)",
                "-\t */",
                "-\tpublic static boolean isCglibProxy(Object object) {",
                "-\t\treturn isCglibProxyClass(object.getClass());",
                "+\tprivate static boolean isGroovyObjectMethod(Method method) {",
                "+\t\treturn method.getDeclaringClass().getName().equals(\"groovy.lang.GroovyObject\");",
                " \t}",
                "@@ -1285,8 +1258,15 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check whether the specified class is a CGLIB-generated class.",
                "-\t * @param clazz the class to check",
                "-\t * @see #isCglibProxyClassName(String)",
                "+\t * Determine whether the given method is overridable in the given target class.",
                "+\t * @param method the method to check",
                "+\t * @param targetClass the target class to check against",
                " \t */",
                "-\tpublic static boolean isCglibProxyClass(@Nullable Class<?> clazz) {",
                "-\t\treturn (clazz != null && isCglibProxyClassName(clazz.getName()));",
                "+\tprivate static boolean isOverridable(Method method, @Nullable Class<?> targetClass) {",
                "+\t\tif (Modifier.isPrivate(method.getModifiers())) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+\t\tif (Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers())) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+\t\treturn (targetClass == null ||",
                "+\t\t\t\tgetPackageName(method.getDeclaringClass()).equals(getPackageName(targetClass)));",
                " \t}",
                "@@ -1294,7 +1274,20 @@ public abstract class ClassUtils {",
                " \t/**",
                "-\t * Check whether the specified class name is a CGLIB-generated class.",
                "-\t * @param className the class name to check",
                "+\t * Return a public static method of a class.",
                "+\t * @param clazz the class which defines the method",
                "+\t * @param methodName the static method name",
                "+\t * @param args the parameter types to the method",
                "+\t * @return the static method, or {@code null} if no static method was found",
                "+\t * @throws IllegalArgumentException if the method name is blank or the clazz is null",
                " \t */",
                "-\tpublic static boolean isCglibProxyClassName(@Nullable String className) {",
                "-\t\treturn (className != null && className.contains(CGLIB_CLASS_SEPARATOR));",
                "+\t@Nullable",
                "+\tpublic static Method getStaticMethod(Class<?> clazz, String methodName, Class<?>... args) {",
                "+\t\tAssert.notNull(clazz, \"Class must not be null\");",
                "+\t\tAssert.notNull(methodName, \"Method name must not be null\");",
                "+\t\ttry {",
                "+\t\t\tMethod method = clazz.getMethod(methodName, args);",
                "+\t\t\treturn Modifier.isStatic(method.getModifiers()) ? method : null;",
                "+\t\t}",
                "+\t\tcatch (NoSuchMethodException ex) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                " \t}"
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/util/ClassUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "96a465a74988dcacaf3eefce99fcad07ef214339",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523456854,
            "hunks": 2,
            "message": "Upgrade to Tomcat 8.5.30",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 3316b934eb..2a014d3c8a 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -61,3 +61,3 @@ configure(allprojects) { project ->",
                " \text.tiles3Version        = \"3.0.8\"",
                "-\text.tomcatVersion        = \"8.5.29\"",
                "+\text.tomcatVersion        = \"8.5.30\"",
                " \text.undertowVersion      = \"1.4.23.Final\"",
                "diff --git a/spring-core/spring-core.gradle b/spring-core/spring-core.gradle",
                "index 7a5281d7bc..0d635ad927 100644",
                "--- a/spring-core/spring-core.gradle",
                "+++ b/spring-core/spring-core.gradle",
                "@@ -42,3 +42,3 @@ task cglibRepackJar(type: Jar) { repackJar ->",
                " \t\t\t\trule(pattern: \"net.sf.cglib.**\", result: \"org.springframework.cglib.@1\")",
                "-\t\t\t\t// As mentioned above, transform cglib\"s internal asm dependencies from",
                "+\t\t\t\t// As mentioned above, transform cglib's internal asm dependencies from",
                " \t\t\t\t// org.objectweb.asm => org.springframework.asm. Doing this counts on the"
            ],
            "changed_files": [
                "build.gradle",
                "spring-core/spring-core.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c4ef47b29fc020a0a80d53e8e5d1cb42ec18b2b7",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523458270,
            "hunks": 3,
            "message": "Upgrade to Tomcat 8.5.30 and Netty 4.1.23",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 9e16e5a46e..bebb55d8b8 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -64,3 +64,3 @@ configure(allprojects) { project ->",
                " \text.log4jVersion         = \"1.2.17\"",
                "-\text.nettyVersion         = \"4.1.22.Final\"",
                "+\text.nettyVersion         = \"4.1.23.Final\"",
                " \text.okhttpVersion        = \"2.7.5\"",
                "@@ -77,3 +77,3 @@ configure(allprojects) { project ->",
                " \text.tiles3Version        = \"3.0.7\"",
                "-\text.tomcatVersion        = \"8.5.29\"",
                "+\text.tomcatVersion        = \"8.5.30\"",
                " \text.tyrusVersion         = \"1.3.5\"  // constrained by WebLogic 12.1.3 support",
                "@@ -318,3 +318,3 @@ project(\"spring-core\") {",
                " \t\t\t\t\trule(pattern: \"net.sf.cglib.**\", result: \"org.springframework.cglib.@1\")",
                "-\t\t\t\t\t// As mentioned above, transform cglib\"s internal asm dependencies from",
                "+\t\t\t\t\t// As mentioned above, transform cglib's internal asm dependencies from",
                " \t\t\t\t\t// org.objectweb.asm => org.springframework.asm. Doing this counts on the"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "aa0face9a1c7d0160a5e64e5b5d70bedbfb065e0",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522761505,
            "hunks": 2,
            "message": "Upgrade to RxJava 1.3.8 and Rhino 1.7.9",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 87e262c85c..8da0638858 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -56,3 +56,3 @@ configure(allprojects) { project ->",
                " \text.reactorVersion       = \"Bismuth-BUILD-SNAPSHOT\"",
                "-\text.rxjavaVersion        = \"1.3.7\"",
                "+\text.rxjavaVersion        = \"1.3.8\"",
                " \text.rxjavaAdapterVersion = \"1.2.1\"",
                "diff --git a/spring-webmvc/spring-webmvc.gradle b/spring-webmvc/spring-webmvc.gradle",
                "index 881ffc91a7..40974834fa 100644",
                "--- a/spring-webmvc/spring-webmvc.gradle",
                "+++ b/spring-webmvc/spring-webmvc.gradle",
                "@@ -63,3 +63,3 @@ dependencies {",
                " \ttestCompile(\"joda-time:joda-time:2.9.9\")",
                "-\ttestCompile(\"org.mozilla:rhino:1.7.8\")",
                "+\ttestCompile(\"org.mozilla:rhino:1.7.9\")",
                " \ttestCompile(\"dom4j:dom4j:1.6.1\") {"
            ],
            "changed_files": [
                "build.gradle",
                "spring-webmvc/spring-webmvc.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8f525f07e9dd6a34463d43546c22cb95afd0429b",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1511143254,
            "hunks": 1,
            "message": "Fix typos, formatting and escaping in reference Note: Some symbol combinations (including <=) serve as textual symbol replacements in AsciiDoc. http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#text-replacement",
            "diff": [
                "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java",
                "index 64c4f990ac..c035171411 100644",
                "--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java",
                "+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java",
                "@@ -48,3 +48,3 @@ import java.lang.annotation.Target;",
                "  * beans returned from {@code @Bean} methods in configuration classes; you'll have",
                "- * to resort to {@code @Inject Provider&lt;TargetBean&gt;} or the like instead.",
                "+ * to resort to {@code @Inject Provider<TargetBean>} or the like instead.",
                "  *"
            ],
            "changed_files": [
                "spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1fa5f0363517aa280a733d7c1fad5059e7c2a28b",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523546749,
            "hunks": 2,
            "message": "Upgrade to Reactor Californium SNAPSHOTs",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 8b5b34ec65..1ffabc3155 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -55,3 +55,3 @@ configure(allprojects) { project ->",
                " \text.nettyVersion         = \"4.1.23.Final\"",
                "-\text.reactorVersion       = \"Bismuth-SR8\"",
                "+\text.reactorVersion       = \"Californium-BUILD-SNAPSHOT\"",
                " \text.rxjavaVersion        = \"1.3.8\"",
                "@@ -141,2 +141,3 @@ configure(allprojects) { project ->",
                " \t\tmaven { url \"https://repo.spring.io/libs-release\" }",
                "+\t\tmaven { url \"https://repo.spring.io/snapshot\" }  // for Reactor",
                " \t}"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9fbab791a03d340dbde3baa71de3d10093bb2585",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523311948,
            "hunks": 3,
            "message": "Upgrade to TestNG 6.14.3, JUnit 5.1.1, Mockito 2.18",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index c14c20e817..354d2999b0 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -49,5 +49,5 @@ configure(allprojects) { project ->",
                " \text.jettyVersion         = \"9.4.9.v20180320\"",
                "-\text.junitJupiterVersion  = \"5.1.0\"",
                "-\text.junitPlatformVersion = \"1.1.0\"",
                "-\text.junitVintageVersion  = \"5.1.0\"",
                "+\text.junitPlatformVersion = \"1.1.1\"",
                "+\text.junitJupiterVersion  = \"5.1.1\"",
                "+\text.junitVintageVersion  = \"5.1.1\"",
                " \text.kotlinVersion        = \"1.2.31\"",
                "@@ -147,3 +147,3 @@ configure(allprojects) { project ->",
                " \t\t}",
                "-\t\ttestCompile(\"org.mockito:mockito-core:2.17.0\") {",
                "+\t\ttestCompile(\"org.mockito:mockito-core:2.18.0\") {",
                " \t\t\texclude group:'org.hamcrest', module:'hamcrest-core'",
                "diff --git a/spring-test/spring-test.gradle b/spring-test/spring-test.gradle",
                "index 0a0602bb5d..3a617ca231 100644",
                "--- a/spring-test/spring-test.gradle",
                "+++ b/spring-test/spring-test.gradle",
                "@@ -37,3 +37,3 @@ dependencies {",
                " \toptional(\"org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}\")",
                "-\toptional(\"org.testng:testng:6.14.2\")",
                "+\toptional(\"org.testng:testng:6.14.3\")",
                " \toptional(\"org.aspectj:aspectjweaver:${aspectjVersion}\")"
            ],
            "changed_files": [
                "build.gradle",
                "spring-test/spring-test.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e170cb0f79fef17d43e769a23e66adaba9dc2c19",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523455570,
            "hunks": 7,
            "message": "Upgrade framework build to JPA 2.2 and JTA 1.3 Issue: SPR-16685",
            "diff": [
                "diff --git a/spring-aspects/spring-aspects.gradle b/spring-aspects/spring-aspects.gradle",
                "index 6422ff52f2..a534dc865f 100644",
                "--- a/spring-aspects/spring-aspects.gradle",
                "+++ b/spring-aspects/spring-aspects.gradle",
                "@@ -92,3 +92,3 @@ dependencies {",
                " \toptional(\"javax.cache:cache-api:1.1.0\") // for JCache aspect",
                "-\toptional(\"javax.transaction:javax.transaction-api:1.2\")  // for @javax.transaction.Transactional support",
                "+\toptional(\"javax.transaction:javax.transaction-api:1.3\")  // for @javax.transaction.Transactional support",
                " \ttestCompile(project(\":spring-core\"))  // for CodeStyleAspect",
                "diff --git a/spring-context-indexer/spring-context-indexer.gradle b/spring-context-indexer/spring-context-indexer.gradle",
                "index f62e4e90d5..2b68cd8a51 100644",
                "--- a/spring-context-indexer/spring-context-indexer.gradle",
                "+++ b/spring-context-indexer/spring-context-indexer.gradle",
                "@@ -6,3 +6,3 @@ dependencies {",
                " \ttestCompile(\"javax.annotation:javax.annotation-api:1.3.2\")",
                "-\ttestCompile(\"org.eclipse.persistence:javax.persistence:2.1.1\")",
                "+\ttestCompile(\"org.eclipse.persistence:javax.persistence:2.2.0\")",
                " }",
                "diff --git a/spring-jdbc/spring-jdbc.gradle b/spring-jdbc/spring-jdbc.gradle",
                "index 1774490f36..053229af77 100644",
                "--- a/spring-jdbc/spring-jdbc.gradle",
                "+++ b/spring-jdbc/spring-jdbc.gradle",
                "@@ -7,3 +7,3 @@ dependencies {",
                " \toptional(project(\":spring-context\"))  // for JndiDataSourceLookup",
                "-\toptional(\"javax.transaction:javax.transaction-api:1.2\")",
                "+\toptional(\"javax.transaction:javax.transaction-api:1.3\")",
                " \toptional(\"org.hsqldb:hsqldb:${hsqldbVersion}\")",
                "diff --git a/spring-jms/spring-jms.gradle b/spring-jms/spring-jms.gradle",
                "index 3b0da1da1b..756c8c61ca 100644",
                "--- a/spring-jms/spring-jms.gradle",
                "+++ b/spring-jms/spring-jms.gradle",
                "@@ -12,3 +12,3 @@ dependencies {",
                " \toptional(\"javax.resource:javax.resource-api:1.7\")",
                "-\toptional(\"javax.transaction:javax.transaction-api:1.2\")",
                "+\toptional(\"javax.transaction:javax.transaction-api:1.3\")",
                " \toptional(\"com.fasterxml.jackson.core:jackson-databind:${jackson2Version}\")",
                "diff --git a/spring-orm/spring-orm.gradle b/spring-orm/spring-orm.gradle",
                "index 23e4b1ea83..d99303e3ab 100644",
                "--- a/spring-orm/spring-orm.gradle",
                "+++ b/spring-orm/spring-orm.gradle",
                "@@ -11,3 +11,3 @@ dependencies {",
                " \toptional(\"org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.1\")",
                "-\toptional(\"org.hibernate:hibernate-core:5.2.16.Final\")",
                "+\toptional(\"org.hibernate:hibernate-core:5.3.0.CR1\")",
                " \toptional(\"javax.servlet:javax.servlet-api:3.1.0\")",
                "diff --git a/spring-tx/spring-tx.gradle b/spring-tx/spring-tx.gradle",
                "index d8e0a62e92..c4de98aefb 100644",
                "--- a/spring-tx/spring-tx.gradle",
                "+++ b/spring-tx/spring-tx.gradle",
                "@@ -10,3 +10,3 @@ dependencies {",
                " \toptional(\"javax.resource:javax.resource-api:1.7\")",
                "-\toptional(\"javax.transaction:javax.transaction-api:1.2\")",
                "+\toptional(\"javax.transaction:javax.transaction-api:1.3\")",
                " \toptional(\"com.ibm.websphere:uow:6.0.2.17\")",
                "@@ -14,3 +14,3 @@ dependencies {",
                " \ttestCompile(\"org.codehaus.groovy:groovy-all:${groovyVersion}\")",
                "-\ttestCompile(\"org.eclipse.persistence:javax.persistence:2.1.1\")",
                "+\ttestCompile(\"org.eclipse.persistence:javax.persistence:2.2.0\")",
                " }"
            ],
            "changed_files": [
                "spring-aspects/spring-aspects.gradle",
                "spring-context-indexer/spring-context-indexer.gradle",
                "spring-jdbc/spring-jdbc.gradle",
                "spring-jms/spring-jms.gradle",
                "spring-orm/spring-orm.gradle",
                "spring-tx/spring-tx.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1fbd38c2d8a3feebe53d6b29427571f55a6475d6",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522518881,
            "hunks": 1,
            "message": "Upgrade to Groovy 2.4.15",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 3fbabecd4f..9e16e5a46e 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -42,3 +42,3 @@ configure(allprojects) { project ->",
                " \text.freemarkerVersion    = \"2.3.23\"",
                "-\text.groovyVersion        = \"2.4.14\"",
                "+\text.groovyVersion        = \"2.4.15\"",
                " \text.gsonVersion          = \"2.8.2\""
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.15.RELEASE",
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d9e17a62ce0a35af35a92061dbdbff070c655a50",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522512183,
            "hunks": 21,
            "message": "Refine SyncInvocableHandlerMethod error handling Ensure the error is wrapped as ServerErrorException",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java b/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java",
                "index f25cad1886..523b44d751 100644",
                "--- a/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java",
                "+++ b/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -21,7 +21,8 @@ import org.springframework.http.HttpStatus;",
                " import org.springframework.lang.Nullable;",
                "+import org.springframework.web.method.HandlerMethod;",
                " /**",
                "- * Exception for errors that fit response status 500 (bad request) for use in",
                "- * Spring Web applications. The exception provides additional fields (e.g.",
                "- * an optional {@link MethodParameter} if related to the error).",
                "+ * Exception for an {@link HttpStatus#INTERNAL_SERVER_ERROR} that exposes extra",
                "+ * information about a controller method that failed, or a controller method",
                "+ * argument that could not be resolved.",
                "  *",
                "@@ -33,2 +34,5 @@ public class ServerErrorException extends ResponseStatusException {",
                "+\t@Nullable",
                "+\tprivate final HandlerMethod handlerMethod;",
                "+",
                " \t@Nullable",
                "@@ -41,3 +45,5 @@ public class ServerErrorException extends ResponseStatusException {",
                " \tpublic ServerErrorException(String reason) {",
                "-\t\tthis(reason, null, null);",
                "+\t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, null);",
                "+\t\tthis.handlerMethod = null;",
                "+\t\tthis.parameter = null;",
                " \t}",
                "@@ -45,6 +51,9 @@ public class ServerErrorException extends ResponseStatusException {",
                " \t/**",
                "-\t * Constructor for a 500 error linked to a specific {@code MethodParameter}.",
                "+\t * Constructor with a reason and root cause.",
                "+\t * @since 5.0.5",
                " \t */",
                "-\tpublic ServerErrorException(String reason, MethodParameter parameter) {",
                "-\t\tthis(reason, parameter, null);",
                "+\tpublic ServerErrorException(String reason, Throwable cause) {",
                "+\t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);",
                "+\t\tthis.handlerMethod = null;",
                "+\t\tthis.parameter = null;",
                " \t}",
                "@@ -52,6 +61,7 @@ public class ServerErrorException extends ResponseStatusException {",
                " \t/**",
                "-\t * Constructor for a 500 error with a root cause.",
                "+\t * Constructor for a 500 error with a {@link MethodParameter}.",
                " \t */",
                "-\tpublic ServerErrorException(String reason, @Nullable MethodParameter parameter, @Nullable Throwable cause) {",
                "+\tpublic ServerErrorException(String reason, MethodParameter parameter, @Nullable Throwable cause) {",
                " \t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);",
                "+\t\tthis.handlerMethod = null;",
                " \t\tthis.parameter = parameter;",
                "@@ -59,5 +69,32 @@ public class ServerErrorException extends ResponseStatusException {",
                "+\t/**",
                "+\t * Constructor for a 500 error with a root cause.",
                "+\t */",
                "+\tpublic ServerErrorException(String reason, HandlerMethod handlerMethod, @Nullable Throwable cause) {",
                "+\t\tsuper(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);",
                "+\t\tthis.handlerMethod = handlerMethod;",
                "+\t\tthis.parameter = null;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Constructor for a 500 error linked to a specific {@code MethodParameter}.",
                "+\t * @deprecated in favor of {@link #ServerErrorException(String, MethodParameter, Throwable)}",
                "+\t */",
                "+\t@Deprecated",
                "+\tpublic ServerErrorException(String reason, MethodParameter parameter) {",
                "+\t\tthis(reason, parameter, null);",
                "+\t}",
                "+",
                "+",
                "+\t/**",
                "+\t * Return the controller method associated with the error, if any.",
                "+\t * @since 5.0.5",
                "+\t */",
                "+\t@Nullable",
                "+\tpublic HandlerMethod getHandlerMethod() {",
                "+\t\treturn this.handlerMethod;",
                "+\t}",
                " \t/**",
                "-\t * Return the {@code MethodParameter} associated with this error, if any.",
                "+\t * Return the controller method argument associated with this error, if any.",
                " \t */",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/BindingContext.java b/spring-webflux/src/main/java/org/springframework/web/reactive/BindingContext.java",
                "index 4e0b7cf98c..8099a538d7 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/BindingContext.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/BindingContext.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -23,2 +23,3 @@ import org.springframework.web.bind.support.WebBindingInitializer;",
                " import org.springframework.web.bind.support.WebExchangeDataBinder;",
                "+import org.springframework.web.server.ServerErrorException;",
                " import org.springframework.web.server.ServerWebExchange;",
                "@@ -77,2 +78,3 @@ public class BindingContext {",
                " \t * @return the created data binder",
                "+\t * @throws ServerErrorException if {@code @InitBinder} method invocation fails",
                " \t */",
                "@@ -88,2 +90,3 @@ public class BindingContext {",
                " \t * Initialize the data binder instance for the given exchange.",
                "+\t * @throws ServerErrorException if {@code @InitBinder} method invocation fails",
                " \t */",
                "@@ -99,2 +102,3 @@ public class BindingContext {",
                " \t * @return the created data binder",
                "+\t * @throws ServerErrorException if {@code @InitBinder} method invocation fails",
                " \t */",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "index 216ecf7a0c..c60f24b88b 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "@@ -31,2 +31,3 @@ import org.springframework.web.reactive.BindingContext;",
                " import org.springframework.web.reactive.HandlerResult;",
                "+import org.springframework.web.server.ServerErrorException;",
                " import org.springframework.web.server.ServerWebExchange;",
                "@@ -97,2 +98,3 @@ public class SyncInvocableHandlerMethod extends HandlerMethod {",
                " \t * @return Mono with a {@link HandlerResult}.",
                "+\t * @throws ServerErrorException if method argument resolution or method invocation fails",
                " \t */",
                "@@ -106,5 +108,6 @@ public class SyncInvocableHandlerMethod extends HandlerMethod {",
                " \t\tif (processor.isTerminated()) {",
                "-\t\t\tThrowable error = processor.getError();",
                "-\t\t\tif (error != null) {",
                "-\t\t\t\tthrow (RuntimeException) error;",
                "+\t\t\tThrowable ex = processor.getError();",
                "+\t\t\tif (ex != null) {",
                "+\t\t\t\tthrow (ex instanceof ServerErrorException ? (ServerErrorException) ex :",
                "+\t\t\t\t\t\tnew ServerErrorException(\"Failed to invoke: \" + getShortLogMessage(), this, ex));",
                " \t\t\t}",
                "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolver.java",
                "index 0a7274fd07..28d5a4ce9d 100644",
                "--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolver.java",
                "+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolver.java",
                "@@ -94,3 +94,3 @@ public class PathVariableMethodArgumentResolver extends AbstractNamedValueSyncAr",
                " \tprotected void handleMissingValue(String name, MethodParameter parameter) {",
                "-\t\tthrow new ServerErrorException(name, parameter);",
                "+\t\tthrow new ServerErrorException(name, parameter, null);",
                " \t}"
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/BindingContext.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java",
                "spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/PathVariableMethodArgumentResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3fb8d16ff79d902ab5c2deee43da979dd92bcac4",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522782889,
            "hunks": 1,
            "message": "Temporarily remove reference to Spring Framework's Javadoc Issue: SPR-16687",
            "diff": [
                "diff --git a/gradle/docs.gradle b/gradle/docs.gradle",
                "index 510144e575..56f5c55a12 100644",
                "--- a/gradle/docs.gradle",
                "+++ b/gradle/docs.gradle",
                "@@ -71,5 +71,2 @@ dokka {",
                " \t})",
                "-\texternalDocumentationLink {",
                "-\t\turl = new URL(\"http://docs.spring.io/spring-framework/docs/${version}/javadoc-api/\")",
                "-\t}",
                " \texternalDocumentationLink {"
            ],
            "changed_files": [
                "gradle/docs.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "71cacff8c2f83884c31d9fd5ea2d67e4e1bb5a7f",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522837766,
            "hunks": 1,
            "message": "Upgrade to JUnit Jupiter 5.1 Issue: SPR-16408",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 66d2d8d989..cd4b629afc 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -49,5 +49,5 @@ configure(allprojects) { project ->",
                " \text.jettyVersion         = \"9.4.9.v20180320\"",
                "-\text.junitJupiterVersion  = \"5.0.3\"",
                "-\text.junitPlatformVersion = \"1.0.3\"",
                "-\text.junitVintageVersion  = \"4.12.3\"",
                "+\text.junitJupiterVersion  = \"5.1.0\"",
                "+\text.junitPlatformVersion = \"1.1.0\"",
                "+\text.junitVintageVersion  = \"5.1.0\"",
                " \text.kotlinVersion        = \"1.2.31\""
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5629fa2c9f94ed43aedfd87181164fcbc154fffc",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522359833,
            "hunks": 2,
            "message": "Pass type name into PreparedStatement.setNull in case of Types.OTHER Issue: SPR-16669 (cherry picked from commit 9a722b4)",
            "diff": [
                "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java",
                "index 14c2c94e7e..557e8bcf64 100644",
                "--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java",
                "+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -249,3 +249,3 @@ public abstract class StatementCreatorUtils {",
                " \tprivate static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException {",
                "-\t\tif (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) {",
                "+\t\tif (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && typeName == null)) {",
                " \t\t\tboolean useSetObject = false;"
            ],
            "changed_files": [
                "spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v4.3.15.RELEASE",
                "v4.3.16.RELEASE",
                "v4.3.17.RELEASE",
                "v4.3.18.RELEASE",
                "v4.3.19.RELEASE",
                "v4.3.20.RELEASE",
                "v4.3.21.RELEASE",
                "v4.3.22.RELEASE",
                "v4.3.23.RELEASE",
                "v4.3.24.RELEASE",
                "v4.3.25.RELEASE",
                "v4.3.26.RELEASE",
                "v4.3.27.RELEASE",
                "v4.3.28.RELEASE",
                "v4.3.29.RELEASE",
                "v4.3.30.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "56774baa2a0a15711f3895bc9d5082b1e7351dab",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522849424,
            "hunks": 4,
            "message": "Use Gradle 4.6's built-in support for the JUnit Platform Gradle 4.6 provides built-in support for the JUnit Platform within the standard `test` task. This commit configures a custom `testJUnitJupiter` test task for executing JUnit Jupiter tests directly on the JUnit Platform instead of indirectly on JUnit 4 via @RunWith(JUnitPlatform.class). This switch provides for better integration with Gradle's test reporting and paves the way for a possible transition to the JUnit Platform in the future. Issue: SPR-16672",
            "diff": [
                "diff --git a/spring-test/spring-test.gradle b/spring-test/spring-test.gradle",
                "index f921f589a7..0a0602bb5d 100644",
                "--- a/spring-test/spring-test.gradle",
                "+++ b/spring-test/spring-test.gradle",
                "@@ -105,11 +105,23 @@ task testNG(type: Test) {",
                "+task testJUnitJupiter(type: Test) {",
                "+\tdescription = 'Runs JUnit Jupiter tests.'",
                "+\tuseJUnitPlatform {",
                "+\t\tincludeEngines 'junit-jupiter'",
                "+\t\texcludeTags 'failing-test-case'",
                "+\t}",
                "+\tfilter {",
                "+\t\tincludeTestsMatching \"org.springframework.test.context.junit.jupiter.*\"",
                "+\t}",
                "+\treports.junitXml.destination = file(\"$buildDir/test-results\")",
                "+\t// Java Util Logging for the JUnit Platform.",
                "+\t// systemProperty('java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager')",
                "+}",
                "+",
                " test {",
                " \tdescription = 'Runs JUnit tests.'",
                "-\tdependsOn testNG",
                "+\tdependsOn testJUnitJupiter, testNG",
                " \tuseJUnit()",
                " \tscanForTestClasses = false",
                "-\tinclude(['**/*Tests.class', '**/*Test.class', '**/SpringJUnitJupiterTestSuite.class'])",
                "-\texclude(['**/testng/**/*.*'])",
                "-\t// Java Util Logging for JUnit 5.",
                "-\t// systemProperty('java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager')",
                "+\tinclude(['**/*Tests.class', '**/*Test.class'])",
                "+\texclude(['**/testng/**/*.*', '**/jupiter/**/*.*'])",
                " \treports.junitXml.destination = file(\"$buildDir/test-results\")",
                "@@ -120,3 +132,3 @@ task aggregateTestReports(type: TestReport) {",
                " \tdestinationDir = test.reports.html.destination",
                "-\treportOn test, testNG",
                "+\treportOn test, testJUnitJupiter, testNG",
                " }"
            ],
            "changed_files": [
                "spring-test/spring-test.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2dde000475d60b07bfe17f6233f2284aa03a5cc2",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523025317,
            "hunks": 7,
            "message": "Document socket timeout config limitations for HttpClient This commit documents the difference between configuring the socket timeout on the `RequestConfig` and on the `SocketConfig`. The first one does not affect timeouts when establishing an SSL connection or sending a CONNECT request to a proxy. For these use cases, it is required to configure `SocketConfig` on the `HttpClient` instance directly. Issue: SPR-16697",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java",
                "index 095b10a853..5608ebb400 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java",
                "@@ -71,3 +71,3 @@ public class HttpComponentsClientHttpRequestFactory implements ClientHttpRequest",
                " \t * Create a new instance of the {@code HttpComponentsClientHttpRequestFactory}",
                "-\t * with a default {@link HttpClient}.",
                "+\t * with a default {@link HttpClient} based on system properties.",
                " \t */",
                "@@ -105,3 +105,3 @@ public class HttpComponentsClientHttpRequestFactory implements ClientHttpRequest",
                " \t/**",
                "-\t * Set the connection timeout for the underlying HttpClient.",
                "+\t * Set the connection timeout for the underlying {@link RequestConfig}.",
                " \t * A timeout value of 0 specifies an infinite timeout.",
                "@@ -109,4 +109,9 @@ public class HttpComponentsClientHttpRequestFactory implements ClientHttpRequest",
                " \t * {@link RequestConfig} instance on a custom {@link HttpClient}.",
                "+\t * <p>This options does not affect connection timeouts for SSL",
                "+\t * handshakes or CONNECT requests; for that, it is required to",
                "+\t * use the {@link org.apache.http.config.SocketConfig} on the",
                "+\t * {@link HttpClient} itself.",
                " \t * @param timeout the timeout value in milliseconds",
                " \t * @see RequestConfig#getConnectTimeout()",
                "+\t * @see org.apache.http.config.SocketConfig#getSoTimeout",
                " \t */",
                "@@ -118,4 +123,4 @@ public class HttpComponentsClientHttpRequestFactory implements ClientHttpRequest",
                " \t/**",
                "-\t * Set the timeout in milliseconds used when requesting a connection from the connection",
                "-\t * manager using the underlying HttpClient.",
                "+\t * Set the timeout in milliseconds used when requesting a connection",
                "+\t * from the connection manager using the underlying {@link RequestConfig}.",
                " \t * A timeout value of 0 specifies an infinite timeout.",
                "@@ -127,3 +132,4 @@ public class HttpComponentsClientHttpRequestFactory implements ClientHttpRequest",
                " \tpublic void setConnectionRequestTimeout(int connectionRequestTimeout) {",
                "-\t\tthis.requestConfig = requestConfigBuilder().setConnectionRequestTimeout(connectionRequestTimeout).build();",
                "+\t\tthis.requestConfig = requestConfigBuilder()",
                "+\t\t\t\t.setConnectionRequestTimeout(connectionRequestTimeout).build();",
                " \t}",
                "@@ -131,3 +137,3 @@ public class HttpComponentsClientHttpRequestFactory implements ClientHttpRequest",
                " \t/**",
                "-\t * Set the socket read timeout for the underlying HttpClient.",
                "+\t * Set the socket read timeout for the underlying {@link RequestConfig}.",
                " \t * A timeout value of 0 specifies an infinite timeout."
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "586be501095f6715909d3f3efb483c9d3c13a2cc",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523887367,
            "hunks": 1,
            "message": "Fix typo",
            "diff": [
                "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java",
                "index 4ff71ca397..e83dc84cfc 100644",
                "--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java",
                "+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java",
                "@@ -322,4 +322,3 @@ public abstract class AbstractListenerReadPublisher<T> implements Publisher<T> {",
                " \t\t\t\t\ttry {",
                "-\t\t\t\t\t\tboolean demandAvailable = publisher.",
                "-\t\t\t\t\t\t\t\treadAndPublish();",
                "+\t\t\t\t\t\tboolean demandAvailable = publisher.readAndPublish();",
                " \t\t\t\t\t\tif (demandAvailable) {"
            ],
            "changed_files": [
                "spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "129c05bcff4bcd99b3139577debb2391a1dfe099",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522501922,
            "hunks": 26,
            "message": "Comprehensively cache annotated methods for interfaces and superclasses Issue: SPR-16675",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "index 41b8303241..9e86e3f464 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "@@ -1052,13 +1052,44 @@ public class AnnotatedElementUtils {",
                " \t\t\t\tAnnotation[] annotations = element.getDeclaredAnnotations();",
                "-\t\t\t\tList<T> aggregatedResults = (processor.aggregates() ? new ArrayList<>() : null);",
                "-",
                "-\t\t\t\t// Search in local annotations",
                "-\t\t\t\tfor (Annotation annotation : annotations) {",
                "-\t\t\t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "-\t\t\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) {",
                "-\t\t\t\t\t\tif (currentAnnotationType == annotationType ||",
                "-\t\t\t\t\t\t\t\tcurrentAnnotationType.getName().equals(annotationName) ||",
                "-\t\t\t\t\t\t\t\tprocessor.alwaysProcesses()) {",
                "-\t\t\t\t\t\t\tT result = processor.process(element, annotation, metaDepth);",
                "+\t\t\t\tif (annotations.length > 0) {",
                "+\t\t\t\t\tList<T> aggregatedResults = (processor.aggregates() ? new ArrayList<>() : null);",
                "+",
                "+\t\t\t\t\t// Search in local annotations",
                "+\t\t\t\t\tfor (Annotation annotation : annotations) {",
                "+\t\t\t\t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "+\t\t\t\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(currentAnnotationType)) {",
                "+\t\t\t\t\t\t\tif (currentAnnotationType == annotationType ||",
                "+\t\t\t\t\t\t\t\t\tcurrentAnnotationType.getName().equals(annotationName) ||",
                "+\t\t\t\t\t\t\t\t\tprocessor.alwaysProcesses()) {",
                "+\t\t\t\t\t\t\t\tT result = processor.process(element, annotation, metaDepth);",
                "+\t\t\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\t\t\tif (aggregatedResults != null && metaDepth == 0) {",
                "+\t\t\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "+\t\t\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t\t\t\telse {",
                "+\t\t\t\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t\t// Repeatable annotations in container?",
                "+\t\t\t\t\t\t\telse if (currentAnnotationType == containerType) {",
                "+\t\t\t\t\t\t\t\tfor (Annotation contained : getRawAnnotationsFromContainer(element, annotation)) {",
                "+\t\t\t\t\t\t\t\t\tT result = processor.process(element, contained, metaDepth);",
                "+\t\t\t\t\t\t\t\t\tif (aggregatedResults != null && result != null) {",
                "+\t\t\t\t\t\t\t\t\t\t// No need to post-process since repeatable annotations within a",
                "+\t\t\t\t\t\t\t\t\t\t// container cannot be composed annotations.",
                "+\t\t\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "+\t\t\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\t// Recursively search in meta-annotations",
                "+\t\t\t\t\tfor (Annotation annotation : annotations) {",
                "+\t\t\t\t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "+\t\t\t\t\t\tif (hasSearchableMetaAnnotations(currentAnnotationType, annotationType, annotationName)) {",
                "+\t\t\t\t\t\t\tT result = searchWithFindSemantics(currentAnnotationType, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth + 1);",
                " \t\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\t\tprocessor.postProcess(currentAnnotationType, annotation, result);",
                " \t\t\t\t\t\t\t\tif (aggregatedResults != null && metaDepth == 0) {",
                "@@ -1071,31 +1102,7 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\t\t}",
                "-\t\t\t\t\t\t// Repeatable annotations in container?",
                "-\t\t\t\t\t\telse if (currentAnnotationType == containerType) {",
                "-\t\t\t\t\t\t\tfor (Annotation contained : getRawAnnotationsFromContainer(element, annotation)) {",
                "-\t\t\t\t\t\t\t\tT result = processor.process(element, contained, metaDepth);",
                "-\t\t\t\t\t\t\t\tif (aggregatedResults != null && result != null) {",
                "-\t\t\t\t\t\t\t\t\t// No need to post-process since repeatable annotations within a",
                "-\t\t\t\t\t\t\t\t\t// container cannot be composed annotations.",
                "-\t\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "-\t\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t}",
                " \t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\t// Recursively search in meta-annotations",
                "-\t\t\t\tfor (Annotation annotation : annotations) {",
                "-\t\t\t\t\tClass<? extends Annotation> currentAnnotationType = annotation.annotationType();",
                "-\t\t\t\t\tif (hasSearchableMetaAnnotations(currentAnnotationType, annotationType, annotationName)) {",
                "-\t\t\t\t\t\tT result = searchWithFindSemantics(currentAnnotationType, annotationType, annotationName,",
                "-\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth + 1);",
                "-\t\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\t\tprocessor.postProcess(currentAnnotationType, annotation, result);",
                "-\t\t\t\t\t\t\tif (aggregatedResults != null && metaDepth == 0) {",
                "-\t\t\t\t\t\t\t\taggregatedResults.add(result);",
                "-\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\telse {",
                "-\t\t\t\t\t\t\t\treturn result;",
                "-\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t}",
                "+\t\t\t\t\tif (!CollectionUtils.isEmpty(aggregatedResults)) {",
                "+\t\t\t\t\t\t// Prepend to support top-down ordering within class hierarchies",
                "+\t\t\t\t\t\tprocessor.getAggregatedResults().addAll(0, aggregatedResults);",
                " \t\t\t\t\t}",
                "@@ -1103,7 +1110,2 @@ public class AnnotatedElementUtils {",
                "-\t\t\t\tif (!CollectionUtils.isEmpty(aggregatedResults)) {",
                "-\t\t\t\t\t// Prepend to support top-down ordering within class hierarchies",
                "-\t\t\t\t\tprocessor.getAggregatedResults().addAll(0, aggregatedResults);",
                "-\t\t\t\t}",
                "-",
                " \t\t\t\tif (element instanceof Method) {",
                "@@ -1125,4 +1127,4 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tif (ifcs.length > 0) {",
                "-\t\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName, containerType,",
                "-\t\t\t\t\t\t\t\tprocessor, visited, metaDepth, ifcs);",
                "+\t\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth, ifcs);",
                " \t\t\t\t\t\tif (result != null) {",
                "@@ -1139,19 +1141,19 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\t\ttry {",
                "-\t\t\t\t\t\t\tMethod equivalentMethod = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());",
                "-\t\t\t\t\t\t\tMethod resolvedEquivalentMethod = BridgeMethodResolver.findBridgedMethod(equivalentMethod);",
                "-\t\t\t\t\t\t\tresult = searchWithFindSemantics(resolvedEquivalentMethod, annotationType, annotationName,",
                "-\t\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth);",
                "-\t\t\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\tSet<Method> annotatedMethods = AnnotationUtils.getAnnotatedMethodsInBaseType(clazz);",
                "+\t\t\t\t\t\tif (!annotatedMethods.isEmpty()) {",
                "+\t\t\t\t\t\t\tfor (Method annotatedMethod : annotatedMethods) {",
                "+\t\t\t\t\t\t\t\tif (annotatedMethod.getName().equals(method.getName()) &&",
                "+\t\t\t\t\t\t\t\t\t\tArrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {",
                "+\t\t\t\t\t\t\t\t\tMethod resolvedSuperMethod = BridgeMethodResolver.findBridgedMethod(annotatedMethod);",
                "+\t\t\t\t\t\t\t\t\tresult = searchWithFindSemantics(resolvedSuperMethod, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth);",
                "+\t\t\t\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\t\t\t}",
                " \t\t\t\t\t\t\t}",
                " \t\t\t\t\t\t}",
                "-\t\t\t\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\t\t\t\t// No equivalent method found",
                "-\t\t\t\t\t\t}",
                "-",
                " \t\t\t\t\t\t// Search on interfaces declared on superclass",
                "-\t\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName, containerType, processor,",
                "-\t\t\t\t\t\t\t\tvisited, metaDepth, clazz.getInterfaces());",
                "+\t\t\t\t\t\tresult = searchOnInterfaces(method, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth, clazz.getInterfaces());",
                " \t\t\t\t\t\tif (result != null) {",
                "@@ -1166,4 +1168,4 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tfor (Class<?> ifc : clazz.getInterfaces()) {",
                "-\t\t\t\t\t\tT result = searchWithFindSemantics(ifc, annotationType, annotationName, containerType,",
                "-\t\t\t\t\t\t\t\tprocessor, visited, metaDepth);",
                "+\t\t\t\t\t\tT result = searchWithFindSemantics(ifc, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth);",
                " \t\t\t\t\t\tif (result != null) {",
                "@@ -1176,4 +1178,4 @@ public class AnnotatedElementUtils {",
                " \t\t\t\t\tif (superclass != null && Object.class != superclass) {",
                "-\t\t\t\t\t\tT result = searchWithFindSemantics(superclass, annotationType, annotationName, containerType,",
                "-\t\t\t\t\t\t\t\tprocessor, visited, metaDepth);",
                "+\t\t\t\t\t\tT result = searchWithFindSemantics(superclass, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth);",
                " \t\t\t\t\t\tif (result != null) {",
                "@@ -1197,14 +1199,14 @@ public class AnnotatedElementUtils {",
                " \t\tfor (Class<?> ifc : ifcs) {",
                "-\t\t\tif (AnnotationUtils.isInterfaceWithAnnotatedMethods(ifc)) {",
                "-\t\t\t\ttry {",
                "-\t\t\t\t\tMethod equivalentMethod = ifc.getMethod(method.getName(), method.getParameterTypes());",
                "-\t\t\t\t\tT result = searchWithFindSemantics(equivalentMethod, annotationType, annotationName, containerType,",
                "-\t\t\t\t\t\t\tprocessor, visited, metaDepth);",
                "-\t\t\t\t\tif (result != null) {",
                "-\t\t\t\t\t\treturn result;",
                "+\t\t\tSet<Method> annotatedMethods = AnnotationUtils.getAnnotatedMethodsInBaseType(ifc);",
                "+\t\t\tif (!annotatedMethods.isEmpty()) {",
                "+\t\t\t\tfor (Method annotatedMethod : annotatedMethods) {",
                "+\t\t\t\t\tif (annotatedMethod.getName().equals(method.getName()) &&",
                "+\t\t\t\t\t\t\tArrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {",
                "+\t\t\t\t\t\tT result = searchWithFindSemantics(annotatedMethod, annotationType, annotationName,",
                "+\t\t\t\t\t\t\t\tcontainerType, processor, visited, metaDepth);",
                "+\t\t\t\t\t\tif (result != null) {",
                "+\t\t\t\t\t\t\treturn result;",
                "+\t\t\t\t\t\t}",
                " \t\t\t\t\t}",
                " \t\t\t\t}",
                "-\t\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\t\t// Skip this interface - it doesn't have the method...",
                "-\t\t\t\t}",
                " \t\t\t}",
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "index 29b7d63c0a..238f11c407 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "@@ -28,2 +28,3 @@ import java.lang.reflect.Proxy;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collections;",
                "@@ -124,3 +125,3 @@ public abstract class AnnotationUtils {",
                "-\tprivate static final Map<Class<?>, Boolean> annotatedInterfaceCache =",
                "+\tprivate static final Map<Class<?>, Set<Method>> annotatedBaseTypeCache =",
                " \t\t\tnew ConcurrentReferenceHashMap<>(256);",
                "@@ -541,3 +542,2 @@ public abstract class AnnotationUtils {",
                " \t\t\tresult = findAnnotation((AnnotatedElement) resolvedMethod, annotationType);",
                "-",
                " \t\t\tif (result == null) {",
                "@@ -576,14 +576,13 @@ public abstract class AnnotationUtils {",
                " \tprivate static <A extends Annotation> A searchOnInterfaces(Method method, Class<A> annotationType, Class<?>... ifcs) {",
                "-\t\tA annotation = null;",
                " \t\tfor (Class<?> ifc : ifcs) {",
                "-\t\t\tif (isInterfaceWithAnnotatedMethods(ifc)) {",
                "-\t\t\t\ttry {",
                "-\t\t\t\t\tMethod equivalentMethod = ifc.getMethod(method.getName(), method.getParameterTypes());",
                "-\t\t\t\t\tannotation = getAnnotation(equivalentMethod, annotationType);",
                "-\t\t\t\t}",
                "-\t\t\t\tcatch (NoSuchMethodException ex) {",
                "-\t\t\t\t\t// Skip this interface - it doesn't have the method...",
                "-\t\t\t\t}",
                "-\t\t\t\tif (annotation != null) {",
                "-\t\t\t\t\tbreak;",
                "+\t\t\tSet<Method> annotatedMethods = getAnnotatedMethodsInBaseType(ifc);",
                "+\t\t\tif (!annotatedMethods.isEmpty()) {",
                "+\t\t\t\tfor (Method annotatedMethod : annotatedMethods) {",
                "+\t\t\t\t\tif (annotatedMethod.getName().equals(method.getName()) &&",
                "+\t\t\t\t\t\t\tArrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {",
                "+\t\t\t\t\t\tA annotation = getAnnotation(annotatedMethod, annotationType);",
                "+\t\t\t\t\t\tif (annotation != null) {",
                "+\t\t\t\t\t\t\treturn annotation;",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t}",
                " \t\t\t\t}",
                "@@ -591,21 +590,22 @@ public abstract class AnnotationUtils {",
                " \t\t}",
                "-\t\treturn annotation;",
                "+\t\treturn null;",
                " \t}",
                "-\tstatic boolean isInterfaceWithAnnotatedMethods(Class<?> ifc) {",
                "-\t\tif (ClassUtils.isJavaLanguageInterface(ifc)) {",
                "-\t\t\treturn false;",
                "+\tstatic Set<Method> getAnnotatedMethodsInBaseType(Class<?> baseType) {",
                "+\t\tif (ClassUtils.isJavaLanguageInterface(baseType)) {",
                "+\t\t\treturn Collections.emptySet();",
                " \t\t}",
                "-\t\tBoolean found = annotatedInterfaceCache.get(ifc);",
                "-\t\tif (found != null) {",
                "-\t\t\treturn found;",
                "+\t\tSet<Method> annotatedMethods = annotatedBaseTypeCache.get(baseType);",
                "+\t\tif (annotatedMethods != null) {",
                "+\t\t\treturn annotatedMethods;",
                " \t\t}",
                "-\t\tfound = Boolean.FALSE;",
                "-\t\tfor (Method ifcMethod : ifc.getMethods()) {",
                "+\t\tMethod[] methods = (baseType.isInterface() ? baseType.getMethods() : baseType.getDeclaredMethods());",
                "+\t\tfor (Method baseMethod : methods) {",
                " \t\t\ttry {",
                "-\t\t\t\tAnnotation[] anns = ifcMethod.getAnnotations();",
                "-\t\t\t\tif (anns.length > 1 || (anns.length == 1 && anns[0].annotationType() != Nullable.class)) {",
                "-\t\t\t\t\tfound = Boolean.TRUE;",
                "-\t\t\t\t\tbreak;",
                "+\t\t\t\tif (hasSearchableAnnotations(baseMethod)) {",
                "+\t\t\t\t\tif (annotatedMethods == null) {",
                "+\t\t\t\t\t\tannotatedMethods = new HashSet<>();",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tannotatedMethods.add(baseMethod);",
                " \t\t\t\t}",
                "@@ -613,7 +613,22 @@ public abstract class AnnotationUtils {",
                " \t\t\tcatch (Throwable ex) {",
                "-\t\t\t\thandleIntrospectionFailure(ifcMethod, ex);",
                "+\t\t\t\thandleIntrospectionFailure(baseMethod, ex);",
                " \t\t\t}",
                " \t\t}",
                "-\t\tannotatedInterfaceCache.put(ifc, found);",
                "-\t\treturn found;",
                "+\t\tif (annotatedMethods == null) {",
                "+\t\t\tannotatedMethods = Collections.emptySet();",
                "+\t\t}",
                "+\t\tannotatedBaseTypeCache.put(baseType, annotatedMethods);",
                "+\t\treturn annotatedMethods;",
                "+\t}",
                "+",
                "+\tprivate static boolean hasSearchableAnnotations(Method ifcMethod) {",
                "+\t\tAnnotation[] anns = ifcMethod.getAnnotations();",
                "+\t\tif (anns.length == 0) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+\t\tif (anns.length == 1) {",
                "+\t\t\tClass<?> annType = anns[0].annotationType();",
                "+\t\t\treturn (annType != Nullable.class && annType != Deprecated.class);",
                "+\t\t}",
                "+\t\treturn true;",
                " \t}",
                "@@ -1877,2 +1892,16 @@ public abstract class AnnotationUtils {",
                "+\t/**",
                "+\t * Clear the internal annotation metadata cache.",
                "+\t * @since 4.3.15",
                "+\t */",
                "+\tpublic static void clearCache() {",
                "+\t\tfindAnnotationCache.clear();",
                "+\t\tmetaPresentCache.clear();",
                "+\t\tannotatedBaseTypeCache.clear();",
                "+\t\tsynthesizableCache.clear();",
                "+\t\tattributeAliasesCache.clear();",
                "+\t\tattributeMethodsCache.clear();",
                "+\t\taliasDescriptorCache.clear();",
                "+\t}",
                "+"
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java",
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7631aa60622e5d581e9cce3a0832e22e031aded0",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523545284,
            "hunks": 2,
            "message": "Switch to Reactor Bismusth SNAPSHOTs",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 2a014d3c8a..ae46305d27 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -55,3 +55,3 @@ configure(allprojects) { project ->",
                " \text.nettyVersion         = \"4.1.23.Final\"",
                "-\text.reactorVersion       = \"Bismuth-SR8\"",
                "+\text.reactorVersion       = \"Bismuth-BUILD-SNAPSHOT\"",
                " \text.rxjavaVersion        = \"1.3.8\"",
                "@@ -141,2 +141,3 @@ configure(allprojects) { project ->",
                " \t\tmaven { url \"https://repo.spring.io/libs-release\" }",
                "+\t\tmaven { url \"https://repo.spring.io/snapshot\" }  // for Reactor",
                " \t}"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8874427cf467d6c3e79630bc58ec0200333a459b",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523358658,
            "hunks": 3,
            "message": "Clean up warnings in spring-core",
            "diff": [
                "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "index ea3facd7c9..ab7c0899cd 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "@@ -128,2 +128,3 @@ public abstract class AnnotationUtils {",
                "+\t@SuppressWarnings(\"unused\")",
                " \t@Deprecated  // just here for older tool versions trying to reflectively clear the cache",
                "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java",
                "index 42910bf902..df7240e3d3 100644",
                "--- a/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java",
                "+++ b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -23,3 +23,2 @@ import java.util.concurrent.TimeUnit;",
                " import java.util.concurrent.TimeoutException;",
                "-import java.util.function.BiConsumer;"
            ],
            "changed_files": [
                "spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java",
                "spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7fe28ce8b7d5e129eb8ccbb60e1262f10fc4fb89",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1523446177,
            "hunks": 2,
            "message": "Upgrade to Netty 4.1.23 and TestNG 6.14.3",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 66d2d8d989..3316b934eb 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -54,3 +54,3 @@ configure(allprojects) { project ->",
                " \text.log4jVersion         = \"2.11.0\"",
                "-\text.nettyVersion         = \"4.1.22.Final\"",
                "+\text.nettyVersion         = \"4.1.23.Final\"",
                " \text.reactorVersion       = \"Bismuth-SR8\"",
                "diff --git a/spring-test/spring-test.gradle b/spring-test/spring-test.gradle",
                "index f921f589a7..593720e336 100644",
                "--- a/spring-test/spring-test.gradle",
                "+++ b/spring-test/spring-test.gradle",
                "@@ -37,3 +37,3 @@ dependencies {",
                " \toptional(\"org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}\")",
                "-\toptional(\"org.testng:testng:6.14.2\")",
                "+\toptional(\"org.testng:testng:6.14.3\")",
                " \toptional(\"org.aspectj:aspectjweaver:${aspectjVersion}\")"
            ],
            "changed_files": [
                "build.gradle",
                "spring-test/spring-test.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "666037ec5ccf768ebeba23604e3ac6c5235db033",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522580222,
            "hunks": 3,
            "message": "Pointcut checking directly against superclass in case of CGLIB subclass Issue: SPR-16675",
            "diff": [
                "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
                "index f8974854a8..05e5327abe 100644",
                "--- a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
                "+++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -239,3 +239,4 @@ public abstract class AopUtils {",
                " \t\tSet<Class<?>> classes = new LinkedHashSet<>(ClassUtils.getAllInterfacesForClassAsSet(targetClass));",
                "-\t\tclasses.add(targetClass);",
                "+\t\tClass<?> userClass = ClassUtils.getUserClass(targetClass);",
                "+\t\tclasses.add(userClass);",
                " \t\tfor (Class<?> clazz : classes) {",
                "@@ -244,4 +245,4 @@ public abstract class AopUtils {",
                " \t\t\t\tif ((introductionAwareMethodMatcher != null &&",
                "-\t\t\t\t\t\tintroductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) ||",
                "-\t\t\t\t\t\tmethodMatcher.matches(method, targetClass)) {",
                "+\t\t\t\t\t\tintroductionAwareMethodMatcher.matches(method, userClass, hasIntroductions)) ||",
                "+\t\t\t\t\t\tmethodMatcher.matches(method, userClass)) {",
                " \t\t\t\t\treturn true;"
            ],
            "changed_files": [
                "spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "40d5e7cc80c3376cc0c3cd5cfaf89253e17d2ba6",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522770189,
            "hunks": 2,
            "message": "Upgrade to AspectJ 1.9 GA Issue: SPR-16686",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index f7e354b271..66d2d8d989 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -141,4 +141,2 @@ configure(allprojects) { project ->",
                " \t\tmaven { url \"https://repo.spring.io/libs-release\" }",
                "-\t\tmaven { url \"https://repo.spring.io/milestone\" }  // for AspectJ 1.9 beta",
                "-\t\tmaven { url \"https://repo.spring.io/snapshot\" }  // for Reactor",
                " \t}",
                "diff --git a/spring-aspects/spring-aspects.gradle b/spring-aspects/spring-aspects.gradle",
                "index 269b0a8f20..6422ff52f2 100644",
                "--- a/spring-aspects/spring-aspects.gradle",
                "+++ b/spring-aspects/spring-aspects.gradle",
                "@@ -82,4 +82,4 @@ dependencies {",
                " \taspects(project(\":spring-orm\"))",
                "-\tajc(\"org.aspectj:aspectjtools:1.9.0.RC2\")  // for JDK 9+ build compatibility",
                "-\trt(\"org.aspectj:aspectjrt:1.9.0.RC2\")  // for JDK 9+ build compatibility",
                "+\tajc(\"org.aspectj:aspectjtools:1.9.0\")  // for JDK 9+ build compatibility",
                "+\trt(\"org.aspectj:aspectjrt:1.9.0\")  // for JDK 9+ build compatibility",
                " \tcompile(\"org.aspectj:aspectjweaver:${aspectjVersion}\")  // for Maven POM exposure"
            ],
            "changed_files": [
                "build.gradle",
                "spring-aspects/spring-aspects.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6102715b8d7cc87f490000da519fe7f085cb5393",
            "repository": "https://github.com/spring-projects/spring-framework",
            "timestamp": 1522716161,
            "hunks": 17,
            "message": "Consistent treatment of proxy classes and interfaces for introspection Issue: SPR-16675 Issue: SPR-16677",
            "diff": [
                "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
                "index 05e5327abe..a6f87f573e 100644",
                "--- a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
                "+++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
                "@@ -194,3 +194,5 @@ public abstract class AopUtils {",
                " \tpublic static Method getMostSpecificMethod(Method method, @Nullable Class<?> targetClass) {",
                "-\t\tMethod resolvedMethod = ClassUtils.getMostSpecificMethod(method, targetClass);",
                "+\t\tClass<?> specificTargetClass = (targetClass != null && !Proxy.isProxyClass(targetClass) ?",
                "+\t\t\t\tClassUtils.getUserClass(targetClass) : null);",
                "+\t\tMethod resolvedMethod = ClassUtils.getMostSpecificMethod(method, specificTargetClass);",
                " \t\t// If we are dealing with method with generic parameters, find the original method.",
                "@@ -238,5 +240,8 @@ public abstract class AopUtils {",
                "-\t\tSet<Class<?>> classes = new LinkedHashSet<>(ClassUtils.getAllInterfacesForClassAsSet(targetClass));",
                "-\t\tClass<?> userClass = ClassUtils.getUserClass(targetClass);",
                "-\t\tclasses.add(userClass);",
                "+\t\tSet<Class<?>> classes = new LinkedHashSet<>();",
                "+\t\tif (!Proxy.isProxyClass(targetClass)) {",
                "+\t\t\tclasses.add(ClassUtils.getUserClass(targetClass));",
                "+\t\t}",
                "+\t\tclasses.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass));",
                "+",
                " \t\tfor (Class<?> clazz : classes) {",
                "@@ -245,4 +250,4 @@ public abstract class AopUtils {",
                " \t\t\t\tif ((introductionAwareMethodMatcher != null &&",
                "-\t\t\t\t\t\tintroductionAwareMethodMatcher.matches(method, userClass, hasIntroductions)) ||",
                "-\t\t\t\t\t\tmethodMatcher.matches(method, userClass)) {",
                "+\t\t\t\t\t\tintroductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) ||",
                "+\t\t\t\t\t\tmethodMatcher.matches(method, targetClass)) {",
                " \t\t\t\t\treturn true;",
                "diff --git a/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/AbstractFallbackJCacheOperationSource.java b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/AbstractFallbackJCacheOperationSource.java",
                "index 56233656e1..3ca53b2aeb 100644",
                "--- a/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/AbstractFallbackJCacheOperationSource.java",
                "+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/AbstractFallbackJCacheOperationSource.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2016 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -26,6 +26,5 @@ import org.apache.commons.logging.LogFactory;",
                "-import org.springframework.core.BridgeMethodResolver;",
                "+import org.springframework.aop.support.AopUtils;",
                " import org.springframework.core.MethodClassKey;",
                " import org.springframework.lang.Nullable;",
                "-import org.springframework.util.ClassUtils;",
                "@@ -89,5 +88,3 @@ public abstract class AbstractFallbackJCacheOperationSource implements JCacheOpe",
                " \t\t// If the target class is null, the method will be unchanged.",
                "-\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);",
                "-\t\t// If we are dealing with method with generic parameters, find the original method.",
                "-\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);",
                "+\t\tMethod specificMethod = AopUtils.getMostSpecificMethod(method, targetClass);",
                "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java b/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java",
                "index aaf09ab849..4b5cb59614 100644",
                "--- a/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java",
                "+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -28,3 +28,3 @@ import org.apache.commons.logging.LogFactory;",
                "-import org.springframework.core.BridgeMethodResolver;",
                "+import org.springframework.aop.support.AopUtils;",
                " import org.springframework.core.MethodClassKey;",
                "@@ -133,5 +133,3 @@ public abstract class AbstractFallbackCacheOperationSource implements CacheOpera",
                " \t\t// If the target class is null, the method will be unchanged.",
                "-\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);",
                "-\t\t// If we are dealing with method with generic parameters, find the original method.",
                "-\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);",
                "+\t\tMethod specificMethod = AopUtils.getMostSpecificMethod(method, targetClass);",
                "diff --git a/spring-core/src/main/java/org/springframework/core/MethodIntrospector.java b/spring-core/src/main/java/org/springframework/core/MethodIntrospector.java",
                "index d220814653..be7ea23a9a 100644",
                "--- a/spring-core/src/main/java/org/springframework/core/MethodIntrospector.java",
                "+++ b/spring-core/src/main/java/org/springframework/core/MethodIntrospector.java",
                "@@ -20,3 +20,2 @@ import java.lang.reflect.Method;",
                " import java.lang.reflect.Proxy;",
                "-import java.util.Collections;",
                " import java.util.LinkedHashMap;",
                "@@ -60,6 +59,6 @@ public abstract class MethodIntrospector {",
                " \t\tif (!Proxy.isProxyClass(targetType)) {",
                "-\t\t\thandlerTypes.add(targetType);",
                "-\t\t\tspecificHandlerType = targetType;",
                "+\t\t\tspecificHandlerType = ClassUtils.getUserClass(targetType);",
                "+\t\t\thandlerTypes.add(specificHandlerType);",
                " \t\t}",
                "-\t\tCollections.addAll(handlerTypes, targetType.getInterfaces());",
                "+\t\thandlerTypes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetType));",
                "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java",
                "index 7846f6f2d7..f9360ee5cf 100644",
                "--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java",
                "+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2002-2017 the original author or authors.",
                "+ * Copyright 2002-2018 the original author or authors.",
                "  *",
                "@@ -26,3 +26,3 @@ import org.apache.commons.logging.LogFactory;",
                "-import org.springframework.core.BridgeMethodResolver;",
                "+import org.springframework.aop.support.AopUtils;",
                " import org.springframework.core.MethodClassKey;",
                "@@ -150,9 +150,5 @@ public abstract class AbstractFallbackTransactionAttributeSource implements Tran",
                "-\t\t// Ignore CGLIB subclasses - introspect the actual user class.",
                "-\t\tClass<?> userClass = (targetClass != null ? ClassUtils.getUserClass(targetClass) : null);",
                " \t\t// The method may be on an interface, but we need attributes from the target class.",
                " \t\t// If the target class is null, the method will be unchanged.",
                "-\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(method, userClass);",
                "-\t\t// If we are dealing with method with generic parameters, find the original method.",
                "-\t\tspecificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);",
                "+\t\tMethod specificMethod = AopUtils.getMostSpecificMethod(method, targetClass);"
            ],
            "changed_files": [
                "spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
                "spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/AbstractFallbackJCacheOperationSource.java",
                "spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java",
                "spring-core/src/main/java/org/springframework/core/MethodIntrospector.java",
                "spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v5.0.10.RELEASE",
                "v5.0.11.RELEASE",
                "v5.0.12.RELEASE",
                "v5.0.13.RELEASE",
                "v5.0.14.RELEASE",
                "v5.0.15.RELEASE",
                "v5.0.16.RELEASE",
                "v5.0.17.RELEASE",
                "v5.0.18.RELEASE",
                "v5.0.19.RELEASE",
                "v5.0.20.RELEASE",
                "v5.0.5.RELEASE",
                "v5.0.6.RELEASE",
                "v5.0.7.RELEASE",
                "v5.0.8.RELEASE",
                "v5.0.9.RELEASE",
                "v5.1.0.RC1",
                "v5.1.0.RC2",
                "v5.1.0.RC3",
                "v5.1.0.RELEASE",
                "v5.1.1.RELEASE",
                "v5.1.10.RELEASE",
                "v5.1.11.RELEASE",
                "v5.1.12.RELEASE",
                "v5.1.13.RELEASE",
                "v5.1.14.RELEASE",
                "v5.1.15.RELEASE",
                "v5.1.16.RELEASE",
                "v5.1.17.RELEASE",
                "v5.1.18.RELEASE",
                "v5.1.19.RELEASE",
                "v5.1.2.RELEASE",
                "v5.1.20.RELEASE",
                "v5.1.3.RELEASE",
                "v5.1.4.RELEASE",
                "v5.1.5.RELEASE",
                "v5.1.6.RELEASE",
                "v5.1.7.RELEASE",
                "v5.1.8.RELEASE",
                "v5.1.9.RELEASE",
                "v5.2.0.M1",
                "v5.2.0.M2",
                "v5.2.0.M3",
                "v5.2.0.RC1",
                "v5.2.0.RC2",
                "v5.2.0.RELEASE",
                "v5.2.1.RELEASE",
                "v5.2.10.RELEASE",
                "v5.2.11.RELEASE",
                "v5.2.12.RELEASE",
                "v5.2.13.RELEASE",
                "v5.2.14.RELEASE",
                "v5.2.15.RELEASE",
                "v5.2.16.RELEASE",
                "v5.2.17.RELEASE",
                "v5.2.18.RELEASE",
                "v5.2.19.RELEASE",
                "v5.2.2.RELEASE",
                "v5.2.20.RELEASE",
                "v5.2.21.RELEASE",
                "v5.2.22.RELEASE",
                "v5.2.23.RELEASE",
                "v5.2.24.RELEASE",
                "v5.2.25.RELEASE",
                "v5.2.3.RELEASE",
                "v5.2.4.RELEASE",
                "v5.2.5.RELEASE",
                "v5.2.6.RELEASE",
                "v5.2.7.RELEASE",
                "v5.2.8.RELEASE",
                "v5.2.9.RELEASE",
                "v5.3.0",
                "v5.3.0-M1",
                "v5.3.0-M2",
                "v5.3.0-RC1",
                "v5.3.0-RC2",
                "v5.3.1",
                "v5.3.10",
                "v5.3.11",
                "v5.3.12",
                "v5.3.13",
                "v5.3.14",
                "v5.3.15",
                "v5.3.16",
                "v5.3.17",
                "v5.3.18",
                "v5.3.19",
                "v5.3.2",
                "v5.3.20",
                "v5.3.21",
                "v5.3.22",
                "v5.3.23",
                "v5.3.24",
                "v5.3.25",
                "v5.3.26",
                "v5.3.27",
                "v5.3.28",
                "v5.3.29",
                "v5.3.3",
                "v5.3.30",
                "v5.3.31",
                "v5.3.32",
                "v5.3.33",
                "v5.3.34",
                "v5.3.35",
                "v5.3.36",
                "v5.3.37",
                "v5.3.4",
                "v5.3.5",
                "v5.3.6",
                "v5.3.7",
                "v5.3.8",
                "v5.3.9",
                "v6.0.0",
                "v6.0.0-M1",
                "v6.0.0-M2",
                "v6.0.0-M3",
                "v6.0.0-M4",
                "v6.0.0-M5",
                "v6.0.0-M6",
                "v6.0.0-RC1",
                "v6.0.0-RC2",
                "v6.0.0-RC3",
                "v6.0.0-RC4",
                "v6.0.1",
                "v6.0.10",
                "v6.0.11",
                "v6.0.12",
                "v6.0.13",
                "v6.0.14",
                "v6.0.15",
                "v6.0.16",
                "v6.0.17",
                "v6.0.18",
                "v6.0.19",
                "v6.0.2",
                "v6.0.20",
                "v6.0.21",
                "v6.0.22",
                "v6.0.3",
                "v6.0.4",
                "v6.0.5",
                "v6.0.6",
                "v6.0.7",
                "v6.0.8",
                "v6.0.9",
                "v6.1.0",
                "v6.1.0-M1",
                "v6.1.0-M2",
                "v6.1.0-M3",
                "v6.1.0-M4",
                "v6.1.0-M5",
                "v6.1.0-RC1",
                "v6.1.0-RC2",
                "v6.1.1",
                "v6.1.10",
                "v6.1.2",
                "v6.1.3",
                "v6.1.4",
                "v6.1.5",
                "v6.1.6",
                "v6.1.7",
                "v6.1.8",
                "v6.1.9",
                "v6.2.0-M1",
                "v6.2.0-M2",
                "v6.2.0-M3",
                "v6.2.0-M4"
            ],
            "matched_rules": []
        }
    ]
}
