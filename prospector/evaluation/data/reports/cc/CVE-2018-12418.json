{
    "advisory_record": {
        "cve_id": "CVE-2018-12418",
        "description": "Archive.java in Junrar before 1.0.1, as used in Apache Tika and other products, is affected by a denial of service vulnerability due to an infinite loop when handling corrupt RAR files.",
        "reserved_timestamp": 1664755200,
        "published_timestamp": 1664814126,
        "updated_timestamp": 1664814126,
        "repository_url": null,
        "references": {
            "": 86,
            "commit::ad8d0ba8e155630da8a1215cee3f253e0af45817": 5,
            "https://access.redhat.com/support/": 5,
            "https://github.com/junrar/junrar/pull/8": 4,
            "https://access.redhat.com/downloads/": 4,
            "https://access.redhat.com/errata/": 3,
            "https://access.redhat.com/labs/": 3,
            "https://access.redhat.com/security/cve/cve-2018-12418": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "commit::b882f4091cca37d652f65db6e6081b1676f8b566": 2,
            "https://access.redhat.com/management/": 2,
            "https://access.redhat.com/": 2,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 2,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 2,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 2,
            "https://access.redhat.com/products/": 2,
            "https://access.redhat.com/documentation": 2,
            "https://access.redhat.com/product-life-cycles/": 2,
            "https://access.redhat.com/security": 2,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 2,
            "https://access.redhat.com/security/security-updates/#/cve": 2,
            "https://access.redhat.com/support/contact/": 2,
            "https://status.redhat.com": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.co/hiddenchars": 1,
            "https://github.com/junrar/junrar/pull/8#event-1654991144": 1,
            "https://github.com/beothorn": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1,
            "https://access.redhat.com/downloads/content/package-browser": 1,
            "https://catalog.redhat.com/software/containers/explore/": 1,
            "https://access.redhat.com/articles/1202803": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 1,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 1,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 1,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 1,
            "https://access.redhat.com/documentation/": 1,
            "https://access.redhat.com/security/": 1,
            "https://access.redhat.com/security/vulnerabilities": 1,
            "https://access.redhat.com/security/data": 1,
            "https://access.redhat.com/security/security-updates/#/security-labs": 1,
            "https://access.redhat.com/security/updates/backporting/": 1,
            "https://access.redhat.com/support/cases/": 1,
            "https://access.redhat.com/support/cases/#/troubleshoot": 1,
            "https://access.redhat.com/community": 1,
            "https://access.redhat.com/community/": 1,
            "https://access.redhat.com/discussions/": 1,
            "https://access.redhat.com/announcements/": 1,
            "https://access.redhat.com/accelerators/": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 1,
            "https://cloud.redhat.com/insights": 1,
            "https://access.redhat.com/changeLanguage?language=en": 1,
            "https://access.redhat.com/changeLanguage?language=fr": 1,
            "https://access.redhat.com/changeLanguage?language=ko": 1,
            "https://access.redhat.com/changeLanguage?language=ja": 1,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 1,
            "https://access.redhat.com/products/red-hat-satellite/": 1,
            "https://access.redhat.com/products/red-hat-subscription-management/": 1,
            "https://access.redhat.com/products/red-hat-insights/": 1,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 1,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-quay/": 1,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 1,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 1,
            "https://access.redhat.com/products/red-hat-storage/": 1,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 1,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 1,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 1,
            "https://access.redhat.com/products/red-hat-runtimes/": 1,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 1,
            "https://access.redhat.com/products/red-hat-data-grid/": 1,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 1,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 1,
            "https://access.redhat.com/products/spring-boot/": 1,
            "https://access.redhat.com/products/nodejs/": 1,
            "https://access.redhat.com/products/quarkus/": 1,
            "https://access.redhat.com/products/red-hat-application-foundations/": 1,
            "https://access.redhat.com/products/red-hat-fuse/": 1,
            "https://access.redhat.com/products/red-hat-amq/": 1,
            "https://access.redhat.com/products/red-hat-3scale/": 1,
            "https://redhat.com/en": 1,
            "https://twitter.com/RedHat": 1,
            "https://access.redhat.com/management": 1,
            "https://access.redhat.com/support": 1,
            "https://access.redhat.com/support/customer-service": 1,
            "https://access.redhat.com/articles/33844": 1,
            "https://access.redhat.com/help/login_assistance": 1,
            "https://www.redhat.com/en/trust": 1,
            "https://www.redhat.com/en/about/browser-support": 1,
            "https://www.redhat.com/en/about/digital-accessibility": 1,
            "https://access.redhat.com/recognition/": 1,
            "https://access.redhat.com/help/colophon/": 1,
            "https://www.redhat.com/": 1,
            "http://developers.redhat.com/": 1,
            "https://connect.redhat.com/": 1,
            "https://cloud.redhat.com/": 1,
            "https://access.redhat.com/subscription-value": 1,
            "https://www.redhat.com/about/": 1,
            "http://jobs.redhat.com": 1,
            "https://redhat.com/en/about/company": 1,
            "https://redhat.com/en/jobs": 1,
            "https://redhat.com/en/events": 1,
            "https://redhat.com/en/about/office-locations": 1,
            "https://redhat.com/en/contact": 1,
            "https://redhat.com/en/blog": 1,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 1,
            "https://coolstuff.redhat.com/": 1,
            "https://www.redhat.com/en/summit": 1,
            "https://redhat.com/en/about/privacy-policy": 1,
            "https://redhat.com/en/about/terms-use": 1,
            "https://redhat.com/en/about/all-policies-guidelines": 1,
            "https://redhat.com/en/about/digital-accessibility": 1
        },
        "affected_products": [
            "n/a",
            "Tika",
            "Apache",
            "Junrar"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "Archive",
            "RAR"
        ],
        "keywords": [
            "apache",
            "vulnerability",
            "affect",
            "loop",
            "handle",
            "junrar",
            "file",
            "denial",
            "product",
            "tika",
            "service"
        ],
        "files_extension": [
            "java"
        ],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "ad8d0ba8e155630da8a1215cee3f253e0af45817",
            "repository": "https://github.com/junrar/junrar",
            "timestamp": 1527733343,
            "hunks": 22,
            "message": "make Archive slightly more robust against corrupt files.  Add (#8) unit test file from Apache Tika.",
            "diff": [
                "diff --git a/src/main/java/com/github/junrar/Archive.java b/src/main/java/com/github/junrar/Archive.java",
                "index 94df25f2..ec09f887 100644",
                "--- a/src/main/java/com/github/junrar/Archive.java",
                "+++ b/src/main/java/com/github/junrar/Archive.java",
                "@@ -28,3 +28,5 @@ import java.io.PipedOutputStream;",
                " import java.util.ArrayList;",
                "+import java.util.HashSet;",
                " import java.util.List;",
                "+import java.util.Set;",
                " import java.util.logging.Level;",
                "@@ -64,2 +66,4 @@ public class Archive implements Closeable {",
                "+\tprivate static int MAX_HEADER_SIZE = 20971520;//20MB",
                "+",
                " \tprivate IReadOnlyAccess rof;",
                "@@ -231,3 +235,5 @@ public class Archive implements Closeable {",
                " \t\tint toRead = 0;",
                "-",
                "+\t\t//keep track of positions already processed for",
                "+\t\t//more robustness against corrupt files",
                "+\t\tSet<Long> processedPositions = new HashSet<Long>();",
                " \t\twhile (true) {",
                "@@ -235,3 +241,3 @@ public class Archive implements Closeable {",
                " \t\t\tlong newpos = 0;",
                "-\t\t\tbyte[] baseBlockBuffer = new byte[BaseBlock.BaseBlockSize];",
                "+\t\t\tbyte[] baseBlockBuffer = safelyAllocate(BaseBlock.BaseBlockSize, MAX_HEADER_SIZE);",
                "@@ -268,3 +274,3 @@ public class Archive implements Closeable {",
                " \t\t\t\t\t\t: MainHeader.mainHeaderSize;",
                "-\t\t\t\tbyte[] mainbuff = new byte[toRead];",
                "+\t\t\t\tbyte[] mainbuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                " \t\t\t\trof.readFully(mainbuff, toRead);",
                "@@ -282,3 +288,3 @@ public class Archive implements Closeable {",
                " \t\t\t\ttoRead = SignHeader.signHeaderSize;",
                "-\t\t\t\tbyte[] signBuff = new byte[toRead];",
                "+\t\t\t\tbyte[] signBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                " \t\t\t\trof.readFully(signBuff, toRead);",
                "@@ -292,3 +298,3 @@ public class Archive implements Closeable {",
                " \t\t\t\ttoRead = AVHeader.avHeaderSize;",
                "-\t\t\t\tbyte[] avBuff = new byte[toRead];",
                "+\t\t\t\tbyte[] avBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                " \t\t\t\trof.readFully(avBuff, toRead);",
                "@@ -301,3 +307,3 @@ public class Archive implements Closeable {",
                " \t\t\t\ttoRead = CommentHeader.commentHeaderSize;",
                "-\t\t\t\tbyte[] commBuff = new byte[toRead];",
                "+\t\t\t\tbyte[] commBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                " \t\t\t\trof.readFully(commBuff, toRead);",
                "@@ -309,2 +315,6 @@ public class Archive implements Closeable {",
                " \t\t\t\t\t\t+ commHead.getHeaderSize();",
                "+\t\t\t\tif (processedPositions.contains(newpos)) {",
                "+\t\t\t\t\tthrow new RarException(RarExceptionType.badRarArchive);",
                "+\t\t\t\t}",
                "+\t\t\t\tprocessedPositions.add(newpos);",
                " \t\t\t\trof.setPosition(newpos);",
                "@@ -323,3 +333,3 @@ public class Archive implements Closeable {",
                " \t\t\t\tif (toRead > 0) {",
                "-\t\t\t\t\tbyte[] endArchBuff = new byte[toRead];",
                "+\t\t\t\t\tbyte[] endArchBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                " \t\t\t\t\trof.readFully(endArchBuff, toRead);",
                "@@ -337,3 +347,3 @@ public class Archive implements Closeable {",
                " \t\t\tdefault:",
                "-\t\t\t\tbyte[] blockHeaderBuffer = new byte[BlockHeader.blockHeaderSize];",
                "+\t\t\t\tbyte[] blockHeaderBuffer = safelyAllocate(BlockHeader.blockHeaderSize, MAX_HEADER_SIZE);",
                " \t\t\t\trof.readFully(blockHeaderBuffer, BlockHeader.blockHeaderSize);",
                "@@ -348,3 +358,3 @@ public class Archive implements Closeable {",
                " \t\t\t\t\t\t\t- BlockHeader.blockHeaderSize;",
                "-\t\t\t\t\tbyte[] fileHeaderBuffer = new byte[toRead];",
                "+\t\t\t\t\tbyte[] fileHeaderBuffer = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                " \t\t\t\t\trof.readFully(fileHeaderBuffer, toRead);",
                "@@ -355,2 +365,6 @@ public class Archive implements Closeable {",
                " \t\t\t\t\t\t\t+ fh.getFullPackSize();",
                "+\t\t\t\t\tif (processedPositions.contains(newpos)) {",
                "+\t\t\t\t\t\tthrow new RarException(RarExceptionType.badRarArchive);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tprocessedPositions.add(newpos);",
                " \t\t\t\t\trof.setPosition(newpos);",
                "@@ -362,3 +376,3 @@ public class Archive implements Closeable {",
                " \t\t\t\t\t\t\t- BlockHeader.blockHeaderSize;",
                "-\t\t\t\t\tbyte[] protectHeaderBuffer = new byte[toRead];",
                "+\t\t\t\t\tbyte[] protectHeaderBuffer = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                " \t\t\t\t\trof.readFully(protectHeaderBuffer, toRead);",
                "@@ -366,5 +380,8 @@ public class Archive implements Closeable {",
                " \t\t\t\t\t\t\tprotectHeaderBuffer);",
                "-",
                " \t\t\t\t\tnewpos = ph.getPositionInFile() + ph.getHeaderSize()",
                " \t\t\t\t\t\t\t+ ph.getDataSize();",
                "+\t\t\t\t\tif (processedPositions.contains(newpos)) {",
                "+\t\t\t\t\t\tthrow new RarException(RarExceptionType.badRarArchive);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tprocessedPositions.add(newpos);",
                " \t\t\t\t\trof.setPosition(newpos);",
                "@@ -373,3 +390,3 @@ public class Archive implements Closeable {",
                " \t\t\t\tcase SubHeader: {",
                "-\t\t\t\t\tbyte[] subHeadbuffer = new byte[SubBlockHeader.SubBlockHeaderSize];",
                "+\t\t\t\t\tbyte[] subHeadbuffer = safelyAllocate(SubBlockHeader.SubBlockHeaderSize, MAX_HEADER_SIZE);",
                " \t\t\t\t\trof.readFully(subHeadbuffer,",
                "@@ -381,3 +398,3 @@ public class Archive implements Closeable {",
                " \t\t\t\t\tcase MAC_HEAD: {",
                "-\t\t\t\t\t\tbyte[] macHeaderbuffer = new byte[MacInfoHeader.MacInfoHeaderSize];",
                "+\t\t\t\t\t\tbyte[] macHeaderbuffer = safelyAllocate(MacInfoHeader.MacInfoHeaderSize, MAX_HEADER_SIZE);",
                " \t\t\t\t\t\trof.readFully(macHeaderbuffer,",
                "@@ -395,3 +412,3 @@ public class Archive implements Closeable {",
                " \t\t\t\t\tcase EA_HEAD: {",
                "-\t\t\t\t\t\tbyte[] eaHeaderBuffer = new byte[EAHeader.EAHeaderSize];",
                "+\t\t\t\t\t\tbyte[] eaHeaderBuffer = safelyAllocate(EAHeader.EAHeaderSize, MAX_HEADER_SIZE);",
                " \t\t\t\t\t\trof.readFully(eaHeaderBuffer, EAHeader.EAHeaderSize);",
                "@@ -413,3 +430,3 @@ public class Archive implements Closeable {",
                " \t\t\t\t\t\ttoRead -= SubBlockHeader.SubBlockHeaderSize;",
                "-\t\t\t\t\t\tbyte[] uoHeaderBuffer = new byte[toRead];",
                "+\t\t\t\t\t\tbyte[] uoHeaderBuffer = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                " \t\t\t\t\t\trof.readFully(uoHeaderBuffer, toRead);",
                "@@ -436,2 +453,12 @@ public class Archive implements Closeable {",
                "+\tprivate static byte[] safelyAllocate(long len, int maxSize) throws RarException {",
                "+\t\tif (maxSize < 0) {",
                "+\t\t\tthrow new IllegalArgumentException(\"maxsize must be >= 0\");",
                "+\t\t}",
                "+\t\tif (len < 0 || len > (long)maxSize) {",
                "+\t\t\tthrow new RarException(RarExceptionType.badRarArchive);",
                "+\t\t}",
                "+\t\treturn new byte[(int)len];",
                "+\t}",
                "+",
                " \t/**"
            ],
            "changed_files": [
                "src/main/java/com/github/junrar/Archive.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "8": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "junrar-1.0.1",
                "junrar-2.0.0",
                "junrar-3.0.0",
                "junrar-3.1.0",
                "junrar-3.1.1",
                "junrar-4.0.0",
                "v4.0.0",
                "v5.0.0",
                "v6.0.0",
                "v6.0.1",
                "v7.0.0",
                "v7.1.0",
                "v7.2.0",
                "v7.3.0",
                "v7.4.0",
                "v7.4.1",
                "v7.5.0",
                "v7.5.1",
                "v7.5.2",
                "v7.5.3",
                "v7.5.4",
                "v7.5.5"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 8",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 5 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: Archive",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: Archive",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/github/junrar/Archive.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: tika, file, apache",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 8",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6760131463c5fd7e9f7b815c03dad297903fbbf3",
            "repository": "https://github.com/junrar/junrar",
            "timestamp": 1527976102,
            "hunks": 157,
            "message": "Extracting from inputstream (#12)",
            "diff": [
                "diff --git a/src/main/java/com/github/junrar/Archive.java b/src/main/java/com/github/junrar/Archive.java",
                "index e59f146f..b7f3fd22 100644",
                "--- a/src/main/java/com/github/junrar/Archive.java",
                "+++ b/src/main/java/com/github/junrar/Archive.java",
                "@@ -38,2 +38,3 @@ import com.github.junrar.exception.RarException.RarExceptionType;",
                " import com.github.junrar.impl.FileVolumeManager;",
                "+import com.github.junrar.impl.InputStreamVolumeManager;",
                " import com.github.junrar.io.IReadOnlyAccess;",
                "@@ -60,3 +61,3 @@ import com.github.junrar.unpack.Unpack;",
                "  * The Main Rar Class; represents a rar Archive",
                "- * ",
                "+ *",
                "  * @author $LastChangedBy$",
                "@@ -65,3 +66,3 @@ import com.github.junrar.unpack.Unpack;",
                " public class Archive implements Closeable, Iterable<FileHeader> {",
                "-\t",
                "+",
                " \tprivate static Logger logger = Logger.getLogger(Archive.class.getName());",
                "@@ -96,5 +97,4 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tprivate FileHeader nextFileHeader;",
                "-\t",
                "-\tpublic Archive(VolumeManager volumeManager) throws RarException,",
                "-\t\t\tIOException {",
                "+",
                "+\tpublic Archive(final VolumeManager volumeManager) throws RarException, IOException {",
                " \t\tthis(volumeManager, null);",
                "@@ -104,3 +104,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t * create a new archive object using the given {@link VolumeManager}",
                "-\t * ",
                "+\t *",
                " \t * @param volumeManager",
                "@@ -110,4 +110,7 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t */",
                "-\tpublic Archive(VolumeManager volumeManager, UnrarCallback unrarCallback)",
                "-\t\t\tthrows RarException, IOException {",
                "+\tpublic Archive(",
                "+\t\tfinal VolumeManager volumeManager,",
                "+\t\tfinal UnrarCallback unrarCallback",
                "+\t) throws RarException, IOException {",
                "+",
                " \t\tthis.volumeManager = volumeManager;",
                "@@ -116,6 +119,6 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\tsetVolume(this.volumeManager.nextArchive(this, null));",
                "-\t\tdataIO = new ComprDataIO(this);",
                "+\t\tthis.dataIO = new ComprDataIO(this);",
                " \t}",
                "-\tpublic Archive(File firstVolume) throws RarException, IOException {",
                "+\tpublic Archive(final File firstVolume) throws RarException, IOException {",
                " \t\tthis(new FileVolumeManager(firstVolume), null);",
                "@@ -123,4 +126,6 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                "-\tpublic Archive(File firstVolume, UnrarCallback unrarCallback)",
                "-\t\t\tthrows RarException, IOException {",
                "+\tpublic Archive(",
                "+\t\tfinal File firstVolume,",
                "+\t\tfinal UnrarCallback unrarCallback",
                "+\t) throws RarException, IOException {",
                " \t\tthis(new FileVolumeManager(firstVolume), unrarCallback);",
                "@@ -137,10 +142,14 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                "-\tprivate void setFile(IReadOnlyAccess file, long length) throws IOException {",
                "-\t\ttotalPackedSize = 0L;",
                "-\t\ttotalPackedRead = 0L;",
                "+\tpublic Archive(final InputStream rarAsStream) throws RarException, IOException{",
                "+\t\tthis(new InputStreamVolumeManager(rarAsStream), null);",
                "+\t}",
                "+",
                "+\tprivate void setFile(final IReadOnlyAccess file, final long length) throws IOException {",
                "+\t\tthis.totalPackedSize = 0L;",
                "+\t\tthis.totalPackedRead = 0L;",
                " \t\tclose();",
                "-\t\trof = file;",
                "+\t\tthis.rof = file;",
                " \t\ttry {",
                " \t\t\treadHeaders(length);",
                "-\t\t} catch (Exception e) {",
                "+\t\t} catch (final Exception e) {",
                " \t\t\tlogger.log(Level.WARNING,",
                "@@ -152,10 +161,10 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t// Calculate size of packed data",
                "-\t\tfor (BaseBlock block : headers) {",
                "+\t\tfor (final BaseBlock block : this.headers) {",
                " \t\t\tif (block.getHeaderType() == UnrarHeadertype.FileHeader) {",
                "-\t\t\t\ttotalPackedSize += ((FileHeader) block).getFullPackSize();",
                "+\t\t\t\tthis.totalPackedSize += ((FileHeader) block).getFullPackSize();",
                " \t\t\t}",
                " \t\t}",
                "-\t\tif (unrarCallback != null) {",
                "-\t\t\tunrarCallback.volumeProgressChanged(totalPackedRead,",
                "-\t\t\t\t\ttotalPackedSize);",
                "+\t\tif (this.unrarCallback != null) {",
                "+\t\t\tthis.unrarCallback.volumeProgressChanged(this.totalPackedRead,",
                "+\t\t\t\t\tthis.totalPackedSize);",
                " \t\t}",
                "@@ -163,8 +172,8 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                "-\tpublic void bytesReadRead(int count) {",
                "+\tpublic void bytesReadRead(final int count) {",
                " \t\tif (count > 0) {",
                "-\t\t\ttotalPackedRead += count;",
                "-\t\t\tif (unrarCallback != null) {",
                "-\t\t\t\tunrarCallback.volumeProgressChanged(totalPackedRead,",
                "-\t\t\t\t\t\ttotalPackedSize);",
                "+\t\t\tthis.totalPackedRead += count;",
                "+\t\t\tif (this.unrarCallback != null) {",
                "+\t\t\t\tthis.unrarCallback.volumeProgressChanged(this.totalPackedRead,",
                "+\t\t\t\t\t\tthis.totalPackedSize);",
                " \t\t\t}",
                "@@ -174,3 +183,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic IReadOnlyAccess getRof() {",
                "-\t\treturn rof;",
                "+\t\treturn this.rof;",
                " \t}",
                "@@ -183,3 +192,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic List<BaseBlock> getHeaders() {",
                "-\t\treturn new ArrayList<BaseBlock>(headers);",
                "+\t\treturn new ArrayList<BaseBlock>(this.headers);",
                " \t}",
                "@@ -190,4 +199,4 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic List<FileHeader> getFileHeaders() {",
                "-\t\tList<FileHeader> list = new ArrayList<FileHeader>();",
                "-\t\tfor (BaseBlock block : headers) {",
                "+\t\tfinal List<FileHeader> list = new ArrayList<FileHeader>();",
                "+\t\tfor (final BaseBlock block : this.headers) {",
                " \t\t\tif (block.getHeaderType().equals(UnrarHeadertype.FileHeader)) {",
                "@@ -200,5 +209,5 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic FileHeader nextFileHeader() {",
                "-\t\tint n = headers.size();",
                "-\t\twhile (currentHeaderIndex < n) {",
                "-\t\t\tBaseBlock block = headers.get(currentHeaderIndex++);",
                "+\t\tfinal int n = this.headers.size();",
                "+\t\twhile (this.currentHeaderIndex < n) {",
                "+\t\t\tfinal BaseBlock block = this.headers.get(this.currentHeaderIndex++);",
                " \t\t\tif (block.getHeaderType() == UnrarHeadertype.FileHeader) {",
                "@@ -211,3 +220,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic UnrarCallback getUnrarCallback() {",
                "-\t\treturn unrarCallback;",
                "+\t\treturn this.unrarCallback;",
                " \t}",
                "@@ -215,3 +224,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t/**",
                "-\t * ",
                "+\t *",
                " \t * @return whether the archive is encrypted",
                "@@ -219,4 +228,4 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic boolean isEncrypted() {",
                "-\t\tif (newMhd != null) {",
                "-\t\t\treturn newMhd.isEncrypted();",
                "+\t\tif (this.newMhd != null) {",
                "+\t\t\treturn this.newMhd.isEncrypted();",
                " \t\t} else {",
                "@@ -228,3 +237,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t * Read the headers of the archive",
                "-\t * ",
                "+\t *",
                " \t * @param fileLength",
                "@@ -233,7 +242,7 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t */",
                "-\tprivate void readHeaders(long fileLength) throws IOException, RarException {",
                "-\t\tmarkHead = null;",
                "-\t\tnewMhd = null;",
                "-\t\theaders.clear();",
                "-\t\tcurrentHeaderIndex = 0;",
                "+\tprivate void readHeaders(final long fileLength) throws IOException, RarException {",
                "+\t\tthis.markHead = null;",
                "+\t\tthis.newMhd = null;",
                "+\t\tthis.headers.clear();",
                "+\t\tthis.currentHeaderIndex = 0;",
                " \t\tint toRead = 0;",
                "@@ -241,3 +250,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t//more robustness against corrupt files",
                "-\t\tSet<Long> processedPositions = new HashSet<Long>();",
                "+\t\tfinal Set<Long> processedPositions = new HashSet<Long>();",
                " \t\twhile (true) {",
                "@@ -245,5 +254,5 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\tlong newpos = 0;",
                "-\t\t\tbyte[] baseBlockBuffer = safelyAllocate(BaseBlock.BaseBlockSize, MAX_HEADER_SIZE);",
                "+\t\t\tfinal byte[] baseBlockBuffer = safelyAllocate(BaseBlock.BaseBlockSize, MAX_HEADER_SIZE);",
                "-\t\t\tlong position = rof.getPosition();",
                "+\t\t\tfinal long position = this.rof.getPosition();",
                "@@ -255,3 +264,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t// logger.info(\"\\n--------reading header--------\");",
                "-\t\t\tsize = rof.readFully(baseBlockBuffer, BaseBlock.BaseBlockSize);",
                "+\t\t\tsize = this.rof.readFully(baseBlockBuffer, BaseBlock.BaseBlockSize);",
                " \t\t\tif (size == 0) {",
                "@@ -259,3 +268,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t}",
                "-\t\t\tBaseBlock block = new BaseBlock(baseBlockBuffer);",
                "+\t\t\tfinal BaseBlock block = new BaseBlock(baseBlockBuffer);",
                "@@ -266,4 +275,4 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\tcase MarkHeader:",
                "-\t\t\t\tmarkHead = new MarkHeader(block);",
                "-\t\t\t\tif (!markHead.isSignature()) {",
                "+\t\t\t\tthis.markHead = new MarkHeader(block);",
                "+\t\t\t\tif (!this.markHead.isSignature()) {",
                " \t\t\t\t\tthrow new RarException(",
                "@@ -271,3 +280,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t}",
                "-\t\t\t\theaders.add(markHead);",
                "+\t\t\t\tthis.headers.add(this.markHead);",
                " \t\t\t\t// markHead.print();",
                "@@ -278,8 +287,8 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\t\t: MainHeader.mainHeaderSize;",
                "-\t\t\t\tbyte[] mainbuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "-\t\t\t\trof.readFully(mainbuff, toRead);",
                "-\t\t\t\tMainHeader mainhead = new MainHeader(block, mainbuff);",
                "-\t\t\t\theaders.add(mainhead);",
                "+\t\t\t\tfinal byte[] mainbuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "+\t\t\t\tthis.rof.readFully(mainbuff, toRead);",
                "+\t\t\t\tfinal MainHeader mainhead = new MainHeader(block, mainbuff);",
                "+\t\t\t\tthis.headers.add(mainhead);",
                " \t\t\t\tthis.newMhd = mainhead;",
                "-\t\t\t\tif (newMhd.isEncrypted()) {",
                "+\t\t\t\tif (this.newMhd.isEncrypted()) {",
                " \t\t\t\t\tthrow new RarException(",
                "@@ -292,6 +301,6 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\ttoRead = SignHeader.signHeaderSize;",
                "-\t\t\t\tbyte[] signBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "-\t\t\t\trof.readFully(signBuff, toRead);",
                "-\t\t\t\tSignHeader signHead = new SignHeader(block, signBuff);",
                "-\t\t\t\theaders.add(signHead);",
                "+\t\t\t\tfinal byte[] signBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "+\t\t\t\tthis.rof.readFully(signBuff, toRead);",
                "+\t\t\t\tfinal SignHeader signHead = new SignHeader(block, signBuff);",
                "+\t\t\t\tthis.headers.add(signHead);",
                " \t\t\t\t// logger.info(\"HeaderType: SignHeader\");",
                "@@ -302,6 +311,6 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\ttoRead = AVHeader.avHeaderSize;",
                "-\t\t\t\tbyte[] avBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "-\t\t\t\trof.readFully(avBuff, toRead);",
                "-\t\t\t\tAVHeader avHead = new AVHeader(block, avBuff);",
                "-\t\t\t\theaders.add(avHead);",
                "+\t\t\t\tfinal byte[] avBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "+\t\t\t\tthis.rof.readFully(avBuff, toRead);",
                "+\t\t\t\tfinal AVHeader avHead = new AVHeader(block, avBuff);",
                "+\t\t\t\tthis.headers.add(avHead);",
                " \t\t\t\t// logger.info(\"headertype: AVHeader\");",
                "@@ -311,6 +320,6 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\ttoRead = CommentHeader.commentHeaderSize;",
                "-\t\t\t\tbyte[] commBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "-\t\t\t\trof.readFully(commBuff, toRead);",
                "-\t\t\t\tCommentHeader commHead = new CommentHeader(block, commBuff);",
                "-\t\t\t\theaders.add(commHead);",
                "+\t\t\t\tfinal byte[] commBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "+\t\t\t\tthis.rof.readFully(commBuff, toRead);",
                "+\t\t\t\tfinal CommentHeader commHead = new CommentHeader(block, commBuff);",
                "+\t\t\t\tthis.headers.add(commHead);",
                " \t\t\t\t// logger.info(\"method: \"+commHead.getUnpMethod()+\"; 0x\"+",
                "@@ -323,3 +332,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\tprocessedPositions.add(newpos);",
                "-\t\t\t\trof.setPosition(newpos);",
                "+\t\t\t\tthis.rof.setPosition(newpos);",
                "@@ -337,4 +346,4 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\tif (toRead > 0) {",
                "-\t\t\t\t\tbyte[] endArchBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "-\t\t\t\t\trof.readFully(endArchBuff, toRead);",
                "+\t\t\t\t\tfinal byte[] endArchBuff = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "+\t\t\t\t\tthis.rof.readFully(endArchBuff, toRead);",
                " \t\t\t\t\tendArcHead = new EndArcHeader(block, endArchBuff);",
                "@@ -346,3 +355,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t}",
                "-\t\t\t\theaders.add(endArcHead);",
                "+\t\t\t\tthis.headers.add(endArcHead);",
                " \t\t\t\t// logger.info(\"\\n--------end header--------\");",
                "@@ -351,5 +360,5 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\tdefault:",
                "-\t\t\t\tbyte[] blockHeaderBuffer = safelyAllocate(BlockHeader.blockHeaderSize, MAX_HEADER_SIZE);",
                "-\t\t\t\trof.readFully(blockHeaderBuffer, BlockHeader.blockHeaderSize);",
                "-\t\t\t\tBlockHeader blockHead = new BlockHeader(block,",
                "+\t\t\t\tfinal byte[] blockHeaderBuffer = safelyAllocate(BlockHeader.blockHeaderSize, MAX_HEADER_SIZE);",
                "+\t\t\t\tthis.rof.readFully(blockHeaderBuffer, BlockHeader.blockHeaderSize);",
                "+\t\t\t\tfinal BlockHeader blockHead = new BlockHeader(block,",
                " \t\t\t\t\t\tblockHeaderBuffer);",
                "@@ -362,7 +371,7 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\t\t\t- BlockHeader.blockHeaderSize;",
                "-\t\t\t\t\tbyte[] fileHeaderBuffer = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "-\t\t\t\t\trof.readFully(fileHeaderBuffer, toRead);",
                "+\t\t\t\t\tfinal byte[] fileHeaderBuffer = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "+\t\t\t\t\tthis.rof.readFully(fileHeaderBuffer, toRead);",
                "-\t\t\t\t\tFileHeader fh = new FileHeader(blockHead, fileHeaderBuffer);",
                "-\t\t\t\t\theaders.add(fh);",
                "+\t\t\t\t\tfinal FileHeader fh = new FileHeader(blockHead, fileHeaderBuffer);",
                "+\t\t\t\t\tthis.headers.add(fh);",
                " \t\t\t\t\tnewpos = fh.getPositionInFile() + fh.getHeaderSize()",
                "@@ -373,3 +382,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\tprocessedPositions.add(newpos);",
                "-\t\t\t\t\trof.setPosition(newpos);",
                "+\t\t\t\t\tthis.rof.setPosition(newpos);",
                " \t\t\t\t\tbreak;",
                "@@ -380,5 +389,5 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\t\t\t- BlockHeader.blockHeaderSize;",
                "-\t\t\t\t\tbyte[] protectHeaderBuffer = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "-\t\t\t\t\trof.readFully(protectHeaderBuffer, toRead);",
                "-\t\t\t\t\tProtectHeader ph = new ProtectHeader(blockHead,",
                "+\t\t\t\t\tfinal byte[] protectHeaderBuffer = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "+\t\t\t\t\tthis.rof.readFully(protectHeaderBuffer, toRead);",
                "+\t\t\t\t\tfinal ProtectHeader ph = new ProtectHeader(blockHead,",
                " \t\t\t\t\t\t\tprotectHeaderBuffer);",
                "@@ -390,3 +399,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\tprocessedPositions.add(newpos);",
                "-\t\t\t\t\trof.setPosition(newpos);",
                "+\t\t\t\t\tthis.rof.setPosition(newpos);",
                " \t\t\t\t\tbreak;",
                "@@ -394,6 +403,6 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\tcase SubHeader: {",
                "-\t\t\t\t\tbyte[] subHeadbuffer = safelyAllocate(SubBlockHeader.SubBlockHeaderSize, MAX_HEADER_SIZE);",
                "-\t\t\t\t\trof.readFully(subHeadbuffer,",
                "+\t\t\t\t\tfinal byte[] subHeadbuffer = safelyAllocate(SubBlockHeader.SubBlockHeaderSize, MAX_HEADER_SIZE);",
                "+\t\t\t\t\tthis.rof.readFully(subHeadbuffer,",
                " \t\t\t\t\t\t\tSubBlockHeader.SubBlockHeaderSize);",
                "-\t\t\t\t\tSubBlockHeader subHead = new SubBlockHeader(blockHead,",
                "+\t\t\t\t\tfinal SubBlockHeader subHead = new SubBlockHeader(blockHead,",
                " \t\t\t\t\t\t\tsubHeadbuffer);",
                "@@ -402,9 +411,9 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\tcase MAC_HEAD: {",
                "-\t\t\t\t\t\tbyte[] macHeaderbuffer = safelyAllocate(MacInfoHeader.MacInfoHeaderSize, MAX_HEADER_SIZE);",
                "-\t\t\t\t\t\trof.readFully(macHeaderbuffer,",
                "+\t\t\t\t\t\tfinal byte[] macHeaderbuffer = safelyAllocate(MacInfoHeader.MacInfoHeaderSize, MAX_HEADER_SIZE);",
                "+\t\t\t\t\t\tthis.rof.readFully(macHeaderbuffer,",
                " \t\t\t\t\t\t\t\tMacInfoHeader.MacInfoHeaderSize);",
                "-\t\t\t\t\t\tMacInfoHeader macHeader = new MacInfoHeader(subHead,",
                "+\t\t\t\t\t\tfinal MacInfoHeader macHeader = new MacInfoHeader(subHead,",
                " \t\t\t\t\t\t\t\tmacHeaderbuffer);",
                " \t\t\t\t\t\tmacHeader.print();",
                "-\t\t\t\t\t\theaders.add(macHeader);",
                "+\t\t\t\t\t\tthis.headers.add(macHeader);",
                "@@ -416,8 +425,8 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\tcase EA_HEAD: {",
                "-\t\t\t\t\t\tbyte[] eaHeaderBuffer = safelyAllocate(EAHeader.EAHeaderSize, MAX_HEADER_SIZE);",
                "-\t\t\t\t\t\trof.readFully(eaHeaderBuffer, EAHeader.EAHeaderSize);",
                "-\t\t\t\t\t\tEAHeader eaHeader = new EAHeader(subHead,",
                "+\t\t\t\t\t\tfinal byte[] eaHeaderBuffer = safelyAllocate(EAHeader.EAHeaderSize, MAX_HEADER_SIZE);",
                "+\t\t\t\t\t\tthis.rof.readFully(eaHeaderBuffer, EAHeader.EAHeaderSize);",
                "+\t\t\t\t\t\tfinal EAHeader eaHeader = new EAHeader(subHead,",
                " \t\t\t\t\t\t\t\teaHeaderBuffer);",
                " \t\t\t\t\t\teaHeader.print();",
                "-\t\t\t\t\t\theaders.add(eaHeader);",
                "+\t\t\t\t\t\tthis.headers.add(eaHeader);",
                "@@ -434,8 +443,8 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\t\ttoRead -= SubBlockHeader.SubBlockHeaderSize;",
                "-\t\t\t\t\t\tbyte[] uoHeaderBuffer = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "-\t\t\t\t\t\trof.readFully(uoHeaderBuffer, toRead);",
                "-\t\t\t\t\t\tUnixOwnersHeader uoHeader = new UnixOwnersHeader(",
                "+\t\t\t\t\t\tfinal byte[] uoHeaderBuffer = safelyAllocate(toRead, MAX_HEADER_SIZE);",
                "+\t\t\t\t\t\tthis.rof.readFully(uoHeaderBuffer, toRead);",
                "+\t\t\t\t\t\tfinal UnixOwnersHeader uoHeader = new UnixOwnersHeader(",
                " \t\t\t\t\t\t\t\tsubHead, uoHeaderBuffer);",
                " \t\t\t\t\t\tuoHeader.print();",
                "-\t\t\t\t\t\theaders.add(uoHeader);",
                "+\t\t\t\t\t\tthis.headers.add(uoHeader);",
                " \t\t\t\t\t\tbreak;",
                "@@ -457,3 +466,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                "-\tprivate static byte[] safelyAllocate(long len, int maxSize) throws RarException {",
                "+\tprivate static byte[] safelyAllocate(final long len, final int maxSize) throws RarException {",
                " \t\tif (maxSize < 0) {",
                "@@ -461,3 +470,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t}",
                "-\t\tif (len < 0 || len > (long)maxSize) {",
                "+\t\tif (len < 0 || len > maxSize) {",
                " \t\t\tthrow new RarException(RarExceptionType.badRarArchive);",
                "@@ -470,3 +479,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t * supplied output stream",
                "-\t * ",
                "+\t *",
                " \t * @param hd",
                "@@ -477,4 +486,4 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t */",
                "-\tpublic void extractFile(FileHeader hd, OutputStream os) throws RarException {",
                "-\t\tif (!headers.contains(hd)) {",
                "+\tpublic void extractFile(final FileHeader hd, final OutputStream os) throws RarException {",
                "+\t\tif (!this.headers.contains(hd)) {",
                " \t\t\tthrow new RarException(RarExceptionType.headerNotInArchive);",
                "@@ -483,3 +492,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\tdoExtractFile(hd, os);",
                "-\t\t} catch (Exception e) {",
                "+\t\t} catch (final Exception e) {",
                " \t\t\tif (e instanceof RarException) {",
                "@@ -496,3 +505,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t * pair of Pipe streams.",
                "-\t * ",
                "+\t *",
                " \t * @param hd",
                "@@ -511,2 +520,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\tnew Thread(new Runnable() {",
                "+\t\t\t@Override",
                " \t\t\tpublic void run() {",
                "@@ -514,3 +524,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\textractFile(hd, out);",
                "-\t\t\t\t} catch (RarException e) {",
                "+\t\t\t\t} catch (final RarException e) {",
                " \t\t\t\t} finally {",
                "@@ -518,3 +528,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\t\t\tout.close();",
                "-\t\t\t\t\t} catch (IOException e) {",
                "+\t\t\t\t\t} catch (final IOException e) {",
                " \t\t\t\t\t}",
                "@@ -527,21 +537,21 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                "-\tprivate void doExtractFile(FileHeader hd, OutputStream os)",
                "+\tprivate void doExtractFile(FileHeader hd, final OutputStream os)",
                " \t\t\tthrows RarException, IOException {",
                "-\t\tdataIO.init(os);",
                "-\t\tdataIO.init(hd);",
                "-\t\tdataIO.setUnpFileCRC(this.isOldFormat() ? 0 : 0xffFFffFF);",
                "-\t\tif (unpack == null) {",
                "-\t\t\tunpack = new Unpack(dataIO);",
                "+\t\tthis.dataIO.init(os);",
                "+\t\tthis.dataIO.init(hd);",
                "+\t\tthis.dataIO.setUnpFileCRC(this.isOldFormat() ? 0 : 0xffFFffFF);",
                "+\t\tif (this.unpack == null) {",
                "+\t\t\tthis.unpack = new Unpack(this.dataIO);",
                " \t\t}",
                " \t\tif (!hd.isSolid()) {",
                "-\t\t\tunpack.init(null);",
                "+\t\t\tthis.unpack.init(null);",
                " \t\t}",
                "-\t\tunpack.setDestSize(hd.getFullUnpackSize());",
                "+\t\tthis.unpack.setDestSize(hd.getFullUnpackSize());",
                " \t\ttry {",
                "-\t\t\tunpack.doUnpack(hd.getUnpVersion(), hd.isSolid());",
                "+\t\t\tthis.unpack.doUnpack(hd.getUnpVersion(), hd.isSolid());",
                " \t\t\t// Verify file CRC",
                "-\t\t\thd = dataIO.getSubHeader();",
                "-\t\t\tlong actualCRC = hd.isSplitAfter() ? ~dataIO.getPackedCRC()",
                "-\t\t\t\t\t: ~dataIO.getUnpFileCRC();",
                "-\t\t\tint expectedCRC = hd.getFileCRC();",
                "+\t\t\thd = this.dataIO.getSubHeader();",
                "+\t\t\tfinal long actualCRC = hd.isSplitAfter() ? ~this.dataIO.getPackedCRC()",
                "+\t\t\t\t\t: ~this.dataIO.getUnpFileCRC();",
                "+\t\t\tfinal int expectedCRC = hd.getFileCRC();",
                " \t\t\tif (actualCRC != expectedCRC) {",
                "@@ -555,4 +565,4 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t// }",
                "-\t\t} catch (Exception e) {",
                "-\t\t\tunpack.cleanUp();",
                "+\t\t} catch (final Exception e) {",
                "+\t\t\tthis.unpack.cleanUp();",
                " \t\t\tif (e instanceof RarException) {",
                "@@ -570,3 +580,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic MainHeader getMainHeader() {",
                "-\t\treturn newMhd;",
                "+\t\treturn this.newMhd;",
                " \t}",
                "@@ -577,3 +587,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic boolean isOldFormat() {",
                "-\t\treturn markHead.isOldFormat();",
                "+\t\treturn this.markHead.isOldFormat();",
                " \t}",
                "@@ -581,9 +591,10 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t/** Close the underlying compressed file. */",
                "+\t@Override",
                " \tpublic void close() throws IOException {",
                "-\t\tif (rof != null) {",
                "-\t\t\trof.close();",
                "-\t\t\trof = null;",
                "+\t\tif (this.rof != null) {",
                "+\t\t\tthis.rof.close();",
                "+\t\t\tthis.rof = null;",
                " \t\t}",
                "-\t\tif (unpack != null) {",
                "-\t\t\tunpack.cleanUp();",
                "+\t\tif (this.unpack != null) {",
                "+\t\t\tthis.unpack.cleanUp();",
                " \t\t}",
                "@@ -595,3 +606,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic VolumeManager getVolumeManager() {",
                "-\t\treturn volumeManager;",
                "+\t\treturn this.volumeManager;",
                " \t}",
                "@@ -602,3 +613,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t */",
                "-\tpublic void setVolumeManager(VolumeManager volumeManager) {",
                "+\tpublic void setVolumeManager(final VolumeManager volumeManager) {",
                " \t\tthis.volumeManager = volumeManager;",
                "@@ -610,3 +621,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \tpublic Volume getVolume() {",
                "-\t\treturn volume;",
                "+\t\treturn this.volume;",
                " \t}",
                "@@ -618,3 +629,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t */",
                "-\tpublic void setVolume(Volume volume) throws IOException {",
                "+\tpublic void setVolume(final Volume volume) throws IOException {",
                " \t\tthis.volume = volume;",
                "@@ -626,3 +637,3 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\treturn new Iterator<FileHeader>() {",
                "-\t\t\t",
                "+",
                " \t\t\t@Override",
                "@@ -630,4 +641,4 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t\tFileHeader next;",
                "-\t\t\t\tif(nextFileHeader != null) {",
                "-\t\t\t\t\tnext =  nextFileHeader;",
                "+\t\t\t\tif(Archive.this.nextFileHeader != null) {",
                "+\t\t\t\t\tnext =  Archive.this.nextFileHeader;",
                " \t\t\t\t}else {",
                "@@ -637,7 +648,7 @@ public class Archive implements Closeable, Iterable<FileHeader> {",
                " \t\t\t}",
                "-\t\t\t",
                "+",
                " \t\t\t@Override",
                " \t\t\tpublic boolean hasNext() {",
                "-\t\t\t\tnextFileHeader = nextFileHeader();",
                "-\t\t\t\treturn nextFileHeader != null;",
                "+\t\t\t\tArchive.this.nextFileHeader = nextFileHeader();",
                "+\t\t\t\treturn Archive.this.nextFileHeader != null;",
                " \t\t\t}",
                "diff --git a/src/main/java/com/github/junrar/Junrar.java b/src/main/java/com/github/junrar/Junrar.java",
                "index f37c6488..cabce11e 100644",
                "--- a/src/main/java/com/github/junrar/Junrar.java",
                "+++ b/src/main/java/com/github/junrar/Junrar.java",
                "@@ -6,2 +6,3 @@ import java.io.FileOutputStream;",
                " import java.io.IOException;",
                "+import java.io.InputStream;",
                " import java.io.OutputStream;",
                "@@ -17,5 +18,5 @@ import com.github.junrar.rarfile.FileHeader;",
                " public class Junrar {",
                "-\t",
                "+",
                " \tprivate static Log logger = LogFactory.getLog(Junrar.class.getName());",
                "-\t",
                "+",
                " \tpublic static void extract(final String rarPath, final String destinationPath) throws IOException, RarException {",
                "@@ -24,7 +25,7 @@ public class Junrar {",
                " \t\t}",
                "-\t\tFile arch = new File(rarPath);",
                "-\t\tFile dest = new File(destinationPath);",
                "+\t\tfinal File arch = new File(rarPath);",
                "+\t\tfinal File dest = new File(destinationPath);",
                " \t\textract(arch, dest);",
                " \t}",
                "-\t",
                "+",
                " \tpublic static void extract(final File rar, final File destinationFolder) throws RarException, IOException {",
                "@@ -32,3 +33,9 @@ public class Junrar {",
                " \t\tvalidateDestinationPath(destinationFolder);",
                "-\t\textractArchive(rar, destinationFolder);  ",
                "+\t\textractFileTo(rar, destinationFolder);",
                "+\t}",
                "+",
                "+\tpublic static void extract(final InputStream resourceAsStream, final File destinationFolder) throws RarException, IOException {",
                "+\t\tvalidateDestinationPath(destinationFolder);",
                "+\t\tfinal Archive arch = createArchiveOrThrowException(logger, resourceAsStream);",
                "+\t\textractArchiveTo(arch, destinationFolder);",
                " \t}",
                "@@ -37,6 +44,6 @@ public class Junrar {",
                " \t\tvalidateRarPath(rar);",
                "-\t\t",
                "-\t\tList<ContentDescription> contents = new ArrayList<ContentDescription>();",
                "-\t\t",
                "-\t\tArchive arch = createArchiveOrThrowException(logger, rar);\t\t",
                "+",
                "+\t\tfinal Archive arch = createArchiveOrThrowException(logger, rar);",
                "+",
                "+\t\tfinal List<ContentDescription> contents = new ArrayList<ContentDescription>();",
                " \t\ttry{",
                "@@ -46,3 +53,3 @@ public class Junrar {",
                " \t\t\t}",
                "-\t\t\tfor(FileHeader fileHeader : arch ) {",
                "+\t\t\tfor(final FileHeader fileHeader : arch ) {",
                " \t\t\t\tcontents.add(new ContentDescription(fileHeader.getFileNameString(), fileHeader.getUnpSize()));",
                "@@ -55,2 +62,26 @@ public class Junrar {",
                "+\tprivate static Archive createArchiveOrThrowException(final Log logger, final InputStream rarAsStream) throws RarException, IOException {",
                "+\t\ttry {",
                "+\t\t\treturn new Archive(rarAsStream);",
                "+\t\t} catch (final RarException e) {",
                "+\t\t\tlogger.error(e);",
                "+\t\t\tthrow e;",
                "+\t\t} catch (final IOException e1) {",
                "+\t\t\tlogger.error(e1);",
                "+\t\t\tthrow e1;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate static Archive createArchiveOrThrowException(final Log logger, final File archive) throws RarException, IOException {",
                "+\t\ttry {",
                "+\t\t\treturn new Archive(archive);",
                "+\t\t} catch (final RarException e) {",
                "+\t\t\tlogger.error(e);",
                "+\t\t\tthrow e;",
                "+\t\t} catch (final IOException e1) {",
                "+\t\t\tlogger.error(e1);",
                "+\t\t\tthrow e1;",
                "+\t\t}",
                "+\t}",
                "+",
                " \tprivate static void validateDestinationPath(final File destinationFolder) {",
                "@@ -75,6 +106,9 @@ public class Junrar {",
                " \t}",
                "-\t",
                "-\tprivate static void extractArchive(File archive, File destination) throws RarException, IOException {",
                "-\t\tArchive arch = createArchiveOrThrowException(logger, archive);",
                "-\t\t",
                "+",
                "+\tprivate static void extractFileTo(final File file, final File destination) throws RarException, IOException {",
                "+\t\tfinal Archive archive = createArchiveOrThrowException(logger, file);",
                "+\t\textractArchiveTo(archive, destination);",
                "+\t}",
                "+",
                "+\tprivate static void extractArchiveTo(final Archive arch, final File destination) throws IOException, RarException {",
                " \t\tif (arch.isEncrypted()) {",
                "@@ -84,11 +118,11 @@ public class Junrar {",
                " \t\t}",
                "-\t\t",
                "+",
                " \t\ttry{",
                "-\t\t\tfor(FileHeader fh : arch ) {",
                "+\t\t\tfor(final FileHeader fh : arch ) {",
                " \t\t\t\ttry {",
                " \t\t\t\t\ttryToExtract(logger, destination, arch, fh);",
                "-\t\t\t\t} catch (IOException e) {",
                "+\t\t\t\t} catch (final IOException e) {",
                " \t\t\t\t\tlogger.error(\"error extracting the file\", e);",
                " \t\t\t\t\tthrow e;",
                "-\t\t\t\t} catch (RarException e) {",
                "+\t\t\t\t} catch (final RarException e) {",
                " \t\t\t\t\tlogger.error(\"error extraction the file\", e);",
                "@@ -101,5 +135,5 @@ public class Junrar {",
                " \t}",
                "-\t",
                "-\tprivate static void tryToExtract(Log logger,File destination, Archive arch, FileHeader fileHeader) throws IOException, RarException {",
                "-\t\tString fileNameString = fileHeader.getFileNameString();",
                "+",
                "+\tprivate static void tryToExtract(final Log logger,final File destination, final Archive arch, final FileHeader fileHeader) throws IOException, RarException {",
                "+\t\tfinal String fileNameString = fileHeader.getFileNameString();",
                " \t\tif (fileHeader.isEncrypted()) {",
                "@@ -116,5 +150,5 @@ public class Junrar {",
                "-\tprivate static void extract(Log logger, Archive arch, File destination, FileHeader fileHeader) throws FileNotFoundException, RarException, IOException {",
                "-\t\tFile f = createFile(logger, fileHeader, destination);",
                "-\t\tOutputStream stream = new FileOutputStream(f);",
                "+\tprivate static void extract(final Log logger, final Archive arch, final File destination, final FileHeader fileHeader) throws FileNotFoundException, RarException, IOException {",
                "+\t\tfinal File f = createFile(logger, fileHeader, destination);",
                "+\t\tfinal OutputStream stream = new FileOutputStream(f);",
                " \t\tarch.extractFile(fileHeader, stream);",
                "@@ -123,15 +157,3 @@ public class Junrar {",
                "-\tprivate static Archive createArchiveOrThrowException(Log logger, File archive) throws RarException, IOException {",
                "-\t\ttry {",
                "-\t\t\treturn new Archive(archive);",
                "-\t\t} catch (RarException e) {",
                "-\t\t\tlogger.error(e);",
                "-\t\t\tthrow e;",
                "-\t\t} catch (IOException e1) {",
                "-\t\t\tlogger.error(e1);",
                "-\t\t\tthrow e1;",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tprivate static File createFile(Log logger, FileHeader fh, File destination) {",
                "+\tprivate static File createFile(final Log logger, final FileHeader fh, final File destination) {",
                " \t\tFile f = null;",
                "@@ -147,3 +169,3 @@ public class Junrar {",
                " \t\t\t\tf = makeFile(destination, name);",
                "-\t\t\t} catch (IOException e) {",
                "+\t\t\t} catch (final IOException e) {",
                " \t\t\t\tlogger.error(\"error creating the new file: \" + f.getName(), e);",
                "@@ -154,4 +176,4 @@ public class Junrar {",
                "-\tprivate static File makeFile(File destination, String name) throws IOException {",
                "-\t\tString[] dirs = name.split(\"\\\\\\\\\");",
                "+\tprivate static File makeFile(final File destination, final String name) throws IOException {",
                "+\t\tfinal String[] dirs = name.split(\"\\\\\\\\\");",
                " \t\tif (dirs == null) {",
                "@@ -160,3 +182,3 @@ public class Junrar {",
                " \t\tString path = \"\";",
                "-\t\tint size = dirs.length;",
                "+\t\tfinal int size = dirs.length;",
                " \t\tif (size == 1) {",
                "@@ -169,3 +191,3 @@ public class Junrar {",
                " \t\t\tpath = path + File.separator + dirs[dirs.length - 1];",
                "-\t\t\tFile f = new File(destination, path);",
                "+\t\t\tfinal File f = new File(destination, path);",
                " \t\t\tf.createNewFile();",
                "@@ -177,3 +199,3 @@ public class Junrar {",
                "-\tprivate static void createDirectory(FileHeader fh, File destination) {",
                "+\tprivate static void createDirectory(final FileHeader fh, final File destination) {",
                " \t\tFile f = null;",
                "@@ -192,4 +214,4 @@ public class Junrar {",
                "-\tprivate static void makeDirectory(File destination, String fileName) {",
                "-\t\tString[] dirs = fileName.split(\"\\\\\\\\\");",
                "+\tprivate static void makeDirectory(final File destination, final String fileName) {",
                "+\t\tfinal String[] dirs = fileName.split(\"\\\\\\\\\");",
                " \t\tif (dirs == null) {",
                "@@ -198,3 +220,3 @@ public class Junrar {",
                " \t\tString path = \"\";",
                "-\t\tfor (String dir : dirs) {",
                "+\t\tfor (final String dir : dirs) {",
                " \t\t\tpath = path + File.separator + dir;",
                "@@ -204,3 +226,3 @@ public class Junrar {",
                " \t}",
                "-\t",
                "+",
                " }",
                "diff --git a/src/main/java/com/github/junrar/VolumeManager.java b/src/main/java/com/github/junrar/VolumeManager.java",
                "index 6507ec10..c104b28c 100644",
                "--- a/src/main/java/com/github/junrar/VolumeManager.java",
                "+++ b/src/main/java/com/github/junrar/VolumeManager.java",
                "@@ -6,7 +6,6 @@ import java.io.IOException;",
                "  * @author <a href=\"http://www.rogiel.com\">Rogiel</a>",
                "- * ",
                "+ *",
                "  */",
                " public interface VolumeManager {",
                "-\tpublic Volume nextArchive(Archive archive, Volume lastVolume)",
                "-\t\t\tthrows IOException;",
                "+\tpublic Volume nextArchive(Archive archive, Volume lastVolume) throws IOException;",
                " }",
                "diff --git a/src/main/java/com/github/junrar/impl/FileVolumeManager.java b/src/main/java/com/github/junrar/impl/FileVolumeManager.java",
                "index 874dc093..723d4113 100644",
                "--- a/src/main/java/com/github/junrar/impl/FileVolumeManager.java",
                "+++ b/src/main/java/com/github/junrar/impl/FileVolumeManager.java",
                "@@ -13,3 +13,3 @@ import com.github.junrar.util.VolumeHelper;",
                "  * @author <a href=\"http://www.rogiel.com\">Rogiel</a>",
                "- * ",
                "+ *",
                "  */",
                "@@ -18,3 +18,3 @@ public class FileVolumeManager implements VolumeManager {",
                "-\tpublic FileVolumeManager(File firstVolume) {",
                "+\tpublic FileVolumeManager(final File firstVolume) {",
                " \t\tthis.firstVolume = firstVolume;",
                "@@ -23,13 +23,11 @@ public class FileVolumeManager implements VolumeManager {",
                " \t@Override",
                "-\tpublic Volume nextArchive(Archive archive, Volume last)",
                "-\t\t\tthrows IOException {",
                "-\t\tif (last == null)",
                "-\t\t\treturn new FileVolume(archive, firstVolume);",
                "+\tpublic Volume nextArchive(final Archive archive, final Volume last) throws IOException {",
                "+\t\tif (last == null) return new FileVolume(archive, this.firstVolume);",
                "-\t\tFileVolume lastFileVolume = (FileVolume) last;",
                "-\t\tboolean oldNumbering = !archive.getMainHeader().isNewNumbering()",
                "+\t\tfinal FileVolume lastFileVolume = (FileVolume) last;",
                "+\t\tfinal boolean oldNumbering = !archive.getMainHeader().isNewNumbering()",
                " \t\t\t\t|| archive.isOldFormat();",
                "-\t\tString nextName = VolumeHelper.nextVolumeName(lastFileVolume.getFile()",
                "+\t\tfinal String nextName = VolumeHelper.nextVolumeName(lastFileVolume.getFile()",
                " \t\t\t\t.getAbsolutePath(), oldNumbering);",
                "-\t\tFile nextVolume = new File(nextName);",
                "+\t\tfinal File nextVolume = new File(nextName);",
                "diff --git a/src/main/java/com/github/junrar/impl/InputStreamVolume.java b/src/main/java/com/github/junrar/impl/InputStreamVolume.java",
                "new file mode 100644",
                "index 00000000..9a91835b",
                "--- /dev/null",
                "+++ b/src/main/java/com/github/junrar/impl/InputStreamVolume.java",
                "@@ -0,0 +1,36 @@",
                "+package com.github.junrar.impl;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import com.github.junrar.Archive;",
                "+import com.github.junrar.Volume;",
                "+import com.github.junrar.io.IReadOnlyAccess;",
                "+import com.github.junrar.io.InputStreamReadOnlyAccessFile;",
                "+",
                "+public class InputStreamVolume implements Volume {",
                "+",
                "+\tprivate final Archive archive;",
                "+\tprivate final InputStream inputStream;",
                "+",
                "+\tpublic InputStreamVolume(final Archive archive, final InputStream inputStream) {",
                "+\t\tthis.archive = archive;",
                "+\t\tthis.inputStream = inputStream;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic IReadOnlyAccess getReadOnlyAccess() throws IOException {",
                "+\t\treturn new InputStreamReadOnlyAccessFile(this.inputStream);",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic long getLength() {",
                "+\t\treturn Long.MAX_VALUE;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic Archive getArchive() {",
                "+\t\treturn this.archive;",
                "+\t}",
                "+",
                "+}",
                "diff --git a/src/main/java/com/github/junrar/impl/InputStreamVolumeManager.java b/src/main/java/com/github/junrar/impl/InputStreamVolumeManager.java",
                "new file mode 100644",
                "index 00000000..9a5bdb46",
                "--- /dev/null",
                "+++ b/src/main/java/com/github/junrar/impl/InputStreamVolumeManager.java",
                "@@ -0,0 +1,23 @@",
                "+package com.github.junrar.impl;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import com.github.junrar.Archive;",
                "+import com.github.junrar.Volume;",
                "+import com.github.junrar.VolumeManager;",
                "+",
                "+public class InputStreamVolumeManager implements VolumeManager {",
                "+",
                "+\tprivate final InputStream is;",
                "+",
                "+\tpublic InputStreamVolumeManager(final InputStream is) {",
                "+\t\tthis.is = is;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic Volume nextArchive(final Archive archive, final Volume lastVolume) throws IOException {",
                "+\t\treturn new InputStreamVolume(archive, this.is);",
                "+\t}",
                "+",
                "+}",
                "diff --git a/src/main/java/com/github/junrar/io/ReadOnlyAccessFile.java b/src/main/java/com/github/junrar/io/ReadOnlyAccessFile.java",
                "index 77ad35a1..fee94e03 100644",
                "--- a/src/main/java/com/github/junrar/io/ReadOnlyAccessFile.java",
                "+++ b/src/main/java/com/github/junrar/io/ReadOnlyAccessFile.java",
                "@@ -7,6 +7,6 @@",
                "  * Last changed: $LastChangedDate$",
                "- * ",
                "- * the unrar licence applies to all junrar source and binary distributions ",
                "+ *",
                "+ * the unrar licence applies to all junrar source and binary distributions",
                "  * you are not allowed to use this source to re-create the RAR compression algorithm",
                "- * ",
                "+ *",
                "  * Here some html entities which can be used for escaping javadoc tags:",
                "@@ -15,3 +15,3 @@",
                "  * \">\":  \"&#062;\" or \"&gt;\"",
                "- * \"@\":  \"&#064;\" ",
                "+ * \"@\":  \"&#064;\"",
                "  */",
                "@@ -30,4 +30,3 @@ import java.io.RandomAccessFile;",
                "  */",
                "-public class ReadOnlyAccessFile extends RandomAccessFile",
                "-        implements IReadOnlyAccess{",
                "+public class ReadOnlyAccessFile extends RandomAccessFile implements IReadOnlyAccess{",
                "@@ -37,3 +36,3 @@ public class ReadOnlyAccessFile extends RandomAccessFile",
                " \t */",
                "-\tpublic ReadOnlyAccessFile(File file) throws FileNotFoundException {",
                "+\tpublic ReadOnlyAccessFile(final File file) throws FileNotFoundException {",
                " \t\tsuper(file, \"r\");",
                "@@ -41,4 +40,5 @@ public class ReadOnlyAccessFile extends RandomAccessFile",
                "-\tpublic int readFully(byte[] buffer, int count) throws IOException {",
                "-        assert (count > 0) : count;",
                "+\t@Override",
                "+\tpublic int readFully(final byte[] buffer, final int count) throws IOException {",
                "+        assert count > 0 : count;",
                "         this.readFully(buffer, 0, count);",
                "@@ -47,2 +47,3 @@ public class ReadOnlyAccessFile extends RandomAccessFile",
                "+\t@Override",
                " \tpublic long getPosition() throws IOException {",
                "@@ -51,3 +52,4 @@ public class ReadOnlyAccessFile extends RandomAccessFile",
                "-\tpublic void setPosition(long pos) throws IOException {",
                "+\t@Override",
                "+\tpublic void setPosition(final long pos) throws IOException {",
                "         this.seek(pos);",
                "diff --git a/src/main/java/com/github/junrar/unpack/ComprDataIO.java b/src/main/java/com/github/junrar/unpack/ComprDataIO.java",
                "index fc332488..4f6cb423 100644",
                "--- a/src/main/java/com/github/junrar/unpack/ComprDataIO.java",
                "+++ b/src/main/java/com/github/junrar/unpack/ComprDataIO.java",
                "@@ -104,4 +104,7 @@ public class ComprDataIO {",
                " \t\tunpPackedSize = hd.getFullPackSize();",
                "-\t\tinputStream = new ReadOnlyAccessInputStream(archive.getRof(), startPos,",
                "-\t\t\t\tstartPos + unpPackedSize);",
                "+\t\tinputStream = new ReadOnlyAccessInputStream(",
                "+\t\t\tarchive.getRof(), ",
                "+\t\t\tstartPos,",
                "+\t\t\tstartPos + unpPackedSize",
                "+\t\t);",
                " \t\tsubHead = hd;",
                "@@ -134,4 +137,3 @@ public class ComprDataIO {",
                " \t\t\tif (unpPackedSize == 0 && subHead.isSplitAfter()) {",
                "-\t\t\t\tVolume nextVolume = archive.getVolumeManager().nextArchive(",
                "-\t\t\t\t\t\tarchive, archive.getVolume());",
                "+\t\t\t\tVolume nextVolume = archive.getVolumeManager().nextArchive(archive, archive.getVolume());",
                " \t\t\t\tif (nextVolume == null) {",
                "diff --git a/src/main/java/com/github/junrar/vfs2/provider/rar/RARFileProvider.java b/src/main/java/com/github/junrar/vfs2/provider/rar/RARFileProvider.java",
                "index 43b6040a..ac744ef8 100644",
                "--- a/src/main/java/com/github/junrar/vfs2/provider/rar/RARFileProvider.java",
                "+++ b/src/main/java/com/github/junrar/vfs2/provider/rar/RARFileProvider.java",
                "@@ -36,18 +36,17 @@ import org.apache.commons.vfs2.provider.LayeredFileName;",
                "  * A file system provider for RAR files. Provides read-only file systems.",
                "- * ",
                "+ *",
                "  * @author <a href=\"http://www.rogiel.com\">Rogiel</a>",
                "  */",
                "-public class RARFileProvider extends AbstractLayeredFileProvider implements",
                "-\t\tFileProvider {",
                "+public class RARFileProvider extends AbstractLayeredFileProvider implements FileProvider {",
                " \t/** The list of capabilities this provider supports */",
                " \tprotected static final Collection<Capability> capabilities = Collections",
                "-\t\t\t.unmodifiableCollection(Arrays.asList(new Capability[] {",
                "-\t\t\t\t\tCapability.GET_LAST_MODIFIED,",
                "-\t\t\t\t\tCapability.GET_TYPE,",
                "-\t\t\t\t\tCapability.LIST_CHILDREN,",
                "-\t\t\t\t\tCapability.READ_CONTENT,",
                "-\t\t\t\t\tCapability.URI,",
                "-\t\t\t\t\tCapability.COMPRESS,",
                "-\t\t\t\t\tCapability.VIRTUAL",
                "-\t\t\t\t}));",
                "+\t\t.unmodifiableCollection(Arrays.asList(new Capability[] {",
                "+\t\t\tCapability.GET_LAST_MODIFIED,",
                "+\t\t\tCapability.GET_TYPE,",
                "+\t\t\tCapability.LIST_CHILDREN,",
                "+\t\t\tCapability.READ_CONTENT,",
                "+\t\t\tCapability.URI,",
                "+\t\t\tCapability.COMPRESS,",
                "+\t\t\tCapability.VIRTUAL",
                "+\t\t}));",
                "@@ -60,3 +59,3 @@ public class RARFileProvider extends AbstractLayeredFileProvider implements",
                " \t * is not cached.",
                "-\t * ",
                "+\t *",
                " \t * @param scheme",
                "@@ -68,10 +67,23 @@ public class RARFileProvider extends AbstractLayeredFileProvider implements",
                " \t@Override",
                "-\tprotected FileSystem doCreateFileSystem(final String scheme,",
                "-\t\t\tfinal FileObject file, final FileSystemOptions fileSystemOptions)",
                "-\t\t\tthrows FileSystemException {",
                "-\t\tfinal AbstractFileName rootName = new LayeredFileName(scheme,",
                "-\t\t\t\tfile.getName(), FileName.ROOT_PATH, FileType.FOLDER);",
                "-\t\treturn new RARFileSystem(rootName, file, fileSystemOptions);",
                "+\tprotected FileSystem doCreateFileSystem(",
                "+\t\tfinal String scheme,",
                "+\t\tfinal FileObject file,",
                "+\t\tfinal FileSystemOptions fileSystemOptions",
                "+\t) throws FileSystemException {",
                "+",
                "+\t\tfinal AbstractFileName rootName = new LayeredFileName(",
                "+\t\t\tscheme,",
                "+\t\t\tfile.getName(),",
                "+\t\t\tFileName.ROOT_PATH,",
                "+\t\t\tFileType.FOLDER",
                "+\t\t);",
                "+",
                "+\t\treturn new RARFileSystem(",
                "+\t\t\trootName,",
                "+\t\t\tfile,",
                "+\t\t\tfileSystemOptions",
                "+\t\t);",
                " \t}",
                "+\t@Override",
                " \tpublic Collection<Capability> getCapabilities() {",
                "diff --git a/src/main/java/com/github/junrar/vfs2/provider/rar/RARFileSystem.java b/src/main/java/com/github/junrar/vfs2/provider/rar/RARFileSystem.java",
                "index 8e789a4a..bf9be95b 100644",
                "--- a/src/main/java/com/github/junrar/vfs2/provider/rar/RARFileSystem.java",
                "+++ b/src/main/java/com/github/junrar/vfs2/provider/rar/RARFileSystem.java",
                "@@ -41,3 +41,3 @@ import com.github.junrar.rarfile.FileHeader;",
                "  * A read-only file system for RAR files.",
                "- * ",
                "+ *",
                "  * @author <a href=\"http://www.rogiel.com\">Rogiel</a>",
                "@@ -48,8 +48,9 @@ public class RARFileSystem extends AbstractFileSystem implements FileSystem {",
                " \tprivate Archive archive;",
                "-\tprivate Map<String, FileHeader> files = new HashMap<String, FileHeader>();",
                "+\tprivate final Map<String, FileHeader> files = new HashMap<String, FileHeader>();",
                "-\tpublic RARFileSystem(final AbstractFileName rootName,",
                "-\t\t\tfinal FileObject parentLayer,",
                "-\t\t\tfinal FileSystemOptions fileSystemOptions)",
                "-\t\t\tthrows FileSystemException {",
                "+\tpublic RARFileSystem(",
                "+\t\tfinal AbstractFileName rootName,",
                "+\t\tfinal FileObject parentLayer,",
                "+\t\tfinal FileSystemOptions fileSystemOptions",
                "+\t) throws FileSystemException {",
                " \t\tsuper(rootName, parentLayer, fileSystemOptions);",
                "@@ -64,8 +65,8 @@ public class RARFileSystem extends AbstractFileSystem implements FileSystem {",
                " \t\t\ttry {",
                "-\t\t\t\tarchive = new Archive(new VFSVolumeManager(parentLayer));",
                "+\t\t\t\tthis.archive = new Archive(new VFSVolumeManager(this.parentLayer));",
                " \t\t\t\t// Build the index",
                "-\t\t\t\tList<RARFileObject> strongRef = new ArrayList<RARFileObject>(",
                "+\t\t\t\tfinal List<RARFileObject> strongRef = new ArrayList<RARFileObject>(",
                " \t\t\t\t\t\t100);",
                "-\t\t\t\tfor (final FileHeader header : archive.getFileHeaders()) {",
                "-\t\t\t\t\tAbstractFileName name = (AbstractFileName) getFileSystemManager()",
                "+\t\t\t\tfor (final FileHeader header : this.archive.getFileHeaders()) {",
                "+\t\t\t\t\tfinal AbstractFileName name = (AbstractFileName) getFileSystemManager()",
                " \t\t\t\t\t\t\t.resolveName(",
                "@@ -106,5 +107,5 @@ public class RARFileSystem extends AbstractFileSystem implements FileSystem {",
                "-\t\t\t} catch (RarException e) {",
                "+\t\t\t} catch (final RarException e) {",
                " \t\t\t\tthrow new FileSystemException(e);",
                "-\t\t\t} catch (IOException e) {",
                "+\t\t\t} catch (final IOException e) {",
                " \t\t\t\tthrow new FileSystemException(e);",
                "@@ -118,3 +119,3 @@ public class RARFileSystem extends AbstractFileSystem implements FileSystem {",
                " \t\t\tfinal FileHeader header) throws FileSystemException {",
                "-\t\treturn new RARFileObject(name, archive, header, this);",
                "+\t\treturn new RARFileObject(name, this.archive, header, this);",
                " \t}",
                "@@ -124,6 +125,6 @@ public class RARFileSystem extends AbstractFileSystem implements FileSystem {",
                " \t\ttry {",
                "-\t\t\tarchive.close();",
                "-\t\t} catch (FileSystemException e) {",
                "+\t\t\tthis.archive.close();",
                "+\t\t} catch (final FileSystemException e) {",
                " \t\t\tthrow new RuntimeException(e);",
                "-\t\t} catch (IOException e) {",
                "+\t\t} catch (final IOException e) {",
                " \t\t\tthrow new RuntimeException(e);",
                "@@ -146,7 +147,7 @@ public class RARFileSystem extends AbstractFileSystem implements FileSystem {",
                " \t\t\tthrows FileSystemException {",
                "-\t\tString path = name.getPath().substring(1);",
                "+\t\tfinal String path = name.getPath().substring(1);",
                " \t\tif (path.length() == 0) {",
                "-\t\t\treturn new RARFileObject(name, archive, null, this);",
                "-\t\t} else if (files.containsKey(name.getPath())) {",
                "-\t\t\treturn new RARFileObject(name, archive, files.get(name.getPath()),",
                "+\t\t\treturn new RARFileObject(name, this.archive, null, this);",
                "+\t\t} else if (this.files.containsKey(name.getPath())) {",
                "+\t\t\treturn new RARFileObject(name, this.archive, this.files.get(name.getPath()),",
                " \t\t\t\t\tthis);",
                "@@ -159,2 +160,3 @@ public class RARFileSystem extends AbstractFileSystem implements FileSystem {",
                " \t */",
                "+\t@Override",
                " \tprotected void notifyAllStreamsClosed() {",
                "diff --git a/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java b/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java",
                "index 8e4cc2d7..22f5fb6f 100644",
                "--- a/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java",
                "+++ b/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java",
                "@@ -26,3 +26,3 @@ public class VFSVolume implements Volume {",
                " \t */",
                "-\tpublic VFSVolume(Archive archive, FileObject file) {",
                "+\tpublic VFSVolume(final Archive archive, final FileObject file) {",
                " \t\tthis.archive = archive;",
                "@@ -35,8 +35,6 @@ public class VFSVolume implements Volume {",
                " \t\ttry {",
                "-\t\t\tRandomAccessContent rac = file.getContent().getRandomAccessContent(",
                "-\t\t\t\t\tRandomAccessMode.READ);",
                "+\t\t\tfinal RandomAccessContent rac = this.file.getContent().getRandomAccessContent(RandomAccessMode.READ);",
                " \t\t\tinput = new RandomAccessContentAccess(rac);",
                "-\t\t} catch (Exception e) {",
                "-\t\t\tinput = new InputStreamReadOnlyAccessFile(file.getContent()",
                "-\t\t\t\t\t.getInputStream());",
                "+\t\t} catch (final Exception e) {",
                "+\t\t\tinput = new InputStreamReadOnlyAccessFile(this.file.getContent().getInputStream());",
                " \t\t}",
                "@@ -48,4 +46,4 @@ public class VFSVolume implements Volume {",
                " \t\ttry {",
                "-\t\t\treturn file.getContent().getSize();",
                "-\t\t} catch (FileSystemException e) {",
                "+\t\t\treturn this.file.getContent().getSize();",
                "+\t\t} catch (final FileSystemException e) {",
                " \t\t\treturn -1;",
                "@@ -56,3 +54,3 @@ public class VFSVolume implements Volume {",
                " \tpublic Archive getArchive() {",
                "-\t\treturn archive;",
                "+\t\treturn this.archive;",
                " \t}",
                "@@ -63,3 +61,3 @@ public class VFSVolume implements Volume {",
                " \tpublic FileObject getFile() {",
                "-\t\treturn file;",
                "+\t\treturn this.file;",
                " \t}",
                "diff --git a/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java b/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java",
                "index 9342c624..2afbf83a 100644",
                "--- a/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java",
                "+++ b/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java",
                "@@ -16,2 +16,3 @@ import com.github.junrar.util.VolumeHelper;",
                " public class VFSVolumeManager implements VolumeManager {",
                "+",
                " \tprivate final FileObject firstVolume;",
                "@@ -21,3 +22,3 @@ public class VFSVolumeManager implements VolumeManager {",
                " \t */",
                "-\tpublic VFSVolumeManager(FileObject firstVolume) {",
                "+\tpublic VFSVolumeManager(final FileObject firstVolume) {",
                " \t\tthis.firstVolume = firstVolume;",
                "@@ -26,12 +27,11 @@ public class VFSVolumeManager implements VolumeManager {",
                " \t@Override",
                "-\tpublic Volume nextArchive(Archive archive, Volume last) throws IOException {",
                "-\t\tif (last == null)",
                "-\t\t\treturn new VFSVolume(archive, firstVolume);",
                "+\tpublic Volume nextArchive(final Archive archive, final Volume last) throws IOException {",
                "+\t\tif (last == null) return new VFSVolume(archive, this.firstVolume);",
                "-\t\tVFSVolume vfsVolume = (VFSVolume) last;",
                "-\t\tboolean oldNumbering = !archive.getMainHeader().isNewNumbering()",
                "+\t\tfinal VFSVolume vfsVolume = (VFSVolume) last;",
                "+\t\tfinal boolean oldNumbering = !archive.getMainHeader().isNewNumbering()",
                " \t\t\t\t|| archive.isOldFormat();",
                "-\t\tString nextName = VolumeHelper.nextVolumeName(vfsVolume.getFile()",
                "+\t\tfinal String nextName = VolumeHelper.nextVolumeName(vfsVolume.getFile()",
                " \t\t\t\t.getName().getBaseName(), oldNumbering);",
                "-\t\tFileObject nextVolumeFile = firstVolume.getParent().resolveFile(",
                "+\t\tfinal FileObject nextVolumeFile = this.firstVolume.getParent().resolveFile(",
                " \t\t\t\tnextName);"
            ],
            "changed_files": [
                "src/main/java/com/github/junrar/Archive.java",
                "src/main/java/com/github/junrar/Junrar.java",
                "src/main/java/com/github/junrar/VolumeManager.java",
                "src/main/java/com/github/junrar/impl/FileVolumeManager.java",
                "src/main/java/com/github/junrar/impl/InputStreamVolume.java",
                "src/main/java/com/github/junrar/impl/InputStreamVolumeManager.java",
                "src/main/java/com/github/junrar/io/ReadOnlyAccessFile.java",
                "src/main/java/com/github/junrar/unpack/ComprDataIO.java",
                "src/main/java/com/github/junrar/vfs2/provider/rar/RARFileProvider.java",
                "src/main/java/com/github/junrar/vfs2/provider/rar/RARFileSystem.java",
                "src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java",
                "src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "12": "Is it possible to extract archive from InputStream, for example? #11"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "junrar-2.0.0",
                "junrar-3.0.0",
                "junrar-3.1.0",
                "junrar-3.1.1",
                "junrar-4.0.0",
                "v4.0.0",
                "v5.0.0",
                "v6.0.0",
                "v6.0.1",
                "v7.0.0",
                "v7.1.0",
                "v7.2.0",
                "v7.3.0",
                "v7.4.0",
                "v7.4.1",
                "v7.5.0",
                "v7.5.1",
                "v7.5.2",
                "v7.5.3",
                "v7.5.4",
                "v7.5.5"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: Archive, RAR",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/github/junrar/Archive.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 12",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "75cb6a58c9b3ca08db954eec241b91a5331dd632",
            "repository": "https://github.com/junrar/junrar",
            "timestamp": 1527975985,
            "hunks": 21,
            "message": "Static method to get contents description",
            "diff": [
                "diff --git a/src/main/java/com/github/junrar/Archive.java b/src/main/java/com/github/junrar/Archive.java",
                "index ec09f887..e59f146f 100644",
                "--- a/src/main/java/com/github/junrar/Archive.java",
                "+++ b/src/main/java/com/github/junrar/Archive.java",
                "@@ -29,2 +29,3 @@ import java.util.ArrayList;",
                " import java.util.HashSet;",
                "+import java.util.Iterator;",
                " import java.util.List;",
                "@@ -63,3 +64,4 @@ import com.github.junrar.unpack.Unpack;",
                "  */",
                "-public class Archive implements Closeable {",
                "+public class Archive implements Closeable, Iterable<FileHeader> {",
                "+\t",
                " \tprivate static Logger logger = Logger.getLogger(Archive.class.getName());",
                "@@ -93,2 +95,4 @@ public class Archive implements Closeable {",
                "+\tprivate FileHeader nextFileHeader;",
                "+\t",
                " \tpublic Archive(VolumeManager volumeManager) throws RarException,",
                "@@ -618,2 +622,26 @@ public class Archive implements Closeable {",
                " \t}",
                "+",
                "+\t@Override",
                "+\tpublic Iterator<FileHeader> iterator() {",
                "+\t\treturn new Iterator<FileHeader>() {",
                "+\t\t\t",
                "+\t\t\t@Override",
                "+\t\t\tpublic FileHeader next() {",
                "+\t\t\t\tFileHeader next;",
                "+\t\t\t\tif(nextFileHeader != null) {",
                "+\t\t\t\t\tnext =  nextFileHeader;",
                "+\t\t\t\t}else {",
                "+\t\t\t\t\tnext = nextFileHeader();",
                "+\t\t\t\t}",
                "+\t\t\t\treturn next;",
                "+\t\t\t}",
                "+\t\t\t",
                "+\t\t\t@Override",
                "+\t\t\tpublic boolean hasNext() {",
                "+\t\t\t\tnextFileHeader = nextFileHeader();",
                "+\t\t\t\treturn nextFileHeader != null;",
                "+\t\t\t}",
                "+\t\t};",
                "+\t}",
                "+",
                " }",
                "diff --git a/src/main/java/com/github/junrar/ContentDescription.java b/src/main/java/com/github/junrar/ContentDescription.java",
                "new file mode 100644",
                "index 00000000..7f143458",
                "--- /dev/null",
                "+++ b/src/main/java/com/github/junrar/ContentDescription.java",
                "@@ -0,0 +1,46 @@",
                "+package com.github.junrar;",
                "+",
                "+public class ContentDescription {",
                "+\tpublic String path;",
                "+\tpublic long size;",
                "+\t",
                "+\tpublic ContentDescription(String path, long size) {",
                "+\t\tthis.path = path;",
                "+\t\tthis.size = size;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic int hashCode() {",
                "+\t\tfinal int prime = 31;",
                "+\t\tint result = 1;",
                "+\t\tresult = prime * result + ((path == null) ? 0 : path.hashCode());",
                "+\t\tresult = prime * result + (int) (size ^ (size >>> 32));",
                "+\t\treturn result;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic boolean equals(Object obj) {",
                "+\t\tif (this == obj)",
                "+\t\t\treturn true;",
                "+\t\tif (obj == null)",
                "+\t\t\treturn false;",
                "+\t\tif (getClass() != obj.getClass())",
                "+\t\t\treturn false;",
                "+\t\tContentDescription other = (ContentDescription) obj;",
                "+\t\tif (path == null) {",
                "+\t\t\tif (other.path != null)",
                "+\t\t\t\treturn false;",
                "+\t\t} else if (!path.equals(other.path))",
                "+\t\t\treturn false;",
                "+\t\tif (size != other.size)",
                "+\t\t\treturn false;",
                "+\t\treturn true;",
                "+\t}",
                "+\t",
                "+\t@Override",
                "+\tpublic String toString() {",
                "+\t\treturn path + \": \"+size;",
                "+\t}",
                "+\t",
                "+\t",
                "+}",
                "diff --git a/src/main/java/com/github/junrar/Junrar.java b/src/main/java/com/github/junrar/Junrar.java",
                "index 741c48f9..f37c6488 100644",
                "--- a/src/main/java/com/github/junrar/Junrar.java",
                "+++ b/src/main/java/com/github/junrar/Junrar.java",
                "@@ -3,6 +3,14 @@ package com.github.junrar;",
                " import java.io.File;",
                "+import java.io.FileNotFoundException;",
                "+import java.io.FileOutputStream;",
                " import java.io.IOException;",
                "+import java.io.OutputStream;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.commons.logging.Log;",
                "+import org.apache.commons.logging.LogFactory;",
                " import com.github.junrar.exception.RarException;",
                "-import com.github.junrar.extract.ExtractArchive;",
                "+import com.github.junrar.rarfile.FileHeader;",
                "@@ -10,3 +18,55 @@ public class Junrar {",
                "+\tprivate static Log logger = LogFactory.getLog(Junrar.class.getName());",
                "+\t",
                "+\tpublic static void extract(final String rarPath, final String destinationPath) throws IOException, RarException {",
                "+\t\tif (rarPath == null || destinationPath == null) {",
                "+\t\t\tthrow new RuntimeException(\"archive and destination must me set\");",
                "+\t\t}",
                "+\t\tFile arch = new File(rarPath);",
                "+\t\tFile dest = new File(destinationPath);",
                "+\t\textract(arch, dest);",
                "+\t}",
                "+\t",
                " \tpublic static void extract(final File rar, final File destinationFolder) throws RarException, IOException {",
                "+\t\tvalidateRarPath(rar);",
                "+\t\tvalidateDestinationPath(destinationFolder);",
                "+\t\textractArchive(rar, destinationFolder);  ",
                "+\t}",
                "+",
                "+\tpublic static List<ContentDescription> getContentsDescription(final File rar) throws RarException, IOException {",
                "+\t\tvalidateRarPath(rar);",
                "+\t\t",
                "+\t\tList<ContentDescription> contents = new ArrayList<ContentDescription>();",
                "+\t\t",
                "+\t\tArchive arch = createArchiveOrThrowException(logger, rar);\t\t",
                "+\t\ttry{",
                "+\t\t\tif (arch.isEncrypted()) {",
                "+\t\t\t\tlogger.warn(\"archive is encrypted cannot extract\");",
                "+\t\t\t\treturn new ArrayList<ContentDescription>();",
                "+\t\t\t}",
                "+\t\t\tfor(FileHeader fileHeader : arch ) {",
                "+\t\t\t\tcontents.add(new ContentDescription(fileHeader.getFileNameString(), fileHeader.getUnpSize()));",
                "+\t\t\t}",
                "+\t\t}finally {",
                "+\t\t\tarch.close();",
                "+\t\t}",
                "+\t\treturn contents;",
                "+\t}",
                "+",
                "+\tprivate static void validateDestinationPath(final File destinationFolder) {",
                "+\t\tif (destinationFolder == null) {",
                "+\t\t\tthrow new RuntimeException(\"archive and destination must me set\");",
                "+\t\t}",
                "+\t\tif (!destinationFolder.exists() || !destinationFolder.isDirectory()) {",
                "+\t\t\tthrow new IllegalArgumentException(\"the destination must exist and point to a directory: \" + destinationFolder);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate static void validateRarPath(final File rar) {",
                "+\t\tif (rar == null) {",
                "+\t\t\tthrow new RuntimeException(\"archive and destination must me set\");",
                "+\t\t}",
                "+\t\tif (!rar.exists()) {",
                "+\t\t\tthrow new IllegalArgumentException(\"the archive does not exit: \" + rar);",
                "+\t\t}",
                " \t\tif(!rar.isFile()) {",
                "@@ -14,9 +74,133 @@ public class Junrar {",
                " \t\t}",
                "-\t\tif(!destinationFolder.isDirectory()) {",
                "-\t\t\tthrow new IllegalArgumentException(\"Second argument should be a directory but was \"+destinationFolder.getAbsolutePath());",
                "+\t}",
                "+\t",
                "+\tprivate static void extractArchive(File archive, File destination) throws RarException, IOException {",
                "+\t\tArchive arch = createArchiveOrThrowException(logger, archive);",
                "+\t\t",
                "+\t\tif (arch.isEncrypted()) {",
                "+\t\t\tlogger.warn(\"archive is encrypted cannot extract\");",
                "+\t\t\tarch.close();",
                "+\t\t\treturn;",
                "+\t\t}",
                "+\t\t",
                "+\t\ttry{",
                "+\t\t\tfor(FileHeader fh : arch ) {",
                "+\t\t\t\ttry {",
                "+\t\t\t\t\ttryToExtract(logger, destination, arch, fh);",
                "+\t\t\t\t} catch (IOException e) {",
                "+\t\t\t\t\tlogger.error(\"error extracting the file\", e);",
                "+\t\t\t\t\tthrow e;",
                "+\t\t\t\t} catch (RarException e) {",
                "+\t\t\t\t\tlogger.error(\"error extraction the file\", e);",
                "+\t\t\t\t\tthrow e;",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}finally {",
                "+\t\t\tarch.close();",
                "+\t\t}",
                "+\t}",
                "+\t",
                "+\tprivate static void tryToExtract(Log logger,File destination, Archive arch, FileHeader fileHeader) throws IOException, RarException {",
                "+\t\tString fileNameString = fileHeader.getFileNameString();",
                "+\t\tif (fileHeader.isEncrypted()) {",
                "+\t\t\tlogger.warn(\"file is encrypted cannot extract: \"+ fileNameString);",
                "+\t\t\treturn;",
                "+\t\t}",
                "+\t\tlogger.info(\"extracting: \" + fileNameString);",
                "+\t\tif (fileHeader.isDirectory()) {",
                "+\t\t\tcreateDirectory(fileHeader, destination);",
                "+\t\t} else {",
                "+\t\t\textract(logger, arch, destination, fileHeader);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate static void extract(Log logger, Archive arch, File destination, FileHeader fileHeader) throws FileNotFoundException, RarException, IOException {",
                "+\t\tFile f = createFile(logger, fileHeader, destination);",
                "+\t\tOutputStream stream = new FileOutputStream(f);",
                "+\t\tarch.extractFile(fileHeader, stream);",
                "+\t\tstream.close();",
                "+\t}",
                "+",
                "+\tprivate static Archive createArchiveOrThrowException(Log logger, File archive) throws RarException, IOException {",
                "+\t\ttry {",
                "+\t\t\treturn new Archive(archive);",
                "+\t\t} catch (RarException e) {",
                "+\t\t\tlogger.error(e);",
                "+\t\t\tthrow e;",
                "+\t\t} catch (IOException e1) {",
                "+\t\t\tlogger.error(e1);",
                "+\t\t\tthrow e1;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate static File createFile(Log logger, FileHeader fh, File destination) {",
                "+\t\tFile f = null;",
                "+\t\tString name = null;",
                "+\t\tif (fh.isFileHeader() && fh.isUnicode()) {",
                "+\t\t\tname = fh.getFileNameW();",
                "+\t\t} else {",
                "+\t\t\tname = fh.getFileNameString();",
                "+\t\t}",
                "+\t\tf = new File(destination, name);",
                "+\t\tif (!f.exists()) {",
                "+\t\t\ttry {",
                "+\t\t\t\tf = makeFile(destination, name);",
                "+\t\t\t} catch (IOException e) {",
                "+\t\t\t\tlogger.error(\"error creating the new file: \" + f.getName(), e);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\treturn f;",
                "+\t}",
                "+",
                "+\tprivate static File makeFile(File destination, String name) throws IOException {",
                "+\t\tString[] dirs = name.split(\"\\\\\\\\\");",
                "+\t\tif (dirs == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t\tString path = \"\";",
                "+\t\tint size = dirs.length;",
                "+\t\tif (size == 1) {",
                "+\t\t\treturn new File(destination, name);",
                "+\t\t} else if (size > 1) {",
                "+\t\t\tfor (int i = 0; i < dirs.length - 1; i++) {",
                "+\t\t\t\tpath = path + File.separator + dirs[i];",
                "+\t\t\t\tnew File(destination, path).mkdir();",
                "+\t\t\t}",
                "+\t\t\tpath = path + File.separator + dirs[dirs.length - 1];",
                "+\t\t\tFile f = new File(destination, path);",
                "+\t\t\tf.createNewFile();",
                "+\t\t\treturn f;",
                "+\t\t} else {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tprivate static void createDirectory(FileHeader fh, File destination) {",
                "+\t\tFile f = null;",
                "+\t\tif (fh.isDirectory() && fh.isUnicode()) {",
                "+\t\t\tf = new File(destination, fh.getFileNameW());",
                "+\t\t\tif (!f.exists()) {",
                "+\t\t\t\tmakeDirectory(destination, fh.getFileNameW());",
                "+\t\t\t}",
                "+\t\t} else if (fh.isDirectory() && !fh.isUnicode()) {",
                "+\t\t\tf = new File(destination, fh.getFileNameString());",
                "+\t\t\tif (!f.exists()) {",
                "+\t\t\t\tmakeDirectory(destination, fh.getFileNameString());",
                "+\t\t\t}",
                " \t\t}",
                "-\t\tExtractArchive extractArchive = new ExtractArchive();  ",
                "-\t\textractArchive.extractArchive(rar, destinationFolder);  ",
                "-\t}\t",
                "+\t}",
                "+\tprivate static void makeDirectory(File destination, String fileName) {",
                "+\t\tString[] dirs = fileName.split(\"\\\\\\\\\");",
                "+\t\tif (dirs == null) {",
                "+\t\t\treturn;",
                "+\t\t}",
                "+\t\tString path = \"\";",
                "+\t\tfor (String dir : dirs) {",
                "+\t\t\tpath = path + File.separator + dir;",
                "+\t\t\tnew File(destination, path).mkdir();",
                "+\t\t}",
                "+",
                "+\t}",
                "+\t",
                " }",
                "diff --git a/src/main/java/com/github/junrar/extract/ExtractArchive.java b/src/main/java/com/github/junrar/extract/ExtractArchive.java",
                "index eccaed57..6ff16de2 100644",
                "--- a/src/main/java/com/github/junrar/extract/ExtractArchive.java",
                "+++ b/src/main/java/com/github/junrar/extract/ExtractArchive.java",
                "@@ -3,11 +3,6 @@ package com.github.junrar.extract;",
                " import java.io.File;",
                "-import java.io.FileOutputStream;",
                " import java.io.IOException;",
                "-import java.io.OutputStream;",
                "-import org.apache.commons.logging.Log;",
                "-",
                "-import com.github.junrar.Archive;",
                "+import com.github.junrar.Junrar;",
                " import com.github.junrar.exception.RarException;",
                "-import com.github.junrar.rarfile.FileHeader;",
                "@@ -20,150 +15,8 @@ import com.github.junrar.rarfile.FileHeader;",
                " public class ExtractArchive {",
                "-",
                "-\tprivate Log logger;",
                "-",
                "-\tpublic void setLogger(Log logger) {",
                "-\t\tthis.logger = logger;",
                "-\t}",
                "-\tpublic void extractArchive(File archive, File destination) throws RarException, IOException {",
                "-\t\tArchive arch = null;",
                "-\t\ttry {",
                "-\t\t\tarch = new Archive(archive);",
                "-\t\t} catch (RarException e) {",
                "-\t\t\tlogError(e);",
                "-\t\t\tthrow e;",
                "-\t\t} catch (IOException e1) {",
                "-\t\t\tlogError(e1);",
                "-\t\t\tthrow e1;",
                "-\t\t}",
                "-\t\tif (arch != null) {",
                "-\t\t\tif (arch.isEncrypted()) {",
                "-\t\t\t\tlogWarn(\"archive is encrypted cannot extract\");",
                "-\t\t\t\treturn;",
                "-\t\t\t}",
                "-\t\t\ttry{",
                "-\t\t\t\tFileHeader fh = null;",
                "-\t\t\t\twhile (true) {",
                "-\t\t\t\t\tfh = arch.nextFileHeader();",
                "-\t\t\t\t\tif (fh == null) {",
                "-\t\t\t\t\t\tbreak;",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\tString fileNameString = fh.getFileNameString();",
                "-\t\t\t\t\tif (fh.isEncrypted()) {",
                "-\t\t\t\t\t\tlogWarn(\"file is encrypted cannot extract: \"+ fileNameString);",
                "-\t\t\t\t\t\tcontinue;",
                "-\t\t\t\t\t}",
                "-\t\t\t\t\tlogInfo(\"extracting: \" + fileNameString);",
                "-\t\t\t\t\ttry {",
                "-\t\t\t\t\t\tif (fh.isDirectory()) {",
                "-\t\t\t\t\t\t\tcreateDirectory(fh, destination);",
                "-\t\t\t\t\t\t} else {",
                "-\t\t\t\t\t\t\tFile f = createFile(fh, destination);",
                "-\t\t\t\t\t\t\tOutputStream stream = new FileOutputStream(f);",
                "-\t\t\t\t\t\t\tarch.extractFile(fh, stream);",
                "-\t\t\t\t\t\t\tstream.close();",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t} catch (IOException e) {",
                "-\t\t\t\t\t\tlogError(e, \"error extracting the file\");",
                "-\t\t\t\t\t\tthrow e;",
                "-\t\t\t\t\t} catch (RarException e) {",
                "-\t\t\t\t\t\tlogError(e,\"error extraction the file\");",
                "-\t\t\t\t\t\tthrow e;",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t}finally {",
                "-\t\t\t\ttry {",
                "-\t\t\t\t\tarch.close();",
                "-\t\t\t\t} catch (IOException e) {",
                "-\t\t\t\t\tlogError(e);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tprivate void logWarn(String warning) {",
                "-\t\tif(logger!=null) logger.warn(warning);",
                "-\t}",
                "-",
                "-\tprivate void logInfo(String info) {",
                "-\t\tif(logger!=null) logger.info(info);",
                "-\t}",
                "-",
                "-\tprivate void logError(Exception e, String errorMessage) {",
                "-\t\tif(logger!=null) logger.error(errorMessage, e);",
                "-\t}",
                "-",
                "-\tprivate void logError(Exception e) {",
                "-\t\tif(logger!=null) logger.error(e);",
                "-\t}",
                "-",
                "-\tprivate File createFile(FileHeader fh, File destination) {",
                "-\t\tFile f = null;",
                "-\t\tString name = null;",
                "-\t\tif (fh.isFileHeader() && fh.isUnicode()) {",
                "-\t\t\tname = fh.getFileNameW();",
                "-\t\t} else {",
                "-\t\t\tname = fh.getFileNameString();",
                "-\t\t}",
                "-\t\tf = new File(destination, name);",
                "-\t\tif (!f.exists()) {",
                "-\t\t\ttry {",
                "-\t\t\t\tf = makeFile(destination, name);",
                "-\t\t\t} catch (IOException e) {",
                "-\t\t\t\tlogError(e, \"error creating the new file: \" + f.getName());",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\treturn f;",
                "-\t}",
                "-",
                "-\tprivate static File makeFile(File destination, String name)",
                "-\t\t\tthrows IOException {",
                "-\t\tString[] dirs = name.split(\"\\\\\\\\\");",
                "-\t\tif (dirs == null) {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-\t\tString path = \"\";",
                "-\t\tint size = dirs.length;",
                "-\t\tif (size == 1) {",
                "-\t\t\treturn new File(destination, name);",
                "-\t\t} else if (size > 1) {",
                "-\t\t\tfor (int i = 0; i < dirs.length - 1; i++) {",
                "-\t\t\t\tpath = path + File.separator + dirs[i];",
                "-\t\t\t\tnew File(destination, path).mkdir();",
                "-\t\t\t}",
                "-\t\t\tpath = path + File.separator + dirs[dirs.length - 1];",
                "-\t\t\tFile f = new File(destination, path);",
                "-\t\t\tf.createNewFile();",
                "-\t\t\treturn f;",
                "-\t\t} else {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tprivate static void createDirectory(FileHeader fh, File destination) {",
                "-\t\tFile f = null;",
                "-\t\tif (fh.isDirectory() && fh.isUnicode()) {",
                "-\t\t\tf = new File(destination, fh.getFileNameW());",
                "-\t\t\tif (!f.exists()) {",
                "-\t\t\t\tmakeDirectory(destination, fh.getFileNameW());",
                "-\t\t\t}",
                "-\t\t} else if (fh.isDirectory() && !fh.isUnicode()) {",
                "-\t\t\tf = new File(destination, fh.getFileNameString());",
                "-\t\t\tif (!f.exists()) {",
                "-\t\t\t\tmakeDirectory(destination, fh.getFileNameString());",
                "-\t\t\t}",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tprivate static void makeDirectory(File destination, String fileName) {",
                "-\t\tString[] dirs = fileName.split(\"\\\\\\\\\");",
                "-\t\tif (dirs == null) {",
                "-\t\t\treturn;",
                "-\t\t}",
                "-\t\tString path = \"\";",
                "-\t\tfor (String dir : dirs) {",
                "-\t\t\tpath = path + File.separator + dir;",
                "-\t\t\tnew File(destination, path).mkdir();",
                "-\t\t}",
                "-",
                "+\t/**",
                "+\t * @deprecated  As of release 1.0.2, replaced by {@link #Junrar.extract(File archive, File destination)}",
                "+\t */",
                "+\t@Deprecated public void extractArchive(File archive, File destination) throws RarException, IOException {",
                "+\t\tJunrar.extract(archive, destination);\t",
                " \t}",
                "diff --git a/src/main/java/com/github/junrar/testutil/ExtractArchive.java b/src/main/java/com/github/junrar/testutil/ExtractArchive.java",
                "index fa7c91cb..08ba0fa8 100644",
                "--- a/src/main/java/com/github/junrar/testutil/ExtractArchive.java",
                "+++ b/src/main/java/com/github/junrar/testutil/ExtractArchive.java",
                "@@ -2,7 +2,6 @@ package com.github.junrar.testutil;",
                "-import java.io.File;",
                " import java.io.IOException;",
                "+import com.github.junrar.Junrar;",
                " import com.github.junrar.exception.RarException;",
                "-import org.apache.commons.logging.LogFactory;",
                "@@ -24,21 +23,7 @@ public class ExtractArchive {",
                "+\t/**",
                "+\t * @deprecated  As of release 1.0.2, replaced by {@link #Junrar.extract(final String rarPath, final String destinationPath)}",
                "+\t */",
                " \tpublic static void extractArchive(String archive, String destination) throws IOException, RarException {",
                "-\t\tif (archive == null || destination == null) {",
                "-\t\t\tthrow new RuntimeException(\"archive and destination must me set\");",
                "-\t\t}",
                "-\t\tFile arch = new File(archive);",
                "-\t\tif (!arch.exists()) {",
                "-\t\t\tthrow new RuntimeException(\"the archive does not exit: \" + archive);",
                "-\t\t}",
                "-\t\tFile dest = new File(destination);",
                "-\t\tif (!dest.exists() || !dest.isDirectory()) {",
                "-\t\t\tthrow new RuntimeException(\"the destination must exist and point to a directory: \" + destination);",
                "-\t\t}",
                "-\t\tExtractArchive.extractArchive(arch, dest);",
                "-\t}",
                "-\t",
                "-\tpublic static void extractArchive(File archive, File destination) throws IOException, RarException {",
                "-\t\tcom.github.junrar.extract.ExtractArchive extractArchive = new com.github.junrar.extract.ExtractArchive();",
                "-\t\textractArchive.setLogger(LogFactory.getLog(ExtractArchive.class.getName()));",
                "-\t\textractArchive.extractArchive(archive, destination);",
                "+\t\tJunrar.extract(archive, destination);",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/com/github/junrar/Archive.java",
                "src/main/java/com/github/junrar/ContentDescription.java",
                "src/main/java/com/github/junrar/Junrar.java",
                "src/main/java/com/github/junrar/extract/ExtractArchive.java",
                "src/main/java/com/github/junrar/testutil/ExtractArchive.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "junrar-2.0.0",
                "junrar-3.0.0",
                "junrar-3.1.0",
                "junrar-3.1.1",
                "junrar-4.0.0",
                "v4.0.0",
                "v5.0.0",
                "v6.0.0",
                "v6.0.1",
                "v7.0.0",
                "v7.1.0",
                "v7.2.0",
                "v7.3.0",
                "v7.4.0",
                "v7.4.1",
                "v7.5.0",
                "v7.5.1",
                "v7.5.2",
                "v7.5.3",
                "v7.5.4",
                "v7.5.5"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: Archive",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/github/junrar/Archive.java, src/main/java/com/github/junrar/testutil/ExtractArchive.java, src/main/java/com/github/junrar/extract/ExtractArchive.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "734b4452369657b336629613ec54c56f7be5bae3",
            "repository": "https://github.com/junrar/junrar",
            "timestamp": 1527968202,
            "hunks": 1,
            "message": "Using static call instead of instantiation for simple extraction",
            "diff": [
                "diff --git a/src/main/java/com/github/junrar/Junrar.java b/src/main/java/com/github/junrar/Junrar.java",
                "new file mode 100644",
                "index 00000000..82773ac9",
                "--- /dev/null",
                "+++ b/src/main/java/com/github/junrar/Junrar.java",
                "@@ -0,0 +1,22 @@",
                "+package com.github.junrar;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+",
                "+import com.github.junrar.exception.RarException;",
                "+import com.github.junrar.extract.ExtractArchive;",
                "+",
                "+public class Junrar {",
                "+\t",
                "+\tpublic static void extract(final File rar, final File destinationFolder) throws RarException, IOException {",
                "+\t\tif(!rar.isFile()) {",
                "+\t\t\tthrow new IllegalArgumentException(\"First argument should be a file but was \"+rar.getAbsolutePath());",
                "+\t\t}",
                "+\t\tif(!destinationFolder.isDirectory()) {",
                "+\t\t\tthrow new IllegalArgumentException(\"Second argument should be a dierctory but was \"+destinationFolder.getAbsolutePath());",
                "+\t\t}",
                "+\t\tExtractArchive extractArchive = new ExtractArchive();  ",
                "+\t\textractArchive.extractArchive(rar, destinationFolder);  ",
                "+\t}\t",
                "+",
                "+}"
            ],
            "changed_files": [
                "src/main/java/com/github/junrar/Junrar.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "junrar-2.0.0",
                "junrar-3.0.0",
                "junrar-3.1.0",
                "junrar-3.1.1",
                "junrar-4.0.0",
                "v4.0.0",
                "v5.0.0",
                "v6.0.0",
                "v6.0.1",
                "v7.0.0",
                "v7.1.0",
                "v7.2.0",
                "v7.3.0",
                "v7.4.0",
                "v7.4.1",
                "v7.5.0",
                "v7.5.1",
                "v7.5.2",
                "v7.5.3",
                "v7.5.4",
                "v7.5.5"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: Archive",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "793ed957efe594a3ea6cf6238729cfc44ead7917",
            "repository": "https://github.com/junrar/junrar",
            "timestamp": 1527904358,
            "hunks": 7,
            "message": "Removing GPL notice with permission from the autor see https://github.com/junrar/junrar/issues/10",
            "diff": [
                "diff --git a/src/main/java/com/github/junrar/Volume.java b/src/main/java/com/github/junrar/Volume.java",
                "index edc17ae3..1acb91a7 100644",
                "--- a/src/main/java/com/github/junrar/Volume.java",
                "+++ b/src/main/java/com/github/junrar/Volume.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * This file is part of seedbox <github.com/seedbox>.",
                "- *",
                "- * seedbox is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU General Public License as published by",
                "- * the Free Software Foundation, either version 3 of the License, or",
                "- * (at your option) any later version.",
                "- *",
                "- * seedbox is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU General Public License",
                "- * along with seedbox.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                " package com.github.junrar;",
                "diff --git a/src/main/java/com/github/junrar/VolumeManager.java b/src/main/java/com/github/junrar/VolumeManager.java",
                "index 3e96530b..6507ec10 100644",
                "--- a/src/main/java/com/github/junrar/VolumeManager.java",
                "+++ b/src/main/java/com/github/junrar/VolumeManager.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * This file is part of seedbox <github.com/seedbox>.",
                "- *",
                "- * seedbox is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU General Public License as published by",
                "- * the Free Software Foundation, either version 3 of the License, or",
                "- * (at your option) any later version.",
                "- *",
                "- * seedbox is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU General Public License",
                "- * along with seedbox.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                " package com.github.junrar;",
                "diff --git a/src/main/java/com/github/junrar/impl/FileVolume.java b/src/main/java/com/github/junrar/impl/FileVolume.java",
                "index eba4da98..dfa464e5 100644",
                "--- a/src/main/java/com/github/junrar/impl/FileVolume.java",
                "+++ b/src/main/java/com/github/junrar/impl/FileVolume.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * This file is part of seedbox <github.com/seedbox>.",
                "- *",
                "- * seedbox is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU General Public License as published by",
                "- * the Free Software Foundation, either version 3 of the License, or",
                "- * (at your option) any later version.",
                "- *",
                "- * seedbox is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU General Public License",
                "- * along with seedbox.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                " package com.github.junrar.impl;",
                "diff --git a/src/main/java/com/github/junrar/impl/FileVolumeManager.java b/src/main/java/com/github/junrar/impl/FileVolumeManager.java",
                "index 3552248c..874dc093 100644",
                "--- a/src/main/java/com/github/junrar/impl/FileVolumeManager.java",
                "+++ b/src/main/java/com/github/junrar/impl/FileVolumeManager.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * This file is part of seedbox <github.com/seedbox>.",
                "- *",
                "- * seedbox is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU General Public License as published by",
                "- * the Free Software Foundation, either version 3 of the License, or",
                "- * (at your option) any later version.",
                "- *",
                "- * seedbox is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU General Public License",
                "- * along with seedbox.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                " package com.github.junrar.impl;",
                "diff --git a/src/main/java/com/github/junrar/vfs2/provider/rar/RandomAccessContentAccess.java b/src/main/java/com/github/junrar/vfs2/provider/rar/RandomAccessContentAccess.java",
                "index 854ef91c..a90ae2bc 100644",
                "--- a/src/main/java/com/github/junrar/vfs2/provider/rar/RandomAccessContentAccess.java",
                "+++ b/src/main/java/com/github/junrar/vfs2/provider/rar/RandomAccessContentAccess.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * This file is part of seedbox <github.com/seedbox>.",
                "- *",
                "- * seedbox is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU General Public License as published by",
                "- * the Free Software Foundation, either version 3 of the License, or",
                "- * (at your option) any later version.",
                "- *",
                "- * seedbox is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU General Public License",
                "- * along with seedbox.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                " package com.github.junrar.vfs2.provider.rar;",
                "diff --git a/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java b/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java",
                "index 47f5c19e..8e4cc2d7 100644",
                "--- a/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java",
                "+++ b/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * This file is part of seedbox <github.com/seedbox>.",
                "- *",
                "- * seedbox is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU General Public License as published by",
                "- * the Free Software Foundation, either version 3 of the License, or",
                "- * (at your option) any later version.",
                "- *",
                "- * seedbox is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU General Public License",
                "- * along with seedbox.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                " package com.github.junrar.vfs2.provider.rar;",
                "diff --git a/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java b/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java",
                "index 0e5b26f6..9342c624 100644",
                "--- a/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java",
                "+++ b/src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java",
                "@@ -1,17 +1 @@",
                "-/*",
                "- * This file is part of seedbox <github.com/seedbox>.",
                "- *",
                "- * seedbox is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU General Public License as published by",
                "- * the Free Software Foundation, either version 3 of the License, or",
                "- * (at your option) any later version.",
                "- *",
                "- * seedbox is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU General Public License",
                "- * along with seedbox.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                " package com.github.junrar.vfs2.provider.rar;"
            ],
            "changed_files": [
                "src/main/java/com/github/junrar/Volume.java",
                "src/main/java/com/github/junrar/VolumeManager.java",
                "src/main/java/com/github/junrar/impl/FileVolume.java",
                "src/main/java/com/github/junrar/impl/FileVolumeManager.java",
                "src/main/java/com/github/junrar/vfs2/provider/rar/RandomAccessContentAccess.java",
                "src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolume.java",
                "src/main/java/com/github/junrar/vfs2/provider/rar/VFSVolumeManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "junrar-1.0.1",
                "junrar-2.0.0",
                "junrar-3.0.0",
                "junrar-3.1.0",
                "junrar-3.1.1",
                "junrar-4.0.0",
                "v4.0.0",
                "v5.0.0",
                "v6.0.0",
                "v6.0.1",
                "v7.0.0",
                "v7.1.0",
                "v7.2.0",
                "v7.3.0",
                "v7.4.0",
                "v7.4.1",
                "v7.5.0",
                "v7.5.1",
                "v7.5.2",
                "v7.5.3",
                "v7.5.4",
                "v7.5.5"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "99264b0ea60058b295e7e52e28929f52f9663764",
            "repository": "https://github.com/junrar/junrar",
            "timestamp": 1527968802,
            "hunks": 1,
            "message": "Moving test to mirror implementation path",
            "diff": [
                "diff --git a/src/main/java/com/github/junrar/Junrar.java b/src/main/java/com/github/junrar/Junrar.java",
                "index 82773ac9..741c48f9 100644",
                "--- a/src/main/java/com/github/junrar/Junrar.java",
                "+++ b/src/main/java/com/github/junrar/Junrar.java",
                "@@ -15,3 +15,3 @@ public class Junrar {",
                " \t\tif(!destinationFolder.isDirectory()) {",
                "-\t\t\tthrow new IllegalArgumentException(\"Second argument should be a dierctory but was \"+destinationFolder.getAbsolutePath());",
                "+\t\t\tthrow new IllegalArgumentException(\"Second argument should be a directory but was \"+destinationFolder.getAbsolutePath());",
                " \t\t}"
            ],
            "changed_files": [
                "src/main/java/com/github/junrar/Junrar.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "junrar-2.0.0",
                "junrar-3.0.0",
                "junrar-3.1.0",
                "junrar-3.1.1",
                "junrar-4.0.0",
                "v4.0.0",
                "v5.0.0",
                "v6.0.0",
                "v6.0.1",
                "v7.0.0",
                "v7.1.0",
                "v7.2.0",
                "v7.3.0",
                "v7.4.0",
                "v7.4.1",
                "v7.5.0",
                "v7.5.1",
                "v7.5.2",
                "v7.5.3",
                "v7.5.4",
                "v7.5.5"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "51eb6422950edd219771068bd4a4d0a3c0238869",
            "repository": "https://github.com/junrar/junrar",
            "timestamp": 1527906835,
            "hunks": 1,
            "message": "[maven-release-plugin] prepare release junrar-1.0.1",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 2f7de77e..d7b9c404 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -5,3 +5,3 @@",
                " \t<packaging>jar</packaging>",
                "-\t<version>1.0.1-SNAPSHOT</version>",
                "+\t<version>1.0.1</version>",
                " \t<name>Java UnRar</name>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "junrar-1.0.1",
                "junrar-2.0.0",
                "junrar-3.0.0",
                "junrar-3.1.0",
                "junrar-3.1.1",
                "junrar-4.0.0",
                "v4.0.0",
                "v5.0.0",
                "v6.0.0",
                "v6.0.1",
                "v7.0.0",
                "v7.1.0",
                "v7.2.0",
                "v7.3.0",
                "v7.4.0",
                "v7.4.1",
                "v7.5.0",
                "v7.5.1",
                "v7.5.2",
                "v7.5.3",
                "v7.5.4",
                "v7.5.5"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "97cf443e2c1920936509e09ced3442b35f66700f",
            "repository": "https://github.com/junrar/junrar",
            "timestamp": 1527968254,
            "hunks": 0,
            "message": "Merge branch 'master' of github.com:junrar/junrar",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "junrar-2.0.0",
                "junrar-3.0.0",
                "junrar-3.1.0",
                "junrar-3.1.1",
                "junrar-4.0.0",
                "v4.0.0",
                "v5.0.0",
                "v6.0.0",
                "v6.0.1",
                "v7.0.0",
                "v7.1.0",
                "v7.2.0",
                "v7.3.0",
                "v7.4.0",
                "v7.4.1",
                "v7.5.0",
                "v7.5.1",
                "v7.5.2",
                "v7.5.3",
                "v7.5.4",
                "v7.5.5"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2da911fd3c2d3f8e40269797049e8aca572016c6",
            "repository": "https://github.com/junrar/junrar",
            "timestamp": 1527906845,
            "hunks": 1,
            "message": "[maven-release-plugin] prepare for next development iteration",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index d7b9c404..1ddbbaf5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -5,3 +5,3 @@",
                " \t<packaging>jar</packaging>",
                "-\t<version>1.0.1</version>",
                "+\t<version>1.0.2-SNAPSHOT</version>",
                " \t<name>Java UnRar</name>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "junrar-2.0.0",
                "junrar-3.0.0",
                "junrar-3.1.0",
                "junrar-3.1.1",
                "junrar-4.0.0",
                "v4.0.0",
                "v5.0.0",
                "v6.0.0",
                "v6.0.1",
                "v7.0.0",
                "v7.1.0",
                "v7.2.0",
                "v7.3.0",
                "v7.4.0",
                "v7.4.1",
                "v7.5.0",
                "v7.5.1",
                "v7.5.2",
                "v7.5.3",
                "v7.5.4",
                "v7.5.5"
            ],
            "matched_rules": []
        }
    ]
}
