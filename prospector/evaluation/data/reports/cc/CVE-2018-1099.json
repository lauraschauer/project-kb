{
    "advisory_record": {
        "cve_id": "CVE-2018-1099",
        "description": "DNS rebinding vulnerability found in etcd 3.3.1 and earlier. An attacker can control his DNS records to direct to localhost, and trick the browser into sending requests to localhost (or any other address).",
        "reserved_timestamp": 1512345600,
        "published_timestamp": 1519516800,
        "updated_timestamp": 1557119162,
        "repository_url": null,
        "references": {
            "": 781,
            "https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment": 15,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1552717": 6,
            "https://github.com/coreos/etcd/issues/9353": 6,
            "https://github.com/ericchiang": 5,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "commit::a7e5790c82039945639798ae9a3289fe787f5e56": 3,
            "https://github.com/transmission/transmission/pull/468": 3,
            "commit::02217cb6dfea00cd661cc9746117ca4547d7c03c": 3,
            "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UPGYHMSKDPW5GAMI7BEP3XQRVRLLBJKS/": 2,
            "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/JX7QTIT465BQGRGNCE74RATRQLKT2QE4/": 2,
            "https://github.com/etcd-io/etcd/pull/9372": 2,
            "https://www.twistlock.com/2018/02/28/dear-developers-beware-dns-rebinding/": 2,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "https://docs.github.com/terms": 2,
            "https://docs.github.com/privacy": 2,
            "https://bugs.chromium.org/p/project-zero/issues/detail?id=1447#c2": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "https://github.com/coreos/etcd": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1651034": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1552714": 2,
            "http://dnf.readthedocs.io/en/latest/command_ref.html#upgrade-command-label": 2,
            "https://fedoraproject.org/keys": 2,
            "http://hyperkitty.readthedocs.org": 2,
            "https://codecov.io/gh/coreos/etcd/pull/9372?src=pr&el=tree": 2,
            "https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)": 1,
            "https://en.wikipedia.org/wiki/DNS_rebinding": 1,
            "https://github.com/twistlock/etcd_DNSRebinding": 1,
            "https://bugs.chromium.org/p/project-zero/issues/detail?id=1447": 1,
            "https://user-images.githubusercontent.com/15815884/36641064-b981eecc-1a32-11e8-9f6c-458e349fd889.png": 1,
            "https://github.com/sidhax": 1,
            "https://github.com/advisories/GHSA-5gjm-fj42-x983": 1,
            "https://github.com/advisories/GHSA-wf43-55jj-vwq8": 1,
            "https://github.com/pedrohc": 1,
            "https://fedoraproject.org/wiki/Fedora_30_Mass_Rebuild": 1,
            "https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/message/RWD5YATAYAFWKIDZBB7EB6N5DAO4ZKFM/": 1,
            "https://fedoraproject.org/wiki/Fedora_29_Mass_Rebuild": 1,
            "https://github.co/hiddenchars": 1,
            "https://github.com/etcd-io/etcd/issues/9353": 1,
            "https://github.com/mitake": 1,
            "https://github.com/zelivans": 1,
            "https://github.com/advisories/GHSA-6q4w-fhcp-mhw6": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372?src=pr&el=h1": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372/diff?src=pr&el=tree#diff-ZXRjZHNlcnZlci9jb25maWcuZ28=": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372/diff?src=pr&el=tree#diff-ZW1iZWQvY29uZmlnLmdv": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372/diff?src=pr&el=tree#diff-ZW1iZWQvc2VydmUuZ28=": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372/diff?src=pr&el=tree#diff-ZW1iZWQvZXRjZC5nbw==": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372/diff?src=pr&el=tree#diff-ZXRjZHNlcnZlci9zZXJ2ZXIuZ28=": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372/diff?src=pr&el=tree#diff-cGtnL2h0dHB1dGlsL2h0dHB1dGlsLmdv": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372/diff?src=pr&el=tree#diff-ZXRjZG1haW4vY29uZmlnLmdv": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372?src=pr&el=continue": 1,
            "https://docs.codecov.io/docs/codecov-delta": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372?src=pr&el=footer": 1,
            "https://codecov.io/gh/coreos/etcd/pull/9372?src=pr&el=lastupdated": 1,
            "https://docs.codecov.io/docs/pull-request-comments": 1,
            "https://github.com/jpbetz": 1,
            "https://github.com/kubernetes/kubernetes/blob/release-1.10/test/e2e_node/services/etcd.go#L78-L81": 1,
            "https://github.com/etcd-io/etcd/pull/9372#event-1498224919": 1
        },
        "affected_products": [
            "etcd"
        ],
        "versions": {
            "status": "affected",
            "version": "3.3.1 and earlier"
        },
        "files": [
            "DNS"
        ],
        "keywords": [
            "rebind",
            "browser",
            "localhost",
            "send",
            "trick",
            "attacker",
            "etcd",
            "find",
            "record",
            "direct",
            "address",
            "vulnerability",
            "request",
            "control"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "a7e5790c82039945639798ae9a3289fe787f5e56",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519879103,
            "hunks": 0,
            "message": "Merge pull request #9372 from gyuho/origin *: mitigate DNS rebinding attacks in insecure etcd server",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9372": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 3 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: DNS",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: insecure",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: rebind, request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9372",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9db332c5986c5d06146e8d04a419126898b39c2e",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519774105,
            "hunks": 2,
            "message": "hack/scripts-dev: add HTTP requests with DNS Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/docker-dns/certs/run.sh b/hack/scripts-dev/docker-dns/certs/run.sh",
                "index 7f6c31d4f..1ef72d40f 100755",
                "--- a/hack/scripts-dev/docker-dns/certs/run.sh",
                "+++ b/hack/scripts-dev/docker-dns/certs/run.sh",
                "@@ -33 +33,51 @@ ETCDCTL_API=3 ./etcdctl \\",
                "   get abc",
                "+",
                "+# TODO: add host header check to enforce same-origin-policy",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl -L https://127.0.0.1:2379/v2/keys/queue \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl -L https://m1.etcd.local:2379/v2/keys/queue \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v3 key...\\n\"",
                "+curl -L https://127.0.0.1:2379/v3/kv/put \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nWriting v3 key...\\n\"",
                "+curl -L https://m1.etcd.local:2379/v3/kv/put \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nReading v3 key...\\n\"",
                "+curl -L https://m1.etcd.local:2379/v3/kv/range \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\"}'",
                "+",
                "+printf \"\\n\\nFetching 'curl https://m1.etcd.local:2379/metrics'...\\n\"",
                "+curl \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -L https://m1.etcd.local:2379/metrics | grep Put | tail -3",
                "+",
                "+printf \"\\n\\nDone!!!\\n\\n\"",
                "diff --git a/hack/scripts-dev/docker-dns/insecure/run.sh b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "index 28a82cc38..683329b7e 100755",
                "--- a/hack/scripts-dev/docker-dns/insecure/run.sh",
                "+++ b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "@@ -26,8 +26,36 @@ ETCDCTL_API=3 ./etcdctl \\",
                " # TODO: add host header check to enforce same-origin-policy",
                "-curl -L http://127.0.0.1:2379/v2/keys/queue \\",
                "-  -XPOST \\",
                "-  -d value=Job1",
                "-",
                "-curl -L http://m1.etcd.local:2379/v2/keys/queue \\",
                "-  -XPOST \\",
                "-  -d value=Job1",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl \\",
                "+  -L http://127.0.0.1:2379/v2/keys/queue \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v2/keys/queue \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v3 key...\\n\"",
                "+curl \\",
                "+  -L http://127.0.0.1:2379/v3/kv/put \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nWriting v3 key...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/kv/put \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nReading v3 key...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/kv/range \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\"}'",
                "+",
                "+printf \"\\n\\nFetching 'curl http://m1.etcd.local:2379/metrics'...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/metrics | grep Put | tail -3",
                "+",
                "+printf \"\\n\\nDone!!!\\n\\n\""
            ],
            "changed_files": [
                "hack/scripts-dev/docker-dns/certs/run.sh",
                "hack/scripts-dev/docker-dns/insecure/run.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: DNS",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8edaecadc42b32fccd29a0a996a17b6af2ae64d8",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519856708,
            "hunks": 10,
            "message": "embed: enforce client origin policy Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/embed/etcd.go b/embed/etcd.go",
                "index 0d21639f7..9c9ef7383 100644",
                "--- a/embed/etcd.go",
                "+++ b/embed/etcd.go",
                "@@ -176,2 +176,7 @@ func StartEtcd(inCfg *Config) (e *Etcd, err error) {",
                "+\tsrvcfg.HostWhitelist = make(map[string]struct{}, len(cfg.HostWhitelist))",
                "+\tfor _, h := range cfg.HostWhitelist {",
                "+\t\tsrvcfg.HostWhitelist[h] = struct{}{}",
                "+\t}",
                "+",
                " \tif e.Server, err = etcdserver.NewServer(srvcfg); err != nil {",
                "@@ -179,2 +184,3 @@ func StartEtcd(inCfg *Config) (e *Etcd, err error) {",
                " \t}",
                "+\tplog.Infof(\"%s starting with host whitelist %q\", e.Server.ID(), cfg.HostWhitelist)",
                "diff --git a/embed/serve.go b/embed/serve.go",
                "index 3b8868cb5..72f162dc1 100644",
                "--- a/embed/serve.go",
                "+++ b/embed/serve.go",
                "@@ -18,2 +18,3 @@ import (",
                " \t\"context\"",
                "+\t\"fmt\"",
                " \t\"io/ioutil\"",
                "@@ -35,2 +36,3 @@ import (",
                " \t\"github.com/coreos/etcd/pkg/debugutil\"",
                "+\t\"github.com/coreos/etcd/pkg/httputil\"",
                " \t\"github.com/coreos/etcd/pkg/transport\"",
                "@@ -116,3 +118,3 @@ func (sctx *serveCtx) serve(",
                " \t\tsrvhttp := &http.Server{",
                "-\t\t\tHandler:  wrapMux(httpmux),",
                "+\t\t\tHandler:  wrapMux(s, httpmux),",
                " \t\t\tErrorLog: logger, // do not log user error",
                "@@ -159,3 +161,3 @@ func (sctx *serveCtx) serve(",
                " \t\tsrv := &http.Server{",
                "-\t\t\tHandler:   wrapMux(httpmux),",
                "+\t\t\tHandler:   wrapMux(s, httpmux),",
                " \t\t\tTLSConfig: tlscfg,",
                "@@ -254,4 +256,4 @@ func (sctx *serveCtx) createMux(gwmux *gw.ServeMux, handler http.Handler) *http.",
                " // client HTTP requests goes here first",
                "-func wrapMux(mux *http.ServeMux) http.Handler {",
                "-\treturn &httpWrapper{mux: mux}",
                "+func wrapMux(s *etcdserver.EtcdServer, mux *http.ServeMux) http.Handler {",
                "+\treturn &httpWrapper{s: s, mux: mux}",
                " }",
                "@@ -259,2 +261,3 @@ func wrapMux(mux *http.ServeMux) http.Handler {",
                " type httpWrapper struct {",
                "+\ts   *etcdserver.EtcdServer",
                " \tmux *http.ServeMux",
                "@@ -267,2 +270,14 @@ func (m *httpWrapper) ServeHTTP(rw http.ResponseWriter, req *http.Request) {",
                " \t}",
                "+",
                "+\tif req.TLS == nil { // check origin if client connection is not secure",
                "+\t\thost := httputil.GetHostname(req)",
                "+\t\tif !m.s.IsHostWhitelisted(host) {",
                "+\t\t\tplog.Warningf(\"rejecting HTTP request from %q to prevent DNS rebinding attacks\", host)",
                "+\t\t\t// TODO: use Go's \"http.StatusMisdirectedRequest\" (421)",
                "+\t\t\t// https://github.com/golang/go/commit/4b8a7eafef039af1834ef9bfa879257c4a72b7b5",
                "+\t\t\thttp.Error(rw, errCVE20185702(host), 421)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t}",
                "+",
                " \tm.mux.ServeHTTP(rw, req)",
                "@@ -270,2 +285,16 @@ func (m *httpWrapper) ServeHTTP(rw http.ResponseWriter, req *http.Request) {",
                "+// https://github.com/transmission/transmission/pull/468",
                "+func errCVE20185702(host string) string {",
                "+\treturn fmt.Sprintf(`",
                "+etcd received your request, but the Host header was unrecognized.",
                "+",
                "+To fix this, choose one of the following options:",
                "+- Enable TLS, then any HTTPS request will be allowed.",
                "+- Add the hostname you want to use to the whitelist in settings.",
                "+  - e.g. etcd --host-whitelist %q",
                "+",
                "+This requirement has been added to help prevent \"DNS Rebinding\" attacks (CVE-2018-5702).",
                "+`, host)",
                "+}",
                "+",
                " func (sctx *serveCtx) registerUserHandler(s string, h http.Handler) {"
            ],
            "changed_files": [
                "embed/etcd.go",
                "embed/serve.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: DNS",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "660f7fd8a081a08b2e6baf649436d4ae4d6c1408",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520461338,
            "hunks": 109,
            "message": "hack/scripts-dev: sync with master Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/benchmark/bench.sh b/hack/benchmark/bench.sh",
                "old mode 100644",
                "new mode 100755",
                "index 3955d9e6e..d72efd3e2",
                "--- a/hack/benchmark/bench.sh",
                "+++ b/hack/benchmark/bench.sh",
                "@@ -2,5 +2,5 @@",
                "-leader=http://10.240.201.15:2379",
                "+leader=http://localhost:2379",
                " # assume three servers",
                "-servers=( http://10.240.201.15:2379 http://10.240.212.209:2379 http://10.240.95.3:2379 )",
                "+servers=( http://localhost:2379 http://localhost:22379 http://localhost:32379 )",
                "diff --git a/hack/scripts-dev/Makefile b/hack/scripts-dev/Makefile",
                "index 1942da97d..c9450a4c9 100644",
                "--- a/hack/scripts-dev/Makefile",
                "+++ b/hack/scripts-dev/Makefile",
                "@@ -1,6 +1,11 @@",
                " # run from repository root",
                "-#",
                "+",
                "+",
                "+",
                " # Example:",
                "-#   make clean -f ./hack/scripts-dev/Makefile",
                " #   make build -f ./hack/scripts-dev/Makefile",
                "+#   make clean -f ./hack/scripts-dev/Makefile",
                "+#   make clean-docker -f ./hack/scripts-dev/Makefile",
                "+#   make restart-docker -f ./hack/scripts-dev/Makefile",
                "+#   make delete-docker-images -f ./hack/scripts-dev/Makefile",
                "@@ -25,15 +30,36 @@ clean:",
                "-_GO_VERSION = 1.9.2",
                "-ifdef GO_VERSION",
                "-\t_GO_VERSION = $(GO_VERSION)",
                "+clean-docker:",
                "+\tdocker images",
                "+\tdocker image prune --force",
                "+",
                "+restart-docker:",
                "+\tservice docker restart",
                "+",
                "+delete-docker-images:",
                "+\tdocker rm --force $(docker ps -a -q) || true",
                "+\tdocker rmi --force $(docker images -q) || true",
                "+",
                "+",
                "+",
                "+GO_VERSION ?= 1.10",
                "+ETCD_VERSION ?= $(shell git rev-parse --short HEAD || echo \"GitNotFound\")",
                "+",
                "+TEST_SUFFIX = $(shell date +%s | base64 | head -c 15)",
                "+TEST_OPTS ?= PASSES='unit'",
                "+",
                "+TMP_DIR_MOUNT_FLAG = --mount type=tmpfs,destination=/tmp",
                "+ifdef HOST_TMP_DIR",
                "+\tTMP_DIR_MOUNT_FLAG = --mount type=bind,source=$(HOST_TMP_DIR),destination=/tmp",
                " endif",
                "+",
                "+",
                " # Example:",
                "-#   GO_VERSION=1.8.5 make build-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   GO_VERSION=1.8.7 make build-docker-test -f ./hack/scripts-dev/Makefile",
                " #   make build-docker-test -f ./hack/scripts-dev/Makefile",
                " #   gcloud docker -- login -u _json_key -p \"$(cat /etc/gcp-key-etcd-development.json)\" https://gcr.io",
                "-#   GO_VERSION=1.8.5 make push-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   GO_VERSION=1.8.7 make push-docker-test -f ./hack/scripts-dev/Makefile",
                " #   make push-docker-test -f ./hack/scripts-dev/Makefile",
                " #   gsutil -m acl ch -u allUsers:R -r gs://artifacts.etcd-development.appspot.com",
                "-#   GO_VERSION=1.8.5 make pull-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   GO_VERSION=1.8.7 make pull-docker-test -f ./hack/scripts-dev/Makefile",
                " #   make pull-docker-test -f ./hack/scripts-dev/Makefile",
                "@@ -41,25 +67,44 @@ endif",
                " build-docker-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\t@cat ./Dockerfile-test | sed s/REPLACE_ME_GO_VERSION/$(_GO_VERSION)/ \\",
                "-\t  > ./.Dockerfile-test",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t@sed -i.bak 's|REPLACE_ME_GO_VERSION|$(GO_VERSION)|g' ./Dockerfile-test",
                " \tdocker build \\",
                "-\t  --tag gcr.io/etcd-development/etcd-test:go$(_GO_VERSION) \\",
                "-\t  --file ./.Dockerfile-test .",
                "+\t  --tag gcr.io/etcd-development/etcd-test:go$(GO_VERSION) \\",
                "+\t  --file ./Dockerfile-test .",
                "+\t@mv ./Dockerfile-test.bak ./Dockerfile-test",
                " push-docker-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\tgcloud docker -- push gcr.io/etcd-development/etcd-test:go$(_GO_VERSION)",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tgcloud docker -- push gcr.io/etcd-development/etcd-test:go$(GO_VERSION)",
                " pull-docker-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\tdocker pull gcr.io/etcd-development/etcd-test:go$(_GO_VERSION)",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tdocker pull gcr.io/etcd-development/etcd-test:go$(GO_VERSION)",
                "+",
                "+",
                "+",
                "+# Example:",
                "+#   make build-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   make compile-with-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   make compile-setup-gopath-with-docker-test -f ./hack/scripts-dev/Makefile",
                " compile-with-docker-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                " \tdocker run \\",
                " \t  --rm \\",
                "-\t  --volume=`pwd`/:/etcd \\",
                "-\t  gcr.io/etcd-development/etcd-test:go$(_GO_VERSION) \\",
                "-\t  /bin/bash -c \"cd /etcd && GO_BUILD_FLAGS=-v ./build && ./bin/etcd --version\"",
                "+\t  --mount type=bind,source=`pwd`,destination=/go/src/github.com/coreos/etcd \\",
                "+\t  gcr.io/etcd-development/etcd-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"GO_BUILD_FLAGS=-v ./build && ./bin/etcd --version\"",
                "+compile-setup-gopath-with-docker-test:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --mount type=bind,source=`pwd`,destination=/etcd \\",
                "+\t  gcr.io/etcd-development/etcd-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"cd /etcd && ETCD_SETUP_GOPATH=1 GO_BUILD_FLAGS=-v ./build && ./bin/etcd --version && rm -rf ./gopath\"",
                "+",
                "+",
                "+",
                "+# Example:",
                "+#",
                " # Local machine:",
                "@@ -80,2 +125,3 @@ compile-with-docker-test:",
                " #   TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional'\" make docker-test -f ./hack/scripts-dev/Makefile",
                "+#   HOST_TMP_DIR=/tmp TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional'\" make docker-test -f ./hack/scripts-dev/Makefile",
                " #   TEST_OPTS=\"GOARCH=386 PASSES='build unit integration_e2e'\" make docker-test -f ./hack/scripts-dev/Makefile",
                "@@ -84,9 +130,3 @@ compile-with-docker-test:",
                " #   TEST_OPTS=\"PASSES='build grpcproxy'\" make docker-test -f ./hack/scripts-dev/Makefile",
                "-",
                "-TEST_SUFFIX = $(shell date +%s | base64 | head -c 15)",
                "-",
                "-_TEST_OPTS = \"PASSES='unit'\"",
                "-ifdef TEST_OPTS",
                "-\t_TEST_OPTS = $(TEST_OPTS)",
                "-endif",
                "+#   HOST_TMP_DIR=/tmp TEST_OPTS=\"PASSES='build grpcproxy'\" make docker-test -f ./hack/scripts-dev/Makefile",
                "@@ -94,46 +134,49 @@ endif",
                " test:",
                "-\t$(info TEST_OPTS: $(_TEST_OPTS))",
                "+\t$(info TEST_OPTS: $(TEST_OPTS))",
                " \t$(info log-file: test-$(TEST_SUFFIX).log)",
                "-\t$(_TEST_OPTS) ./test 2>&1 | tee test-$(TEST_SUFFIX).log",
                "-\t! egrep \"(--- FAIL:|panic: test timed out|appears to have leaked|Too many goroutines)\" -B50 -A10 test-$(TEST_SUFFIX).log",
                "+\t$(TEST_OPTS) ./test 2>&1 | tee test-$(TEST_SUFFIX).log",
                "+\t! egrep \"(--- FAIL:|panic: test timed out|appears to have leaked)\" -B50 -A10 test-$(TEST_SUFFIX).log",
                " docker-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\t$(info TEST_OPTS: $(_TEST_OPTS))",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info ETCD_VERSION: $(ETCD_VERSION))",
                "+\t$(info TEST_OPTS: $(TEST_OPTS))",
                " \t$(info log-file: test-$(TEST_SUFFIX).log)",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                " \tdocker run \\",
                " \t  --rm \\",
                "-\t  --volume=/tmp:/tmp \\",
                "-\t  --volume=`pwd`:/go/src/github.com/coreos/etcd \\",
                "-\t  gcr.io/etcd-development/etcd-test:go$(_GO_VERSION) \\",
                "-\t  /bin/bash -c \"$(_TEST_OPTS) ./test 2>&1 | tee test-$(TEST_SUFFIX).log\"",
                "-\t! egrep \"(--- FAIL:|panic: test timed out|appears to have leaked|Too many goroutines)\" -B50 -A10 test-$(TEST_SUFFIX).log",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`,destination=/go/src/github.com/coreos/etcd \\",
                "+\t  gcr.io/etcd-development/etcd-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"$(TEST_OPTS) ./test 2>&1 | tee test-$(TEST_SUFFIX).log\"",
                "+\t! egrep \"(--- FAIL:|panic: test timed out|appears to have leaked)\" -B50 -A10 test-$(TEST_SUFFIX).log",
                " docker-test-coverage:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info ETCD_VERSION: $(ETCD_VERSION))",
                " \t$(info log-file: docker-test-coverage-$(TEST_SUFFIX).log)",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                " \tdocker run \\",
                " \t  --rm \\",
                "-\t  --volume=/tmp:/tmp \\",
                "-\t  --volume=`pwd`:/go/src/github.com/coreos/etcd \\",
                "-\t  gcr.io/etcd-development/etcd-test:go$(_GO_VERSION) \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`,destination=/go/src/github.com/coreos/etcd \\",
                "+\t  gcr.io/etcd-development/etcd-test:go$(GO_VERSION) \\",
                " \t  /bin/bash -c \"COVERDIR=covdir PASSES='build build_cov cov' ./test 2>&1 | tee docker-test-coverage-$(TEST_SUFFIX).log && /codecov -t 6040de41-c073-4d6f-bbf8-d89256ef31e1\"",
                "-\t! egrep \"(--- FAIL:|panic: test timed out|appears to have leaked|Too many goroutines)\" -B50 -A10 docker-test-coverage-$(TEST_SUFFIX).log",
                "+\t! egrep \"(--- FAIL:|panic: test timed out|appears to have leaked)\" -B50 -A10 docker-test-coverage-$(TEST_SUFFIX).log",
                "+",
                "-# build release container image with Linux",
                "-_ETCD_VERSION ?= $(shell git rev-parse --short HEAD || echo \"GitNotFound\")",
                "-ifdef ETCD_VERSION",
                "-\t_ETCD_VERSION = $(ETCD_VERSION)",
                "-endif",
                " # Example:",
                "-#   ETCD_VERSION=v3.3.0-test.0 make build-docker-release-master -f ./hack/scripts-dev/Makefile",
                "-#   ETCD_VERSION=v3.3.0-test.0 make push-docker-release-master -f ./hack/scripts-dev/Makefile",
                "+#   make compile-with-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   ETCD_VERSION=v3-test make build-docker-release-master -f ./hack/scripts-dev/Makefile",
                "+#   ETCD_VERSION=v3-test make push-docker-release-master -f ./hack/scripts-dev/Makefile",
                " #   gsutil -m acl ch -u allUsers:R -r gs://artifacts.etcd-development.appspot.com",
                "-build-docker-release-master: compile-with-docker-test",
                "-\t$(info ETCD_VERSION: $(_ETCD_VERSION))",
                "+build-docker-release-master:",
                "+\t$(info ETCD_VERSION: $(ETCD_VERSION))",
                " \tcp ./Dockerfile-release ./bin/Dockerfile-release",
                " \tdocker build \\",
                "-\t  --tag gcr.io/etcd-development/etcd:$(_ETCD_VERSION) \\",
                "+\t  --tag gcr.io/etcd-development/etcd:$(ETCD_VERSION) \\",
                " \t  --file ./bin/Dockerfile-release \\",
                "@@ -144,3 +187,3 @@ build-docker-release-master: compile-with-docker-test",
                " \t  --rm \\",
                "-\t  gcr.io/etcd-development/etcd:$(_ETCD_VERSION) \\",
                "+\t  gcr.io/etcd-development/etcd:$(ETCD_VERSION) \\",
                " \t  /bin/sh -c \"/usr/local/bin/etcd --version && ETCDCTL_API=3 /usr/local/bin/etcdctl version\"",
                "@@ -148,4 +191,62 @@ build-docker-release-master: compile-with-docker-test",
                " push-docker-release-master:",
                "-\t$(info ETCD_VERSION: $(_ETCD_VERSION))",
                "-\tgcloud docker -- push gcr.io/etcd-development/etcd:$(_ETCD_VERSION)",
                "+\t$(info ETCD_VERSION: $(ETCD_VERSION))",
                "+\tgcloud docker -- push gcr.io/etcd-development/etcd:$(ETCD_VERSION)",
                "+",
                "+",
                "+",
                "+# Example:",
                "+#   make build-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   make compile-with-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   make build-docker-static-ip-test -f ./hack/scripts-dev/Makefile",
                "+#   gcloud docker -- login -u _json_key -p \"$(cat /etc/gcp-key-etcd-development.json)\" https://gcr.io",
                "+#   make push-docker-static-ip-test -f ./hack/scripts-dev/Makefile",
                "+#   gsutil -m acl ch -u allUsers:R -r gs://artifacts.etcd-development.appspot.com",
                "+#   make pull-docker-static-ip-test -f ./hack/scripts-dev/Makefile",
                "+#   make docker-static-ip-test-certs-run -f ./hack/scripts-dev/Makefile",
                "+#   make docker-static-ip-test-certs-metrics-proxy-run -f ./hack/scripts-dev/Makefile",
                "+",
                "+build-docker-static-ip-test:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t@sed -i.bak 's|REPLACE_ME_GO_VERSION|$(GO_VERSION)|g' ./hack/scripts-dev/docker-static-ip/Dockerfile",
                "+\tdocker build \\",
                "+\t  --tag gcr.io/etcd-development/etcd-static-ip-test:go$(GO_VERSION) \\",
                "+\t  --file ./hack/scripts-dev/docker-static-ip/Dockerfile \\",
                "+\t  ./hack/scripts-dev/docker-static-ip",
                "+\t@mv ./hack/scripts-dev/docker-static-ip/Dockerfile.bak ./hack/scripts-dev/docker-static-ip/Dockerfile",
                "+",
                "+push-docker-static-ip-test:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tgcloud docker -- push gcr.io/etcd-development/etcd-static-ip-test:go$(GO_VERSION)",
                "+",
                "+pull-docker-static-ip-test:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tdocker pull gcr.io/etcd-development/etcd-static-ip-test:go$(GO_VERSION)",
                "+",
                "+docker-static-ip-test-certs-run:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --tty \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-static-ip/certs,destination=/certs \\",
                "+\t  gcr.io/etcd-development/etcd-static-ip-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"cd /etcd && /certs/run.sh && rm -rf m*.etcd\"",
                "+",
                "+docker-static-ip-test-certs-metrics-proxy-run:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --tty \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-static-ip/certs-metrics-proxy,destination=/certs-metrics-proxy \\",
                "+\t  gcr.io/etcd-development/etcd-static-ip-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"cd /etcd && /certs-metrics-proxy/run.sh && rm -rf m*.etcd\"",
                "+",
                "+",
                "@@ -159,2 +260,3 @@ push-docker-release-master:",
                " #   make pull-docker-dns-test -f ./hack/scripts-dev/Makefile",
                "+#   make docker-dns-test-insecure-run -f ./hack/scripts-dev/Makefile",
                " #   make docker-dns-test-certs-run -f ./hack/scripts-dev/Makefile",
                "@@ -162,12 +264,13 @@ push-docker-release-master:",
                " #   make docker-dns-test-certs-wildcard-run -f ./hack/scripts-dev/Makefile",
                "+#   make docker-dns-test-certs-common-name-auth-run -f ./hack/scripts-dev/Makefile",
                "+#   make docker-dns-test-certs-common-name-multi-run -f ./hack/scripts-dev/Makefile",
                " build-docker-dns-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\t@cat ./hack/scripts-dev/docker-dns/Dockerfile | sed s/REPLACE_ME_GO_VERSION/$(_GO_VERSION)/ \\",
                "-\t  > ./hack/scripts-dev/docker-dns/.Dockerfile",
                "-",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t@sed -i.bak 's|REPLACE_ME_GO_VERSION|$(GO_VERSION)|g' ./hack/scripts-dev/docker-dns/Dockerfile",
                " \tdocker build \\",
                "-\t  --tag gcr.io/etcd-development/etcd-dns-test:go$(_GO_VERSION) \\",
                "-\t  --file ./hack/scripts-dev/docker-dns/.Dockerfile \\",
                "+\t  --tag gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                "+\t  --file ./hack/scripts-dev/docker-dns/Dockerfile \\",
                " \t  ./hack/scripts-dev/docker-dns",
                "+\t@mv ./hack/scripts-dev/docker-dns/Dockerfile.bak ./hack/scripts-dev/docker-dns/Dockerfile",
                "@@ -176,3 +279,3 @@ build-docker-dns-test:",
                " \t  --dns 127.0.0.1 \\",
                "-\t  gcr.io/etcd-development/etcd-dns-test:go$(_GO_VERSION) \\",
                "+\t  gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                " \t  /bin/bash -c \"/etc/init.d/bind9 start && cat /dev/null >/etc/hosts && dig etcd.local\"",
                "@@ -180,11 +283,27 @@ build-docker-dns-test:",
                " push-docker-dns-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\tgcloud docker -- push gcr.io/etcd-development/etcd-dns-test:go$(_GO_VERSION)",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tgcloud docker -- push gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION)",
                " pull-docker-dns-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\tdocker pull gcr.io/etcd-development/etcd-dns-test:go$(_GO_VERSION)",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tdocker pull gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION)",
                "+",
                "+docker-dns-test-insecure-run:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --tty \\",
                "+\t  --dns 127.0.0.1 \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns/insecure,destination=/insecure \\",
                "+\t  gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"cd /etcd && /insecure/run.sh && rm -rf m*.etcd\"",
                " docker-dns-test-certs-run:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                " \tdocker run \\",
                "@@ -193,6 +312,6 @@ docker-dns-test-certs-run:",
                " \t  --dns 127.0.0.1 \\",
                "-\t  --volume=/tmp:/tmp \\",
                "-\t  --volume=`pwd`/bin:/etcd \\",
                "-\t  --volume=`pwd`/hack/scripts-dev/docker-dns/certs:/certs \\",
                "-\t  gcr.io/etcd-development/etcd-dns-test:go$(_GO_VERSION) \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns/certs,destination=/certs \\",
                "+\t  gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                " \t  /bin/bash -c \"cd /etcd && /certs/run.sh && rm -rf m*.etcd\"",
                "@@ -200,3 +319,5 @@ docker-dns-test-certs-run:",
                " docker-dns-test-certs-gateway-run:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                " \tdocker run \\",
                "@@ -205,6 +326,6 @@ docker-dns-test-certs-gateway-run:",
                " \t  --dns 127.0.0.1 \\",
                "-\t  --volume=/tmp:/tmp \\",
                "-\t  --volume=`pwd`/bin:/etcd \\",
                "-\t  --volume=`pwd`/hack/scripts-dev/docker-dns/certs-gateway:/certs-gateway \\",
                "-\t  gcr.io/etcd-development/etcd-dns-test:go$(_GO_VERSION) \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns/certs-gateway,destination=/certs-gateway \\",
                "+\t  gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                " \t  /bin/bash -c \"cd /etcd && /certs-gateway/run.sh && rm -rf m*.etcd\"",
                "@@ -212,3 +333,5 @@ docker-dns-test-certs-gateway-run:",
                " docker-dns-test-certs-wildcard-run:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                " \tdocker run \\",
                "@@ -217,8 +340,38 @@ docker-dns-test-certs-wildcard-run:",
                " \t  --dns 127.0.0.1 \\",
                "-\t  --volume=/tmp:/tmp \\",
                "-\t  --volume=`pwd`/bin:/etcd \\",
                "-\t  --volume=`pwd`/hack/scripts-dev/docker-dns/certs-wildcard:/certs-wildcard \\",
                "-\t  gcr.io/etcd-development/etcd-dns-test:go$(_GO_VERSION) \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns/certs-wildcard,destination=/certs-wildcard \\",
                "+\t  gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                " \t  /bin/bash -c \"cd /etcd && /certs-wildcard/run.sh && rm -rf m*.etcd\"",
                "+docker-dns-test-certs-common-name-auth-run:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --tty \\",
                "+\t  --dns 127.0.0.1 \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns/certs-common-name-auth,destination=/certs-common-name-auth \\",
                "+\t  gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"cd /etcd && /certs-common-name-auth/run.sh && rm -rf m*.etcd\"",
                "+",
                "+docker-dns-test-certs-common-name-multi-run:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --tty \\",
                "+\t  --dns 127.0.0.1 \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns/certs-common-name-multi,destination=/certs-common-name-multi \\",
                "+\t  gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"cd /etcd && /certs-common-name-multi/run.sh && rm -rf m*.etcd\"",
                "+",
                "+",
                "+",
                " # Example:",
                "@@ -236,10 +389,9 @@ docker-dns-test-certs-wildcard-run:",
                " build-docker-dns-srv-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\t@cat ./hack/scripts-dev/docker-dns-srv/Dockerfile | sed s/REPLACE_ME_GO_VERSION/$(_GO_VERSION)/ \\",
                "-\t  > ./hack/scripts-dev/docker-dns-srv/.Dockerfile",
                "-",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t@sed -i.bak 's|REPLACE_ME_GO_VERSION|$(GO_VERSION)|g' ./hack/scripts-dev/docker-dns-srv/Dockerfile",
                " \tdocker build \\",
                "-\t  --tag gcr.io/etcd-development/etcd-dns-srv-test:go$(_GO_VERSION) \\",
                "-\t  --file ./hack/scripts-dev/docker-dns-srv/.Dockerfile \\",
                "+\t  --tag gcr.io/etcd-development/etcd-dns-srv-test:go$(GO_VERSION) \\",
                "+\t  --file ./hack/scripts-dev/docker-dns-srv/Dockerfile \\",
                " \t  ./hack/scripts-dev/docker-dns-srv",
                "+\t@mv ./hack/scripts-dev/docker-dns-srv/Dockerfile.bak ./hack/scripts-dev/docker-dns-srv/Dockerfile",
                "@@ -248,3 +400,3 @@ build-docker-dns-srv-test:",
                " \t  --dns 127.0.0.1 \\",
                "-\t  gcr.io/etcd-development/etcd-dns-srv-test:go$(_GO_VERSION) \\",
                "+\t  gcr.io/etcd-development/etcd-dns-srv-test:go$(GO_VERSION) \\",
                " \t  /bin/bash -c \"/etc/init.d/bind9 start && cat /dev/null >/etc/hosts && dig +noall +answer SRV _etcd-client-ssl._tcp.etcd.local && dig +noall +answer SRV _etcd-server-ssl._tcp.etcd.local && dig +noall +answer m1.etcd.local m2.etcd.local m3.etcd.local\"",
                "@@ -252,11 +404,13 @@ build-docker-dns-srv-test:",
                " push-docker-dns-srv-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\tgcloud docker -- push gcr.io/etcd-development/etcd-dns-srv-test:go$(_GO_VERSION)",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tgcloud docker -- push gcr.io/etcd-development/etcd-dns-srv-test:go$(GO_VERSION)",
                " pull-docker-dns-srv-test:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "-\tdocker pull gcr.io/etcd-development/etcd-dns-srv-test:go$(_GO_VERSION)",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tdocker pull gcr.io/etcd-development/etcd-dns-srv-test:go$(GO_VERSION)",
                " docker-dns-srv-test-certs-run:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                " \tdocker run \\",
                "@@ -265,6 +419,6 @@ docker-dns-srv-test-certs-run:",
                " \t  --dns 127.0.0.1 \\",
                "-\t  --volume=/tmp:/tmp \\",
                "-\t  --volume=`pwd`/bin:/etcd \\",
                "-\t  --volume=`pwd`/hack/scripts-dev/docker-dns-srv/certs:/certs \\",
                "-\t  gcr.io/etcd-development/etcd-dns-srv-test:go$(_GO_VERSION) \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns-srv/certs,destination=/certs \\",
                "+\t  gcr.io/etcd-development/etcd-dns-srv-test:go$(GO_VERSION) \\",
                " \t  /bin/bash -c \"cd /etcd && /certs/run.sh && rm -rf m*.etcd\"",
                "@@ -272,3 +426,5 @@ docker-dns-srv-test-certs-run:",
                " docker-dns-srv-test-certs-gateway-run:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                " \tdocker run \\",
                "@@ -277,6 +433,6 @@ docker-dns-srv-test-certs-gateway-run:",
                " \t  --dns 127.0.0.1 \\",
                "-\t  --volume=/tmp:/tmp \\",
                "-\t  --volume=`pwd`/bin:/etcd \\",
                "-\t  --volume=`pwd`/hack/scripts-dev/docker-dns-srv/certs-gateway:/certs-gateway \\",
                "-\t  gcr.io/etcd-development/etcd-dns-srv-test:go$(_GO_VERSION) \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns-srv/certs-gateway,destination=/certs-gateway \\",
                "+\t  gcr.io/etcd-development/etcd-dns-srv-test:go$(GO_VERSION) \\",
                " \t  /bin/bash -c \"cd /etcd && /certs-gateway/run.sh && rm -rf m*.etcd\"",
                "@@ -284,3 +440,5 @@ docker-dns-srv-test-certs-gateway-run:",
                " docker-dns-srv-test-certs-wildcard-run:",
                "-\t$(info GO_VERSION: $(_GO_VERSION))",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                " \tdocker run \\",
                "@@ -289,6 +447,53 @@ docker-dns-srv-test-certs-wildcard-run:",
                " \t  --dns 127.0.0.1 \\",
                "-\t  --volume=/tmp:/tmp \\",
                "-\t  --volume=`pwd`/bin:/etcd \\",
                "-\t  --volume=`pwd`/hack/scripts-dev/docker-dns-srv/certs-wildcard:/certs-wildcard \\",
                "-\t  gcr.io/etcd-development/etcd-dns-srv-test:go$(_GO_VERSION) \\",
                "-\t  /bin/bash -c \"cd /etcd && /certs-wildcard/run.sh && rm -rf m*.etcd\"",
                "\\ No newline at end of file",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns-srv/certs-wildcard,destination=/certs-wildcard \\",
                "+\t  gcr.io/etcd-development/etcd-dns-srv-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"cd /etcd && /certs-wildcard/run.sh && rm -rf m*.etcd\"",
                "+",
                "+",
                "+",
                "+# Example:",
                "+#   make build-etcd-test-proxy -f ./hack/scripts-dev/Makefile",
                "+",
                "+build-etcd-test-proxy:",
                "+\tgo build -v -o ./bin/etcd-test-proxy ./tools/etcd-test-proxy",
                "+",
                "+",
                "+",
                "+# Example:",
                "+#   make build-docker-functional-tester -f ./hack/scripts-dev/Makefile",
                "+#   make push-docker-functional-tester -f ./hack/scripts-dev/Makefile",
                "+#   make pull-docker-functional-tester -f ./hack/scripts-dev/Makefile",
                "+",
                "+build-docker-functional-tester:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info ETCD_VERSION: $(ETCD_VERSION))",
                "+\t@sed -i.bak 's|REPLACE_ME_GO_VERSION|$(GO_VERSION)|g' ./Dockerfile-functional-tester",
                "+\tdocker build \\",
                "+\t  --tag gcr.io/etcd-development/etcd-functional-tester:go$(GO_VERSION) \\",
                "+\t  --file ./Dockerfile-functional-tester \\",
                "+\t  .",
                "+\t@mv ./Dockerfile-functional-tester.bak ./Dockerfile-functional-tester",
                "+",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  gcr.io/etcd-development/etcd-functional-tester:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"/etcd --version && \\",
                "+\t   /etcd-failpoints --version && \\",
                "+\t   ETCDCTL_API=3 /etcdctl version && \\",
                "+\t   /etcd-agent -help || true && \\",
                "+\t   /etcd-tester -help || true && \\",
                "+\t   /etcd-runner --help || true && \\",
                "+\t   /benchmark --help || true && \\",
                "+\t   /etcd-test-proxy -help || true\"",
                "+",
                "+push-docker-functional-tester:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info ETCD_VERSION: $(ETCD_VERSION))",
                "+\tgcloud docker -- push gcr.io/etcd-development/etcd-functional-tester:go$(GO_VERSION)",
                "+",
                "+pull-docker-functional-tester:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info ETCD_VERSION: $(ETCD_VERSION))",
                "+\tdocker pull gcr.io/etcd-development/etcd-functional-tester:go$(GO_VERSION)",
                "diff --git a/hack/scripts-dev/docker-dns-srv/Dockerfile b/hack/scripts-dev/docker-dns-srv/Dockerfile",
                "index 07e907214..087943e1f 100644",
                "--- a/hack/scripts-dev/docker-dns-srv/Dockerfile",
                "+++ b/hack/scripts-dev/docker-dns-srv/Dockerfile",
                "@@ -1,2 +1,2 @@",
                "-FROM ubuntu:16.10",
                "+FROM ubuntu:17.10",
                "diff --git a/hack/scripts-dev/docker-dns/Dockerfile b/hack/scripts-dev/docker-dns/Dockerfile",
                "index 07e907214..087943e1f 100644",
                "--- a/hack/scripts-dev/docker-dns/Dockerfile",
                "+++ b/hack/scripts-dev/docker-dns/Dockerfile",
                "@@ -1,2 +1,2 @@",
                "-FROM ubuntu:16.10",
                "+FROM ubuntu:17.10",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-auth/Procfile b/hack/scripts-dev/docker-dns/certs-common-name-auth/Procfile",
                "new file mode 100644",
                "index 000000000..798d8c441",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-auth/Procfile",
                "@@ -0,0 +1,6 @@",
                "+# Use goreman to run `go get github.com/mattn/goreman`",
                "+etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls https://127.0.0.1:2379 --advertise-client-urls https://m1.etcd.local:2379 --listen-peer-urls https://127.0.0.1:2380 --initial-advertise-peer-urls=https://m1.etcd.local:2380 --initial-cluster-token tkn --initial-cluster=m1=https://m1.etcd.local:2380,m2=https://m2.etcd.local:22380,m3=https://m3.etcd.local:32380 --initial-cluster-state new --peer-cert-file=/certs-common-name-auth/server.crt --peer-key-file=/certs-common-name-auth/server.key.insecure --peer-trusted-ca-file=/certs-common-name-auth/ca.crt --peer-client-cert-auth --peer-cert-allowed-cn test-common-name --cert-file=/certs-common-name-auth/server.crt --key-file=/certs-common-name-auth/server.key.insecure --trusted-ca-file=/certs-common-name-auth/ca.crt --client-cert-auth",
                "+",
                "+etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls https://127.0.0.1:22379 --advertise-client-urls https://m2.etcd.local:22379 --listen-peer-urls https://127.0.0.1:22380 --initial-advertise-peer-urls=https://m2.etcd.local:22380 --initial-cluster-token tkn --initial-cluster=m1=https://m1.etcd.local:2380,m2=https://m2.etcd.local:22380,m3=https://m3.etcd.local:32380 --initial-cluster-state new --peer-cert-file=/certs-common-name-auth/server.crt --peer-key-file=/certs-common-name-auth/server.key.insecure --peer-trusted-ca-file=/certs-common-name-auth/ca.crt --peer-client-cert-auth --peer-cert-allowed-cn test-common-name --cert-file=/certs-common-name-auth/server.crt --key-file=/certs-common-name-auth/server.key.insecure --trusted-ca-file=/certs-common-name-auth/ca.crt --client-cert-auth",
                "+",
                "+etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls https://127.0.0.1:32379 --advertise-client-urls https://m3.etcd.local:32379 --listen-peer-urls https://127.0.0.1:32380 --initial-advertise-peer-urls=https://m3.etcd.local:32380 --initial-cluster-token tkn --initial-cluster=m1=https://m1.etcd.local:2380,m2=https://m2.etcd.local:22380,m3=https://m3.etcd.local:32380 --initial-cluster-state new --peer-cert-file=/certs-common-name-auth/server.crt --peer-key-file=/certs-common-name-auth/server.key.insecure --peer-trusted-ca-file=/certs-common-name-auth/ca.crt --peer-client-cert-auth --peer-cert-allowed-cn test-common-name --cert-file=/certs-common-name-auth/server.crt --key-file=/certs-common-name-auth/server.key.insecure --trusted-ca-file=/certs-common-name-auth/ca.crt --client-cert-auth",
                "\\ No newline at end of file",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-auth/ca-csr.json b/hack/scripts-dev/docker-dns/certs-common-name-auth/ca-csr.json",
                "new file mode 100644",
                "index 000000000..ecafabaad",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-auth/ca-csr.json",
                "@@ -0,0 +1,19 @@",
                "+{",
                "+  \"key\": {",
                "+    \"algo\": \"rsa\",",
                "+    \"size\": 2048",
                "+  },",
                "+  \"names\": [",
                "+    {",
                "+      \"O\": \"etcd\",",
                "+      \"OU\": \"etcd Security\",",
                "+      \"L\": \"San Francisco\",",
                "+      \"ST\": \"California\",",
                "+      \"C\": \"USA\"",
                "+    }",
                "+  ],",
                "+  \"CN\": \"ca\",",
                "+  \"ca\": {",
                "+    \"expiry\": \"87600h\"",
                "+  }",
                "+}",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-auth/ca.crt b/hack/scripts-dev/docker-dns/certs-common-name-auth/ca.crt",
                "new file mode 100644",
                "index 000000000..00faeca22",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-auth/ca.crt",
                "@@ -0,0 +1,22 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIIDsTCCApmgAwIBAgIUdASu5zT1US/6LPyKmczbC3NgdY4wDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xNzExMTQwNjIzMDBaFw0yNzExMTIwNjIz",
                "+MDBaMG8xDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTELMAkGA1UEAxMCY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK",
                "+AoIBAQDBbE44RP/Tk9l7KShzxQAypatoqDJQL32hyw8plZIfni5XFIlG2GwyjNvX",
                "+wiP6u0YcsApZKc58ytqcHQqMyk68OTTxcM+HVWvKHMKOBPBYgXeeVnD+7Ixuinq/",
                "+X6RK3n2jEipFgE9FiAXDNICF3ZQz+HVNBSbzwCjBtIcYkinWHX+kgnQkFT1NnmuZ",
                "+uloz6Uh7/Ngn/XPNSsoMyLrh4TwDsx/fQEpVcrXMbxWux1xEHmfDzRKvE7VhSo39",
                "+/mcpKBOwTg4jwh9tDjxWX4Yat+/cX0cGxQ7JSrdy14ESV5AGBmesGHd2SoWhZK9l",
                "+tWm1Eq0JYWD+Cd5yNrODTUxWRNs9AgMBAAGjRTBDMA4GA1UdDwEB/wQEAwIBBjAS",
                "+BgNVHRMBAf8ECDAGAQH/AgECMB0GA1UdDgQWBBSZMjlLnc7Vv2mxRMebo5ezJ7gt",
                "+pzANBgkqhkiG9w0BAQsFAAOCAQEAA2d2nV4CXjp7xpTQrh8sHzSBDYUNr9DY5hej",
                "+52X6q8WV0N3QC7Utvv2Soz6Ol72/xoGajIJvqorsIBB5Ms3dgCzPMy3R01Eb3MzI",
                "+7KG/4AGVEiAKUBkNSD8PWD7bREnnv1g9tUftE7jWsgMaPIpi6KhzhyJsClT4UsKQ",
                "+6Lp+Be80S293LrlmUSdZ/v7FAvMzDGOLd2iTlTr1fXK6YJJEXpk3+HIi8nbUPvYQ",
                "+6O8iOtf5QoCm1yMLJQMFvNr51Z1EeF935HRj8U2MJP5jXPW4/UY2TAUBcWEhlNsK",
                "+6od+f1B8xGe/6KHvF0C8bg23kj8QphM/E7HCZiVgdm6FNf54AQ==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-auth/gencert.json b/hack/scripts-dev/docker-dns/certs-common-name-auth/gencert.json",
                "new file mode 100644",
                "index 000000000..09b67267b",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-auth/gencert.json",
                "@@ -0,0 +1,13 @@",
                "+{",
                "+  \"signing\": {",
                "+    \"default\": {",
                "+        \"usages\": [",
                "+          \"signing\",",
                "+          \"key encipherment\",",
                "+          \"server auth\",",
                "+          \"client auth\"",
                "+        ],",
                "+        \"expiry\": \"87600h\"",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-auth/gencerts.sh b/hack/scripts-dev/docker-dns/certs-common-name-auth/gencerts.sh",
                "new file mode 100755",
                "index 000000000..7fcfea569",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-auth/gencerts.sh",
                "@@ -0,0 +1,26 @@",
                "+#!/bin/bash",
                "+",
                "+if ! [[ \"$0\" =~ \"./gencerts.sh\" ]]; then",
                "+\techo \"must be run from 'fixtures'\"",
                "+\texit 255",
                "+fi",
                "+",
                "+if ! which cfssl; then",
                "+\techo \"cfssl is not installed\"",
                "+\texit 255",
                "+fi",
                "+",
                "+cfssl gencert --initca=true ./ca-csr.json | cfssljson --bare ./ca",
                "+mv ca.pem ca.crt",
                "+openssl x509 -in ca.crt -noout -text",
                "+",
                "+# generate wildcard certificates DNS: m1/m2/m3.etcd.local",
                "+cfssl gencert \\",
                "+    --ca ./ca.crt \\",
                "+    --ca-key ./ca-key.pem \\",
                "+    --config ./gencert.json \\",
                "+    ./server-ca-csr.json | cfssljson --bare ./server",
                "+mv server.pem server.crt",
                "+mv server-key.pem server.key.insecure",
                "+",
                "+rm -f *.csr *.pem *.stderr *.txt",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-auth/run.sh b/hack/scripts-dev/docker-dns/certs-common-name-auth/run.sh",
                "new file mode 100755",
                "index 000000000..d4aaaecf2",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-auth/run.sh",
                "@@ -0,0 +1,255 @@",
                "+#!/bin/sh",
                "+rm -rf /tmp/m1.data /tmp/m2.data /tmp/m3.data",
                "+",
                "+/etc/init.d/bind9 start",
                "+",
                "+# get rid of hosts so go lookup won't resolve 127.0.0.1 to localhost",
                "+cat /dev/null >/etc/hosts",
                "+",
                "+goreman -f /certs-common-name-auth/Procfile start &",
                "+",
                "+# TODO: remove random sleeps",
                "+sleep 7s",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379 \\",
                "+  endpoint health --cluster",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  put abc def",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  get abc",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 1. creating root role\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  role add root",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 2. granting readwrite 'foo' permission to role 'root'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  role grant-permission root readwrite foo",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 3. getting role 'root'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  role get root",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 4. creating user 'root'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --interactive=false \\",
                "+  user add root:123",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 5. granting role 'root' to user 'root'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  user grant-role root root",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 6. getting user 'root'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  user get root",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 7. enabling auth\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  auth enable",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 8. writing 'foo' with 'root:123'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=root:123 \\",
                "+  put foo bar",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 9. writing 'aaa' with 'root:123'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=root:123 \\",
                "+  put aaa bbb",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 10. writing 'foo' without 'root:123'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  put foo bar",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 11. reading 'foo' with 'root:123'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=root:123 \\",
                "+  get foo",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 12. reading 'aaa' with 'root:123'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=root:123 \\",
                "+  get aaa",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 13. creating a new user 'test-common-name:test-pass'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=root:123 \\",
                "+  --interactive=false \\",
                "+  user add test-common-name:test-pass",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 14. creating a role 'test-role'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=root:123 \\",
                "+  role add test-role",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 15. granting readwrite 'aaa' --prefix permission to role 'test-role'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=root:123 \\",
                "+  role grant-permission test-role readwrite aaa --prefix",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 16. getting role 'test-role'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=root:123 \\",
                "+  role get test-role",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 17. granting role 'test-role' to user 'test-common-name'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=root:123 \\",
                "+  user grant-role test-common-name test-role",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 18. writing 'aaa' with 'test-common-name:test-pass'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=test-common-name:test-pass \\",
                "+  put aaa bbb",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 19. writing 'bbb' with 'test-common-name:test-pass'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=test-common-name:test-pass \\",
                "+  put bbb bbb",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 20. reading 'aaa' with 'test-common-name:test-pass'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=test-common-name:test-pass \\",
                "+  get aaa",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 21. reading 'bbb' with 'test-common-name:test-pass'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  --user=test-common-name:test-pass \\",
                "+  get bbb",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 22. writing 'aaa' with CommonName 'test-common-name'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  put aaa ccc",
                "+",
                "+sleep 1s && printf \"\\n\"",
                "+echo \"Step 23. reading 'aaa' with CommonName 'test-common-name'\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-auth/ca.crt \\",
                "+  --cert=/certs-common-name-auth/server.crt \\",
                "+  --key=/certs-common-name-auth/server.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  get aaa",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-auth/server-ca-csr.json b/hack/scripts-dev/docker-dns/certs-common-name-auth/server-ca-csr.json",
                "new file mode 100644",
                "index 000000000..6a57789b1",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-auth/server-ca-csr.json",
                "@@ -0,0 +1,23 @@",
                "+{",
                "+  \"key\": {",
                "+    \"algo\": \"rsa\",",
                "+    \"size\": 2048",
                "+  },",
                "+  \"names\": [",
                "+    {",
                "+      \"O\": \"etcd\",",
                "+      \"OU\": \"etcd Security\",",
                "+      \"L\": \"San Francisco\",",
                "+      \"ST\": \"California\",",
                "+      \"C\": \"USA\"",
                "+    }",
                "+  ],",
                "+  \"CN\": \"test-common-name\",",
                "+  \"hosts\": [",
                "+    \"m1.etcd.local\",",
                "+    \"m2.etcd.local\",",
                "+    \"m3.etcd.local\",",
                "+    \"127.0.0.1\",",
                "+    \"localhost\"",
                "+  ]",
                "+}",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-auth/server.crt b/hack/scripts-dev/docker-dns/certs-common-name-auth/server.crt",
                "new file mode 100644",
                "index 000000000..b9719b2f0",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-auth/server.crt",
                "@@ -0,0 +1,25 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIIERDCCAyygAwIBAgIUO500NxhwBHJsodbGKbo5NsW9/p8wDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xNzExMTQwNjIzMDBaFw0yNzExMTIwNjIz",
                "+MDBaMH0xDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTEZMBcGA1UEAxMQdGVzdC1jb21tb24tbmFtZTCCASIwDQYJKoZIhvcN",
                "+AQEBBQADggEPADCCAQoCggEBAMRvVMj3+5jAhRng4izVm4zrvMBnHNMh2MOFVTp7",
                "+wdhEF2en7pFsKzWgczewil6v4d6QzJpgB9yQzPT2q0SOvetpbqP950y6MdPHAF9D",
                "+qZd0+wC+RLdSmK5oQKzgZER/vH3eSbTa1UdwaLBHlT6PiTzGm+gEYL43gr3kle+A",
                "+9c7aT9pkJWQFTCSdqwcQopyHEwgrfPHC8Bdn804soG4HtR9Gg/R4xtlu7ir6LTHn",
                "+vpPBScaMZDUQ5UNrEMh8TM8/sXG6oxqo86r5wpVQt6vscnTMrTTUqq+Mo/OJnDAf",
                "+plaqkWX5NfIJ9tmE2V06hq1/ptQkl714Wb+ske+aJ2Poc/UCAwEAAaOByTCBxjAO",
                "+BgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwG",
                "+A1UdEwEB/wQCMAAwHQYDVR0OBBYEFEG2hXyVTpxLXTse3fXe0U/g0F8kMB8GA1Ud",
                "+IwQYMBaAFJkyOUudztW/abFEx5ujl7MnuC2nMEcGA1UdEQRAMD6CDW0xLmV0Y2Qu",
                "+bG9jYWyCDW0yLmV0Y2QubG9jYWyCDW0zLmV0Y2QubG9jYWyCCWxvY2FsaG9zdIcE",
                "+fwAAATANBgkqhkiG9w0BAQsFAAOCAQEADtH0NZBrWfXTUvTa3WDsa/JPBhiPu/kH",
                "++gRxOD5UNeDX9+QAx/gxGHrCh4j51OUx55KylUe0qAPHHZ4vhgD2lCRBqFLYx69m",
                "+xRIzVnt5NCruriskxId1aFTZ5pln5KK5tTVkAp04MBHZOgv8giXdRWn+7TtMyJxj",
                "+wVGf8R7/bwJGPPJFrLNtN4EWwXv/a2/SEoZd8fkTxzw12TeJ8w1PnkH4Zer+nzNb",
                "+dH5f+OIBGGZ2fIWANX5g9JEJvvsxBBL8uoCrFE/YdnD0fLyhoplSOVEIvncQLHd8",
                "+3QoIVQ5GXnreMF9vuuEU5LlSsqd/Zv5mAQNrbEAfAL+QZQsnHY12qQ==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-auth/server.key.insecure b/hack/scripts-dev/docker-dns/certs-common-name-auth/server.key.insecure",
                "new file mode 100644",
                "index 000000000..07417b255",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-auth/server.key.insecure",
                "@@ -0,0 +1,27 @@",
                "+-----BEGIN RSA PRIVATE KEY-----",
                "+MIIEpAIBAAKCAQEAxG9UyPf7mMCFGeDiLNWbjOu8wGcc0yHYw4VVOnvB2EQXZ6fu",
                "+kWwrNaBzN7CKXq/h3pDMmmAH3JDM9ParRI6962luo/3nTLox08cAX0Opl3T7AL5E",
                "+t1KYrmhArOBkRH+8fd5JtNrVR3BosEeVPo+JPMab6ARgvjeCveSV74D1ztpP2mQl",
                "+ZAVMJJ2rBxCinIcTCCt88cLwF2fzTiygbge1H0aD9HjG2W7uKvotMee+k8FJxoxk",
                "+NRDlQ2sQyHxMzz+xcbqjGqjzqvnClVC3q+xydMytNNSqr4yj84mcMB+mVqqRZfk1",
                "+8gn22YTZXTqGrX+m1CSXvXhZv6yR75onY+hz9QIDAQABAoIBABiq+nS6X4gRNSXI",
                "+zd5ffMc3m152FHKXH4d+KPPNMsyb0Gyd9CGi+dIkMhPeQaIeaDjw6iDAynvyWyqw",
                "+B1X2rvbvKIvDiNZj03oK1YshDh0M/bBcNHjpEG9mfCi5jR3lBKCx14O0r2/nN95b",
                "+Puy6TbuqHU4HrrZ0diCuof2Prk6pd0EhQC+C3bZCcoWXOaRTqrMBTT6DdSMQrVKD",
                "+eGTXYqCzs/AlGKkOiErKtKWouNpkPpPiba1qp7YWXUasrXqPgPi4d97TmOShGIfc",
                "+zXNJT+e2rDX4OEVAJtOt6U2l9QG+PIhpH4P/ZYsvindm4VZBs+Vysrj4xkLgGBBP",
                "+ygOfBIECgYEA0IfP9Z9mzvCXiGrkrx2tN/k31cX674P/KwxPgSWM/AdXenYYzsmj",
                "+rVcoFx2eCFnBFdPz4BAqEfH70gtsG7OoTmoJSwN6wurIdGcFQwItrghgt9Qp46Dq",
                "+AIT9RXSpcB9AjM6p2reCjWcNeBVMrrHU3eaQitCxZbzuxvMMhMs/zzECgYEA8Sak",
                "+UhXFtNjxBW6EMNmTpjhShIZmxtPNzTJ5DtmARr8F+SMELp3JGJj/9Bm4TsvqJmGs",
                "+j9g/MVvSTjJlOuYPGJ5DBl3egZ5ZlRJx3I2qA4lFFCb71OJzuoR8YdHRlHnhJOu9",
                "+2Jyrki1wrAefby8Fe/+5vswxq2u+Qurjya716AUCgYB+E06ZGzmmLfH/6Vi/wzqC",
                "+F+w5FAzGGNECbtv2ogReL/YktRgElgaee45ig2aTd+h0UQQmWL+Gv/3XHU7MZM+C",
                "+MTvTHZRwGlD9h3e37q49hRUsr1pwJE6157HU91al0k9NknlBIigNY9vR2VbWW+/u",
                "+BUMomkpWz2ax5CqScuvuUQKBgQCE+zYqPe9kpy1iPWuQNKuDQhPfGO6cPjiDK44u",
                "+biqa2MRGetTXkBNRCS48QeKtMS3SNJKgUDOo2GXE0W2ZaTxx6vQzEpidCeGEn0NC",
                "+yKw0fwIk9spwvt/qvxyIJNhZ9Ev/vDBYvyyt03kKpLl66ocvtfmMCbZqPWQSKs2q",
                "+bl0UsQKBgQDDrsPnuVQiv6l0J9VrZc0f5DYZIJmQij1Rcg/fL1Dv2mEpADrH2hkY",
                "+HI27Q15dfgvccAGbGXbZt3xi7TCLDDm+Kl9V9bR2e2EhqA84tFryiBZ5XSDRAWPU",
                "+UIjejblTgtzrTqUd75XUkNoKvJIGrLApmQiBJRQbcbwtmt2pWbziyQ==",
                "+-----END RSA PRIVATE KEY-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/Procfile b/hack/scripts-dev/docker-dns/certs-common-name-multi/Procfile",
                "new file mode 100644",
                "index 000000000..faa838af5",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/Procfile",
                "@@ -0,0 +1,6 @@",
                "+# Use goreman to run `go get github.com/mattn/goreman`",
                "+etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls https://127.0.0.1:2379 --advertise-client-urls https://m1.etcd.local:2379 --listen-peer-urls https://127.0.0.1:2380 --initial-advertise-peer-urls=https://m1.etcd.local:2380 --initial-cluster-token tkn --initial-cluster=m1=https://m1.etcd.local:2380,m2=https://m2.etcd.local:22380,m3=https://m3.etcd.local:32380 --initial-cluster-state new --peer-cert-file=/certs-common-name-multi/server-1.crt --peer-key-file=/certs-common-name-multi/server-1.key.insecure --peer-trusted-ca-file=/certs-common-name-multi/ca.crt --peer-client-cert-auth --peer-cert-allowed-cn etcd.local --cert-file=/certs-common-name-multi/server-1.crt --key-file=/certs-common-name-multi/server-1.key.insecure --trusted-ca-file=/certs-common-name-multi/ca.crt --client-cert-auth",
                "+",
                "+etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls https://127.0.0.1:22379 --advertise-client-urls https://m2.etcd.local:22379 --listen-peer-urls https://127.0.0.1:22380 --initial-advertise-peer-urls=https://m2.etcd.local:22380 --initial-cluster-token tkn --initial-cluster=m1=https://m1.etcd.local:2380,m2=https://m2.etcd.local:22380,m3=https://m3.etcd.local:32380 --initial-cluster-state new --peer-cert-file=/certs-common-name-multi/server-2.crt --peer-key-file=/certs-common-name-multi/server-2.key.insecure --peer-trusted-ca-file=/certs-common-name-multi/ca.crt --peer-client-cert-auth --peer-cert-allowed-cn etcd.local --cert-file=/certs-common-name-multi/server-2.crt --key-file=/certs-common-name-multi/server-2.key.insecure --trusted-ca-file=/certs-common-name-multi/ca.crt --client-cert-auth",
                "+",
                "+etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls https://127.0.0.1:32379 --advertise-client-urls https://m3.etcd.local:32379 --listen-peer-urls https://127.0.0.1:32380 --initial-advertise-peer-urls=https://m3.etcd.local:32380 --initial-cluster-token tkn --initial-cluster=m1=https://m1.etcd.local:2380,m2=https://m2.etcd.local:22380,m3=https://m3.etcd.local:32380 --initial-cluster-state new --peer-cert-file=/certs-common-name-multi/server-3.crt --peer-key-file=/certs-common-name-multi/server-3.key.insecure --peer-trusted-ca-file=/certs-common-name-multi/ca.crt --peer-client-cert-auth --peer-cert-allowed-cn etcd.local --cert-file=/certs-common-name-multi/server-3.crt --key-file=/certs-common-name-multi/server-3.key.insecure --trusted-ca-file=/certs-common-name-multi/ca.crt --client-cert-auth",
                "\\ No newline at end of file",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/ca-csr.json b/hack/scripts-dev/docker-dns/certs-common-name-multi/ca-csr.json",
                "new file mode 100644",
                "index 000000000..ecafabaad",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/ca-csr.json",
                "@@ -0,0 +1,19 @@",
                "+{",
                "+  \"key\": {",
                "+    \"algo\": \"rsa\",",
                "+    \"size\": 2048",
                "+  },",
                "+  \"names\": [",
                "+    {",
                "+      \"O\": \"etcd\",",
                "+      \"OU\": \"etcd Security\",",
                "+      \"L\": \"San Francisco\",",
                "+      \"ST\": \"California\",",
                "+      \"C\": \"USA\"",
                "+    }",
                "+  ],",
                "+  \"CN\": \"ca\",",
                "+  \"ca\": {",
                "+    \"expiry\": \"87600h\"",
                "+  }",
                "+}",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/ca.crt b/hack/scripts-dev/docker-dns/certs-common-name-multi/ca.crt",
                "new file mode 100644",
                "index 000000000..2e9b32003",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/ca.crt",
                "@@ -0,0 +1,23 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIID0jCCArqgAwIBAgIUd3UZnVmZFo8x9MWWhUrYQvZHLrQwDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xODAxMjAwNjAwMDBaFw0yODAxMTgwNjAw",
                "+MDBaMG8xDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTELMAkGA1UEAxMCY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK",
                "+AoIBAQCqgFTgSFl+ugXkZuiN5PXp84Zv05crwI5x2ePMnc2/3u1s7cQBvXQGCJcq",
                "+OwWD7tjcy4K2PDC0DLRa4Mkd8JpwADmf6ojbMH/3a1pXY2B3BJQwmNPFnxRJbDZL",
                "+Iti6syWKwyfLVb1KFCU08G+ZrWmGIXPWDiE+rTn/ArD/6WbQI1LYBFJm25NLpttM",
                "+mA3HnWoErNGY4Z/AR54ROdQSPL7RSUZBa0Kn1riXeOJ40/05qosR2O/hBSAGkD+m",
                "+5Rj+A6oek44zZqVzCSEncLsRJAKqgZIqsBrErAho72irEgTwv4OM0MyOCsY/9erf",
                "+hNYRSoQeX+zUvEvgToalfWGt6kT3AgMBAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjAS",
                "+BgNVHRMBAf8ECDAGAQH/AgECMB0GA1UdDgQWBBRDePNja5CK4zUfO5x1vzGvdmUF",
                "+CzAfBgNVHSMEGDAWgBRDePNja5CK4zUfO5x1vzGvdmUFCzANBgkqhkiG9w0BAQsF",
                "+AAOCAQEAZu0a3B7Ef/z5Ct99xgzPy4z9RwglqPuxk446hBWR5TYT9fzm+voHCAwb",
                "+MJEaQK3hvAz47qAjyR9/b+nBw4LRTMxg0WqB+UEEVwBGJxtfcOHx4mJHc3lgVJnR",
                "+LiEWtIND7lu5Ql0eOjSehQzkJZhUb4SnXD7yk64zukQQv9zlZYZCHPDAQ9LzR2vI",
                "+ii4yhwdWl7iiZ0lOyR4xqPB3Cx/2kjtuRiSkbpHGwWBJLng2ZqgO4K+gL3naNgqN",
                "+TRtdOSK3j/E5WtAeFUUT68Gjsg7yXxqyjUFq+piunFfQHhPB+6sPPy56OtIogOk4",
                "+dFCfFAygYNrFKz366KY+7CbpB+4WKA==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/gencert.json b/hack/scripts-dev/docker-dns/certs-common-name-multi/gencert.json",
                "new file mode 100644",
                "index 000000000..09b67267b",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/gencert.json",
                "@@ -0,0 +1,13 @@",
                "+{",
                "+  \"signing\": {",
                "+    \"default\": {",
                "+        \"usages\": [",
                "+          \"signing\",",
                "+          \"key encipherment\",",
                "+          \"server auth\",",
                "+          \"client auth\"",
                "+        ],",
                "+        \"expiry\": \"87600h\"",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/gencerts.sh b/hack/scripts-dev/docker-dns/certs-common-name-multi/gencerts.sh",
                "new file mode 100755",
                "index 000000000..0ddc31e58",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/gencerts.sh",
                "@@ -0,0 +1,42 @@",
                "+#!/bin/bash",
                "+",
                "+if ! [[ \"$0\" =~ \"./gencerts.sh\" ]]; then",
                "+\techo \"must be run from 'fixtures'\"",
                "+\texit 255",
                "+fi",
                "+",
                "+if ! which cfssl; then",
                "+\techo \"cfssl is not installed\"",
                "+\texit 255",
                "+fi",
                "+",
                "+cfssl gencert --initca=true ./ca-csr.json | cfssljson --bare ./ca",
                "+mv ca.pem ca.crt",
                "+openssl x509 -in ca.crt -noout -text",
                "+",
                "+# generate wildcard certificates DNS: m1/m2/m3.etcd.local",
                "+cfssl gencert \\",
                "+    --ca ./ca.crt \\",
                "+    --ca-key ./ca-key.pem \\",
                "+    --config ./gencert.json \\",
                "+    ./server-ca-csr-1.json | cfssljson --bare ./server-1",
                "+mv server-1.pem server-1.crt",
                "+mv server-1-key.pem server-1.key.insecure",
                "+",
                "+cfssl gencert \\",
                "+    --ca ./ca.crt \\",
                "+    --ca-key ./ca-key.pem \\",
                "+    --config ./gencert.json \\",
                "+    ./server-ca-csr-2.json | cfssljson --bare ./server-2",
                "+mv server-2.pem server-2.crt",
                "+mv server-2-key.pem server-2.key.insecure",
                "+",
                "+cfssl gencert \\",
                "+    --ca ./ca.crt \\",
                "+    --ca-key ./ca-key.pem \\",
                "+    --config ./gencert.json \\",
                "+    ./server-ca-csr-3.json | cfssljson --bare ./server-3",
                "+mv server-3.pem server-3.crt",
                "+mv server-3-key.pem server-3.key.insecure",
                "+",
                "+rm -f *.csr *.pem *.stderr *.txt",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/run.sh b/hack/scripts-dev/docker-dns/certs-common-name-multi/run.sh",
                "new file mode 100755",
                "index 000000000..2ccb6b678",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/run.sh",
                "@@ -0,0 +1,33 @@",
                "+#!/bin/sh",
                "+rm -rf /tmp/m1.data /tmp/m2.data /tmp/m3.data",
                "+",
                "+/etc/init.d/bind9 start",
                "+",
                "+# get rid of hosts so go lookup won't resolve 127.0.0.1 to localhost",
                "+cat /dev/null >/etc/hosts",
                "+",
                "+goreman -f /certs-common-name-multi/Procfile start &",
                "+",
                "+# TODO: remove random sleeps",
                "+sleep 7s",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-multi/ca.crt \\",
                "+  --cert=/certs-common-name-multi/server-1.crt \\",
                "+  --key=/certs-common-name-multi/server-1.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379 \\",
                "+  endpoint health --cluster",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-multi/ca.crt \\",
                "+  --cert=/certs-common-name-multi/server-2.crt \\",
                "+  --key=/certs-common-name-multi/server-2.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  put abc def",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-common-name-multi/ca.crt \\",
                "+  --cert=/certs-common-name-multi/server-3.crt \\",
                "+  --key=/certs-common-name-multi/server-3.key.insecure \\",
                "+  --endpoints=https://m1.etcd.local:2379,https://m2.etcd.local:22379,https://m3.etcd.local:32379 \\",
                "+  get abc",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/server-1.crt b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-1.crt",
                "new file mode 100644",
                "index 000000000..f10b27277",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-1.crt",
                "@@ -0,0 +1,25 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIIEIDCCAwigAwIBAgIUaDLXBmJpHrElwENdnVk9hvAvlKcwDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xODAxMjAwNjAwMDBaFw0yODAxMTgwNjAw",
                "+MDBaMHcxDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTETMBEGA1UEAxMKZXRjZC5sb2NhbDCCASIwDQYJKoZIhvcNAQEBBQAD",
                "+ggEPADCCAQoCggEBAOb5CdovL9QCdgsxnCBikTbJko6r5mrF+eA47gDLcVbWrRW5",
                "+d8eZYV1Fyn5qe80O6LB6LKPrRftxyAGABKqIBCHR57E97UsICC4lGycBWaav6cJ+",
                "+7Spkpf8cSSDjjgb4KC6VVPf9MCsHxBYSTfme8JEFE+6KjlG8Mqt2yv/5aIyRYITN",
                "+WzXvV7wxS9aOgDdXLbojW9FJQCuzttOPfvINTyhtvUvCM8S61La5ymCdAdPpx1U9",
                "+m5KC23k6ZbkAC8/jcOV+68adTUuMWLefPf9Ww3qMT8382k86gJgQjZuJDGUl3Xi5",
                "+GXmO0GfrMh+v91yiaiqjsJCDp3uVcUSeH7qSkb0CAwEAAaOBqzCBqDAOBgNVHQ8B",
                "+Af8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB",
                "+/wQCMAAwHQYDVR0OBBYEFEwLLCuIHilzynJ7DlTrikyhy2TAMB8GA1UdIwQYMBaA",
                "+FEN482NrkIrjNR87nHW/Ma92ZQULMCkGA1UdEQQiMCCCDW0xLmV0Y2QubG9jYWyC",
                "+CWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQsFAAOCAQEAkERnrIIvkZHWsyih",
                "+mFNf/JmFHC+0/UAG9Ti9msRlr9j1fh+vBIid3FAIShX0zFXf+AtN/+Bz5SVvQHUT",
                "+tm71AK/vER1Ue059SIty+Uz5mNAjwtXy0WaUgSuF4uju7MkYD5yUnSGv1iBfm88a",
                "+q+q1Vd5m6PkOCfuyNQQm5RKUiJiO4OS+2F9/JOpyr0qqdQthOWr266CqXuvVhd+Z",
                "+oZZn5TLq5GHCaTxfngSqS3TXl55QEGl65SUgYdGqpIfaQt3QKq2dqVg/syLPkTJt",
                "+GNJVLxJuUIu0PLrfuWynUm+1mOOfwXd8NZVZITUxC7Tl5ecFbTaOzU/4a7Cyssny",
                "+Wr3dUg==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/server-1.key.insecure b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-1.key.insecure",
                "new file mode 100644",
                "index 000000000..61f2da4df",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-1.key.insecure",
                "@@ -0,0 +1,27 @@",
                "+-----BEGIN RSA PRIVATE KEY-----",
                "+MIIEpAIBAAKCAQEA5vkJ2i8v1AJ2CzGcIGKRNsmSjqvmasX54DjuAMtxVtatFbl3",
                "+x5lhXUXKfmp7zQ7osHoso+tF+3HIAYAEqogEIdHnsT3tSwgILiUbJwFZpq/pwn7t",
                "+KmSl/xxJIOOOBvgoLpVU9/0wKwfEFhJN+Z7wkQUT7oqOUbwyq3bK//lojJFghM1b",
                "+Ne9XvDFL1o6AN1ctuiNb0UlAK7O2049+8g1PKG29S8IzxLrUtrnKYJ0B0+nHVT2b",
                "+koLbeTpluQALz+Nw5X7rxp1NS4xYt589/1bDeoxPzfzaTzqAmBCNm4kMZSXdeLkZ",
                "+eY7QZ+syH6/3XKJqKqOwkIOne5VxRJ4fupKRvQIDAQABAoIBAQCYQsXm6kJqTbEJ",
                "+kgutIa0+48TUfqen7Zja4kyrg3HU4DI75wb6MreHqFFj4sh4FoL4i6HP8XIx3wEN",
                "+VBo/XOj0bo6BPiSm2MWjvdxXa0Fxa/f6uneYAb+YHEps/vWKzJ6YjuLzlBnj0/vE",
                "+3Q5AJzHJOAK6tuY5JYp1lBsggYcVWiQSW6wGQRReU/B/GdFgglL1chqL33Dt11Uv",
                "+Y6+oJz/PyqzPLPHcPbhqyQRMOZXnhx+8/+ooq5IojqOHfpa9JQURcHY7isBnpI/G",
                "+ZAa8tZctgTqtL4hB1rxDhdq1fS2YC12lxkBZse4jszcm0tYzy2gWmNTH480uo/0J",
                "+GOxX7eP1AoGBAO7O+aLhQWrspWQ//8YFbPWNhyscQub+t6WYjc0wn9j0dz8vkhMw",
                "+rh5O8uMcZBMDQdq185BcB3aHInw9COWZEcWNIen4ZyNJa5VCN4FY0a2GtFSSGG3f",
                "+ilKmQ7cjB950q2jl1AR3t2H7yah+i1ZChzPx+GEe+51LcJZX8mMjGvwjAoGBAPeZ",
                "+qJ2W4O2dOyupAfnKpZZclrEBqlyg7Xj85u20eBMUqtaIEcI/u2kaotQPeuaekUH0",
                "+b1ybr3sJBTp3qzHUaNV3iMfgrnbWEOkIV2TCReWQb1Fk93o3gilMIkhGLIhxwWpM",
                "+UpQy3JTjGG/Y6gIOs7YnOBGVMA0o+RvouwooU6ifAoGAH6D6H0CGUYsWPLjdP3To",
                "+gX1FMciEc+O4nw4dede+1BVM1emPB0ujRBBgywOvnXUI+9atc6k8s84iGyJaU056",
                "+tBeFLl/gCSRoQ1SJ1W/WFY2JxMm0wpig0WGEBnV1TVlWeoY2FoFkoG2gv9hCzCHz",
                "+lkWuB+76lFKxjrgHOmoj4NECgYB+COmbzkGQsoh8IPuwe0bu0xKh54cgv4oiHBow",
                "+xbyZedu8eGcRyf9L8RMRfw/AdNbcC+Dj8xvQNTdEG8Y5BzaV8tLda7FjLHRPKr/R",
                "+ulJ6GJuRgyO2Qqsu+mI5B/+DNOSPh2pBpeJCp5a42GHFylYQUsZnrNlY2ZJ0cnND",
                "+KGPtYQKBgQDL30+BB95FtRUvFoJIWwASCp7TIqW7N7RGWgqmsXU0EZ0Mya4dquqG",
                "+rJ1QuXQIJ+xV060ehwJR+iDUAY2xUg3/LCoDD0rwBzSdh+NEKjOmRNFRtn7WT03Q",
                "+264E80r6VTRSN4sWQwAAbd1VF1uGO5tkzZdJGWGhQhvTUZ498dE+9Q==",
                "+-----END RSA PRIVATE KEY-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/server-2.crt b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-2.crt",
                "new file mode 100644",
                "index 000000000..e319fade4",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-2.crt",
                "@@ -0,0 +1,25 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIIEIDCCAwigAwIBAgIUHXDUS+Vry/Tquc6S6OoaeuGozrEwDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xODAxMjAwNjAwMDBaFw0yODAxMTgwNjAw",
                "+MDBaMHcxDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTETMBEGA1UEAxMKZXRjZC5sb2NhbDCCASIwDQYJKoZIhvcNAQEBBQAD",
                "+ggEPADCCAQoCggEBAOO+FsO+6pwpv+5K+VQTYQb0lT0BjnM7Y2qSZIiTGCDp/M0P",
                "+yHSed4oTzxBeA9hEytczH/oddAUuSZNgag5sGFVgjFNdiZli4wQqJaMQRodivuUl",
                "+ZscqnWwtP3GYVAfg+t/4YdGB+dQRDQvHBl9BRYmUh2ixOA98OXKfNMr+u+3sh5Gy",
                "+dwx5ZEBRvgBcRrgCaIMsvVeIzHQBMHrNySAD1bGgm3xGdLeVPhAp24yUKZ5IbN6/",
                "++5hyCRARtGwLH/1Q/h10Sr5jxQi00eEXH+CNOvcerH6b2II/BxHIcqKd0u36pUfG",
                "+0KsY+ia0fvYi510V6Q0FAn45luEjHEk5ITN/LnMCAwEAAaOBqzCBqDAOBgNVHQ8B",
                "+Af8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB",
                "+/wQCMAAwHQYDVR0OBBYEFE69SZun6mXZe6cd3Cb2HWrK281MMB8GA1UdIwQYMBaA",
                "+FEN482NrkIrjNR87nHW/Ma92ZQULMCkGA1UdEQQiMCCCDW0yLmV0Y2QubG9jYWyC",
                "+CWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQsFAAOCAQEAI5nHHULV7eUJMsvv",
                "+zk1shv826kOwXbMX10iRaf49/r7TWBq0pbPapvf5VXRsZ5wlDrDzjaNstpsaow/j",
                "+fhZ1zpU0h1bdifxE+omFSWZjpVM8kQD/yzT34VdyA+P2HuxG8ZTa8r7wTGrooD60",
                "+TjBBM5gFV4nGVe+KbApQ26KWr+P8biKaWe6MM/jAv6TNeXiWReHqyM5v404PZQXK",
                "+cIN+fBb8bQfuaKaN1dkOUI3uSHmVmeYc5OGNJ2QKL9Uzm1VGbbM+1BOLhmF53QSm",
                "+5m2B64lPKy+vpTcRLN7oW1FHZOKts+1OEaLMCyjWFKFbdcrmJI+AP2IB+V6ODECn",
                "+RwJDtA==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/server-2.key.insecure b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-2.key.insecure",
                "new file mode 100644",
                "index 000000000..57c3e78cb",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-2.key.insecure",
                "@@ -0,0 +1,27 @@",
                "+-----BEGIN RSA PRIVATE KEY-----",
                "+MIIEpQIBAAKCAQEA474Ww77qnCm/7kr5VBNhBvSVPQGOcztjapJkiJMYIOn8zQ/I",
                "+dJ53ihPPEF4D2ETK1zMf+h10BS5Jk2BqDmwYVWCMU12JmWLjBColoxBGh2K+5SVm",
                "+xyqdbC0/cZhUB+D63/hh0YH51BENC8cGX0FFiZSHaLE4D3w5cp80yv677eyHkbJ3",
                "+DHlkQFG+AFxGuAJogyy9V4jMdAEwes3JIAPVsaCbfEZ0t5U+ECnbjJQpnkhs3r/7",
                "+mHIJEBG0bAsf/VD+HXRKvmPFCLTR4Rcf4I069x6sfpvYgj8HEchyop3S7fqlR8bQ",
                "+qxj6JrR+9iLnXRXpDQUCfjmW4SMcSTkhM38ucwIDAQABAoIBAQCHYF6N2zYAwDyL",
                "+/Ns65A4gIVF5Iyy3SM0u83h5St7j6dNRXhltYSlz1ZSXiRtF+paM16IhflKSJdKs",
                "+nXpNumm4jpy7jXWWzRZfSmJ3DNyv673H3rS6nZVYUYlOEBubV1wpuK8E5/tG2R/l",
                "+KVibVORuBPF9BSNq6RAJF6Q9KrExmvH4MmG/3Y+iYbZgn0OK1WHxzbeMzdI8OO4z",
                "+eg4gTKuMoRFt5B4rZmC5QiXGHdnUXRWfy+yPLTH3hfTek4JT98akFNS01Q4UAi9p",
                "+5cC3TOqDNiZdAkN83UKhW9TNAc/vJlq6d5oXW5R+yPt+d8yMvEch4KfpYo33j0oz",
                "+qB40pdJRAoGBAP8ZXnWXxhzLhZ4o+aKefnsUUJjaiVhhSRH/kGAAg65lc4IEnt+N",
                "+nzyNIwz/2vPv2Gq2BpStrTsTNKVSZCKgZhoBTavP60FaszDSM0bKHTWHW7zaQwc0",
                "+bQG6YvvCiP0iwEzXw7S4BhdAl+x/5C30dUZgKMSDFzuBI187h6dQQNZpAoGBAOSL",
                "+/MBuRYBgrHIL9V1v9JGDBeawGc3j2D5c56TeDtGGv8WGeCuE/y9tn+LcKQ+bCGyi",
                "+qkW+hobro/iaXODwUZqSKaAVbxC7uBLBTRB716weMzrnD8zSTOiMWg/gh+FOnr/4",
                "+ZfcBco2Pmm5qQ3ZKwVk2jsfLhz6ZKwMrjSaO1Zp7AoGBAJZsajPjRHI0XN0vgkyv",
                "+Mxv2lbQcoYKZE1JmpcbGZt/OePdBLEHcq/ozq2h98qmHU9FQ9r5zT0QXhiK6W8vD",
                "+U5GgFSHsH+hQyHtQZ+YlRmYLJEBPX9j+xAyR0M5uHwNNm6F0VbXaEdViRHOz0mR6",
                "+0zClgUSnnGp9MtN0MgCqJSGJAoGAJYba3Jn+rYKyLhPKmSoN5Wq3KFbYFdeIpUzJ",
                "++GdB1aOjj4Jx7utqn1YHv89YqqhRLM1U2hjbrAG7LdHi2Eh9jbzcOt3qG7xHEEVP",
                "+Kxq6ohdfYBean44UdMa+7wZ2KUeoh2r5CyLgtV/UArdOFnlV4Bk2PpYrwdqSlnWr",
                "+Op6PcksCgYEA6HmIHLRTGyOUzS82BEcs5an2mzhQ8XCNdYS6sDaYSiDu2qlPukyZ",
                "+jons6P4qpOxlP9Cr6DW7px2fUZrEuPUV8fRJOc+a5AtZ5TmV6N1uH/G1rKmmAMCc",
                "+jGAmTJW87QguauTpuUto5u6IhyO2CRsYEy8K1A/1HUQKl721faZBIMA=",
                "+-----END RSA PRIVATE KEY-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/server-3.crt b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-3.crt",
                "new file mode 100644",
                "index 000000000..294de5332",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-3.crt",
                "@@ -0,0 +1,25 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIIEIDCCAwigAwIBAgIURfpNMXGb1/oZVwEWyc0Ofn7IItQwDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xODAxMjAwNjAwMDBaFw0yODAxMTgwNjAw",
                "+MDBaMHcxDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTETMBEGA1UEAxMKZXRjZC5sb2NhbDCCASIwDQYJKoZIhvcNAQEBBQAD",
                "+ggEPADCCAQoCggEBALgCDkDM4qayF6CFt1ZScKR8B+/7qrn1iQ/qYnzRHQ1hlkuS",
                "+b3TkQtt7amGAuoD42d8jLYYvHn2Pbmdhn0mtgYZpFfLFCg4O67ZbX54lBHi+yDEh",
                "+QhneM9Ovsc42A0EVvabINYtKR6B2YRN00QRXS5R1t+QmclpshFgY0+ITsxlJeygs",
                "+wojXthPEfjTQK04JUi5LTHP15rLVzDEd7MguCWdEWRnOu/mSfPHlyz2noUcKuy0M",
                "+awsnSMwf+KBwQMLbJhTXtA4MG2FYsm/2en3/oAc8/0Z8sMOX05F+b0MgHl+a31aQ",
                "+UHM5ykfDNm3hGQfzjQCx4y4hjDoFxbuXvsey6GMCAwEAAaOBqzCBqDAOBgNVHQ8B",
                "+Af8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB",
                "+/wQCMAAwHQYDVR0OBBYEFDMydqyg/s43/dJTMt25zJubI/CUMB8GA1UdIwQYMBaA",
                "+FEN482NrkIrjNR87nHW/Ma92ZQULMCkGA1UdEQQiMCCCDW0zLmV0Y2QubG9jYWyC",
                "+CWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQsFAAOCAQEAVs3VQjgx9CycaWKS",
                "+P6EvMtlqOkanJEe3zr69sI66cc2ZhfJ5xK38ox4oYpMOA131WRvwq0hjKhhZoVQ8",
                "+aQ4yALi1XBltuIyEyrTX9GWAMeDzY95MdWKhyI8ps6/OOoXN596g9ZdOdIbZAMT4",
                "+XAXm43WccM2W2jiKCEKcE4afIF8RiMIaFwG8YU8oHtnnNvxTVa0wrpcObtEtIzC5",
                "+RJxzX9bkHCTHTgJog4OPChU4zffn18U/AVJ7MZ8gweVwhc4gGe0kwOJE+mLHcC5G",
                "+uoFSuVmAhYrH/OPpZhSDOaCED4dsF5jN25CbR3NufEBFRXBH20ZHNkNvbbBnYCBU",
                "+4+Rx5w==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/server-3.key.insecure b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-3.key.insecure",
                "new file mode 100644",
                "index 000000000..f931adb38",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-3.key.insecure",
                "@@ -0,0 +1,27 @@",
                "+-----BEGIN RSA PRIVATE KEY-----",
                "+MIIEpQIBAAKCAQEAuAIOQMziprIXoIW3VlJwpHwH7/uqufWJD+pifNEdDWGWS5Jv",
                "+dORC23tqYYC6gPjZ3yMthi8efY9uZ2GfSa2BhmkV8sUKDg7rtltfniUEeL7IMSFC",
                "+Gd4z06+xzjYDQRW9psg1i0pHoHZhE3TRBFdLlHW35CZyWmyEWBjT4hOzGUl7KCzC",
                "+iNe2E8R+NNArTglSLktMc/XmstXMMR3syC4JZ0RZGc67+ZJ88eXLPaehRwq7LQxr",
                "+CydIzB/4oHBAwtsmFNe0DgwbYViyb/Z6ff+gBzz/Rnyww5fTkX5vQyAeX5rfVpBQ",
                "+cznKR8M2beEZB/ONALHjLiGMOgXFu5e+x7LoYwIDAQABAoIBAQCY54RmjprNAHKn",
                "+vlXCEpFt7W8/GXcePg2ePxuGMtKcevpEZDPgA4oXDnAxA6J3Z9LMHFRJC8Cff9+z",
                "+YqjVtatLQOmvKdMYKYfvqfBD3ujfWVHLmaJvEnkor/flrnZ30BQfkoED9T6d9aDn",
                "+ZQwHOm8gt82OdfBSeZhkCIWReOM73622qJhmLWUUY3xEucRAFF6XffOLvJAT87Vu",
                "+pXKtCnQxhzxkUsCYNIOeH/pTX+XoLkysFBKxnrlbTeM0cEgWpYMICt/vsUrp6DHs",
                "+jygxR1EnT2/4ufe81aFSO4SzUZKJrz8zj4yIyDOR0Mp6FW+xMp8S0fDOywHhLlXn",
                "+xQOevmGBAoGBAOMQaWWs2FcxWvLfX95RyWPtkQ+XvmWlL5FR427TlLhtU6EPs0xZ",
                "+eeanMtQqSRHlDkatwc0XQk+s30/UJ+5i1iz3shLwtnZort/pbnyWrxkE9pcR0fgr",
                "+IklujJ8e8kQHpY75gOLmEiADrUITqvfbvSMsaG3h1VydPNU3JYTUuYmjAoGBAM91",
                "+Atnri0PH3UKonAcMPSdwQ5NexqAD1JUk6KUoX2poXBXO3zXBFLgbMeJaWthbe+dG",
                "+Raw/zjBET/oRfDOssh+QTD8TutI9LA2+EN7TG7Kr6NFciz4Q2pioaimv9KUhJx+8",
                "+HH2wCANYgkv69IWUFskF0uDCW9FQVvpepcctCJJBAoGAMlWxB5kJXErUnoJl/iKj",
                "+QkOnpI0+58l2ggBlKmw8y6VwpIOWe5ZaL4dg/Sdii1T7lS9vhsdhK8hmuIuPToka",
                "+cV13XDuANz99hKV6mKPOrP0srNCGez0UnLKk+aEik3IegVNN/v6BhhdKkRtLCybr",
                "+BqERhUpKwf0ZPyq6ZnfBqYECgYEAsiD2YcctvPVPtnyv/B02JTbvzwoB4kNntOgM",
                "+GkOgKe2Ro+gNIEq5T5uKKaELf9qNePeNu2jN0gPV6BI7YuNVzmRIE6ENOJfty573",
                "+PVxm2/Nf5ORhatlt2MZC4aiDl4Xv4f/TNth/COBmgHbqngeZyOGHQBWiYQdqp2+9",
                "+SFgSlAECgYEA1zLhxj6f+psM5Gpx56JJIEraHfyuyR1Oxii5mo7I3PLsbF/s6YDR",
                "+q9E64GoR5PdgCQlMm09f6wfT61NVwsYrbLlLET6tAiG0eNxXe71k1hUb6aa4DpNQ",
                "+IcS3E3hb5KREXUH5d+PKeD2qrf52mtakjn9b2aH2rQw2e2YNkIDV+XA=",
                "+-----END RSA PRIVATE KEY-----",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-1.json b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-1.json",
                "new file mode 100644",
                "index 000000000..ae9fe36e9",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-1.json",
                "@@ -0,0 +1,21 @@",
                "+{",
                "+  \"key\": {",
                "+    \"algo\": \"rsa\",",
                "+    \"size\": 2048",
                "+  },",
                "+  \"names\": [",
                "+    {",
                "+      \"O\": \"etcd\",",
                "+      \"OU\": \"etcd Security\",",
                "+      \"L\": \"San Francisco\",",
                "+      \"ST\": \"California\",",
                "+      \"C\": \"USA\"",
                "+    }",
                "+  ],",
                "+  \"CN\": \"etcd.local\",",
                "+  \"hosts\": [",
                "+    \"m1.etcd.local\",",
                "+    \"127.0.0.1\",",
                "+    \"localhost\"",
                "+  ]",
                "+}",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-2.json b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-2.json",
                "new file mode 100644",
                "index 000000000..5d938fb8a",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-2.json",
                "@@ -0,0 +1,21 @@",
                "+{",
                "+    \"key\": {",
                "+      \"algo\": \"rsa\",",
                "+      \"size\": 2048",
                "+    },",
                "+    \"names\": [",
                "+      {",
                "+        \"O\": \"etcd\",",
                "+        \"OU\": \"etcd Security\",",
                "+        \"L\": \"San Francisco\",",
                "+        \"ST\": \"California\",",
                "+        \"C\": \"USA\"",
                "+      }",
                "+    ],",
                "+    \"CN\": \"etcd.local\",",
                "+    \"hosts\": [",
                "+      \"m2.etcd.local\",",
                "+      \"127.0.0.1\",",
                "+      \"localhost\"",
                "+    ]",
                "+  }",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-3.json b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-3.json",
                "new file mode 100644",
                "index 000000000..7b8ffcfae",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-3.json",
                "@@ -0,0 +1,21 @@",
                "+{",
                "+    \"key\": {",
                "+      \"algo\": \"rsa\",",
                "+      \"size\": 2048",
                "+    },",
                "+    \"names\": [",
                "+      {",
                "+        \"O\": \"etcd\",",
                "+        \"OU\": \"etcd Security\",",
                "+        \"L\": \"San Francisco\",",
                "+        \"ST\": \"California\",",
                "+        \"C\": \"USA\"",
                "+      }",
                "+    ],",
                "+    \"CN\": \"etcd.local\",",
                "+    \"hosts\": [",
                "+      \"m3.etcd.local\",",
                "+      \"127.0.0.1\",",
                "+      \"localhost\"",
                "+    ]",
                "+  }",
                "diff --git a/hack/scripts-dev/docker-dns/certs-common-name/Procfile b/hack/scripts-dev/docker-dns/certs-common-name/Procfile",
                "deleted file mode 100644",
                "index a0ea061ac..000000000",
                "--- a/hack/scripts-dev/docker-dns/certs-common-name/Procfile",
                "+++ /dev/null",
                "@@ -1,6 +0,0 @@",
                "-# Use goreman to run `go get github.com/mattn/goreman`",
                "-etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls https://127.0.0.1:2379 --advertise-client-urls https://m1.etcd.local:2379 --listen-peer-urls https://127.0.0.1:2380 --initial-advertise-peer-urls=https://m1.etcd.local:2380 --initial-cluster-token tkn --initial-cluster=m1=https://m1.etcd.local:2380,m2=https://m2.etcd.local:22380,m3=https://m3.etcd.local:32380 --initial-cluster-state new --peer-cert-file=/certs-common-name/server.crt --peer-key-file=/certs-common-name/server.key.insecure --peer-trusted-ca-file=/certs-common-name/ca.crt --peer-client-cert-auth --peer-cert-allowed-cn test-common-name --cert-file=/certs-common-name/server.crt --key-file=/certs-common-name/server.key.insecure --trusted-ca-file=/certs-common-name/ca.crt --client-cert-auth",
                "-",
                "-etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls https://127.0.0.1:22379 --advertise-client-urls https://m2.etcd.local:22379 --listen-peer-urls https://127.0.0.1:22380 --initial-advertise-peer-urls=https://m2.etcd.local:22380 --initial-cluster-token tkn --initial-cluster=m1=https://m1.etcd.local:2380,m2=https://m2.etcd.local:22380,m3=https://m3.etcd.local:32380 --initial-cluster-state new --peer-cert-file=/certs-common-name/server.crt --peer-key-file=/certs-common-name/server.key.insecure --peer-trusted-ca-file=/certs-common-name/ca.crt --peer-client-cert-auth --peer-cert-allowed-cn test-common-name --cert-file=/certs-common-name/server.crt --key-file=/certs-common-name/server.key.insecure --trusted-ca-file=/certs-common-name/ca.crt --client-cert-auth",
                "-",
                "-etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls https://127.0.0.1:32379 --advertise-client-urls https://m3.etcd.local:32379 --listen-peer-urls https://127.0.0.1:32380 --initial-advertise-peer-urls=https://m3.etcd.local:32380 --initial-cluster-token tkn --initial-cluster=m1=https://m1.etcd.local:2380,m2=https://m2.etcd.local:22380,m3=https://m3.etcd.local:32380 --initial-cluster-state new --peer-cert-file=/certs-common-name/server.crt --peer-key-file=/certs-common-name/server.key.insecure --peer-trusted-ca-file=/certs-common-name/ca.crt --peer-client-cert-auth --peer-cert-allowed-cn test-common-name --cert-file=/certs-common-name/server.crt --key-file=/certs-common-name/server.key.insecure --trusted-ca-file=/certs-common-name/ca.crt --client-cert-auth",
                "\\ No newline at end of file",
                "diff --git a/hack/scripts-dev/docker-dns/certs/run.sh b/hack/scripts-dev/docker-dns/certs/run.sh",
                "index 7f6c31d4f..9311c618b 100755",
                "--- a/hack/scripts-dev/docker-dns/certs/run.sh",
                "+++ b/hack/scripts-dev/docker-dns/certs/run.sh",
                "@@ -33 +33,50 @@ ETCDCTL_API=3 ./etcdctl \\",
                "   get abc",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl -L https://127.0.0.1:2379/v2/keys/queue \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl -L https://m1.etcd.local:2379/v2/keys/queue \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v3 key...\\n\"",
                "+curl -L https://127.0.0.1:2379/v3/kv/put \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nWriting v3 key...\\n\"",
                "+curl -L https://m1.etcd.local:2379/v3/kv/put \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nReading v3 key...\\n\"",
                "+curl -L https://m1.etcd.local:2379/v3/kv/range \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\"}'",
                "+",
                "+printf \"\\n\\nFetching 'curl https://m1.etcd.local:2379/metrics'...\\n\"",
                "+curl \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -L https://m1.etcd.local:2379/metrics | grep Put | tail -3",
                "+",
                "+printf \"\\n\\nDone!!!\\n\\n\"",
                "diff --git a/hack/scripts-dev/docker-dns/insecure/Procfile b/hack/scripts-dev/docker-dns/insecure/Procfile",
                "new file mode 100644",
                "index 000000000..ad87e4191",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/insecure/Procfile",
                "@@ -0,0 +1,6 @@",
                "+# Use goreman to run `go get github.com/mattn/goreman`",
                "+etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls http://127.0.0.1:2379 --advertise-client-urls http://m1.etcd.local:2379 --listen-peer-urls http://127.0.0.1:2380 --initial-advertise-peer-urls=http://m1.etcd.local:2380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380 --host-whitelist \"localhost,127.0.0.1,m1.etcd.local\"",
                "+",
                "+etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls http://127.0.0.1:22379 --advertise-client-urls http://m2.etcd.local:22379 --listen-peer-urls http://127.0.0.1:22380 --initial-advertise-peer-urls=http://m2.etcd.local:22380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380 --host-whitelist \"localhost,127.0.0.1,m1.etcd.local\"",
                "+",
                "+etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls http://127.0.0.1:32379 --advertise-client-urls http://m3.etcd.local:32379 --listen-peer-urls http://127.0.0.1:32380 --initial-advertise-peer-urls=http://m3.etcd.local:32380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380 --host-whitelist \"localhost,127.0.0.1,m1.etcd.local\"",
                "\\ No newline at end of file",
                "diff --git a/hack/scripts-dev/docker-dns/insecure/run.sh b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "new file mode 100755",
                "index 000000000..de7ff68a8",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "@@ -0,0 +1,89 @@",
                "+#!/bin/sh",
                "+rm -rf /tmp/m1.data /tmp/m2.data /tmp/m3.data",
                "+",
                "+/etc/init.d/bind9 start",
                "+",
                "+# get rid of hosts so go lookup won't resolve 127.0.0.1 to localhost",
                "+cat /dev/null >/etc/hosts",
                "+",
                "+goreman -f /insecure/Procfile start &",
                "+",
                "+# TODO: remove random sleeps",
                "+sleep 7s",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --endpoints=http://m1.etcd.local:2379 \\",
                "+  endpoint health --cluster",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --endpoints=http://m1.etcd.local:2379,http://m2.etcd.local:22379,http://m3.etcd.local:32379 \\",
                "+  put abc def",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --endpoints=http://m1.etcd.local:2379,http://m2.etcd.local:22379,http://m3.etcd.local:32379 \\",
                "+  get abc",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl \\",
                "+  -L http://127.0.0.1:2379/v2/keys/queue \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v2/keys/queue \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v3 key...\\n\"",
                "+curl \\",
                "+  -L http://127.0.0.1:2379/v3/kv/put \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nWriting v3 key...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/kv/put \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nReading v3 key...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/kv/range \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\"}'",
                "+",
                "+printf \"\\n\\nFetching 'curl http://m1.etcd.local:2379/metrics'...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/metrics | grep Put | tail -3",
                "+",
                "+name1=$(base64 <<< \"/election-prefix\")",
                "+val1=$(base64 <<< \"v1\")",
                "+data1=\"{\\\"name\\\":\\\"${name1}\\\", \\\"value\\\":\\\"${val1}\\\"}\"",
                "+",
                "+printf \"\\n\\nCampaign: ${data1}\\n\"",
                "+result1=$(curl -L http://m1.etcd.local:2379/v3/election/campaign -X POST -d \"${data1}\")",
                "+echo ${result1}",
                "+",
                "+# should not panic servers",
                "+val2=$(base64 <<< \"v2\")",
                "+data2=\"{\\\"value\\\": \\\"${val2}\\\"}\"",
                "+printf \"\\n\\nProclaim (wrong-format): ${data2}\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/election/proclaim \\",
                "+  -X POST \\",
                "+  -d \"${data2}\"",
                "+",
                "+printf \"\\n\\nProclaim (wrong-format)...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/election/proclaim \\",
                "+  -X POST \\",
                "+  -d '}'",
                "+",
                "+printf \"\\n\\nProclaim (wrong-format)...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/election/proclaim \\",
                "+  -X POST \\",
                "+  -d '{\"value\": \"Zm9v\"}'",
                "+",
                "+printf \"\\n\\nDone!!!\\n\\n\"",
                "diff --git a/hack/scripts-dev/docker-static-ip/Dockerfile b/hack/scripts-dev/docker-static-ip/Dockerfile",
                "new file mode 100644",
                "index 000000000..bfa46b4f3",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/Dockerfile",
                "@@ -0,0 +1,37 @@",
                "+FROM ubuntu:17.10",
                "+",
                "+RUN rm /bin/sh && ln -s /bin/bash /bin/sh",
                "+RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections",
                "+",
                "+RUN apt-get -y update \\",
                "+  && apt-get -y install \\",
                "+  build-essential \\",
                "+  gcc \\",
                "+  apt-utils \\",
                "+  pkg-config \\",
                "+  software-properties-common \\",
                "+  apt-transport-https \\",
                "+  libssl-dev \\",
                "+  sudo \\",
                "+  bash \\",
                "+  curl \\",
                "+  tar \\",
                "+  git \\",
                "+  netcat \\",
                "+  bind9 \\",
                "+  dnsutils \\",
                "+  && apt-get -y update \\",
                "+  && apt-get -y upgrade \\",
                "+  && apt-get -y autoremove \\",
                "+  && apt-get -y autoclean",
                "+",
                "+ENV GOROOT /usr/local/go",
                "+ENV GOPATH /go",
                "+ENV PATH ${GOPATH}/bin:${GOROOT}/bin:${PATH}",
                "+ENV GO_VERSION REPLACE_ME_GO_VERSION",
                "+ENV GO_DOWNLOAD_URL https://storage.googleapis.com/golang",
                "+RUN rm -rf ${GOROOT} \\",
                "+  && curl -s ${GO_DOWNLOAD_URL}/go${GO_VERSION}.linux-amd64.tar.gz | tar -v -C /usr/local/ -xz \\",
                "+  && mkdir -p ${GOPATH}/src ${GOPATH}/bin \\",
                "+  && go version \\",
                "+  && go get -v -u github.com/mattn/goreman",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/Procfile b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/Procfile",
                "new file mode 100644",
                "index 000000000..44d2278c4",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/Procfile",
                "@@ -0,0 +1,8 @@",
                "+# Use goreman to run `go get github.com/mattn/goreman`",
                "+etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls https://127.0.0.1:2379 --advertise-client-urls https://localhost:2379 --listen-peer-urls https://127.0.0.1:2380 --initial-advertise-peer-urls=https://localhost:2380 --initial-cluster-token tkn --initial-cluster=m1=https://localhost:2380,m2=https://localhost:22380,m3=https://localhost:32380 --initial-cluster-state new --peer-cert-file=/certs-metrics-proxy/server.crt --peer-key-file=/certs-metrics-proxy/server.key.insecure --peer-trusted-ca-file=/certs-metrics-proxy/ca.crt --peer-client-cert-auth --cert-file=/certs-metrics-proxy/server.crt --key-file=/certs-metrics-proxy/server.key.insecure --trusted-ca-file=/certs-metrics-proxy/ca.crt --client-cert-auth --listen-metrics-urls=https://localhost:2378,http://localhost:9379",
                "+",
                "+etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls https://127.0.0.1:22379 --advertise-client-urls https://localhost:22379 --listen-peer-urls https://127.0.0.1:22380 --initial-advertise-peer-urls=https://localhost:22380 --initial-cluster-token tkn --initial-cluster=m1=https://localhost:2380,m2=https://localhost:22380,m3=https://localhost:32380 --initial-cluster-state new --peer-cert-file=/certs-metrics-proxy/server.crt --peer-key-file=/certs-metrics-proxy/server.key.insecure --peer-trusted-ca-file=/certs-metrics-proxy/ca.crt --peer-client-cert-auth --cert-file=/certs-metrics-proxy/server.crt --key-file=/certs-metrics-proxy/server.key.insecure --trusted-ca-file=/certs-metrics-proxy/ca.crt --client-cert-auth --listen-metrics-urls=https://localhost:22378,http://localhost:29379",
                "+",
                "+etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls https://127.0.0.1:32379 --advertise-client-urls https://localhost:32379 --listen-peer-urls https://127.0.0.1:32380 --initial-advertise-peer-urls=https://localhost:32380 --initial-cluster-token tkn --initial-cluster=m1=https://localhost:2380,m2=https://localhost:22380,m3=https://localhost:32380 --initial-cluster-state new --peer-cert-file=/certs-metrics-proxy/server.crt --peer-key-file=/certs-metrics-proxy/server.key.insecure --peer-trusted-ca-file=/certs-metrics-proxy/ca.crt --peer-client-cert-auth --cert-file=/certs-metrics-proxy/server.crt --key-file=/certs-metrics-proxy/server.key.insecure --trusted-ca-file=/certs-metrics-proxy/ca.crt --client-cert-auth --listen-metrics-urls=https://localhost:32378,http://localhost:39379",
                "+",
                "+proxy: ./etcd grpc-proxy start --advertise-client-url=localhost:23790 --listen-addr=localhost:23790 --endpoints=https://localhost:2379,https://localhost:22379,https://localhost:32379 --data-dir=/tmp/proxy.data --cacert=/certs-metrics-proxy/ca.crt --cert=/certs-metrics-proxy/server.crt --key=/certs-metrics-proxy/server.key.insecure --trusted-ca-file=/certs-metrics-proxy/ca.crt --cert-file=/certs-metrics-proxy/server.crt --key-file=/certs-metrics-proxy/server.key.insecure --metrics-addr=http://localhost:9378",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/ca-csr.json b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/ca-csr.json",
                "new file mode 100644",
                "index 000000000..ecafabaad",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/ca-csr.json",
                "@@ -0,0 +1,19 @@",
                "+{",
                "+  \"key\": {",
                "+    \"algo\": \"rsa\",",
                "+    \"size\": 2048",
                "+  },",
                "+  \"names\": [",
                "+    {",
                "+      \"O\": \"etcd\",",
                "+      \"OU\": \"etcd Security\",",
                "+      \"L\": \"San Francisco\",",
                "+      \"ST\": \"California\",",
                "+      \"C\": \"USA\"",
                "+    }",
                "+  ],",
                "+  \"CN\": \"ca\",",
                "+  \"ca\": {",
                "+    \"expiry\": \"87600h\"",
                "+  }",
                "+}",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/ca.crt b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/ca.crt",
                "new file mode 100644",
                "index 000000000..0d8dc386b",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/ca.crt",
                "@@ -0,0 +1,22 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIIDsTCCApmgAwIBAgIUYWIIesEznr7VfYawvmttxxmOfeUwDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xNzEyMDYyMTUzMDBaFw0yNzEyMDQyMTUz",
                "+MDBaMG8xDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTELMAkGA1UEAxMCY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK",
                "+AoIBAQDDN/cW7rl/qz59gF3csnDhp5BAxVY7n0+inzZO+MZIdkCFuus6Klc6mWMY",
                "+/ZGvpWxVDgQvYBs310eq4BrM2BjwWNfgqIn6bHVwwGfngojcDEHlZHw1e9sdBlO5",
                "+e/rNONpNtMUjUeukhzFwPOdsUfweAGsqj4VYJV+kkS3uGmCGIj+3wIF411FliiQP",
                "+WiyLG16BwR1Vem2qOotCRgCawKSb4/wKfF8dvv00IjP5Jcy+aXLQ4ULW1fvj3cRR",
                "+JLdZmZ/PF0Cqm75qw2IqzIhRB5b1e8HyRPeNtEZ7frNLZyFhLgHJbRFF5WooFX79",
                "+q9py8dERBXOxCKrSdqEOre0OU/4pAgMBAAGjRTBDMA4GA1UdDwEB/wQEAwIBBjAS",
                "+BgNVHRMBAf8ECDAGAQH/AgECMB0GA1UdDgQWBBS+CaA8UIkIJT9xhXff4p143UuW",
                "+7TANBgkqhkiG9w0BAQsFAAOCAQEAK7lScAUi+R68oxxmgZ/pdEr9wsMj4xtss+GO",
                "+UDgzxudpT1nYQ2iBudC3LIuTiaUHUSseVleXEKeNbKhKhVhlIwhmPxiOgbbFu9hr",
                "+e2Z87SjtdlbE/KcYFw0W/ukWYxYrq08BB19w2Mqd8J5CnLcj4/0iiH1uARo1swFy",
                "+GUYAJ2I147sHIDbbmLKuxbdf4dcrkf3D4inBOLcRhS/MzaXfdMFntzJDQAo5YwFI",
                "+zZ4TRGOhj8IcU1Cn5SVufryWy3qJ+sKHDYsGQQ/ArBXwQnO3NAFCpEN9rDDuQVmH",
                "++ATHDFBQZcGfN4GDh74FGnliRjip2sO4oWTfImmgJGGAn+P2CA==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/gencert.json b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/gencert.json",
                "new file mode 100644",
                "index 000000000..09b67267b",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/gencert.json",
                "@@ -0,0 +1,13 @@",
                "+{",
                "+  \"signing\": {",
                "+    \"default\": {",
                "+        \"usages\": [",
                "+          \"signing\",",
                "+          \"key encipherment\",",
                "+          \"server auth\",",
                "+          \"client auth\"",
                "+        ],",
                "+        \"expiry\": \"87600h\"",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/gencerts.sh b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/gencerts.sh",
                "new file mode 100755",
                "index 000000000..efc098f53",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/gencerts.sh",
                "@@ -0,0 +1,26 @@",
                "+#!/bin/bash",
                "+",
                "+if ! [[ \"$0\" =~ \"./gencerts.sh\" ]]; then",
                "+\techo \"must be run from 'fixtures'\"",
                "+\texit 255",
                "+fi",
                "+",
                "+if ! which cfssl; then",
                "+\techo \"cfssl is not installed\"",
                "+\texit 255",
                "+fi",
                "+",
                "+cfssl gencert --initca=true ./ca-csr.json | cfssljson --bare ./ca",
                "+mv ca.pem ca.crt",
                "+openssl x509 -in ca.crt -noout -text",
                "+",
                "+# generate wildcard certificates DNS: *.etcd.local",
                "+cfssl gencert \\",
                "+    --ca ./ca.crt \\",
                "+    --ca-key ./ca-key.pem \\",
                "+    --config ./gencert.json \\",
                "+    ./server-ca-csr.json | cfssljson --bare ./server",
                "+mv server.pem server.crt",
                "+mv server-key.pem server.key.insecure",
                "+",
                "+rm -f *.csr *.pem *.stderr *.txt",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/run.sh b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/run.sh",
                "new file mode 100755",
                "index 000000000..6089f3ed9",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/run.sh",
                "@@ -0,0 +1,119 @@",
                "+#!/bin/sh",
                "+rm -rf /tmp/m1.data /tmp/m2.data /tmp/m3.data /tmp/proxy.data",
                "+",
                "+goreman -f /certs-metrics-proxy/Procfile start &",
                "+",
                "+# TODO: remove random sleeps",
                "+sleep 7s",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-metrics-proxy/ca.crt \\",
                "+  --cert=/certs-metrics-proxy/server.crt \\",
                "+  --key=/certs-metrics-proxy/server.key.insecure \\",
                "+  --endpoints=https://localhost:2379 \\",
                "+  endpoint health --cluster",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-metrics-proxy/ca.crt \\",
                "+  --cert=/certs-metrics-proxy/server.crt \\",
                "+  --key=/certs-metrics-proxy/server.key.insecure \\",
                "+  --endpoints=https://localhost:2379,https://localhost:22379,https://localhost:32379 \\",
                "+  put abc def",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs-metrics-proxy/ca.crt \\",
                "+  --cert=/certs-metrics-proxy/server.crt \\",
                "+  --key=/certs-metrics-proxy/server.key.insecure \\",
                "+  --endpoints=https://localhost:2379,https://localhost:22379,https://localhost:32379 \\",
                "+  get abc",
                "+",
                "+#################",
                "+sleep 3s && printf \"\\n\\n\" && echo \"curl https://localhost:2378/metrics\"",
                "+curl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  -L https://localhost:2378/metrics | grep Put | tail -3",
                "+",
                "+sleep 3s && printf \"\\n\" && echo \"curl https://localhost:2379/metrics\"",
                "+curl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  -L https://localhost:2379/metrics | grep Put | tail -3",
                "+",
                "+sleep 3s && printf \"\\n\" && echo \"curl http://localhost:9379/metrics\"",
                "+curl -L http://localhost:9379/metrics | grep Put | tail -3",
                "+#################",
                "+",
                "+#################",
                "+sleep 3s && printf \"\\n\\n\" && echo \"curl https://localhost:22378/metrics\"",
                "+curl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  -L https://localhost:22378/metrics | grep Put | tail -3",
                "+",
                "+sleep 3s && printf \"\\n\" && echo \"curl https://localhost:22379/metrics\"",
                "+curl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  -L https://localhost:22379/metrics | grep Put | tail -3",
                "+",
                "+sleep 3s && printf \"\\n\" && echo \"curl http://localhost:29379/metrics\"",
                "+curl -L http://localhost:29379/metrics | grep Put | tail -3",
                "+#################",
                "+",
                "+#################",
                "+sleep 3s && printf \"\\n\\n\" && echo \"curl https://localhost:32378/metrics\"",
                "+curl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  -L https://localhost:32378/metrics | grep Put | tail -3",
                "+",
                "+sleep 3s && printf \"\\n\" && echo \"curl https://localhost:32379/metrics\"",
                "+curl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  -L https://localhost:32379/metrics | grep Put | tail -3",
                "+",
                "+sleep 3s && printf \"\\n\" && echo \"curl http://localhost:39379/metrics\"",
                "+curl -L http://localhost:39379/metrics | grep Put | tail -3",
                "+#################",
                "+",
                "+#################",
                "+sleep 3s && printf \"\\n\\n\" && echo \"Requests to gRPC proxy localhost:23790\"",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  --endpoints=localhost:23790 \\",
                "+  put ghi jkl",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  --endpoints=localhost:23790 \\",
                "+  get ghi",
                "+",
                "+sleep 3s && printf \"\\n\" && echo \"Requests to gRPC proxy https://localhost:23790/metrics\"",
                "+curl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  -L https://localhost:23790/metrics | grep Put | tail -3",
                "+",
                "+sleep 3s && printf \"\\n\" && echo \"Requests to gRPC proxy http://localhost:9378/metrics\"",
                "+curl -L http://localhost:9378/metrics | grep Put | tail -3",
                "+<<COMMENT",
                "+curl \\",
                "+  --cacert /certs-metrics-proxy/ca.crt \\",
                "+  --cert /certs-metrics-proxy/server.crt \\",
                "+  --key /certs-metrics-proxy/server.key.insecure \\",
                "+  -L https://localhost:9378/metrics | grep Put | tail -3",
                "+COMMENT",
                "+#################",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server-ca-csr.json b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server-ca-csr.json",
                "new file mode 100644",
                "index 000000000..4cc3892bf",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server-ca-csr.json",
                "@@ -0,0 +1,19 @@",
                "+{",
                "+  \"key\": {",
                "+    \"algo\": \"rsa\",",
                "+    \"size\": 2048",
                "+  },",
                "+  \"names\": [",
                "+    {",
                "+      \"O\": \"etcd\",",
                "+      \"OU\": \"etcd Security\",",
                "+      \"L\": \"San Francisco\",",
                "+      \"ST\": \"California\",",
                "+      \"C\": \"USA\"",
                "+    }",
                "+  ],",
                "+  \"hosts\": [",
                "+    \"127.0.0.1\",",
                "+    \"localhost\"",
                "+  ]",
                "+}",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server.crt b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server.crt",
                "new file mode 100644",
                "index 000000000..2a57e2e3a",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server.crt",
                "@@ -0,0 +1,24 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIID/DCCAuSgAwIBAgIUSB2TVFR5v0lf79bffoZGdiRNB3YwDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xNzEyMDYyMTUzMDBaFw0yNzEyMDQyMTUz",
                "+MDBaMGIxDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALRv9k58Emso",
                "+T4is8s2Vf8hxO3eVJxMd5IUSzmAPsFBcZEKpXo3AbK1CeZVn8aOJWd12cwnziTU9",
                "+31baCKvT6Tm2kRoBXW/wHuxcuazL8xqg15xRQy+//skUEAR3rODyy5hl9dSBE7hl",
                "+QHhpMZx66nF+AEZzgEHo7C1MV8BDDT28nDE1SLgHlzugYeLoWvGiN4KrCGbUizby",
                "+90O6WFZVasHYk5l0TcNiX2EUVOkKeBdZo6bBa2qTf++Q0SX8KUOdsg+avZjjs+qu",
                "+C8mIYhtwFLdhs/0jthgg4/mD73PZBLuK2CuYqvLZtWvDdnn99cZK86rLUwOD4jL2",
                "+lr6BTuwsp48CAwEAAaOBnDCBmTAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYI",
                "+KwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFCOx2DWC",
                "+ooWTJHTR/Gf4litdPu4nMB8GA1UdIwQYMBaAFL4JoDxQiQglP3GFd9/inXjdS5bt",
                "+MBoGA1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQsFAAOCAQEA",
                "+RkRCpvtmCd+l6yHXGeL43rqseIEBT2ujGctRWkjwfe3INgiUHrIsTayoNk9fqmuV",
                "+YBOW5z5vtfAOT/obFevfyqjEaHpl8qkGIty1e8s0xtT4n8tgtO5zhVAyt5bZ52UN",
                "+1P7uUJ+j7dVuqV9+AUHlGeWAassmVWbqd3gVA/nhemIgOtqxbCcZ5277t3k7ALLe",
                "+JUMDyFAYHz8ZcOk92wFT1mMrbt60zsWIb9vWkgdYHdC+DODhQDWNdvm6yW6cBm8m",
                "+iUwTpNQ4W0UdjaQV4u7GU4kJUwCHnR4m/AoC/6/pUhjlBv5oU5TVKPqKr05q/FBZ",
                "+VKLrBSYLChjrTPx0C4BqLA==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server.key.insecure b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server.key.insecure",
                "new file mode 100644",
                "index 000000000..5b477f50d",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server.key.insecure",
                "@@ -0,0 +1,27 @@",
                "+-----BEGIN RSA PRIVATE KEY-----",
                "+MIIEowIBAAKCAQEAtG/2TnwSayhPiKzyzZV/yHE7d5UnEx3khRLOYA+wUFxkQqle",
                "+jcBsrUJ5lWfxo4lZ3XZzCfOJNT3fVtoIq9PpObaRGgFdb/Ae7Fy5rMvzGqDXnFFD",
                "+L7/+yRQQBHes4PLLmGX11IETuGVAeGkxnHrqcX4ARnOAQejsLUxXwEMNPbycMTVI",
                "+uAeXO6Bh4uha8aI3gqsIZtSLNvL3Q7pYVlVqwdiTmXRNw2JfYRRU6Qp4F1mjpsFr",
                "+apN/75DRJfwpQ52yD5q9mOOz6q4LyYhiG3AUt2Gz/SO2GCDj+YPvc9kEu4rYK5iq",
                "+8tm1a8N2ef31xkrzqstTA4PiMvaWvoFO7CynjwIDAQABAoIBAAr+W1py0sh2n0nr",
                "+h6ug9TUoOQBTNRtEEf1NpQdTTWHID0/Ec/9c/wIbb777o0xcfP4yTlYH4Y894tKu",
                "+3CJj+ezLQ9H6zU+ZqLir+aAemQRBUoGyrc5F+2cS8tri08Ss5ly1saGt756nhKMR",
                "+fbVUA97AV5HzTZg2cdVctmf/bdoZ/ou7v52thPnEfHPtvGFHKEm7ztJq+2RLNZqC",
                "+kGbToGPF19KWh+cLL5IhGraqKnXXuUjMi1RvxLmA4vztfGCkz9145hrAuSEFEs1y",
                "+Fq7IAAHtzzhEcaHpqg+FqqmXQEVrH6+p62/PzfTJdlkzWzroQMdJIib++iX3tN+c",
                "+CR+loMkCgYEAy40Q+4Z+zQ6c2vp8DXal7dLF2FkQ4Ltee6H7J/vJ91w19ThXnCgr",
                "+EkNerYrnLSpQDS4gkXxl7/+m08R5nziopdTSPwtWJjHJoESMhsjLuyXY03IXV/C8",
                "+7xY4L1Uwqp7b6ueqAX3x6HGgBdgty921Lvf7t+kvRkwvcj8Xh7oPJQUCgYEA4u48",
                "+k+HFJDwtw0ZmQZ5ntB7Nn3deoygA1tE+Q9GZadGV0nmUjViZCG6DA+V8h2IYMnyd",
                "+QLQWBdJyhGnAANWajYaUNLfQXbf7Ucb2VbiqMpfD6jgb00OUrv5eZTExDE0QDNJ6",
                "+nMeYQJj7TAuuab9UdUsE2uLderHlB29DQ4eXvoMCgYACdCLeRVLF+gUeBqL0Lpf1",
                "+c/L6lqhDbT7IUr2KT9ixaKUl3ZYAxeMvByze/qumubnZTtMJrew0pmpGZznoF3DA",
                "+/v3B0MsrDrKVgf4Hqef6y4v/kIKDht1gLG5k86vwgpW4ES7VccU2vhfluiNjL7r9",
                "+Y/Pe1arCOCziPax08GM6WQKBgQDAJ8c32acbZbHCdqxDyCQ8CxFGhMeoFEmRnSDC",
                "+QItNZWEeFkFJ5sm+sAVUmU/3O4MNzSNDFLrJN0gtA3bHvhfe2yRH95YCpbWzq2wP",
                "+bg0ARi5o+BXnsIQIIfBAc4T6y45ZrSiR9RjhKikwXXvUo2Sa5Wk5B31PVa9/uiEU",
                "+344IjQKBgCpjpncuUe4ioAI6kmSlaF9FpRKBQbA4NmMD6/scc1r4N1rBO+w4a8oi",
                "+8N+6tmFds4Vl5A9M0OpJ2zwOVOp62EWuYo0zAdcigg6zI2kxZKMG7GeUC9yga3Zr",
                "+FE5npYNx2ypha2FM3DTXm7jUB4Lb0cMGD3Fa0pRTmp+wjaInEu4b",
                "+-----END RSA PRIVATE KEY-----",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs/Procfile b/hack/scripts-dev/docker-static-ip/certs/Procfile",
                "new file mode 100644",
                "index 000000000..873117077",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs/Procfile",
                "@@ -0,0 +1,6 @@",
                "+# Use goreman to run `go get github.com/mattn/goreman`",
                "+etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls https://127.0.0.1:2379 --advertise-client-urls https://localhost:2379 --listen-peer-urls https://127.0.0.1:2380 --initial-advertise-peer-urls=https://localhost:2380 --initial-cluster-token tkn --initial-cluster=m1=https://localhost:2380,m2=https://localhost:22380,m3=https://localhost:32380 --initial-cluster-state new --peer-cert-file=/certs/server.crt --peer-key-file=/certs/server.key.insecure --peer-trusted-ca-file=/certs/ca.crt --peer-client-cert-auth --cert-file=/certs/server.crt --key-file=/certs/server.key.insecure --trusted-ca-file=/certs/ca.crt --client-cert-auth",
                "+",
                "+etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls https://127.0.0.1:22379 --advertise-client-urls https://localhost:22379 --listen-peer-urls https://127.0.0.1:22380 --initial-advertise-peer-urls=https://localhost:22380 --initial-cluster-token tkn --initial-cluster=m1=https://localhost:2380,m2=https://localhost:22380,m3=https://localhost:32380 --initial-cluster-state new --peer-cert-file=/certs/server.crt --peer-key-file=/certs/server.key.insecure --peer-trusted-ca-file=/certs/ca.crt --peer-client-cert-auth --cert-file=/certs/server.crt --key-file=/certs/server.key.insecure --trusted-ca-file=/certs/ca.crt --client-cert-auth",
                "+",
                "+etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls https://127.0.0.1:32379 --advertise-client-urls https://localhost:32379 --listen-peer-urls https://127.0.0.1:32380 --initial-advertise-peer-urls=https://localhost:32380 --initial-cluster-token tkn --initial-cluster=m1=https://localhost:2380,m2=https://localhost:22380,m3=https://localhost:32380 --initial-cluster-state new --peer-cert-file=/certs/server.crt --peer-key-file=/certs/server.key.insecure --peer-trusted-ca-file=/certs/ca.crt --peer-client-cert-auth --cert-file=/certs/server.crt --key-file=/certs/server.key.insecure --trusted-ca-file=/certs/ca.crt --client-cert-auth",
                "\\ No newline at end of file",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs/ca-csr.json b/hack/scripts-dev/docker-static-ip/certs/ca-csr.json",
                "new file mode 100644",
                "index 000000000..ecafabaad",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs/ca-csr.json",
                "@@ -0,0 +1,19 @@",
                "+{",
                "+  \"key\": {",
                "+    \"algo\": \"rsa\",",
                "+    \"size\": 2048",
                "+  },",
                "+  \"names\": [",
                "+    {",
                "+      \"O\": \"etcd\",",
                "+      \"OU\": \"etcd Security\",",
                "+      \"L\": \"San Francisco\",",
                "+      \"ST\": \"California\",",
                "+      \"C\": \"USA\"",
                "+    }",
                "+  ],",
                "+  \"CN\": \"ca\",",
                "+  \"ca\": {",
                "+    \"expiry\": \"87600h\"",
                "+  }",
                "+}",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs/ca.crt b/hack/scripts-dev/docker-static-ip/certs/ca.crt",
                "new file mode 100644",
                "index 000000000..7bdc3bc00",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs/ca.crt",
                "@@ -0,0 +1,22 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIIDsTCCApmgAwIBAgIUPGAgz9+DjeuPzrVKqSTcklFhOZMwDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xNzEyMDYyMTUzMDBaFw0yNzEyMDQyMTUz",
                "+MDBaMG8xDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTELMAkGA1UEAxMCY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK",
                "+AoIBAQDHLx2A7Qs+qnL/CQUSU4mT0u4FXC2FUIIsq7rSEjZrVNTALgFWFPVh/NU4",
                "+5LNf4Ef1V2vFCgqoa5OTjvIGx3SYLddC1Hne45vLZwjqo4WxNExUykYhkUeqirxV",
                "+HL3jrobbBk6AWTy8/4etsCXNMrmcQgTuV6Yff0IIhHi1N5GyTFWQIx0VQEYGR0Iy",
                "+pvpwNb7NvSN8qJJPlaNzQweWxbxtfq/Lz6THvH4amrlUqDBJleB0BPlztiAinh6e",
                "+n94rcJhTK79pkRk7rDNTwzOl2GCUsRu3hZPsMqr4GhVcvsHOFYqHNrUtqMbVHYDI",
                "+AKkLbQoUpKlQHgWqvTaDKp9z9jkxAgMBAAGjRTBDMA4GA1UdDwEB/wQEAwIBBjAS",
                "+BgNVHRMBAf8ECDAGAQH/AgECMB0GA1UdDgQWBBTAR9YYHDMfW5gTDi2ER6HBrxl8",
                "+1jANBgkqhkiG9w0BAQsFAAOCAQEAKiZ/j7ybugOMUf9RNl40cKh/J/AbTUklUxc9",
                "+gvYpAf6nIruhrllYXxY8f1jmB6wPTCIHfsUuo6CxjdB8DRYGZay3+fCOSuYmoQZG",
                "+04nRnyD4sCAeOj8I7ugRTOb76Fo/CusS+g4d8peJE23W6qd0jth3EgVFjbNbTB7u",
                "+eZUuL6S0TyXaxLprLty3fSd+ykWlRphYTZQa5NLnD8fcWEr9W8uWZT6kY2bOuoJk",
                "+6m27hH89ux+hjurTDzzOhxK65am4qf3RWKknQ2ujAEfGU69mAaFgS1UQ8uNJ8lRi",
                "+62atiGpca1anYv6HmoRWnQmsI62BATgYOdjuFMMywj/TUpmWXg==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs/gencert.json b/hack/scripts-dev/docker-static-ip/certs/gencert.json",
                "new file mode 100644",
                "index 000000000..09b67267b",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs/gencert.json",
                "@@ -0,0 +1,13 @@",
                "+{",
                "+  \"signing\": {",
                "+    \"default\": {",
                "+        \"usages\": [",
                "+          \"signing\",",
                "+          \"key encipherment\",",
                "+          \"server auth\",",
                "+          \"client auth\"",
                "+        ],",
                "+        \"expiry\": \"87600h\"",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs/gencerts.sh b/hack/scripts-dev/docker-static-ip/certs/gencerts.sh",
                "new file mode 100755",
                "index 000000000..efc098f53",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs/gencerts.sh",
                "@@ -0,0 +1,26 @@",
                "+#!/bin/bash",
                "+",
                "+if ! [[ \"$0\" =~ \"./gencerts.sh\" ]]; then",
                "+\techo \"must be run from 'fixtures'\"",
                "+\texit 255",
                "+fi",
                "+",
                "+if ! which cfssl; then",
                "+\techo \"cfssl is not installed\"",
                "+\texit 255",
                "+fi",
                "+",
                "+cfssl gencert --initca=true ./ca-csr.json | cfssljson --bare ./ca",
                "+mv ca.pem ca.crt",
                "+openssl x509 -in ca.crt -noout -text",
                "+",
                "+# generate wildcard certificates DNS: *.etcd.local",
                "+cfssl gencert \\",
                "+    --ca ./ca.crt \\",
                "+    --ca-key ./ca-key.pem \\",
                "+    --config ./gencert.json \\",
                "+    ./server-ca-csr.json | cfssljson --bare ./server",
                "+mv server.pem server.crt",
                "+mv server-key.pem server.key.insecure",
                "+",
                "+rm -f *.csr *.pem *.stderr *.txt",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs/run.sh b/hack/scripts-dev/docker-static-ip/certs/run.sh",
                "new file mode 100755",
                "index 000000000..6d25038de",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs/run.sh",
                "@@ -0,0 +1,28 @@",
                "+#!/bin/sh",
                "+rm -rf /tmp/m1.data /tmp/m2.data /tmp/m3.data",
                "+",
                "+goreman -f /certs/Procfile start &",
                "+",
                "+# TODO: remove random sleeps",
                "+sleep 7s",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs/ca.crt \\",
                "+  --cert=/certs/server.crt \\",
                "+  --key=/certs/server.key.insecure \\",
                "+  --endpoints=https://localhost:2379 \\",
                "+  endpoint health --cluster",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs/ca.crt \\",
                "+  --cert=/certs/server.crt \\",
                "+  --key=/certs/server.key.insecure \\",
                "+  --endpoints=https://localhost:2379,https://localhost:22379,https://localhost:32379 \\",
                "+  put abc def",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --cacert=/certs/ca.crt \\",
                "+  --cert=/certs/server.crt \\",
                "+  --key=/certs/server.key.insecure \\",
                "+  --endpoints=https://localhost:2379,https://localhost:22379,https://localhost:32379 \\",
                "+  get abc",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs/server-ca-csr.json b/hack/scripts-dev/docker-static-ip/certs/server-ca-csr.json",
                "new file mode 100644",
                "index 000000000..4cc3892bf",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs/server-ca-csr.json",
                "@@ -0,0 +1,19 @@",
                "+{",
                "+  \"key\": {",
                "+    \"algo\": \"rsa\",",
                "+    \"size\": 2048",
                "+  },",
                "+  \"names\": [",
                "+    {",
                "+      \"O\": \"etcd\",",
                "+      \"OU\": \"etcd Security\",",
                "+      \"L\": \"San Francisco\",",
                "+      \"ST\": \"California\",",
                "+      \"C\": \"USA\"",
                "+    }",
                "+  ],",
                "+  \"hosts\": [",
                "+    \"127.0.0.1\",",
                "+    \"localhost\"",
                "+  ]",
                "+}",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs/server.crt b/hack/scripts-dev/docker-static-ip/certs/server.crt",
                "new file mode 100644",
                "index 000000000..e31d06f77",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs/server.crt",
                "@@ -0,0 +1,24 @@",
                "+-----BEGIN CERTIFICATE-----",
                "+MIID/DCCAuSgAwIBAgIUUE16LbRYR6ClYnxxrCPCzjfJdJ4wDQYJKoZIhvcNAQEL",
                "+BQAwbzEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH",
                "+Ew1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIFNl",
                "+Y3VyaXR5MQswCQYDVQQDEwJjYTAeFw0xNzEyMDYyMTUzMDBaFw0yNzEyMDQyMTUz",
                "+MDBaMGIxDDAKBgNVBAYTA1VTQTETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE",
                "+BxMNU2FuIEZyYW5jaXNjbzENMAsGA1UEChMEZXRjZDEWMBQGA1UECxMNZXRjZCBT",
                "+ZWN1cml0eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANtWJZind1Sh",
                "+JaS06CgUW2B0JOoLxFW5q6hkoTjum/J4cVanwy20dlSrbceIU2xqxYgtPtpN+Oon",
                "+lWHddmU2K5qs0eL+3uIpLdev7i0TARozZK/ZeKr0iLSfil9RG+hupHu5dXXa5eiS",
                "+YWQg0QrRHfbFQGnDa10qNNj1hHG6d8Kt9pqXoR+5H9dGZFapCvev7XidzmBt5WH6",
                "+ZwlDgAWwc1HDtFKNsWZs+ZZSXOpOJqjPI+ae9uKTGpsqB8ilzQi7KeBJ90wslP2l",
                "+cFdOt6vJsUY8MZAfPzGawwS7tRERvGgXGK+wS2osS2BsvEVIKbG8zoPUL3dpZrNv",
                "+kpaor63A6DUCAwEAAaOBnDCBmTAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYI",
                "+KwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLgi8Ltb",
                "+cO92qVvvuPjXpouAber8MB8GA1UdIwQYMBaAFMBH1hgcMx9bmBMOLYRHocGvGXzW",
                "+MBoGA1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATANBgkqhkiG9w0BAQsFAAOCAQEA",
                "+jfsERigblBrRAXviH8MpjHFuv0TPUSe8h1CfFWeEhWCKmMuzM7FxAgMn4KRI3ZhJ",
                "+upkQHjABXRlCpAb63SnIvOOenwvzLEWVYDvDTcsq1Tql3onsUpn1+RQ8jzpH/0AD",
                "+DbNY/dzAujz2TD0Y2CswAsscwRkMbShfcTXkMXzY7waCrQl2eri+r7u5iJHKyhIP",
                "+LaQ3kLtdhjTztLxPOLKEIALA0sEnAiWw6P/rzXLA+fNAVYPKtkBPZNvfwgQDqgOf",
                "+U327K/2fbtsdhaxUZTEhZpsJi5jSJK44O6vB7GnfCB7EBKQkBi/TEOT+EYim2Kam",
                "+1VbLtlqkJL1pTrCIe0p8WQ==",
                "+-----END CERTIFICATE-----",
                "diff --git a/hack/scripts-dev/docker-static-ip/certs/server.key.insecure b/hack/scripts-dev/docker-static-ip/certs/server.key.insecure",
                "new file mode 100644",
                "index 000000000..2bfc3d9dc",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-static-ip/certs/server.key.insecure",
                "@@ -0,0 +1,27 @@",
                "+-----BEGIN RSA PRIVATE KEY-----",
                "+MIIEpAIBAAKCAQEA21YlmKd3VKElpLToKBRbYHQk6gvEVbmrqGShOO6b8nhxVqfD",
                "+LbR2VKttx4hTbGrFiC0+2k346ieVYd12ZTYrmqzR4v7e4ikt16/uLRMBGjNkr9l4",
                "+qvSItJ+KX1Eb6G6ke7l1ddrl6JJhZCDRCtEd9sVAacNrXSo02PWEcbp3wq32mpeh",
                "+H7kf10ZkVqkK96/teJ3OYG3lYfpnCUOABbBzUcO0Uo2xZmz5llJc6k4mqM8j5p72",
                "+4pMamyoHyKXNCLsp4En3TCyU/aVwV063q8mxRjwxkB8/MZrDBLu1ERG8aBcYr7BL",
                "+aixLYGy8RUgpsbzOg9Qvd2lms2+SlqivrcDoNQIDAQABAoIBAQDTHetYMTEqE2Yx",
                "+UDP5iAagI4r4gFT9kpaIojuQmhMe4xFssFOspXwUaWFkYnKx81+ogKxz4gNKFsmx",
                "+hkIUj3yPB/OKQ3pzQ+GtLtjZJ+ayum8a1/9Oxcrj2ICO2Ho9Umod8Nf/lbAgGO2H",
                "+PBMaD0iBI0Gpy4CHDz4I6uENusbVaWW9K8LmyKTEYB570mhU5doRLbMplTPzud8A",
                "+aCDXDC+Jpj9fxBDfSfbKLSHTvQHDTN0PKLV2lRVzcL/Gjf/mKFhcsXcOiCNXSshY",
                "+xveaWgyAKyi81V8SjDB8LLvgBe8zHbnXFUMGWNF7yrdA5plDtio+6NbY1g7Grr3/",
                "+/VsQfRptAoGBAP04vVEAgt6dU6T9+F8nOsCYWHHFJZUCJyLOU3oSZqPoDEDnULF1",
                "+6uLNs+NHuUakX++10iRHnu9wbZQzvsDAggBgIhUwiDfTTMWH7nQEoYNSkcuei9Ir",
                "+g6HFQnBneJ12TUHvVis5OF03UPaegQz0DaMd9QGsuSFpmFPh6egVFcPXAoGBAN2+",
                "+OrBGxhomL1WAubZdU+nwUoaAx8xlPV39s6a/H4da2yfMBbQEDrppp966Kz1+jrgO",
                "+WKXiz7mlkjhfzx1PXF2Tg7PkcdW6FPG3z/qZQj8TrLMbkxPGSPxTBHiLYYimcFJW",
                "+uhhqysF48jP3DRFxA3r33SJuDgW9sLRt9qM147LTAoGAPTXT/ZqkB+/74ixKN6Yh",
                "++6BX8Nh5JzXoA+/gGegMy54yKBZCWUNpzf1veIdD8CGX1zgaXg66CqMguexwNePT",
                "+CQgz9O9QXj5DlpQvPfhImpgBCjl/DwTZwucOEmHQtC9+qWuTZstkJpRSi+rwwxLT",
                "+oRSCvy7jaYI/Ajff9Ovz4O0CgYEAmSEnUlhtsd0wzvEoTsHAk0s9ElmYoJRBfskW",
                "+6U4PLeAWfDMutRQgP6d7IBqchckCMiTmHxi0rtWiVoADfZAyjwSx7OcTna71i7+O",
                "+RtbTos+pcb7XIM7L1ERYUA6g+kdGRfZSaU5GWrl1OWGgiqzq5F6LPZ2W3WwTvWY6",
                "+7pbmebUCgYBZcKX7CFOPXPn2ijlnUDi5QD9PzEONBCrPVwvaT2Jj+BCAOO1m+eSb",
                "+YGvhyYmtL78xthw1vzBP0s1oyP9FHmlX9bgX09rnZJD5l9vHAG3l8W2Y8VElc9et",
                "+7brrx7VPynFZ1kR+ktiBQhLQgxxFsad1SXjsenkp/18sssoONaQaYw==",
                "+-----END RSA PRIVATE KEY-----"
            ],
            "changed_files": [
                "hack/benchmark/bench.sh",
                "hack/scripts-dev/Makefile",
                "hack/scripts-dev/docker-dns-srv/Dockerfile",
                "hack/scripts-dev/docker-dns/Dockerfile",
                "hack/scripts-dev/docker-dns/certs-common-name-auth/Procfile",
                "hack/scripts-dev/docker-dns/certs-common-name-auth/ca-csr.json",
                "hack/scripts-dev/docker-dns/certs-common-name-auth/ca.crt",
                "hack/scripts-dev/docker-dns/certs-common-name-auth/gencert.json",
                "hack/scripts-dev/docker-dns/certs-common-name-auth/gencerts.sh",
                "hack/scripts-dev/docker-dns/certs-common-name-auth/run.sh",
                "hack/scripts-dev/docker-dns/certs-common-name-auth/server-ca-csr.json",
                "hack/scripts-dev/docker-dns/certs-common-name-auth/server.crt",
                "hack/scripts-dev/docker-dns/certs-common-name-auth/server.key.insecure",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/Procfile",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/ca-csr.json",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/ca.crt",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/gencert.json",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/gencerts.sh",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/run.sh",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/server-1.crt",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/server-1.key.insecure",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/server-2.crt",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/server-2.key.insecure",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/server-3.crt",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/server-3.key.insecure",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-1.json",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-2.json",
                "hack/scripts-dev/docker-dns/certs-common-name-multi/server-ca-csr-3.json",
                "hack/scripts-dev/docker-dns/certs-common-name/Procfile",
                "hack/scripts-dev/docker-dns/certs/run.sh",
                "hack/scripts-dev/docker-dns/insecure/Procfile",
                "hack/scripts-dev/docker-dns/insecure/run.sh",
                "hack/scripts-dev/docker-static-ip/Dockerfile",
                "hack/scripts-dev/docker-static-ip/certs-metrics-proxy/Procfile",
                "hack/scripts-dev/docker-static-ip/certs-metrics-proxy/ca-csr.json",
                "hack/scripts-dev/docker-static-ip/certs-metrics-proxy/ca.crt",
                "hack/scripts-dev/docker-static-ip/certs-metrics-proxy/gencert.json",
                "hack/scripts-dev/docker-static-ip/certs-metrics-proxy/gencerts.sh",
                "hack/scripts-dev/docker-static-ip/certs-metrics-proxy/run.sh",
                "hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server-ca-csr.json",
                "hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server.crt",
                "hack/scripts-dev/docker-static-ip/certs-metrics-proxy/server.key.insecure",
                "hack/scripts-dev/docker-static-ip/certs/Procfile",
                "hack/scripts-dev/docker-static-ip/certs/ca-csr.json",
                "hack/scripts-dev/docker-static-ip/certs/ca.crt",
                "hack/scripts-dev/docker-static-ip/certs/gencert.json",
                "hack/scripts-dev/docker-static-ip/certs/gencerts.sh",
                "hack/scripts-dev/docker-static-ip/certs/run.sh",
                "hack/scripts-dev/docker-static-ip/certs/server-ca-csr.json",
                "hack/scripts-dev/docker-static-ip/certs/server.crt",
                "hack/scripts-dev/docker-static-ip/certs/server.key.insecure"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: DNS",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "00c1f16f0a35f38c80956d680709b94e6b01aad3",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519686858,
            "hunks": 3,
            "message": "embed: add \"HostWhitelist\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/embed/config.go b/embed/config.go",
                "index a639df5bb..2f4e9189c 100644",
                "--- a/embed/config.go",
                "+++ b/embed/config.go",
                "@@ -81,4 +81,5 @@ var (",
                "-\tdefaultHostname   string",
                "-\tdefaultHostStatus error",
                "+\tdefaultHostname      string",
                "+\tdefaultHostStatus    error",
                "+\tdefaultHostWhitelist = []string{} // if empty, allow all",
                " )",
                "@@ -173,2 +174,28 @@ type Config struct {",
                "+\t// HostWhitelist lists acceptable hostnames from HTTP client requests.",
                "+\t// Client origin policy protects against \"DNS Rebinding\" attacks",
                "+\t// to insecure etcd servers. That is, any website can simply create",
                "+\t// an authorized DNS name, and direct DNS to \"localhost\" (or any",
                "+\t// other address). Then, all HTTP endpoints of etcd server listening",
                "+\t// on \"localhost\" becomes accessible, thus vulnerable to DNS rebinding",
                "+\t// attacks. See \"CVE-2018-5702\" for more detail.",
                "+\t//",
                "+\t// 1. If client connection is secure via HTTPS, allow any hostnames.",
                "+\t// 2. If client connection is not secure and \"HostWhitelist\" is not empty,",
                "+\t//    only allow HTTP requests whose Host field is listed in whitelist.",
                "+\t//",
                "+\t// Note that the client origin policy is enforced whether authentication",
                "+\t// is enabled or not, for tighter controls.",
                "+\t//",
                "+\t// By default, \"HostWhitelist\" is empty, which allows any hostnames.",
                "+\t// Note that when specifying hostnames, loopback addresses are not added",
                "+\t// automatically. To allow loopback interfaces, leave it empty or add them",
                "+\t// to whitelist manually (e.g. \"localhost\", \"127.0.0.1\", etc.).",
                "+\t//",
                "+\t// CVE-2018-5702 reference:",
                "+\t// - https://bugs.chromium.org/p/project-zero/issues/detail?id=1447#c2",
                "+\t// - https://github.com/transmission/transmission/pull/468",
                "+\t// - https://github.com/coreos/etcd/issues/9353",
                "+\tHostWhitelist []string `json:\"host-whitelist\"`",
                "+",
                " \t// debug",
                "@@ -266,2 +293,3 @@ func NewConfig() *Config {",
                " \t\tEnableV2:              DefaultEnableV2,",
                "+\t\tHostWhitelist:         defaultHostWhitelist,",
                " \t\tAuthToken:             \"simple\","
            ],
            "changed_files": [
                "embed/config.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: DNS",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "e19df692f8d69570ffc57ed123753f8962d024f6",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519154758,
            "hunks": 0,
            "message": "Merge pull request #9185 from spzala/checkdatabase etcdctl/check: create new check command for memory usage",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9185": "Create doc for the check datascale #9327 Add progress bar for the check datascale #9328 Provide total available system memory on the server #9329"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9185",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "89292affaa2d616338b275f9c286d71f95cad932",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520446526,
            "hunks": 0,
            "message": "Merge pull request #9352 from gyuho/raft-pre-vote *: configure Raft Pre-Vote to reduce disruptive rejoining servers",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9352": "Introduce Prevote tikv/raft-rs#39 [etcd-3.1.4][performance] It takes 13s to select leader after an instance rejoin etcd cluster #9464 Document pre-vote flag #17328"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9352",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "33949f732ef39ad147ec9bb1fb2a9f4e94ddefef",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519758876,
            "hunks": 0,
            "message": "Merge pull request #9370 from gyuho/hack *: fix Makefile, move GOPATH setup to build script",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9370": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9370",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8bf0c43b735380409cafb9bb11cc797abf51460e",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519668529,
            "hunks": 0,
            "message": "Merge pull request #9267 from gyuho/member-add-test snapshot: fix \"TestSnapshotV3RestoreMultiMemberAdd\"",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9267": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9267",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "064aeb258b801baa6420ecc8e25d10d3606d0a69",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520018953,
            "hunks": 0,
            "message": "Merge pull request #9382 from gyuho/flag pkg/flags: fatal on conflicting environment variable",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9382": "CHANGELOG: clean up, add auth/flag changes #9383 etcd 3.4.0 won't start with name flag override when environment ETCD_NAME is available. #11111 etcdctl: allow move-leader to connect to multiple endpoints with TLS #11775 etcdctl: allow move-leader to connect to multiple endpoints with TLS #12757 etcdctl: allow move-leader to connect to multiple endpoints #14307 [release-3.5]etcdctl: allow move-leader to connect to multiple endpoints #14434 UPSTREAM <carry>: etcdctl: allow move-leader to connect to multiple e\u2026 openshift/etcd#146"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9382",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d4aeb3b8cf2fec0c84aa8666185e10799c9204c0",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519659502,
            "hunks": 0,
            "message": "Merge pull request #9356 from mkumatag/fix_gopath test, build: Fix gopath creation",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9356": "build/test: add back \"etcd_setup_gopath\" #9342"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9356",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dbdab24d23a3fd562944861b026bd9852c2776e7",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520015561,
            "hunks": 0,
            "message": "Merge pull request #9383 from gyuho/change CHANGELOG: clean up, add auth/flag changes",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9383": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9383",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2f2c6cb13b7fd41932c5689656dfbe23a9b36c8a",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520460037,
            "hunks": 0,
            "message": "Merge pull request #9397 from gyuho/vvv *: regenerate vendor directory, document updatedep.sh",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9397": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: direct, request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9397",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "48ff9e64f4b719dc9145bf374a911d26161490a9",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519945351,
            "hunks": 0,
            "message": "Merge pull request #9380 from gyuho/separate CHANELOG/hack: add Election HTTP API fix",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9380": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9380",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "566b3a05dc27e87f775d62456df3c19596169b7d",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519770786,
            "hunks": 0,
            "message": "Merge pull request #9371 from gyuho/mutator embed: rename \"v3alphaMutator\" to \"v3Mutator\"",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9371": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9371",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fe90bc448ce60d159e392e4e83d688418c8bc86c",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520499566,
            "hunks": 0,
            "message": "Merge pull request #9405 from jpbetz/automated-cherry-pick-of-#9347-origin-release-3.2 Automated cherry pick of #9347",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9405": "",
                "9347": "Automated cherry pick of #9347 #9405"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9405, 9347",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4fd378ee808a916a81aa1b6b66270cd2204407cf",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519239184,
            "hunks": 0,
            "message": "Merge pull request #9343 from gyuho/vvv *: fix govet -shadow warnings",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9343": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9343",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "659224b3850070e074455a7e5b55a114643dba24",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519694469,
            "hunks": 0,
            "message": "Merge pull request #9229 from ximenzaoshi/lease-fix lease: Change lease Mutex to RWMutex",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9229": "Struggle with etcd timeout, help #9159"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9229",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a39273f26e038d736dd18ff90b306bb116d7f7ef",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520499589,
            "hunks": 0,
            "message": "Merge pull request #9402 from jpbetz/3.1.12-changelog CHANGELOG: etcd 3.1.12 backports",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9402": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9402",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c751fdf5e8e2739c217b58d3f4b9cf7e6a405d6a",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519585254,
            "hunks": 0,
            "message": "Merge pull request #9351 from spzala/compactdefragdatascal etcdctl/check: enable auto compact and defrag for check datascale",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9351": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9351",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7e14e11548fa1d19c951a7e1dfb3a6fb724c9c65",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520602455,
            "hunks": 0,
            "message": "Merge pull request #9408 from qinix/fix-proto-code-style etcdserverpb: fix protobuf code style",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9408": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9408",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d6b46ac969555580e5bf40a8bb078dede00ab2d3",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519689162,
            "hunks": 0,
            "message": "Merge pull request #9279 from gyuho/force-new-cluster Documentation/op-guide: discourage \"--force-new-cluster\" in recovery",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9279": "Documentation/op-guide: improve restore guide on misconfiguration #9365"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9279",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "55a7b30377fbcbb5d93be560dd52284cbfad1ff3",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520274496,
            "hunks": 0,
            "message": "Merge pull request #9385 from Revolution1/fix-typos-of-word-trevisions trevisions -> revisions",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9385": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9385",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e88bf42966a6bd4c578b511053a1c7e20c6241f4",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519227635,
            "hunks": 0,
            "message": "Merge pull request #9339 from gyuho/fix-embed-auto-compact embed: fix revision-based compaction with default value",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9339": "embed: value of AutoCompactionRetention and embed.CompactorModeRevision are incompatible #9337 Inconsistent Revisions Across Members ( v3.3.3 ) #10594 update external etcd section of clustering guide to cover auto-compaction sensu/sensu-docs#1638"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9339",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "df4aafbbdfe5a96699f01bee66b4ddb04d24444f",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519161779,
            "hunks": 0,
            "message": "Merge pull request #9334 from gyuho/go-1.10 *: upgrade to Go 1.10",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9334": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9334",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6fd4138c11551274d8e69b653cdc52cc89bac5eb",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520535429,
            "hunks": 0,
            "message": "Merge pull request #9399 from yudai/maxleasettl *: enforce max lease TTL with 9,000,000,000 seconds",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9399": "Release planning for March #9411"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9399",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ceaa55e57e8afd8fe0d297d7e473b2c3f61196e8",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1518978425,
            "hunks": 1,
            "message": "httpproxy: cancel requests when client closes a connection",
            "diff": [
                "diff --git a/proxy/httpproxy/reverse.go b/proxy/httpproxy/reverse.go",
                "index fbde812c0..2ecff3aae 100644",
                "--- a/proxy/httpproxy/reverse.go",
                "+++ b/proxy/httpproxy/reverse.go",
                "@@ -121,2 +121,3 @@ func (p *reverseProxy) ServeHTTP(rw http.ResponseWriter, clientreq *http.Request",
                " \t\t\t\tplog.Printf(\"client %v closed request prematurely\", clientreq.RemoteAddr)",
                "+\t\t\t\tcancel()",
                " \t\t\tcase <-completeCh:"
            ],
            "changed_files": [
                "proxy/httpproxy/reverse.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cec79dd706a1ab640116a13c184230719d3a7e91"
                ]
            ],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "abedaa31e11a1c7deca92e04f890d5e52c57bc56",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520442190,
            "hunks": 0,
            "message": "Merge pull request #9394 from jeis2497052/master *: fix typos in markdown docs",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9394": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9394",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "58f9080f60a5797ea8d4afe5acc5f0c1d6a96a91",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520526095,
            "hunks": 0,
            "message": "Merge pull request #9404 from jpbetz/automated-cherry-pick-of-#9379-origin-release-3.2 Automated cherry pick of #9379",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9404": "",
                "9379": "Invalid HTTP requests to Election Proclaim,Resign segfaults etcd server #9375 CHANELOG/hack: add Election HTTP API fix #9380 Automated cherry pick of #9379 #9404"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9404, 9379",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "249b7a1411b8e16d9e782aacc72e28badc227d08",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520741098,
            "hunks": 0,
            "message": "Merge pull request #9415 from gyuho/adjust-advancing-ticks etcdserver: adjust election timeout on restart",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9415": "Release planning for March #9411 etcdserver: adjust election timeout on restart #9364 CHANGELOG: set dates for 3.1.12 & 3.2.17 release #9414 [etcd-3.1.4][performance] It takes 13s to select leader after an instance rejoin etcd cluster #9464 Automated cherry pick of #9415 #9500 Automated cherry pick of #9415 #9502"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9415",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7a148fee3604d62dd2c18bea73a838d258babade",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520488994,
            "hunks": 0,
            "message": "Merge pull request #9401 from jpbetz/automated-cherry-pick-of-#9297-origin-release-3.1 Automated cherry pick of #9297",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9401": "",
                "9297": "CHANGELOG: updates from January/February 2018 #9287 Rollback etcd server version to 3.1.11 due to #60589 kubernetes/kubernetes#60891 Automated cherry pick of #9297 #9401 [test flakes] master-scalability suites kubernetes/kubernetes#60589 Bump to etcd 3.1.12 to pick up critical fix kubernetes/kubernetes#60998"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9401, 9297",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "23331f7604d8775c379194c5b39e6f8e137e998e",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519707342,
            "hunks": 0,
            "message": "Merge pull request #9368 from mkumatag/fix_gopath_var build: Fix setting gopath",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9368": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9368",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3710c249eb2a59a8e41dd766c96843af16587c09",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520499532,
            "hunks": 0,
            "message": "Merge pull request #9403 from jpbetz/automated-cherry-pick-of-#9336-origin-release-3.2 Automated cherry pick of #9336",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9403": "",
                "9336": "TCP sockets not closing properly when etcd is running proxy mode. #9009 Automated cherry pick of #9336 #9403"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9403, 9336",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac50ef0812e8320dc8e5fb01968f3102ee8314f9",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519793437,
            "hunks": 0,
            "message": "Merge pull request #8302 from mitake/token-ttl auth: a new option for configuring TTL of jwt tokens",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "8302": "CHANGELOG: clean up, add auth/flag changes #9383 auth-token: sign-method HS256 and TTL options are not working on etcd 3.3.x #12471"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 8302",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1caa6afb5fb6c6352cae3630b569a37438e301b2",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519722937,
            "hunks": 0,
            "message": "Merge pull request #9369 from mitake/nop-auth-token auth: a new auth token provider nop",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9369": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9369",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f802cd9db217ec5b9d17ac6948dcb507c5b689e3",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519701567,
            "hunks": 0,
            "message": "Merge pull request #9366 from gyuho/rafthttp-mu rafthttp: make \"ActiveSince\" non-blocking on write lock",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9366": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9366",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a33308b8ac1ace7b8dd2a87b4286ac845226de4",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520274467,
            "hunks": 0,
            "message": "Merge pull request #9387 from spzala/updatecheckperfdoc etcdctl/doc: document check perf auto-compact and defrag options",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9387": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9387",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a972daac7bce68d7b779e0c0aac4082c677ac0a",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519957314,
            "hunks": 0,
            "message": "Merge pull request #9379 from gyuho/fix-election *: fix server panic on invalid Election Proclaim/Resign HTTP requests",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9379": "Invalid HTTP requests to Election Proclaim,Resign segfaults etcd server #9375 CHANELOG/hack: add Election HTTP API fix #9380 Automated cherry pick of #9379 #9404"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9379",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "53825417d5caad7976cb82e1e56957f6d1ec7d18",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519672151,
            "hunks": 0,
            "message": "Merge pull request #9361 from gyuho/language Documentation: make \"Consul\" section more objective",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9361": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9361",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "04e932ba6f9fa1ee4487008164777aa2a0226525",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519673336,
            "hunks": 0,
            "message": "Merge pull request #9347 from gyuho/raft-force-new-cluster etcdserver: enable \"CheckQuorum\" when starting with \"ForceNewCluster\"",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9347": "Automated cherry pick of #9347 #9405"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9347",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2a5911f98dcbf7d901fb78b3f7a184e3ad38a1ea",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520449057,
            "hunks": 0,
            "message": "Merge pull request #9396 from gyuho/lll *: replace \"pkg/logger\" with \"pkg/logutil\"",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9396": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9396",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e8a368d4bdbad8e121c3db04b518d770374c1ad4",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519769802,
            "hunks": 0,
            "message": "Merge pull request #9341 from gyuho/changelog-feb CHANGELOG: add changes for next patch release",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9341": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9341",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3239641a0c0e421769224b4e6c1dc06ce4dc3e48",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519606634,
            "hunks": 0,
            "message": "Merge pull request #9350 from JulianGindi/grpc-doc-update documentation: updated grpc documentation",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9350": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9350",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "247473be0923bb007367397c96fc8986afcf8ca1",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519669157,
            "hunks": 0,
            "message": "Merge pull request #9362 from gyuho/spell-check *: fix minor lint warnings",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9362": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9362",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "211523fc883c8bed0e6898721ff0cc42b6a2016b",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520282187,
            "hunks": 0,
            "message": "Merge pull request #9390 from gyuho/ddd *: add \"--cluster\" flag to defrag, highlight defrag endpoints",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9390": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9390",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "62d8e36462ec40add3da004725f97fb947b9bf64",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520276905,
            "hunks": 0,
            "message": "Merge pull request #9389 from spzala/checkdatascaledoc etcdctl/doc: create doc for check datascale",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9389": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9389",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5b9741e804a44990f67b5eeab686b7141a801346",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519694006,
            "hunks": 0,
            "message": "Merge pull request #9274 from gyuho/revert *: revert \"internal\" package changes",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9274": "Code using mvccpb.KeyValue fail to compile #9293"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9274",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "01193ce5e4049d4f45a61007b7b4eba081157001",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519678078,
            "hunks": 0,
            "message": "Merge pull request #9363 from gyuho/build-compile build: fix compile pass",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9363": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9363",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2dd1a99f421bd93626d4a4b94a0df7d6abdd45fb",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519585085,
            "hunks": 0,
            "message": "Merge pull request #9345 from gyuho/raft-step-candidate raft: clarify candidate message handling, test candidate to follower transition with message from leader",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9345": "raft: clarify candidate message handling, test candidate to follower transition with message from leader tikv/raft-rs#34"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9345",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "811566f2f29db45f3bdd4bdc9ec96a710ae53dd5",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519686981,
            "hunks": 72,
            "message": "*: fix \"v2store\" imports Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/api/v2http/client_test.go b/etcdserver/api/v2http/client_test.go",
                "index 691f83f9f..10ee25882 100644",
                "--- a/etcdserver/api/v2http/client_test.go",
                "+++ b/etcdserver/api/v2http/client_test.go",
                "@@ -1590,3 +1590,3 @@ func TestServeKeysEvent(t *testing.T) {",
                " \t\t\t\tEvent: &v2store.Event{",
                "-\t\t\t\t\tAction: store.CompareAndSwap,",
                "+\t\t\t\t\tAction: v2store.CompareAndSwap,",
                " \t\t\t\t\tNode:   &v2store.NodeExtern{},",
                "@@ -1596,3 +1596,3 @@ func TestServeKeysEvent(t *testing.T) {",
                " \t\t\t&v2store.Event{",
                "-\t\t\t\tAction: store.CompareAndSwap,",
                "+\t\t\t\tAction: v2store.CompareAndSwap,",
                " \t\t\t\tNode:   nil,",
                "diff --git a/etcdserver/membership/cluster_test.go b/etcdserver/membership/cluster_test.go",
                "index cae4e5540..423d27e11 100644",
                "--- a/etcdserver/membership/cluster_test.go",
                "+++ b/etcdserver/membership/cluster_test.go",
                "@@ -546,3 +546,3 @@ func TestClusterUpdateAttributes(t *testing.T) {",
                " func TestNodeToMember(t *testing.T) {",
                "-\tn := &store.NodeExtern{Key: \"/1234\", Nodes: []*v2store.NodeExtern{",
                "+\tn := &v2store.NodeExtern{Key: \"/1234\", Nodes: []*v2store.NodeExtern{",
                " \t\t{Key: \"/1234/attributes\", Value: stringp(`{\"name\":\"node1\",\"clientURLs\":null}`)},",
                "diff --git a/etcdserver/server_test.go b/etcdserver/server_test.go",
                "index e1bab47d0..fa94bb19d 100644",
                "--- a/etcdserver/server_test.go",
                "+++ b/etcdserver/server_test.go",
                "@@ -31,3 +31,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "@@ -92,3 +91,3 @@ func TestDoLocalAction(t *testing.T) {",
                " \t\tsrv := &EtcdServer{",
                "-\t\t\tstore:    st,",
                "+\t\t\tv2store:  st,",
                " \t\t\treqIDGen: idutil.NewGenerator(0, time.Time{}),",
                "@@ -145,3 +144,3 @@ func TestDoBadLocalAction(t *testing.T) {",
                " \t\tsrv := &EtcdServer{",
                "-\t\t\tstore:    st,",
                "+\t\t\tv2store:  st,",
                " \t\t\treqIDGen: idutil.NewGenerator(0, time.Time{}),",
                "@@ -181,3 +180,3 @@ func TestApplyRepeat(t *testing.T) {",
                " \t\tr:          *r,",
                "-\t\tstore:      st,",
                "+\t\tv2store:    st,",
                " \t\tcluster:    cl,",
                "@@ -186,3 +185,3 @@ func TestApplyRepeat(t *testing.T) {",
                " \t}",
                "-\ts.applyV2 = &applierV2store{store: s.store, cluster: s.cluster}",
                "+\ts.applyV2 = &applierV2store{store: s.v2store, cluster: s.cluster}",
                " \ts.start()",
                "@@ -451,4 +450,4 @@ func TestApplyRequest(t *testing.T) {",
                " \t\tst := mockstore.NewRecorder()",
                "-\t\tsrv := &EtcdServer{store: st}",
                "-\t\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\t\tsrv := &EtcdServer{v2store: st}",
                "+\t\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                " \t\tresp := srv.applyV2Request((*RequestV2)(&tt.req))",
                "@@ -468,6 +467,6 @@ func TestApplyRequestOnAdminMemberAttributes(t *testing.T) {",
                " \tsrv := &EtcdServer{",
                "-\t\tstore:   mockstore.NewRecorder(),",
                "+\t\tv2store: mockstore.NewRecorder(),",
                " \t\tcluster: cl,",
                " \t}",
                "-\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                "@@ -688,3 +687,3 @@ func TestDoProposal(t *testing.T) {",
                " \t\t\tr:          *r,",
                "-\t\t\tstore:      st,",
                "+\t\t\tv2store:    st,",
                " \t\t\treqIDGen:   idutil.NewGenerator(0, time.Time{}),",
                "@@ -692,3 +691,3 @@ func TestDoProposal(t *testing.T) {",
                " \t\t}",
                "-\t\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\t\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                " \t\tsrv.start()",
                "@@ -720,3 +719,3 @@ func TestDoProposalCancelled(t *testing.T) {",
                " \t}",
                "-\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                "@@ -742,3 +741,3 @@ func TestDoProposalTimeout(t *testing.T) {",
                " \t}",
                "-\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                "@@ -759,3 +758,3 @@ func TestDoProposalStopped(t *testing.T) {",
                " \t}",
                "-\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                "@@ -779,3 +778,3 @@ func TestSync(t *testing.T) {",
                " \t}",
                "-\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                "@@ -822,3 +821,3 @@ func TestSyncTimeout(t *testing.T) {",
                " \t}",
                "-\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                "@@ -860,3 +859,3 @@ func TestSyncTrigger(t *testing.T) {",
                " \t\tr:          *r,",
                "-\t\tstore:      mockstore.NewNop(),",
                "+\t\tv2store:    mockstore.NewNop(),",
                " \t\tSyncTicker: tk,",
                "@@ -916,4 +915,4 @@ func TestSnapshot(t *testing.T) {",
                " \tsrv := &EtcdServer{",
                "-\t\tr:     *r,",
                "-\t\tstore: st,",
                "+\t\tr:       *r,",
                "+\t\tv2store: st,",
                " \t}",
                "@@ -960,3 +959,3 @@ func TestSnapshotOrdering(t *testing.T) {",
                " \tn := newNopReadyNode()",
                "-\tst := store.New()",
                "+\tst := v2store.New()",
                " \tcl := membership.NewCluster(\"abc\")",
                "@@ -988,3 +987,3 @@ func TestSnapshotOrdering(t *testing.T) {",
                " \t\tr:           *r,",
                "-\t\tstore:       st,",
                "+\t\tv2store:     st,",
                " \t\tsnapshotter: raftsnap.New(snapdir),",
                "@@ -993,3 +992,3 @@ func TestSnapshotOrdering(t *testing.T) {",
                " \t}",
                "-\ts.applyV2 = &applierV2store{store: s.store, cluster: s.cluster}",
                "+\ts.applyV2 = &applierV2store{store: s.v2store, cluster: s.cluster}",
                "@@ -1049,3 +1048,3 @@ func TestTriggerSnap(t *testing.T) {",
                " \t\tr:          *r,",
                "-\t\tstore:      st,",
                "+\t\tv2store:    st,",
                " \t\treqIDGen:   idutil.NewGenerator(0, time.Time{}),",
                "@@ -1053,3 +1052,3 @@ func TestTriggerSnap(t *testing.T) {",
                " \t}",
                "-\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                "@@ -1088,3 +1087,3 @@ func TestConcurrentApplyAndSnapshotV3(t *testing.T) {",
                " \tn := newNopReadyNode()",
                "-\tst := store.New()",
                "+\tst := v2store.New()",
                " \tcl := membership.NewCluster(\"abc\")",
                "@@ -1113,3 +1112,3 @@ func TestConcurrentApplyAndSnapshotV3(t *testing.T) {",
                " \t\tr:           *r,",
                "-\t\tstore:       st,",
                "+\t\tv2store:     st,",
                " \t\tsnapshotter: raftsnap.New(testdir),",
                "@@ -1118,3 +1117,3 @@ func TestConcurrentApplyAndSnapshotV3(t *testing.T) {",
                " \t}",
                "-\ts.applyV2 = &applierV2store{store: s.store, cluster: s.cluster}",
                "+\ts.applyV2 = &applierV2store{store: s.v2store, cluster: s.cluster}",
                "@@ -1186,3 +1185,3 @@ func TestAddMember(t *testing.T) {",
                " \tcl := newTestCluster(nil)",
                "-\tst := store.New()",
                "+\tst := v2store.New()",
                " \tcl.SetStore(st)",
                "@@ -1196,3 +1195,3 @@ func TestAddMember(t *testing.T) {",
                " \t\tr:          *r,",
                "-\t\tstore:      st,",
                "+\t\tv2store:    st,",
                " \t\tcluster:    cl,",
                "@@ -1226,3 +1225,3 @@ func TestRemoveMember(t *testing.T) {",
                " \tcl := newTestCluster(nil)",
                "-\tst := store.New()",
                "+\tst := v2store.New()",
                " \tcl.SetStore(v2store.New())",
                "@@ -1237,3 +1236,3 @@ func TestRemoveMember(t *testing.T) {",
                " \t\tr:          *r,",
                "-\t\tstore:      st,",
                "+\t\tv2store:    st,",
                " \t\tcluster:    cl,",
                "@@ -1266,3 +1265,3 @@ func TestUpdateMember(t *testing.T) {",
                " \tcl := newTestCluster(nil)",
                "-\tst := store.New()",
                "+\tst := v2store.New()",
                " \tcl.SetStore(st)",
                "@@ -1277,3 +1276,3 @@ func TestUpdateMember(t *testing.T) {",
                " \t\tr:          *r,",
                "-\t\tstore:      st,",
                "+\t\tv2store:    st,",
                " \t\tcluster:    cl,",
                "diff --git a/etcdserver/v2store/store_test.go b/etcdserver/v2store/store_test.go",
                "index cce72ad8e..b385d9b5c 100644",
                "--- a/etcdserver/v2store/store_test.go",
                "+++ b/etcdserver/v2store/store_test.go",
                "@@ -64,4 +64,4 @@ func TestStoreGetSorted(t *testing.T) {",
                " \ts.Create(\"/foo/y\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "-\ts.Create(\"/foo/y/a\", false, \"0\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "-\ts.Create(\"/foo/y/b\", false, \"0\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/y/a\", false, \"0\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ts.Create(\"/foo/y/b\", false, \"0\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tvar eidx uint64 = 6",
                "@@ -169,3 +169,3 @@ func TestStoreCreateValue(t *testing.T) {",
                " \tvar eidx uint64 = 1",
                "-\te, err := s.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te, err := s.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \ttestutil.AssertNil(t, err)",
                "@@ -183,3 +183,3 @@ func TestStoreCreateValue(t *testing.T) {",
                " \teidx = 2",
                "-\te, err = s.Create(\"/empty\", false, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te, err = s.Create(\"/empty\", false, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \ttestutil.AssertNil(t, err)",
                "@@ -203,3 +203,3 @@ func TestStoreCreateDirectory(t *testing.T) {",
                " \tvar eidx uint64 = 1",
                "-\te, err := s.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te, err := s.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \ttestutil.AssertNil(t, err)",
                "@@ -220,3 +220,3 @@ func TestStoreCreateFailsIfExists(t *testing.T) {",
                " \t// create /foo as dir again",
                "-\te, _err := s.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te, _err := s.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \terr := _err.(*v2error.Error)",
                "@@ -330,3 +330,3 @@ func TestStoreDeleteDirectory(t *testing.T) {",
                " \t// create directory /foo and directory /foo/bar",
                "-\t_, err = s.Create(\"/foo/bar\", true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\t_, err = s.Create(\"/foo/bar\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \ttestutil.AssertNil(t, err)",
                "@@ -372,3 +372,3 @@ func TestRootRdOnly(t *testing.T) {",
                "-\t\t_, err = s.Create(tt, true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\t\t_, err = s.Create(tt, true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \t\ttestutil.AssertNotNil(t, err)",
                "@@ -378,3 +378,3 @@ func TestRootRdOnly(t *testing.T) {",
                "-\t\t_, err = s.CompareAndSwap(tt, \"\", 0, \"\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\t\t_, err = s.CompareAndSwap(tt, \"\", 0, \"\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \t\ttestutil.AssertNotNil(t, err)",
                "@@ -473,3 +473,3 @@ func TestStoreCompareAndSwapPrevValue(t *testing.T) {",
                " \ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "-\te, err := s.CompareAndSwap(\"/foo\", \"bar\", 0, \"baz\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te, err := s.CompareAndSwap(\"/foo\", \"bar\", 0, \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \ttestutil.AssertNil(t, err)",
                "@@ -511,3 +511,3 @@ func TestStoreCompareAndSwapPrevIndex(t *testing.T) {",
                " \ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "-\te, err := s.CompareAndSwap(\"/foo\", \"\", 1, \"baz\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te, err := s.CompareAndSwap(\"/foo\", \"\", 1, \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \ttestutil.AssertNil(t, err)",
                "@@ -534,3 +534,3 @@ func TestStoreCompareAndSwapPrevIndexFailsIfNotMatch(t *testing.T) {",
                " \ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "-\te, _err := s.CompareAndSwap(\"/foo\", \"\", 100, \"baz\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te, _err := s.CompareAndSwap(\"/foo\", \"\", 100, \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \terr := _err.(*v2error.Error)",
                "@@ -574,3 +574,3 @@ func TestStoreWatchRecursiveCreate(t *testing.T) {",
                " \teidx = 1",
                "-\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \te := timeoutSelect(t, w.EventChan())",
                "@@ -602,3 +602,3 @@ func TestStoreWatchRecursiveUpdate(t *testing.T) {",
                " \tvar eidx uint64 = 1",
                "-\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tw, err := s.Watch(\"/foo\", true, false, 0)",
                "@@ -635,3 +635,3 @@ func TestStoreWatchRecursiveDelete(t *testing.T) {",
                " \tvar eidx uint64 = 1",
                "-\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tw, err := s.Watch(\"/foo\", true, false, 0)",
                "@@ -656,3 +656,3 @@ func TestStoreWatchCompareAndSwap(t *testing.T) {",
                " \teidx = 2",
                "-\ts.CompareAndSwap(\"/foo\", \"bar\", 0, \"baz\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.CompareAndSwap(\"/foo\", \"bar\", 0, \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \te := timeoutSelect(t, w.EventChan())",
                "@@ -668,3 +668,3 @@ func TestStoreWatchRecursiveCompareAndSwap(t *testing.T) {",
                " \tvar eidx uint64 = 1",
                "-\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tw, _ := s.Watch(\"/foo\", true, false, 0)",
                "@@ -672,3 +672,3 @@ func TestStoreWatchRecursiveCompareAndSwap(t *testing.T) {",
                " \teidx = 2",
                "-\ts.CompareAndSwap(\"/foo/bar\", \"baz\", 0, \"bat\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.CompareAndSwap(\"/foo/bar\", \"baz\", 0, \"bat\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \te := timeoutSelect(t, w.EventChan())",
                "@@ -718,3 +718,3 @@ func TestStoreWatchCreateWithHiddenKey(t *testing.T) {",
                " \tw, _ := s.Watch(\"/_foo\", false, false, 0)",
                "-\ts.Create(\"/_foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/_foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \te := timeoutSelect(t, w.EventChan())",
                "@@ -735,3 +735,3 @@ func TestStoreWatchRecursiveCreateWithHiddenKey(t *testing.T) {",
                " \tw, _ := s.Watch(\"/foo\", true, false, 0)",
                "-\ts.Create(\"/foo/_bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/_bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \te := nbselect(w.EventChan())",
                "@@ -739,3 +739,3 @@ func TestStoreWatchRecursiveCreateWithHiddenKey(t *testing.T) {",
                " \tw, _ = s.Watch(\"/foo\", true, false, 0)",
                "-\ts.Create(\"/foo/_baz\", true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/_baz\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tselect {",
                "@@ -745,3 +745,3 @@ func TestStoreWatchRecursiveCreateWithHiddenKey(t *testing.T) {",
                " \t}",
                "-\ts.Create(\"/foo/_baz/quux\", false, \"quux\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/_baz/quux\", false, \"quux\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tselect {",
                "@@ -757,3 +757,3 @@ func TestStoreWatchUpdateWithHiddenKey(t *testing.T) {",
                " \tdefer s.Close()",
                "-\ts.Create(\"/_foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/_foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tw, _ := s.Watch(\"/_foo\", false, false, 0)",
                "@@ -771,3 +771,3 @@ func TestStoreWatchRecursiveUpdateWithHiddenKey(t *testing.T) {",
                " \tdefer s.Close()",
                "-\ts.Create(\"/foo/_bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/_bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tw, _ := s.Watch(\"/foo\", true, false, 0)",
                "@@ -783,3 +783,3 @@ func TestStoreWatchDeleteWithHiddenKey(t *testing.T) {",
                " \tvar eidx uint64 = 2",
                "-\ts.Create(\"/_foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/_foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tw, _ := s.Watch(\"/_foo\", false, false, 0)",
                "@@ -798,3 +798,3 @@ func TestStoreWatchRecursiveDeleteWithHiddenKey(t *testing.T) {",
                " \tdefer s.Close()",
                "-\ts.Create(\"/foo/_bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/_bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tw, _ := s.Watch(\"/foo\", true, false, 0)",
                "@@ -811,3 +811,3 @@ func TestStoreWatchRecursiveCreateDeeperThanHiddenKey(t *testing.T) {",
                " \tw, _ := s.Watch(\"/_foo/bar\", true, false, 0)",
                "-\ts.Create(\"/_foo/bar/baz\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/_foo/bar/baz\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "@@ -843,3 +843,3 @@ func TestStoreWatchSlowConsumer(t *testing.T) {",
                " // Performs a non-blocking select on an event channel.",
                "-func nbselect(c <-chan *store.Event) *store.Event {",
                "+func nbselect(c <-chan *v2store.Event) *v2store.Event {",
                " \tselect {",
                "@@ -853,3 +853,3 @@ func nbselect(c <-chan *store.Event) *store.Event {",
                " // Performs a non-blocking select on an event channel.",
                "-func timeoutSelect(t *testing.T, c <-chan *store.Event) *store.Event {",
                "+func timeoutSelect(t *testing.T, c <-chan *v2store.Event) *v2store.Event {",
                " \tselect {",
                "diff --git a/etcdserver/v2store/store_v2_test.go b/etcdserver/v2store/store_v2_test.go",
                "index d661647aa..474b4d2ea 100644",
                "--- a/etcdserver/v2store/store_v2_test.go",
                "+++ b/etcdserver/v2store/store_v2_test.go",
                "@@ -41,5 +41,5 @@ func TestStoreRecover(t *testing.T) {",
                " \ts.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "-\ts.Create(\"/foo/x\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/x\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \ts.Update(\"/foo/x\", \"barbar\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "-\ts.Create(\"/foo/y\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/y\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                " \tb, err := s.Save()",
                "diff --git a/pkg/mock/mockstore/store_recorder.go b/pkg/mock/mockstore/store_recorder.go",
                "index c30528e56..cccd95423 100644",
                "--- a/pkg/mock/mockstore/store_recorder.go",
                "+++ b/pkg/mock/mockstore/store_recorder.go",
                "@@ -56,3 +56,3 @@ func (s *storeRecorder) Get(path string, recursive, sorted bool) (*v2store.Event",
                " }",
                "-func (s *storeRecorder) Set(path string, dir bool, val string, expireOpts store.TTLOptionSet) (*v2store.Event, error) {",
                "+func (s *storeRecorder) Set(path string, dir bool, val string, expireOpts v2store.TTLOptionSet) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -63,3 +63,3 @@ func (s *storeRecorder) Set(path string, dir bool, val string, expireOpts store.",
                " }",
                "-func (s *storeRecorder) Update(path, val string, expireOpts store.TTLOptionSet) (*v2store.Event, error) {",
                "+func (s *storeRecorder) Update(path, val string, expireOpts v2store.TTLOptionSet) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -70,3 +70,3 @@ func (s *storeRecorder) Update(path, val string, expireOpts store.TTLOptionSet)",
                " }",
                "-func (s *storeRecorder) Create(path string, dir bool, val string, uniq bool, expireOpts store.TTLOptionSet) (*v2store.Event, error) {",
                "+func (s *storeRecorder) Create(path string, dir bool, val string, uniq bool, expireOpts v2store.TTLOptionSet) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -77,3 +77,3 @@ func (s *storeRecorder) Create(path string, dir bool, val string, uniq bool, exp",
                " }",
                "-func (s *storeRecorder) CompareAndSwap(path, prevVal string, prevIdx uint64, val string, expireOpts store.TTLOptionSet) (*v2store.Event, error) {",
                "+func (s *storeRecorder) CompareAndSwap(path, prevVal string, prevIdx uint64, val string, expireOpts v2store.TTLOptionSet) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -98,5 +98,5 @@ func (s *storeRecorder) CompareAndDelete(path, prevVal string, prevIdx uint64) (",
                " }",
                "-func (s *storeRecorder) Watch(_ string, _, _ bool, _ uint64) (store.Watcher, error) {",
                "+func (s *storeRecorder) Watch(_ string, _, _ bool, _ uint64) (v2store.Watcher, error) {",
                " \ts.Record(testutil.Action{Name: \"Watch\"})",
                "-\treturn store.NewNopWatcher(), nil",
                "+\treturn v2store.NewNopWatcher(), nil",
                " }",
                "@@ -116,3 +116,3 @@ func (s *storeRecorder) SaveNoCopy() ([]byte, error) {",
                "-func (s *storeRecorder) Clone() store.Store {",
                "+func (s *storeRecorder) Clone() v2store.Store {",
                " \ts.Record(testutil.Action{Name: \"Clone\"})",
                "@@ -153,3 +153,3 @@ func (s *errStoreRecorder) Get(path string, recursive, sorted bool) (*v2store.Ev",
                " }",
                "-func (s *errStoreRecorder) Watch(path string, recursive, sorted bool, index uint64) (store.Watcher, error) {",
                "+func (s *errStoreRecorder) Watch(path string, recursive, sorted bool, index uint64) (v2store.Watcher, error) {",
                " \ts.storeRecorder.Watch(path, recursive, sorted, index)"
            ],
            "changed_files": [
                "etcdserver/api/v2http/client_test.go",
                "etcdserver/membership/cluster_test.go",
                "etcdserver/server_test.go",
                "etcdserver/v2store/store_test.go",
                "etcdserver/v2store/store_v2_test.go",
                "pkg/mock/mockstore/store_recorder.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: record",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0e12e888e0b9897b912eddf436f30b551f5d5ffd",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519671998,
            "hunks": 265,
            "message": "*: move \"internal/store\" to \"etcdserver/v2store\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdctl/ctlv3/command/migrate_command.go b/etcdctl/ctlv3/command/migrate_command.go",
                "index 6b185e14f..0c22ba705 100644",
                "--- a/etcdctl/ctlv3/command/migrate_command.go",
                "+++ b/etcdctl/ctlv3/command/migrate_command.go",
                "@@ -32,2 +32,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "@@ -36,3 +37,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/raftsnap\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                " \t\"github.com/coreos/etcd/pkg/pbutil\"",
                "@@ -42,2 +42,3 @@ import (",
                " \t\"github.com/coreos/etcd/wal/walpb\"",
                "+",
                " \t\"github.com/gogo/protobuf/proto\"",
                "@@ -126,3 +127,3 @@ func prepareBackend() backend.Backend {",
                "-func rebuildStoreV2() (store.Store, uint64) {",
                "+func rebuildStoreV2() (v2store.Store, uint64) {",
                " \tvar index uint64",
                "@@ -159,3 +160,3 @@ func rebuildStoreV2() (store.Store, uint64) {",
                "-\tst := store.New()",
                "+\tst := v2store.New()",
                " \tif snapshot != nil {",
                "@@ -239,3 +240,3 @@ func applyRequest(req *pb.Request, applyV2 etcdserver.ApplierV2) {",
                "-func writeStore(w io.Writer, st store.Store) uint64 {",
                "+func writeStore(w io.Writer, st v2store.Store) uint64 {",
                " \tall, err := st.Get(\"/1\", true, true)",
                "@@ -251,3 +252,3 @@ func writeStore(w io.Writer, st store.Store) uint64 {",
                "-func writeKeys(w io.Writer, n *store.NodeExtern) uint64 {",
                "+func writeKeys(w io.Writer, n *v2store.NodeExtern) uint64 {",
                " \tmaxIndex := n.ModifiedIndex",
                "diff --git a/etcdserver/api/v2http/client.go b/etcdserver/api/v2http/client.go",
                "index 6ae5f9cba..97b5e071b 100644",
                "--- a/etcdserver/api/v2http/client.go",
                "+++ b/etcdserver/api/v2http/client.go",
                "@@ -38,3 +38,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2auth\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "@@ -520,4 +520,4 @@ func writeKeyEvent(w http.ResponseWriter, resp etcdserver.Response, noValueOnSuc",
                " \tif noValueOnSuccess &&",
                "-\t\t(ev.Action == store.Set || ev.Action == store.CompareAndSwap ||",
                "-\t\t\tev.Action == store.Create || ev.Action == store.Update) {",
                "+\t\t(ev.Action == v2store.Set || ev.Action == v2store.CompareAndSwap ||",
                "+\t\t\tev.Action == v2store.Create || ev.Action == v2store.Update) {",
                " \t\tev.Node = nil",
                "@@ -601,3 +601,3 @@ func handleKeyWatch(ctx context.Context, w http.ResponseWriter, resp etcdserver.",
                "-func trimEventPrefix(ev *store.Event, prefix string) *store.Event {",
                "+func trimEventPrefix(ev *v2store.Event, prefix string) *v2store.Event {",
                " \tif ev == nil {",
                "@@ -613,3 +613,3 @@ func trimEventPrefix(ev *store.Event, prefix string) *store.Event {",
                "-func trimNodeExternPrefix(n *store.NodeExtern, prefix string) {",
                "+func trimNodeExternPrefix(n *v2store.NodeExtern, prefix string) {",
                " \tif n == nil {",
                "diff --git a/etcdserver/api/v2http/client_test.go b/etcdserver/api/v2http/client_test.go",
                "index fa6c2d3df..066e7a81c 100644",
                "--- a/etcdserver/api/v2http/client_test.go",
                "+++ b/etcdserver/api/v2http/client_test.go",
                "@@ -37,3 +37,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "@@ -46,3 +46,3 @@ import (",
                "-func mustMarshalEvent(t *testing.T, ev *store.Event) string {",
                "+func mustMarshalEvent(t *testing.T, ev *v2store.Event) string {",
                " \tb := new(bytes.Buffer)",
                "@@ -178,3 +178,3 @@ func (drt dummyRaftTimer) Term() uint64  { return uint64(5) }",
                " type dummyWatcher struct {",
                "-\techan chan *store.Event",
                "+\techan chan *v2store.Event",
                " \tsidx  uint64",
                "@@ -182,3 +182,3 @@ type dummyWatcher struct {",
                "-func (w *dummyWatcher) EventChan() chan *store.Event {",
                "+func (w *dummyWatcher) EventChan() chan *v2store.Event {",
                " \treturn w.echan",
                "@@ -1174,3 +1174,3 @@ func TestWriteEvent(t *testing.T) {",
                " \ttests := []struct {",
                "-\t\tev      *store.Event",
                "+\t\tev      *v2store.Event",
                " \t\tnoValue bool",
                "@@ -1183,6 +1183,6 @@ func TestWriteEvent(t *testing.T) {",
                " \t\t{",
                "-\t\t\t&store.Event{",
                "-\t\t\t\tAction:   store.Get,",
                "-\t\t\t\tNode:     &store.NodeExtern{},",
                "-\t\t\t\tPrevNode: &store.NodeExtern{},",
                "+\t\t\t&v2store.Event{",
                "+\t\t\t\tAction:   v2store.Get,",
                "+\t\t\t\tNode:     &v2store.NodeExtern{},",
                "+\t\t\t\tPrevNode: &v2store.NodeExtern{},",
                " \t\t\t},",
                "@@ -1195,6 +1195,6 @@ func TestWriteEvent(t *testing.T) {",
                " \t\t{",
                "-\t\t\t&store.Event{",
                "-\t\t\t\tAction:   store.Create,",
                "-\t\t\t\tNode:     &store.NodeExtern{},",
                "-\t\t\t\tPrevNode: &store.NodeExtern{},",
                "+\t\t\t&v2store.Event{",
                "+\t\t\t\tAction:   v2store.Create,",
                "+\t\t\t\tNode:     &v2store.NodeExtern{},",
                "+\t\t\t\tPrevNode: &v2store.NodeExtern{},",
                " \t\t\t},",
                "@@ -1541,5 +1541,5 @@ func TestServeKeysGood(t *testing.T) {",
                " \t\tres: etcdserver.Response{",
                "-\t\t\tEvent: &store.Event{",
                "-\t\t\t\tAction: store.Get,",
                "-\t\t\t\tNode:   &store.NodeExtern{},",
                "+\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\tNode:   &v2store.NodeExtern{},",
                " \t\t\t},",
                "@@ -1566,3 +1566,3 @@ func TestServeKeysEvent(t *testing.T) {",
                " \t\twcode int",
                "-\t\tevent *store.Event",
                "+\t\tevent *v2store.Event",
                " \t}{",
                "@@ -1571,5 +1571,5 @@ func TestServeKeysEvent(t *testing.T) {",
                " \t\t\tetcdserver.Response{",
                "-\t\t\t\tEvent: &store.Event{",
                "-\t\t\t\t\tAction: store.Get,",
                "-\t\t\t\t\tNode:   &store.NodeExtern{},",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode:   &v2store.NodeExtern{},",
                " \t\t\t\t},",
                "@@ -1577,5 +1577,5 @@ func TestServeKeysEvent(t *testing.T) {",
                " \t\t\thttp.StatusOK,",
                "-\t\t\t&store.Event{",
                "-\t\t\t\tAction: store.Get,",
                "-\t\t\t\tNode:   &store.NodeExtern{},",
                "+\t\t\t&v2store.Event{",
                "+\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\tNode:   &v2store.NodeExtern{},",
                " \t\t\t},",
                "@@ -1589,5 +1589,5 @@ func TestServeKeysEvent(t *testing.T) {",
                " \t\t\tetcdserver.Response{",
                "-\t\t\t\tEvent: &store.Event{",
                "+\t\t\t\tEvent: &v2store.Event{",
                " \t\t\t\t\tAction: store.CompareAndSwap,",
                "-\t\t\t\t\tNode:   &store.NodeExtern{},",
                "+\t\t\t\t\tNode:   &v2store.NodeExtern{},",
                " \t\t\t\t},",
                "@@ -1595,3 +1595,3 @@ func TestServeKeysEvent(t *testing.T) {",
                " \t\t\thttp.StatusOK,",
                "-\t\t\t&store.Event{",
                "+\t\t\t&v2store.Event{",
                " \t\t\t\tAction: store.CompareAndSwap,",
                "@@ -1636,3 +1636,3 @@ func TestServeKeysWatch(t *testing.T) {",
                " \treq := mustNewRequest(t, \"/foo/bar\")",
                "-\tec := make(chan *store.Event)",
                "+\tec := make(chan *v2store.Event)",
                " \tdw := &dummyWatcher{",
                "@@ -1651,5 +1651,5 @@ func TestServeKeysWatch(t *testing.T) {",
                " \tgo func() {",
                "-\t\tec <- &store.Event{",
                "-\t\t\tAction: store.Get,",
                "-\t\t\tNode:   &store.NodeExtern{},",
                "+\t\tec <- &v2store.Event{",
                "+\t\t\tAction: v2store.Get,",
                "+\t\t\tNode:   &v2store.NodeExtern{},",
                " \t\t}",
                "@@ -1663,5 +1663,5 @@ func TestServeKeysWatch(t *testing.T) {",
                " \t\tt,",
                "-\t\t&store.Event{",
                "-\t\t\tAction: store.Get,",
                "-\t\t\tNode:   &store.NodeExtern{},",
                "+\t\t&v2store.Event{",
                "+\t\t\tAction: v2store.Get,",
                "+\t\t\tNode:   &v2store.NodeExtern{},",
                " \t\t},",
                "@@ -1697,3 +1697,3 @@ func TestHandleWatch(t *testing.T) {",
                " \t}",
                "-\tnoopEv := func(chan *store.Event) {}",
                "+\tnoopEv := func(chan *v2store.Event) {}",
                "@@ -1702,3 +1702,3 @@ func TestHandleWatch(t *testing.T) {",
                " \t\tgetRwRr  func() (http.ResponseWriter, *httptest.ResponseRecorder)",
                "-\t\tdoToChan func(chan *store.Event)",
                "+\t\tdoToChan func(chan *v2store.Event)",
                "@@ -1710,6 +1710,6 @@ func TestHandleWatch(t *testing.T) {",
                " \t\t\tdefaultRwRr,",
                "-\t\t\tfunc(ch chan *store.Event) {",
                "-\t\t\t\tch <- &store.Event{",
                "-\t\t\t\t\tAction: store.Get,",
                "-\t\t\t\t\tNode:   &store.NodeExtern{},",
                "+\t\t\tfunc(ch chan *v2store.Event) {",
                "+\t\t\t\tch <- &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode:   &v2store.NodeExtern{},",
                " \t\t\t\t}",
                "@@ -1719,5 +1719,5 @@ func TestHandleWatch(t *testing.T) {",
                " \t\t\t\tt,",
                "-\t\t\t\t&store.Event{",
                "-\t\t\t\t\tAction: store.Get,",
                "-\t\t\t\t\tNode:   &store.NodeExtern{},",
                "+\t\t\t\t&v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode:   &v2store.NodeExtern{},",
                " \t\t\t\t},",
                "@@ -1729,3 +1729,3 @@ func TestHandleWatch(t *testing.T) {",
                " \t\t\tdefaultRwRr,",
                "-\t\t\tfunc(ch chan *store.Event) {",
                "+\t\t\tfunc(ch chan *v2store.Event) {",
                " \t\t\t\tclose(ch)",
                "@@ -1767,3 +1767,3 @@ func TestHandleWatch(t *testing.T) {",
                " \t\twa := &dummyWatcher{",
                "-\t\t\techan: make(chan *store.Event, 1),",
                "+\t\t\techan: make(chan *v2store.Event, 1),",
                " \t\t\tsidx:  10,",
                "@@ -1810,3 +1810,3 @@ func TestHandleWatchStreaming(t *testing.T) {",
                " \twa := &dummyWatcher{",
                "-\t\techan: make(chan *store.Event),",
                "+\t\techan: make(chan *v2store.Event),",
                " \t}",
                "@@ -1848,5 +1848,5 @@ func TestHandleWatchStreaming(t *testing.T) {",
                " \tselect {",
                "-\tcase wa.echan <- &store.Event{",
                "-\t\tAction: store.Get,",
                "-\t\tNode:   &store.NodeExtern{},",
                "+\tcase wa.echan <- &v2store.Event{",
                "+\t\tAction: v2store.Get,",
                "+\t\tNode:   &v2store.NodeExtern{},",
                " \t}:",
                "@@ -1866,5 +1866,5 @@ func TestHandleWatchStreaming(t *testing.T) {",
                " \t\tt,",
                "-\t\t&store.Event{",
                "-\t\t\tAction: store.Get,",
                "-\t\t\tNode:   &store.NodeExtern{},",
                "+\t\t&v2store.Event{",
                "+\t\t\tAction: v2store.Get,",
                "+\t\t\tNode:   &v2store.NodeExtern{},",
                " \t\t},",
                "@@ -1878,5 +1878,5 @@ func TestHandleWatchStreaming(t *testing.T) {",
                " \tselect {",
                "-\tcase wa.echan <- &store.Event{",
                "-\t\tAction: store.Get,",
                "-\t\tNode:   &store.NodeExtern{},",
                "+\tcase wa.echan <- &v2store.Event{",
                "+\t\tAction: v2store.Get,",
                "+\t\tNode:   &v2store.NodeExtern{},",
                " \t}:",
                "@@ -1912,4 +1912,4 @@ func TestTrimEventPrefix(t *testing.T) {",
                " \ttests := []struct {",
                "-\t\tev  *store.Event",
                "-\t\twev *store.Event",
                "+\t\tev  *v2store.Event",
                "+\t\twev *v2store.Event",
                " \t}{",
                "@@ -1920,21 +1920,21 @@ func TestTrimEventPrefix(t *testing.T) {",
                " \t\t{",
                "-\t\t\t&store.Event{},",
                "-\t\t\t&store.Event{},",
                "+\t\t\t&v2store.Event{},",
                "+\t\t\t&v2store.Event{},",
                " \t\t},",
                " \t\t{",
                "-\t\t\t&store.Event{Node: &store.NodeExtern{Key: \"/abc/def\"}},",
                "-\t\t\t&store.Event{Node: &store.NodeExtern{Key: \"/def\"}},",
                "+\t\t\t&v2store.Event{Node: &v2store.NodeExtern{Key: \"/abc/def\"}},",
                "+\t\t\t&v2store.Event{Node: &v2store.NodeExtern{Key: \"/def\"}},",
                " \t\t},",
                " \t\t{",
                "-\t\t\t&store.Event{PrevNode: &store.NodeExtern{Key: \"/abc/ghi\"}},",
                "-\t\t\t&store.Event{PrevNode: &store.NodeExtern{Key: \"/ghi\"}},",
                "+\t\t\t&v2store.Event{PrevNode: &v2store.NodeExtern{Key: \"/abc/ghi\"}},",
                "+\t\t\t&v2store.Event{PrevNode: &v2store.NodeExtern{Key: \"/ghi\"}},",
                " \t\t},",
                " \t\t{",
                "-\t\t\t&store.Event{",
                "-\t\t\t\tNode:     &store.NodeExtern{Key: \"/abc/def\"},",
                "-\t\t\t\tPrevNode: &store.NodeExtern{Key: \"/abc/ghi\"},",
                "+\t\t\t&v2store.Event{",
                "+\t\t\t\tNode:     &v2store.NodeExtern{Key: \"/abc/def\"},",
                "+\t\t\t\tPrevNode: &v2store.NodeExtern{Key: \"/abc/ghi\"},",
                " \t\t\t},",
                "-\t\t\t&store.Event{",
                "-\t\t\t\tNode:     &store.NodeExtern{Key: \"/def\"},",
                "-\t\t\t\tPrevNode: &store.NodeExtern{Key: \"/ghi\"},",
                "+\t\t\t&v2store.Event{",
                "+\t\t\t\tNode:     &v2store.NodeExtern{Key: \"/def\"},",
                "+\t\t\t\tPrevNode: &v2store.NodeExtern{Key: \"/ghi\"},",
                " \t\t\t},",
                "@@ -1953,4 +1953,4 @@ func TestTrimNodeExternPrefix(t *testing.T) {",
                " \ttests := []struct {",
                "-\t\tn  *store.NodeExtern",
                "-\t\twn *store.NodeExtern",
                "+\t\tn  *v2store.NodeExtern",
                "+\t\twn *v2store.NodeExtern",
                " \t}{",
                "@@ -1961,9 +1961,9 @@ func TestTrimNodeExternPrefix(t *testing.T) {",
                " \t\t{",
                "-\t\t\t&store.NodeExtern{Key: \"/abc/def\"},",
                "-\t\t\t&store.NodeExtern{Key: \"/def\"},",
                "+\t\t\t&v2store.NodeExtern{Key: \"/abc/def\"},",
                "+\t\t\t&v2store.NodeExtern{Key: \"/def\"},",
                " \t\t},",
                " \t\t{",
                "-\t\t\t&store.NodeExtern{",
                "+\t\t\t&v2store.NodeExtern{",
                " \t\t\t\tKey: \"/abc/def\",",
                "-\t\t\t\tNodes: []*store.NodeExtern{",
                "+\t\t\t\tNodes: []*v2store.NodeExtern{",
                " \t\t\t\t\t{Key: \"/abc/def/1\"},",
                "@@ -1972,5 +1972,5 @@ func TestTrimNodeExternPrefix(t *testing.T) {",
                " \t\t\t},",
                "-\t\t\t&store.NodeExtern{",
                "+\t\t\t&v2store.NodeExtern{",
                " \t\t\t\tKey: \"/def\",",
                "-\t\t\t\tNodes: []*store.NodeExtern{",
                "+\t\t\t\tNodes: []*v2store.NodeExtern{",
                " \t\t\t\t\t{Key: \"/def/1\"},",
                "diff --git a/etcdserver/api/v2v3/store.go b/etcdserver/api/v2v3/store.go",
                "index 8a33a15ad..cb034895e 100644",
                "--- a/etcdserver/api/v2v3/store.go",
                "+++ b/etcdserver/api/v2v3/store.go",
                "@@ -26,4 +26,4 @@ import (",
                " \tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                " )",
                "@@ -43,3 +43,3 @@ var errUnsupported = fmt.Errorf(\"TTLs are unsupported\")",
                "-func NewStore(c *clientv3.Client, pfx string) store.Store { return newStore(c, pfx) }",
                "+func NewStore(c *clientv3.Client, pfx string) v2store.Store { return newStore(c, pfx) }",
                "@@ -49,3 +49,3 @@ func (s *v2v3Store) Index() uint64 { panic(\"STUB\") }",
                "-func (s *v2v3Store) Get(nodePath string, recursive, sorted bool) (*store.Event, error) {",
                "+func (s *v2v3Store) Get(nodePath string, recursive, sorted bool) (*v2store.Event, error) {",
                " \tkey := s.mkPath(nodePath)",
                "@@ -68,5 +68,5 @@ func (s *v2v3Store) Get(nodePath string, recursive, sorted bool) (*store.Event,",
                " \t\t}",
                "-\t\treturn &store.Event{",
                "-\t\t\tAction: store.Get,",
                "-\t\t\tNode: &store.NodeExtern{",
                "+\t\treturn &v2store.Event{",
                "+\t\t\tAction: v2store.Get,",
                "+\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\tKey:           nodePath,",
                "@@ -86,4 +86,4 @@ func (s *v2v3Store) Get(nodePath string, recursive, sorted bool) (*store.Event,",
                "-\treturn &store.Event{",
                "-\t\tAction:    store.Get,",
                "+\treturn &v2store.Event{",
                "+\t\tAction:    v2store.Get,",
                " \t\tNode:      s.mkV2Node(kvs[0]),",
                "@@ -93,3 +93,3 @@ func (s *v2v3Store) Get(nodePath string, recursive, sorted bool) (*store.Event,",
                "-func (s *v2v3Store) getDir(nodePath string, recursive, sorted bool, rev int64) ([]*store.NodeExtern, error) {",
                "+func (s *v2v3Store) getDir(nodePath string, recursive, sorted bool, rev int64) ([]*v2store.NodeExtern, error) {",
                " \trootNodes, err := s.getDirDepth(nodePath, 1, rev)",
                "@@ -99,3 +99,3 @@ func (s *v2v3Store) getDir(nodePath string, recursive, sorted bool, rev int64) (",
                " \tnextNodes := rootNodes",
                "-\tnodes := make(map[string]*store.NodeExtern)",
                "+\tnodes := make(map[string]*v2store.NodeExtern)",
                " \t// Breadth walk the subdirectories",
                "@@ -115,3 +115,3 @@ func (s *v2v3Store) getDir(nodePath string, recursive, sorted bool, rev int64) (",
                "-func (s *v2v3Store) getDirDepth(nodePath string, depth int, rev int64) ([]*store.NodeExtern, error) {",
                "+func (s *v2v3Store) getDirDepth(nodePath string, depth int, rev int64) ([]*v2store.NodeExtern, error) {",
                " \tpd := s.mkPathDepth(nodePath, depth)",
                "@@ -122,3 +122,3 @@ func (s *v2v3Store) getDirDepth(nodePath string, depth int, rev int64) ([]*store",
                "-\tnodes := make([]*store.NodeExtern, len(resp.Kvs))",
                "+\tnodes := make([]*v2store.NodeExtern, len(resp.Kvs))",
                " \tfor i, kv := range resp.Kvs {",
                "@@ -133,4 +133,4 @@ func (s *v2v3Store) Set(",
                " \tvalue string,",
                "-\texpireOpts store.TTLOptionSet,",
                "-) (*store.Event, error) {",
                "+\texpireOpts v2store.TTLOptionSet,",
                "+) (*v2store.Event, error) {",
                " \tif expireOpts.Refresh || !expireOpts.ExpireTime.IsZero() {",
                "@@ -164,3 +164,3 @@ func (s *v2v3Store) Set(",
                " \t\tstm.Put(key, value, clientv3.WithPrevKV())",
                "-\t\tstm.Put(s.mkActionKey(), store.Set)",
                "+\t\tstm.Put(s.mkActionKey(), v2store.Set)",
                " \t\treturn nil",
                "@@ -177,3 +177,3 @@ func (s *v2v3Store) Set(",
                " \tcreateRev := resp.Header.Revision",
                "-\tvar pn *store.NodeExtern",
                "+\tvar pn *v2store.NodeExtern",
                " \tif pkv := prevKeyFromPuts(resp); pkv != nil {",
                "@@ -187,5 +187,5 @@ func (s *v2v3Store) Set(",
                " \t}",
                "-\treturn &store.Event{",
                "-\t\tAction: store.Set,",
                "-\t\tNode: &store.NodeExtern{",
                "+\treturn &v2store.Event{",
                "+\t\tAction: v2store.Set,",
                "+\t\tNode: &v2store.NodeExtern{",
                " \t\t\tKey:           nodePath,",
                "@@ -201,3 +201,3 @@ func (s *v2v3Store) Set(",
                "-func (s *v2v3Store) Update(nodePath, newValue string, expireOpts store.TTLOptionSet) (*store.Event, error) {",
                "+func (s *v2v3Store) Update(nodePath, newValue string, expireOpts v2store.TTLOptionSet) (*v2store.Event, error) {",
                " \tif isRoot(nodePath) {",
                "@@ -222,3 +222,3 @@ func (s *v2v3Store) Update(nodePath, newValue string, expireOpts store.TTLOption",
                " \t\tstm.Put(key, newValue, clientv3.WithPrevKV())",
                "-\t\tstm.Put(s.mkActionKey(), store.Update)",
                "+\t\tstm.Put(s.mkActionKey(), v2store.Update)",
                " \t\treturn nil",
                "@@ -235,5 +235,5 @@ func (s *v2v3Store) Update(nodePath, newValue string, expireOpts store.TTLOption",
                " \tpkv := prevKeyFromPuts(resp)",
                "-\treturn &store.Event{",
                "-\t\tAction: store.Update,",
                "-\t\tNode: &store.NodeExtern{",
                "+\treturn &v2store.Event{",
                "+\t\tAction: v2store.Update,",
                "+\t\tNode: &v2store.NodeExtern{",
                " \t\t\tKey:           nodePath,",
                "@@ -253,4 +253,4 @@ func (s *v2v3Store) Create(",
                " \tunique bool,",
                "-\texpireOpts store.TTLOptionSet,",
                "-) (*store.Event, error) {",
                "+\texpireOpts v2store.TTLOptionSet,",
                "+) (*v2store.Event, error) {",
                " \tif isRoot(nodePath) {",
                "@@ -301,3 +301,3 @@ func (s *v2v3Store) Create(",
                " \t\tstm.Put(key, value)",
                "-\t\tstm.Put(s.mkActionKey(), store.Create)",
                "+\t\tstm.Put(s.mkActionKey(), v2store.Create)",
                " \t\treturn nil",
                "@@ -318,5 +318,5 @@ func (s *v2v3Store) Create(",
                "-\treturn &store.Event{",
                "-\t\tAction: store.Create,",
                "-\t\tNode: &store.NodeExtern{",
                "+\treturn &v2store.Event{",
                "+\t\tAction: v2store.Create,",
                "+\t\tNode: &v2store.NodeExtern{",
                " \t\t\tKey:           nodePath,",
                "@@ -336,4 +336,4 @@ func (s *v2v3Store) CompareAndSwap(",
                " \tvalue string,",
                "-\texpireOpts store.TTLOptionSet,",
                "-) (*store.Event, error) {",
                "+\texpireOpts v2store.TTLOptionSet,",
                "+) (*v2store.Event, error) {",
                " \tif isRoot(nodePath) {",
                "@@ -350,3 +350,3 @@ func (s *v2v3Store) CompareAndSwap(",
                " \t\tclientv3.OpPut(key, value, clientv3.WithPrevKV()),",
                "-\t\tclientv3.OpPut(s.mkActionKey(), store.CompareAndSwap),",
                "+\t\tclientv3.OpPut(s.mkActionKey(), v2store.CompareAndSwap),",
                " \t).Else(",
                "@@ -364,5 +364,5 @@ func (s *v2v3Store) CompareAndSwap(",
                " \tpkv := resp.Responses[0].GetResponsePut().PrevKv",
                "-\treturn &store.Event{",
                "-\t\tAction: store.CompareAndSwap,",
                "-\t\tNode: &store.NodeExtern{",
                "+\treturn &v2store.Event{",
                "+\t\tAction: v2store.CompareAndSwap,",
                "+\t\tNode: &v2store.NodeExtern{",
                " \t\t\tKey:           nodePath,",
                "@@ -377,3 +377,3 @@ func (s *v2v3Store) CompareAndSwap(",
                "-func (s *v2v3Store) Delete(nodePath string, dir, recursive bool) (*store.Event, error) {",
                "+func (s *v2v3Store) Delete(nodePath string, dir, recursive bool) (*v2store.Event, error) {",
                " \tif isRoot(nodePath) {",
                "@@ -393,3 +393,3 @@ func (s *v2v3Store) Delete(nodePath string, dir, recursive bool) (*store.Event,",
                " \t}",
                "-\tdels[maxPathDepth] = clientv3.OpPut(s.mkActionKey(), store.Delete)",
                "+\tdels[maxPathDepth] = clientv3.OpPut(s.mkActionKey(), v2store.Delete)",
                "@@ -408,4 +408,4 @@ func (s *v2v3Store) Delete(nodePath string, dir, recursive bool) (*store.Event,",
                " \tdresp := resp.Responses[0].GetResponseDeleteRange()",
                "-\treturn &store.Event{",
                "-\t\tAction:    store.Delete,",
                "+\treturn &v2store.Event{",
                "+\t\tAction:    v2store.Delete,",
                " \t\tPrevNode:  s.mkV2Node(dresp.PrevKvs[0]),",
                "@@ -415,3 +415,3 @@ func (s *v2v3Store) Delete(nodePath string, dir, recursive bool) (*store.Event,",
                "-func (s *v2v3Store) deleteEmptyDir(nodePath string) (*store.Event, error) {",
                "+func (s *v2v3Store) deleteEmptyDir(nodePath string) (*v2store.Event, error) {",
                " \tresp, err := s.c.Txn(s.ctx).If(",
                "@@ -420,3 +420,3 @@ func (s *v2v3Store) deleteEmptyDir(nodePath string) (*store.Event, error) {",
                " \t\tclientv3.OpDelete(s.mkPath(nodePath)+\"/\", clientv3.WithPrevKV()),",
                "-\t\tclientv3.OpPut(s.mkActionKey(), store.Delete),",
                "+\t\tclientv3.OpPut(s.mkActionKey(), v2store.Delete),",
                " \t).Commit()",
                "@@ -432,4 +432,4 @@ func (s *v2v3Store) deleteEmptyDir(nodePath string) (*store.Event, error) {",
                " \t}",
                "-\treturn &store.Event{",
                "-\t\tAction:    store.Delete,",
                "+\treturn &v2store.Event{",
                "+\t\tAction:    v2store.Delete,",
                " \t\tPrevNode:  s.mkV2Node(dresp.PrevKvs[0]),",
                "@@ -439,3 +439,3 @@ func (s *v2v3Store) deleteEmptyDir(nodePath string) (*store.Event, error) {",
                "-func (s *v2v3Store) deleteNode(nodePath string) (*store.Event, error) {",
                "+func (s *v2v3Store) deleteNode(nodePath string) (*v2store.Event, error) {",
                " \tresp, err := s.c.Txn(s.ctx).If(",
                "@@ -444,3 +444,3 @@ func (s *v2v3Store) deleteNode(nodePath string) (*store.Event, error) {",
                " \t\tclientv3.OpDelete(s.mkPath(nodePath), clientv3.WithPrevKV()),",
                "-\t\tclientv3.OpPut(s.mkActionKey(), store.Delete),",
                "+\t\tclientv3.OpPut(s.mkActionKey(), v2store.Delete),",
                " \t).Commit()",
                "@@ -457,5 +457,5 @@ func (s *v2v3Store) deleteNode(nodePath string) (*store.Event, error) {",
                " \tpkv := pkvs[0]",
                "-\treturn &store.Event{",
                "-\t\tAction: store.Delete,",
                "-\t\tNode: &store.NodeExtern{",
                "+\treturn &v2store.Event{",
                "+\t\tAction: v2store.Delete,",
                "+\t\tNode: &v2store.NodeExtern{",
                " \t\t\tKey:           nodePath,",
                "@@ -469,3 +469,3 @@ func (s *v2v3Store) deleteNode(nodePath string) (*store.Event, error) {",
                "-func (s *v2v3Store) CompareAndDelete(nodePath, prevValue string, prevIndex uint64) (*store.Event, error) {",
                "+func (s *v2v3Store) CompareAndDelete(nodePath, prevValue string, prevIndex uint64) (*v2store.Event, error) {",
                " \tif isRoot(nodePath) {",
                "@@ -479,3 +479,3 @@ func (s *v2v3Store) CompareAndDelete(nodePath, prevValue string, prevIndex uint6",
                " \t\tclientv3.OpDelete(key, clientv3.WithPrevKV()),",
                "-\t\tclientv3.OpPut(s.mkActionKey(), store.CompareAndDelete),",
                "+\t\tclientv3.OpPut(s.mkActionKey(), v2store.CompareAndDelete),",
                " \t).Else(",
                "@@ -494,5 +494,5 @@ func (s *v2v3Store) CompareAndDelete(nodePath, prevValue string, prevIndex uint6",
                " \tpkv := resp.Responses[0].GetResponseDeleteRange().PrevKvs[0]",
                "-\treturn &store.Event{",
                "-\t\tAction: store.CompareAndDelete,",
                "-\t\tNode: &store.NodeExtern{",
                "+\treturn &v2store.Event{",
                "+\t\tAction: v2store.CompareAndDelete,",
                "+\t\tNode: &v2store.NodeExtern{",
                " \t\t\tKey:           nodePath,",
                "@@ -550,3 +550,3 @@ func (s *v2v3Store) Save() ([]byte, error)       { panic(\"STUB\") }",
                " func (s *v2v3Store) Recovery(state []byte) error { panic(\"STUB\") }",
                "-func (s *v2v3Store) Clone() store.Store          { panic(\"STUB\") }",
                "+func (s *v2v3Store) Clone() v2store.Store        { panic(\"STUB\") }",
                " func (s *v2v3Store) SaveNoCopy() ([]byte, error) { panic(\"STUB\") }",
                "@@ -588,3 +588,3 @@ func mkV3Rev(v2Rev uint64) int64 {",
                " // mkV2Node creates a V2 NodeExtern from a V3 KeyValue",
                "-func (s *v2v3Store) mkV2Node(kv *mvccpb.KeyValue) *store.NodeExtern {",
                "+func (s *v2v3Store) mkV2Node(kv *mvccpb.KeyValue) *v2store.NodeExtern {",
                " \tif kv == nil {",
                "@@ -592,3 +592,3 @@ func (s *v2v3Store) mkV2Node(kv *mvccpb.KeyValue) *store.NodeExtern {",
                " \t}",
                "-\tn := &store.NodeExtern{",
                "+\tn := &v2store.NodeExtern{",
                " \t\tKey:           string(s.mkNodePath(string(kv.Key))),",
                "diff --git a/etcdserver/api/v2v3/watcher.go b/etcdserver/api/v2v3/watcher.go",
                "index b421d0c0f..698489dd3 100644",
                "--- a/etcdserver/api/v2v3/watcher.go",
                "+++ b/etcdserver/api/v2v3/watcher.go",
                "@@ -22,6 +22,6 @@ import (",
                " \tetcdErr \"github.com/coreos/etcd/error\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " )",
                "-func (s *v2v3Store) Watch(prefix string, recursive, stream bool, sinceIndex uint64) (store.Watcher, error) {",
                "+func (s *v2v3Store) Watch(prefix string, recursive, stream bool, sinceIndex uint64) (v2store.Watcher, error) {",
                " \tctx, cancel := context.WithCancel(s.ctx)",
                "@@ -41,3 +41,3 @@ func (s *v2v3Store) Watch(prefix string, recursive, stream bool, sinceIndex uint",
                "-\tevc, donec := make(chan *store.Event), make(chan struct{})",
                "+\tevc, donec := make(chan *v2store.Event), make(chan struct{})",
                " \tgo func() {",
                "@@ -84,3 +84,3 @@ func (s *v2v3Store) Watch(prefix string, recursive, stream bool, sinceIndex uint",
                "-func (s *v2v3Store) mkV2Events(wr clientv3.WatchResponse) (evs []*store.Event) {",
                "+func (s *v2v3Store) mkV2Events(wr clientv3.WatchResponse) (evs []*v2store.Event) {",
                " \tak := s.mkActionKey()",
                "@@ -99,3 +99,3 @@ func (s *v2v3Store) mkV2Events(wr clientv3.WatchResponse) (evs []*store.Event) {",
                " \t\t}",
                "-\t\tv2ev := &store.Event{",
                "+\t\tv2ev := &v2store.Event{",
                " \t\t\tAction:    string(act.Kv.Value),",
                "@@ -127,3 +127,3 @@ type v2v3Watcher struct {",
                " \tstartRev int64",
                "-\tevc      chan *store.Event",
                "+\tevc      chan *v2store.Event",
                " \tdonec    chan struct{}",
                "@@ -139,2 +139,2 @@ func (w *v2v3Watcher) Remove() {",
                "-func (w *v2v3Watcher) EventChan() chan *store.Event { return w.evc }",
                "+func (w *v2v3Watcher) EventChan() chan *v2store.Event { return w.evc }",
                "diff --git a/etcdserver/apply_v2.go b/etcdserver/apply_v2.go",
                "index 4b2317501..e2c15d4cf 100644",
                "--- a/etcdserver/apply_v2.go",
                "+++ b/etcdserver/apply_v2.go",
                "@@ -23,4 +23,5 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/pkg/pbutil\"",
                "+",
                " \t\"github.com/coreos/go-semver/semver\"",
                "@@ -37,3 +38,3 @@ type ApplierV2 interface {",
                "-func NewApplierV2(s store.Store, c *membership.RaftCluster) ApplierV2 {",
                "+func NewApplierV2(s v2store.Store, c *membership.RaftCluster) ApplierV2 {",
                " \treturn &applierV2store{store: s, cluster: c}",
                "@@ -42,3 +43,3 @@ func NewApplierV2(s store.Store, c *membership.RaftCluster) ApplierV2 {",
                " type applierV2store struct {",
                "-\tstore   store.Store",
                "+\tstore   v2store.Store",
                " \tcluster *membership.RaftCluster",
                "@@ -106,4 +107,4 @@ func (a *applierV2store) Sync(r *RequestV2) Response {",
                "-// applyV2Request interprets r as a call to store.X and returns a Response interpreted",
                "-// from store.Event",
                "+// applyV2Request interprets r as a call to v2store.X",
                "+// and returns a Response interpreted from v2store.Event",
                " func (s *EtcdServer) applyV2Request(r *RequestV2) Response {",
                "@@ -128,5 +129,5 @@ func (s *EtcdServer) applyV2Request(r *RequestV2) Response {",
                "-func (r *RequestV2) TTLOptions() store.TTLOptionSet {",
                "+func (r *RequestV2) TTLOptions() v2store.TTLOptionSet {",
                " \trefresh, _ := pbutil.GetBool(r.Refresh)",
                "-\tttlOptions := store.TTLOptionSet{Refresh: refresh}",
                "+\tttlOptions := v2store.TTLOptionSet{Refresh: refresh}",
                " \tif r.Expiration != 0 {",
                "@@ -137,3 +138,3 @@ func (r *RequestV2) TTLOptions() store.TTLOptionSet {",
                "-func toResponse(ev *store.Event, err error) Response {",
                "+func toResponse(ev *v2store.Event, err error) Response {",
                " \treturn Response{Event: ev, Err: err}",
                "diff --git a/etcdserver/membership/cluster.go b/etcdserver/membership/cluster.go",
                "index 84a8ffe79..55337b859 100644",
                "--- a/etcdserver/membership/cluster.go",
                "+++ b/etcdserver/membership/cluster.go",
                "@@ -29,4 +29,4 @@ import (",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                " \t\"github.com/coreos/etcd/pkg/netutil\"",
                "@@ -45,4 +45,4 @@ type RaftCluster struct {",
                "-\tstore store.Store",
                "-\tbe    backend.Backend",
                "+\tv2store v2store.Store",
                "+\tbe      backend.Backend",
                "@@ -198,3 +198,3 @@ func (c *RaftCluster) SetID(id types.ID) { c.id = id }",
                "-func (c *RaftCluster) SetStore(st store.Store) { c.store = st }",
                "+func (c *RaftCluster) SetStore(st v2store.Store) { c.v2store = st }",
                "@@ -209,4 +209,4 @@ func (c *RaftCluster) Recover(onSet func(*semver.Version)) {",
                "-\tc.members, c.removed = membersFromStore(c.store)",
                "-\tc.version = clusterVersionFromStore(c.store)",
                "+\tc.members, c.removed = membersFromStore(c.v2store)",
                "+\tc.version = clusterVersionFromStore(c.v2store)",
                " \tmustDetectDowngrade(c.version)",
                "@@ -225,3 +225,3 @@ func (c *RaftCluster) Recover(onSet func(*semver.Version)) {",
                " func (c *RaftCluster) ValidateConfigurationChange(cc raftpb.ConfChange) error {",
                "-\tmembers, removed := membersFromStore(c.store)",
                "+\tmembers, removed := membersFromStore(c.v2store)",
                " \tid := types.ID(cc.NodeID)",
                "@@ -288,4 +288,4 @@ func (c *RaftCluster) AddMember(m *Member) {",
                " \tdefer c.Unlock()",
                "-\tif c.store != nil {",
                "-\t\tmustSaveMemberToStore(c.store, m)",
                "+\tif c.v2store != nil {",
                "+\t\tmustSaveMemberToStore(c.v2store, m)",
                " \t}",
                "@@ -305,4 +305,4 @@ func (c *RaftCluster) RemoveMember(id types.ID) {",
                " \tdefer c.Unlock()",
                "-\tif c.store != nil {",
                "-\t\tmustDeleteMemberFromStore(c.store, id)",
                "+\tif c.v2store != nil {",
                "+\t\tmustDeleteMemberFromStore(c.v2store, id)",
                " \t}",
                "@@ -323,4 +323,4 @@ func (c *RaftCluster) UpdateAttributes(id types.ID, attr Attributes) {",
                " \t\tm.Attributes = attr",
                "-\t\tif c.store != nil {",
                "-\t\t\tmustUpdateMemberAttrInStore(c.store, m)",
                "+\t\tif c.v2store != nil {",
                "+\t\t\tmustUpdateMemberAttrInStore(c.v2store, m)",
                " \t\t}",
                "@@ -343,4 +343,4 @@ func (c *RaftCluster) UpdateRaftAttributes(id types.ID, raftAttr RaftAttributes)",
                " \tc.members[id].RaftAttributes = raftAttr",
                "-\tif c.store != nil {",
                "-\t\tmustUpdateMemberInStore(c.store, c.members[id])",
                "+\tif c.v2store != nil {",
                "+\t\tmustUpdateMemberInStore(c.v2store, c.members[id])",
                " \t}",
                "@@ -372,4 +372,4 @@ func (c *RaftCluster) SetVersion(ver *semver.Version, onSet func(*semver.Version",
                " \tmustDetectDowngrade(c.version)",
                "-\tif c.store != nil {",
                "-\t\tmustSaveClusterVersionToStore(c.store, ver)",
                "+\tif c.v2store != nil {",
                "+\t\tmustSaveClusterVersionToStore(c.v2store, ver)",
                " \t}",
                "@@ -433,3 +433,3 @@ func (c *RaftCluster) IsReadyToRemoveMember(id uint64) bool {",
                "-func membersFromStore(st store.Store) (map[types.ID]*Member, map[types.ID]bool) {",
                "+func membersFromStore(st v2store.Store) (map[types.ID]*Member, map[types.ID]bool) {",
                " \tmembers := make(map[types.ID]*Member)",
                "@@ -465,3 +465,3 @@ func membersFromStore(st store.Store) (map[types.ID]*Member, map[types.ID]bool)",
                "-func clusterVersionFromStore(st store.Store) *semver.Version {",
                "+func clusterVersionFromStore(st v2store.Store) *semver.Version {",
                " \te, err := st.Get(path.Join(storePrefix, \"version\"), false, false)",
                "diff --git a/etcdserver/membership/cluster_test.go b/etcdserver/membership/cluster_test.go",
                "index baf55a587..cae4e5540 100644",
                "--- a/etcdserver/membership/cluster_test.go",
                "+++ b/etcdserver/membership/cluster_test.go",
                "@@ -23,3 +23,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/pkg/mock/mockstore\"",
                "@@ -277,3 +277,3 @@ func TestClusterValidateConfigurationChange(t *testing.T) {",
                " \tcl := NewCluster(\"\")",
                "-\tcl.SetStore(store.New())",
                "+\tcl.SetStore(v2store.New())",
                " \tfor i := 1; i <= 4; i++ {",
                "@@ -418,13 +418,13 @@ func TestClusterGenID(t *testing.T) {",
                " func TestNodeToMemberBad(t *testing.T) {",
                "-\ttests := []*store.NodeExtern{",
                "-\t\t{Key: \"/1234\", Nodes: []*store.NodeExtern{",
                "+\ttests := []*v2store.NodeExtern{",
                "+\t\t{Key: \"/1234\", Nodes: []*v2store.NodeExtern{",
                " \t\t\t{Key: \"/1234/strange\"},",
                " \t\t}},",
                "-\t\t{Key: \"/1234\", Nodes: []*store.NodeExtern{",
                "+\t\t{Key: \"/1234\", Nodes: []*v2store.NodeExtern{",
                " \t\t\t{Key: \"/1234/raftAttributes\", Value: stringp(\"garbage\")},",
                " \t\t}},",
                "-\t\t{Key: \"/1234\", Nodes: []*store.NodeExtern{",
                "+\t\t{Key: \"/1234\", Nodes: []*v2store.NodeExtern{",
                " \t\t\t{Key: \"/1234/attributes\", Value: stringp(`{\"name\":\"node1\",\"clientURLs\":null}`)},",
                " \t\t}},",
                "-\t\t{Key: \"/1234\", Nodes: []*store.NodeExtern{",
                "+\t\t{Key: \"/1234\", Nodes: []*v2store.NodeExtern{",
                " \t\t\t{Key: \"/1234/raftAttributes\", Value: stringp(`{\"peerURLs\":null}`)},",
                "@@ -432,3 +432,3 @@ func TestNodeToMemberBad(t *testing.T) {",
                " \t\t}},",
                "-\t\t{Key: \"/1234\", Nodes: []*store.NodeExtern{",
                "+\t\t{Key: \"/1234\", Nodes: []*v2store.NodeExtern{",
                " \t\t\t{Key: \"/1234/raftAttributes\", Value: stringp(`{\"peerURLs\":null}`)},",
                "@@ -436,3 +436,3 @@ func TestNodeToMemberBad(t *testing.T) {",
                " \t\t}},",
                "-\t\t{Key: \"/1234\", Nodes: []*store.NodeExtern{",
                "+\t\t{Key: \"/1234\", Nodes: []*v2store.NodeExtern{",
                " \t\t\t{Key: \"/1234/raftAttributes\", Value: stringp(`{\"peerURLs\":null}`)},",
                "@@ -463,3 +463,3 @@ func TestClusterAddMember(t *testing.T) {",
                " \t\t\t\tfalse,",
                "-\t\t\t\tstore.TTLOptionSet{ExpireTime: store.Permanent},",
                "+\t\t\t\tv2store.TTLOptionSet{ExpireTime: v2store.Permanent},",
                " \t\t\t},",
                "@@ -502,3 +502,3 @@ func TestClusterRemoveMember(t *testing.T) {",
                " \t\t{Name: \"Delete\", Params: []interface{}{MemberStoreKey(1), true, true}},",
                "-\t\t{Name: \"Create\", Params: []interface{}{RemovedMemberStoreKey(1), false, \"\", false, store.TTLOptionSet{ExpireTime: store.Permanent}}},",
                "+\t\t{Name: \"Create\", Params: []interface{}{RemovedMemberStoreKey(1), false, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent}}},",
                " \t}",
                "@@ -546,3 +546,3 @@ func TestClusterUpdateAttributes(t *testing.T) {",
                " func TestNodeToMember(t *testing.T) {",
                "-\tn := &store.NodeExtern{Key: \"/1234\", Nodes: []*store.NodeExtern{",
                "+\tn := &store.NodeExtern{Key: \"/1234\", Nodes: []*v2store.NodeExtern{",
                " \t\t{Key: \"/1234/attributes\", Value: stringp(`{\"name\":\"node1\",\"clientURLs\":null}`)},",
                "diff --git a/etcdserver/membership/store.go b/etcdserver/membership/store.go",
                "index 62e881364..1740c4534 100644",
                "--- a/etcdserver/membership/store.go",
                "+++ b/etcdserver/membership/store.go",
                "@@ -21,4 +21,4 @@ import (",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "@@ -77,3 +77,3 @@ func mustSaveClusterVersionToBackend(be backend.Backend, ver *semver.Version) {",
                "-func mustSaveMemberToStore(s store.Store, m *Member) {",
                "+func mustSaveMemberToStore(s v2store.Store, m *Member) {",
                " \tb, err := json.Marshal(m.RaftAttributes)",
                "@@ -83,3 +83,3 @@ func mustSaveMemberToStore(s store.Store, m *Member) {",
                " \tp := path.Join(MemberStoreKey(m.ID), raftAttributesSuffix)",
                "-\tif _, err := s.Create(p, false, string(b), false, store.TTLOptionSet{ExpireTime: store.Permanent}); err != nil {",
                "+\tif _, err := s.Create(p, false, string(b), false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent}); err != nil {",
                " \t\tplog.Panicf(\"create raftAttributes should never fail: %v\", err)",
                "@@ -88,3 +88,3 @@ func mustSaveMemberToStore(s store.Store, m *Member) {",
                "-func mustDeleteMemberFromStore(s store.Store, id types.ID) {",
                "+func mustDeleteMemberFromStore(s v2store.Store, id types.ID) {",
                " \tif _, err := s.Delete(MemberStoreKey(id), true, true); err != nil {",
                "@@ -92,3 +92,3 @@ func mustDeleteMemberFromStore(s store.Store, id types.ID) {",
                " \t}",
                "-\tif _, err := s.Create(RemovedMemberStoreKey(id), false, \"\", false, store.TTLOptionSet{ExpireTime: store.Permanent}); err != nil {",
                "+\tif _, err := s.Create(RemovedMemberStoreKey(id), false, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent}); err != nil {",
                " \t\tplog.Panicf(\"create removedMember should never fail: %v\", err)",
                "@@ -97,3 +97,3 @@ func mustDeleteMemberFromStore(s store.Store, id types.ID) {",
                "-func mustUpdateMemberInStore(s store.Store, m *Member) {",
                "+func mustUpdateMemberInStore(s v2store.Store, m *Member) {",
                " \tb, err := json.Marshal(m.RaftAttributes)",
                "@@ -103,3 +103,3 @@ func mustUpdateMemberInStore(s store.Store, m *Member) {",
                " \tp := path.Join(MemberStoreKey(m.ID), raftAttributesSuffix)",
                "-\tif _, err := s.Update(p, string(b), store.TTLOptionSet{ExpireTime: store.Permanent}); err != nil {",
                "+\tif _, err := s.Update(p, string(b), v2store.TTLOptionSet{ExpireTime: v2store.Permanent}); err != nil {",
                " \t\tplog.Panicf(\"update raftAttributes should never fail: %v\", err)",
                "@@ -108,3 +108,3 @@ func mustUpdateMemberInStore(s store.Store, m *Member) {",
                "-func mustUpdateMemberAttrInStore(s store.Store, m *Member) {",
                "+func mustUpdateMemberAttrInStore(s v2store.Store, m *Member) {",
                " \tb, err := json.Marshal(m.Attributes)",
                "@@ -114,3 +114,3 @@ func mustUpdateMemberAttrInStore(s store.Store, m *Member) {",
                " \tp := path.Join(MemberStoreKey(m.ID), attributesSuffix)",
                "-\tif _, err := s.Set(p, false, string(b), store.TTLOptionSet{ExpireTime: store.Permanent}); err != nil {",
                "+\tif _, err := s.Set(p, false, string(b), v2store.TTLOptionSet{ExpireTime: v2store.Permanent}); err != nil {",
                " \t\tplog.Panicf(\"update raftAttributes should never fail: %v\", err)",
                "@@ -119,4 +119,4 @@ func mustUpdateMemberAttrInStore(s store.Store, m *Member) {",
                "-func mustSaveClusterVersionToStore(s store.Store, ver *semver.Version) {",
                "-\tif _, err := s.Set(StoreClusterVersionKey(), false, ver.String(), store.TTLOptionSet{ExpireTime: store.Permanent}); err != nil {",
                "+func mustSaveClusterVersionToStore(s v2store.Store, ver *semver.Version) {",
                "+\tif _, err := s.Set(StoreClusterVersionKey(), false, ver.String(), v2store.TTLOptionSet{ExpireTime: v2store.Permanent}); err != nil {",
                " \t\tplog.Panicf(\"save cluster version should never fail: %v\", err)",
                "@@ -127,3 +127,3 @@ func mustSaveClusterVersionToStore(s store.Store, ver *semver.Version) {",
                " // the child nodes of the given node MUST be sorted by key.",
                "-func nodeToMember(n *store.NodeExtern) (*Member, error) {",
                "+func nodeToMember(n *v2store.NodeExtern) (*Member, error) {",
                " \tm := &Member{ID: MustParseMemberIDFromKey(n.Key)}",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 0b3ea768d..138c9650d 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -40,2 +40,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "@@ -43,3 +44,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/raftsnap\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "@@ -114,4 +114,4 @@ type Response struct {",
                " \tIndex   uint64",
                "-\tEvent   *store.Event",
                "-\tWatcher store.Watcher",
                "+\tEvent   *v2store.Event",
                "+\tWatcher v2store.Watcher",
                " \tErr     error",
                "@@ -207,3 +207,3 @@ type EtcdServer struct {",
                "-\tstore       store.Store",
                "+\tv2store     v2store.Store",
                " \tsnapshotter *raftsnap.Snapshotter",
                "@@ -258,3 +258,3 @@ type EtcdServer struct {",
                " func NewServer(cfg ServerConfig) (srv *EtcdServer, err error) {",
                "-\tst := store.New(StoreClusterPrefix, StoreKeysPrefix)",
                "+\tst := v2store.New(StoreClusterPrefix, StoreKeysPrefix)",
                "@@ -416,3 +416,3 @@ func NewServer(cfg ServerConfig) (srv *EtcdServer, err error) {",
                " \t\terrorc:      make(chan error, 1),",
                "-\t\tstore:       st,",
                "+\t\tv2store:     st,",
                " \t\tsnapshotter: ss,",
                "@@ -438,3 +438,3 @@ func NewServer(cfg ServerConfig) (srv *EtcdServer, err error) {",
                "-\tsrv.applyV2 = &applierV2store{store: srv.store, cluster: srv.cluster}",
                "+\tsrv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}",
                "@@ -785,3 +785,3 @@ func (s *EtcdServer) run() {",
                " \t\tcase <-getSyncC():",
                "-\t\t\tif s.store.HasTTLKeys() {",
                "+\t\t\tif s.v2store.HasTTLKeys() {",
                " \t\t\t\ts.sync(s.Cfg.ReqTimeout())",
                "@@ -883,3 +883,3 @@ func (s *EtcdServer) applySnapshot(ep *etcdProgress, apply *apply) {",
                " \tplog.Info(\"recovering store v2...\")",
                "-\tif err := s.store.Recovery(apply.snapshot.Data); err != nil {",
                "+\tif err := s.v2store.Recovery(apply.snapshot.Data); err != nil {",
                " \t\tplog.Panicf(\"recovery store error: %v\", err)",
                "@@ -1049,3 +1049,3 @@ func (s *EtcdServer) LeaderStats() []byte {",
                "-func (s *EtcdServer) StoreStats() []byte { return s.store.JsonStats() }",
                "+func (s *EtcdServer) StoreStats() []byte { return s.v2store.JsonStats() }",
                "@@ -1443,3 +1443,3 @@ func (s *EtcdServer) applyConfChange(cc raftpb.ConfChange, confState *raftpb.Con",
                " func (s *EtcdServer) snapshot(snapi uint64, confState raftpb.ConfState) {",
                "-\tclone := s.store.Clone()",
                "+\tclone := s.v2store.Clone()",
                " \t// commit kv to write metadata (for example: consistent index) to disk.",
                "diff --git a/etcdserver/server_test.go b/etcdserver/server_test.go",
                "index 897895194..34c1d8f0e 100644",
                "--- a/etcdserver/server_test.go",
                "+++ b/etcdserver/server_test.go",
                "@@ -30,2 +30,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "@@ -61,3 +62,3 @@ func TestDoLocalAction(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"GET\", ID: 1, Wait: true},",
                "-\t\t\tResponse{Watcher: store.NewNopWatcher()}, nil, []testutil.Action{{Name: \"Watch\"}},",
                "+\t\t\tResponse{Watcher: v2store.NewNopWatcher()}, nil, []testutil.Action{{Name: \"Watch\"}},",
                " \t\t},",
                "@@ -65,3 +66,3 @@ func TestDoLocalAction(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"GET\", ID: 1},",
                "-\t\t\tResponse{Event: &store.Event{}}, nil,",
                "+\t\t\tResponse{Event: &v2store.Event{}}, nil,",
                " \t\t\t[]testutil.Action{",
                "@@ -75,3 +76,3 @@ func TestDoLocalAction(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"HEAD\", ID: 1},",
                "-\t\t\tResponse{Event: &store.Event{}}, nil,",
                "+\t\t\tResponse{Event: &v2store.Event{}}, nil,",
                " \t\t\t[]testutil.Action{",
                "@@ -169,4 +170,4 @@ func TestApplyRepeat(t *testing.T) {",
                " \tcl := newTestCluster(nil)",
                "-\tst := store.New()",
                "-\tcl.SetStore(store.New())",
                "+\tst := v2store.New()",
                "+\tcl.SetStore(v2store.New())",
                " \tcl.AddMember(&membership.Member{ID: 1234})",
                "@@ -235,3 +236,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"POST\", ID: 1},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -239,3 +240,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"Create\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", false, \"\", true, store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", false, \"\", true, v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -246,3 +247,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"POST\", ID: 1, Expiration: 1337},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -250,3 +251,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"Create\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", false, \"\", true, store.TTLOptionSet{ExpireTime: time.Unix(0, 1337)}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", false, \"\", true, v2store.TTLOptionSet{ExpireTime: time.Unix(0, 1337)}},",
                " \t\t\t\t},",
                "@@ -257,3 +258,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"POST\", ID: 1, Dir: true},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -261,3 +262,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"Create\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", true, \"\", true, store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", true, \"\", true, v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -268,3 +269,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"PUT\", ID: 1},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -272,3 +273,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"Set\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", false, \"\", store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", false, \"\", v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -279,3 +280,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"PUT\", ID: 1, Dir: true},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -283,3 +284,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"Set\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", true, \"\", store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", true, \"\", v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -290,3 +291,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"PUT\", ID: 1, PrevExist: pbutil.Boolp(true)},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -294,3 +295,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"Update\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", \"\", store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", \"\", v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -301,3 +302,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"PUT\", ID: 1, PrevExist: pbutil.Boolp(false)},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -305,3 +306,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"Create\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", false, \"\", false, store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", false, \"\", false, v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -312,3 +313,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"PUT\", ID: 1, PrevExist: pbutil.Boolp(true), PrevIndex: 1},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -316,3 +317,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"CompareAndSwap\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", \"\", uint64(1), \"\", store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", \"\", uint64(1), \"\", v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -323,3 +324,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"PUT\", ID: 1, PrevExist: pbutil.Boolp(false), PrevIndex: 1},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -327,3 +328,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"Create\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", false, \"\", false, store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", false, \"\", false, v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -334,3 +335,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"PUT\", ID: 1, PrevIndex: 1},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -338,3 +339,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"CompareAndSwap\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", \"\", uint64(1), \"\", store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", \"\", uint64(1), \"\", v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -345,3 +346,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"PUT\", ID: 1, PrevValue: \"bar\"},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -349,3 +350,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"CompareAndSwap\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", \"bar\", uint64(0), \"\", store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", \"bar\", uint64(0), \"\", v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -356,3 +357,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"PUT\", ID: 1, PrevIndex: 1, PrevValue: \"bar\"},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -360,3 +361,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\t\t\tName:   \"CompareAndSwap\",",
                "-\t\t\t\t\tParams: []interface{}{\"\", \"bar\", uint64(1), \"\", store.TTLOptionSet{ExpireTime: time.Time{}}},",
                "+\t\t\t\t\tParams: []interface{}{\"\", \"bar\", uint64(1), \"\", v2store.TTLOptionSet{ExpireTime: time.Time{}}},",
                " \t\t\t\t},",
                "@@ -367,3 +368,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"DELETE\", ID: 1},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -378,3 +379,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"DELETE\", ID: 1, PrevIndex: 1},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -389,3 +390,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"DELETE\", ID: 1, PrevValue: \"bar\"},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -400,3 +401,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"DELETE\", ID: 1, PrevIndex: 5, PrevValue: \"bar\"},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -411,3 +412,3 @@ func TestApplyRequest(t *testing.T) {",
                " \t\t\tpb.Request{Method: \"QGET\", ID: 1},",
                "-\t\t\tResponse{Event: &store.Event{}},",
                "+\t\t\tResponse{Event: &v2store.Event{}},",
                " \t\t\t[]testutil.Action{",
                "@@ -487,3 +488,3 @@ func TestApplyConfChangeError(t *testing.T) {",
                " \tcl := membership.NewCluster(\"\")",
                "-\tcl.SetStore(store.New())",
                "+\tcl.SetStore(v2store.New())",
                " \tfor i := 1; i <= 4; i++ {",
                "@@ -551,3 +552,3 @@ func TestApplyConfChangeShouldStop(t *testing.T) {",
                " \tcl := membership.NewCluster(\"\")",
                "-\tcl.SetStore(store.New())",
                "+\tcl.SetStore(v2store.New())",
                " \tfor i := 1; i <= 3; i++ {",
                "@@ -592,3 +593,3 @@ func TestApplyConfigChangeUpdatesConsistIndex(t *testing.T) {",
                " \tcl := membership.NewCluster(\"\")",
                "-\tcl.SetStore(store.New())",
                "+\tcl.SetStore(v2store.New())",
                " \tcl.AddMember(&membership.Member{ID: types.ID(1)})",
                "@@ -635,3 +636,3 @@ func TestApplyMultiConfChangeShouldStop(t *testing.T) {",
                " \tcl := membership.NewCluster(\"\")",
                "-\tcl.SetStore(store.New())",
                "+\tcl.SetStore(v2store.New())",
                " \tfor i := 1; i <= 5; i++ {",
                "@@ -704,3 +705,3 @@ func TestDoProposal(t *testing.T) {",
                " \t\t// resp.Index is set in Do() based on the raft state; may either be 0 or 1",
                "-\t\twresp := Response{Event: &store.Event{}, Index: resp.Index}",
                "+\t\twresp := Response{Event: &v2store.Event{}, Index: resp.Index}",
                " \t\tif !reflect.DeepEqual(resp, wresp) {",
                "@@ -1226,3 +1227,3 @@ func TestRemoveMember(t *testing.T) {",
                " \tst := store.New()",
                "-\tcl.SetStore(store.New())",
                "+\tcl.SetStore(v2store.New())",
                " \tcl.AddMember(&membership.Member{ID: 1234})",
                "diff --git a/etcdserver/snapshot_merge.go b/etcdserver/snapshot_merge.go",
                "index 20894e811..501613d89 100644",
                "--- a/etcdserver/snapshot_merge.go",
                "+++ b/etcdserver/snapshot_merge.go",
                "@@ -29,3 +29,3 @@ func (s *EtcdServer) createMergedSnapshotMessage(m raftpb.Message, snapt, snapi",
                " \t// get a snapshot of v2 store as []byte",
                "-\tclone := s.store.Clone()",
                "+\tclone := s.v2store.Clone()",
                " \td, err := clone.SaveNoCopy()",
                "diff --git a/etcdserver/v2_server.go b/etcdserver/v2_server.go",
                "index 90164e3f7..02c4db518 100644",
                "--- a/etcdserver/v2_server.go",
                "+++ b/etcdserver/v2_server.go",
                "@@ -21,3 +21,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " )",
                "@@ -41,3 +41,3 @@ type reqV2HandlerEtcdServer struct {",
                " type reqV2HandlerStore struct {",
                "-\tstore   store.Store",
                "+\tstore   v2store.Store",
                " \tapplier ApplierV2",
                "@@ -45,3 +45,3 @@ type reqV2HandlerStore struct {",
                "-func NewStoreRequestV2Handler(s store.Store, applier ApplierV2) RequestV2Handler {",
                "+func NewStoreRequestV2Handler(s v2store.Store, applier ApplierV2) RequestV2Handler {",
                " \treturn &reqV2HandlerStore{s, applier}",
                "@@ -124,3 +124,3 @@ func (s *EtcdServer) Do(ctx context.Context, r pb.Request) (Response, error) {",
                " \t\treqV2HandlerStore: reqV2HandlerStore{",
                "-\t\t\tstore:   s.store,",
                "+\t\t\tstore:   s.v2store,",
                " \t\t\tapplier: s.applyV2,",
                "diff --git a/etcdserver/v2auth/auth_test.go b/etcdserver/v2auth/auth_test.go",
                "index d083d45ab..5092e5ece 100644",
                "--- a/etcdserver/v2auth/auth_test.go",
                "+++ b/etcdserver/v2auth/auth_test.go",
                "@@ -25,3 +25,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\tetcdstore \"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " )",
                "@@ -166,5 +166,5 @@ func (td *testDoer) Do(_ context.Context, req etcdserverpb.Request) (etcdserver.",
                " \t\treturn etcdserver.Response{",
                "-\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\tKey:   StorePermsPrefix + \"/users/cat\",",
                "@@ -204,6 +204,6 @@ func TestAllUsers(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "-\t\t\t\t\t\tNodes: etcdstore.NodeExterns([]*etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                "+\t\t\t\t\t\tNodes: v2store.NodeExterns([]*v2store.NodeExtern{",
                " \t\t\t\t\t\t\t{",
                "@@ -237,5 +237,5 @@ func TestGetAndDeleteUser(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/users/cat\",",
                "@@ -268,6 +268,6 @@ func TestAllRoles(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "-\t\t\t\t\t\tNodes: etcdstore.NodeExterns([]*etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                "+\t\t\t\t\t\tNodes: v2store.NodeExterns([]*v2store.NodeExtern{",
                " \t\t\t\t\t\t\t{",
                "@@ -302,5 +302,5 @@ func TestGetAndDeleteRole(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/roles/animal\",",
                "@@ -333,5 +333,5 @@ func TestEnsure(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Set,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Set,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey: StorePermsPrefix,",
                "@@ -342,5 +342,5 @@ func TestEnsure(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Set,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Set,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey: StorePermsPrefix + \"/users/\",",
                "@@ -351,5 +351,5 @@ func TestEnsure(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Set,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Set,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey: StorePermsPrefix + \"/roles/\",",
                "@@ -387,5 +387,5 @@ func TestCreateAndUpdateUser(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/users/cat\",",
                "@@ -396,5 +396,5 @@ func TestCreateAndUpdateUser(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/users/cat\",",
                "@@ -407,5 +407,5 @@ func TestCreateAndUpdateUser(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Update,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Update,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/users/cat\",",
                "@@ -416,5 +416,5 @@ func TestCreateAndUpdateUser(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Update,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Update,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/users/cat\",",
                "@@ -461,5 +461,5 @@ func TestUpdateRole(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/roles/animal\",",
                "@@ -472,5 +472,5 @@ func TestUpdateRole(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Update,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Update,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/roles/animal\",",
                "@@ -501,5 +501,5 @@ func TestCreateRole(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Create,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Create,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/roles/animal\",",
                "@@ -540,5 +540,5 @@ func TestEnableAuth(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/enabled\",",
                "@@ -549,5 +549,5 @@ func TestEnableAuth(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/user/root\",",
                "@@ -563,5 +563,5 @@ func TestEnableAuth(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Create,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Create,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/roles/guest\",",
                "@@ -572,5 +572,5 @@ func TestEnableAuth(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Update,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Update,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/enabled\",",
                "@@ -596,5 +596,5 @@ func TestDisableAuth(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/enabled\",",
                "@@ -605,5 +605,5 @@ func TestDisableAuth(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Get,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Get,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/enabled\",",
                "@@ -616,5 +616,5 @@ func TestDisableAuth(t *testing.T) {",
                " \t\t\t{",
                "-\t\t\t\tEvent: &etcdstore.Event{",
                "-\t\t\t\t\tAction: etcdstore.Update,",
                "-\t\t\t\t\tNode: &etcdstore.NodeExtern{",
                "+\t\t\t\tEvent: &v2store.Event{",
                "+\t\t\t\t\tAction: v2store.Update,",
                "+\t\t\t\t\tNode: &v2store.NodeExtern{",
                " \t\t\t\t\t\tKey:   StorePermsPrefix + \"/enabled\",",
                "diff --git a/etcdserver/v2store/doc.go b/etcdserver/v2store/doc.go",
                "new file mode 100644",
                "index 000000000..1933e4cd5",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/doc.go",
                "@@ -0,0 +1,17 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package v2store defines etcd's in-memory key/value store in v2 API.",
                "+// To be deprecated in favor of v3 storage.",
                "+package v2store",
                "diff --git a/etcdserver/v2store/event.go b/etcdserver/v2store/event.go",
                "new file mode 100644",
                "index 000000000..33e901744",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/event.go",
                "@@ -0,0 +1,71 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+const (",
                "+\tGet              = \"get\"",
                "+\tCreate           = \"create\"",
                "+\tSet              = \"set\"",
                "+\tUpdate           = \"update\"",
                "+\tDelete           = \"delete\"",
                "+\tCompareAndSwap   = \"compareAndSwap\"",
                "+\tCompareAndDelete = \"compareAndDelete\"",
                "+\tExpire           = \"expire\"",
                "+)",
                "+",
                "+type Event struct {",
                "+\tAction    string      `json:\"action\"`",
                "+\tNode      *NodeExtern `json:\"node,omitempty\"`",
                "+\tPrevNode  *NodeExtern `json:\"prevNode,omitempty\"`",
                "+\tEtcdIndex uint64      `json:\"-\"`",
                "+\tRefresh   bool        `json:\"refresh,omitempty\"`",
                "+}",
                "+",
                "+func newEvent(action string, key string, modifiedIndex, createdIndex uint64) *Event {",
                "+\tn := &NodeExtern{",
                "+\t\tKey:           key,",
                "+\t\tModifiedIndex: modifiedIndex,",
                "+\t\tCreatedIndex:  createdIndex,",
                "+\t}",
                "+",
                "+\treturn &Event{",
                "+\t\tAction: action,",
                "+\t\tNode:   n,",
                "+\t}",
                "+}",
                "+",
                "+func (e *Event) IsCreated() bool {",
                "+\tif e.Action == Create {",
                "+\t\treturn true",
                "+\t}",
                "+\treturn e.Action == Set && e.PrevNode == nil",
                "+}",
                "+",
                "+func (e *Event) Index() uint64 {",
                "+\treturn e.Node.ModifiedIndex",
                "+}",
                "+",
                "+func (e *Event) Clone() *Event {",
                "+\treturn &Event{",
                "+\t\tAction:    e.Action,",
                "+\t\tEtcdIndex: e.EtcdIndex,",
                "+\t\tNode:      e.Node.Clone(),",
                "+\t\tPrevNode:  e.PrevNode.Clone(),",
                "+\t}",
                "+}",
                "+",
                "+func (e *Event) SetRefresh() {",
                "+\te.Refresh = true",
                "+}",
                "diff --git a/etcdserver/v2store/event_history.go b/etcdserver/v2store/event_history.go",
                "new file mode 100644",
                "index 000000000..c7f3c730b",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/event_history.go",
                "@@ -0,0 +1,129 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"path\"",
                "+\t\"strings\"",
                "+\t\"sync\"",
                "+",
                "+\tetcdErr \"github.com/coreos/etcd/error\"",
                "+)",
                "+",
                "+type EventHistory struct {",
                "+\tQueue      eventQueue",
                "+\tStartIndex uint64",
                "+\tLastIndex  uint64",
                "+\trwl        sync.RWMutex",
                "+}",
                "+",
                "+func newEventHistory(capacity int) *EventHistory {",
                "+\treturn &EventHistory{",
                "+\t\tQueue: eventQueue{",
                "+\t\t\tCapacity: capacity,",
                "+\t\t\tEvents:   make([]*Event, capacity),",
                "+\t\t},",
                "+\t}",
                "+}",
                "+",
                "+// addEvent function adds event into the eventHistory",
                "+func (eh *EventHistory) addEvent(e *Event) *Event {",
                "+\teh.rwl.Lock()",
                "+\tdefer eh.rwl.Unlock()",
                "+",
                "+\teh.Queue.insert(e)",
                "+",
                "+\teh.LastIndex = e.Index()",
                "+",
                "+\teh.StartIndex = eh.Queue.Events[eh.Queue.Front].Index()",
                "+",
                "+\treturn e",
                "+}",
                "+",
                "+// scan enumerates events from the index history and stops at the first point",
                "+// where the key matches.",
                "+func (eh *EventHistory) scan(key string, recursive bool, index uint64) (*Event, *etcdErr.Error) {",
                "+\teh.rwl.RLock()",
                "+\tdefer eh.rwl.RUnlock()",
                "+",
                "+\t// index should be after the event history's StartIndex",
                "+\tif index < eh.StartIndex {",
                "+\t\treturn nil,",
                "+\t\t\tetcdErr.NewError(etcdErr.EcodeEventIndexCleared,",
                "+\t\t\t\tfmt.Sprintf(\"the requested history has been cleared [%v/%v]\",",
                "+\t\t\t\t\teh.StartIndex, index), 0)",
                "+\t}",
                "+",
                "+\t// the index should come before the size of the queue minus the duplicate count",
                "+\tif index > eh.LastIndex { // future index",
                "+\t\treturn nil, nil",
                "+\t}",
                "+",
                "+\toffset := index - eh.StartIndex",
                "+\ti := (eh.Queue.Front + int(offset)) % eh.Queue.Capacity",
                "+",
                "+\tfor {",
                "+\t\te := eh.Queue.Events[i]",
                "+",
                "+\t\tif !e.Refresh {",
                "+\t\t\tok := (e.Node.Key == key)",
                "+",
                "+\t\t\tif recursive {",
                "+\t\t\t\t// add tailing slash",
                "+\t\t\t\tnkey := path.Clean(key)",
                "+\t\t\t\tif nkey[len(nkey)-1] != '/' {",
                "+\t\t\t\t\tnkey = nkey + \"/\"",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tok = ok || strings.HasPrefix(e.Node.Key, nkey)",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (e.Action == Delete || e.Action == Expire) && e.PrevNode != nil && e.PrevNode.Dir {",
                "+\t\t\t\tok = ok || strings.HasPrefix(key, e.PrevNode.Key)",
                "+\t\t\t}",
                "+",
                "+\t\t\tif ok {",
                "+\t\t\t\treturn e, nil",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\ti = (i + 1) % eh.Queue.Capacity",
                "+",
                "+\t\tif i == eh.Queue.Back {",
                "+\t\t\treturn nil, nil",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// clone will be protected by a stop-world lock",
                "+// do not need to obtain internal lock",
                "+func (eh *EventHistory) clone() *EventHistory {",
                "+\tclonedQueue := eventQueue{",
                "+\t\tCapacity: eh.Queue.Capacity,",
                "+\t\tEvents:   make([]*Event, eh.Queue.Capacity),",
                "+\t\tSize:     eh.Queue.Size,",
                "+\t\tFront:    eh.Queue.Front,",
                "+\t\tBack:     eh.Queue.Back,",
                "+\t}",
                "+",
                "+\tcopy(clonedQueue.Events, eh.Queue.Events)",
                "+\treturn &EventHistory{",
                "+\t\tStartIndex: eh.StartIndex,",
                "+\t\tQueue:      clonedQueue,",
                "+\t\tLastIndex:  eh.LastIndex,",
                "+\t}",
                "+",
                "+}",
                "diff --git a/etcdserver/v2store/event_queue.go b/etcdserver/v2store/event_queue.go",
                "new file mode 100644",
                "index 000000000..7ea03de8c",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/event_queue.go",
                "@@ -0,0 +1,34 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+type eventQueue struct {",
                "+\tEvents   []*Event",
                "+\tSize     int",
                "+\tFront    int",
                "+\tBack     int",
                "+\tCapacity int",
                "+}",
                "+",
                "+func (eq *eventQueue) insert(e *Event) {",
                "+\teq.Events[eq.Back] = e",
                "+\teq.Back = (eq.Back + 1) % eq.Capacity",
                "+",
                "+\tif eq.Size == eq.Capacity { //dequeue",
                "+\t\teq.Front = (eq.Front + 1) % eq.Capacity",
                "+\t} else {",
                "+\t\teq.Size++",
                "+\t}",
                "+}",
                "diff --git a/etcdserver/v2store/event_test.go b/etcdserver/v2store/event_test.go",
                "new file mode 100644",
                "index 000000000..ee0103c56",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/event_test.go",
                "@@ -0,0 +1,162 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"testing\"",
                "+",
                "+\tetcdErr \"github.com/coreos/etcd/error\"",
                "+)",
                "+",
                "+// TestEventQueue tests a queue with capacity = 100",
                "+// Add 200 events into that queue, and test if the",
                "+// previous 100 events have been swapped out.",
                "+func TestEventQueue(t *testing.T) {",
                "+",
                "+\teh := newEventHistory(100)",
                "+",
                "+\t// Add",
                "+\tfor i := 0; i < 200; i++ {",
                "+\t\te := newEvent(Create, \"/foo\", uint64(i), uint64(i))",
                "+\t\teh.addEvent(e)",
                "+\t}",
                "+",
                "+\t// Test",
                "+\tj := 100",
                "+\ti := eh.Queue.Front",
                "+\tn := eh.Queue.Size",
                "+\tfor ; n > 0; n-- {",
                "+\t\te := eh.Queue.Events[i]",
                "+\t\tif e.Index() != uint64(j) {",
                "+\t\t\tt.Fatalf(\"queue error!\")",
                "+\t\t}",
                "+\t\tj++",
                "+\t\ti = (i + 1) % eh.Queue.Capacity",
                "+\t}",
                "+}",
                "+",
                "+func TestScanHistory(t *testing.T) {",
                "+\teh := newEventHistory(100)",
                "+",
                "+\t// Add",
                "+\teh.addEvent(newEvent(Create, \"/foo\", 1, 1))",
                "+\teh.addEvent(newEvent(Create, \"/foo/bar\", 2, 2))",
                "+\teh.addEvent(newEvent(Create, \"/foo/foo\", 3, 3))",
                "+\teh.addEvent(newEvent(Create, \"/foo/bar/bar\", 4, 4))",
                "+\teh.addEvent(newEvent(Create, \"/foo/foo/foo\", 5, 5))",
                "+",
                "+\t// Delete a dir",
                "+\tde := newEvent(Delete, \"/foo\", 6, 6)",
                "+\tde.PrevNode = newDir(nil, \"/foo\", 1, nil, Permanent).Repr(false, false, nil)",
                "+\teh.addEvent(de)",
                "+",
                "+\te, err := eh.scan(\"/foo\", false, 1)",
                "+\tif err != nil || e.Index() != 1 {",
                "+\t\tt.Fatalf(\"scan error [/foo] [1] %d (%v)\", e.Index(), err)",
                "+\t}",
                "+",
                "+\te, err = eh.scan(\"/foo/bar\", false, 1)",
                "+",
                "+\tif err != nil || e.Index() != 2 {",
                "+\t\tt.Fatalf(\"scan error [/foo/bar] [2] %d (%v)\", e.Index(), err)",
                "+\t}",
                "+",
                "+\te, err = eh.scan(\"/foo/bar\", true, 3)",
                "+",
                "+\tif err != nil || e.Index() != 4 {",
                "+\t\tt.Fatalf(\"scan error [/foo/bar/bar] [4] %d (%v)\", e.Index(), err)",
                "+\t}",
                "+",
                "+\te, err = eh.scan(\"/foo/foo/foo\", false, 6)",
                "+\tif err != nil || e.Index() != 6 {",
                "+\t\tt.Fatalf(\"scan error [/foo/foo/foo] [6] %d (%v)\", e.Index(), err)",
                "+\t}",
                "+",
                "+\te, _ = eh.scan(\"/foo/bar\", true, 7)",
                "+\tif e != nil {",
                "+\t\tt.Fatalf(\"bad index shoud reuturn nil\")",
                "+\t}",
                "+}",
                "+",
                "+func TestEventIndexHistoryCleared(t *testing.T) {",
                "+\teh := newEventHistory(5)",
                "+",
                "+\t// Add",
                "+\teh.addEvent(newEvent(Create, \"/foo\", 1, 1))",
                "+\teh.addEvent(newEvent(Create, \"/foo/bar\", 2, 2))",
                "+\teh.addEvent(newEvent(Create, \"/foo/foo\", 3, 3))",
                "+\teh.addEvent(newEvent(Create, \"/foo/bar/bar\", 4, 4))",
                "+\teh.addEvent(newEvent(Create, \"/foo/foo/foo\", 5, 5))",
                "+",
                "+\t// Add a new event which will replace/de-queue the first entry",
                "+\teh.addEvent(newEvent(Create, \"/foo/bar/bar/bar\", 6, 6))",
                "+",
                "+\t// test for the event which has been replaced.",
                "+\t_, err := eh.scan(\"/foo\", false, 1)",
                "+\tif err == nil || err.ErrorCode != etcdErr.EcodeEventIndexCleared {",
                "+\t\tt.Fatalf(\"scan error cleared index should return err with %d got (%v)\", etcdErr.EcodeEventIndexCleared, err)",
                "+\t}",
                "+}",
                "+",
                "+// TestFullEventQueue tests a queue with capacity = 10",
                "+// Add 1000 events into that queue, and test if scanning",
                "+// works still for previous events.",
                "+func TestFullEventQueue(t *testing.T) {",
                "+",
                "+\teh := newEventHistory(10)",
                "+",
                "+\t// Add",
                "+\tfor i := 0; i < 1000; i++ {",
                "+\t\tce := newEvent(Create, \"/foo\", uint64(i), uint64(i))",
                "+\t\teh.addEvent(ce)",
                "+\t\te, err := eh.scan(\"/foo\", true, uint64(i-1))",
                "+\t\tif i > 0 {",
                "+\t\t\tif e == nil || err != nil {",
                "+\t\t\t\tt.Fatalf(\"scan error [/foo] [%v] %v\", i-1, i)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestCloneEvent(t *testing.T) {",
                "+\te1 := &Event{",
                "+\t\tAction:    Create,",
                "+\t\tEtcdIndex: 1,",
                "+\t\tNode:      nil,",
                "+\t\tPrevNode:  nil,",
                "+\t}",
                "+\te2 := e1.Clone()",
                "+\tif e2.Action != Create {",
                "+\t\tt.Fatalf(\"Action=%q, want %q\", e2.Action, Create)",
                "+\t}",
                "+\tif e2.EtcdIndex != e1.EtcdIndex {",
                "+\t\tt.Fatalf(\"EtcdIndex=%d, want %d\", e2.EtcdIndex, e1.EtcdIndex)",
                "+\t}",
                "+\t// Changing the cloned node should not affect the original",
                "+\te2.Action = Delete",
                "+\te2.EtcdIndex = uint64(5)",
                "+\tif e1.Action != Create {",
                "+\t\tt.Fatalf(\"Action=%q, want %q\", e1.Action, Create)",
                "+\t}",
                "+\tif e1.EtcdIndex != uint64(1) {",
                "+\t\tt.Fatalf(\"EtcdIndex=%d, want %d\", e1.EtcdIndex, uint64(1))",
                "+\t}",
                "+\tif e2.Action != Delete {",
                "+\t\tt.Fatalf(\"Action=%q, want %q\", e2.Action, Delete)",
                "+\t}",
                "+\tif e2.EtcdIndex != uint64(5) {",
                "+\t\tt.Fatalf(\"EtcdIndex=%d, want %d\", e2.EtcdIndex, uint64(5))",
                "+\t}",
                "+}",
                "diff --git a/etcdserver/v2store/heap_test.go b/etcdserver/v2store/heap_test.go",
                "new file mode 100644",
                "index 000000000..9c18e150d",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/heap_test.go",
                "@@ -0,0 +1,94 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+)",
                "+",
                "+func TestHeapPushPop(t *testing.T) {",
                "+\th := newTtlKeyHeap()",
                "+",
                "+\t// add from older expire time to earlier expire time",
                "+\t// the path is equal to ttl from now",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tpath := fmt.Sprintf(\"%v\", 10-i)",
                "+\t\tm := time.Duration(10 - i)",
                "+\t\tn := newKV(nil, path, path, 0, nil, time.Now().Add(time.Second*m))",
                "+\t\th.push(n)",
                "+\t}",
                "+",
                "+\tmin := time.Now()",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tnode := h.pop()",
                "+\t\tif node.ExpireTime.Before(min) {",
                "+\t\t\tt.Fatal(\"heap sort wrong!\")",
                "+\t\t}",
                "+\t\tmin = node.ExpireTime",
                "+\t}",
                "+",
                "+}",
                "+",
                "+func TestHeapUpdate(t *testing.T) {",
                "+\th := newTtlKeyHeap()",
                "+",
                "+\tkvs := make([]*node, 10)",
                "+",
                "+\t// add from older expire time to earlier expire time",
                "+\t// the path is equal to ttl from now",
                "+\tfor i := range kvs {",
                "+\t\tpath := fmt.Sprintf(\"%v\", 10-i)",
                "+\t\tm := time.Duration(10 - i)",
                "+\t\tn := newKV(nil, path, path, 0, nil, time.Now().Add(time.Second*m))",
                "+\t\tkvs[i] = n",
                "+\t\th.push(n)",
                "+\t}",
                "+",
                "+\t// Path 7",
                "+\tkvs[3].ExpireTime = time.Now().Add(time.Second * 11)",
                "+",
                "+\t// Path 5",
                "+\tkvs[5].ExpireTime = time.Now().Add(time.Second * 12)",
                "+",
                "+\th.update(kvs[3])",
                "+\th.update(kvs[5])",
                "+",
                "+\tmin := time.Now()",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tnode := h.pop()",
                "+\t\tif node.ExpireTime.Before(min) {",
                "+\t\t\tt.Fatal(\"heap sort wrong!\")",
                "+\t\t}",
                "+\t\tmin = node.ExpireTime",
                "+",
                "+\t\tif i == 8 {",
                "+\t\t\tif node.Path != \"7\" {",
                "+\t\t\t\tt.Fatal(\"heap sort wrong!\", node.Path)",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tif i == 9 {",
                "+\t\t\tif node.Path != \"5\" {",
                "+\t\t\t\tt.Fatal(\"heap sort wrong!\")",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t}",
                "+",
                "+}",
                "diff --git a/etcdserver/v2store/metrics.go b/etcdserver/v2store/metrics.go",
                "new file mode 100644",
                "index 000000000..ad72cb914",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/metrics.go",
                "@@ -0,0 +1,130 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import \"github.com/prometheus/client_golang/prometheus\"",
                "+",
                "+// Set of raw Prometheus metrics.",
                "+// Labels",
                "+// * action = declared in event.go",
                "+// * outcome = Outcome",
                "+// Do not increment directly, use Report* methods.",
                "+var (",
                "+\treadCounter = prometheus.NewCounterVec(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"store\",",
                "+\t\t\tName:      \"reads_total\",",
                "+\t\t\tHelp:      \"Total number of reads action by (get/getRecursive), local to this member.\",",
                "+\t\t}, []string{\"action\"})",
                "+",
                "+\twriteCounter = prometheus.NewCounterVec(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"store\",",
                "+\t\t\tName:      \"writes_total\",",
                "+\t\t\tHelp:      \"Total number of writes (e.g. set/compareAndDelete) seen by this member.\",",
                "+\t\t}, []string{\"action\"})",
                "+",
                "+\treadFailedCounter = prometheus.NewCounterVec(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"store\",",
                "+\t\t\tName:      \"reads_failed_total\",",
                "+\t\t\tHelp:      \"Failed read actions by (get/getRecursive), local to this member.\",",
                "+\t\t}, []string{\"action\"})",
                "+",
                "+\twriteFailedCounter = prometheus.NewCounterVec(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"store\",",
                "+\t\t\tName:      \"writes_failed_total\",",
                "+\t\t\tHelp:      \"Failed write actions (e.g. set/compareAndDelete), seen by this member.\",",
                "+\t\t}, []string{\"action\"})",
                "+",
                "+\texpireCounter = prometheus.NewCounter(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"store\",",
                "+\t\t\tName:      \"expires_total\",",
                "+\t\t\tHelp:      \"Total number of expired keys.\",",
                "+\t\t})",
                "+",
                "+\twatchRequests = prometheus.NewCounter(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"store\",",
                "+\t\t\tName:      \"watch_requests_total\",",
                "+\t\t\tHelp:      \"Total number of incoming watch requests (new or reestablished).\",",
                "+\t\t})",
                "+",
                "+\twatcherCount = prometheus.NewGauge(",
                "+\t\tprometheus.GaugeOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"store\",",
                "+\t\t\tName:      \"watchers\",",
                "+\t\t\tHelp:      \"Count of currently active watchers.\",",
                "+\t\t})",
                "+)",
                "+",
                "+const (",
                "+\tGetRecursive = \"getRecursive\"",
                "+)",
                "+",
                "+func init() {",
                "+\tif prometheus.Register(readCounter) != nil {",
                "+\t\t// Tests will try to double register since the tests use both",
                "+\t\t// store and store_test packages; ignore second attempts.",
                "+\t\treturn",
                "+\t}",
                "+\tprometheus.MustRegister(writeCounter)",
                "+\tprometheus.MustRegister(expireCounter)",
                "+\tprometheus.MustRegister(watchRequests)",
                "+\tprometheus.MustRegister(watcherCount)",
                "+}",
                "+",
                "+func reportReadSuccess(read_action string) {",
                "+\treadCounter.WithLabelValues(read_action).Inc()",
                "+}",
                "+",
                "+func reportReadFailure(read_action string) {",
                "+\treadCounter.WithLabelValues(read_action).Inc()",
                "+\treadFailedCounter.WithLabelValues(read_action).Inc()",
                "+}",
                "+",
                "+func reportWriteSuccess(write_action string) {",
                "+\twriteCounter.WithLabelValues(write_action).Inc()",
                "+}",
                "+",
                "+func reportWriteFailure(write_action string) {",
                "+\twriteCounter.WithLabelValues(write_action).Inc()",
                "+\twriteFailedCounter.WithLabelValues(write_action).Inc()",
                "+}",
                "+",
                "+func reportExpiredKey() {",
                "+\texpireCounter.Inc()",
                "+}",
                "+",
                "+func reportWatchRequest() {",
                "+\twatchRequests.Inc()",
                "+}",
                "+",
                "+func reportWatcherAdded() {",
                "+\twatcherCount.Inc()",
                "+}",
                "+",
                "+func reportWatcherRemoved() {",
                "+\twatcherCount.Dec()",
                "+}",
                "diff --git a/etcdserver/v2store/node.go b/etcdserver/v2store/node.go",
                "new file mode 100644",
                "index 000000000..1bd8a6ea4",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/node.go",
                "@@ -0,0 +1,396 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"path\"",
                "+\t\"sort\"",
                "+\t\"time\"",
                "+",
                "+\tetcdErr \"github.com/coreos/etcd/error\"",
                "+",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+// explanations of Compare function result",
                "+const (",
                "+\tCompareMatch = iota",
                "+\tCompareIndexNotMatch",
                "+\tCompareValueNotMatch",
                "+\tCompareNotMatch",
                "+)",
                "+",
                "+var Permanent time.Time",
                "+",
                "+// node is the basic element in the store system.",
                "+// A key-value pair will have a string value",
                "+// A directory will have a children map",
                "+type node struct {",
                "+\tPath string",
                "+",
                "+\tCreatedIndex  uint64",
                "+\tModifiedIndex uint64",
                "+",
                "+\tParent *node `json:\"-\"` // should not encode this field! avoid circular dependency.",
                "+",
                "+\tExpireTime time.Time",
                "+\tValue      string           // for key-value pair",
                "+\tChildren   map[string]*node // for directory",
                "+",
                "+\t// A reference to the store this node is attached to.",
                "+\tstore *store",
                "+}",
                "+",
                "+// newKV creates a Key-Value pair",
                "+func newKV(store *store, nodePath string, value string, createdIndex uint64, parent *node, expireTime time.Time) *node {",
                "+\treturn &node{",
                "+\t\tPath:          nodePath,",
                "+\t\tCreatedIndex:  createdIndex,",
                "+\t\tModifiedIndex: createdIndex,",
                "+\t\tParent:        parent,",
                "+\t\tstore:         store,",
                "+\t\tExpireTime:    expireTime,",
                "+\t\tValue:         value,",
                "+\t}",
                "+}",
                "+",
                "+// newDir creates a directory",
                "+func newDir(store *store, nodePath string, createdIndex uint64, parent *node, expireTime time.Time) *node {",
                "+\treturn &node{",
                "+\t\tPath:          nodePath,",
                "+\t\tCreatedIndex:  createdIndex,",
                "+\t\tModifiedIndex: createdIndex,",
                "+\t\tParent:        parent,",
                "+\t\tExpireTime:    expireTime,",
                "+\t\tChildren:      make(map[string]*node),",
                "+\t\tstore:         store,",
                "+\t}",
                "+}",
                "+",
                "+// IsHidden function checks if the node is a hidden node. A hidden node",
                "+// will begin with '_'",
                "+// A hidden node will not be shown via get command under a directory",
                "+// For example if we have /foo/_hidden and /foo/notHidden, get \"/foo\"",
                "+// will only return /foo/notHidden",
                "+func (n *node) IsHidden() bool {",
                "+\t_, name := path.Split(n.Path)",
                "+",
                "+\treturn name[0] == '_'",
                "+}",
                "+",
                "+// IsPermanent function checks if the node is a permanent one.",
                "+func (n *node) IsPermanent() bool {",
                "+\t// we use a uninitialized time.Time to indicate the node is a",
                "+\t// permanent one.",
                "+\t// the uninitialized time.Time should equal zero.",
                "+\treturn n.ExpireTime.IsZero()",
                "+}",
                "+",
                "+// IsDir function checks whether the node is a directory.",
                "+// If the node is a directory, the function will return true.",
                "+// Otherwise the function will return false.",
                "+func (n *node) IsDir() bool {",
                "+\treturn n.Children != nil",
                "+}",
                "+",
                "+// Read function gets the value of the node.",
                "+// If the receiver node is not a key-value pair, a \"Not A File\" error will be returned.",
                "+func (n *node) Read() (string, *etcdErr.Error) {",
                "+\tif n.IsDir() {",
                "+\t\treturn \"\", etcdErr.NewError(etcdErr.EcodeNotFile, \"\", n.store.CurrentIndex)",
                "+\t}",
                "+",
                "+\treturn n.Value, nil",
                "+}",
                "+",
                "+// Write function set the value of the node to the given value.",
                "+// If the receiver node is a directory, a \"Not A File\" error will be returned.",
                "+func (n *node) Write(value string, index uint64) *etcdErr.Error {",
                "+\tif n.IsDir() {",
                "+\t\treturn etcdErr.NewError(etcdErr.EcodeNotFile, \"\", n.store.CurrentIndex)",
                "+\t}",
                "+",
                "+\tn.Value = value",
                "+\tn.ModifiedIndex = index",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (n *node) expirationAndTTL(clock clockwork.Clock) (*time.Time, int64) {",
                "+\tif !n.IsPermanent() {",
                "+\t\t/* compute ttl as:",
                "+\t\t   ceiling( (expireTime - timeNow) / nanosecondsPerSecond )",
                "+\t\t   which ranges from 1..n",
                "+\t\t   rather than as:",
                "+\t\t   ( (expireTime - timeNow) / nanosecondsPerSecond ) + 1",
                "+\t\t   which ranges 1..n+1",
                "+\t\t*/",
                "+\t\tttlN := n.ExpireTime.Sub(clock.Now())",
                "+\t\tttl := ttlN / time.Second",
                "+\t\tif (ttlN % time.Second) > 0 {",
                "+\t\t\tttl++",
                "+\t\t}",
                "+\t\tt := n.ExpireTime.UTC()",
                "+\t\treturn &t, int64(ttl)",
                "+\t}",
                "+\treturn nil, 0",
                "+}",
                "+",
                "+// List function return a slice of nodes under the receiver node.",
                "+// If the receiver node is not a directory, a \"Not A Directory\" error will be returned.",
                "+func (n *node) List() ([]*node, *etcdErr.Error) {",
                "+\tif !n.IsDir() {",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotDir, \"\", n.store.CurrentIndex)",
                "+\t}",
                "+",
                "+\tnodes := make([]*node, len(n.Children))",
                "+",
                "+\ti := 0",
                "+\tfor _, node := range n.Children {",
                "+\t\tnodes[i] = node",
                "+\t\ti++",
                "+\t}",
                "+",
                "+\treturn nodes, nil",
                "+}",
                "+",
                "+// GetChild function returns the child node under the directory node.",
                "+// On success, it returns the file node",
                "+func (n *node) GetChild(name string) (*node, *etcdErr.Error) {",
                "+\tif !n.IsDir() {",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotDir, n.Path, n.store.CurrentIndex)",
                "+\t}",
                "+",
                "+\tchild, ok := n.Children[name]",
                "+",
                "+\tif ok {",
                "+\t\treturn child, nil",
                "+\t}",
                "+",
                "+\treturn nil, nil",
                "+}",
                "+",
                "+// Add function adds a node to the receiver node.",
                "+// If the receiver is not a directory, a \"Not A Directory\" error will be returned.",
                "+// If there is an existing node with the same name under the directory, a \"Already Exist\"",
                "+// error will be returned",
                "+func (n *node) Add(child *node) *etcdErr.Error {",
                "+\tif !n.IsDir() {",
                "+\t\treturn etcdErr.NewError(etcdErr.EcodeNotDir, \"\", n.store.CurrentIndex)",
                "+\t}",
                "+",
                "+\t_, name := path.Split(child.Path)",
                "+",
                "+\tif _, ok := n.Children[name]; ok {",
                "+\t\treturn etcdErr.NewError(etcdErr.EcodeNodeExist, \"\", n.store.CurrentIndex)",
                "+\t}",
                "+",
                "+\tn.Children[name] = child",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+// Remove function remove the node.",
                "+func (n *node) Remove(dir, recursive bool, callback func(path string)) *etcdErr.Error {",
                "+\tif !n.IsDir() { // key-value pair",
                "+\t\t_, name := path.Split(n.Path)",
                "+",
                "+\t\t// find its parent and remove the node from the map",
                "+\t\tif n.Parent != nil && n.Parent.Children[name] == n {",
                "+\t\t\tdelete(n.Parent.Children, name)",
                "+\t\t}",
                "+",
                "+\t\tif callback != nil {",
                "+\t\t\tcallback(n.Path)",
                "+\t\t}",
                "+",
                "+\t\tif !n.IsPermanent() {",
                "+\t\t\tn.store.ttlKeyHeap.remove(n)",
                "+\t\t}",
                "+",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tif !dir {",
                "+\t\t// cannot delete a directory without dir set to true",
                "+\t\treturn etcdErr.NewError(etcdErr.EcodeNotFile, n.Path, n.store.CurrentIndex)",
                "+\t}",
                "+",
                "+\tif len(n.Children) != 0 && !recursive {",
                "+\t\t// cannot delete a directory if it is not empty and the operation",
                "+\t\t// is not recursive",
                "+\t\treturn etcdErr.NewError(etcdErr.EcodeDirNotEmpty, n.Path, n.store.CurrentIndex)",
                "+\t}",
                "+",
                "+\tfor _, child := range n.Children { // delete all children",
                "+\t\tchild.Remove(true, true, callback)",
                "+\t}",
                "+",
                "+\t// delete self",
                "+\t_, name := path.Split(n.Path)",
                "+\tif n.Parent != nil && n.Parent.Children[name] == n {",
                "+\t\tdelete(n.Parent.Children, name)",
                "+",
                "+\t\tif callback != nil {",
                "+\t\t\tcallback(n.Path)",
                "+\t\t}",
                "+",
                "+\t\tif !n.IsPermanent() {",
                "+\t\t\tn.store.ttlKeyHeap.remove(n)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (n *node) Repr(recursive, sorted bool, clock clockwork.Clock) *NodeExtern {",
                "+\tif n.IsDir() {",
                "+\t\tnode := &NodeExtern{",
                "+\t\t\tKey:           n.Path,",
                "+\t\t\tDir:           true,",
                "+\t\t\tModifiedIndex: n.ModifiedIndex,",
                "+\t\t\tCreatedIndex:  n.CreatedIndex,",
                "+\t\t}",
                "+\t\tnode.Expiration, node.TTL = n.expirationAndTTL(clock)",
                "+",
                "+\t\tif !recursive {",
                "+\t\t\treturn node",
                "+\t\t}",
                "+",
                "+\t\tchildren, _ := n.List()",
                "+\t\tnode.Nodes = make(NodeExterns, len(children))",
                "+",
                "+\t\t// we do not use the index in the children slice directly",
                "+\t\t// we need to skip the hidden one",
                "+\t\ti := 0",
                "+",
                "+\t\tfor _, child := range children {",
                "+",
                "+\t\t\tif child.IsHidden() { // get will not list hidden node",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+",
                "+\t\t\tnode.Nodes[i] = child.Repr(recursive, sorted, clock)",
                "+",
                "+\t\t\ti++",
                "+\t\t}",
                "+",
                "+\t\t// eliminate hidden nodes",
                "+\t\tnode.Nodes = node.Nodes[:i]",
                "+\t\tif sorted {",
                "+\t\t\tsort.Sort(node.Nodes)",
                "+\t\t}",
                "+",
                "+\t\treturn node",
                "+\t}",
                "+",
                "+\t// since n.Value could be changed later, so we need to copy the value out",
                "+\tvalue := n.Value",
                "+\tnode := &NodeExtern{",
                "+\t\tKey:           n.Path,",
                "+\t\tValue:         &value,",
                "+\t\tModifiedIndex: n.ModifiedIndex,",
                "+\t\tCreatedIndex:  n.CreatedIndex,",
                "+\t}",
                "+\tnode.Expiration, node.TTL = n.expirationAndTTL(clock)",
                "+\treturn node",
                "+}",
                "+",
                "+func (n *node) UpdateTTL(expireTime time.Time) {",
                "+\tif !n.IsPermanent() {",
                "+\t\tif expireTime.IsZero() {",
                "+\t\t\t// from ttl to permanent",
                "+\t\t\tn.ExpireTime = expireTime",
                "+\t\t\t// remove from ttl heap",
                "+\t\t\tn.store.ttlKeyHeap.remove(n)",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\t// update ttl",
                "+\t\tn.ExpireTime = expireTime",
                "+\t\t// update ttl heap",
                "+\t\tn.store.ttlKeyHeap.update(n)",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tif expireTime.IsZero() {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\t// from permanent to ttl",
                "+\tn.ExpireTime = expireTime",
                "+\t// push into ttl heap",
                "+\tn.store.ttlKeyHeap.push(n)",
                "+}",
                "+",
                "+// Compare function compares node index and value with provided ones.",
                "+// second result value explains result and equals to one of Compare.. constants",
                "+func (n *node) Compare(prevValue string, prevIndex uint64) (ok bool, which int) {",
                "+\tindexMatch := (prevIndex == 0 || n.ModifiedIndex == prevIndex)",
                "+\tvalueMatch := (prevValue == \"\" || n.Value == prevValue)",
                "+\tok = valueMatch && indexMatch",
                "+\tswitch {",
                "+\tcase valueMatch && indexMatch:",
                "+\t\twhich = CompareMatch",
                "+\tcase indexMatch && !valueMatch:",
                "+\t\twhich = CompareValueNotMatch",
                "+\tcase valueMatch && !indexMatch:",
                "+\t\twhich = CompareIndexNotMatch",
                "+\tdefault:",
                "+\t\twhich = CompareNotMatch",
                "+\t}",
                "+\treturn ok, which",
                "+}",
                "+",
                "+// Clone function clone the node recursively and return the new node.",
                "+// If the node is a directory, it will clone all the content under this directory.",
                "+// If the node is a key-value pair, it will clone the pair.",
                "+func (n *node) Clone() *node {",
                "+\tif !n.IsDir() {",
                "+\t\tnewkv := newKV(n.store, n.Path, n.Value, n.CreatedIndex, n.Parent, n.ExpireTime)",
                "+\t\tnewkv.ModifiedIndex = n.ModifiedIndex",
                "+\t\treturn newkv",
                "+\t}",
                "+",
                "+\tclone := newDir(n.store, n.Path, n.CreatedIndex, n.Parent, n.ExpireTime)",
                "+\tclone.ModifiedIndex = n.ModifiedIndex",
                "+",
                "+\tfor key, child := range n.Children {",
                "+\t\tclone.Children[key] = child.Clone()",
                "+\t}",
                "+",
                "+\treturn clone",
                "+}",
                "+",
                "+// recoverAndclean function help to do recovery.",
                "+// Two things need to be done: 1. recovery structure; 2. delete expired nodes",
                "+//",
                "+// If the node is a directory, it will help recover children's parent pointer and recursively",
                "+// call this function on its children.",
                "+// We check the expire last since we need to recover the whole structure first and add all the",
                "+// notifications into the event history.",
                "+func (n *node) recoverAndclean() {",
                "+\tif n.IsDir() {",
                "+\t\tfor _, child := range n.Children {",
                "+\t\t\tchild.Parent = n",
                "+\t\t\tchild.store = n.store",
                "+\t\t\tchild.recoverAndclean()",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif !n.ExpireTime.IsZero() {",
                "+\t\tn.store.ttlKeyHeap.push(n)",
                "+\t}",
                "+}",
                "diff --git a/etcdserver/v2store/node_extern.go b/etcdserver/v2store/node_extern.go",
                "new file mode 100644",
                "index 000000000..b3bf5f3c9",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/node_extern.go",
                "@@ -0,0 +1,116 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"sort\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+// NodeExtern is the external representation of the",
                "+// internal node with additional fields",
                "+// PrevValue is the previous value of the node",
                "+// TTL is time to live in second",
                "+type NodeExtern struct {",
                "+\tKey           string      `json:\"key,omitempty\"`",
                "+\tValue         *string     `json:\"value,omitempty\"`",
                "+\tDir           bool        `json:\"dir,omitempty\"`",
                "+\tExpiration    *time.Time  `json:\"expiration,omitempty\"`",
                "+\tTTL           int64       `json:\"ttl,omitempty\"`",
                "+\tNodes         NodeExterns `json:\"nodes,omitempty\"`",
                "+\tModifiedIndex uint64      `json:\"modifiedIndex,omitempty\"`",
                "+\tCreatedIndex  uint64      `json:\"createdIndex,omitempty\"`",
                "+}",
                "+",
                "+func (eNode *NodeExtern) loadInternalNode(n *node, recursive, sorted bool, clock clockwork.Clock) {",
                "+\tif n.IsDir() { // node is a directory",
                "+\t\teNode.Dir = true",
                "+",
                "+\t\tchildren, _ := n.List()",
                "+\t\teNode.Nodes = make(NodeExterns, len(children))",
                "+",
                "+\t\t// we do not use the index in the children slice directly",
                "+\t\t// we need to skip the hidden one",
                "+\t\ti := 0",
                "+",
                "+\t\tfor _, child := range children {",
                "+\t\t\tif child.IsHidden() { // get will not return hidden nodes",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+",
                "+\t\t\teNode.Nodes[i] = child.Repr(recursive, sorted, clock)",
                "+\t\t\ti++",
                "+\t\t}",
                "+",
                "+\t\t// eliminate hidden nodes",
                "+\t\teNode.Nodes = eNode.Nodes[:i]",
                "+",
                "+\t\tif sorted {",
                "+\t\t\tsort.Sort(eNode.Nodes)",
                "+\t\t}",
                "+",
                "+\t} else { // node is a file",
                "+\t\tvalue, _ := n.Read()",
                "+\t\teNode.Value = &value",
                "+\t}",
                "+",
                "+\teNode.Expiration, eNode.TTL = n.expirationAndTTL(clock)",
                "+}",
                "+",
                "+func (eNode *NodeExtern) Clone() *NodeExtern {",
                "+\tif eNode == nil {",
                "+\t\treturn nil",
                "+\t}",
                "+\tnn := &NodeExtern{",
                "+\t\tKey:           eNode.Key,",
                "+\t\tDir:           eNode.Dir,",
                "+\t\tTTL:           eNode.TTL,",
                "+\t\tModifiedIndex: eNode.ModifiedIndex,",
                "+\t\tCreatedIndex:  eNode.CreatedIndex,",
                "+\t}",
                "+\tif eNode.Value != nil {",
                "+\t\ts := *eNode.Value",
                "+\t\tnn.Value = &s",
                "+\t}",
                "+\tif eNode.Expiration != nil {",
                "+\t\tt := *eNode.Expiration",
                "+\t\tnn.Expiration = &t",
                "+\t}",
                "+\tif eNode.Nodes != nil {",
                "+\t\tnn.Nodes = make(NodeExterns, len(eNode.Nodes))",
                "+\t\tfor i, n := range eNode.Nodes {",
                "+\t\t\tnn.Nodes[i] = n.Clone()",
                "+\t\t}",
                "+\t}",
                "+\treturn nn",
                "+}",
                "+",
                "+type NodeExterns []*NodeExtern",
                "+",
                "+// interfaces for sorting",
                "+",
                "+func (ns NodeExterns) Len() int {",
                "+\treturn len(ns)",
                "+}",
                "+",
                "+func (ns NodeExterns) Less(i, j int) bool {",
                "+\treturn ns[i].Key < ns[j].Key",
                "+}",
                "+",
                "+func (ns NodeExterns) Swap(i, j int) {",
                "+\tns[i], ns[j] = ns[j], ns[i]",
                "+}",
                "diff --git a/etcdserver/v2store/node_extern_test.go b/etcdserver/v2store/node_extern_test.go",
                "new file mode 100644",
                "index 000000000..a594e1795",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/node_extern_test.go",
                "@@ -0,0 +1,108 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+\t\"unsafe\"",
                "+",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+)",
                "+",
                "+func TestNodeExternClone(t *testing.T) {",
                "+\tvar eNode *NodeExtern",
                "+\tif g := eNode.Clone(); g != nil {",
                "+\t\tt.Fatalf(\"nil.Clone=%v, want nil\", g)",
                "+\t}",
                "+",
                "+\tconst (",
                "+\t\tkey string = \"/foo/bar\"",
                "+\t\tttl int64  = 123456789",
                "+\t\tci  uint64 = 123",
                "+\t\tmi  uint64 = 321",
                "+\t)",
                "+\tvar (",
                "+\t\tval    = \"some_data\"",
                "+\t\tvalp   = &val",
                "+\t\texp    = time.Unix(12345, 67890)",
                "+\t\texpp   = &exp",
                "+\t\tchild  = NodeExtern{}",
                "+\t\tchildp = &child",
                "+\t\tchilds = []*NodeExtern{childp}",
                "+\t)",
                "+",
                "+\teNode = &NodeExtern{",
                "+\t\tKey:           key,",
                "+\t\tTTL:           ttl,",
                "+\t\tCreatedIndex:  ci,",
                "+\t\tModifiedIndex: mi,",
                "+\t\tValue:         valp,",
                "+\t\tExpiration:    expp,",
                "+\t\tNodes:         childs,",
                "+\t}",
                "+",
                "+\tgNode := eNode.Clone()",
                "+\t// Check the clone is as expected",
                "+\ttestutil.AssertEqual(t, gNode.Key, key)",
                "+\ttestutil.AssertEqual(t, gNode.TTL, ttl)",
                "+\ttestutil.AssertEqual(t, gNode.CreatedIndex, ci)",
                "+\ttestutil.AssertEqual(t, gNode.ModifiedIndex, mi)",
                "+\t// values should be the same",
                "+\ttestutil.AssertEqual(t, *gNode.Value, val)",
                "+\ttestutil.AssertEqual(t, *gNode.Expiration, exp)",
                "+\ttestutil.AssertEqual(t, len(gNode.Nodes), len(childs))",
                "+\ttestutil.AssertEqual(t, *gNode.Nodes[0], child)",
                "+\t// but pointers should differ",
                "+\tif gNode.Value == eNode.Value {",
                "+\t\tt.Fatalf(\"expected value pointers to differ, but got same!\")",
                "+\t}",
                "+\tif gNode.Expiration == eNode.Expiration {",
                "+\t\tt.Fatalf(\"expected expiration pointers to differ, but got same!\")",
                "+\t}",
                "+\tif sameSlice(gNode.Nodes, eNode.Nodes) {",
                "+\t\tt.Fatalf(\"expected nodes pointers to differ, but got same!\")",
                "+\t}",
                "+\t// Original should be the same",
                "+\ttestutil.AssertEqual(t, eNode.Key, key)",
                "+\ttestutil.AssertEqual(t, eNode.TTL, ttl)",
                "+\ttestutil.AssertEqual(t, eNode.CreatedIndex, ci)",
                "+\ttestutil.AssertEqual(t, eNode.ModifiedIndex, mi)",
                "+\ttestutil.AssertEqual(t, eNode.Value, valp)",
                "+\ttestutil.AssertEqual(t, eNode.Expiration, expp)",
                "+\tif !sameSlice(eNode.Nodes, childs) {",
                "+\t\tt.Fatalf(\"expected nodes pointer to same, but got different!\")",
                "+\t}",
                "+\t// Change the clone and ensure the original is not affected",
                "+\tgNode.Key = \"/baz\"",
                "+\tgNode.TTL = 0",
                "+\tgNode.Nodes[0].Key = \"uno\"",
                "+\ttestutil.AssertEqual(t, eNode.Key, key)",
                "+\ttestutil.AssertEqual(t, eNode.TTL, ttl)",
                "+\ttestutil.AssertEqual(t, eNode.CreatedIndex, ci)",
                "+\ttestutil.AssertEqual(t, eNode.ModifiedIndex, mi)",
                "+\ttestutil.AssertEqual(t, *eNode.Nodes[0], child)",
                "+\t// Change the original and ensure the clone is not affected",
                "+\teNode.Key = \"/wuf\"",
                "+\ttestutil.AssertEqual(t, eNode.Key, \"/wuf\")",
                "+\ttestutil.AssertEqual(t, gNode.Key, \"/baz\")",
                "+}",
                "+",
                "+func sameSlice(a, b []*NodeExtern) bool {",
                "+\tah := (*reflect.SliceHeader)(unsafe.Pointer(&a))",
                "+\tbh := (*reflect.SliceHeader)(unsafe.Pointer(&b))",
                "+\treturn *ah == *bh",
                "+}",
                "diff --git a/etcdserver/v2store/node_test.go b/etcdserver/v2store/node_test.go",
                "new file mode 100644",
                "index 000000000..ad5dd9ac5",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/node_test.go",
                "@@ -0,0 +1,246 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+var (",
                "+\tkey, val   = \"foo\", \"bar\"",
                "+\tval1, val2 = \"bar1\", \"bar2\"",
                "+\texpiration = time.Minute",
                "+)",
                "+",
                "+func TestNewKVIs(t *testing.T) {",
                "+\tnd := newTestNode()",
                "+",
                "+\tif nd.IsHidden() {",
                "+\t\tt.Errorf(\"nd.Hidden() = %v, want = false\", nd.IsHidden())",
                "+\t}",
                "+",
                "+\tif nd.IsPermanent() {",
                "+\t\tt.Errorf(\"nd.IsPermanent() = %v, want = false\", nd.IsPermanent())",
                "+\t}",
                "+",
                "+\tif nd.IsDir() {",
                "+\t\tt.Errorf(\"nd.IsDir() = %v, want = false\", nd.IsDir())",
                "+\t}",
                "+}",
                "+",
                "+func TestNewKVReadWriteCompare(t *testing.T) {",
                "+\tnd := newTestNode()",
                "+",
                "+\tif v, err := nd.Read(); v != val || err != nil {",
                "+\t\tt.Errorf(\"value = %s and err = %v, want value = %s and err = nil\", v, err, val)",
                "+\t}",
                "+",
                "+\tif err := nd.Write(val1, nd.CreatedIndex+1); err != nil {",
                "+\t\tt.Errorf(\"nd.Write error = %v, want = nil\", err)",
                "+\t} else {",
                "+\t\tif v, err := nd.Read(); v != val1 || err != nil {",
                "+\t\t\tt.Errorf(\"value = %s and err = %v, want value = %s and err = nil\", v, err, val1)",
                "+\t\t}",
                "+\t}",
                "+\tif err := nd.Write(val2, nd.CreatedIndex+2); err != nil {",
                "+\t\tt.Errorf(\"nd.Write error = %v, want = nil\", err)",
                "+\t} else {",
                "+\t\tif v, err := nd.Read(); v != val2 || err != nil {",
                "+\t\t\tt.Errorf(\"value = %s and err = %v, want value = %s and err = nil\", v, err, val2)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif ok, which := nd.Compare(val2, 2); !ok || which != 0 {",
                "+\t\tt.Errorf(\"ok = %v and which = %d, want ok = true and which = 0\", ok, which)",
                "+\t}",
                "+}",
                "+",
                "+func TestNewKVExpiration(t *testing.T) {",
                "+\tnd := newTestNode()",
                "+",
                "+\tif _, ttl := nd.expirationAndTTL(clockwork.NewFakeClock()); ttl > expiration.Nanoseconds() {",
                "+\t\tt.Errorf(\"ttl = %d, want %d < %d\", ttl, ttl, expiration.Nanoseconds())",
                "+\t}",
                "+",
                "+\tnewExpiration := time.Hour",
                "+\tnd.UpdateTTL(time.Now().Add(newExpiration))",
                "+\tif _, ttl := nd.expirationAndTTL(clockwork.NewFakeClock()); ttl > newExpiration.Nanoseconds() {",
                "+\t\tt.Errorf(\"ttl = %d, want %d < %d\", ttl, ttl, newExpiration.Nanoseconds())",
                "+\t}",
                "+\tif ns, err := nd.List(); ns != nil || err == nil {",
                "+\t\tt.Errorf(\"nodes = %v and err = %v, want nodes = nil and err != nil\", ns, err)",
                "+\t}",
                "+",
                "+\ten := nd.Repr(false, false, clockwork.NewFakeClock())",
                "+\tif en.Key != nd.Path {",
                "+\t\tt.Errorf(\"en.Key = %s, want = %s\", en.Key, nd.Path)",
                "+\t}",
                "+\tif *(en.Value) != nd.Value {",
                "+\t\tt.Errorf(\"*(en.Key) = %s, want = %s\", *(en.Value), nd.Value)",
                "+\t}",
                "+}",
                "+",
                "+func TestNewKVListReprCompareClone(t *testing.T) {",
                "+\tnd := newTestNode()",
                "+",
                "+\tif ns, err := nd.List(); ns != nil || err == nil {",
                "+\t\tt.Errorf(\"nodes = %v and err = %v, want nodes = nil and err != nil\", ns, err)",
                "+\t}",
                "+",
                "+\ten := nd.Repr(false, false, clockwork.NewFakeClock())",
                "+\tif en.Key != nd.Path {",
                "+\t\tt.Errorf(\"en.Key = %s, want = %s\", en.Key, nd.Path)",
                "+\t}",
                "+\tif *(en.Value) != nd.Value {",
                "+\t\tt.Errorf(\"*(en.Key) = %s, want = %s\", *(en.Value), nd.Value)",
                "+\t}",
                "+",
                "+\tcn := nd.Clone()",
                "+\tif cn.Path != nd.Path {",
                "+\t\tt.Errorf(\"cn.Path = %s, want = %s\", cn.Path, nd.Path)",
                "+\t}",
                "+\tif cn.Value != nd.Value {",
                "+\t\tt.Errorf(\"cn.Value = %s, want = %s\", cn.Value, nd.Value)",
                "+\t}",
                "+}",
                "+",
                "+func TestNewKVRemove(t *testing.T) {",
                "+\tnd := newTestNode()",
                "+",
                "+\tif v, err := nd.Read(); v != val || err != nil {",
                "+\t\tt.Errorf(\"value = %s and err = %v, want value = %s and err = nil\", v, err, val)",
                "+\t}",
                "+",
                "+\tif err := nd.Write(val1, nd.CreatedIndex+1); err != nil {",
                "+\t\tt.Errorf(\"nd.Write error = %v, want = nil\", err)",
                "+\t} else {",
                "+\t\tif v, err := nd.Read(); v != val1 || err != nil {",
                "+\t\t\tt.Errorf(\"value = %s and err = %v, want value = %s and err = nil\", v, err, val1)",
                "+\t\t}",
                "+\t}",
                "+\tif err := nd.Write(val2, nd.CreatedIndex+2); err != nil {",
                "+\t\tt.Errorf(\"nd.Write error = %v, want = nil\", err)",
                "+\t} else {",
                "+\t\tif v, err := nd.Read(); v != val2 || err != nil {",
                "+\t\t\tt.Errorf(\"value = %s and err = %v, want value = %s and err = nil\", v, err, val2)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif err := nd.Remove(false, false, nil); err != nil {",
                "+\t\tt.Errorf(\"nd.Remove err = %v, want = nil\", err)",
                "+\t} else {",
                "+\t\t// still readable",
                "+\t\tif v, err := nd.Read(); v != val2 || err != nil {",
                "+\t\t\tt.Errorf(\"value = %s and err = %v, want value = %s and err = nil\", v, err, val2)",
                "+\t\t}",
                "+\t\tif len(nd.store.ttlKeyHeap.array) != 0 {",
                "+\t\t\tt.Errorf(\"len(nd.store.ttlKeyHeap.array) = %d, want = 0\", len(nd.store.ttlKeyHeap.array))",
                "+\t\t}",
                "+\t\tif len(nd.store.ttlKeyHeap.keyMap) != 0 {",
                "+\t\t\tt.Errorf(\"len(nd.store.ttlKeyHeap.keyMap) = %d, want = 0\", len(nd.store.ttlKeyHeap.keyMap))",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestNewDirIs(t *testing.T) {",
                "+\tnd, _ := newTestNodeDir()",
                "+\tif nd.IsHidden() {",
                "+\t\tt.Errorf(\"nd.Hidden() = %v, want = false\", nd.IsHidden())",
                "+\t}",
                "+",
                "+\tif nd.IsPermanent() {",
                "+\t\tt.Errorf(\"nd.IsPermanent() = %v, want = false\", nd.IsPermanent())",
                "+\t}",
                "+",
                "+\tif !nd.IsDir() {",
                "+\t\tt.Errorf(\"nd.IsDir() = %v, want = true\", nd.IsDir())",
                "+\t}",
                "+}",
                "+",
                "+func TestNewDirReadWriteListReprClone(t *testing.T) {",
                "+\tnd, _ := newTestNodeDir()",
                "+",
                "+\tif _, err := nd.Read(); err == nil {",
                "+\t\tt.Errorf(\"err = %v, want err != nil\", err)",
                "+\t}",
                "+",
                "+\tif err := nd.Write(val, nd.CreatedIndex+1); err == nil {",
                "+\t\tt.Errorf(\"err = %v, want err != nil\", err)",
                "+\t}",
                "+",
                "+\tif ns, err := nd.List(); ns == nil && err != nil {",
                "+\t\tt.Errorf(\"nodes = %v and err = %v, want nodes = nil and err == nil\", ns, err)",
                "+\t}",
                "+",
                "+\ten := nd.Repr(false, false, clockwork.NewFakeClock())",
                "+\tif en.Key != nd.Path {",
                "+\t\tt.Errorf(\"en.Key = %s, want = %s\", en.Key, nd.Path)",
                "+\t}",
                "+",
                "+\tcn := nd.Clone()",
                "+\tif cn.Path != nd.Path {",
                "+\t\tt.Errorf(\"cn.Path = %s, want = %s\", cn.Path, nd.Path)",
                "+\t}",
                "+}",
                "+",
                "+func TestNewDirExpirationTTL(t *testing.T) {",
                "+\tnd, _ := newTestNodeDir()",
                "+",
                "+\tif _, ttl := nd.expirationAndTTL(clockwork.NewFakeClock()); ttl > expiration.Nanoseconds() {",
                "+\t\tt.Errorf(\"ttl = %d, want %d < %d\", ttl, ttl, expiration.Nanoseconds())",
                "+\t}",
                "+",
                "+\tnewExpiration := time.Hour",
                "+\tnd.UpdateTTL(time.Now().Add(newExpiration))",
                "+\tif _, ttl := nd.expirationAndTTL(clockwork.NewFakeClock()); ttl > newExpiration.Nanoseconds() {",
                "+\t\tt.Errorf(\"ttl = %d, want %d < %d\", ttl, ttl, newExpiration.Nanoseconds())",
                "+\t}",
                "+}",
                "+",
                "+func TestNewDirChild(t *testing.T) {",
                "+\tnd, child := newTestNodeDir()",
                "+",
                "+\tif err := nd.Add(child); err != nil {",
                "+\t\tt.Errorf(\"nd.Add(child) err = %v, want = nil\", err)",
                "+\t} else {",
                "+\t\tif len(nd.Children) == 0 {",
                "+\t\t\tt.Errorf(\"len(nd.Children) = %d, want = 1\", len(nd.Children))",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif err := child.Remove(true, true, nil); err != nil {",
                "+\t\tt.Errorf(\"child.Remove err = %v, want = nil\", err)",
                "+\t} else {",
                "+\t\tif len(nd.Children) != 0 {",
                "+\t\t\tt.Errorf(\"len(nd.Children) = %d, want = 0\", len(nd.Children))",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func newTestNode() *node {",
                "+\tnd := newKV(newStore(), key, val, 0, nil, time.Now().Add(expiration))",
                "+\treturn nd",
                "+}",
                "+",
                "+func newTestNodeDir() (*node, *node) {",
                "+\ts := newStore()",
                "+\tnd := newDir(s, key, 0, nil, time.Now().Add(expiration))",
                "+\tcKey, cVal := \"hello\", \"world\"",
                "+\tchild := newKV(s, cKey, cVal, 0, nd, time.Now().Add(expiration))",
                "+\treturn nd, child",
                "+}",
                "diff --git a/etcdserver/v2store/stats.go b/etcdserver/v2store/stats.go",
                "new file mode 100644",
                "index 000000000..45bc97f01",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/stats.go",
                "@@ -0,0 +1,145 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"encoding/json\"",
                "+\t\"sync/atomic\"",
                "+)",
                "+",
                "+const (",
                "+\tSetSuccess = iota",
                "+\tSetFail",
                "+\tDeleteSuccess",
                "+\tDeleteFail",
                "+\tCreateSuccess",
                "+\tCreateFail",
                "+\tUpdateSuccess",
                "+\tUpdateFail",
                "+\tCompareAndSwapSuccess",
                "+\tCompareAndSwapFail",
                "+\tGetSuccess",
                "+\tGetFail",
                "+\tExpireCount",
                "+\tCompareAndDeleteSuccess",
                "+\tCompareAndDeleteFail",
                "+)",
                "+",
                "+type Stats struct {",
                "+\t// Number of get requests",
                "+",
                "+\tGetSuccess uint64 `json:\"getsSuccess\"`",
                "+\tGetFail    uint64 `json:\"getsFail\"`",
                "+",
                "+\t// Number of sets requests",
                "+",
                "+\tSetSuccess uint64 `json:\"setsSuccess\"`",
                "+\tSetFail    uint64 `json:\"setsFail\"`",
                "+",
                "+\t// Number of delete requests",
                "+",
                "+\tDeleteSuccess uint64 `json:\"deleteSuccess\"`",
                "+\tDeleteFail    uint64 `json:\"deleteFail\"`",
                "+",
                "+\t// Number of update requests",
                "+",
                "+\tUpdateSuccess uint64 `json:\"updateSuccess\"`",
                "+\tUpdateFail    uint64 `json:\"updateFail\"`",
                "+",
                "+\t// Number of create requests",
                "+",
                "+\tCreateSuccess uint64 `json:\"createSuccess\"`",
                "+\tCreateFail    uint64 `json:\"createFail\"`",
                "+",
                "+\t// Number of testAndSet requests",
                "+",
                "+\tCompareAndSwapSuccess uint64 `json:\"compareAndSwapSuccess\"`",
                "+\tCompareAndSwapFail    uint64 `json:\"compareAndSwapFail\"`",
                "+",
                "+\t// Number of compareAndDelete requests",
                "+",
                "+\tCompareAndDeleteSuccess uint64 `json:\"compareAndDeleteSuccess\"`",
                "+\tCompareAndDeleteFail    uint64 `json:\"compareAndDeleteFail\"`",
                "+",
                "+\tExpireCount uint64 `json:\"expireCount\"`",
                "+",
                "+\tWatchers uint64 `json:\"watchers\"`",
                "+}",
                "+",
                "+func newStats() *Stats {",
                "+\ts := new(Stats)",
                "+\treturn s",
                "+}",
                "+",
                "+func (s *Stats) clone() *Stats {",
                "+\treturn &Stats{",
                "+\t\tGetSuccess:              s.GetSuccess,",
                "+\t\tGetFail:                 s.GetFail,",
                "+\t\tSetSuccess:              s.SetSuccess,",
                "+\t\tSetFail:                 s.SetFail,",
                "+\t\tDeleteSuccess:           s.DeleteSuccess,",
                "+\t\tDeleteFail:              s.DeleteFail,",
                "+\t\tUpdateSuccess:           s.UpdateSuccess,",
                "+\t\tUpdateFail:              s.UpdateFail,",
                "+\t\tCreateSuccess:           s.CreateSuccess,",
                "+\t\tCreateFail:              s.CreateFail,",
                "+\t\tCompareAndSwapSuccess:   s.CompareAndSwapSuccess,",
                "+\t\tCompareAndSwapFail:      s.CompareAndSwapFail,",
                "+\t\tCompareAndDeleteSuccess: s.CompareAndDeleteSuccess,",
                "+\t\tCompareAndDeleteFail:    s.CompareAndDeleteFail,",
                "+\t\tExpireCount:             s.ExpireCount,",
                "+\t\tWatchers:                s.Watchers,",
                "+\t}",
                "+}",
                "+",
                "+func (s *Stats) toJson() []byte {",
                "+\tb, _ := json.Marshal(s)",
                "+\treturn b",
                "+}",
                "+",
                "+func (s *Stats) Inc(field int) {",
                "+\tswitch field {",
                "+\tcase SetSuccess:",
                "+\t\tatomic.AddUint64(&s.SetSuccess, 1)",
                "+\tcase SetFail:",
                "+\t\tatomic.AddUint64(&s.SetFail, 1)",
                "+\tcase CreateSuccess:",
                "+\t\tatomic.AddUint64(&s.CreateSuccess, 1)",
                "+\tcase CreateFail:",
                "+\t\tatomic.AddUint64(&s.CreateFail, 1)",
                "+\tcase DeleteSuccess:",
                "+\t\tatomic.AddUint64(&s.DeleteSuccess, 1)",
                "+\tcase DeleteFail:",
                "+\t\tatomic.AddUint64(&s.DeleteFail, 1)",
                "+\tcase GetSuccess:",
                "+\t\tatomic.AddUint64(&s.GetSuccess, 1)",
                "+\tcase GetFail:",
                "+\t\tatomic.AddUint64(&s.GetFail, 1)",
                "+\tcase UpdateSuccess:",
                "+\t\tatomic.AddUint64(&s.UpdateSuccess, 1)",
                "+\tcase UpdateFail:",
                "+\t\tatomic.AddUint64(&s.UpdateFail, 1)",
                "+\tcase CompareAndSwapSuccess:",
                "+\t\tatomic.AddUint64(&s.CompareAndSwapSuccess, 1)",
                "+\tcase CompareAndSwapFail:",
                "+\t\tatomic.AddUint64(&s.CompareAndSwapFail, 1)",
                "+\tcase CompareAndDeleteSuccess:",
                "+\t\tatomic.AddUint64(&s.CompareAndDeleteSuccess, 1)",
                "+\tcase CompareAndDeleteFail:",
                "+\t\tatomic.AddUint64(&s.CompareAndDeleteFail, 1)",
                "+\tcase ExpireCount:",
                "+\t\tatomic.AddUint64(&s.ExpireCount, 1)",
                "+\t}",
                "+}",
                "diff --git a/etcdserver/v2store/stats_test.go b/etcdserver/v2store/stats_test.go",
                "new file mode 100644",
                "index 000000000..293aae411",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/stats_test.go",
                "@@ -0,0 +1,112 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+)",
                "+",
                "+// Ensure that a successful Get is recorded in the stats.",
                "+func TestStoreStatsGetSuccess(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.GetSuccess, \"\")",
                "+}",
                "+",
                "+// Ensure that a failed Get is recorded in the stats.",
                "+func TestStoreStatsGetFail(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Get(\"/no_such_key\", false, false)",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.GetFail, \"\")",
                "+}",
                "+",
                "+// Ensure that a successful Create is recorded in the stats.",
                "+func TestStoreStatsCreateSuccess(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.CreateSuccess, \"\")",
                "+}",
                "+",
                "+// Ensure that a failed Create is recorded in the stats.",
                "+func TestStoreStatsCreateFail(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Create(\"/foo\", true, \"\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.CreateFail, \"\")",
                "+}",
                "+",
                "+// Ensure that a successful Update is recorded in the stats.",
                "+func TestStoreStatsUpdateSuccess(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Update(\"/foo\", \"baz\", TTLOptionSet{ExpireTime: Permanent})",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.UpdateSuccess, \"\")",
                "+}",
                "+",
                "+// Ensure that a failed Update is recorded in the stats.",
                "+func TestStoreStatsUpdateFail(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Update(\"/foo\", \"bar\", TTLOptionSet{ExpireTime: Permanent})",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.UpdateFail, \"\")",
                "+}",
                "+",
                "+// Ensure that a successful CAS is recorded in the stats.",
                "+func TestStoreStatsCompareAndSwapSuccess(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.CompareAndSwap(\"/foo\", \"bar\", 0, \"baz\", TTLOptionSet{ExpireTime: Permanent})",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.CompareAndSwapSuccess, \"\")",
                "+}",
                "+",
                "+// Ensure that a failed CAS is recorded in the stats.",
                "+func TestStoreStatsCompareAndSwapFail(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.CompareAndSwap(\"/foo\", \"wrong_value\", 0, \"baz\", TTLOptionSet{ExpireTime: Permanent})",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.CompareAndSwapFail, \"\")",
                "+}",
                "+",
                "+// Ensure that a successful Delete is recorded in the stats.",
                "+func TestStoreStatsDeleteSuccess(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Delete(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.DeleteSuccess, \"\")",
                "+}",
                "+",
                "+// Ensure that a failed Delete is recorded in the stats.",
                "+func TestStoreStatsDeleteFail(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.Delete(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.DeleteFail, \"\")",
                "+}",
                "+",
                "+//Ensure that the number of expirations is recorded in the stats.",
                "+func TestStoreStatsExpireCount(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond)})",
                "+\ttestutil.AssertEqual(t, uint64(0), s.Stats.ExpireCount, \"\")",
                "+\tfc.Advance(600 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\ttestutil.AssertEqual(t, uint64(1), s.Stats.ExpireCount, \"\")",
                "+}",
                "diff --git a/etcdserver/v2store/store.go b/etcdserver/v2store/store.go",
                "new file mode 100644",
                "index 000000000..524b0da01",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/store.go",
                "@@ -0,0 +1,792 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"encoding/json\"",
                "+\t\"fmt\"",
                "+\t\"path\"",
                "+\t\"strconv\"",
                "+\t\"strings\"",
                "+\t\"sync\"",
                "+\t\"time\"",
                "+",
                "+\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/pkg/types\"",
                "+",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+// The default version to set when the store is first initialized.",
                "+const defaultVersion = 2",
                "+",
                "+var minExpireTime time.Time",
                "+",
                "+func init() {",
                "+\tminExpireTime, _ = time.Parse(time.RFC3339, \"2000-01-01T00:00:00Z\")",
                "+}",
                "+",
                "+type Store interface {",
                "+\tVersion() int",
                "+\tIndex() uint64",
                "+",
                "+\tGet(nodePath string, recursive, sorted bool) (*Event, error)",
                "+\tSet(nodePath string, dir bool, value string, expireOpts TTLOptionSet) (*Event, error)",
                "+\tUpdate(nodePath string, newValue string, expireOpts TTLOptionSet) (*Event, error)",
                "+\tCreate(nodePath string, dir bool, value string, unique bool,",
                "+\t\texpireOpts TTLOptionSet) (*Event, error)",
                "+\tCompareAndSwap(nodePath string, prevValue string, prevIndex uint64,",
                "+\t\tvalue string, expireOpts TTLOptionSet) (*Event, error)",
                "+\tDelete(nodePath string, dir, recursive bool) (*Event, error)",
                "+\tCompareAndDelete(nodePath string, prevValue string, prevIndex uint64) (*Event, error)",
                "+",
                "+\tWatch(prefix string, recursive, stream bool, sinceIndex uint64) (Watcher, error)",
                "+",
                "+\tSave() ([]byte, error)",
                "+\tRecovery(state []byte) error",
                "+",
                "+\tClone() Store",
                "+\tSaveNoCopy() ([]byte, error)",
                "+",
                "+\tJsonStats() []byte",
                "+\tDeleteExpiredKeys(cutoff time.Time)",
                "+",
                "+\tHasTTLKeys() bool",
                "+}",
                "+",
                "+type TTLOptionSet struct {",
                "+\tExpireTime time.Time",
                "+\tRefresh    bool",
                "+}",
                "+",
                "+type store struct {",
                "+\tRoot           *node",
                "+\tWatcherHub     *watcherHub",
                "+\tCurrentIndex   uint64",
                "+\tStats          *Stats",
                "+\tCurrentVersion int",
                "+\tttlKeyHeap     *ttlKeyHeap  // need to recovery manually",
                "+\tworldLock      sync.RWMutex // stop the world lock",
                "+\tclock          clockwork.Clock",
                "+\treadonlySet    types.Set",
                "+}",
                "+",
                "+// New creates a store where the given namespaces will be created as initial directories.",
                "+func New(namespaces ...string) Store {",
                "+\ts := newStore(namespaces...)",
                "+\ts.clock = clockwork.NewRealClock()",
                "+\treturn s",
                "+}",
                "+",
                "+func newStore(namespaces ...string) *store {",
                "+\ts := new(store)",
                "+\ts.CurrentVersion = defaultVersion",
                "+\ts.Root = newDir(s, \"/\", s.CurrentIndex, nil, Permanent)",
                "+\tfor _, namespace := range namespaces {",
                "+\t\ts.Root.Add(newDir(s, namespace, s.CurrentIndex, s.Root, Permanent))",
                "+\t}",
                "+\ts.Stats = newStats()",
                "+\ts.WatcherHub = newWatchHub(1000)",
                "+\ts.ttlKeyHeap = newTtlKeyHeap()",
                "+\ts.readonlySet = types.NewUnsafeSet(append(namespaces, \"/\")...)",
                "+\treturn s",
                "+}",
                "+",
                "+// Version retrieves current version of the store.",
                "+func (s *store) Version() int {",
                "+\treturn s.CurrentVersion",
                "+}",
                "+",
                "+// Index retrieves the current index of the store.",
                "+func (s *store) Index() uint64 {",
                "+\ts.worldLock.RLock()",
                "+\tdefer s.worldLock.RUnlock()",
                "+\treturn s.CurrentIndex",
                "+}",
                "+",
                "+// Get returns a get event.",
                "+// If recursive is true, it will return all the content under the node path.",
                "+// If sorted is true, it will sort the content by keys.",
                "+func (s *store) Get(nodePath string, recursive, sorted bool) (*Event, error) {",
                "+\tvar err *etcdErr.Error",
                "+",
                "+\ts.worldLock.RLock()",
                "+\tdefer s.worldLock.RUnlock()",
                "+",
                "+\tdefer func() {",
                "+\t\tif err == nil {",
                "+\t\t\ts.Stats.Inc(GetSuccess)",
                "+\t\t\tif recursive {",
                "+\t\t\t\treportReadSuccess(GetRecursive)",
                "+\t\t\t} else {",
                "+\t\t\t\treportReadSuccess(Get)",
                "+\t\t\t}",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\ts.Stats.Inc(GetFail)",
                "+\t\tif recursive {",
                "+\t\t\treportReadFailure(GetRecursive)",
                "+\t\t} else {",
                "+\t\t\treportReadFailure(Get)",
                "+\t\t}",
                "+\t}()",
                "+",
                "+\tn, err := s.internalGet(nodePath)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\te := newEvent(Get, nodePath, n.ModifiedIndex, n.CreatedIndex)",
                "+\te.EtcdIndex = s.CurrentIndex",
                "+\te.Node.loadInternalNode(n, recursive, sorted, s.clock)",
                "+",
                "+\treturn e, nil",
                "+}",
                "+",
                "+// Create creates the node at nodePath. Create will help to create intermediate directories with no ttl.",
                "+// If the node has already existed, create will fail.",
                "+// If any node on the path is a file, create will fail.",
                "+func (s *store) Create(nodePath string, dir bool, value string, unique bool, expireOpts TTLOptionSet) (*Event, error) {",
                "+\tvar err *etcdErr.Error",
                "+",
                "+\ts.worldLock.Lock()",
                "+\tdefer s.worldLock.Unlock()",
                "+",
                "+\tdefer func() {",
                "+\t\tif err == nil {",
                "+\t\t\ts.Stats.Inc(CreateSuccess)",
                "+\t\t\treportWriteSuccess(Create)",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\ts.Stats.Inc(CreateFail)",
                "+\t\treportWriteFailure(Create)",
                "+\t}()",
                "+",
                "+\te, err := s.internalCreate(nodePath, dir, value, unique, false, expireOpts.ExpireTime, Create)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\te.EtcdIndex = s.CurrentIndex",
                "+\ts.WatcherHub.notify(e)",
                "+",
                "+\treturn e, nil",
                "+}",
                "+",
                "+// Set creates or replace the node at nodePath.",
                "+func (s *store) Set(nodePath string, dir bool, value string, expireOpts TTLOptionSet) (*Event, error) {",
                "+\tvar err *etcdErr.Error",
                "+",
                "+\ts.worldLock.Lock()",
                "+\tdefer s.worldLock.Unlock()",
                "+",
                "+\tdefer func() {",
                "+\t\tif err == nil {",
                "+\t\t\ts.Stats.Inc(SetSuccess)",
                "+\t\t\treportWriteSuccess(Set)",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\ts.Stats.Inc(SetFail)",
                "+\t\treportWriteFailure(Set)",
                "+\t}()",
                "+",
                "+\t// Get prevNode value",
                "+\tn, getErr := s.internalGet(nodePath)",
                "+\tif getErr != nil && getErr.ErrorCode != etcdErr.EcodeKeyNotFound {",
                "+\t\terr = getErr",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tif expireOpts.Refresh {",
                "+\t\tif getErr != nil {",
                "+\t\t\terr = getErr",
                "+\t\t\treturn nil, err",
                "+\t\t} else {",
                "+\t\t\tvalue = n.Value",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// Set new value",
                "+\te, err := s.internalCreate(nodePath, dir, value, false, true, expireOpts.ExpireTime, Set)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\te.EtcdIndex = s.CurrentIndex",
                "+",
                "+\t// Put prevNode into event",
                "+\tif getErr == nil {",
                "+\t\tprev := newEvent(Get, nodePath, n.ModifiedIndex, n.CreatedIndex)",
                "+\t\tprev.Node.loadInternalNode(n, false, false, s.clock)",
                "+\t\te.PrevNode = prev.Node",
                "+\t}",
                "+",
                "+\tif !expireOpts.Refresh {",
                "+\t\ts.WatcherHub.notify(e)",
                "+\t} else {",
                "+\t\te.SetRefresh()",
                "+\t\ts.WatcherHub.add(e)",
                "+\t}",
                "+",
                "+\treturn e, nil",
                "+}",
                "+",
                "+// returns user-readable cause of failed comparison",
                "+func getCompareFailCause(n *node, which int, prevValue string, prevIndex uint64) string {",
                "+\tswitch which {",
                "+\tcase CompareIndexNotMatch:",
                "+\t\treturn fmt.Sprintf(\"[%v != %v]\", prevIndex, n.ModifiedIndex)",
                "+\tcase CompareValueNotMatch:",
                "+\t\treturn fmt.Sprintf(\"[%v != %v]\", prevValue, n.Value)",
                "+\tdefault:",
                "+\t\treturn fmt.Sprintf(\"[%v != %v] [%v != %v]\", prevValue, n.Value, prevIndex, n.ModifiedIndex)",
                "+\t}",
                "+}",
                "+",
                "+func (s *store) CompareAndSwap(nodePath string, prevValue string, prevIndex uint64,",
                "+\tvalue string, expireOpts TTLOptionSet) (*Event, error) {",
                "+",
                "+\tvar err *etcdErr.Error",
                "+",
                "+\ts.worldLock.Lock()",
                "+\tdefer s.worldLock.Unlock()",
                "+",
                "+\tdefer func() {",
                "+\t\tif err == nil {",
                "+\t\t\ts.Stats.Inc(CompareAndSwapSuccess)",
                "+\t\t\treportWriteSuccess(CompareAndSwap)",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\ts.Stats.Inc(CompareAndSwapFail)",
                "+\t\treportWriteFailure(CompareAndSwap)",
                "+\t}()",
                "+",
                "+\tnodePath = path.Clean(path.Join(\"/\", nodePath))",
                "+\t// we do not allow the user to change \"/\"",
                "+\tif s.readonlySet.Contains(nodePath) {",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, \"/\", s.CurrentIndex)",
                "+\t}",
                "+",
                "+\tn, err := s.internalGet(nodePath)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif n.IsDir() { // can only compare and swap file",
                "+\t\terr = etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, s.CurrentIndex)",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\t// If both of the prevValue and prevIndex are given, we will test both of them.",
                "+\t// Command will be executed, only if both of the tests are successful.",
                "+\tif ok, which := n.Compare(prevValue, prevIndex); !ok {",
                "+\t\tcause := getCompareFailCause(n, which, prevValue, prevIndex)",
                "+\t\terr = etcdErr.NewError(etcdErr.EcodeTestFailed, cause, s.CurrentIndex)",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tif expireOpts.Refresh {",
                "+\t\tvalue = n.Value",
                "+\t}",
                "+",
                "+\t// update etcd index",
                "+\ts.CurrentIndex++",
                "+",
                "+\te := newEvent(CompareAndSwap, nodePath, s.CurrentIndex, n.CreatedIndex)",
                "+\te.EtcdIndex = s.CurrentIndex",
                "+\te.PrevNode = n.Repr(false, false, s.clock)",
                "+\teNode := e.Node",
                "+",
                "+\t// if test succeed, write the value",
                "+\tn.Write(value, s.CurrentIndex)",
                "+\tn.UpdateTTL(expireOpts.ExpireTime)",
                "+",
                "+\t// copy the value for safety",
                "+\tvalueCopy := value",
                "+\teNode.Value = &valueCopy",
                "+\teNode.Expiration, eNode.TTL = n.expirationAndTTL(s.clock)",
                "+",
                "+\tif !expireOpts.Refresh {",
                "+\t\ts.WatcherHub.notify(e)",
                "+\t} else {",
                "+\t\te.SetRefresh()",
                "+\t\ts.WatcherHub.add(e)",
                "+\t}",
                "+",
                "+\treturn e, nil",
                "+}",
                "+",
                "+// Delete deletes the node at the given path.",
                "+// If the node is a directory, recursive must be true to delete it.",
                "+func (s *store) Delete(nodePath string, dir, recursive bool) (*Event, error) {",
                "+\tvar err *etcdErr.Error",
                "+",
                "+\ts.worldLock.Lock()",
                "+\tdefer s.worldLock.Unlock()",
                "+",
                "+\tdefer func() {",
                "+\t\tif err == nil {",
                "+\t\t\ts.Stats.Inc(DeleteSuccess)",
                "+\t\t\treportWriteSuccess(Delete)",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\ts.Stats.Inc(DeleteFail)",
                "+\t\treportWriteFailure(Delete)",
                "+\t}()",
                "+",
                "+\tnodePath = path.Clean(path.Join(\"/\", nodePath))",
                "+\t// we do not allow the user to change \"/\"",
                "+\tif s.readonlySet.Contains(nodePath) {",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, \"/\", s.CurrentIndex)",
                "+\t}",
                "+",
                "+\t// recursive implies dir",
                "+\tif recursive {",
                "+\t\tdir = true",
                "+\t}",
                "+",
                "+\tn, err := s.internalGet(nodePath)",
                "+\tif err != nil { // if the node does not exist, return error",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tnextIndex := s.CurrentIndex + 1",
                "+\te := newEvent(Delete, nodePath, nextIndex, n.CreatedIndex)",
                "+\te.EtcdIndex = nextIndex",
                "+\te.PrevNode = n.Repr(false, false, s.clock)",
                "+\teNode := e.Node",
                "+",
                "+\tif n.IsDir() {",
                "+\t\teNode.Dir = true",
                "+\t}",
                "+",
                "+\tcallback := func(path string) { // notify function",
                "+\t\t// notify the watchers with deleted set true",
                "+\t\ts.WatcherHub.notifyWatchers(e, path, true)",
                "+\t}",
                "+",
                "+\terr = n.Remove(dir, recursive, callback)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\t// update etcd index",
                "+\ts.CurrentIndex++",
                "+",
                "+\ts.WatcherHub.notify(e)",
                "+",
                "+\treturn e, nil",
                "+}",
                "+",
                "+func (s *store) CompareAndDelete(nodePath string, prevValue string, prevIndex uint64) (*Event, error) {",
                "+\tvar err *etcdErr.Error",
                "+",
                "+\ts.worldLock.Lock()",
                "+\tdefer s.worldLock.Unlock()",
                "+",
                "+\tdefer func() {",
                "+\t\tif err == nil {",
                "+\t\t\ts.Stats.Inc(CompareAndDeleteSuccess)",
                "+\t\t\treportWriteSuccess(CompareAndDelete)",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\ts.Stats.Inc(CompareAndDeleteFail)",
                "+\t\treportWriteFailure(CompareAndDelete)",
                "+\t}()",
                "+",
                "+\tnodePath = path.Clean(path.Join(\"/\", nodePath))",
                "+",
                "+\tn, err := s.internalGet(nodePath)",
                "+\tif err != nil { // if the node does not exist, return error",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif n.IsDir() { // can only compare and delete file",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, s.CurrentIndex)",
                "+\t}",
                "+",
                "+\t// If both of the prevValue and prevIndex are given, we will test both of them.",
                "+\t// Command will be executed, only if both of the tests are successful.",
                "+\tif ok, which := n.Compare(prevValue, prevIndex); !ok {",
                "+\t\tcause := getCompareFailCause(n, which, prevValue, prevIndex)",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeTestFailed, cause, s.CurrentIndex)",
                "+\t}",
                "+",
                "+\t// update etcd index",
                "+\ts.CurrentIndex++",
                "+",
                "+\te := newEvent(CompareAndDelete, nodePath, s.CurrentIndex, n.CreatedIndex)",
                "+\te.EtcdIndex = s.CurrentIndex",
                "+\te.PrevNode = n.Repr(false, false, s.clock)",
                "+",
                "+\tcallback := func(path string) { // notify function",
                "+\t\t// notify the watchers with deleted set true",
                "+\t\ts.WatcherHub.notifyWatchers(e, path, true)",
                "+\t}",
                "+",
                "+\terr = n.Remove(false, false, callback)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\ts.WatcherHub.notify(e)",
                "+",
                "+\treturn e, nil",
                "+}",
                "+",
                "+func (s *store) Watch(key string, recursive, stream bool, sinceIndex uint64) (Watcher, error) {",
                "+\ts.worldLock.RLock()",
                "+\tdefer s.worldLock.RUnlock()",
                "+",
                "+\tkey = path.Clean(path.Join(\"/\", key))",
                "+\tif sinceIndex == 0 {",
                "+\t\tsinceIndex = s.CurrentIndex + 1",
                "+\t}",
                "+\t// WatcherHub does not know about the current index, so we need to pass it in",
                "+\tw, err := s.WatcherHub.watch(key, recursive, stream, sinceIndex, s.CurrentIndex)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn w, nil",
                "+}",
                "+",
                "+// walk walks all the nodePath and apply the walkFunc on each directory",
                "+func (s *store) walk(nodePath string, walkFunc func(prev *node, component string) (*node, *etcdErr.Error)) (*node, *etcdErr.Error) {",
                "+\tcomponents := strings.Split(nodePath, \"/\")",
                "+",
                "+\tcurr := s.Root",
                "+\tvar err *etcdErr.Error",
                "+",
                "+\tfor i := 1; i < len(components); i++ {",
                "+\t\tif len(components[i]) == 0 { // ignore empty string",
                "+\t\t\treturn curr, nil",
                "+\t\t}",
                "+",
                "+\t\tcurr, err = walkFunc(curr, components[i])",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn curr, nil",
                "+}",
                "+",
                "+// Update updates the value/ttl of the node.",
                "+// If the node is a file, the value and the ttl can be updated.",
                "+// If the node is a directory, only the ttl can be updated.",
                "+func (s *store) Update(nodePath string, newValue string, expireOpts TTLOptionSet) (*Event, error) {",
                "+\tvar err *etcdErr.Error",
                "+",
                "+\ts.worldLock.Lock()",
                "+\tdefer s.worldLock.Unlock()",
                "+",
                "+\tdefer func() {",
                "+\t\tif err == nil {",
                "+\t\t\ts.Stats.Inc(UpdateSuccess)",
                "+\t\t\treportWriteSuccess(Update)",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\ts.Stats.Inc(UpdateFail)",
                "+\t\treportWriteFailure(Update)",
                "+\t}()",
                "+",
                "+\tnodePath = path.Clean(path.Join(\"/\", nodePath))",
                "+\t// we do not allow the user to change \"/\"",
                "+\tif s.readonlySet.Contains(nodePath) {",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, \"/\", s.CurrentIndex)",
                "+\t}",
                "+",
                "+\tcurrIndex, nextIndex := s.CurrentIndex, s.CurrentIndex+1",
                "+",
                "+\tn, err := s.internalGet(nodePath)",
                "+\tif err != nil { // if the node does not exist, return error",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif n.IsDir() && len(newValue) != 0 {",
                "+\t\t// if the node is a directory, we cannot update value to non-empty",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, currIndex)",
                "+\t}",
                "+",
                "+\tif expireOpts.Refresh {",
                "+\t\tnewValue = n.Value",
                "+\t}",
                "+",
                "+\te := newEvent(Update, nodePath, nextIndex, n.CreatedIndex)",
                "+\te.EtcdIndex = nextIndex",
                "+\te.PrevNode = n.Repr(false, false, s.clock)",
                "+\teNode := e.Node",
                "+",
                "+\tn.Write(newValue, nextIndex)",
                "+",
                "+\tif n.IsDir() {",
                "+\t\teNode.Dir = true",
                "+\t} else {",
                "+\t\t// copy the value for safety",
                "+\t\tnewValueCopy := newValue",
                "+\t\teNode.Value = &newValueCopy",
                "+\t}",
                "+",
                "+\t// update ttl",
                "+\tn.UpdateTTL(expireOpts.ExpireTime)",
                "+",
                "+\teNode.Expiration, eNode.TTL = n.expirationAndTTL(s.clock)",
                "+",
                "+\tif !expireOpts.Refresh {",
                "+\t\ts.WatcherHub.notify(e)",
                "+\t} else {",
                "+\t\te.SetRefresh()",
                "+\t\ts.WatcherHub.add(e)",
                "+\t}",
                "+",
                "+\ts.CurrentIndex = nextIndex",
                "+",
                "+\treturn e, nil",
                "+}",
                "+",
                "+func (s *store) internalCreate(nodePath string, dir bool, value string, unique, replace bool,",
                "+\texpireTime time.Time, action string) (*Event, *etcdErr.Error) {",
                "+",
                "+\tcurrIndex, nextIndex := s.CurrentIndex, s.CurrentIndex+1",
                "+",
                "+\tif unique { // append unique item under the node path",
                "+\t\tnodePath += \"/\" + fmt.Sprintf(\"%020s\", strconv.FormatUint(nextIndex, 10))",
                "+\t}",
                "+",
                "+\tnodePath = path.Clean(path.Join(\"/\", nodePath))",
                "+",
                "+\t// we do not allow the user to change \"/\"",
                "+\tif s.readonlySet.Contains(nodePath) {",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, \"/\", currIndex)",
                "+\t}",
                "+",
                "+\t// Assume expire times that are way in the past are",
                "+\t// This can occur when the time is serialized to JS",
                "+\tif expireTime.Before(minExpireTime) {",
                "+\t\texpireTime = Permanent",
                "+\t}",
                "+",
                "+\tdirName, nodeName := path.Split(nodePath)",
                "+",
                "+\t// walk through the nodePath, create dirs and get the last directory node",
                "+\td, err := s.walk(dirName, s.checkDir)",
                "+",
                "+\tif err != nil {",
                "+\t\ts.Stats.Inc(SetFail)",
                "+\t\treportWriteFailure(action)",
                "+\t\terr.Index = currIndex",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\te := newEvent(action, nodePath, nextIndex, nextIndex)",
                "+\teNode := e.Node",
                "+",
                "+\tn, _ := d.GetChild(nodeName)",
                "+",
                "+\t// force will try to replace an existing file",
                "+\tif n != nil {",
                "+\t\tif replace {",
                "+\t\t\tif n.IsDir() {",
                "+\t\t\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, currIndex)",
                "+\t\t\t}",
                "+\t\t\te.PrevNode = n.Repr(false, false, s.clock)",
                "+",
                "+\t\t\tn.Remove(false, false, nil)",
                "+\t\t} else {",
                "+\t\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNodeExist, nodePath, currIndex)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif !dir { // create file",
                "+\t\t// copy the value for safety",
                "+\t\tvalueCopy := value",
                "+\t\teNode.Value = &valueCopy",
                "+",
                "+\t\tn = newKV(s, nodePath, value, nextIndex, d, expireTime)",
                "+",
                "+\t} else { // create directory",
                "+\t\teNode.Dir = true",
                "+",
                "+\t\tn = newDir(s, nodePath, nextIndex, d, expireTime)",
                "+\t}",
                "+",
                "+\t// we are sure d is a directory and does not have the children with name n.Name",
                "+\td.Add(n)",
                "+",
                "+\t// node with TTL",
                "+\tif !n.IsPermanent() {",
                "+\t\ts.ttlKeyHeap.push(n)",
                "+",
                "+\t\teNode.Expiration, eNode.TTL = n.expirationAndTTL(s.clock)",
                "+\t}",
                "+",
                "+\ts.CurrentIndex = nextIndex",
                "+",
                "+\treturn e, nil",
                "+}",
                "+",
                "+// InternalGet gets the node of the given nodePath.",
                "+func (s *store) internalGet(nodePath string) (*node, *etcdErr.Error) {",
                "+\tnodePath = path.Clean(path.Join(\"/\", nodePath))",
                "+",
                "+\twalkFunc := func(parent *node, name string) (*node, *etcdErr.Error) {",
                "+",
                "+\t\tif !parent.IsDir() {",
                "+\t\t\terr := etcdErr.NewError(etcdErr.EcodeNotDir, parent.Path, s.CurrentIndex)",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+",
                "+\t\tchild, ok := parent.Children[name]",
                "+\t\tif ok {",
                "+\t\t\treturn child, nil",
                "+\t\t}",
                "+",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeKeyNotFound, path.Join(parent.Path, name), s.CurrentIndex)",
                "+\t}",
                "+",
                "+\tf, err := s.walk(nodePath, walkFunc)",
                "+",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn f, nil",
                "+}",
                "+",
                "+// DeleteExpiredKeys will delete all expired keys",
                "+func (s *store) DeleteExpiredKeys(cutoff time.Time) {",
                "+\ts.worldLock.Lock()",
                "+\tdefer s.worldLock.Unlock()",
                "+",
                "+\tfor {",
                "+\t\tnode := s.ttlKeyHeap.top()",
                "+\t\tif node == nil || node.ExpireTime.After(cutoff) {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+",
                "+\t\ts.CurrentIndex++",
                "+\t\te := newEvent(Expire, node.Path, s.CurrentIndex, node.CreatedIndex)",
                "+\t\te.EtcdIndex = s.CurrentIndex",
                "+\t\te.PrevNode = node.Repr(false, false, s.clock)",
                "+\t\tif node.IsDir() {",
                "+\t\t\te.Node.Dir = true",
                "+\t\t}",
                "+",
                "+\t\tcallback := func(path string) { // notify function",
                "+\t\t\t// notify the watchers with deleted set true",
                "+\t\t\ts.WatcherHub.notifyWatchers(e, path, true)",
                "+\t\t}",
                "+",
                "+\t\ts.ttlKeyHeap.pop()",
                "+\t\tnode.Remove(true, true, callback)",
                "+",
                "+\t\treportExpiredKey()",
                "+\t\ts.Stats.Inc(ExpireCount)",
                "+",
                "+\t\ts.WatcherHub.notify(e)",
                "+\t}",
                "+",
                "+}",
                "+",
                "+// checkDir will check whether the component is a directory under parent node.",
                "+// If it is a directory, this function will return the pointer to that node.",
                "+// If it does not exist, this function will create a new directory and return the pointer to that node.",
                "+// If it is a file, this function will return error.",
                "+func (s *store) checkDir(parent *node, dirName string) (*node, *etcdErr.Error) {",
                "+\tnode, ok := parent.Children[dirName]",
                "+",
                "+\tif ok {",
                "+\t\tif node.IsDir() {",
                "+\t\t\treturn node, nil",
                "+\t\t}",
                "+",
                "+\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotDir, node.Path, s.CurrentIndex)",
                "+\t}",
                "+",
                "+\tn := newDir(s, path.Join(parent.Path, dirName), s.CurrentIndex+1, parent, Permanent)",
                "+",
                "+\tparent.Children[dirName] = n",
                "+",
                "+\treturn n, nil",
                "+}",
                "+",
                "+// Save saves the static state of the store system.",
                "+// It will not be able to save the state of watchers.",
                "+// It will not save the parent field of the node. Or there will",
                "+// be cyclic dependencies issue for the json package.",
                "+func (s *store) Save() ([]byte, error) {",
                "+\tb, err := json.Marshal(s.Clone())",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn b, nil",
                "+}",
                "+",
                "+func (s *store) SaveNoCopy() ([]byte, error) {",
                "+\tb, err := json.Marshal(s)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn b, nil",
                "+}",
                "+",
                "+func (s *store) Clone() Store {",
                "+\ts.worldLock.Lock()",
                "+",
                "+\tclonedStore := newStore()",
                "+\tclonedStore.CurrentIndex = s.CurrentIndex",
                "+\tclonedStore.Root = s.Root.Clone()",
                "+\tclonedStore.WatcherHub = s.WatcherHub.clone()",
                "+\tclonedStore.Stats = s.Stats.clone()",
                "+\tclonedStore.CurrentVersion = s.CurrentVersion",
                "+",
                "+\ts.worldLock.Unlock()",
                "+\treturn clonedStore",
                "+}",
                "+",
                "+// Recovery recovers the store system from a static state",
                "+// It needs to recover the parent field of the nodes.",
                "+// It needs to delete the expired nodes since the saved time and also",
                "+// needs to create monitoring go routines.",
                "+func (s *store) Recovery(state []byte) error {",
                "+\ts.worldLock.Lock()",
                "+\tdefer s.worldLock.Unlock()",
                "+\terr := json.Unmarshal(state, s)",
                "+",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\ts.ttlKeyHeap = newTtlKeyHeap()",
                "+",
                "+\ts.Root.recoverAndclean()",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *store) JsonStats() []byte {",
                "+\ts.Stats.Watchers = uint64(s.WatcherHub.count)",
                "+\treturn s.Stats.toJson()",
                "+}",
                "+",
                "+func (s *store) HasTTLKeys() bool {",
                "+\ts.worldLock.RLock()",
                "+\tdefer s.worldLock.RUnlock()",
                "+\treturn s.ttlKeyHeap.Len() != 0",
                "+}",
                "diff --git a/etcdserver/v2store/store_bench_test.go b/etcdserver/v2store/store_bench_test.go",
                "new file mode 100644",
                "index 000000000..f8f939aff",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/store_bench_test.go",
                "@@ -0,0 +1,218 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"encoding/json\"",
                "+\t\"fmt\"",
                "+\t\"runtime\"",
                "+\t\"testing\"",
                "+)",
                "+",
                "+func BenchmarkStoreSet128Bytes(b *testing.B) {",
                "+\tbenchStoreSet(b, 128, nil)",
                "+}",
                "+",
                "+func BenchmarkStoreSet1024Bytes(b *testing.B) {",
                "+\tbenchStoreSet(b, 1024, nil)",
                "+}",
                "+",
                "+func BenchmarkStoreSet4096Bytes(b *testing.B) {",
                "+\tbenchStoreSet(b, 4096, nil)",
                "+}",
                "+",
                "+func BenchmarkStoreSetWithJson128Bytes(b *testing.B) {",
                "+\tbenchStoreSet(b, 128, json.Marshal)",
                "+}",
                "+",
                "+func BenchmarkStoreSetWithJson1024Bytes(b *testing.B) {",
                "+\tbenchStoreSet(b, 1024, json.Marshal)",
                "+}",
                "+",
                "+func BenchmarkStoreSetWithJson4096Bytes(b *testing.B) {",
                "+\tbenchStoreSet(b, 4096, json.Marshal)",
                "+}",
                "+",
                "+func BenchmarkStoreDelete(b *testing.B) {",
                "+\tb.StopTimer()",
                "+",
                "+\ts := newStore()",
                "+\tkvs, _ := generateNRandomKV(b.N, 128)",
                "+",
                "+\tmemStats := new(runtime.MemStats)",
                "+\truntime.GC()",
                "+\truntime.ReadMemStats(memStats)",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\t_, err := s.Set(kvs[i][0], false, kvs[i][1], TTLOptionSet{ExpireTime: Permanent})",
                "+\t\tif err != nil {",
                "+\t\t\tpanic(err)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tsetMemStats := new(runtime.MemStats)",
                "+\truntime.GC()",
                "+\truntime.ReadMemStats(setMemStats)",
                "+",
                "+\tb.StartTimer()",
                "+",
                "+\tfor i := range kvs {",
                "+\t\ts.Delete(kvs[i][0], false, false)",
                "+\t}",
                "+",
                "+\tb.StopTimer()",
                "+",
                "+\t// clean up",
                "+\te, err := s.Get(\"/\", false, false)",
                "+\tif err != nil {",
                "+\t\tpanic(err)",
                "+\t}",
                "+",
                "+\tfor _, n := range e.Node.Nodes {",
                "+\t\t_, err := s.Delete(n.Key, true, true)",
                "+\t\tif err != nil {",
                "+\t\t\tpanic(err)",
                "+\t\t}",
                "+\t}",
                "+\ts.WatcherHub.EventHistory = nil",
                "+",
                "+\tdeleteMemStats := new(runtime.MemStats)",
                "+\truntime.GC()",
                "+\truntime.ReadMemStats(deleteMemStats)",
                "+",
                "+\tfmt.Printf(\"\\nBefore set Alloc: %v; After set Alloc: %v, After delete Alloc: %v\\n\",",
                "+\t\tmemStats.Alloc/1000, setMemStats.Alloc/1000, deleteMemStats.Alloc/1000)",
                "+}",
                "+",
                "+func BenchmarkWatch(b *testing.B) {",
                "+\tb.StopTimer()",
                "+\ts := newStore()",
                "+\tkvs, _ := generateNRandomKV(b.N, 128)",
                "+\tb.StartTimer()",
                "+",
                "+\tmemStats := new(runtime.MemStats)",
                "+\truntime.GC()",
                "+\truntime.ReadMemStats(memStats)",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\tw, _ := s.Watch(kvs[i][0], false, false, 0)",
                "+",
                "+\t\te := newEvent(\"set\", kvs[i][0], uint64(i+1), uint64(i+1))",
                "+\t\ts.WatcherHub.notify(e)",
                "+\t\t<-w.EventChan()",
                "+\t\ts.CurrentIndex++",
                "+\t}",
                "+",
                "+\ts.WatcherHub.EventHistory = nil",
                "+\tafterMemStats := new(runtime.MemStats)",
                "+\truntime.GC()",
                "+\truntime.ReadMemStats(afterMemStats)",
                "+\tfmt.Printf(\"\\nBefore Alloc: %v; After Alloc: %v\\n\",",
                "+\t\tmemStats.Alloc/1000, afterMemStats.Alloc/1000)",
                "+}",
                "+",
                "+func BenchmarkWatchWithSet(b *testing.B) {",
                "+\tb.StopTimer()",
                "+\ts := newStore()",
                "+\tkvs, _ := generateNRandomKV(b.N, 128)",
                "+\tb.StartTimer()",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\tw, _ := s.Watch(kvs[i][0], false, false, 0)",
                "+",
                "+\t\ts.Set(kvs[i][0], false, \"test\", TTLOptionSet{ExpireTime: Permanent})",
                "+\t\t<-w.EventChan()",
                "+\t}",
                "+}",
                "+",
                "+func BenchmarkWatchWithSetBatch(b *testing.B) {",
                "+\tb.StopTimer()",
                "+\ts := newStore()",
                "+\tkvs, _ := generateNRandomKV(b.N, 128)",
                "+\tb.StartTimer()",
                "+",
                "+\twatchers := make([]Watcher, b.N)",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\twatchers[i], _ = s.Watch(kvs[i][0], false, false, 0)",
                "+\t}",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\ts.Set(kvs[i][0], false, \"test\", TTLOptionSet{ExpireTime: Permanent})",
                "+\t}",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\t<-watchers[i].EventChan()",
                "+\t}",
                "+",
                "+}",
                "+",
                "+func BenchmarkWatchOneKey(b *testing.B) {",
                "+\ts := newStore()",
                "+\twatchers := make([]Watcher, b.N)",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\twatchers[i], _ = s.Watch(\"/foo\", false, false, 0)",
                "+\t}",
                "+",
                "+\ts.Set(\"/foo\", false, \"\", TTLOptionSet{ExpireTime: Permanent})",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\t<-watchers[i].EventChan()",
                "+\t}",
                "+}",
                "+",
                "+func benchStoreSet(b *testing.B, valueSize int, process func(interface{}) ([]byte, error)) {",
                "+\ts := newStore()",
                "+\tb.StopTimer()",
                "+\tkvs, size := generateNRandomKV(b.N, valueSize)",
                "+\tb.StartTimer()",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\tresp, err := s.Set(kvs[i][0], false, kvs[i][1], TTLOptionSet{ExpireTime: Permanent})",
                "+\t\tif err != nil {",
                "+\t\t\tpanic(err)",
                "+\t\t}",
                "+",
                "+\t\tif process != nil {",
                "+\t\t\t_, err = process(resp)",
                "+\t\t\tif err != nil {",
                "+\t\t\t\tpanic(err)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tb.StopTimer()",
                "+\tmemStats := new(runtime.MemStats)",
                "+\truntime.GC()",
                "+\truntime.ReadMemStats(memStats)",
                "+\tfmt.Printf(\"\\nAlloc: %vKB; Data: %vKB; Kvs: %v; Alloc/Data:%v\\n\",",
                "+\t\tmemStats.Alloc/1000, size/1000, b.N, memStats.Alloc/size)",
                "+}",
                "+",
                "+func generateNRandomKV(n int, valueSize int) ([][]string, uint64) {",
                "+\tvar size uint64",
                "+\tkvs := make([][]string, n)",
                "+\tbytes := make([]byte, valueSize)",
                "+",
                "+\tfor i := 0; i < n; i++ {",
                "+\t\tkvs[i] = make([]string, 2)",
                "+\t\tkvs[i][0] = fmt.Sprintf(\"/%010d/%010d/%010d\", n, n, n)",
                "+\t\tkvs[i][1] = string(bytes)",
                "+\t\tsize = size + uint64(len(kvs[i][0])) + uint64(len(kvs[i][1]))",
                "+\t}",
                "+",
                "+\treturn kvs, size",
                "+}",
                "diff --git a/etcdserver/v2store/store_test.go b/etcdserver/v2store/store_test.go",
                "new file mode 100644",
                "index 000000000..53f393577",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/store_test.go",
                "@@ -0,0 +1,862 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store_test",
                "+",
                "+import (",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+)",
                "+",
                "+type StoreCloser interface {",
                "+\tv2store.Store",
                "+\tClose()",
                "+}",
                "+",
                "+func TestNewStoreWithNamespaces(t *testing.T) {",
                "+\ts := newTestStore(t, \"/0\", \"/1\")",
                "+\tdefer s.Close()",
                "+",
                "+\t_, err := s.Get(\"/0\", false, false)",
                "+\ttestutil.AssertNil(t, err)",
                "+\t_, err = s.Get(\"/1\", false, false)",
                "+\ttestutil.AssertNil(t, err)",
                "+}",
                "+",
                "+// Ensure that the store can retrieve an existing value.",
                "+func TestStoreGetValue(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\tvar eidx uint64 = 1",
                "+\te, err := s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"get\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"bar\")",
                "+}",
                "+",
                "+// Ensure that the store can retrieve a directory in sorted order.",
                "+func TestStoreGetSorted(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\ts.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ts.Create(\"/foo/x\", false, \"0\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ts.Create(\"/foo/z\", false, \"0\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ts.Create(\"/foo/y\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ts.Create(\"/foo/y/a\", false, \"0\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Create(\"/foo/y/b\", false, \"0\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tvar eidx uint64 = 6",
                "+\te, err := s.Get(\"/foo\", true, true)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+",
                "+\tvar yNodes v2store.NodeExterns",
                "+\tsortedStrings := []string{\"/foo/x\", \"/foo/y\", \"/foo/z\"}",
                "+\tfor i := range e.Node.Nodes {",
                "+\t\tnode := e.Node.Nodes[i]",
                "+\t\tif node.Key != sortedStrings[i] {",
                "+\t\t\tt.Errorf(\"expect key = %s, got key = %s\", sortedStrings[i], node.Key)",
                "+\t\t}",
                "+\t\tif node.Key == \"/foo/y\" {",
                "+\t\t\tyNodes = node.Nodes",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tsortedStrings = []string{\"/foo/y/a\", \"/foo/y/b\"}",
                "+\tfor i := range yNodes {",
                "+\t\tnode := yNodes[i]",
                "+\t\tif node.Key != sortedStrings[i] {",
                "+\t\t\tt.Errorf(\"expect key = %s, got key = %s\", sortedStrings[i], node.Key)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestSet(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\t// Set /foo=\"\"",
                "+\tvar eidx uint64 = 1",
                "+\te, err := s.Set(\"/foo\", false, \"\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"set\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertFalse(t, e.Node.Dir)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"\")",
                "+\ttestutil.AssertNil(t, e.Node.Nodes)",
                "+\ttestutil.AssertNil(t, e.Node.Expiration)",
                "+\ttestutil.AssertEqual(t, e.Node.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.Node.ModifiedIndex, uint64(1))",
                "+",
                "+\t// Set /foo=\"bar\"",
                "+\teidx = 2",
                "+\te, err = s.Set(\"/foo\", false, \"bar\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"set\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertFalse(t, e.Node.Dir)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"bar\")",
                "+\ttestutil.AssertNil(t, e.Node.Nodes)",
                "+\ttestutil.AssertNil(t, e.Node.Expiration)",
                "+\ttestutil.AssertEqual(t, e.Node.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.Node.ModifiedIndex, uint64(2))",
                "+\t// check prevNode",
                "+\ttestutil.AssertNotNil(t, e.PrevNode)",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"\")",
                "+\ttestutil.AssertEqual(t, e.PrevNode.ModifiedIndex, uint64(1))",
                "+\t// Set /foo=\"baz\" (for testing prevNode)",
                "+\teidx = 3",
                "+\te, err = s.Set(\"/foo\", false, \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"set\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertFalse(t, e.Node.Dir)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+\ttestutil.AssertNil(t, e.Node.Nodes)",
                "+\ttestutil.AssertNil(t, e.Node.Expiration)",
                "+\ttestutil.AssertEqual(t, e.Node.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.Node.ModifiedIndex, uint64(3))",
                "+\t// check prevNode",
                "+\ttestutil.AssertNotNil(t, e.PrevNode)",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"bar\")",
                "+\ttestutil.AssertEqual(t, e.PrevNode.ModifiedIndex, uint64(2))",
                "+",
                "+\t// Set /dir as a directory",
                "+\teidx = 4",
                "+\te, err = s.Set(\"/dir\", true, \"\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"set\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/dir\")",
                "+\ttestutil.AssertTrue(t, e.Node.Dir)",
                "+\ttestutil.AssertNil(t, e.Node.Value)",
                "+\ttestutil.AssertNil(t, e.Node.Nodes)",
                "+\ttestutil.AssertNil(t, e.Node.Expiration)",
                "+\ttestutil.AssertEqual(t, e.Node.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.Node.ModifiedIndex, uint64(4))",
                "+}",
                "+",
                "+// Ensure that the store can create a new key if it doesn't already exist.",
                "+func TestStoreCreateValue(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\t// Create /foo=bar",
                "+\tvar eidx uint64 = 1",
                "+\te, err := s.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"create\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertFalse(t, e.Node.Dir)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"bar\")",
                "+\ttestutil.AssertNil(t, e.Node.Nodes)",
                "+\ttestutil.AssertNil(t, e.Node.Expiration)",
                "+\ttestutil.AssertEqual(t, e.Node.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.Node.ModifiedIndex, uint64(1))",
                "+",
                "+\t// Create /empty=\"\"",
                "+\teidx = 2",
                "+\te, err = s.Create(\"/empty\", false, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"create\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/empty\")",
                "+\ttestutil.AssertFalse(t, e.Node.Dir)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"\")",
                "+\ttestutil.AssertNil(t, e.Node.Nodes)",
                "+\ttestutil.AssertNil(t, e.Node.Expiration)",
                "+\ttestutil.AssertEqual(t, e.Node.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.Node.ModifiedIndex, uint64(2))",
                "+",
                "+}",
                "+",
                "+// Ensure that the store can create a new directory if it doesn't already exist.",
                "+func TestStoreCreateDirectory(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\tvar eidx uint64 = 1",
                "+\te, err := s.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"create\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertTrue(t, e.Node.Dir)",
                "+}",
                "+",
                "+// Ensure that the store fails to create a key if it already exists.",
                "+func TestStoreCreateFailsIfExists(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\t// create /foo as dir",
                "+\ts.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+",
                "+\t// create /foo as dir again",
                "+\te, _err := s.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\terr := _err.(*etcdErr.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeNodeExist)",
                "+\ttestutil.AssertEqual(t, err.Message, \"Key already exists\")",
                "+\ttestutil.AssertEqual(t, err.Cause, \"/foo\")",
                "+\ttestutil.AssertEqual(t, err.Index, uint64(1))",
                "+\ttestutil.AssertNil(t, e)",
                "+}",
                "+",
                "+// Ensure that the store can update a key if it already exists.",
                "+func TestStoreUpdateValue(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\t// create /foo=bar",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\t// update /foo=\"bzr\"",
                "+\tvar eidx uint64 = 2",
                "+\te, err := s.Update(\"/foo\", \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"update\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertFalse(t, e.Node.Dir)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+\ttestutil.AssertEqual(t, e.Node.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.Node.ModifiedIndex, uint64(2))",
                "+\t// check prevNode",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"bar\")",
                "+\ttestutil.AssertEqual(t, e.PrevNode.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.PrevNode.ModifiedIndex, uint64(1))",
                "+",
                "+\te, _ = s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+",
                "+\t// update /foo=\"\"",
                "+\teidx = 3",
                "+\te, err = s.Update(\"/foo\", \"\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"update\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertFalse(t, e.Node.Dir)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"\")",
                "+\ttestutil.AssertEqual(t, e.Node.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.Node.ModifiedIndex, uint64(3))",
                "+\t// check prevNode",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"baz\")",
                "+\ttestutil.AssertEqual(t, e.PrevNode.TTL, int64(0))",
                "+\ttestutil.AssertEqual(t, e.PrevNode.ModifiedIndex, uint64(2))",
                "+",
                "+\te, _ = s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"\")",
                "+}",
                "+",
                "+// Ensure that the store cannot update a directory.",
                "+func TestStoreUpdateFailsIfDirectory(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\ts.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, _err := s.Update(\"/foo\", \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\terr := _err.(*etcdErr.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeNotFile)",
                "+\ttestutil.AssertEqual(t, err.Message, \"Not a file\")",
                "+\ttestutil.AssertEqual(t, err.Cause, \"/foo\")",
                "+\ttestutil.AssertNil(t, e)",
                "+}",
                "+",
                "+// Ensure that the store can delete a value.",
                "+func TestStoreDeleteValue(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\tvar eidx uint64 = 2",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, err := s.Delete(\"/foo\", false, false)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"delete\")",
                "+\t// check prevNode",
                "+\ttestutil.AssertNotNil(t, e.PrevNode)",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"bar\")",
                "+}",
                "+",
                "+// Ensure that the store can delete a directory if recursive is specified.",
                "+func TestStoreDeleteDirectory(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\t// create directory /foo",
                "+\tvar eidx uint64 = 2",
                "+\ts.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\t// delete /foo with dir = true and recursive = false",
                "+\t// this should succeed, since the directory is empty",
                "+\te, err := s.Delete(\"/foo\", true, false)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"delete\")",
                "+\t// check prevNode",
                "+\ttestutil.AssertNotNil(t, e.PrevNode)",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Dir, true)",
                "+",
                "+\t// create directory /foo and directory /foo/bar",
                "+\t_, err = s.Create(\"/foo/bar\", true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\t// delete /foo with dir = true and recursive = false",
                "+\t// this should fail, since the directory is not empty",
                "+\t_, err = s.Delete(\"/foo\", true, false)",
                "+\ttestutil.AssertNotNil(t, err)",
                "+",
                "+\t// delete /foo with dir=false and recursive = true",
                "+\t// this should succeed, since recursive implies dir=true",
                "+\t// and recursively delete should be able to delete all",
                "+\t// items under the given directory",
                "+\te, err = s.Delete(\"/foo\", false, true)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.Action, \"delete\")",
                "+",
                "+}",
                "+",
                "+// Ensure that the store cannot delete a directory if both of recursive",
                "+// and dir are not specified.",
                "+func TestStoreDeleteDirectoryFailsIfNonRecursiveAndDir(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\ts.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, _err := s.Delete(\"/foo\", false, false)",
                "+\terr := _err.(*etcdErr.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeNotFile)",
                "+\ttestutil.AssertEqual(t, err.Message, \"Not a file\")",
                "+\ttestutil.AssertNil(t, e)",
                "+}",
                "+",
                "+func TestRootRdOnly(t *testing.T) {",
                "+\ts := newTestStore(t, \"/0\")",
                "+\tdefer s.Close()",
                "+",
                "+\tfor _, tt := range []string{\"/\", \"/0\"} {",
                "+\t\t_, err := s.Set(tt, true, \"\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\t\ttestutil.AssertNotNil(t, err)",
                "+",
                "+\t\t_, err = s.Delete(tt, true, true)",
                "+\t\ttestutil.AssertNotNil(t, err)",
                "+",
                "+\t\t_, err = s.Create(tt, true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\t\ttestutil.AssertNotNil(t, err)",
                "+",
                "+\t\t_, err = s.Update(tt, \"\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\t\ttestutil.AssertNotNil(t, err)",
                "+",
                "+\t\t_, err = s.CompareAndSwap(tt, \"\", 0, \"\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\t\ttestutil.AssertNotNil(t, err)",
                "+\t}",
                "+}",
                "+",
                "+func TestStoreCompareAndDeletePrevValue(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\tvar eidx uint64 = 2",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, err := s.CompareAndDelete(\"/foo\", \"bar\", 0)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"compareAndDelete\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+",
                "+\t// check prevNode",
                "+\ttestutil.AssertNotNil(t, e.PrevNode)",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"bar\")",
                "+\ttestutil.AssertEqual(t, e.PrevNode.ModifiedIndex, uint64(1))",
                "+\ttestutil.AssertEqual(t, e.PrevNode.CreatedIndex, uint64(1))",
                "+}",
                "+",
                "+func TestStoreCompareAndDeletePrevValueFailsIfNotMatch(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, _err := s.CompareAndDelete(\"/foo\", \"baz\", 0)",
                "+\terr := _err.(*etcdErr.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeTestFailed)",
                "+\ttestutil.AssertEqual(t, err.Message, \"Compare failed\")",
                "+\ttestutil.AssertNil(t, e)",
                "+\te, _ = s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"bar\")",
                "+}",
                "+",
                "+func TestStoreCompareAndDeletePrevIndex(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\tvar eidx uint64 = 2",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, err := s.CompareAndDelete(\"/foo\", \"\", 1)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"compareAndDelete\")",
                "+\t// check prevNode",
                "+\ttestutil.AssertNotNil(t, e.PrevNode)",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"bar\")",
                "+\ttestutil.AssertEqual(t, e.PrevNode.ModifiedIndex, uint64(1))",
                "+\ttestutil.AssertEqual(t, e.PrevNode.CreatedIndex, uint64(1))",
                "+}",
                "+",
                "+func TestStoreCompareAndDeletePrevIndexFailsIfNotMatch(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, _err := s.CompareAndDelete(\"/foo\", \"\", 100)",
                "+\ttestutil.AssertNotNil(t, _err)",
                "+\terr := _err.(*etcdErr.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeTestFailed)",
                "+\ttestutil.AssertEqual(t, err.Message, \"Compare failed\")",
                "+\ttestutil.AssertNil(t, e)",
                "+\te, _ = s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"bar\")",
                "+}",
                "+",
                "+// Ensure that the store cannot delete a directory.",
                "+func TestStoreCompareAndDeleteDirectoryFail(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\ts.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\t_, _err := s.CompareAndDelete(\"/foo\", \"\", 0)",
                "+\ttestutil.AssertNotNil(t, _err)",
                "+\terr := _err.(*etcdErr.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeNotFile)",
                "+}",
                "+",
                "+// Ensure that the store can conditionally update a key if it has a previous value.",
                "+func TestStoreCompareAndSwapPrevValue(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+",
                "+\tvar eidx uint64 = 2",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, err := s.CompareAndSwap(\"/foo\", \"bar\", 0, \"baz\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"compareAndSwap\")",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+\t// check prevNode",
                "+\ttestutil.AssertNotNil(t, e.PrevNode)",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"bar\")",
                "+\ttestutil.AssertEqual(t, e.PrevNode.ModifiedIndex, uint64(1))",
                "+\ttestutil.AssertEqual(t, e.PrevNode.CreatedIndex, uint64(1))",
                "+",
                "+\te, _ = s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+}",
                "+",
                "+// Ensure that the store cannot conditionally update a key if it has the wrong previous value.",
                "+func TestStoreCompareAndSwapPrevValueFailsIfNotMatch(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, _err := s.CompareAndSwap(\"/foo\", \"wrong_value\", 0, \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\terr := _err.(*etcdErr.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeTestFailed)",
                "+\ttestutil.AssertEqual(t, err.Message, \"Compare failed\")",
                "+\ttestutil.AssertNil(t, e)",
                "+\te, _ = s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"bar\")",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+}",
                "+",
                "+// Ensure that the store can conditionally update a key if it has a previous index.",
                "+func TestStoreCompareAndSwapPrevIndex(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 2",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, err := s.CompareAndSwap(\"/foo\", \"\", 1, \"baz\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"compareAndSwap\")",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+\t// check prevNode",
                "+\ttestutil.AssertNotNil(t, e.PrevNode)",
                "+\ttestutil.AssertEqual(t, e.PrevNode.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"bar\")",
                "+\ttestutil.AssertEqual(t, e.PrevNode.ModifiedIndex, uint64(1))",
                "+\ttestutil.AssertEqual(t, e.PrevNode.CreatedIndex, uint64(1))",
                "+",
                "+\te, _ = s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+}",
                "+",
                "+// Ensure that the store cannot conditionally update a key if it has the wrong previous index.",
                "+func TestStoreCompareAndSwapPrevIndexFailsIfNotMatch(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te, _err := s.CompareAndSwap(\"/foo\", \"\", 100, \"baz\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\terr := _err.(*etcdErr.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeTestFailed)",
                "+\ttestutil.AssertEqual(t, err.Message, \"Compare failed\")",
                "+\ttestutil.AssertNil(t, e)",
                "+\te, _ = s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"bar\")",
                "+}",
                "+",
                "+// Ensure that the store can watch for key creation.",
                "+func TestStoreWatchCreate(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 0",
                "+\tw, _ := s.Watch(\"/foo\", false, false, 0)",
                "+\tc := w.EventChan()",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\teidx = 1",
                "+\te := timeoutSelect(t, c)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"create\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\tselect {",
                "+\tcase e = <-w.EventChan():",
                "+\t\ttestutil.AssertNil(t, e)",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t}",
                "+}",
                "+",
                "+// Ensure that the store can watch for recursive key creation.",
                "+func TestStoreWatchRecursiveCreate(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 0",
                "+\tw, err := s.Watch(\"/foo\", true, false, 0)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\teidx = 1",
                "+\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"create\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo/bar\")",
                "+}",
                "+",
                "+// Ensure that the store can watch for key updates.",
                "+func TestStoreWatchUpdate(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\tw, _ := s.Watch(\"/foo\", false, false, 0)",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\teidx = 2",
                "+\ts.Update(\"/foo\", \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"update\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+}",
                "+",
                "+// Ensure that the store can watch for recursive key updates.",
                "+func TestStoreWatchRecursiveUpdate(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tw, err := s.Watch(\"/foo\", true, false, 0)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\teidx = 2",
                "+\ts.Update(\"/foo/bar\", \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"update\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo/bar\")",
                "+}",
                "+",
                "+// Ensure that the store can watch for key deletions.",
                "+func TestStoreWatchDelete(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\tw, _ := s.Watch(\"/foo\", false, false, 0)",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\teidx = 2",
                "+\ts.Delete(\"/foo\", false, false)",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"delete\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+}",
                "+",
                "+// Ensure that the store can watch for recursive key deletions.",
                "+func TestStoreWatchRecursiveDelete(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tw, err := s.Watch(\"/foo\", true, false, 0)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\teidx = 2",
                "+\ts.Delete(\"/foo/bar\", false, false)",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"delete\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo/bar\")",
                "+}",
                "+",
                "+// Ensure that the store can watch for CAS updates.",
                "+func TestStoreWatchCompareAndSwap(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\tw, _ := s.Watch(\"/foo\", false, false, 0)",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\teidx = 2",
                "+\ts.CompareAndSwap(\"/foo\", \"bar\", 0, \"baz\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"compareAndSwap\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+}",
                "+",
                "+// Ensure that the store can watch for recursive CAS updates.",
                "+func TestStoreWatchRecursiveCompareAndSwap(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\ts.Create(\"/foo/bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tw, _ := s.Watch(\"/foo\", true, false, 0)",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\teidx = 2",
                "+\ts.CompareAndSwap(\"/foo/bar\", \"baz\", 0, \"bat\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"compareAndSwap\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo/bar\")",
                "+}",
                "+",
                "+// Ensure that the store can watch in streaming mode.",
                "+func TestStoreWatchStream(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\tw, _ := s.Watch(\"/foo\", false, true, 0)",
                "+\t// first modification",
                "+\ts.Create(\"/foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"create\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"bar\")",
                "+\tselect {",
                "+\tcase e = <-w.EventChan():",
                "+\t\ttestutil.AssertNil(t, e)",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t}",
                "+\t// second modification",
                "+\teidx = 2",
                "+\ts.Update(\"/foo\", \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te = timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"update\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+\tselect {",
                "+\tcase e = <-w.EventChan():",
                "+\t\ttestutil.AssertNil(t, e)",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t}",
                "+}",
                "+",
                "+// Ensure that the store can watch for hidden keys as long as it's an exact path match.",
                "+func TestStoreWatchCreateWithHiddenKey(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\tw, _ := s.Watch(\"/_foo\", false, false, 0)",
                "+\ts.Create(\"/_foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"create\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/_foo\")",
                "+\tselect {",
                "+\tcase e = <-w.EventChan():",
                "+\t\ttestutil.AssertNil(t, e)",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t}",
                "+}",
                "+",
                "+// Ensure that the store doesn't see hidden key creates without an exact path match in recursive mode.",
                "+func TestStoreWatchRecursiveCreateWithHiddenKey(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tw, _ := s.Watch(\"/foo\", true, false, 0)",
                "+\ts.Create(\"/foo/_bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\te := nbselect(w.EventChan())",
                "+\ttestutil.AssertNil(t, e)",
                "+\tw, _ = s.Watch(\"/foo\", true, false, 0)",
                "+\ts.Create(\"/foo/_baz\", true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tselect {",
                "+\tcase e = <-w.EventChan():",
                "+\t\ttestutil.AssertNil(t, e)",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t}",
                "+\ts.Create(\"/foo/_baz/quux\", false, \"quux\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tselect {",
                "+\tcase e = <-w.EventChan():",
                "+\t\ttestutil.AssertNil(t, e)",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t}",
                "+}",
                "+",
                "+// Ensure that the store doesn't see hidden key updates.",
                "+func TestStoreWatchUpdateWithHiddenKey(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\ts.Create(\"/_foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tw, _ := s.Watch(\"/_foo\", false, false, 0)",
                "+\ts.Update(\"/_foo\", \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.Action, \"update\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/_foo\")",
                "+\te = nbselect(w.EventChan())",
                "+\ttestutil.AssertNil(t, e)",
                "+}",
                "+",
                "+// Ensure that the store doesn't see hidden key updates without an exact path match in recursive mode.",
                "+func TestStoreWatchRecursiveUpdateWithHiddenKey(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\ts.Create(\"/foo/_bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tw, _ := s.Watch(\"/foo\", true, false, 0)",
                "+\ts.Update(\"/foo/_bar\", \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\te := nbselect(w.EventChan())",
                "+\ttestutil.AssertNil(t, e)",
                "+}",
                "+",
                "+// Ensure that the store can watch for key deletions.",
                "+func TestStoreWatchDeleteWithHiddenKey(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 2",
                "+\ts.Create(\"/_foo\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tw, _ := s.Watch(\"/_foo\", false, false, 0)",
                "+\ts.Delete(\"/_foo\", false, false)",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"delete\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/_foo\")",
                "+\te = nbselect(w.EventChan())",
                "+\ttestutil.AssertNil(t, e)",
                "+}",
                "+",
                "+// Ensure that the store doesn't see hidden key deletes without an exact path match in recursive mode.",
                "+func TestStoreWatchRecursiveDeleteWithHiddenKey(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\ts.Create(\"/foo/_bar\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tw, _ := s.Watch(\"/foo\", true, false, 0)",
                "+\ts.Delete(\"/foo/_bar\", false, false)",
                "+\te := nbselect(w.EventChan())",
                "+\ttestutil.AssertNil(t, e)",
                "+}",
                "+",
                "+// Ensure that the store does see hidden key creates if watching deeper than a hidden key in recursive mode.",
                "+func TestStoreWatchRecursiveCreateDeeperThanHiddenKey(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 1",
                "+\tw, _ := s.Watch(\"/_foo/bar\", true, false, 0)",
                "+\ts.Create(\"/_foo/bar/baz\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+",
                "+\te := timeoutSelect(t, w.EventChan())",
                "+\ttestutil.AssertNotNil(t, e)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"create\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/_foo/bar/baz\")",
                "+}",
                "+",
                "+// Ensure that slow consumers are handled properly.",
                "+//",
                "+// Since Watcher.EventChan() has a buffer of size 100 we can only queue 100",
                "+// event per watcher. If the consumer cannot consume the event on time and",
                "+// another event arrives, the channel is closed and event is discarded.",
                "+// This test ensures that after closing the channel, the store can continue",
                "+// to operate correctly.",
                "+func TestStoreWatchSlowConsumer(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\ts.Watch(\"/foo\", true, true, 0) // stream must be true",
                "+\t// Fill watch channel with 100 events",
                "+\tfor i := 1; i <= 100; i++ {",
                "+\t\ts.Set(\"/foo\", false, string(i), v2store.TTLOptionSet{ExpireTime: v2store.Permanent}) // ok",
                "+\t}",
                "+\t// testutil.AssertEqual(t, s.WatcherHub.count, int64(1))",
                "+\ts.Set(\"/foo\", false, \"101\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent}) // ok",
                "+\t// remove watcher",
                "+\t// testutil.AssertEqual(t, s.WatcherHub.count, int64(0))",
                "+\ts.Set(\"/foo\", false, \"102\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent}) // must not panic",
                "+}",
                "+",
                "+// Performs a non-blocking select on an event channel.",
                "+func nbselect(c <-chan *store.Event) *store.Event {",
                "+\tselect {",
                "+\tcase e := <-c:",
                "+\t\treturn e",
                "+\tdefault:",
                "+\t\treturn nil",
                "+\t}",
                "+}",
                "+",
                "+// Performs a non-blocking select on an event channel.",
                "+func timeoutSelect(t *testing.T, c <-chan *store.Event) *store.Event {",
                "+\tselect {",
                "+\tcase e := <-c:",
                "+\t\treturn e",
                "+\tcase <-time.After(time.Second):",
                "+\t\tt.Errorf(\"timed out waiting on event\")",
                "+\t\treturn nil",
                "+\t}",
                "+}",
                "diff --git a/etcdserver/v2store/store_ttl_test.go b/etcdserver/v2store/store_ttl_test.go",
                "new file mode 100644",
                "index 000000000..0b4bdd7b6",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/store_ttl_test.go",
                "@@ -0,0 +1,361 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+// Ensure that any TTL <= minExpireTime becomes Permanent",
                "+func TestMinExpireTime(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := clockwork.NewFakeClock()",
                "+\ts.clock = fc",
                "+\t// FakeClock starts at 0, so minExpireTime should be far in the future.. but just in case",
                "+\ttestutil.AssertTrue(t, minExpireTime.After(fc.Now()), \"minExpireTime should be ahead of FakeClock!\")",
                "+\ts.Create(\"/foo\", false, \"Y\", false, TTLOptionSet{ExpireTime: fc.Now().Add(3 * time.Second)})",
                "+\tfc.Advance(5 * time.Second)",
                "+\t// Ensure it hasn't expired",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\tvar eidx uint64 = 1",
                "+\te, err := s.Get(\"/foo\", true, false)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"get\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, e.Node.TTL, int64(0))",
                "+}",
                "+",
                "+// Ensure that the store can recursively retrieve a directory listing.",
                "+// Note that hidden files should not be returned.",
                "+func TestStoreGetDirectory(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+\ts.Create(\"/foo\", true, \"\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo/bar\", false, \"X\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo/_hidden\", false, \"*\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo/baz\", true, \"\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo/baz/bat\", false, \"Y\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo/baz/_hidden\", false, \"*\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo/baz/ttl\", false, \"Y\", false, TTLOptionSet{ExpireTime: fc.Now().Add(time.Second * 3)})",
                "+\tvar eidx uint64 = 7",
                "+\te, err := s.Get(\"/foo\", true, false)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"get\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, len(e.Node.Nodes), 2)",
                "+\tvar bazNodes NodeExterns",
                "+\tfor _, node := range e.Node.Nodes {",
                "+\t\tswitch node.Key {",
                "+\t\tcase \"/foo/bar\":",
                "+\t\t\ttestutil.AssertEqual(t, *node.Value, \"X\")",
                "+\t\t\ttestutil.AssertEqual(t, node.Dir, false)",
                "+\t\tcase \"/foo/baz\":",
                "+\t\t\ttestutil.AssertEqual(t, node.Dir, true)",
                "+\t\t\ttestutil.AssertEqual(t, len(node.Nodes), 2)",
                "+\t\t\tbazNodes = node.Nodes",
                "+\t\tdefault:",
                "+\t\t\tt.Errorf(\"key = %s, not matched\", node.Key)",
                "+\t\t}",
                "+\t}",
                "+\tfor _, node := range bazNodes {",
                "+\t\tswitch node.Key {",
                "+\t\tcase \"/foo/baz/bat\":",
                "+\t\t\ttestutil.AssertEqual(t, *node.Value, \"Y\")",
                "+\t\t\ttestutil.AssertEqual(t, node.Dir, false)",
                "+\t\tcase \"/foo/baz/ttl\":",
                "+\t\t\ttestutil.AssertEqual(t, *node.Value, \"Y\")",
                "+\t\t\ttestutil.AssertEqual(t, node.Dir, false)",
                "+\t\t\ttestutil.AssertEqual(t, node.TTL, int64(3))",
                "+\t\tdefault:",
                "+\t\t\tt.Errorf(\"key = %s, not matched\", node.Key)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// Ensure that the store can update the TTL on a value.",
                "+func TestStoreUpdateValueTTL(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+",
                "+\tvar eidx uint64 = 2",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\t_, err := s.Update(\"/foo\", \"baz\", TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond)})",
                "+\ttestutil.AssertNil(t, err)",
                "+\te, _ := s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\tfc.Advance(600 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\te, err = s.Get(\"/foo\", false, false)",
                "+\ttestutil.AssertNil(t, e)",
                "+\ttestutil.AssertEqual(t, err.(*etcdErr.Error).ErrorCode, etcdErr.EcodeKeyNotFound)",
                "+}",
                "+",
                "+// Ensure that the store can update the TTL on a directory.",
                "+func TestStoreUpdateDirTTL(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+",
                "+\tvar eidx uint64 = 3",
                "+\ts.Create(\"/foo\", true, \"\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo/bar\", false, \"baz\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\te, err := s.Update(\"/foo\", \"\", TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond)})",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.Node.Dir, true)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\te, _ = s.Get(\"/foo/bar\", false, false)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+",
                "+\tfc.Advance(600 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\te, err = s.Get(\"/foo/bar\", false, false)",
                "+\ttestutil.AssertNil(t, e)",
                "+\ttestutil.AssertEqual(t, err.(*etcdErr.Error).ErrorCode, etcdErr.EcodeKeyNotFound)",
                "+}",
                "+",
                "+// Ensure that the store can watch for key expiration.",
                "+func TestStoreWatchExpire(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+",
                "+\tvar eidx uint64 = 3",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(400 * time.Millisecond)})",
                "+\ts.Create(\"/foofoo\", false, \"barbarbar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(450 * time.Millisecond)})",
                "+\ts.Create(\"/foodir\", true, \"\", false, TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond)})",
                "+",
                "+\tw, _ := s.Watch(\"/\", true, false, 0)",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\tc := w.EventChan()",
                "+\te := nbselect(c)",
                "+\ttestutil.AssertNil(t, e)",
                "+\tfc.Advance(600 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\teidx = 4",
                "+\te = nbselect(c)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"expire\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\tw, _ = s.Watch(\"/\", true, false, 5)",
                "+\teidx = 6",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\te = nbselect(w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"expire\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foofoo\")",
                "+\tw, _ = s.Watch(\"/\", true, false, 6)",
                "+\te = nbselect(w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"expire\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foodir\")",
                "+\ttestutil.AssertEqual(t, e.Node.Dir, true)",
                "+}",
                "+",
                "+// Ensure that the store can watch for key expiration when refreshing.",
                "+func TestStoreWatchExpireRefresh(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+",
                "+\tvar eidx uint64 = 2",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: true})",
                "+\ts.Create(\"/foofoo\", false, \"barbarbar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(1200 * time.Millisecond), Refresh: true})",
                "+",
                "+\t// Make sure we set watch updates when Refresh is true for newly created keys",
                "+\tw, _ := s.Watch(\"/\", true, false, 0)",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\tc := w.EventChan()",
                "+\te := nbselect(c)",
                "+\ttestutil.AssertNil(t, e)",
                "+\tfc.Advance(600 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\teidx = 3",
                "+\te = nbselect(c)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"expire\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+",
                "+\ts.Update(\"/foofoo\", \"\", TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: true})",
                "+\tw, _ = s.Watch(\"/\", true, false, 4)",
                "+\tfc.Advance(700 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\teidx = 5 // We should skip 4 because a TTL update should occur with no watch notification if set `TTLOptionSet.Refresh` to true",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx-1)",
                "+\te = nbselect(w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"expire\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foofoo\")",
                "+}",
                "+",
                "+// Ensure that the store can watch for key expiration when refreshing with an empty value.",
                "+func TestStoreWatchExpireEmptyRefresh(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+",
                "+\tvar eidx uint64",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: true})",
                "+\t// Should be no-op",
                "+\tfc.Advance(200 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+",
                "+\ts.Update(\"/foo\", \"\", TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: true})",
                "+\tw, _ := s.Watch(\"/\", true, false, 2)",
                "+\tfc.Advance(700 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\teidx = 3 // We should skip 2 because a TTL update should occur with no watch notification if set `TTLOptionSet.Refresh` to true",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx-1)",
                "+\te := nbselect(w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"expire\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"bar\")",
                "+}",
                "+",
                "+// Update TTL of a key (set TTLOptionSet.Refresh to false) and send notification",
                "+func TestStoreWatchNoRefresh(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+",
                "+\tvar eidx uint64",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: true})",
                "+\t// Should be no-op",
                "+\tfc.Advance(200 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+",
                "+\t// Update key's TTL with setting `TTLOptionSet.Refresh` to false will cause an update event",
                "+\ts.Update(\"/foo\", \"\", TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: false})",
                "+\tw, _ := s.Watch(\"/\", true, false, 2)",
                "+\tfc.Advance(700 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\teidx = 2",
                "+\ttestutil.AssertEqual(t, w.StartIndex(), eidx)",
                "+\te := nbselect(w.EventChan())",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, e.Action, \"update\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foo\")",
                "+\ttestutil.AssertEqual(t, *e.PrevNode.Value, \"bar\")",
                "+}",
                "+",
                "+// Ensure that the store can update the TTL on a value with refresh.",
                "+func TestStoreRefresh(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+",
                "+\ts.Create(\"/foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond)})",
                "+\ts.Create(\"/bar\", true, \"bar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond)})",
                "+\t_, err := s.Update(\"/foo\", \"\", TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: true})",
                "+\ttestutil.AssertNil(t, err)",
                "+",
                "+\t_, err = s.Set(\"/foo\", false, \"\", TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: true})",
                "+\ttestutil.AssertNil(t, err)",
                "+",
                "+\t_, err = s.Update(\"/bar\", \"\", TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: true})",
                "+\ttestutil.AssertNil(t, err)",
                "+",
                "+\t_, err = s.CompareAndSwap(\"/foo\", \"bar\", 0, \"\", TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond), Refresh: true})",
                "+\ttestutil.AssertNil(t, err)",
                "+}",
                "+",
                "+// Ensure that the store can recover from a previously saved state that includes an expiring key.",
                "+func TestStoreRecoverWithExpiration(t *testing.T) {",
                "+\ts := newStore()",
                "+\ts.clock = newFakeClock()",
                "+",
                "+\tfc := newFakeClock()",
                "+",
                "+\tvar eidx uint64 = 4",
                "+\ts.Create(\"/foo\", true, \"\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo/x\", false, \"bar\", false, TTLOptionSet{ExpireTime: Permanent})",
                "+\ts.Create(\"/foo/y\", false, \"baz\", false, TTLOptionSet{ExpireTime: fc.Now().Add(5 * time.Millisecond)})",
                "+\tb, err := s.Save()",
                "+\ttestutil.AssertNil(t, err)",
                "+",
                "+\ttime.Sleep(10 * time.Millisecond)",
                "+",
                "+\ts2 := newStore()",
                "+\ts2.clock = fc",
                "+",
                "+\ts2.Recovery(b)",
                "+",
                "+\tfc.Advance(600 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+",
                "+\te, err := s.Get(\"/foo/x\", false, false)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"bar\")",
                "+",
                "+\te, err = s.Get(\"/foo/y\", false, false)",
                "+\ttestutil.AssertNotNil(t, err)",
                "+\ttestutil.AssertNil(t, e)",
                "+}",
                "+",
                "+// Ensure that the store doesn't see expirations of hidden keys.",
                "+func TestStoreWatchExpireWithHiddenKey(t *testing.T) {",
                "+\ts := newStore()",
                "+\tfc := newFakeClock()",
                "+\ts.clock = fc",
                "+",
                "+\ts.Create(\"/_foo\", false, \"bar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(500 * time.Millisecond)})",
                "+\ts.Create(\"/foofoo\", false, \"barbarbar\", false, TTLOptionSet{ExpireTime: fc.Now().Add(1000 * time.Millisecond)})",
                "+",
                "+\tw, _ := s.Watch(\"/\", true, false, 0)",
                "+\tc := w.EventChan()",
                "+\te := nbselect(c)",
                "+\ttestutil.AssertNil(t, e)",
                "+\tfc.Advance(600 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\te = nbselect(c)",
                "+\ttestutil.AssertNil(t, e)",
                "+\tfc.Advance(600 * time.Millisecond)",
                "+\ts.DeleteExpiredKeys(fc.Now())",
                "+\te = nbselect(c)",
                "+\ttestutil.AssertEqual(t, e.Action, \"expire\")",
                "+\ttestutil.AssertEqual(t, e.Node.Key, \"/foofoo\")",
                "+}",
                "+",
                "+// newFakeClock creates a new FakeClock that has been advanced to at least minExpireTime",
                "+func newFakeClock() clockwork.FakeClock {",
                "+\tfc := clockwork.NewFakeClock()",
                "+\tfor minExpireTime.After(fc.Now()) {",
                "+\t\tfc.Advance((0x1 << 62) * time.Nanosecond)",
                "+\t}",
                "+\treturn fc",
                "+}",
                "+",
                "+// Performs a non-blocking select on an event channel.",
                "+func nbselect(c <-chan *Event) *Event {",
                "+\tselect {",
                "+\tcase e := <-c:",
                "+\t\treturn e",
                "+\tdefault:",
                "+\t\treturn nil",
                "+\t}",
                "+}",
                "diff --git a/etcdserver/v2store/store_v2_test.go b/etcdserver/v2store/store_v2_test.go",
                "new file mode 100644",
                "index 000000000..d661647aa",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/store_v2_test.go",
                "@@ -0,0 +1,62 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// +build !v2v3",
                "+",
                "+package v2store_test",
                "+",
                "+import (",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+)",
                "+",
                "+type v2TestStore struct {",
                "+\tv2store.Store",
                "+}",
                "+",
                "+func (s *v2TestStore) Close() {}",
                "+",
                "+func newTestStore(t *testing.T, ns ...string) StoreCloser {",
                "+\treturn &v2TestStore{v2store.New(ns...)}",
                "+}",
                "+",
                "+// Ensure that the store can recover from a previously saved state.",
                "+func TestStoreRecover(t *testing.T) {",
                "+\ts := newTestStore(t)",
                "+\tdefer s.Close()",
                "+\tvar eidx uint64 = 4",
                "+\ts.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ts.Create(\"/foo/x\", false, \"bar\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\ts.Update(\"/foo/x\", \"barbar\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "+\ts.Create(\"/foo/y\", false, \"baz\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "+\tb, err := s.Save()",
                "+\ttestutil.AssertNil(t, err)",
                "+",
                "+\ts2 := newTestStore(t)",
                "+\ts2.Recovery(b)",
                "+",
                "+\te, err := s.Get(\"/foo/x\", false, false)",
                "+\ttestutil.AssertEqual(t, e.Node.CreatedIndex, uint64(2))",
                "+\ttestutil.AssertEqual(t, e.Node.ModifiedIndex, uint64(3))",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"barbar\")",
                "+",
                "+\te, err = s.Get(\"/foo/y\", false, false)",
                "+\ttestutil.AssertEqual(t, e.EtcdIndex, eidx)",
                "+\ttestutil.AssertNil(t, err)",
                "+\ttestutil.AssertEqual(t, *e.Node.Value, \"baz\")",
                "+}",
                "diff --git a/etcdserver/v2store/store_v2v3_test.go b/etcdserver/v2store/store_v2v3_test.go",
                "new file mode 100644",
                "index 000000000..8232ce09a",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/store_v2v3_test.go",
                "@@ -0,0 +1,52 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// +build v2v3",
                "+",
                "+package v2store_test",
                "+",
                "+import (",
                "+\t\"io/ioutil\"",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/coreos/etcd/clientv3\"",
                "+\t\"github.com/coreos/etcd/etcdserver/api/v2v3\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "+\t\"github.com/coreos/etcd/integration\"",
                "+",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+\t\"google.golang.org/grpc/grpclog\"",
                "+)",
                "+",
                "+func init() {",
                "+\tcapnslog.SetGlobalLogLevel(capnslog.CRITICAL)",
                "+\tclientv3.SetLogger(grpclog.NewLoggerV2(ioutil.Discard, ioutil.Discard, ioutil.Discard))",
                "+}",
                "+",
                "+type v2v3TestStore struct {",
                "+\tv2store.Store",
                "+\tclus *integration.ClusterV3",
                "+\tt    *testing.T",
                "+}",
                "+",
                "+func (s *v2v3TestStore) Close() { s.clus.Terminate(s.t) }",
                "+",
                "+func newTestStore(t *testing.T, ns ...string) StoreCloser {",
                "+\tclus := integration.NewClusterV3(t, &integration.ClusterConfig{Size: 1})",
                "+\treturn &v2v3TestStore{",
                "+\t\tv2v3.NewStore(clus.Client(0), \"/v2/\"),",
                "+\t\tclus,",
                "+\t\tt,",
                "+\t}",
                "+}",
                "diff --git a/etcdserver/v2store/ttl_key_heap.go b/etcdserver/v2store/ttl_key_heap.go",
                "new file mode 100644",
                "index 000000000..477d2b9f3",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/ttl_key_heap.go",
                "@@ -0,0 +1,97 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import \"container/heap\"",
                "+",
                "+// An TTLKeyHeap is a min-heap of TTLKeys order by expiration time",
                "+type ttlKeyHeap struct {",
                "+\tarray  []*node",
                "+\tkeyMap map[*node]int",
                "+}",
                "+",
                "+func newTtlKeyHeap() *ttlKeyHeap {",
                "+\th := &ttlKeyHeap{keyMap: make(map[*node]int)}",
                "+\theap.Init(h)",
                "+\treturn h",
                "+}",
                "+",
                "+func (h ttlKeyHeap) Len() int {",
                "+\treturn len(h.array)",
                "+}",
                "+",
                "+func (h ttlKeyHeap) Less(i, j int) bool {",
                "+\treturn h.array[i].ExpireTime.Before(h.array[j].ExpireTime)",
                "+}",
                "+",
                "+func (h ttlKeyHeap) Swap(i, j int) {",
                "+\t// swap node",
                "+\th.array[i], h.array[j] = h.array[j], h.array[i]",
                "+",
                "+\t// update map",
                "+\th.keyMap[h.array[i]] = i",
                "+\th.keyMap[h.array[j]] = j",
                "+}",
                "+",
                "+func (h *ttlKeyHeap) Push(x interface{}) {",
                "+\tn, _ := x.(*node)",
                "+\th.keyMap[n] = len(h.array)",
                "+\th.array = append(h.array, n)",
                "+}",
                "+",
                "+func (h *ttlKeyHeap) Pop() interface{} {",
                "+\told := h.array",
                "+\tn := len(old)",
                "+\tx := old[n-1]",
                "+\t// Set slice element to nil, so GC can recycle the node.",
                "+\t// This is due to golang GC doesn't support partial recycling:",
                "+\t// https://github.com/golang/go/issues/9618",
                "+\told[n-1] = nil",
                "+\th.array = old[0 : n-1]",
                "+\tdelete(h.keyMap, x)",
                "+\treturn x",
                "+}",
                "+",
                "+func (h *ttlKeyHeap) top() *node {",
                "+\tif h.Len() != 0 {",
                "+\t\treturn h.array[0]",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+func (h *ttlKeyHeap) pop() *node {",
                "+\tx := heap.Pop(h)",
                "+\tn, _ := x.(*node)",
                "+\treturn n",
                "+}",
                "+",
                "+func (h *ttlKeyHeap) push(x interface{}) {",
                "+\theap.Push(h, x)",
                "+}",
                "+",
                "+func (h *ttlKeyHeap) update(n *node) {",
                "+\tindex, ok := h.keyMap[n]",
                "+\tif ok {",
                "+\t\theap.Remove(h, index)",
                "+\t\theap.Push(h, n)",
                "+\t}",
                "+}",
                "+",
                "+func (h *ttlKeyHeap) remove(n *node) {",
                "+\tindex, ok := h.keyMap[n]",
                "+\tif ok {",
                "+\t\theap.Remove(h, index)",
                "+\t}",
                "+}",
                "diff --git a/etcdserver/v2store/watcher.go b/etcdserver/v2store/watcher.go",
                "new file mode 100644",
                "index 000000000..4b1e846a2",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/watcher.go",
                "@@ -0,0 +1,95 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+type Watcher interface {",
                "+\tEventChan() chan *Event",
                "+\tStartIndex() uint64 // The EtcdIndex at which the Watcher was created",
                "+\tRemove()",
                "+}",
                "+",
                "+type watcher struct {",
                "+\teventChan  chan *Event",
                "+\tstream     bool",
                "+\trecursive  bool",
                "+\tsinceIndex uint64",
                "+\tstartIndex uint64",
                "+\thub        *watcherHub",
                "+\tremoved    bool",
                "+\tremove     func()",
                "+}",
                "+",
                "+func (w *watcher) EventChan() chan *Event {",
                "+\treturn w.eventChan",
                "+}",
                "+",
                "+func (w *watcher) StartIndex() uint64 {",
                "+\treturn w.startIndex",
                "+}",
                "+",
                "+// notify function notifies the watcher. If the watcher interests in the given path,",
                "+// the function will return true.",
                "+func (w *watcher) notify(e *Event, originalPath bool, deleted bool) bool {",
                "+\t// watcher is interested the path in three cases and under one condition",
                "+\t// the condition is that the event happens after the watcher's sinceIndex",
                "+",
                "+\t// 1. the path at which the event happens is the path the watcher is watching at.",
                "+\t// For example if the watcher is watching at \"/foo\" and the event happens at \"/foo\",",
                "+\t// the watcher must be interested in that event.",
                "+",
                "+\t// 2. the watcher is a recursive watcher, it interests in the event happens after",
                "+\t// its watching path. For example if watcher A watches at \"/foo\" and it is a recursive",
                "+\t// one, it will interest in the event happens at \"/foo/bar\".",
                "+",
                "+\t// 3. when we delete a directory, we need to force notify all the watchers who watches",
                "+\t// at the file we need to delete.",
                "+\t// For example a watcher is watching at \"/foo/bar\". And we deletes \"/foo\". The watcher",
                "+\t// should get notified even if \"/foo\" is not the path it is watching.",
                "+\tif (w.recursive || originalPath || deleted) && e.Index() >= w.sinceIndex {",
                "+\t\t// We cannot block here if the eventChan capacity is full, otherwise",
                "+\t\t// etcd will hang. eventChan capacity is full when the rate of",
                "+\t\t// notifications are higher than our send rate.",
                "+\t\t// If this happens, we close the channel.",
                "+\t\tselect {",
                "+\t\tcase w.eventChan <- e:",
                "+\t\tdefault:",
                "+\t\t\t// We have missed a notification. Remove the watcher.",
                "+\t\t\t// Removing the watcher also closes the eventChan.",
                "+\t\t\tw.remove()",
                "+\t\t}",
                "+\t\treturn true",
                "+\t}",
                "+\treturn false",
                "+}",
                "+",
                "+// Remove removes the watcher from watcherHub",
                "+// The actual remove function is guaranteed to only be executed once",
                "+func (w *watcher) Remove() {",
                "+\tw.hub.mutex.Lock()",
                "+\tdefer w.hub.mutex.Unlock()",
                "+",
                "+\tclose(w.eventChan)",
                "+\tif w.remove != nil {",
                "+\t\tw.remove()",
                "+\t}",
                "+}",
                "+",
                "+// nopWatcher is a watcher that receives nothing, always blocking.",
                "+type nopWatcher struct{}",
                "+",
                "+func NewNopWatcher() Watcher                 { return &nopWatcher{} }",
                "+func (w *nopWatcher) EventChan() chan *Event { return nil }",
                "+func (w *nopWatcher) StartIndex() uint64     { return 0 }",
                "+func (w *nopWatcher) Remove()                {}",
                "diff --git a/etcdserver/v2store/watcher_hub.go b/etcdserver/v2store/watcher_hub.go",
                "new file mode 100644",
                "index 000000000..4e2a03f57",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/watcher_hub.go",
                "@@ -0,0 +1,200 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import (",
                "+\t\"container/list\"",
                "+\t\"path\"",
                "+\t\"strings\"",
                "+\t\"sync\"",
                "+\t\"sync/atomic\"",
                "+",
                "+\tetcdErr \"github.com/coreos/etcd/error\"",
                "+)",
                "+",
                "+// A watcherHub contains all subscribed watchers",
                "+// watchers is a map with watched path as key and watcher as value",
                "+// EventHistory keeps the old events for watcherHub. It is used to help",
                "+// watcher to get a continuous event history. Or a watcher might miss the",
                "+// event happens between the end of the first watch command and the start",
                "+// of the second command.",
                "+type watcherHub struct {",
                "+\t// count must be the first element to keep 64-bit alignment for atomic",
                "+\t// access",
                "+",
                "+\tcount int64 // current number of watchers.",
                "+",
                "+\tmutex        sync.Mutex",
                "+\twatchers     map[string]*list.List",
                "+\tEventHistory *EventHistory",
                "+}",
                "+",
                "+// newWatchHub creates a watcherHub. The capacity determines how many events we will",
                "+// keep in the eventHistory.",
                "+// Typically, we only need to keep a small size of history[smaller than 20K].",
                "+// Ideally, it should smaller than 20K/s[max throughput] * 2 * 50ms[RTT] = 2000",
                "+func newWatchHub(capacity int) *watcherHub {",
                "+\treturn &watcherHub{",
                "+\t\twatchers:     make(map[string]*list.List),",
                "+\t\tEventHistory: newEventHistory(capacity),",
                "+\t}",
                "+}",
                "+",
                "+// Watch function returns a Watcher.",
                "+// If recursive is true, the first change after index under key will be sent to the event channel of the watcher.",
                "+// If recursive is false, the first change after index at key will be sent to the event channel of the watcher.",
                "+// If index is zero, watch will start from the current index + 1.",
                "+func (wh *watcherHub) watch(key string, recursive, stream bool, index, storeIndex uint64) (Watcher, *etcdErr.Error) {",
                "+\treportWatchRequest()",
                "+\tevent, err := wh.EventHistory.scan(key, recursive, index)",
                "+",
                "+\tif err != nil {",
                "+\t\terr.Index = storeIndex",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tw := &watcher{",
                "+\t\teventChan:  make(chan *Event, 100), // use a buffered channel",
                "+\t\trecursive:  recursive,",
                "+\t\tstream:     stream,",
                "+\t\tsinceIndex: index,",
                "+\t\tstartIndex: storeIndex,",
                "+\t\thub:        wh,",
                "+\t}",
                "+",
                "+\twh.mutex.Lock()",
                "+\tdefer wh.mutex.Unlock()",
                "+\t// If the event exists in the known history, append the EtcdIndex and return immediately",
                "+\tif event != nil {",
                "+\t\tne := event.Clone()",
                "+\t\tne.EtcdIndex = storeIndex",
                "+\t\tw.eventChan <- ne",
                "+\t\treturn w, nil",
                "+\t}",
                "+",
                "+\tl, ok := wh.watchers[key]",
                "+",
                "+\tvar elem *list.Element",
                "+",
                "+\tif ok { // add the new watcher to the back of the list",
                "+\t\telem = l.PushBack(w)",
                "+\t} else { // create a new list and add the new watcher",
                "+\t\tl = list.New()",
                "+\t\telem = l.PushBack(w)",
                "+\t\twh.watchers[key] = l",
                "+\t}",
                "+",
                "+\tw.remove = func() {",
                "+\t\tif w.removed { // avoid removing it twice",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tw.removed = true",
                "+\t\tl.Remove(elem)",
                "+\t\tatomic.AddInt64(&wh.count, -1)",
                "+\t\treportWatcherRemoved()",
                "+\t\tif l.Len() == 0 {",
                "+\t\t\tdelete(wh.watchers, key)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tatomic.AddInt64(&wh.count, 1)",
                "+\treportWatcherAdded()",
                "+",
                "+\treturn w, nil",
                "+}",
                "+",
                "+func (wh *watcherHub) add(e *Event) {",
                "+\twh.EventHistory.addEvent(e)",
                "+}",
                "+",
                "+// notify function accepts an event and notify to the watchers.",
                "+func (wh *watcherHub) notify(e *Event) {",
                "+\te = wh.EventHistory.addEvent(e) // add event into the eventHistory",
                "+",
                "+\tsegments := strings.Split(e.Node.Key, \"/\")",
                "+",
                "+\tcurrPath := \"/\"",
                "+",
                "+\t// walk through all the segments of the path and notify the watchers",
                "+\t// if the path is \"/foo/bar\", it will notify watchers with path \"/\",",
                "+\t// \"/foo\" and \"/foo/bar\"",
                "+",
                "+\tfor _, segment := range segments {",
                "+\t\tcurrPath = path.Join(currPath, segment)",
                "+\t\t// notify the watchers who interests in the changes of current path",
                "+\t\twh.notifyWatchers(e, currPath, false)",
                "+\t}",
                "+}",
                "+",
                "+func (wh *watcherHub) notifyWatchers(e *Event, nodePath string, deleted bool) {",
                "+\twh.mutex.Lock()",
                "+\tdefer wh.mutex.Unlock()",
                "+",
                "+\tl, ok := wh.watchers[nodePath]",
                "+\tif ok {",
                "+\t\tcurr := l.Front()",
                "+",
                "+\t\tfor curr != nil {",
                "+\t\t\tnext := curr.Next() // save reference to the next one in the list",
                "+",
                "+\t\t\tw, _ := curr.Value.(*watcher)",
                "+",
                "+\t\t\toriginalPath := (e.Node.Key == nodePath)",
                "+\t\t\tif (originalPath || !isHidden(nodePath, e.Node.Key)) && w.notify(e, originalPath, deleted) {",
                "+\t\t\t\tif !w.stream { // do not remove the stream watcher",
                "+\t\t\t\t\t// if we successfully notify a watcher",
                "+\t\t\t\t\t// we need to remove the watcher from the list",
                "+\t\t\t\t\t// and decrease the counter",
                "+\t\t\t\t\tw.removed = true",
                "+\t\t\t\t\tl.Remove(curr)",
                "+\t\t\t\t\tatomic.AddInt64(&wh.count, -1)",
                "+\t\t\t\t\treportWatcherRemoved()",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+",
                "+\t\t\tcurr = next // update current to the next element in the list",
                "+\t\t}",
                "+",
                "+\t\tif l.Len() == 0 {",
                "+\t\t\t// if we have notified all watcher in the list",
                "+\t\t\t// we can delete the list",
                "+\t\t\tdelete(wh.watchers, nodePath)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// clone function clones the watcherHub and return the cloned one.",
                "+// only clone the static content. do not clone the current watchers.",
                "+func (wh *watcherHub) clone() *watcherHub {",
                "+\tclonedHistory := wh.EventHistory.clone()",
                "+",
                "+\treturn &watcherHub{",
                "+\t\tEventHistory: clonedHistory,",
                "+\t}",
                "+}",
                "+",
                "+// isHidden checks to see if key path is considered hidden to watch path i.e. the",
                "+// last element is hidden or it's within a hidden directory",
                "+func isHidden(watchPath, keyPath string) bool {",
                "+\t// When deleting a directory, watchPath might be deeper than the actual keyPath",
                "+\t// For example, when deleting /foo we also need to notify watchers on /foo/bar.",
                "+\tif len(watchPath) > len(keyPath) {",
                "+\t\treturn false",
                "+\t}",
                "+\t// if watch path is just a \"/\", after path will start without \"/\"",
                "+\t// add a \"/\" to deal with the special case when watchPath is \"/\"",
                "+\tafterPath := path.Clean(\"/\" + keyPath[len(watchPath):])",
                "+\treturn strings.Contains(afterPath, \"/_\")",
                "+}",
                "diff --git a/etcdserver/v2store/watcher_hub_test.go b/etcdserver/v2store/watcher_hub_test.go",
                "new file mode 100644",
                "index 000000000..61d3f79dc",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/watcher_hub_test.go",
                "@@ -0,0 +1,64 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import \"testing\"",
                "+",
                "+// TestIsHidden tests isHidden functions.",
                "+func TestIsHidden(t *testing.T) {",
                "+\t// watch at \"/\"",
                "+\t// key is \"/_foo\", hidden to \"/\"",
                "+\t// expected: hidden = true",
                "+\twatch := \"/\"",
                "+\tkey := \"/_foo\"",
                "+\thidden := isHidden(watch, key)",
                "+\tif !hidden {",
                "+\t\tt.Fatalf(\"%v should be hidden to %v\\n\", key, watch)",
                "+\t}",
                "+",
                "+\t// watch at \"/_foo\"",
                "+\t// key is \"/_foo\", not hidden to \"/_foo\"",
                "+\t// expected: hidden = false",
                "+\twatch = \"/_foo\"",
                "+\thidden = isHidden(watch, key)",
                "+\tif hidden {",
                "+\t\tt.Fatalf(\"%v should not be hidden to %v\\n\", key, watch)",
                "+\t}",
                "+",
                "+\t// watch at \"/_foo/\"",
                "+\t// key is \"/_foo/foo\", not hidden to \"/_foo\"",
                "+\tkey = \"/_foo/foo\"",
                "+\thidden = isHidden(watch, key)",
                "+\tif hidden {",
                "+\t\tt.Fatalf(\"%v should not be hidden to %v\\n\", key, watch)",
                "+\t}",
                "+",
                "+\t// watch at \"/_foo/\"",
                "+\t// key is \"/_foo/_foo\", hidden to \"/_foo\"",
                "+\tkey = \"/_foo/_foo\"",
                "+\thidden = isHidden(watch, key)",
                "+\tif !hidden {",
                "+\t\tt.Fatalf(\"%v should be hidden to %v\\n\", key, watch)",
                "+\t}",
                "+",
                "+\t// watch at \"/_foo/foo\"",
                "+\t// key is \"/_foo\"",
                "+\twatch = \"_foo/foo\"",
                "+\tkey = \"/_foo/\"",
                "+\thidden = isHidden(watch, key)",
                "+\tif hidden {",
                "+\t\tt.Fatalf(\"%v should not be hidden to %v\\n\", key, watch)",
                "+\t}",
                "+}",
                "diff --git a/etcdserver/v2store/watcher_test.go b/etcdserver/v2store/watcher_test.go",
                "new file mode 100644",
                "index 000000000..e0901028f",
                "--- /dev/null",
                "+++ b/etcdserver/v2store/watcher_test.go",
                "@@ -0,0 +1,90 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2store",
                "+",
                "+import \"testing\"",
                "+",
                "+func TestWatcher(t *testing.T) {",
                "+\ts := newStore()",
                "+\twh := s.WatcherHub",
                "+\tw, err := wh.watch(\"/foo\", true, false, 1, 1)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"%v\", err)",
                "+\t}",
                "+\tc := w.EventChan()",
                "+",
                "+\tselect {",
                "+\tcase <-c:",
                "+\t\tt.Fatal(\"should not receive from channel before send the event\")",
                "+\tdefault:",
                "+\t\t// do nothing",
                "+\t}",
                "+",
                "+\te := newEvent(Create, \"/foo/bar\", 1, 1)",
                "+",
                "+\twh.notify(e)",
                "+",
                "+\tre := <-c",
                "+",
                "+\tif e != re {",
                "+\t\tt.Fatal(\"recv != send\")",
                "+\t}",
                "+",
                "+\tw, _ = wh.watch(\"/foo\", false, false, 2, 1)",
                "+\tc = w.EventChan()",
                "+",
                "+\te = newEvent(Create, \"/foo/bar\", 2, 2)",
                "+",
                "+\twh.notify(e)",
                "+",
                "+\tselect {",
                "+\tcase re = <-c:",
                "+\t\tt.Fatal(\"should not receive from channel if not recursive \", re)",
                "+\tdefault:",
                "+\t\t// do nothing",
                "+\t}",
                "+",
                "+\te = newEvent(Create, \"/foo\", 3, 3)",
                "+",
                "+\twh.notify(e)",
                "+",
                "+\tre = <-c",
                "+",
                "+\tif e != re {",
                "+\t\tt.Fatal(\"recv != send\")",
                "+\t}",
                "+",
                "+\t// ensure we are doing exact matching rather than prefix matching",
                "+\tw, _ = wh.watch(\"/fo\", true, false, 1, 1)",
                "+\tc = w.EventChan()",
                "+",
                "+\tselect {",
                "+\tcase re = <-c:",
                "+\t\tt.Fatal(\"should not receive from channel:\", re)",
                "+\tdefault:",
                "+\t\t// do nothing",
                "+\t}",
                "+",
                "+\te = newEvent(Create, \"/fo/bar\", 3, 3)",
                "+",
                "+\twh.notify(e)",
                "+",
                "+\tre = <-c",
                "+",
                "+\tif e != re {",
                "+\t\tt.Fatal(\"recv != send\")",
                "+\t}",
                "+",
                "+}",
                "diff --git a/pkg/mock/mockstore/store_recorder.go b/pkg/mock/mockstore/store_recorder.go",
                "index f295e5589..c30528e56 100644",
                "--- a/pkg/mock/mockstore/store_recorder.go",
                "+++ b/pkg/mock/mockstore/store_recorder.go",
                "@@ -19,3 +19,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "@@ -25,3 +25,3 @@ import (",
                " type StoreRecorder struct {",
                "-\tstore.Store",
                "+\tv2store.Store",
                " \ttestutil.Recorder",
                "@@ -30,6 +30,6 @@ type StoreRecorder struct {",
                " // storeRecorder records all the methods it receives.",
                "-// storeRecorder DOES NOT work as a actual store.",
                "+// storeRecorder DOES NOT work as a actual v2store.",
                " // It always returns invalid empty response and no error.",
                " type storeRecorder struct {",
                "-\tstore.Store",
                "+\tv2store.Store",
                " \ttestutil.Recorder",
                "@@ -37,3 +37,3 @@ type storeRecorder struct {",
                "-func NewNop() store.Store { return &storeRecorder{Recorder: &testutil.RecorderBuffered{}} }",
                "+func NewNop() v2store.Store { return &storeRecorder{Recorder: &testutil.RecorderBuffered{}} }",
                " func NewRecorder() *StoreRecorder {",
                "@@ -49,3 +49,3 @@ func (s *storeRecorder) Version() int  { return 0 }",
                " func (s *storeRecorder) Index() uint64 { return 0 }",
                "-func (s *storeRecorder) Get(path string, recursive, sorted bool) (*store.Event, error) {",
                "+func (s *storeRecorder) Get(path string, recursive, sorted bool) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -54,5 +54,5 @@ func (s *storeRecorder) Get(path string, recursive, sorted bool) (*store.Event,",
                " \t})",
                "-\treturn &store.Event{}, nil",
                "+\treturn &v2store.Event{}, nil",
                " }",
                "-func (s *storeRecorder) Set(path string, dir bool, val string, expireOpts store.TTLOptionSet) (*store.Event, error) {",
                "+func (s *storeRecorder) Set(path string, dir bool, val string, expireOpts store.TTLOptionSet) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -61,5 +61,5 @@ func (s *storeRecorder) Set(path string, dir bool, val string, expireOpts store.",
                " \t})",
                "-\treturn &store.Event{}, nil",
                "+\treturn &v2store.Event{}, nil",
                " }",
                "-func (s *storeRecorder) Update(path, val string, expireOpts store.TTLOptionSet) (*store.Event, error) {",
                "+func (s *storeRecorder) Update(path, val string, expireOpts store.TTLOptionSet) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -68,5 +68,5 @@ func (s *storeRecorder) Update(path, val string, expireOpts store.TTLOptionSet)",
                " \t})",
                "-\treturn &store.Event{}, nil",
                "+\treturn &v2store.Event{}, nil",
                " }",
                "-func (s *storeRecorder) Create(path string, dir bool, val string, uniq bool, expireOpts store.TTLOptionSet) (*store.Event, error) {",
                "+func (s *storeRecorder) Create(path string, dir bool, val string, uniq bool, expireOpts store.TTLOptionSet) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -75,5 +75,5 @@ func (s *storeRecorder) Create(path string, dir bool, val string, uniq bool, exp",
                " \t})",
                "-\treturn &store.Event{}, nil",
                "+\treturn &v2store.Event{}, nil",
                " }",
                "-func (s *storeRecorder) CompareAndSwap(path, prevVal string, prevIdx uint64, val string, expireOpts store.TTLOptionSet) (*store.Event, error) {",
                "+func (s *storeRecorder) CompareAndSwap(path, prevVal string, prevIdx uint64, val string, expireOpts store.TTLOptionSet) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -82,5 +82,5 @@ func (s *storeRecorder) CompareAndSwap(path, prevVal string, prevIdx uint64, val",
                " \t})",
                "-\treturn &store.Event{}, nil",
                "+\treturn &v2store.Event{}, nil",
                " }",
                "-func (s *storeRecorder) Delete(path string, dir, recursive bool) (*store.Event, error) {",
                "+func (s *storeRecorder) Delete(path string, dir, recursive bool) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -89,5 +89,5 @@ func (s *storeRecorder) Delete(path string, dir, recursive bool) (*store.Event,",
                " \t})",
                "-\treturn &store.Event{}, nil",
                "+\treturn &v2store.Event{}, nil",
                " }",
                "-func (s *storeRecorder) CompareAndDelete(path, prevVal string, prevIdx uint64) (*store.Event, error) {",
                "+func (s *storeRecorder) CompareAndDelete(path, prevVal string, prevIdx uint64) (*v2store.Event, error) {",
                " \ts.Record(testutil.Action{",
                "@@ -96,3 +96,3 @@ func (s *storeRecorder) CompareAndDelete(path, prevVal string, prevIdx uint64) (",
                " \t})",
                "-\treturn &store.Event{}, nil",
                "+\treturn &v2store.Event{}, nil",
                " }",
                "@@ -149,3 +149,3 @@ func NewErrRecorder(err error) *StoreRecorder {",
                "-func (s *errStoreRecorder) Get(path string, recursive, sorted bool) (*store.Event, error) {",
                "+func (s *errStoreRecorder) Get(path string, recursive, sorted bool) (*v2store.Event, error) {",
                " \ts.storeRecorder.Get(path, recursive, sorted)",
                "diff --git a/snapshot/v3_snapshot.go b/snapshot/v3_snapshot.go",
                "index 2a6a0c5a2..311da118f 100644",
                "--- a/snapshot/v3_snapshot.go",
                "+++ b/snapshot/v3_snapshot.go",
                "@@ -32,2 +32,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2store\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "@@ -35,3 +36,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/raftsnap\"",
                "-\t\"github.com/coreos/etcd/internal/store\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "@@ -356,3 +356,3 @@ func (s *v3Manager) saveWALAndSnap() error {",
                " \t// add members again to persist them to the store we create.",
                "-\tst := store.New(etcdserver.StoreClusterPrefix, etcdserver.StoreKeysPrefix)",
                "+\tst := v2store.New(etcdserver.StoreClusterPrefix, etcdserver.StoreKeysPrefix)",
                " \ts.cl.SetStore(st)"
            ],
            "changed_files": [
                "etcdctl/ctlv3/command/migrate_command.go",
                "etcdserver/api/v2http/client.go",
                "etcdserver/api/v2http/client_test.go",
                "etcdserver/api/v2v3/store.go",
                "etcdserver/api/v2v3/watcher.go",
                "etcdserver/apply_v2.go",
                "etcdserver/membership/cluster.go",
                "etcdserver/membership/cluster_test.go",
                "etcdserver/membership/store.go",
                "etcdserver/server.go",
                "etcdserver/server_test.go",
                "etcdserver/snapshot_merge.go",
                "etcdserver/v2_server.go",
                "etcdserver/v2auth/auth_test.go",
                "etcdserver/v2store/doc.go",
                "etcdserver/v2store/event.go",
                "etcdserver/v2store/event_history.go",
                "etcdserver/v2store/event_queue.go",
                "etcdserver/v2store/event_test.go",
                "etcdserver/v2store/heap_test.go",
                "etcdserver/v2store/metrics.go",
                "etcdserver/v2store/node.go",
                "etcdserver/v2store/node_extern.go",
                "etcdserver/v2store/node_extern_test.go",
                "etcdserver/v2store/node_test.go",
                "etcdserver/v2store/stats.go",
                "etcdserver/v2store/stats_test.go",
                "etcdserver/v2store/store.go",
                "etcdserver/v2store/store_bench_test.go",
                "etcdserver/v2store/store_test.go",
                "etcdserver/v2store/store_ttl_test.go",
                "etcdserver/v2store/store_v2_test.go",
                "etcdserver/v2store/store_v2v3_test.go",
                "etcdserver/v2store/ttl_key_heap.go",
                "etcdserver/v2store/watcher.go",
                "etcdserver/v2store/watcher_hub.go",
                "etcdserver/v2store/watcher_hub_test.go",
                "etcdserver/v2store/watcher_test.go",
                "pkg/mock/mockstore/store_recorder.go",
                "snapshot/v3_snapshot.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: record",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8eb7cfb296fd568d68d8eb288a878ac9206ed0a0",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519715127,
            "hunks": 2,
            "message": "auth: a new auth token provider nop This commit adds a new auth token provider named nop. The nop provider refuses every Authenticate() request so CN based authentication can only be allowed. If the tokenOpts parameter of auth.NewTokenProvider() is empty, the provider will be used.",
            "diff": [
                "diff --git a/auth/nop.go b/auth/nop.go",
                "new file mode 100644",
                "index 000000000..d4378747b",
                "--- /dev/null",
                "+++ b/auth/nop.go",
                "@@ -0,0 +1,35 @@",
                "+// Copyright 2018 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package auth",
                "+",
                "+import (",
                "+\t\"context\"",
                "+)",
                "+",
                "+type tokenNop struct{}",
                "+",
                "+func (t *tokenNop) enable()                         {}",
                "+func (t *tokenNop) disable()                        {}",
                "+func (t *tokenNop) invalidateUser(string)           {}",
                "+func (t *tokenNop) genTokenPrefix() (string, error) { return \"\", nil }",
                "+func (t *tokenNop) info(ctx context.Context, token string, rev uint64) (*AuthInfo, bool) {",
                "+\treturn nil, false",
                "+}",
                "+func (t *tokenNop) assign(ctx context.Context, username string, revision uint64) (string, error) {",
                "+\treturn \"\", ErrAuthFailed",
                "+}",
                "+func newTokenProviderNop() (*tokenNop, error) {",
                "+\treturn &tokenNop{}, nil",
                "+}",
                "diff --git a/auth/store.go b/auth/store.go",
                "index d379ffa8e..44d2d5359 100644",
                "--- a/auth/store.go",
                "+++ b/auth/store.go",
                "@@ -1057,2 +1057,4 @@ func NewTokenProvider(tokenOpts string, indexWaiter func(uint64) <-chan struct{}",
                " \t\treturn newTokenProviderJWT(typeSpecificOpts)",
                "+\tcase \"\":",
                "+\t\treturn newTokenProviderNop()",
                " \tdefault:"
            ],
            "changed_files": [
                "auth/nop.go",
                "auth/store.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fbe6767570a30fea5a1af31229394aaace3f01e0",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519692449,
            "hunks": 1,
            "message": "rafthttp: make \"ActiveSince\" non-blocking on write lock \"ActiveSince\" is read-only, and should be able to call concurrently, as long as there is no routine holding write lock (send, send snapshot). e.g. \"ActiveSince\" is used around etcd server \"processInternalRaftRequestOnce\", should be non-blocking Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/rafthttp/transport.go b/rafthttp/transport.go",
                "index 6a127d972..07371e45b 100644",
                "--- a/rafthttp/transport.go",
                "+++ b/rafthttp/transport.go",
                "@@ -340,4 +340,4 @@ func (t *Transport) UpdatePeer(id types.ID, us []string) {",
                " func (t *Transport) ActiveSince(id types.ID) time.Time {",
                "-\tt.mu.Lock()",
                "-\tdefer t.mu.Unlock()",
                "+\tt.mu.RLock()",
                "+\tdefer t.mu.RUnlock()",
                " \tif p, ok := t.peers[id]; ok {"
            ],
            "changed_files": [
                "rafthttp/transport.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, send",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "01db389ea8f8cd78ee84273b2f54feefe136a214",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519257643,
            "hunks": 1,
            "message": "raft: document why reuse candidate's term for vote response in stepCandidate \"stepCandidate\" should reuse candidate's own term, not term in Message, because pre-vote is requested with future term. Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/raft/raft.go b/raft/raft.go",
                "index 235a38b51..ef9b86597 100644",
                "--- a/raft/raft.go",
                "+++ b/raft/raft.go",
                "@@ -1150,2 +1150,4 @@ func stepCandidate(r *raft, m pb.Message) error {",
                " \t\tcase len(r.votes) - gr:",
                "+\t\t\t// pb.MsgPreVoteResp contains future term of pre-candidate",
                "+\t\t\t// m.Term > r.Term; reuse r.Term",
                " \t\t\tr.becomeFollower(r.Term, None)"
            ],
            "changed_files": [
                "raft/raft.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9b5d6edc4b84c7c30354f8549ae577cdf19de16c",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519672121,
            "hunks": 43,
            "message": "*: revert \"internal/raftsnap\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/contrib/raftexample/kvstore.go b/contrib/raftexample/kvstore.go",
                "index 077d4959f..d4df7b3c0 100644",
                "--- a/contrib/raftexample/kvstore.go",
                "+++ b/contrib/raftexample/kvstore.go",
                "@@ -23,3 +23,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " )",
                "diff --git a/contrib/raftexample/raft.go b/contrib/raftexample/raft.go",
                "index c53c6f1f5..f26c0bb40 100644",
                "--- a/contrib/raftexample/raft.go",
                "+++ b/contrib/raftexample/raft.go",
                "@@ -27,3 +27,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "@@ -33,2 +32,3 @@ import (",
                " \t\"github.com/coreos/etcd/rafthttp\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " \t\"github.com/coreos/etcd/wal\"",
                "diff --git a/etcdctl/ctlv2/command/backup_command.go b/etcdctl/ctlv2/command/backup_command.go",
                "index 6a9ecc690..a229a81ff 100644",
                "--- a/etcdctl/ctlv2/command/backup_command.go",
                "+++ b/etcdctl/ctlv2/command/backup_command.go",
                "@@ -27,3 +27,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "@@ -32,2 +31,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " \t\"github.com/coreos/etcd/wal\"",
                "diff --git a/etcdctl/ctlv3/command/migrate_command.go b/etcdctl/ctlv3/command/migrate_command.go",
                "index 0c22ba705..b392bbd52 100644",
                "--- a/etcdctl/ctlv3/command/migrate_command.go",
                "+++ b/etcdctl/ctlv3/command/migrate_command.go",
                "@@ -36,3 +36,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/pbutil\"",
                "@@ -40,2 +39,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " \t\"github.com/coreos/etcd/wal\"",
                "diff --git a/etcdserver/backend.go b/etcdserver/backend.go",
                "index 0b72b0127..3b1030444 100644",
                "--- a/etcdserver/backend.go",
                "+++ b/etcdserver/backend.go",
                "@@ -23,5 +23,5 @@ import (",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " )",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 138c9650d..134e4ab75 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -43,3 +43,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "@@ -56,2 +55,3 @@ import (",
                " \t\"github.com/coreos/etcd/rafthttp\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " \t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdserver/server_test.go b/etcdserver/server_test.go",
                "index 34c1d8f0e..9facd7ecf 100644",
                "--- a/etcdserver/server_test.go",
                "+++ b/etcdserver/server_test.go",
                "@@ -33,3 +33,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/internal/store\"",
                "@@ -48,2 +47,3 @@ import (",
                " \t\"github.com/coreos/etcd/rafthttp\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " )",
                "diff --git a/etcdserver/snapshot_merge.go b/etcdserver/snapshot_merge.go",
                "index 501613d89..05d6f4f78 100644",
                "--- a/etcdserver/snapshot_merge.go",
                "+++ b/etcdserver/snapshot_merge.go",
                "@@ -20,4 +20,4 @@ import (",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " )",
                "diff --git a/etcdserver/storage.go b/etcdserver/storage.go",
                "index b567c518c..8e38814bc 100644",
                "--- a/etcdserver/storage.go",
                "+++ b/etcdserver/storage.go",
                "@@ -20,3 +20,2 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/pbutil\"",
                "@@ -24,2 +23,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " \t\"github.com/coreos/etcd/wal\"",
                "diff --git a/etcdserver/util_test.go b/etcdserver/util_test.go",
                "index 7c07bcd19..e0b75454c 100644",
                "--- a/etcdserver/util_test.go",
                "+++ b/etcdserver/util_test.go",
                "@@ -22,3 +22,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "@@ -26,2 +25,3 @@ import (",
                " \t\"github.com/coreos/etcd/rafthttp\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " )",
                "diff --git a/rafthttp/http.go b/rafthttp/http.go",
                "index c3c095f7c..156345465 100644",
                "--- a/rafthttp/http.go",
                "+++ b/rafthttp/http.go",
                "@@ -25,3 +25,2 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \tpioutil \"github.com/coreos/etcd/pkg/ioutil\"",
                "@@ -29,2 +28,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " \t\"github.com/coreos/etcd/version\"",
                "diff --git a/rafthttp/http_test.go b/rafthttp/http_test.go",
                "index 44622c814..d3ae81104 100644",
                "--- a/rafthttp/http_test.go",
                "+++ b/rafthttp/http_test.go",
                "@@ -28,3 +28,2 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/pbutil\"",
                "@@ -32,2 +31,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " \t\"github.com/coreos/etcd/version\"",
                "diff --git a/rafthttp/peer.go b/rafthttp/peer.go",
                "index 7cf64a024..58b51f034 100644",
                "--- a/rafthttp/peer.go",
                "+++ b/rafthttp/peer.go",
                "@@ -22,3 +22,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "@@ -26,2 +25,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                "diff --git a/rafthttp/snapshot_sender.go b/rafthttp/snapshot_sender.go",
                "index 342a79a1c..f8b47082d 100644",
                "--- a/rafthttp/snapshot_sender.go",
                "+++ b/rafthttp/snapshot_sender.go",
                "@@ -24,3 +24,2 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/httputil\"",
                "@@ -29,2 +28,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " )",
                "diff --git a/rafthttp/snapshot_test.go b/rafthttp/snapshot_test.go",
                "index ed8220fad..7e8503c0a 100644",
                "--- a/rafthttp/snapshot_test.go",
                "+++ b/rafthttp/snapshot_test.go",
                "@@ -27,5 +27,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " )",
                "diff --git a/rafthttp/transport.go b/rafthttp/transport.go",
                "index 6a127d972..c530694d7 100644",
                "--- a/rafthttp/transport.go",
                "+++ b/rafthttp/transport.go",
                "@@ -23,3 +23,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/logutil\"",
                "@@ -29,2 +28,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                "diff --git a/raftsnap/db.go b/raftsnap/db.go",
                "new file mode 100644",
                "index 000000000..cf9ffccb0",
                "--- /dev/null",
                "+++ b/raftsnap/db.go",
                "@@ -0,0 +1,77 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package raftsnap",
                "+",
                "+import (",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"io/ioutil\"",
                "+\t\"os\"",
                "+\t\"path/filepath\"",
                "+",
                "+\t\"github.com/coreos/etcd/pkg/fileutil\"",
                "+)",
                "+",
                "+var ErrNoDBSnapshot = errors.New(\"snap: snapshot file doesn't exist\")",
                "+",
                "+// SaveDBFrom saves snapshot of the database from the given reader. It",
                "+// guarantees the save operation is atomic.",
                "+func (s *Snapshotter) SaveDBFrom(r io.Reader, id uint64) (int64, error) {",
                "+\tf, err := ioutil.TempFile(s.dir, \"tmp\")",
                "+\tif err != nil {",
                "+\t\treturn 0, err",
                "+\t}",
                "+\tvar n int64",
                "+\tn, err = io.Copy(f, r)",
                "+\tif err == nil {",
                "+\t\terr = fileutil.Fsync(f)",
                "+\t}",
                "+\tf.Close()",
                "+\tif err != nil {",
                "+\t\tos.Remove(f.Name())",
                "+\t\treturn n, err",
                "+\t}",
                "+\tfn := s.dbFilePath(id)",
                "+\tif fileutil.Exist(fn) {",
                "+\t\tos.Remove(f.Name())",
                "+\t\treturn n, nil",
                "+\t}",
                "+\terr = os.Rename(f.Name(), fn)",
                "+\tif err != nil {",
                "+\t\tos.Remove(f.Name())",
                "+\t\treturn n, err",
                "+\t}",
                "+",
                "+\tplog.Infof(\"saved database snapshot to disk [total bytes: %d]\", n)",
                "+",
                "+\treturn n, nil",
                "+}",
                "+",
                "+// DBFilePath returns the file path for the snapshot of the database with",
                "+// given id. If the snapshot does not exist, it returns error.",
                "+func (s *Snapshotter) DBFilePath(id uint64) (string, error) {",
                "+\tif _, err := fileutil.ReadDir(s.dir); err != nil {",
                "+\t\treturn \"\", err",
                "+\t}",
                "+\tif fn := s.dbFilePath(id); fileutil.Exist(fn) {",
                "+\t\treturn fn, nil",
                "+\t}",
                "+\treturn \"\", ErrNoDBSnapshot",
                "+}",
                "+",
                "+func (s *Snapshotter) dbFilePath(id uint64) string {",
                "+\treturn filepath.Join(s.dir, fmt.Sprintf(\"%016x.snap.db\", id))",
                "+}",
                "diff --git a/raftsnap/doc.go b/raftsnap/doc.go",
                "new file mode 100644",
                "index 000000000..68026689e",
                "--- /dev/null",
                "+++ b/raftsnap/doc.go",
                "@@ -0,0 +1,17 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package raftsnap handles Raft nodes' states with snapshots.",
                "+// The snapshot logic is internal to etcd server and raft package.",
                "+package raftsnap",
                "diff --git a/raftsnap/message.go b/raftsnap/message.go",
                "new file mode 100644",
                "index 000000000..3826b2cb2",
                "--- /dev/null",
                "+++ b/raftsnap/message.go",
                "@@ -0,0 +1,64 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package raftsnap",
                "+",
                "+import (",
                "+\t\"io\"",
                "+",
                "+\t\"github.com/coreos/etcd/pkg/ioutil\"",
                "+\t\"github.com/coreos/etcd/raft/raftpb\"",
                "+)",
                "+",
                "+// Message is a struct that contains a raft Message and a ReadCloser. The type",
                "+// of raft message MUST be MsgSnap, which contains the raft meta-data and an",
                "+// additional data []byte field that contains the snapshot of the actual state",
                "+// machine.",
                "+// Message contains the ReadCloser field for handling large snapshot. This avoid",
                "+// copying the entire snapshot into a byte array, which consumes a lot of memory.",
                "+//",
                "+// User of Message should close the Message after sending it.",
                "+type Message struct {",
                "+\traftpb.Message",
                "+\tReadCloser io.ReadCloser",
                "+\tTotalSize  int64",
                "+\tcloseC     chan bool",
                "+}",
                "+",
                "+func NewMessage(rs raftpb.Message, rc io.ReadCloser, rcSize int64) *Message {",
                "+\treturn &Message{",
                "+\t\tMessage:    rs,",
                "+\t\tReadCloser: ioutil.NewExactReadCloser(rc, rcSize),",
                "+\t\tTotalSize:  int64(rs.Size()) + rcSize,",
                "+\t\tcloseC:     make(chan bool, 1),",
                "+\t}",
                "+}",
                "+",
                "+// CloseNotify returns a channel that receives a single value",
                "+// when the message sent is finished. true indicates the sent",
                "+// is successful.",
                "+func (m Message) CloseNotify() <-chan bool {",
                "+\treturn m.closeC",
                "+}",
                "+",
                "+func (m Message) CloseWithError(err error) {",
                "+\tif cerr := m.ReadCloser.Close(); cerr != nil {",
                "+\t\terr = cerr",
                "+\t}",
                "+\tif err == nil {",
                "+\t\tm.closeC <- true",
                "+\t} else {",
                "+\t\tm.closeC <- false",
                "+\t}",
                "+}",
                "diff --git a/raftsnap/metrics.go b/raftsnap/metrics.go",
                "new file mode 100644",
                "index 000000000..9ed7fa871",
                "--- /dev/null",
                "+++ b/raftsnap/metrics.go",
                "@@ -0,0 +1,41 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package raftsnap",
                "+",
                "+import \"github.com/prometheus/client_golang/prometheus\"",
                "+",
                "+var (",
                "+\t// TODO: save_fsync latency?",
                "+\tsaveDurations = prometheus.NewHistogram(prometheus.HistogramOpts{",
                "+\t\tNamespace: \"etcd_debugging\",",
                "+\t\tSubsystem: \"snap\",",
                "+\t\tName:      \"save_total_duration_seconds\",",
                "+\t\tHelp:      \"The total latency distributions of save called by snapshot.\",",
                "+\t\tBuckets:   prometheus.ExponentialBuckets(0.001, 2, 14),",
                "+\t})",
                "+",
                "+\tmarshallingDurations = prometheus.NewHistogram(prometheus.HistogramOpts{",
                "+\t\tNamespace: \"etcd_debugging\",",
                "+\t\tSubsystem: \"snap\",",
                "+\t\tName:      \"save_marshalling_duration_seconds\",",
                "+\t\tHelp:      \"The marshalling cost distributions of save called by snapshot.\",",
                "+\t\tBuckets:   prometheus.ExponentialBuckets(0.001, 2, 14),",
                "+\t})",
                "+)",
                "+",
                "+func init() {",
                "+\tprometheus.MustRegister(saveDurations)",
                "+\tprometheus.MustRegister(marshallingDurations)",
                "+}",
                "diff --git a/raftsnap/snappb/snap.pb.go b/raftsnap/snappb/snap.pb.go",
                "new file mode 100644",
                "index 000000000..e72b577f5",
                "--- /dev/null",
                "+++ b/raftsnap/snappb/snap.pb.go",
                "@@ -0,0 +1,336 @@",
                "+// Code generated by protoc-gen-gogo. DO NOT EDIT.",
                "+// source: snap.proto",
                "+",
                "+/*",
                "+\tPackage snappb is a generated protocol buffer package.",
                "+",
                "+\tIt is generated from these files:",
                "+\t\tsnap.proto",
                "+",
                "+\tIt has these top-level messages:",
                "+\t\tSnapshot",
                "+*/",
                "+package snappb",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+",
                "+\tproto \"github.com/golang/protobuf/proto\"",
                "+",
                "+\tmath \"math\"",
                "+",
                "+\t_ \"github.com/gogo/protobuf/gogoproto\"",
                "+",
                "+\tio \"io\"",
                "+)",
                "+",
                "+// Reference imports to suppress errors if they are not otherwise used.",
                "+var _ = proto.Marshal",
                "+var _ = fmt.Errorf",
                "+var _ = math.Inf",
                "+",
                "+// This is a compile-time assertion to ensure that this generated file",
                "+// is compatible with the proto package it is being compiled against.",
                "+// A compilation error at this line likely means your copy of the",
                "+// proto package needs to be updated.",
                "+const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package",
                "+",
                "+type Snapshot struct {",
                "+\tCrc              uint32 `protobuf:\"varint,1,opt,name=crc\" json:\"crc\"`",
                "+\tData             []byte `protobuf:\"bytes,2,opt,name=data\" json:\"data,omitempty\"`",
                "+\tXXX_unrecognized []byte `json:\"-\"`",
                "+}",
                "+",
                "+func (m *Snapshot) Reset()                    { *m = Snapshot{} }",
                "+func (m *Snapshot) String() string            { return proto.CompactTextString(m) }",
                "+func (*Snapshot) ProtoMessage()               {}",
                "+func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptorSnap, []int{0} }",
                "+",
                "+func init() {",
                "+\tproto.RegisterType((*Snapshot)(nil), \"snappb.snapshot\")",
                "+}",
                "+func (m *Snapshot) Marshal() (dAtA []byte, err error) {",
                "+\tsize := m.Size()",
                "+\tdAtA = make([]byte, size)",
                "+\tn, err := m.MarshalTo(dAtA)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn dAtA[:n], nil",
                "+}",
                "+",
                "+func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {",
                "+\tvar i int",
                "+\t_ = i",
                "+\tvar l int",
                "+\t_ = l",
                "+\tdAtA[i] = 0x8",
                "+\ti++",
                "+\ti = encodeVarintSnap(dAtA, i, uint64(m.Crc))",
                "+\tif m.Data != nil {",
                "+\t\tdAtA[i] = 0x12",
                "+\t\ti++",
                "+\t\ti = encodeVarintSnap(dAtA, i, uint64(len(m.Data)))",
                "+\t\ti += copy(dAtA[i:], m.Data)",
                "+\t}",
                "+\tif m.XXX_unrecognized != nil {",
                "+\t\ti += copy(dAtA[i:], m.XXX_unrecognized)",
                "+\t}",
                "+\treturn i, nil",
                "+}",
                "+",
                "+func encodeVarintSnap(dAtA []byte, offset int, v uint64) int {",
                "+\tfor v >= 1<<7 {",
                "+\t\tdAtA[offset] = uint8(v&0x7f | 0x80)",
                "+\t\tv >>= 7",
                "+\t\toffset++",
                "+\t}",
                "+\tdAtA[offset] = uint8(v)",
                "+\treturn offset + 1",
                "+}",
                "+func (m *Snapshot) Size() (n int) {",
                "+\tvar l int",
                "+\t_ = l",
                "+\tn += 1 + sovSnap(uint64(m.Crc))",
                "+\tif m.Data != nil {",
                "+\t\tl = len(m.Data)",
                "+\t\tn += 1 + l + sovSnap(uint64(l))",
                "+\t}",
                "+\tif m.XXX_unrecognized != nil {",
                "+\t\tn += len(m.XXX_unrecognized)",
                "+\t}",
                "+\treturn n",
                "+}",
                "+",
                "+func sovSnap(x uint64) (n int) {",
                "+\tfor {",
                "+\t\tn++",
                "+\t\tx >>= 7",
                "+\t\tif x == 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+\treturn n",
                "+}",
                "+func sozSnap(x uint64) (n int) {",
                "+\treturn sovSnap(uint64((x << 1) ^ uint64((int64(x) >> 63))))",
                "+}",
                "+func (m *Snapshot) Unmarshal(dAtA []byte) error {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tpreIndex := iNdEx",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn ErrIntOverflowSnap",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfieldNum := int32(wire >> 3)",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tif wireType == 4 {",
                "+\t\t\treturn fmt.Errorf(\"proto: snapshot: wiretype end group for non-group\")",
                "+\t\t}",
                "+\t\tif fieldNum <= 0 {",
                "+\t\t\treturn fmt.Errorf(\"proto: snapshot: illegal tag %d (wire type %d)\", fieldNum, wire)",
                "+\t\t}",
                "+\t\tswitch fieldNum {",
                "+\t\tcase 1:",
                "+\t\t\tif wireType != 0 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Crc\", wireType)",
                "+\t\t\t}",
                "+\t\t\tm.Crc = 0",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowSnap",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tm.Crc |= (uint32(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\tcase 2:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Data\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar byteLen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowSnap",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tbyteLen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif byteLen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthSnap",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + byteLen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)",
                "+\t\t\tif m.Data == nil {",
                "+\t\t\t\tm.Data = []byte{}",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tdefault:",
                "+\t\t\tiNdEx = preIndex",
                "+\t\t\tskippy, err := skipSnap(dAtA[iNdEx:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tif skippy < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthSnap",
                "+\t\t\t}",
                "+\t\t\tif (iNdEx + skippy) > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)",
                "+\t\t\tiNdEx += skippy",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif iNdEx > l {",
                "+\t\treturn io.ErrUnexpectedEOF",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+func skipSnap(dAtA []byte) (n int, err error) {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn 0, ErrIntOverflowSnap",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tswitch wireType {",
                "+\t\tcase 0:",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn 0, ErrIntOverflowSnap",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tif dAtA[iNdEx-1] < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 1:",
                "+\t\t\tiNdEx += 8",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 2:",
                "+\t\t\tvar length int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn 0, ErrIntOverflowSnap",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tlength |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tiNdEx += length",
                "+\t\t\tif length < 0 {",
                "+\t\t\t\treturn 0, ErrInvalidLengthSnap",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 3:",
                "+\t\t\tfor {",
                "+\t\t\t\tvar innerWire uint64",
                "+\t\t\t\tvar start int = iNdEx",
                "+\t\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\t\treturn 0, ErrIntOverflowSnap",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\t\tiNdEx++",
                "+\t\t\t\t\tinnerWire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\t\tbreak",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\tinnerWireType := int(innerWire & 0x7)",
                "+\t\t\t\tif innerWireType == 4 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t\tnext, err := skipSnap(dAtA[start:])",
                "+\t\t\t\tif err != nil {",
                "+\t\t\t\t\treturn 0, err",
                "+\t\t\t\t}",
                "+\t\t\t\tiNdEx = start + next",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 4:",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 5:",
                "+\t\t\tiNdEx += 4",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tdefault:",
                "+\t\t\treturn 0, fmt.Errorf(\"proto: illegal wireType %d\", wireType)",
                "+\t\t}",
                "+\t}",
                "+\tpanic(\"unreachable\")",
                "+}",
                "+",
                "+var (",
                "+\tErrInvalidLengthSnap = fmt.Errorf(\"proto: negative length found during unmarshaling\")",
                "+\tErrIntOverflowSnap   = fmt.Errorf(\"proto: integer overflow\")",
                "+)",
                "+",
                "+func init() { proto.RegisterFile(\"snap.proto\", fileDescriptorSnap) }",
                "+",
                "+var fileDescriptorSnap = []byte{",
                "+\t// 126 bytes of a gzipped FileDescriptorProto",
                "+\t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xce, 0x4b, 0x2c,",
                "+\t0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0xb1, 0x0b, 0x92, 0xa4, 0x44, 0xd2, 0xf3,",
                "+\t0xd3, 0xf3, 0xc1, 0x42, 0xfa, 0x20, 0x16, 0x44, 0x56, 0xc9, 0x8c, 0x8b, 0x03, 0x24, 0x5f, 0x9c,",
                "+\t0x91, 0x5f, 0x22, 0x24, 0xc6, 0xc5, 0x9c, 0x5c, 0x94, 0x2c, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xeb,",
                "+\t0xc4, 0x72, 0xe2, 0x9e, 0x3c, 0x43, 0x10, 0x48, 0x40, 0x48, 0x88, 0x8b, 0x25, 0x25, 0xb1, 0x24,",
                "+\t0x51, 0x82, 0x49, 0x81, 0x51, 0x83, 0x27, 0x08, 0xcc, 0x76, 0x12, 0x39, 0xf1, 0x50, 0x8e, 0xe1,",
                "+\t0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e,",
                "+\t0x01, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x0f, 0x32, 0xb2, 0x78, 0x00, 0x00, 0x00,",
                "+}",
                "diff --git a/raftsnap/snappb/snap.proto b/raftsnap/snappb/snap.proto",
                "new file mode 100644",
                "index 000000000..cd3d21d0e",
                "--- /dev/null",
                "+++ b/raftsnap/snappb/snap.proto",
                "@@ -0,0 +1,14 @@",
                "+syntax = \"proto2\";",
                "+package snappb;",
                "+",
                "+import \"gogoproto/gogo.proto\";",
                "+",
                "+option (gogoproto.marshaler_all) = true;",
                "+option (gogoproto.sizer_all) = true;",
                "+option (gogoproto.unmarshaler_all) = true;",
                "+option (gogoproto.goproto_getters_all) = false;",
                "+",
                "+message snapshot {",
                "+\toptional uint32 crc  = 1 [(gogoproto.nullable) = false];",
                "+\toptional bytes data  = 2;",
                "+}",
                "diff --git a/raftsnap/snapshotter.go b/raftsnap/snapshotter.go",
                "new file mode 100644",
                "index 000000000..228f1f6fb",
                "--- /dev/null",
                "+++ b/raftsnap/snapshotter.go",
                "@@ -0,0 +1,203 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package raftsnap",
                "+",
                "+import (",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"hash/crc32\"",
                "+\t\"io/ioutil\"",
                "+\t\"os\"",
                "+\t\"path/filepath\"",
                "+\t\"sort\"",
                "+\t\"strings\"",
                "+\t\"time\"",
                "+",
                "+\tpioutil \"github.com/coreos/etcd/pkg/ioutil\"",
                "+\t\"github.com/coreos/etcd/pkg/pbutil\"",
                "+\t\"github.com/coreos/etcd/raft\"",
                "+\t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap/snappb\"",
                "+",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+)",
                "+",
                "+const (",
                "+\tsnapSuffix = \".snap\"",
                "+)",
                "+",
                "+var (",
                "+\tplog = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"snap\")",
                "+",
                "+\tErrNoSnapshot    = errors.New(\"snap: no available snapshot\")",
                "+\tErrEmptySnapshot = errors.New(\"snap: empty snapshot\")",
                "+\tErrCRCMismatch   = errors.New(\"snap: crc mismatch\")",
                "+\tcrcTable         = crc32.MakeTable(crc32.Castagnoli)",
                "+",
                "+\t// A map of valid files that can be present in the snap folder.",
                "+\tvalidFiles = map[string]bool{",
                "+\t\t\"db\": true,",
                "+\t}",
                "+)",
                "+",
                "+type Snapshotter struct {",
                "+\tdir string",
                "+}",
                "+",
                "+func New(dir string) *Snapshotter {",
                "+\treturn &Snapshotter{",
                "+\t\tdir: dir,",
                "+\t}",
                "+}",
                "+",
                "+func (s *Snapshotter) SaveSnap(snapshot raftpb.Snapshot) error {",
                "+\tif raft.IsEmptySnap(snapshot) {",
                "+\t\treturn nil",
                "+\t}",
                "+\treturn s.save(&snapshot)",
                "+}",
                "+",
                "+func (s *Snapshotter) save(snapshot *raftpb.Snapshot) error {",
                "+\tstart := time.Now()",
                "+",
                "+\tfname := fmt.Sprintf(\"%016x-%016x%s\", snapshot.Metadata.Term, snapshot.Metadata.Index, snapSuffix)",
                "+\tb := pbutil.MustMarshal(snapshot)",
                "+\tcrc := crc32.Update(0, crcTable, b)",
                "+\tsnap := snappb.Snapshot{Crc: crc, Data: b}",
                "+\td, err := snap.Marshal()",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t} else {",
                "+\t\tmarshallingDurations.Observe(float64(time.Since(start)) / float64(time.Second))",
                "+\t}",
                "+",
                "+\terr = pioutil.WriteAndSyncFile(filepath.Join(s.dir, fname), d, 0666)",
                "+\tif err == nil {",
                "+\t\tsaveDurations.Observe(float64(time.Since(start)) / float64(time.Second))",
                "+\t} else {",
                "+\t\terr1 := os.Remove(filepath.Join(s.dir, fname))",
                "+\t\tif err1 != nil {",
                "+\t\t\tplog.Errorf(\"failed to remove broken snapshot file %s\", filepath.Join(s.dir, fname))",
                "+\t\t}",
                "+\t}",
                "+\treturn err",
                "+}",
                "+",
                "+func (s *Snapshotter) Load() (*raftpb.Snapshot, error) {",
                "+\tnames, err := s.snapNames()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tvar snap *raftpb.Snapshot",
                "+\tfor _, name := range names {",
                "+\t\tif snap, err = loadSnap(s.dir, name); err == nil {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+\tif err != nil {",
                "+\t\treturn nil, ErrNoSnapshot",
                "+\t}",
                "+\treturn snap, nil",
                "+}",
                "+",
                "+func loadSnap(dir, name string) (*raftpb.Snapshot, error) {",
                "+\tfpath := filepath.Join(dir, name)",
                "+\tsnap, err := Read(fpath)",
                "+\tif err != nil {",
                "+\t\trenameBroken(fpath)",
                "+\t}",
                "+\treturn snap, err",
                "+}",
                "+",
                "+// Read reads the snapshot named by snapname and returns the snapshot.",
                "+func Read(snapname string) (*raftpb.Snapshot, error) {",
                "+\tb, err := ioutil.ReadFile(snapname)",
                "+\tif err != nil {",
                "+\t\tplog.Errorf(\"cannot read file %v: %v\", snapname, err)",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tif len(b) == 0 {",
                "+\t\tplog.Errorf(\"unexpected empty snapshot\")",
                "+\t\treturn nil, ErrEmptySnapshot",
                "+\t}",
                "+",
                "+\tvar serializedSnap snappb.Snapshot",
                "+\tif err = serializedSnap.Unmarshal(b); err != nil {",
                "+\t\tplog.Errorf(\"corrupted snapshot file %v: %v\", snapname, err)",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tif len(serializedSnap.Data) == 0 || serializedSnap.Crc == 0 {",
                "+\t\tplog.Errorf(\"unexpected empty snapshot\")",
                "+\t\treturn nil, ErrEmptySnapshot",
                "+\t}",
                "+",
                "+\tcrc := crc32.Update(0, crcTable, serializedSnap.Data)",
                "+\tif crc != serializedSnap.Crc {",
                "+\t\tplog.Errorf(\"corrupted snapshot file %v: crc mismatch\", snapname)",
                "+\t\treturn nil, ErrCRCMismatch",
                "+\t}",
                "+",
                "+\tvar snap raftpb.Snapshot",
                "+\tif err = snap.Unmarshal(serializedSnap.Data); err != nil {",
                "+\t\tplog.Errorf(\"corrupted snapshot file %v: %v\", snapname, err)",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn &snap, nil",
                "+}",
                "+",
                "+// snapNames returns the filename of the snapshots in logical time order (from newest to oldest).",
                "+// If there is no available snapshots, an ErrNoSnapshot will be returned.",
                "+func (s *Snapshotter) snapNames() ([]string, error) {",
                "+\tdir, err := os.Open(s.dir)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tdefer dir.Close()",
                "+\tnames, err := dir.Readdirnames(-1)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tsnaps := checkSuffix(names)",
                "+\tif len(snaps) == 0 {",
                "+\t\treturn nil, ErrNoSnapshot",
                "+\t}",
                "+\tsort.Sort(sort.Reverse(sort.StringSlice(snaps)))",
                "+\treturn snaps, nil",
                "+}",
                "+",
                "+func checkSuffix(names []string) []string {",
                "+\tsnaps := []string{}",
                "+\tfor i := range names {",
                "+\t\tif strings.HasSuffix(names[i], snapSuffix) {",
                "+\t\t\tsnaps = append(snaps, names[i])",
                "+\t\t} else {",
                "+\t\t\t// If we find a file which is not a snapshot then check if it's",
                "+\t\t\t// a vaild file. If not throw out a warning.",
                "+\t\t\tif _, ok := validFiles[names[i]]; !ok {",
                "+\t\t\t\tplog.Warningf(\"skipped unexpected non snapshot file %v\", names[i])",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+\treturn snaps",
                "+}",
                "+",
                "+func renameBroken(path string) {",
                "+\tbrokenPath := path + \".broken\"",
                "+\tif err := os.Rename(path, brokenPath); err != nil {",
                "+\t\tplog.Warningf(\"cannot rename broken snapshot file %v to %v: %v\", path, brokenPath, err)",
                "+\t}",
                "+}",
                "diff --git a/raftsnap/snapshotter_test.go b/raftsnap/snapshotter_test.go",
                "new file mode 100644",
                "index 000000000..368154e23",
                "--- /dev/null",
                "+++ b/raftsnap/snapshotter_test.go",
                "@@ -0,0 +1,230 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package raftsnap",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"hash/crc32\"",
                "+\t\"io/ioutil\"",
                "+\t\"os\"",
                "+\t\"path/filepath\"",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/coreos/etcd/raft/raftpb\"",
                "+)",
                "+",
                "+var testSnap = &raftpb.Snapshot{",
                "+\tData: []byte(\"some snapshot\"),",
                "+\tMetadata: raftpb.SnapshotMetadata{",
                "+\t\tConfState: raftpb.ConfState{",
                "+\t\t\tNodes: []uint64{1, 2, 3},",
                "+\t\t},",
                "+\t\tIndex: 1,",
                "+\t\tTerm:  1,",
                "+\t},",
                "+}",
                "+",
                "+func TestSaveAndLoad(t *testing.T) {",
                "+\tdir := filepath.Join(os.TempDir(), \"snapshot\")",
                "+\terr := os.Mkdir(dir, 0700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer os.RemoveAll(dir)",
                "+\tss := New(dir)",
                "+\terr = ss.save(testSnap)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tg, err := ss.Load()",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"err = %v, want nil\", err)",
                "+\t}",
                "+\tif !reflect.DeepEqual(g, testSnap) {",
                "+\t\tt.Errorf(\"snap = %#v, want %#v\", g, testSnap)",
                "+\t}",
                "+}",
                "+",
                "+func TestBadCRC(t *testing.T) {",
                "+\tdir := filepath.Join(os.TempDir(), \"snapshot\")",
                "+\terr := os.Mkdir(dir, 0700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer os.RemoveAll(dir)",
                "+\tss := New(dir)",
                "+\terr = ss.save(testSnap)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer func() { crcTable = crc32.MakeTable(crc32.Castagnoli) }()",
                "+\t// switch to use another crc table",
                "+\t// fake a crc mismatch",
                "+\tcrcTable = crc32.MakeTable(crc32.Koopman)",
                "+",
                "+\t_, err = Read(filepath.Join(dir, fmt.Sprintf(\"%016x-%016x.snap\", 1, 1)))",
                "+\tif err == nil || err != ErrCRCMismatch {",
                "+\t\tt.Errorf(\"err = %v, want %v\", err, ErrCRCMismatch)",
                "+\t}",
                "+}",
                "+",
                "+func TestFailback(t *testing.T) {",
                "+\tdir := filepath.Join(os.TempDir(), \"snapshot\")",
                "+\terr := os.Mkdir(dir, 0700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer os.RemoveAll(dir)",
                "+",
                "+\tlarge := fmt.Sprintf(\"%016x-%016x-%016x.snap\", 0xFFFF, 0xFFFF, 0xFFFF)",
                "+\terr = ioutil.WriteFile(filepath.Join(dir, large), []byte(\"bad data\"), 0666)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tss := New(dir)",
                "+\terr = ss.save(testSnap)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tg, err := ss.Load()",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"err = %v, want nil\", err)",
                "+\t}",
                "+\tif !reflect.DeepEqual(g, testSnap) {",
                "+\t\tt.Errorf(\"snap = %#v, want %#v\", g, testSnap)",
                "+\t}",
                "+\tif f, err := os.Open(filepath.Join(dir, large) + \".broken\"); err != nil {",
                "+\t\tt.Fatal(\"broken snapshot does not exist\")",
                "+\t} else {",
                "+\t\tf.Close()",
                "+\t}",
                "+}",
                "+",
                "+func TestSnapNames(t *testing.T) {",
                "+\tdir := filepath.Join(os.TempDir(), \"snapshot\")",
                "+\terr := os.Mkdir(dir, 0700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer os.RemoveAll(dir)",
                "+\tfor i := 1; i <= 5; i++ {",
                "+\t\tvar f *os.File",
                "+\t\tif f, err = os.Create(filepath.Join(dir, fmt.Sprintf(\"%d.snap\", i))); err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t} else {",
                "+\t\t\tf.Close()",
                "+\t\t}",
                "+\t}",
                "+\tss := New(dir)",
                "+\tnames, err := ss.snapNames()",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"err = %v, want nil\", err)",
                "+\t}",
                "+\tif len(names) != 5 {",
                "+\t\tt.Errorf(\"len = %d, want 10\", len(names))",
                "+\t}",
                "+\tw := []string{\"5.snap\", \"4.snap\", \"3.snap\", \"2.snap\", \"1.snap\"}",
                "+\tif !reflect.DeepEqual(names, w) {",
                "+\t\tt.Errorf(\"names = %v, want %v\", names, w)",
                "+\t}",
                "+}",
                "+",
                "+func TestLoadNewestSnap(t *testing.T) {",
                "+\tdir := filepath.Join(os.TempDir(), \"snapshot\")",
                "+\terr := os.Mkdir(dir, 0700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer os.RemoveAll(dir)",
                "+\tss := New(dir)",
                "+\terr = ss.save(testSnap)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tnewSnap := *testSnap",
                "+\tnewSnap.Metadata.Index = 5",
                "+\terr = ss.save(&newSnap)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tg, err := ss.Load()",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"err = %v, want nil\", err)",
                "+\t}",
                "+\tif !reflect.DeepEqual(g, &newSnap) {",
                "+\t\tt.Errorf(\"snap = %#v, want %#v\", g, &newSnap)",
                "+\t}",
                "+}",
                "+",
                "+func TestNoSnapshot(t *testing.T) {",
                "+\tdir := filepath.Join(os.TempDir(), \"snapshot\")",
                "+\terr := os.Mkdir(dir, 0700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer os.RemoveAll(dir)",
                "+\tss := New(dir)",
                "+\t_, err = ss.Load()",
                "+\tif err != ErrNoSnapshot {",
                "+\t\tt.Errorf(\"err = %v, want %v\", err, ErrNoSnapshot)",
                "+\t}",
                "+}",
                "+",
                "+func TestEmptySnapshot(t *testing.T) {",
                "+\tdir := filepath.Join(os.TempDir(), \"snapshot\")",
                "+\terr := os.Mkdir(dir, 0700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer os.RemoveAll(dir)",
                "+",
                "+\terr = ioutil.WriteFile(filepath.Join(dir, \"1.snap\"), []byte(\"\"), 0x700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t_, err = Read(filepath.Join(dir, \"1.snap\"))",
                "+\tif err != ErrEmptySnapshot {",
                "+\t\tt.Errorf(\"err = %v, want %v\", err, ErrEmptySnapshot)",
                "+\t}",
                "+}",
                "+",
                "+// TestAllSnapshotBroken ensures snapshotter returns",
                "+// ErrNoSnapshot if all the snapshots are broken.",
                "+func TestAllSnapshotBroken(t *testing.T) {",
                "+\tdir := filepath.Join(os.TempDir(), \"snapshot\")",
                "+\terr := os.Mkdir(dir, 0700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer os.RemoveAll(dir)",
                "+",
                "+\terr = ioutil.WriteFile(filepath.Join(dir, \"1.snap\"), []byte(\"bad\"), 0x700)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tss := New(dir)",
                "+\t_, err = ss.Load()",
                "+\tif err != ErrNoSnapshot {",
                "+\t\tt.Errorf(\"err = %v, want %v\", err, ErrNoSnapshot)",
                "+\t}",
                "+}",
                "diff --git a/snapshot/v3_snapshot.go b/snapshot/v3_snapshot.go",
                "index 311da118f..417d855e1 100644",
                "--- a/snapshot/v3_snapshot.go",
                "+++ b/snapshot/v3_snapshot.go",
                "@@ -35,3 +35,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "@@ -42,2 +41,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " \t\"github.com/coreos/etcd/wal\"",
                "diff --git a/tools/etcd-dump-logs/main.go b/tools/etcd-dump-logs/main.go",
                "index e586d1bb4..c1a1e2bb8 100644",
                "--- a/tools/etcd-dump-logs/main.go",
                "+++ b/tools/etcd-dump-logs/main.go",
                "@@ -24,3 +24,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/raftsnap\"",
                " \t\"github.com/coreos/etcd/pkg/pbutil\"",
                "@@ -28,2 +27,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/raftsnap\"",
                " \t\"github.com/coreos/etcd/wal\""
            ],
            "changed_files": [
                "contrib/raftexample/kvstore.go",
                "contrib/raftexample/raft.go",
                "etcdctl/ctlv2/command/backup_command.go",
                "etcdctl/ctlv3/command/migrate_command.go",
                "etcdserver/backend.go",
                "etcdserver/server.go",
                "etcdserver/server_test.go",
                "etcdserver/snapshot_merge.go",
                "etcdserver/storage.go",
                "etcdserver/util_test.go",
                "rafthttp/http.go",
                "rafthttp/http_test.go",
                "rafthttp/peer.go",
                "rafthttp/snapshot_sender.go",
                "rafthttp/snapshot_test.go",
                "rafthttp/transport.go",
                "raftsnap/db.go",
                "raftsnap/doc.go",
                "raftsnap/message.go",
                "raftsnap/metrics.go",
                "raftsnap/snappb/snap.pb.go",
                "raftsnap/snappb/snap.proto",
                "raftsnap/snapshotter.go",
                "raftsnap/snapshotter_test.go",
                "snapshot/v3_snapshot.go",
                "tools/etcd-dump-logs/main.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: send",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "69f7e115060b6454aa56a782b49861884f04e3dc",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519673816,
            "hunks": 191,
            "message": "*: move \"error\" to \"etcdserver/v2error\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdctl/ctlv3/command/migrate_command.go b/etcdctl/ctlv3/command/migrate_command.go",
                "index 4b08df35e..6dd81f58b 100644",
                "--- a/etcdctl/ctlv3/command/migrate_command.go",
                "+++ b/etcdctl/ctlv3/command/migrate_command.go",
                "@@ -27,3 +27,2 @@ import (",
                " \t\"github.com/coreos/etcd/client\"",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -32,2 +31,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "@@ -243,3 +243,3 @@ func writeStore(w io.Writer, st v2store.Store) uint64 {",
                " \tif err != nil {",
                "-\t\tif eerr, ok := err.(*etcdErr.Error); ok && eerr.ErrorCode == etcdErr.EcodeKeyNotFound {",
                "+\t\tif eerr, ok := err.(*v2error.Error); ok && eerr.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\tfmt.Println(\"no v2 keys to migrate\")",
                "diff --git a/etcdserver/api/etcdhttp/base.go b/etcdserver/api/etcdhttp/base.go",
                "index 6360ebd14..93cd230d0 100644",
                "--- a/etcdserver/api/etcdhttp/base.go",
                "+++ b/etcdserver/api/etcdhttp/base.go",
                "@@ -23,3 +23,2 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -27,2 +26,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/api/v2http/httptypes\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/pkg/logutil\"",
                "@@ -140,3 +140,3 @@ func WriteError(w http.ResponseWriter, r *http.Request, err error) {",
                " \tswitch e := err.(type) {",
                "-\tcase *etcdErr.Error:",
                "+\tcase *v2error.Error:",
                " \t\te.WriteTo(w)",
                "diff --git a/etcdserver/api/v2http/client.go b/etcdserver/api/v2http/client.go",
                "index 97b5e071b..c69a9316b 100644",
                "--- a/etcdserver/api/v2http/client.go",
                "+++ b/etcdserver/api/v2http/client.go",
                "@@ -29,3 +29,2 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -38,2 +37,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2auth\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "@@ -324,4 +324,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidForm,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidForm,",
                " \t\t\terr.Error(),",
                "@@ -331,4 +331,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif !strings.HasPrefix(r.URL.Path, keysPrefix) {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidForm,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidForm,",
                " \t\t\t\"incorrect key prefix\",",
                "@@ -340,4 +340,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif pIdx, err = getUint64(r.Form, \"prevIndex\"); err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeIndexNaN,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeIndexNaN,",
                " \t\t\t`invalid value for \"prevIndex\"`,",
                "@@ -346,4 +346,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif wIdx, err = getUint64(r.Form, \"waitIndex\"); err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeIndexNaN,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeIndexNaN,",
                " \t\t\t`invalid value for \"waitIndex\"`,",
                "@@ -354,4 +354,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif rec, err = getBool(r.Form, \"recursive\"); err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t`invalid value for \"recursive\"`,",
                "@@ -360,4 +360,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif sort, err = getBool(r.Form, \"sorted\"); err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t`invalid value for \"sorted\"`,",
                "@@ -366,4 +366,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif wait, err = getBool(r.Form, \"wait\"); err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t`invalid value for \"wait\"`,",
                "@@ -373,4 +373,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif dir, err = getBool(r.Form, \"dir\"); err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t`invalid value for \"dir\"`,",
                "@@ -379,4 +379,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif quorum, err = getBool(r.Form, \"quorum\"); err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t`invalid value for \"quorum\"`,",
                "@@ -385,4 +385,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif stream, err = getBool(r.Form, \"stream\"); err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t`invalid value for \"stream\"`,",
                "@@ -392,4 +392,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif wait && r.Method != \"GET\" {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t`\"wait\" can only be used with GET requests`,",
                "@@ -400,4 +400,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif _, ok := r.Form[\"prevValue\"]; ok && pV == \"\" {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodePrevValueRequired,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodePrevValueRequired,",
                " \t\t\t`\"prevValue\" cannot be empty`,",
                "@@ -407,4 +407,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \tif noValueOnSuccess, err = getBool(r.Form, \"noValueOnSuccess\"); err != nil {",
                "-\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t`invalid value for \"noValueOnSuccess\"`,",
                "@@ -419,4 +419,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \t\tif err != nil {",
                "-\t\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\t\tetcdErr.EcodeTTLNaN,",
                "+\t\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\t\tv2error.EcodeTTLNaN,",
                " \t\t\t\t`invalid value for \"ttl\"`,",
                "@@ -432,4 +432,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \t\tif err != nil {",
                "-\t\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t\t\"invalid value for prevExist\",",
                "@@ -445,4 +445,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \t\tif err != nil {",
                "-\t\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\t\tv2error.EcodeInvalidField,",
                " \t\t\t\t\"invalid value for refresh\",",
                "@@ -454,4 +454,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \t\t\tif _, ok := r.Form[\"value\"]; ok && val != \"\" {",
                "-\t\t\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\t\t\tetcdErr.EcodeRefreshValue,",
                "+\t\t\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\t\t\tv2error.EcodeRefreshValue,",
                " \t\t\t\t\t`A value was provided on a refresh`,",
                "@@ -460,4 +460,4 @@ func parseKeyRequest(r *http.Request, clock clockwork.Clock) (etcdserverpb.Reque",
                " \t\t\tif ttl == nil {",
                "-\t\t\t\treturn emptyReq, false, etcdErr.NewRequestError(",
                "-\t\t\t\t\tetcdErr.EcodeRefreshTTLRequired,",
                "+\t\t\t\treturn emptyReq, false, v2error.NewRequestError(",
                "+\t\t\t\t\tv2error.EcodeRefreshTTLRequired,",
                " \t\t\t\t\t`No TTL value set`,",
                "@@ -529,3 +529,3 @@ func writeKeyEvent(w http.ResponseWriter, resp etcdserver.Response, noValueOnSuc",
                " func writeKeyNoAuth(w http.ResponseWriter) {",
                "-\te := etcdErr.NewError(etcdErr.EcodeUnauthorized, \"Insufficient credentials\", 0)",
                "+\te := v2error.NewError(v2error.EcodeUnauthorized, \"Insufficient credentials\", 0)",
                " \te.WriteTo(w)",
                "@@ -540,3 +540,3 @@ func writeKeyError(w http.ResponseWriter, err error) {",
                " \tswitch e := err.(type) {",
                "-\tcase *etcdErr.Error:",
                "+\tcase *v2error.Error:",
                " \t\te.WriteTo(w)",
                "@@ -549,3 +549,3 @@ func writeKeyError(w http.ResponseWriter, err error) {",
                " \t\t}",
                "-\t\tee := etcdErr.NewError(etcdErr.EcodeRaftInternal, err.Error(), 0)",
                "+\t\tee := v2error.NewError(v2error.EcodeRaftInternal, err.Error(), 0)",
                " \t\tee.WriteTo(w)",
                "@@ -624,3 +624,3 @@ func trimNodeExternPrefix(n *v2store.NodeExtern, prefix string) {",
                " func trimErrorPrefix(err error, prefix string) error {",
                "-\tif e, ok := err.(*etcdErr.Error); ok {",
                "+\tif e, ok := err.(*v2error.Error); ok {",
                " \t\te.Cause = strings.TrimPrefix(e.Cause, prefix)",
                "diff --git a/etcdserver/api/v2http/client_test.go b/etcdserver/api/v2http/client_test.go",
                "index 066e7a81c..691f83f9f 100644",
                "--- a/etcdserver/api/v2http/client_test.go",
                "+++ b/etcdserver/api/v2http/client_test.go",
                "@@ -31,3 +31,2 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -37,2 +36,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "@@ -195,3 +195,3 @@ func TestBadRefreshRequest(t *testing.T) {",
                " \t\t\tmustNewRequest(t, \"foo?refresh=true&value=test\"),",
                "-\t\t\tetcdErr.EcodeRefreshValue,",
                "+\t\t\tv2error.EcodeRefreshValue,",
                " \t\t},",
                "@@ -199,3 +199,3 @@ func TestBadRefreshRequest(t *testing.T) {",
                " \t\t\tmustNewRequest(t, \"foo?refresh=true&value=10\"),",
                "-\t\t\tetcdErr.EcodeRefreshValue,",
                "+\t\t\tv2error.EcodeRefreshValue,",
                " \t\t},",
                "@@ -203,3 +203,3 @@ func TestBadRefreshRequest(t *testing.T) {",
                " \t\t\tmustNewRequest(t, \"foo?refresh=true\"),",
                "-\t\t\tetcdErr.EcodeRefreshTTLRequired,",
                "+\t\t\tv2error.EcodeRefreshTTLRequired,",
                " \t\t},",
                "@@ -207,3 +207,3 @@ func TestBadRefreshRequest(t *testing.T) {",
                " \t\t\tmustNewRequest(t, \"foo?refresh=true&ttl=\"),",
                "-\t\t\tetcdErr.EcodeRefreshTTLRequired,",
                "+\t\t\tv2error.EcodeRefreshTTLRequired,",
                " \t\t},",
                "@@ -216,3 +216,3 @@ func TestBadRefreshRequest(t *testing.T) {",
                " \t\t}",
                "-\t\tee, ok := err.(*etcdErr.Error)",
                "+\t\tee, ok := err.(*v2error.Error)",
                " \t\tif !ok {",
                "@@ -242,3 +242,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\t},",
                "-\t\t\tetcdErr.EcodeInvalidForm,",
                "+\t\t\tv2error.EcodeInvalidForm,",
                " \t\t},",
                "@@ -249,3 +249,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\t},",
                "-\t\t\tetcdErr.EcodeInvalidForm,",
                "+\t\t\tv2error.EcodeInvalidForm,",
                " \t\t},",
                "@@ -254,3 +254,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"prevIndex\": []string{\"garbage\"}}),",
                "-\t\t\tetcdErr.EcodeIndexNaN,",
                "+\t\t\tv2error.EcodeIndexNaN,",
                " \t\t},",
                "@@ -258,3 +258,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"prevIndex\": []string{\"1.5\"}}),",
                "-\t\t\tetcdErr.EcodeIndexNaN,",
                "+\t\t\tv2error.EcodeIndexNaN,",
                " \t\t},",
                "@@ -262,3 +262,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"prevIndex\": []string{\"-1\"}}),",
                "-\t\t\tetcdErr.EcodeIndexNaN,",
                "+\t\t\tv2error.EcodeIndexNaN,",
                " \t\t},",
                "@@ -266,3 +266,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"waitIndex\": []string{\"garbage\"}}),",
                "-\t\t\tetcdErr.EcodeIndexNaN,",
                "+\t\t\tv2error.EcodeIndexNaN,",
                " \t\t},",
                "@@ -270,3 +270,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"waitIndex\": []string{\"??\"}}),",
                "-\t\t\tetcdErr.EcodeIndexNaN,",
                "+\t\t\tv2error.EcodeIndexNaN,",
                " \t\t},",
                "@@ -274,3 +274,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"ttl\": []string{\"-1\"}}),",
                "-\t\t\tetcdErr.EcodeTTLNaN,",
                "+\t\t\tv2error.EcodeTTLNaN,",
                " \t\t},",
                "@@ -279,3 +279,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"recursive\": []string{\"hahaha\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -283,3 +283,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"recursive\": []string{\"1234\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -287,3 +287,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"recursive\": []string{\"?\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -291,3 +291,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"sorted\": []string{\"?\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -295,3 +295,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"sorted\": []string{\"x\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -299,3 +299,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"wait\": []string{\"?!\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -303,3 +303,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"wait\": []string{\"yes\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -307,3 +307,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"prevExist\": []string{\"yes\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -311,3 +311,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"prevExist\": []string{\"#2\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -315,3 +315,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"dir\": []string{\"no\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -319,3 +319,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"dir\": []string{\"file\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -323,3 +323,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"quorum\": []string{\"no\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -327,3 +327,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"quorum\": []string{\"file\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -331,3 +331,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"stream\": []string{\"zzz\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -335,3 +335,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"stream\": []string{\"something\"}}),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -340,3 +340,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewForm(t, \"foo\", url.Values{\"prevValue\": []string{\"\"}}),",
                "-\t\t\tetcdErr.EcodePrevValueRequired,",
                "+\t\t\tv2error.EcodePrevValueRequired,",
                " \t\t},",
                "@@ -345,3 +345,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewMethodRequest(t, \"HEAD\", \"foo?wait=true\"),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -350,3 +350,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewRequest(t, \"foo?prevExist=wrong\"),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -354,3 +354,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\tmustNewRequest(t, \"foo?ttl=wrong\"),",
                "-\t\t\tetcdErr.EcodeTTLNaN,",
                "+\t\t\tv2error.EcodeTTLNaN,",
                " \t\t},",
                "@@ -363,3 +363,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\t),",
                "-\t\t\tetcdErr.EcodeTTLNaN,",
                "+\t\t\tv2error.EcodeTTLNaN,",
                " \t\t},",
                "@@ -371,3 +371,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t\t),",
                "-\t\t\tetcdErr.EcodeInvalidField,",
                "+\t\t\tv2error.EcodeInvalidField,",
                " \t\t},",
                "@@ -380,3 +380,3 @@ func TestBadParseRequest(t *testing.T) {",
                " \t\t}",
                "-\t\tee, ok := err.(*etcdErr.Error)",
                "+\t\tee, ok := err.(*v2error.Error)",
                " \t\tif !ok {",
                "@@ -1472,3 +1472,3 @@ func TestBadServeKeys(t *testing.T) {",
                " \t\t\t&errServer{",
                "-\t\t\t\terr: etcdErr.NewError(etcdErr.EcodeKeyNotFound, \"/1/pant\", 0),",
                "+\t\t\t\terr: v2error.NewError(v2error.EcodeKeyNotFound, \"/1/pant\", 0),",
                " \t\t\t},",
                "diff --git a/etcdserver/api/v2http/http_test.go b/etcdserver/api/v2http/http_test.go",
                "index e9d8dc00d..679254577 100644",
                "--- a/etcdserver/api/v2http/http_test.go",
                "+++ b/etcdserver/api/v2http/http_test.go",
                "@@ -24,3 +24,2 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -28,2 +27,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "@@ -96,3 +96,3 @@ func TestWriteError(t *testing.T) {",
                " \t\t{",
                "-\t\t\tetcdErr.NewError(etcdErr.EcodeKeyNotFound, \"/foo/bar\", 123),",
                "+\t\t\tv2error.NewError(v2error.EcodeKeyNotFound, \"/foo/bar\", 123),",
                " \t\t\thttp.StatusNotFound,",
                "@@ -101,3 +101,3 @@ func TestWriteError(t *testing.T) {",
                " \t\t{",
                "-\t\t\tetcdErr.NewError(etcdErr.EcodeTestFailed, \"/foo/bar\", 456),",
                "+\t\t\tv2error.NewError(v2error.EcodeTestFailed, \"/foo/bar\", 456),",
                " \t\t\thttp.StatusPreconditionFailed,",
                "diff --git a/etcdserver/api/v2http/metrics.go b/etcdserver/api/v2http/metrics.go",
                "index fdfb0c607..9f93d8702 100644",
                "--- a/etcdserver/api/v2http/metrics.go",
                "+++ b/etcdserver/api/v2http/metrics.go",
                "@@ -22,3 +22,2 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -26,2 +25,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/prometheus/client_golang/prometheus\"",
                "@@ -88,4 +88,4 @@ func codeFromError(err error) int {",
                " \tswitch e := err.(type) {",
                "-\tcase *etcdErr.Error:",
                "-\t\treturn (*etcdErr.Error)(e).StatusCode()",
                "+\tcase *v2error.Error:",
                "+\t\treturn (*v2error.Error)(e).StatusCode()",
                " \tcase *httptypes.HTTPError:",
                "diff --git a/etcdserver/api/v2v3/store.go b/etcdserver/api/v2v3/store.go",
                "index 900dc1f69..c2b71370e 100644",
                "--- a/etcdserver/api/v2v3/store.go",
                "+++ b/etcdserver/api/v2v3/store.go",
                "@@ -25,3 +25,3 @@ import (",
                " \t\"github.com/coreos/etcd/clientv3/concurrency\"",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "@@ -83,3 +83,3 @@ func (s *v2v3Store) Get(nodePath string, recursive, sorted bool) (*v2store.Event",
                " \tif len(kvs) == 0 {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeKeyNotFound, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeKeyNotFound, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -140,3 +140,3 @@ func (s *v2v3Store) Set(",
                " \tif isRoot(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, nodePath, 0)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, nodePath, 0)",
                " \t}",
                "@@ -147,3 +147,3 @@ func (s *v2v3Store) Set(",
                " \t\tif !isRoot(parent) && stm.Rev(s.mkPath(parent)+\"/\") == 0 {",
                "-\t\t\tecode = etcdErr.EcodeKeyNotFound",
                "+\t\t\tecode = v2error.EcodeKeyNotFound",
                " \t\t\treturn nil",
                "@@ -155,3 +155,3 @@ func (s *v2v3Store) Set(",
                " \t\t\t\t// exists as non-dir",
                "-\t\t\t\tecode = etcdErr.EcodeNotDir",
                "+\t\t\t\tecode = v2error.EcodeNotDir",
                " \t\t\t\treturn nil",
                "@@ -160,3 +160,3 @@ func (s *v2v3Store) Set(",
                " \t\t} else if stm.Rev(key+\"/\") != 0 {",
                "-\t\t\tecode = etcdErr.EcodeNotFile",
                "+\t\t\tecode = v2error.EcodeNotFile",
                " \t\t\treturn nil",
                "@@ -173,3 +173,3 @@ func (s *v2v3Store) Set(",
                " \tif ecode != 0 {",
                "-\t\treturn nil, etcdErr.NewError(ecode, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn nil, v2error.NewError(ecode, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -203,3 +203,3 @@ func (s *v2v3Store) Update(nodePath, newValue string, expireOpts v2store.TTLOpti",
                " \tif isRoot(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, nodePath, 0)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, nodePath, 0)",
                " \t}",
                "@@ -214,3 +214,3 @@ func (s *v2v3Store) Update(nodePath, newValue string, expireOpts v2store.TTLOpti",
                " \t\tif rev := stm.Rev(key + \"/\"); rev != 0 {",
                "-\t\t\tecode = etcdErr.EcodeNotFile",
                "+\t\t\tecode = v2error.EcodeNotFile",
                " \t\t\treturn nil",
                "@@ -218,3 +218,3 @@ func (s *v2v3Store) Update(nodePath, newValue string, expireOpts v2store.TTLOpti",
                " \t\tif rev := stm.Rev(key); rev == 0 {",
                "-\t\t\tecode = etcdErr.EcodeKeyNotFound",
                "+\t\t\tecode = v2error.EcodeKeyNotFound",
                " \t\t\treturn nil",
                "@@ -231,3 +231,3 @@ func (s *v2v3Store) Update(nodePath, newValue string, expireOpts v2store.TTLOpti",
                " \tif ecode != 0 {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeNotFile, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -256,3 +256,3 @@ func (s *v2v3Store) Create(",
                " \tif isRoot(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, nodePath, 0)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, nodePath, 0)",
                " \t}",
                "@@ -277,3 +277,3 @@ func (s *v2v3Store) Create(",
                " \t\tif stm.Rev(key) > 0 || stm.Rev(key+\"/\") > 0 {",
                "-\t\t\tecode = etcdErr.EcodeNodeExist",
                "+\t\t\tecode = v2error.EcodeNodeExist",
                " \t\t\treturn nil",
                "@@ -285,3 +285,3 @@ func (s *v2v3Store) Create(",
                " \t\t\tif stm.Rev(pp) > 0 {",
                "-\t\t\t\tecode = etcdErr.EcodeNotDir",
                "+\t\t\t\tecode = v2error.EcodeNotDir",
                " \t\t\t\treturn nil",
                "@@ -310,3 +310,3 @@ func (s *v2v3Store) Create(",
                " \tif ecode != 0 {",
                "-\t\treturn nil, etcdErr.NewError(ecode, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn nil, v2error.NewError(ecode, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -339,3 +339,3 @@ func (s *v2v3Store) CompareAndSwap(",
                " \tif isRoot(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, nodePath, 0)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, nodePath, 0)",
                " \t}",
                "@@ -379,3 +379,3 @@ func (s *v2v3Store) Delete(nodePath string, dir, recursive bool) (*v2store.Event",
                " \tif isRoot(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, nodePath, 0)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, nodePath, 0)",
                " \t}",
                "@@ -405,3 +405,3 @@ func (s *v2v3Store) Delete(nodePath string, dir, recursive bool) (*v2store.Event",
                " \tif !resp.Succeeded {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNodeExist, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeNodeExist, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -426,3 +426,3 @@ func (s *v2v3Store) deleteEmptyDir(nodePath string) (*v2store.Event, error) {",
                " \tif !resp.Succeeded {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeDirNotEmpty, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeDirNotEmpty, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -430,3 +430,3 @@ func (s *v2v3Store) deleteEmptyDir(nodePath string) (*v2store.Event, error) {",
                " \tif len(dresp.PrevKvs) == 0 {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNodeExist, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeNodeExist, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -450,3 +450,3 @@ func (s *v2v3Store) deleteNode(nodePath string) (*v2store.Event, error) {",
                " \tif !resp.Succeeded {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeNotFile, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -454,3 +454,3 @@ func (s *v2v3Store) deleteNode(nodePath string) (*v2store.Event, error) {",
                " \tif len(pkvs) == 0 {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeKeyNotFound, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeKeyNotFound, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -471,3 +471,3 @@ func (s *v2v3Store) CompareAndDelete(nodePath, prevValue string, prevIndex uint6",
                " \tif isRoot(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, nodePath, 0)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, nodePath, 0)",
                " \t}",
                "@@ -508,3 +508,3 @@ func compareFail(nodePath, prevValue string, prevIndex uint64, resp *clientv3.Tx",
                " \tif dkvs := resp.Responses[1].GetResponseRange().Kvs; len(dkvs) > 0 {",
                "-\t\treturn etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn v2error.NewError(v2error.EcodeNotFile, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -512,3 +512,3 @@ func compareFail(nodePath, prevValue string, prevIndex uint64, resp *clientv3.Tx",
                " \tif len(kvs) == 0 {",
                "-\t\treturn etcdErr.NewError(etcdErr.EcodeKeyNotFound, nodePath, mkV2Rev(resp.Header.Revision))",
                "+\t\treturn v2error.NewError(v2error.EcodeKeyNotFound, nodePath, mkV2Rev(resp.Header.Revision))",
                " \t}",
                "@@ -526,3 +526,3 @@ func compareFail(nodePath, prevValue string, prevIndex uint64, resp *clientv3.Tx",
                " \t}",
                "-\treturn etcdErr.NewError(etcdErr.EcodeTestFailed, cause, mkV2Rev(resp.Header.Revision))",
                "+\treturn v2error.NewError(v2error.EcodeTestFailed, cause, mkV2Rev(resp.Header.Revision))",
                " }",
                "diff --git a/etcdserver/api/v2v3/watcher.go b/etcdserver/api/v2v3/watcher.go",
                "index 698489dd3..39b848683 100644",
                "--- a/etcdserver/api/v2v3/watcher.go",
                "+++ b/etcdserver/api/v2v3/watcher.go",
                "@@ -21,3 +21,3 @@ import (",
                " \t\"github.com/coreos/etcd/clientv3\"",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "@@ -38,3 +38,3 @@ func (s *v2v3Store) Watch(prefix string, recursive, stream bool, sinceIndex uint",
                " \t\tcancel()",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRaftInternal, prefix, 0)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRaftInternal, prefix, 0)",
                " \t}",
                "diff --git a/etcdserver/membership/errors.go b/etcdserver/membership/errors.go",
                "index e4d36af25..c0a4acc56 100644",
                "--- a/etcdserver/membership/errors.go",
                "+++ b/etcdserver/membership/errors.go",
                "@@ -19,3 +19,3 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " )",
                "@@ -30,4 +30,4 @@ var (",
                " func isKeyNotFound(err error) bool {",
                "-\te, ok := err.(*etcdErr.Error)",
                "-\treturn ok && e.ErrorCode == etcdErr.EcodeKeyNotFound",
                "+\te, ok := err.(*v2error.Error)",
                "+\treturn ok && e.ErrorCode == v2error.EcodeKeyNotFound",
                " }",
                "diff --git a/etcdserver/v2auth/auth.go b/etcdserver/v2auth/auth.go",
                "index c3f543503..ba34336db 100644",
                "--- a/etcdserver/v2auth/auth.go",
                "+++ b/etcdserver/v2auth/auth.go",
                "@@ -28,5 +28,5 @@ import (",
                "-\tetcderr \"github.com/coreos/etcd/error\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                " \t\"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "@@ -172,4 +172,4 @@ func (s *store) AllUsers() ([]string, error) {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeKeyNotFound {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\t\treturn []string{}, nil",
                "@@ -227,4 +227,4 @@ func (s *store) createUserInternal(user User) (User, error) {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeNodeExist {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeNodeExist {",
                " \t\t\t\treturn user, authErr(http.StatusConflict, \"User %s already exists.\", user.User)",
                "@@ -242,4 +242,4 @@ func (s *store) DeleteUser(name string) error {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeKeyNotFound {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\t\treturn authErr(http.StatusNotFound, \"User %s does not exist\", name)",
                "@@ -256,4 +256,4 @@ func (s *store) UpdateUser(user User) (User, error) {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeKeyNotFound {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\t\treturn user, authErr(http.StatusNotFound, \"User %s doesn't exist.\", user.User)",
                "@@ -282,4 +282,4 @@ func (s *store) AllRoles() ([]string, error) {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeKeyNotFound {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\t\treturn nodes, nil",
                "@@ -305,4 +305,4 @@ func (s *store) CreateRole(role Role) error {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeNodeExist {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeNodeExist {",
                " \t\t\t\treturn authErr(http.StatusConflict, \"Role %s already exists.\", role.Role)",
                "@@ -323,4 +323,4 @@ func (s *store) DeleteRole(name string) error {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeKeyNotFound {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\t\treturn authErr(http.StatusNotFound, \"Role %s doesn't exist.\", name)",
                "@@ -341,4 +341,4 @@ func (s *store) UpdateRole(role Role) (Role, error) {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeKeyNotFound {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\t\treturn role, authErr(http.StatusNotFound, \"Role %s doesn't exist.\", role.Role)",
                "@@ -612,4 +612,4 @@ func (s *store) getUser(name string, quorum bool) (User, error) {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeKeyNotFound {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\t\treturn User{}, authErr(http.StatusNotFound, \"User %s does not exist.\", name)",
                "@@ -637,4 +637,4 @@ func (s *store) getRole(name string, quorum bool) (Role, error) {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeKeyNotFound {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\t\treturn Role{}, authErr(http.StatusNotFound, \"Role %s does not exist.\", name)",
                "diff --git a/etcdserver/v2auth/auth_requests.go b/etcdserver/v2auth/auth_requests.go",
                "index fbe301509..50ef47324 100644",
                "--- a/etcdserver/v2auth/auth_requests.go",
                "+++ b/etcdserver/v2auth/auth_requests.go",
                "@@ -21,5 +21,5 @@ import (",
                "-\tetcderr \"github.com/coreos/etcd/error\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                " \t\"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " )",
                "@@ -42,4 +42,4 @@ func (s *store) ensureAuthDirectories() error {",
                " \t\tif err != nil {",
                "-\t\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\t\tif e.ErrorCode == etcderr.EcodeNodeExist {",
                "+\t\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\t\tif e.ErrorCode == v2error.EcodeNodeExist {",
                " \t\t\t\t\tcontinue",
                "@@ -62,4 +62,4 @@ func (s *store) ensureAuthDirectories() error {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeNodeExist {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeNodeExist {",
                " \t\t\t\ts.ensuredOnce = true",
                "@@ -89,4 +89,4 @@ func (s *store) detectAuth() bool {",
                " \tif err != nil {",
                "-\t\tif e, ok := err.(*etcderr.Error); ok {",
                "-\t\t\tif e.ErrorCode == etcderr.EcodeKeyNotFound {",
                "+\t\tif e, ok := err.(*v2error.Error); ok {",
                "+\t\t\tif e.ErrorCode == v2error.EcodeKeyNotFound {",
                " \t\t\t\treturn false",
                "diff --git a/etcdserver/v2auth/auth_test.go b/etcdserver/v2auth/auth_test.go",
                "index 5092e5ece..00e674cba 100644",
                "--- a/etcdserver/v2auth/auth_test.go",
                "+++ b/etcdserver/v2auth/auth_test.go",
                "@@ -22,5 +22,5 @@ import (",
                "-\tetcderr \"github.com/coreos/etcd/error\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                " \t\"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "@@ -179,4 +179,4 @@ func (td *testDoer) Do(_ context.Context, req etcdserverpb.Request) (etcdserver.",
                " \t\t\ttd.getindex++",
                "-\t\t\treturn etcdserver.Response{}, &etcderr.Error{",
                "-\t\t\t\tErrorCode: etcderr.EcodeKeyNotFound,",
                "+\t\t\treturn etcdserver.Response{}, &v2error.Error{",
                "+\t\t\t\tErrorCode: v2error.EcodeKeyNotFound,",
                " \t\t\t}",
                "@@ -190,4 +190,4 @@ func (td *testDoer) Do(_ context.Context, req etcdserverpb.Request) (etcdserver.",
                " \t\t\ttd.putindex++",
                "-\t\t\treturn etcdserver.Response{}, &etcderr.Error{",
                "-\t\t\t\tErrorCode: etcderr.EcodeNodeExist,",
                "+\t\t\treturn etcdserver.Response{}, &v2error.Error{",
                "+\t\t\t\tErrorCode: v2error.EcodeNodeExist,",
                " \t\t\t}",
                "diff --git a/etcdserver/v2error/error.go b/etcdserver/v2error/error.go",
                "new file mode 100644",
                "index 000000000..1244290c4",
                "--- /dev/null",
                "+++ b/etcdserver/v2error/error.go",
                "@@ -0,0 +1,164 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package v2error describes errors in etcd project. When any change happens,",
                "+// Documentation/v2/errorcode.md needs to be updated correspondingly.",
                "+// To be deprecated in favor of v3 APIs.",
                "+package v2error",
                "+",
                "+import (",
                "+\t\"encoding/json\"",
                "+\t\"fmt\"",
                "+\t\"net/http\"",
                "+)",
                "+",
                "+var errors = map[int]string{",
                "+\t// command related errors",
                "+\tEcodeKeyNotFound:      \"Key not found\",",
                "+\tEcodeTestFailed:       \"Compare failed\", //test and set",
                "+\tEcodeNotFile:          \"Not a file\",",
                "+\tecodeNoMorePeer:       \"Reached the max number of peers in the cluster\",",
                "+\tEcodeNotDir:           \"Not a directory\",",
                "+\tEcodeNodeExist:        \"Key already exists\", // create",
                "+\tecodeKeyIsPreserved:   \"The prefix of given key is a keyword in etcd\",",
                "+\tEcodeRootROnly:        \"Root is read only\",",
                "+\tEcodeDirNotEmpty:      \"Directory not empty\",",
                "+\tecodeExistingPeerAddr: \"Peer address has existed\",",
                "+\tEcodeUnauthorized:     \"The request requires user authentication\",",
                "+",
                "+\t// Post form related errors",
                "+\tecodeValueRequired:        \"Value is Required in POST form\",",
                "+\tEcodePrevValueRequired:    \"PrevValue is Required in POST form\",",
                "+\tEcodeTTLNaN:               \"The given TTL in POST form is not a number\",",
                "+\tEcodeIndexNaN:             \"The given index in POST form is not a number\",",
                "+\tecodeValueOrTTLRequired:   \"Value or TTL is required in POST form\",",
                "+\tecodeTimeoutNaN:           \"The given timeout in POST form is not a number\",",
                "+\tecodeNameRequired:         \"Name is required in POST form\",",
                "+\tecodeIndexOrValueRequired: \"Index or value is required\",",
                "+\tecodeIndexValueMutex:      \"Index and value cannot both be specified\",",
                "+\tEcodeInvalidField:         \"Invalid field\",",
                "+\tEcodeInvalidForm:          \"Invalid POST form\",",
                "+\tEcodeRefreshValue:         \"Value provided on refresh\",",
                "+\tEcodeRefreshTTLRequired:   \"A TTL must be provided on refresh\",",
                "+",
                "+\t// raft related errors",
                "+\tEcodeRaftInternal: \"Raft Internal Error\",",
                "+\tEcodeLeaderElect:  \"During Leader Election\",",
                "+",
                "+\t// etcd related errors",
                "+\tEcodeWatcherCleared:     \"watcher is cleared due to etcd recovery\",",
                "+\tEcodeEventIndexCleared:  \"The event in requested index is outdated and cleared\",",
                "+\tecodeStandbyInternal:    \"Standby Internal Error\",",
                "+\tecodeInvalidActiveSize:  \"Invalid active size\",",
                "+\tecodeInvalidRemoveDelay: \"Standby remove delay\",",
                "+",
                "+\t// client related errors",
                "+\tecodeClientInternal: \"Client Internal Error\",",
                "+}",
                "+",
                "+var errorStatus = map[int]int{",
                "+\tEcodeKeyNotFound:  http.StatusNotFound,",
                "+\tEcodeNotFile:      http.StatusForbidden,",
                "+\tEcodeDirNotEmpty:  http.StatusForbidden,",
                "+\tEcodeUnauthorized: http.StatusUnauthorized,",
                "+\tEcodeTestFailed:   http.StatusPreconditionFailed,",
                "+\tEcodeNodeExist:    http.StatusPreconditionFailed,",
                "+\tEcodeRaftInternal: http.StatusInternalServerError,",
                "+\tEcodeLeaderElect:  http.StatusInternalServerError,",
                "+}",
                "+",
                "+const (",
                "+\tEcodeKeyNotFound      = 100",
                "+\tEcodeTestFailed       = 101",
                "+\tEcodeNotFile          = 102",
                "+\tecodeNoMorePeer       = 103",
                "+\tEcodeNotDir           = 104",
                "+\tEcodeNodeExist        = 105",
                "+\tecodeKeyIsPreserved   = 106",
                "+\tEcodeRootROnly        = 107",
                "+\tEcodeDirNotEmpty      = 108",
                "+\tecodeExistingPeerAddr = 109",
                "+\tEcodeUnauthorized     = 110",
                "+",
                "+\tecodeValueRequired        = 200",
                "+\tEcodePrevValueRequired    = 201",
                "+\tEcodeTTLNaN               = 202",
                "+\tEcodeIndexNaN             = 203",
                "+\tecodeValueOrTTLRequired   = 204",
                "+\tecodeTimeoutNaN           = 205",
                "+\tecodeNameRequired         = 206",
                "+\tecodeIndexOrValueRequired = 207",
                "+\tecodeIndexValueMutex      = 208",
                "+\tEcodeInvalidField         = 209",
                "+\tEcodeInvalidForm          = 210",
                "+\tEcodeRefreshValue         = 211",
                "+\tEcodeRefreshTTLRequired   = 212",
                "+",
                "+\tEcodeRaftInternal = 300",
                "+\tEcodeLeaderElect  = 301",
                "+",
                "+\tEcodeWatcherCleared     = 400",
                "+\tEcodeEventIndexCleared  = 401",
                "+\tecodeStandbyInternal    = 402",
                "+\tecodeInvalidActiveSize  = 403",
                "+\tecodeInvalidRemoveDelay = 404",
                "+",
                "+\tecodeClientInternal = 500",
                "+)",
                "+",
                "+type Error struct {",
                "+\tErrorCode int    `json:\"errorCode\"`",
                "+\tMessage   string `json:\"message\"`",
                "+\tCause     string `json:\"cause,omitempty\"`",
                "+\tIndex     uint64 `json:\"index\"`",
                "+}",
                "+",
                "+func NewRequestError(errorCode int, cause string) *Error {",
                "+\treturn NewError(errorCode, cause, 0)",
                "+}",
                "+",
                "+func NewError(errorCode int, cause string, index uint64) *Error {",
                "+\treturn &Error{",
                "+\t\tErrorCode: errorCode,",
                "+\t\tMessage:   errors[errorCode],",
                "+\t\tCause:     cause,",
                "+\t\tIndex:     index,",
                "+\t}",
                "+}",
                "+",
                "+// Error is for the error interface",
                "+func (e Error) Error() string {",
                "+\treturn e.Message + \" (\" + e.Cause + \")\"",
                "+}",
                "+",
                "+func (e Error) toJsonString() string {",
                "+\tb, _ := json.Marshal(e)",
                "+\treturn string(b)",
                "+}",
                "+",
                "+func (e Error) StatusCode() int {",
                "+\tstatus, ok := errorStatus[e.ErrorCode]",
                "+\tif !ok {",
                "+\t\tstatus = http.StatusBadRequest",
                "+\t}",
                "+\treturn status",
                "+}",
                "+",
                "+func (e Error) WriteTo(w http.ResponseWriter) error {",
                "+\tw.Header().Add(\"X-Etcd-Index\", fmt.Sprint(e.Index))",
                "+\tw.Header().Set(\"Content-Type\", \"application/json\")",
                "+\tw.WriteHeader(e.StatusCode())",
                "+\t_, err := w.Write([]byte(e.toJsonString() + \"\\n\"))",
                "+\treturn err",
                "+}",
                "diff --git a/etcdserver/v2error/error_test.go b/etcdserver/v2error/error_test.go",
                "new file mode 100644",
                "index 000000000..39b3cc0f6",
                "--- /dev/null",
                "+++ b/etcdserver/v2error/error_test.go",
                "@@ -0,0 +1,50 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package v2error",
                "+",
                "+import (",
                "+\t\"net/http\"",
                "+\t\"net/http/httptest\"",
                "+\t\"reflect\"",
                "+\t\"strings\"",
                "+\t\"testing\"",
                "+)",
                "+",
                "+func TestErrorWriteTo(t *testing.T) {",
                "+\tfor k := range errors {",
                "+\t\terr := NewError(k, \"\", 1)",
                "+\t\trr := httptest.NewRecorder()",
                "+\t\terr.WriteTo(rr)",
                "+",
                "+\t\tif err.StatusCode() != rr.Code {",
                "+\t\t\tt.Errorf(\"HTTP status code %d, want %d\", rr.Code, err.StatusCode())",
                "+\t\t}",
                "+",
                "+\t\tgbody := strings.TrimSuffix(rr.Body.String(), \"\\n\")",
                "+\t\tif err.toJsonString() != gbody {",
                "+\t\t\tt.Errorf(\"HTTP body %q, want %q\", gbody, err.toJsonString())",
                "+\t\t}",
                "+",
                "+\t\twheader := http.Header(map[string][]string{",
                "+\t\t\t\"Content-Type\": {\"application/json\"},",
                "+\t\t\t\"X-Etcd-Index\": {\"1\"},",
                "+\t\t})",
                "+",
                "+\t\tif !reflect.DeepEqual(wheader, rr.HeaderMap) {",
                "+\t\t\tt.Errorf(\"HTTP headers %v, want %v\", rr.HeaderMap, wheader)",
                "+\t\t}",
                "+\t}",
                "+",
                "+}",
                "diff --git a/etcdserver/v2store/event_history.go b/etcdserver/v2store/event_history.go",
                "index c7f3c730b..a3c600683 100644",
                "--- a/etcdserver/v2store/event_history.go",
                "+++ b/etcdserver/v2store/event_history.go",
                "@@ -22,3 +22,3 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " )",
                "@@ -57,3 +57,3 @@ func (eh *EventHistory) addEvent(e *Event) *Event {",
                " // where the key matches.",
                "-func (eh *EventHistory) scan(key string, recursive bool, index uint64) (*Event, *etcdErr.Error) {",
                "+func (eh *EventHistory) scan(key string, recursive bool, index uint64) (*Event, *v2error.Error) {",
                " \teh.rwl.RLock()",
                "@@ -64,3 +64,3 @@ func (eh *EventHistory) scan(key string, recursive bool, index uint64) (*Event,",
                " \t\treturn nil,",
                "-\t\t\tetcdErr.NewError(etcdErr.EcodeEventIndexCleared,",
                "+\t\t\tv2error.NewError(v2error.EcodeEventIndexCleared,",
                " \t\t\t\tfmt.Sprintf(\"the requested history has been cleared [%v/%v]\",",
                "diff --git a/etcdserver/v2store/event_test.go b/etcdserver/v2store/event_test.go",
                "index ee0103c56..0b3592394 100644",
                "--- a/etcdserver/v2store/event_test.go",
                "+++ b/etcdserver/v2store/event_test.go",
                "@@ -19,3 +19,3 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " )",
                "@@ -107,4 +107,4 @@ func TestEventIndexHistoryCleared(t *testing.T) {",
                " \t_, err := eh.scan(\"/foo\", false, 1)",
                "-\tif err == nil || err.ErrorCode != etcdErr.EcodeEventIndexCleared {",
                "-\t\tt.Fatalf(\"scan error cleared index should return err with %d got (%v)\", etcdErr.EcodeEventIndexCleared, err)",
                "+\tif err == nil || err.ErrorCode != v2error.EcodeEventIndexCleared {",
                "+\t\tt.Fatalf(\"scan error cleared index should return err with %d got (%v)\", v2error.EcodeEventIndexCleared, err)",
                " \t}",
                "diff --git a/etcdserver/v2store/node.go b/etcdserver/v2store/node.go",
                "index 1bd8a6ea4..c6aadbfa2 100644",
                "--- a/etcdserver/v2store/node.go",
                "+++ b/etcdserver/v2store/node.go",
                "@@ -21,3 +21,3 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                "@@ -109,5 +109,5 @@ func (n *node) IsDir() bool {",
                " // If the receiver node is not a key-value pair, a \"Not A File\" error will be returned.",
                "-func (n *node) Read() (string, *etcdErr.Error) {",
                "+func (n *node) Read() (string, *v2error.Error) {",
                " \tif n.IsDir() {",
                "-\t\treturn \"\", etcdErr.NewError(etcdErr.EcodeNotFile, \"\", n.store.CurrentIndex)",
                "+\t\treturn \"\", v2error.NewError(v2error.EcodeNotFile, \"\", n.store.CurrentIndex)",
                " \t}",
                "@@ -119,5 +119,5 @@ func (n *node) Read() (string, *etcdErr.Error) {",
                " // If the receiver node is a directory, a \"Not A File\" error will be returned.",
                "-func (n *node) Write(value string, index uint64) *etcdErr.Error {",
                "+func (n *node) Write(value string, index uint64) *v2error.Error {",
                " \tif n.IsDir() {",
                "-\t\treturn etcdErr.NewError(etcdErr.EcodeNotFile, \"\", n.store.CurrentIndex)",
                "+\t\treturn v2error.NewError(v2error.EcodeNotFile, \"\", n.store.CurrentIndex)",
                " \t}",
                "@@ -152,5 +152,5 @@ func (n *node) expirationAndTTL(clock clockwork.Clock) (*time.Time, int64) {",
                " // If the receiver node is not a directory, a \"Not A Directory\" error will be returned.",
                "-func (n *node) List() ([]*node, *etcdErr.Error) {",
                "+func (n *node) List() ([]*node, *v2error.Error) {",
                " \tif !n.IsDir() {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotDir, \"\", n.store.CurrentIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeNotDir, \"\", n.store.CurrentIndex)",
                " \t}",
                "@@ -170,5 +170,5 @@ func (n *node) List() ([]*node, *etcdErr.Error) {",
                " // On success, it returns the file node",
                "-func (n *node) GetChild(name string) (*node, *etcdErr.Error) {",
                "+func (n *node) GetChild(name string) (*node, *v2error.Error) {",
                " \tif !n.IsDir() {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotDir, n.Path, n.store.CurrentIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeNotDir, n.Path, n.store.CurrentIndex)",
                " \t}",
                "@@ -188,5 +188,5 @@ func (n *node) GetChild(name string) (*node, *etcdErr.Error) {",
                " // error will be returned",
                "-func (n *node) Add(child *node) *etcdErr.Error {",
                "+func (n *node) Add(child *node) *v2error.Error {",
                " \tif !n.IsDir() {",
                "-\t\treturn etcdErr.NewError(etcdErr.EcodeNotDir, \"\", n.store.CurrentIndex)",
                "+\t\treturn v2error.NewError(v2error.EcodeNotDir, \"\", n.store.CurrentIndex)",
                " \t}",
                "@@ -196,3 +196,3 @@ func (n *node) Add(child *node) *etcdErr.Error {",
                " \tif _, ok := n.Children[name]; ok {",
                "-\t\treturn etcdErr.NewError(etcdErr.EcodeNodeExist, \"\", n.store.CurrentIndex)",
                "+\t\treturn v2error.NewError(v2error.EcodeNodeExist, \"\", n.store.CurrentIndex)",
                " \t}",
                "@@ -205,3 +205,3 @@ func (n *node) Add(child *node) *etcdErr.Error {",
                " // Remove function remove the node.",
                "-func (n *node) Remove(dir, recursive bool, callback func(path string)) *etcdErr.Error {",
                "+func (n *node) Remove(dir, recursive bool, callback func(path string)) *v2error.Error {",
                " \tif !n.IsDir() { // key-value pair",
                "@@ -227,3 +227,3 @@ func (n *node) Remove(dir, recursive bool, callback func(path string)) *etcdErr.",
                " \t\t// cannot delete a directory without dir set to true",
                "-\t\treturn etcdErr.NewError(etcdErr.EcodeNotFile, n.Path, n.store.CurrentIndex)",
                "+\t\treturn v2error.NewError(v2error.EcodeNotFile, n.Path, n.store.CurrentIndex)",
                " \t}",
                "@@ -233,3 +233,3 @@ func (n *node) Remove(dir, recursive bool, callback func(path string)) *etcdErr.",
                " \t\t// is not recursive",
                "-\t\treturn etcdErr.NewError(etcdErr.EcodeDirNotEmpty, n.Path, n.store.CurrentIndex)",
                "+\t\treturn v2error.NewError(v2error.EcodeDirNotEmpty, n.Path, n.store.CurrentIndex)",
                " \t}",
                "diff --git a/etcdserver/v2store/store.go b/etcdserver/v2store/store.go",
                "index 524b0da01..ff03d9a7b 100644",
                "--- a/etcdserver/v2store/store.go",
                "+++ b/etcdserver/v2store/store.go",
                "@@ -25,3 +25,3 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "@@ -122,3 +122,3 @@ func (s *store) Index() uint64 {",
                " func (s *store) Get(nodePath string, recursive, sorted bool) (*Event, error) {",
                "-\tvar err *etcdErr.Error",
                "+\tvar err *v2error.Error",
                "@@ -162,3 +162,3 @@ func (s *store) Get(nodePath string, recursive, sorted bool) (*Event, error) {",
                " func (s *store) Create(nodePath string, dir bool, value string, unique bool, expireOpts TTLOptionSet) (*Event, error) {",
                "-\tvar err *etcdErr.Error",
                "+\tvar err *v2error.Error",
                "@@ -191,3 +191,3 @@ func (s *store) Create(nodePath string, dir bool, value string, unique bool, exp",
                " func (s *store) Set(nodePath string, dir bool, value string, expireOpts TTLOptionSet) (*Event, error) {",
                "-\tvar err *etcdErr.Error",
                "+\tvar err *v2error.Error",
                "@@ -209,3 +209,3 @@ func (s *store) Set(nodePath string, dir bool, value string, expireOpts TTLOptio",
                " \tn, getErr := s.internalGet(nodePath)",
                "-\tif getErr != nil && getErr.ErrorCode != etcdErr.EcodeKeyNotFound {",
                "+\tif getErr != nil && getErr.ErrorCode != v2error.EcodeKeyNotFound {",
                " \t\terr = getErr",
                "@@ -262,3 +262,3 @@ func (s *store) CompareAndSwap(nodePath string, prevValue string, prevIndex uint",
                "-\tvar err *etcdErr.Error",
                "+\tvar err *v2error.Error",
                "@@ -281,3 +281,3 @@ func (s *store) CompareAndSwap(nodePath string, prevValue string, prevIndex uint",
                " \tif s.readonlySet.Contains(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, \"/\", s.CurrentIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, \"/\", s.CurrentIndex)",
                " \t}",
                "@@ -289,3 +289,3 @@ func (s *store) CompareAndSwap(nodePath string, prevValue string, prevIndex uint",
                " \tif n.IsDir() { // can only compare and swap file",
                "-\t\terr = etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, s.CurrentIndex)",
                "+\t\terr = v2error.NewError(v2error.EcodeNotFile, nodePath, s.CurrentIndex)",
                " \t\treturn nil, err",
                "@@ -297,3 +297,3 @@ func (s *store) CompareAndSwap(nodePath string, prevValue string, prevIndex uint",
                " \t\tcause := getCompareFailCause(n, which, prevValue, prevIndex)",
                "-\t\terr = etcdErr.NewError(etcdErr.EcodeTestFailed, cause, s.CurrentIndex)",
                "+\t\terr = v2error.NewError(v2error.EcodeTestFailed, cause, s.CurrentIndex)",
                " \t\treturn nil, err",
                "@@ -335,3 +335,3 @@ func (s *store) CompareAndSwap(nodePath string, prevValue string, prevIndex uint",
                " func (s *store) Delete(nodePath string, dir, recursive bool) (*Event, error) {",
                "-\tvar err *etcdErr.Error",
                "+\tvar err *v2error.Error",
                "@@ -354,3 +354,3 @@ func (s *store) Delete(nodePath string, dir, recursive bool) (*Event, error) {",
                " \tif s.readonlySet.Contains(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, \"/\", s.CurrentIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, \"/\", s.CurrentIndex)",
                " \t}",
                "@@ -396,3 +396,3 @@ func (s *store) Delete(nodePath string, dir, recursive bool) (*Event, error) {",
                " func (s *store) CompareAndDelete(nodePath string, prevValue string, prevIndex uint64) (*Event, error) {",
                "-\tvar err *etcdErr.Error",
                "+\tvar err *v2error.Error",
                "@@ -419,3 +419,3 @@ func (s *store) CompareAndDelete(nodePath string, prevValue string, prevIndex ui",
                " \tif n.IsDir() { // can only compare and delete file",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, s.CurrentIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeNotFile, nodePath, s.CurrentIndex)",
                " \t}",
                "@@ -426,3 +426,3 @@ func (s *store) CompareAndDelete(nodePath string, prevValue string, prevIndex ui",
                " \t\tcause := getCompareFailCause(n, which, prevValue, prevIndex)",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeTestFailed, cause, s.CurrentIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeTestFailed, cause, s.CurrentIndex)",
                " \t}",
                "@@ -469,3 +469,3 @@ func (s *store) Watch(key string, recursive, stream bool, sinceIndex uint64) (Wa",
                " // walk walks all the nodePath and apply the walkFunc on each directory",
                "-func (s *store) walk(nodePath string, walkFunc func(prev *node, component string) (*node, *etcdErr.Error)) (*node, *etcdErr.Error) {",
                "+func (s *store) walk(nodePath string, walkFunc func(prev *node, component string) (*node, *v2error.Error)) (*node, *v2error.Error) {",
                " \tcomponents := strings.Split(nodePath, \"/\")",
                "@@ -473,3 +473,3 @@ func (s *store) walk(nodePath string, walkFunc func(prev *node, component string",
                " \tcurr := s.Root",
                "-\tvar err *etcdErr.Error",
                "+\tvar err *v2error.Error",
                "@@ -493,3 +493,3 @@ func (s *store) walk(nodePath string, walkFunc func(prev *node, component string",
                " func (s *store) Update(nodePath string, newValue string, expireOpts TTLOptionSet) (*Event, error) {",
                "-\tvar err *etcdErr.Error",
                "+\tvar err *v2error.Error",
                "@@ -512,3 +512,3 @@ func (s *store) Update(nodePath string, newValue string, expireOpts TTLOptionSet",
                " \tif s.readonlySet.Contains(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, \"/\", s.CurrentIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, \"/\", s.CurrentIndex)",
                " \t}",
                "@@ -523,3 +523,3 @@ func (s *store) Update(nodePath string, newValue string, expireOpts TTLOptionSet",
                " \t\t// if the node is a directory, we cannot update value to non-empty",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, currIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeNotFile, nodePath, currIndex)",
                " \t}",
                "@@ -563,3 +563,3 @@ func (s *store) Update(nodePath string, newValue string, expireOpts TTLOptionSet",
                " func (s *store) internalCreate(nodePath string, dir bool, value string, unique, replace bool,",
                "-\texpireTime time.Time, action string) (*Event, *etcdErr.Error) {",
                "+\texpireTime time.Time, action string) (*Event, *v2error.Error) {",
                "@@ -575,3 +575,3 @@ func (s *store) internalCreate(nodePath string, dir bool, value string, unique,",
                " \tif s.readonlySet.Contains(nodePath) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeRootROnly, \"/\", currIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeRootROnly, \"/\", currIndex)",
                " \t}",
                "@@ -605,3 +605,3 @@ func (s *store) internalCreate(nodePath string, dir bool, value string, unique,",
                " \t\t\tif n.IsDir() {",
                "-\t\t\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotFile, nodePath, currIndex)",
                "+\t\t\t\treturn nil, v2error.NewError(v2error.EcodeNotFile, nodePath, currIndex)",
                " \t\t\t}",
                "@@ -611,3 +611,3 @@ func (s *store) internalCreate(nodePath string, dir bool, value string, unique,",
                " \t\t} else {",
                "-\t\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNodeExist, nodePath, currIndex)",
                "+\t\t\treturn nil, v2error.NewError(v2error.EcodeNodeExist, nodePath, currIndex)",
                " \t\t}",
                "@@ -644,9 +644,9 @@ func (s *store) internalCreate(nodePath string, dir bool, value string, unique,",
                " // InternalGet gets the node of the given nodePath.",
                "-func (s *store) internalGet(nodePath string) (*node, *etcdErr.Error) {",
                "+func (s *store) internalGet(nodePath string) (*node, *v2error.Error) {",
                " \tnodePath = path.Clean(path.Join(\"/\", nodePath))",
                "-\twalkFunc := func(parent *node, name string) (*node, *etcdErr.Error) {",
                "+\twalkFunc := func(parent *node, name string) (*node, *v2error.Error) {",
                " \t\tif !parent.IsDir() {",
                "-\t\t\terr := etcdErr.NewError(etcdErr.EcodeNotDir, parent.Path, s.CurrentIndex)",
                "+\t\t\terr := v2error.NewError(v2error.EcodeNotDir, parent.Path, s.CurrentIndex)",
                " \t\t\treturn nil, err",
                "@@ -659,3 +659,3 @@ func (s *store) internalGet(nodePath string) (*node, *etcdErr.Error) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeKeyNotFound, path.Join(parent.Path, name), s.CurrentIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeKeyNotFound, path.Join(parent.Path, name), s.CurrentIndex)",
                " \t}",
                "@@ -709,3 +709,3 @@ func (s *store) DeleteExpiredKeys(cutoff time.Time) {",
                " // If it is a file, this function will return error.",
                "-func (s *store) checkDir(parent *node, dirName string) (*node, *etcdErr.Error) {",
                "+func (s *store) checkDir(parent *node, dirName string) (*node, *v2error.Error) {",
                " \tnode, ok := parent.Children[dirName]",
                "@@ -717,3 +717,3 @@ func (s *store) checkDir(parent *node, dirName string) (*node, *etcdErr.Error) {",
                "-\t\treturn nil, etcdErr.NewError(etcdErr.EcodeNotDir, node.Path, s.CurrentIndex)",
                "+\t\treturn nil, v2error.NewError(v2error.EcodeNotDir, node.Path, s.CurrentIndex)",
                " \t}",
                "diff --git a/etcdserver/v2store/store_test.go b/etcdserver/v2store/store_test.go",
                "index 53f393577..cce72ad8e 100644",
                "--- a/etcdserver/v2store/store_test.go",
                "+++ b/etcdserver/v2store/store_test.go",
                "@@ -20,3 +20,3 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "@@ -221,4 +221,4 @@ func TestStoreCreateFailsIfExists(t *testing.T) {",
                " \te, _err := s.Create(\"/foo\", true, \"\", false, v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "-\terr := _err.(*etcdErr.Error)",
                "-\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeNodeExist)",
                "+\terr := _err.(*v2error.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, v2error.EcodeNodeExist)",
                " \ttestutil.AssertEqual(t, err.Message, \"Key already exists\")",
                "@@ -286,4 +286,4 @@ func TestStoreUpdateFailsIfDirectory(t *testing.T) {",
                " \te, _err := s.Update(\"/foo\", \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "-\terr := _err.(*etcdErr.Error)",
                "-\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeNotFile)",
                "+\terr := _err.(*v2error.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, v2error.EcodeNotFile)",
                " \ttestutil.AssertEqual(t, err.Message, \"Not a file\")",
                "@@ -355,4 +355,4 @@ func TestStoreDeleteDirectoryFailsIfNonRecursiveAndDir(t *testing.T) {",
                " \te, _err := s.Delete(\"/foo\", false, false)",
                "-\terr := _err.(*etcdErr.Error)",
                "-\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeNotFile)",
                "+\terr := _err.(*v2error.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, v2error.EcodeNotFile)",
                " \ttestutil.AssertEqual(t, err.Message, \"Not a file\")",
                "@@ -410,4 +410,4 @@ func TestStoreCompareAndDeletePrevValueFailsIfNotMatch(t *testing.T) {",
                " \te, _err := s.CompareAndDelete(\"/foo\", \"baz\", 0)",
                "-\terr := _err.(*etcdErr.Error)",
                "-\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeTestFailed)",
                "+\terr := _err.(*v2error.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, v2error.EcodeTestFailed)",
                " \ttestutil.AssertEqual(t, err.Message, \"Compare failed\")",
                "@@ -445,4 +445,4 @@ func TestStoreCompareAndDeletePrevIndexFailsIfNotMatch(t *testing.T) {",
                " \ttestutil.AssertNotNil(t, _err)",
                "-\terr := _err.(*etcdErr.Error)",
                "-\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeTestFailed)",
                "+\terr := _err.(*v2error.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, v2error.EcodeTestFailed)",
                " \ttestutil.AssertEqual(t, err.Message, \"Compare failed\")",
                "@@ -462,4 +462,4 @@ func TestStoreCompareAndDeleteDirectoryFail(t *testing.T) {",
                " \ttestutil.AssertNotNil(t, _err)",
                "-\terr := _err.(*etcdErr.Error)",
                "-\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeNotFile)",
                "+\terr := _err.(*v2error.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, v2error.EcodeNotFile)",
                " }",
                "@@ -496,4 +496,4 @@ func TestStoreCompareAndSwapPrevValueFailsIfNotMatch(t *testing.T) {",
                " \te, _err := s.CompareAndSwap(\"/foo\", \"wrong_value\", 0, \"baz\", v2store.TTLOptionSet{ExpireTime: v2store.Permanent})",
                "-\terr := _err.(*etcdErr.Error)",
                "-\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeTestFailed)",
                "+\terr := _err.(*v2error.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, v2error.EcodeTestFailed)",
                " \ttestutil.AssertEqual(t, err.Message, \"Compare failed\")",
                "@@ -535,4 +535,4 @@ func TestStoreCompareAndSwapPrevIndexFailsIfNotMatch(t *testing.T) {",
                " \te, _err := s.CompareAndSwap(\"/foo\", \"\", 100, \"baz\", v2store.TTLOptionSet{ExpireTime:v2 store.Permanent})",
                "-\terr := _err.(*etcdErr.Error)",
                "-\ttestutil.AssertEqual(t, err.ErrorCode, etcdErr.EcodeTestFailed)",
                "+\terr := _err.(*v2error.Error)",
                "+\ttestutil.AssertEqual(t, err.ErrorCode, v2error.EcodeTestFailed)",
                " \ttestutil.AssertEqual(t, err.Message, \"Compare failed\")",
                "diff --git a/etcdserver/v2store/store_ttl_test.go b/etcdserver/v2store/store_ttl_test.go",
                "index 0b4bdd7b6..4f7201979 100644",
                "--- a/etcdserver/v2store/store_ttl_test.go",
                "+++ b/etcdserver/v2store/store_ttl_test.go",
                "@@ -20,3 +20,3 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "@@ -112,3 +112,3 @@ func TestStoreUpdateValueTTL(t *testing.T) {",
                " \ttestutil.AssertNil(t, e)",
                "-\ttestutil.AssertEqual(t, err.(*etcdErr.Error).ErrorCode, etcdErr.EcodeKeyNotFound)",
                "+\ttestutil.AssertEqual(t, err.(*v2error.Error).ErrorCode, v2error.EcodeKeyNotFound)",
                " }",
                "@@ -136,3 +136,3 @@ func TestStoreUpdateDirTTL(t *testing.T) {",
                " \ttestutil.AssertNil(t, e)",
                "-\ttestutil.AssertEqual(t, err.(*etcdErr.Error).ErrorCode, etcdErr.EcodeKeyNotFound)",
                "+\ttestutil.AssertEqual(t, err.(*v2error.Error).ErrorCode, v2error.EcodeKeyNotFound)",
                " }",
                "diff --git a/etcdserver/v2store/watcher_hub.go b/etcdserver/v2store/watcher_hub.go",
                "index 4e2a03f57..9da652d5f 100644",
                "--- a/etcdserver/v2store/watcher_hub.go",
                "+++ b/etcdserver/v2store/watcher_hub.go",
                "@@ -23,3 +23,3 @@ import (",
                "-\tetcdErr \"github.com/coreos/etcd/error\"",
                "+\t\"github.com/coreos/etcd/etcdserver/v2error\"",
                " )",
                "@@ -58,3 +58,3 @@ func newWatchHub(capacity int) *watcherHub {",
                " // If index is zero, watch will start from the current index + 1.",
                "-func (wh *watcherHub) watch(key string, recursive, stream bool, index, storeIndex uint64) (Watcher, *etcdErr.Error) {",
                "+func (wh *watcherHub) watch(key string, recursive, stream bool, index, storeIndex uint64) (Watcher, *v2error.Error) {",
                " \treportWatchRequest()"
            ],
            "changed_files": [
                "etcdctl/ctlv3/command/migrate_command.go",
                "etcdserver/api/etcdhttp/base.go",
                "etcdserver/api/v2http/client.go",
                "etcdserver/api/v2http/client_test.go",
                "etcdserver/api/v2http/http_test.go",
                "etcdserver/api/v2http/metrics.go",
                "etcdserver/api/v2v3/store.go",
                "etcdserver/api/v2v3/watcher.go",
                "etcdserver/membership/errors.go",
                "etcdserver/v2auth/auth.go",
                "etcdserver/v2auth/auth_requests.go",
                "etcdserver/v2auth/auth_test.go",
                "etcdserver/v2error/error.go",
                "etcdserver/v2error/error_test.go",
                "etcdserver/v2store/event_history.go",
                "etcdserver/v2store/event_test.go",
                "etcdserver/v2store/node.go",
                "etcdserver/v2store/store.go",
                "etcdserver/v2store/store_test.go",
                "etcdserver/v2store/store_ttl_test.go",
                "etcdserver/v2store/watcher_hub.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6e5e3d134ef8443c2b662ce63ed07a84d3ba2265",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520469124,
            "hunks": 9,
            "message": "*: enforce max lease TTL with 9,000,000,000 seconds math.MaxInt64 / time.Second is 9,223,372,036. 9,000,000,000 is easier to remember/document. Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/clientv3/options.go b/clientv3/options.go",
                "new file mode 100644",
                "index 000000000..fa25811f3",
                "--- /dev/null",
                "+++ b/clientv3/options.go",
                "@@ -0,0 +1,49 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package clientv3",
                "+",
                "+import (",
                "+\t\"math\"",
                "+",
                "+\t\"google.golang.org/grpc\"",
                "+)",
                "+",
                "+var (",
                "+\t// Disable gRPC internal retrial logic",
                "+\t// TODO: enable when gRPC retry is stable (FailFast=false)",
                "+\t// Reference:",
                "+\t//  - https://github.com/grpc/grpc-go/issues/1532",
                "+\t//  - https://github.com/grpc/proposal/blob/master/A6-client-retries.md",
                "+\tdefaultFailFast = grpc.FailFast(true)",
                "+",
                "+\t// client-side request send limit, gRPC default is math.MaxInt32",
                "+\t// Make sure that \"client-side send limit < server-side default send/recv limit\"",
                "+\t// Same value as \"embed.DefaultMaxRequestBytes\" plus gRPC overhead bytes",
                "+\tdefaultMaxCallSendMsgSize = grpc.MaxCallSendMsgSize(2 * 1024 * 1024)",
                "+",
                "+\t// client-side response receive limit, gRPC default is 4MB",
                "+\t// Make sure that \"client-side receive limit >= server-side default send/recv limit\"",
                "+\t// because range response can easily exceed request send limits",
                "+\t// Default to math.MaxInt32; writes exceeding server-side send limit fails anyway",
                "+\tdefaultMaxCallRecvMsgSize = grpc.MaxCallRecvMsgSize(math.MaxInt32)",
                "+)",
                "+",
                "+// defaultCallOpts defines a list of default \"gRPC.CallOption\".",
                "+// Some options are exposed to \"clientv3.Config\".",
                "+// Defaults will be overridden by the settings in \"clientv3.Config\".",
                "+var defaultCallOpts = []grpc.CallOption{defaultFailFast, defaultMaxCallSendMsgSize, defaultMaxCallRecvMsgSize}",
                "+",
                "+// MaxLeaseTTL is the maximum lease TTL value",
                "+const MaxLeaseTTL = 9000000000",
                "diff --git a/etcdserver/api/v3rpc/rpctypes/error.go b/etcdserver/api/v3rpc/rpctypes/error.go",
                "index bd17179e9..9a2ad74a1 100644",
                "--- a/etcdserver/api/v3rpc/rpctypes/error.go",
                "+++ b/etcdserver/api/v3rpc/rpctypes/error.go",
                "@@ -34,4 +34,5 @@ var (",
                "-\tErrGRPCLeaseNotFound = grpc.Errorf(codes.NotFound, \"etcdserver: requested lease not found\")",
                "-\tErrGRPCLeaseExist    = grpc.Errorf(codes.FailedPrecondition, \"etcdserver: lease already exists\")",
                "+\tErrGRPCLeaseNotFound    = grpc.Errorf(codes.NotFound, \"etcdserver: requested lease not found\")",
                "+\tErrGRPCLeaseExist       = grpc.Errorf(codes.FailedPrecondition, \"etcdserver: lease already exists\")",
                "+\tErrGRPCLeaseTTLTooLarge = grpc.Errorf(codes.OutOfRange, \"etcdserver: too large lease TTL\")",
                "@@ -81,4 +82,5 @@ var (",
                "-\t\tgrpc.ErrorDesc(ErrGRPCLeaseNotFound): ErrGRPCLeaseNotFound,",
                "-\t\tgrpc.ErrorDesc(ErrGRPCLeaseExist):    ErrGRPCLeaseExist,",
                "+\t\tgrpc.ErrorDesc(ErrGRPCLeaseNotFound):    ErrGRPCLeaseNotFound,",
                "+\t\tgrpc.ErrorDesc(ErrGRPCLeaseExist):       ErrGRPCLeaseExist,",
                "+\t\tgrpc.ErrorDesc(ErrGRPCLeaseTTLTooLarge): ErrGRPCLeaseTTLTooLarge,",
                "@@ -128,4 +130,5 @@ var (",
                "-\tErrLeaseNotFound = Error(ErrGRPCLeaseNotFound)",
                "-\tErrLeaseExist    = Error(ErrGRPCLeaseExist)",
                "+\tErrLeaseNotFound    = Error(ErrGRPCLeaseNotFound)",
                "+\tErrLeaseExist       = Error(ErrGRPCLeaseExist)",
                "+\tErrLeaseTTLTooLarge = Error(ErrGRPCLeaseTTLTooLarge)",
                "diff --git a/etcdserver/api/v3rpc/util.go b/etcdserver/api/v3rpc/util.go",
                "index 93c5ad30a..3df837a33 100644",
                "--- a/etcdserver/api/v3rpc/util.go",
                "+++ b/etcdserver/api/v3rpc/util.go",
                "@@ -74,2 +74,4 @@ func togRPCError(err error) error {",
                " \t\treturn rpctypes.ErrGRPCLeaseExist",
                "+\tcase lease.ErrLeaseTTLTooLarge:",
                "+\t\treturn rpctypes.ErrGRPCLeaseTTLTooLarge",
                "diff --git a/lease/lessor.go b/lease/lessor.go",
                "index 3418cf565..4bad58339 100644",
                "--- a/lease/lessor.go",
                "+++ b/lease/lessor.go",
                "@@ -37,2 +37,5 @@ const (",
                "+// MaxLeaseTTL is the maximum lease TTL value",
                "+const MaxLeaseTTL = 9000000000",
                "+",
                " var (",
                "@@ -43,5 +46,6 @@ var (",
                "-\tErrNotPrimary    = errors.New(\"not a primary lessor\")",
                "-\tErrLeaseNotFound = errors.New(\"lease not found\")",
                "-\tErrLeaseExists   = errors.New(\"lease already exists\")",
                "+\tErrNotPrimary       = errors.New(\"not a primary lessor\")",
                "+\tErrLeaseNotFound    = errors.New(\"lease not found\")",
                "+\tErrLeaseExists      = errors.New(\"lease already exists\")",
                "+\tErrLeaseTTLTooLarge = errors.New(\"too large lease TTL\")",
                " )",
                "@@ -201,2 +205,6 @@ func (le *lessor) Grant(id LeaseID, ttl int64) (*Lease, error) {",
                "+\tif ttl > MaxLeaseTTL {",
                "+\t\treturn nil, ErrLeaseTTLTooLarge",
                "+\t}",
                "+",
                " \t// TODO: when lessor is under high load, it should give out lease",
                "diff --git a/lease/lessor_test.go b/lease/lessor_test.go",
                "index 7ea2972a9..4c48b2cd1 100644",
                "--- a/lease/lessor_test.go",
                "+++ b/lease/lessor_test.go",
                "@@ -438,2 +438,16 @@ func TestLessorExpireAndDemote(t *testing.T) {",
                "+func TestLessorMaxTTL(t *testing.T) {",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer os.RemoveAll(dir)",
                "+\tdefer be.Close()",
                "+",
                "+\tle := newLessor(be, minLeaseTTL)",
                "+\tdefer le.Stop()",
                "+",
                "+\t_, err := le.Grant(1, MaxLeaseTTL+1)",
                "+\tif err != ErrLeaseTTLTooLarge {",
                "+\t\tt.Fatalf(\"grant unexpectedly succeeded\")",
                "+\t}",
                "+}",
                "+",
                " type fakeDeleter struct {"
            ],
            "changed_files": [
                "clientv3/options.go",
                "etcdserver/api/v3rpc/rpctypes/error.go",
                "etcdserver/api/v3rpc/util.go",
                "lease/lessor.go",
                "lease/lessor_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "db21941d1dc01ed668f6de5ea0270b9ad60ec306"
                ],
                [
                    "no-tag",
                    "eaa0050d4d9b09322b010a601f2da364c62d013a"
                ]
            ],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6fe7316ec4bde0d1b641b69bcc52f815b6d9f4a9",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520731575,
            "hunks": 4,
            "message": "rafthttp: add \"ActivePeers\" to \"Transport\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/util_test.go b/etcdserver/util_test.go",
                "index 79edabd12..b1cbe236c 100644",
                "--- a/etcdserver/util_test.go",
                "+++ b/etcdserver/util_test.go",
                "@@ -85,2 +85,3 @@ func (s *nopTransporterWithActiveTime) UpdatePeer(id types.ID, us []string) {}",
                " func (s *nopTransporterWithActiveTime) ActiveSince(id types.ID) time.Time   { return s.activeMap[id] }",
                "+func (s *nopTransporterWithActiveTime) ActivePeers() int                    { return 0 }",
                " func (s *nopTransporterWithActiveTime) Stop()                               {}",
                "diff --git a/rafthttp/transport.go b/rafthttp/transport.go",
                "index 51574ba5e..ce7343302 100644",
                "--- a/rafthttp/transport.go",
                "+++ b/rafthttp/transport.go",
                "@@ -87,2 +87,4 @@ type Transporter interface {",
                " \tActiveSince(id types.ID) time.Time",
                "+\t// ActivePeers returns the number of active peers.",
                "+\tActivePeers() int",
                " \t// Stop closes the connections and stops the transporter.",
                "@@ -377,2 +379,16 @@ func (t *Transport) Resume() {",
                "+// ActivePeers returns a channel that closes when an initial",
                "+// peer connection has been established. Use this to wait until the",
                "+// first peer connection becomes active.",
                "+func (t *Transport) ActivePeers() (cnt int) {",
                "+\tt.mu.RLock()",
                "+\tdefer t.mu.RUnlock()",
                "+\tfor _, p := range t.peers {",
                "+\t\tif !p.activeSince().IsZero() {",
                "+\t\t\tcnt++",
                "+\t\t}",
                "+\t}",
                "+\treturn cnt",
                "+}",
                "+",
                " type nopTransporter struct{}",
                "@@ -393,2 +409,3 @@ func (s *nopTransporter) UpdatePeer(id types.ID, us []string) {}",
                " func (s *nopTransporter) ActiveSince(id types.ID) time.Time   { return time.Time{} }",
                "+func (s *nopTransporter) ActivePeers() int                    { return 0 }",
                " func (s *nopTransporter) Stop()                               {}"
            ],
            "changed_files": [
                "etcdserver/util_test.go",
                "rafthttp/transport.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "29d95438507326299aecddbed326d6db3f9cdd60"
                ]
            ],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d62730173527ec8455933baafb1155ea27adffc2",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519175928,
            "hunks": 5,
            "message": "embed: document/validate compaction mode Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/embed/config.go b/embed/config.go",
                "index 520291cc5..c63d10a51 100644",
                "--- a/embed/config.go",
                "+++ b/embed/config.go",
                "@@ -92,12 +92,18 @@ type Config struct {",
                "-\tCorsInfo                *cors.CORSInfo",
                "-\tLPUrls, LCUrls          []url.URL",
                "-\tDir                     string `json:\"data-dir\"`",
                "-\tWalDir                  string `json:\"wal-dir\"`",
                "-\tMaxSnapFiles            uint   `json:\"max-snapshots\"`",
                "-\tMaxWalFiles             uint   `json:\"max-wals\"`",
                "-\tName                    string `json:\"name\"`",
                "-\tSnapCount               uint64 `json:\"snapshot-count\"`",
                "+\tCorsInfo       *cors.CORSInfo",
                "+\tLPUrls, LCUrls []url.URL",
                "+\tDir            string `json:\"data-dir\"`",
                "+\tWalDir         string `json:\"wal-dir\"`",
                "+\tMaxSnapFiles   uint   `json:\"max-snapshots\"`",
                "+\tMaxWalFiles    uint   `json:\"max-wals\"`",
                "+\tName           string `json:\"name\"`",
                "+\tSnapCount      uint64 `json:\"snapshot-count\"`",
                "+",
                "+\t// AutoCompactionMode is either 'periodic' or 'revision'.",
                "+\tAutoCompactionMode string `json:\"auto-compaction-mode\"`",
                "+\t// AutoCompactionRetention is either duration string with time unit",
                "+\t// (e.g. '5m' for 5-minute), or revision unit (e.g. '5000').",
                "+\t// If no time unit is provided and compaction mode is 'periodic',",
                "+\t// the unit defaults to hour. For example, '5' translates into 5-hour.",
                " \tAutoCompactionRetention string `json:\"auto-compaction-retention\"`",
                "-\tAutoCompactionMode      string `json:\"auto-compaction-mode\"`",
                "@@ -390,2 +396,3 @@ func (cfg *configYAML) configFromFile(path string) error {",
                "+// Validate ensures that '*embed.Config' fields are properly configured.",
                " func (cfg *Config) Validate() error {",
                "@@ -451,2 +458,9 @@ func (cfg *Config) Validate() error {",
                "+\tswitch cfg.AutoCompactionMode {",
                "+\tcase \"\":",
                "+\tcase CompactorModeRevision, CompactorModePeriodic:",
                "+\tdefault:",
                "+\t\treturn fmt.Errorf(\"unknown auto-compaction-mode %q\", cfg.AutoCompactionMode)",
                "+\t}",
                "+",
                " \treturn nil",
                "diff --git a/embed/config_test.go b/embed/config_test.go",
                "index 27b73238e..741944d47 100644",
                "--- a/embed/config_test.go",
                "+++ b/embed/config_test.go",
                "@@ -150 +150,10 @@ func mustCreateCfgFile(t *testing.T, b []byte) *os.File {",
                " }",
                "+",
                "+func TestAutoCompactionModeInvalid(t *testing.T) {",
                "+\tcfg := NewConfig()",
                "+\tcfg.AutoCompactionMode = \"period\"",
                "+\terr := cfg.Validate()",
                "+\tif err == nil {",
                "+\t\tt.Errorf(\"expected non-nil error, got %v\", err)",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "embed/config.go",
                "embed/config_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4aa03204392f7a2cb5f07965a98ad4283fb80422"
                ]
            ],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.2",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bb60342cecb6cc0c7816cbf08d95c67f4b959a90",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520461849,
            "hunks": 3,
            "message": "hack/scripts-dev: fix indentation in run.sh Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/docker-dns/insecure/run.sh b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "index de7ff68a8..6b2476228 100755",
                "--- a/hack/scripts-dev/docker-dns/insecure/run.sh",
                "+++ b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "@@ -40,3 +40,3 @@ curl \\",
                "   -L http://127.0.0.1:2379/v3/kv/put \\",
                "-\t-X POST \\",
                "+  -X POST \\",
                "   -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "@@ -46,3 +46,3 @@ curl \\",
                "   -L http://m1.etcd.local:2379/v3/kv/put \\",
                "-\t-X POST \\",
                "+  -X POST \\",
                "   -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "@@ -52,3 +52,3 @@ curl \\",
                "   -L http://m1.etcd.local:2379/v3/kv/range \\",
                "-\t-X POST \\",
                "+  -X POST \\",
                "   -d '{\"key\": \"Zm9v\"}'"
            ],
            "changed_files": [
                "hack/scripts-dev/docker-dns/insecure/run.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a537163e9e67a145035c3f6611788a6746044dfc"
                ],
                [
                    "no-tag",
                    "e6d44fa3f2b053b3d262f992368bbeab8ce388ba"
                ],
                [
                    "no-tag",
                    "4178b7541119a4319863adf0f23627107cd7fc72"
                ]
            ],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "99a12662c1702a1dee077e69ba6dc442120b40ac",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520501710,
            "hunks": 3,
            "message": "*: remove unused env vars Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/.semaphore.sh b/.semaphore.sh",
                "index d2a685748..747fe2dbf 100755",
                "--- a/.semaphore.sh",
                "+++ b/.semaphore.sh",
                "@@ -4,3 +4,3 @@ TEST_SUFFIX=$(date +%s | base64 | head -c 15)",
                "-TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.3.1\"",
                "+TEST_OPTS=\"PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.3.1\"",
                " if [ \"$TEST_ARCH\" == \"386\" ]; then",
                "diff --git a/hack/scripts-dev/Makefile b/hack/scripts-dev/Makefile",
                "index c9450a4c9..1fb652262 100644",
                "--- a/hack/scripts-dev/Makefile",
                "+++ b/hack/scripts-dev/Makefile",
                "@@ -112,3 +112,3 @@ compile-setup-gopath-with-docker-test:",
                " #   TEST_OPTS=\"PASSES='fmt bom dep compile build unit'\" make test -f ./hack/scripts-dev/Makefile",
                "-#   TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional'\" make test -f ./hack/scripts-dev/Makefile",
                "+#   TEST_OPTS=\"PASSES='build unit release integration_e2e functional'\" make test -f ./hack/scripts-dev/Makefile",
                " #   TEST_OPTS=\"PASSES='build grpcproxy'\" make test -f ./hack/scripts-dev/Makefile",
                "@@ -124,4 +124,4 @@ compile-setup-gopath-with-docker-test:",
                " # Semaphore CI (test with docker):",
                "-#   TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional'\" make docker-test -f ./hack/scripts-dev/Makefile",
                "-#   HOST_TMP_DIR=/tmp TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional'\" make docker-test -f ./hack/scripts-dev/Makefile",
                "+#   TEST_OPTS=\"PASSES='build unit release integration_e2e functional'\" make docker-test -f ./hack/scripts-dev/Makefile",
                "+#   HOST_TMP_DIR=/tmp TEST_OPTS=\"PASSES='build unit release integration_e2e functional'\" make docker-test -f ./hack/scripts-dev/Makefile",
                " #   TEST_OPTS=\"GOARCH=386 PASSES='build unit integration_e2e'\" make docker-test -f ./hack/scripts-dev/Makefile"
            ],
            "changed_files": [
                ".semaphore.sh",
                "hack/scripts-dev/Makefile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f8fc817ce8d4a3b0c9f270627dc676ba11bf02ac"
                ],
                [
                    "no-tag",
                    "4704232cb6b7bdc01de6866d9c38e1e12c0aa4fa"
                ],
                [
                    "no-tag",
                    "6e11a79fd8eb10e4f1b8f185312cb33239014a32"
                ]
            ],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.2",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "edec229e1019c823844d5933f06578cfc7ddc74f",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520330226,
            "hunks": 3,
            "message": "etcdserver: make \"advanceTicks\" method Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/raft.go b/etcdserver/raft.go",
                "index 1fa085905..fe4853314 100644",
                "--- a/etcdserver/raft.go",
                "+++ b/etcdserver/raft.go",
                "@@ -372,9 +372,9 @@ func (r *raftNode) resumeSending() {",
                "-// advanceTicksForElection advances ticks to the node for fast election.",
                "-// This reduces the time to wait for first leader election if bootstrapping the whole",
                "-// cluster, while leaving at least 1 heartbeat for possible existing leader",
                "-// to contact it.",
                "-func advanceTicksForElection(n raft.Node, electionTicks int) {",
                "-\tfor i := 0; i < electionTicks-1; i++ {",
                "-\t\tn.Tick()",
                "+// advanceTicks advances ticks of Raft node.",
                "+// This can be used for fast-forwarding election",
                "+// ticks in multi data-center deployments, thus",
                "+// speeding up election process.",
                "+func (r *raftNode) advanceTicks(ticks int) {",
                "+\tfor i := 0; i < ticks; i++ {",
                "+\t\tr.Tick()",
                " \t}",
                "@@ -420,3 +420,2 @@ func startNode(cfg ServerConfig, cl *membership.RaftCluster, ids []types.ID) (id",
                " \traftStatusMu.Unlock()",
                "-\tadvanceTicksForElection(n, c.ElectionTick)",
                " \treturn id, n, s, w",
                "@@ -455,3 +454,2 @@ func restartNode(cfg ServerConfig, snapshot *raftpb.Snapshot) (types.ID, *member",
                " \traftStatusMu.Unlock()",
                "-\tadvanceTicksForElection(n, c.ElectionTick)",
                " \treturn id, cl, n, s, w"
            ],
            "changed_files": [
                "etcdserver/raft.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b2d5c6c7bd5132378d4cb91cfba096310d3d2093"
                ]
            ],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "83d1c3d5ec5988c478522c8bfbeeed28df6f7d52",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519176067,
            "hunks": 4,
            "message": "embed: fix revision-based compaction with default value Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/embed/config_test.go b/embed/config_test.go",
                "index 741944d47..c5db04bcb 100644",
                "--- a/embed/config_test.go",
                "+++ b/embed/config_test.go",
                "@@ -159 +159,11 @@ func TestAutoCompactionModeInvalid(t *testing.T) {",
                " }",
                "+",
                "+func TestAutoCompactionModeParse(t *testing.T) {",
                "+\tdur, err := parseCompactionRetention(\"revision\", \"1\")",
                "+\tif err != nil {",
                "+\t\tt.Error(err)",
                "+\t}",
                "+\tif dur != 1 {",
                "+\t\tt.Fatalf(\"AutoCompactionRetention expected 1, got %d\", dur)",
                "+\t}",
                "+}",
                "diff --git a/embed/etcd.go b/embed/etcd.go",
                "index c1a94bc45..0d21639f7 100644",
                "--- a/embed/etcd.go",
                "+++ b/embed/etcd.go",
                "@@ -136,6 +136,2 @@ func StartEtcd(inCfg *Config) (e *Etcd, err error) {",
                "-\tvar (",
                "-\t\tautoCompactionRetention time.Duration",
                "-\t\th                       int",
                "-\t)",
                " \t// AutoCompactionRetention defaults to \"0\" if not set.",
                "@@ -144,10 +140,5 @@ func StartEtcd(inCfg *Config) (e *Etcd, err error) {",
                " \t}",
                "-\th, err = strconv.Atoi(cfg.AutoCompactionRetention)",
                "-\tif err == nil {",
                "-\t\tautoCompactionRetention = time.Duration(int64(h)) * time.Hour",
                "-\t} else {",
                "-\t\tautoCompactionRetention, err = time.ParseDuration(cfg.AutoCompactionRetention)",
                "-\t\tif err != nil {",
                "-\t\t\treturn nil, fmt.Errorf(\"error parsing AutoCompactionRetention: %v\", err)",
                "-\t\t}",
                "+\tautoCompactionRetention, err := parseCompactionRetention(cfg.AutoCompactionMode, cfg.AutoCompactionRetention)",
                "+\tif err != nil {",
                "+\t\treturn e, err",
                " \t}",
                "@@ -564 +555,20 @@ func (e *Etcd) errHandler(err error) {",
                " }",
                "+",
                "+func parseCompactionRetention(mode, retention string) (ret time.Duration, err error) {",
                "+\th, err := strconv.Atoi(retention)",
                "+\tif err == nil {",
                "+\t\tswitch mode {",
                "+\t\tcase CompactorModeRevision:",
                "+\t\t\tret = time.Duration(int64(h))",
                "+\t\tcase CompactorModePeriodic:",
                "+\t\t\tret = time.Duration(int64(h)) * time.Hour",
                "+\t\t}",
                "+\t} else {",
                "+\t\t// periodic compaction",
                "+\t\tret, err = time.ParseDuration(retention)",
                "+\t\tif err != nil {",
                "+\t\t\treturn 0, fmt.Errorf(\"error parsing CompactionRetention: %v\", err)",
                "+\t\t}",
                "+\t}",
                "+\treturn ret, nil",
                "+}"
            ],
            "changed_files": [
                "embed/config_test.go",
                "embed/etcd.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "240fda5128c1c753850aed66073f0088e72f7c0d"
                ]
            ],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9680b8a157dd4792616a822606a0dc38a653461f",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520330868,
            "hunks": 7,
            "message": "etcdserver: adjust election ticks on restart Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/raft.go b/etcdserver/raft.go",
                "index fe4853314..84b29b345 100644",
                "--- a/etcdserver/raft.go",
                "+++ b/etcdserver/raft.go",
                "@@ -99,2 +99,3 @@ type raftNode struct {",
                "+\ttickMu *sync.Mutex",
                " \traftNodeConfig",
                "@@ -135,2 +136,3 @@ func newRaftNode(cfg raftNodeConfig) *raftNode {",
                " \tr := &raftNode{",
                "+\t\ttickMu:         new(sync.Mutex),",
                " \t\traftNodeConfig: cfg,",
                "@@ -153,2 +155,9 @@ func newRaftNode(cfg raftNodeConfig) *raftNode {",
                "+// raft.Node does not have locks in Raft package",
                "+func (r *raftNode) tick() {",
                "+\tr.tickMu.Lock()",
                "+\tr.Tick()",
                "+\tr.tickMu.Unlock()",
                "+}",
                "+",
                " // start prepares and starts raftNode in a new goroutine. It is no longer safe",
                "@@ -165,3 +174,3 @@ func (r *raftNode) start(rh *raftReadyHandler) {",
                " \t\t\tcase <-r.ticker.C:",
                "-\t\t\t\tr.Tick()",
                "+\t\t\t\tr.tick()",
                " \t\t\tcase rd := <-r.Ready():",
                "@@ -378,3 +387,3 @@ func (r *raftNode) advanceTicks(ticks int) {",
                " \tfor i := 0; i < ticks; i++ {",
                "-\t\tr.Tick()",
                "+\t\tr.tick()",
                " \t}",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index aa2321752..d828673b7 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -532,2 +532,40 @@ func NewServer(cfg ServerConfig) (srv *EtcdServer, err error) {",
                "+func (s *EtcdServer) adjustTicks() {",
                "+\tclusterN := len(s.cluster.Members())",
                "+",
                "+\t// single-node fresh start, or single-node recovers from snapshot",
                "+\tif clusterN == 1 {",
                "+\t\tticks := s.Cfg.ElectionTicks - 1",
                "+\t\tplog.Infof(\"%s as single-node; fast-forwarding %d ticks (election ticks %d)\", s.ID(), ticks, s.Cfg.ElectionTicks)",
                "+\t\ts.r.advanceTicks(ticks)",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\t// retry up to \"rafthttp.ConnReadTimeout\", which is 5-sec",
                "+\t// until peer connection reports; otherwise:",
                "+\t// 1. all connections failed, or",
                "+\t// 2. no active peers, or",
                "+\t// 3. restarted single-node with no snapshot",
                "+\t// then, do nothing, because advancing ticks would have no effect",
                "+\twaitTime := rafthttp.ConnReadTimeout",
                "+\titv := 50 * time.Millisecond",
                "+\tfor i := int64(0); i < int64(waitTime/itv); i++ {",
                "+\t\tselect {",
                "+\t\tcase <-time.After(itv):",
                "+\t\tcase <-s.stopping:",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\tpeerN := s.r.transport.ActivePeers()",
                "+\t\tif peerN > 1 {",
                "+\t\t\t// multi-node received peer connection reports",
                "+\t\t\t// adjust ticks, in case slow leader message receive",
                "+\t\t\tticks := s.Cfg.ElectionTicks - 2",
                "+\t\t\tplog.Infof(\"%s initialzed peer connection; fast-forwarding %d ticks (election ticks %d) with %d active peer(s)\", s.ID(), ticks, s.Cfg.ElectionTicks, peerN)",
                "+\t\t\ts.r.advanceTicks(ticks)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                " // Start performs any initialization of the Server necessary for it to",
                "@@ -538,2 +576,3 @@ func (s *EtcdServer) Start() {",
                " \ts.start()",
                "+\ts.goAttach(func() { s.adjustTicks() })",
                " \ts.goAttach(func() { s.publish(s.Cfg.ReqTimeout()) })"
            ],
            "changed_files": [
                "etcdserver/raft.go",
                "etcdserver/server.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3282d9070759d8111465928dd9b36f0e401c9b13"
                ]
            ],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3e69dc5a7c344af875121265770c46cfabc5572a",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520533170,
            "hunks": 1,
            "message": "clientv3/integration: test \"rpctypes.ErrLeaseTTLTooLarge\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/clientv3/integration/lease_test.go b/clientv3/integration/lease_test.go",
                "index 482d258ac..ee7611b1e 100644",
                "--- a/clientv3/integration/lease_test.go",
                "+++ b/clientv3/integration/lease_test.go",
                "@@ -57,2 +57,7 @@ func TestLeaseGrant(t *testing.T) {",
                "+\t_, merr := lapi.Grant(context.Background(), clientv3.MaxLeaseTTL+1)",
                "+\tif merr != rpctypes.ErrLeaseTTLTooLarge {",
                "+\t\tt.Fatalf(\"err = %v, want %v\", merr, rpctypes.ErrLeaseTTLTooLarge)",
                "+\t}",
                "+",
                " \tresp, err := lapi.Grant(context.Background(), 10)"
            ],
            "changed_files": [
                "clientv3/integration/lease_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d1da2023b9d0c8b73e238c4171b8ab36d9efc9df"
                ],
                [
                    "no-tag",
                    "ea0fda66eb1867edd80458ecddd71ced06dae6c1"
                ]
            ],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "69357adf33d0d5278a1ff1288f21a3feb16145b2",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519374402,
            "hunks": 1,
            "message": "etcdserver: enable \"CheckQuorum\" when starting with \"ForceNewCluster\" We enable \"raft.Config.CheckQuorum\" by default in other Raft initial starts. So should start with \"ForceNewCluster\". Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/raft.go b/etcdserver/raft.go",
                "index ff11349fa..9695da80e 100644",
                "--- a/etcdserver/raft.go",
                "+++ b/etcdserver/raft.go",
                "@@ -502,2 +502,3 @@ func restartAsStandaloneNode(cfg ServerConfig, snapshot *raftpb.Snapshot) (types",
                " \t\tMaxInflightMsgs: maxInflightMsgs,",
                "+\t\tCheckQuorum:     true,",
                " \t}"
            ],
            "changed_files": [
                "etcdserver/raft.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a5b31087e8aa93280f0e9383b72953eeb9317532"
                ],
                [
                    "no-tag",
                    "cbea4efaf2c30631a1ce315c4f31966a6efd0164"
                ]
            ],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b62e8291c2a57033034dba3312ad34ded10c7346",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519943434,
            "hunks": 5,
            "message": "e2e: add \"spawnWithExpectLines\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/e2e/util.go b/e2e/util.go",
                "index e4125137a..6960a3acf 100644",
                "--- a/e2e/util.go",
                "+++ b/e2e/util.go",
                "@@ -44,5 +44,10 @@ func spawnWithExpect(args []string, expected string) error {",
                " func spawnWithExpects(args []string, xs ...string) error {",
                "+\t_, err := spawnWithExpectLines(args, xs...)",
                "+\treturn err",
                "+}",
                "+",
                "+func spawnWithExpectLines(args []string, xs ...string) ([]string, error) {",
                " \tproc, err := spawnCmd(args)",
                " \tif err != nil {",
                "-\t\treturn err",
                "+\t\treturn nil, err",
                " \t}",
                "@@ -59,3 +64,3 @@ func spawnWithExpects(args []string, xs ...string) error {",
                " \t\t\t\tproc.Close()",
                "-\t\t\t\treturn fmt.Errorf(\"%v (expected %q, got %q)\", lerr, txt, lines)",
                "+\t\t\t\treturn nil, fmt.Errorf(\"%v (expected %q, got %q)\", lerr, txt, lines)",
                " \t\t\t}",
                "@@ -69,5 +74,5 @@ func spawnWithExpects(args []string, xs ...string) error {",
                " \tif len(xs) == 0 && proc.LineCount() != noOutputLineCount { // expect no output",
                "-\t\treturn fmt.Errorf(\"unexpected output (got lines %q, line count %d)\", lines, proc.LineCount())",
                "+\t\treturn nil, fmt.Errorf(\"unexpected output (got lines %q, line count %d)\", lines, proc.LineCount())",
                " \t}",
                "-\treturn perr",
                "+\treturn lines, perr",
                " }"
            ],
            "changed_files": [
                "e2e/util.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "207f19354b8e4078c1a13d0ad62861d01acb3220"
                ]
            ],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "918698add759e57c931d9124e6df92f8071e2696",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520542890,
            "hunks": 1,
            "message": "version: bump up to 3.1.12",
            "diff": [
                "diff --git a/version/version.go b/version/version.go",
                "index 772df21ff..05a3e7a20 100644",
                "--- a/version/version.go",
                "+++ b/version/version.go",
                "@@ -28,3 +28,3 @@ var (",
                " \tMinClusterVersion = \"3.0.0\"",
                "-\tVersion           = \"3.1.11+git\"",
                "+\tVersion           = \"3.1.12\"",
                " \tAPIVersion        = \"unknown\""
            ],
            "changed_files": [
                "version/version.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2fdc4aa06c4ba88764af818f3d4b5ea624152c86"
                ]
            ],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "273a43d4d88ce0f9515bd73ac32f4ab7f909bc81",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519937336,
            "hunks": 4,
            "message": "api/v3election: error on missing \"leader\" field Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/api/v3election/election.go b/etcdserver/api/v3election/election.go",
                "index f9061c079..d1b2767be 100644",
                "--- a/etcdserver/api/v3election/election.go",
                "+++ b/etcdserver/api/v3election/election.go",
                "@@ -17,2 +17,4 @@ package v3election",
                " import (",
                "+\t\"errors\"",
                "+",
                " \t\"golang.org/x/net/context\"",
                "@@ -24,2 +26,6 @@ import (",
                "+// ErrMissingLeaderKey is returned when election API request",
                "+// is missing the \"leader\" field.",
                "+var ErrMissingLeaderKey = errors.New(`\"leader\" field must be provided`)",
                "+",
                " type electionServer struct {",
                "@@ -53,2 +59,5 @@ func (es *electionServer) Campaign(ctx context.Context, req *epb.CampaignRequest",
                " func (es *electionServer) Proclaim(ctx context.Context, req *epb.ProclaimRequest) (*epb.ProclaimResponse, error) {",
                "+\tif req.Leader == nil {",
                "+\t\treturn nil, ErrMissingLeaderKey",
                "+\t}",
                " \ts, err := es.session(ctx, req.Leader.Lease)",
                "@@ -100,2 +109,5 @@ func (es *electionServer) Leader(ctx context.Context, req *epb.LeaderRequest) (*",
                " func (es *electionServer) Resign(ctx context.Context, req *epb.ResignRequest) (*epb.ResignResponse, error) {",
                "+\tif req.Leader == nil {",
                "+\t\treturn nil, ErrMissingLeaderKey",
                "+\t}",
                " \ts, err := es.session(ctx, req.Leader.Lease)"
            ],
            "changed_files": [
                "etcdserver/api/v3election/election.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "85533a6305bd7b775494fa2ec84cff7e04f838ce"
                ],
                [
                    "no-tag",
                    "bb8a5377cee4c4fbe82316c0844f92d26ed672be"
                ]
            ],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2f909a97b5e2451998e589a8fc22ca5decdf69a7",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519943442,
            "hunks": 4,
            "message": "e2e: add \"Election\" grpc-gateway test cases Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/e2e/v3_curl_test.go b/e2e/v3_curl_test.go",
                "index a2edb7b69..1f65ebe2a 100644",
                "--- a/e2e/v3_curl_test.go",
                "+++ b/e2e/v3_curl_test.go",
                "@@ -17,6 +17,9 @@ package e2e",
                " import (",
                "+\t\"encoding/base64\"",
                " \t\"encoding/json\"",
                " \t\"path\"",
                "+\t\"strconv\"",
                " \t\"testing\"",
                "+\tepb \"github.com/coreos/etcd/etcdserver/api/v3election/v3electionpb\"",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "@@ -247 +250,113 @@ func testV3CurlAuth(cx ctlCtx) {",
                " }",
                "+",
                "+func TestV3CurlCampaignNoTLS(t *testing.T) {",
                "+\tfor _, p := range apiPrefix {",
                "+\t\ttestCtl(t, testV3CurlCampaign, withApiPrefix(p), withCfg(configNoTLS))",
                "+\t}",
                "+}",
                "+",
                "+func testV3CurlCampaign(cx ctlCtx) {",
                "+\tcdata, err := json.Marshal(&epb.CampaignRequest{",
                "+\t\tName:  []byte(\"/election-prefix\"),",
                "+\t\tValue: []byte(\"v1\"),",
                "+\t})",
                "+\tif err != nil {",
                "+\t\tcx.t.Fatal(err)",
                "+\t}",
                "+\tcargs := cURLPrefixArgs(cx.epc, \"POST\", cURLReq{",
                "+\t\tendpoint: path.Join(cx.apiPrefix, \"/election/campaign\"),",
                "+\t\tvalue:    string(cdata),",
                "+\t})",
                "+\tlines, err := spawnWithExpectLines(cargs, `\"leader\":{\"name\":\"`)",
                "+\tif err != nil {",
                "+\t\tcx.t.Fatalf(\"failed post campaign request (%s) (%v)\", cx.apiPrefix, err)",
                "+\t}",
                "+\tif len(lines) != 1 {",
                "+\t\tcx.t.Fatalf(\"len(lines) expected 1, got %+v\", lines)",
                "+\t}",
                "+",
                "+\tvar cresp campaignResponse",
                "+\tif err = json.Unmarshal([]byte(lines[0]), &cresp); err != nil {",
                "+\t\tcx.t.Fatalf(\"failed to unmarshal campaign response %v\", err)",
                "+\t}",
                "+\tndata, err := base64.StdEncoding.DecodeString(cresp.Leader.Name)",
                "+\tif err != nil {",
                "+\t\tcx.t.Fatalf(\"failed to decode leader key %v\", err)",
                "+\t}",
                "+\tkdata, err := base64.StdEncoding.DecodeString(cresp.Leader.Key)",
                "+\tif err != nil {",
                "+\t\tcx.t.Fatalf(\"failed to decode leader key %v\", err)",
                "+\t}",
                "+",
                "+\trev, _ := strconv.ParseInt(cresp.Leader.Rev, 10, 64)",
                "+\tlease, _ := strconv.ParseInt(cresp.Leader.Lease, 10, 64)",
                "+\tpdata, err := json.Marshal(&epb.ProclaimRequest{",
                "+\t\tLeader: &epb.LeaderKey{",
                "+\t\t\tName:  ndata,",
                "+\t\t\tKey:   kdata,",
                "+\t\t\tRev:   rev,",
                "+\t\t\tLease: lease,",
                "+\t\t},",
                "+\t\tValue: []byte(\"v2\"),",
                "+\t})",
                "+\tif err != nil {",
                "+\t\tcx.t.Fatal(err)",
                "+\t}",
                "+\tif err = cURLPost(cx.epc, cURLReq{",
                "+\t\tendpoint: path.Join(cx.apiPrefix, \"/election/proclaim\"),",
                "+\t\tvalue:    string(pdata),",
                "+\t\texpected: `\"revision\":`,",
                "+\t}); err != nil {",
                "+\t\tcx.t.Fatalf(\"failed post proclaim request (%s) (%v)\", cx.apiPrefix, err)",
                "+\t}",
                "+}",
                "+",
                "+func TestV3CurlProclaimMissiongLeaderKeyNoTLS(t *testing.T) {",
                "+\tfor _, p := range apiPrefix {",
                "+\t\ttestCtl(t, testV3CurlProclaimMissiongLeaderKey, withApiPrefix(p), withCfg(configNoTLS))",
                "+\t}",
                "+}",
                "+",
                "+func testV3CurlProclaimMissiongLeaderKey(cx ctlCtx) {",
                "+\tpdata, err := json.Marshal(&epb.ProclaimRequest{Value: []byte(\"v2\")})",
                "+\tif err != nil {",
                "+\t\tcx.t.Fatal(err)",
                "+\t}",
                "+\tif err != nil {",
                "+\t\tcx.t.Fatal(err)",
                "+\t}",
                "+\tif err = cURLPost(cx.epc, cURLReq{",
                "+\t\tendpoint: path.Join(cx.apiPrefix, \"/election/proclaim\"),",
                "+\t\tvalue:    string(pdata),",
                "+\t\texpected: `{\"error\":\"\\\"leader\\\" field must be provided\",\"code\":2}`,",
                "+\t}); err != nil {",
                "+\t\tcx.t.Fatalf(\"failed post proclaim request (%s) (%v)\", cx.apiPrefix, err)",
                "+\t}",
                "+}",
                "+",
                "+func TestV3CurlResignMissiongLeaderKeyNoTLS(t *testing.T) {",
                "+\tfor _, p := range apiPrefix {",
                "+\t\ttestCtl(t, testV3CurlResignMissiongLeaderKey, withApiPrefix(p), withCfg(configNoTLS))",
                "+\t}",
                "+}",
                "+",
                "+func testV3CurlResignMissiongLeaderKey(cx ctlCtx) {",
                "+\tif err := cURLPost(cx.epc, cURLReq{",
                "+\t\tendpoint: path.Join(cx.apiPrefix, \"/election/resign\"),",
                "+\t\tvalue:    `{}`,",
                "+\t\texpected: `{\"error\":\"\\\"leader\\\" field must be provided\",\"code\":2}`,",
                "+\t}); err != nil {",
                "+\t\tcx.t.Fatalf(\"failed post resign request (%s) (%v)\", cx.apiPrefix, err)",
                "+\t}",
                "+}",
                "+",
                "+// to manually decode; JSON marshals integer fields with",
                "+// string types, so can't unmarshal with epb.CampaignResponse",
                "+type campaignResponse struct {",
                "+\tLeader struct {",
                "+\t\tName  string `json:\"name,omitempty\"`",
                "+\t\tKey   string `json:\"key,omitempty\"`",
                "+\t\tRev   string `json:\"rev,omitempty\"`",
                "+\t\tLease string `json:\"lease,omitempty\"`",
                "+\t} `json:\"leader,omitempty\"`",
                "+}"
            ],
            "changed_files": [
                "e2e/v3_curl_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4e7b9d223dc70f546de741ee17181a93d86fa413"
                ],
                [
                    "no-tag",
                    "3e3468d1fa75ef902c65a641e1462ad0e7bce1bc"
                ]
            ],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f76ef3ce8d11fbef3872c16955d4998d062e8712",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520409782,
            "hunks": 18,
            "message": "e2e: fix missing \"apiPrefix\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/e2e/v3_curl_test.go b/e2e/v3_curl_test.go",
                "index e60ba1766..778860955 100644",
                "--- a/e2e/v3_curl_test.go",
                "+++ b/e2e/v3_curl_test.go",
                "@@ -277,9 +277,17 @@ func testV3CurlAuth(t *testing.T, pathPrefix string) {",
                "-func TestV3CurlCampaignNoTLS(t *testing.T) {",
                "-\tfor _, p := range apiPrefix {",
                "-\t\ttestCtl(t, testV3CurlCampaign, withApiPrefix(p), withCfg(configNoTLS))",
                "+func TestV3CurlCampaignAlpha(t *testing.T) { testV3CurlCampaign(t, \"/v3alpha\") }",
                "+func TestV3CurlCampaignBeta(t *testing.T)  { testV3CurlCampaign(t, \"/v3beta\") }",
                "+func testV3CurlCampaign(t *testing.T, pathPrefix string) {",
                "+\tdefer testutil.AfterTest(t)",
                "+",
                "+\tepc, err := newEtcdProcessCluster(&configNoTLS)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"could not start etcd process cluster (%v)\", err)",
                " \t}",
                "-}",
                "+\tdefer func() {",
                "+\t\tif cerr := epc.Close(); err != nil {",
                "+\t\t\tt.Fatalf(\"error closing etcd processes (%v)\", cerr)",
                "+\t\t}",
                "+\t}()",
                "-func testV3CurlCampaign(cx ctlCtx) {",
                " \tcdata, err := json.Marshal(&epb.CampaignRequest{",
                "@@ -289,6 +297,6 @@ func testV3CurlCampaign(cx ctlCtx) {",
                " \tif err != nil {",
                "-\t\tcx.t.Fatal(err)",
                "+\t\tt.Fatal(err)",
                " \t}",
                "-\tcargs := cURLPrefixArgs(cx.epc, \"POST\", cURLReq{",
                "-\t\tendpoint: path.Join(cx.apiPrefix, \"/election/campaign\"),",
                "+\tcargs := cURLPrefixArgs(epc, \"POST\", cURLReq{",
                "+\t\tendpoint: path.Join(pathPrefix, \"/election/campaign\"),",
                " \t\tvalue:    string(cdata),",
                "@@ -297,6 +305,6 @@ func testV3CurlCampaign(cx ctlCtx) {",
                " \tif err != nil {",
                "-\t\tcx.t.Fatalf(\"failed post campaign request (%s) (%v)\", cx.apiPrefix, err)",
                "+\t\tt.Fatalf(\"failed post campaign request (%s) (%v)\", pathPrefix, err)",
                " \t}",
                " \tif len(lines) != 1 {",
                "-\t\tcx.t.Fatalf(\"len(lines) expected 1, got %+v\", lines)",
                "+\t\tt.Fatalf(\"len(lines) expected 1, got %+v\", lines)",
                " \t}",
                "@@ -305,3 +313,3 @@ func testV3CurlCampaign(cx ctlCtx) {",
                " \tif err = json.Unmarshal([]byte(lines[0]), &cresp); err != nil {",
                "-\t\tcx.t.Fatalf(\"failed to unmarshal campaign response %v\", err)",
                "+\t\tt.Fatalf(\"failed to unmarshal campaign response %v\", err)",
                " \t}",
                "@@ -309,3 +317,3 @@ func testV3CurlCampaign(cx ctlCtx) {",
                " \tif err != nil {",
                "-\t\tcx.t.Fatalf(\"failed to decode leader key %v\", err)",
                "+\t\tt.Fatalf(\"failed to decode leader key %v\", err)",
                " \t}",
                "@@ -313,3 +321,3 @@ func testV3CurlCampaign(cx ctlCtx) {",
                " \tif err != nil {",
                "-\t\tcx.t.Fatalf(\"failed to decode leader key %v\", err)",
                "+\t\tt.Fatalf(\"failed to decode leader key %v\", err)",
                " \t}",
                "@@ -328,6 +336,6 @@ func testV3CurlCampaign(cx ctlCtx) {",
                " \tif err != nil {",
                "-\t\tcx.t.Fatal(err)",
                "+\t\tt.Fatal(err)",
                " \t}",
                "-\tif err = cURLPost(cx.epc, cURLReq{",
                "-\t\tendpoint: path.Join(cx.apiPrefix, \"/election/proclaim\"),",
                "+\tif err = cURLPost(epc, cURLReq{",
                "+\t\tendpoint: path.Join(pathPrefix, \"/election/proclaim\"),",
                " \t\tvalue:    string(pdata),",
                "@@ -335,3 +343,3 @@ func testV3CurlCampaign(cx ctlCtx) {",
                " \t}); err != nil {",
                "-\t\tcx.t.Fatalf(\"failed post proclaim request (%s) (%v)\", cx.apiPrefix, err)",
                "+\t\tt.Fatalf(\"failed post proclaim request (%s) (%v)\", pathPrefix, err)",
                " \t}",
                "@@ -340,5 +348,3 @@ func testV3CurlCampaign(cx ctlCtx) {",
                " func TestV3CurlProclaimMissiongLeaderKeyNoTLS(t *testing.T) {",
                "-\tfor _, p := range apiPrefix {",
                "-\t\ttestCtl(t, testV3CurlProclaimMissiongLeaderKey, withApiPrefix(p), withCfg(configNoTLS))",
                "-\t}",
                "+\ttestCtl(t, testV3CurlProclaimMissiongLeaderKey, withCfg(configNoTLS))",
                " }",
                "@@ -354,3 +360,3 @@ func testV3CurlProclaimMissiongLeaderKey(cx ctlCtx) {",
                " \tif err = cURLPost(cx.epc, cURLReq{",
                "-\t\tendpoint: path.Join(cx.apiPrefix, \"/election/proclaim\"),",
                "+\t\tendpoint: path.Join(\"/v3beta\", \"/election/proclaim\"),",
                " \t\tvalue:    string(pdata),",
                "@@ -358,3 +364,3 @@ func testV3CurlProclaimMissiongLeaderKey(cx ctlCtx) {",
                " \t}); err != nil {",
                "-\t\tcx.t.Fatalf(\"failed post proclaim request (%s) (%v)\", cx.apiPrefix, err)",
                "+\t\tcx.t.Fatalf(\"failed post proclaim request (%s) (%v)\", \"/v3beta\", err)",
                " \t}",
                "@@ -363,5 +369,3 @@ func testV3CurlProclaimMissiongLeaderKey(cx ctlCtx) {",
                " func TestV3CurlResignMissiongLeaderKeyNoTLS(t *testing.T) {",
                "-\tfor _, p := range apiPrefix {",
                "-\t\ttestCtl(t, testV3CurlResignMissiongLeaderKey, withApiPrefix(p), withCfg(configNoTLS))",
                "-\t}",
                "+\ttestCtl(t, testV3CurlResignMissiongLeaderKey, withCfg(configNoTLS))",
                " }",
                "@@ -370,3 +374,3 @@ func testV3CurlResignMissiongLeaderKey(cx ctlCtx) {",
                " \tif err := cURLPost(cx.epc, cURLReq{",
                "-\t\tendpoint: path.Join(cx.apiPrefix, \"/election/resign\"),",
                "+\t\tendpoint: path.Join(\"/v3beta\", \"/election/resign\"),",
                " \t\tvalue:    `{}`,",
                "@@ -374,3 +378,3 @@ func testV3CurlResignMissiongLeaderKey(cx ctlCtx) {",
                " \t}); err != nil {",
                "-\t\tcx.t.Fatalf(\"failed post resign request (%s) (%v)\", cx.apiPrefix, err)",
                "+\t\tcx.t.Fatalf(\"failed post resign request (%s) (%v)\", \"/v3beta\", err)",
                " \t}"
            ],
            "changed_files": [
                "e2e/v3_curl_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3bb8edc6aaa3ac5e054dc763aa730f6305353e82"
                ]
            ],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.2",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "087b9aa3dc9e16f3232b0894ecb637162e78a49b",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1518047854,
            "hunks": 1,
            "message": "mvcc: fix watchable store test for 3.2 cherrypick of #9281",
            "diff": [
                "diff --git a/mvcc/watchable_store_test.go b/mvcc/watchable_store_test.go",
                "index 25639fa8a..cef00d41f 100644",
                "--- a/mvcc/watchable_store_test.go",
                "+++ b/mvcc/watchable_store_test.go",
                "@@ -312,3 +312,3 @@ func TestWatchRestore(t *testing.T) {",
                " \t\t\tw := newStore.NewWatchStream()",
                "-\t\t\tw.Watch(0, testKey, nil, rev-1)",
                "+\t\t\tw.Watch(testKey, nil, rev-1)"
            ],
            "changed_files": [
                "mvcc/watchable_store_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9281": "test failed: TestWatchRestore #9086 Automated cherry pick of #9281 #9297 Bump etcd server patch version to 3.2.16 kubernetes/kubernetes#59836 *: test watch restore in network-partitioned node, clean up fields, logging #9745 mvcc: watcherGroup chooseAll panic (skip proxy tests for now) #9765 mvcc: fix panic by allowing future revision watcher from restore operation #9775 tests: deflake TestV3WatchRestoreSnapshotUnsync #15667"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9281",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "462ba8bb09a92845c26fef5ce1ab181654301615",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520407605,
            "hunks": 5,
            "message": "embed: fix wrong compactor imports Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/embed/config.go b/embed/config.go",
                "index c63d10a51..edbb649b8 100644",
                "--- a/embed/config.go",
                "+++ b/embed/config.go",
                "@@ -28,2 +28,3 @@ import (",
                "+\t\"github.com/coreos/etcd/compactor\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -460,3 +461,3 @@ func (cfg *Config) Validate() error {",
                " \tcase \"\":",
                "-\tcase CompactorModeRevision, CompactorModePeriodic:",
                "+\tcase compactor.ModeRevision, compactor.ModePeriodic:",
                " \tdefault:",
                "diff --git a/embed/etcd.go b/embed/etcd.go",
                "index 0d21639f7..ee3e6dd24 100644",
                "--- a/embed/etcd.go",
                "+++ b/embed/etcd.go",
                "@@ -29,2 +29,3 @@ import (",
                "+\t\"github.com/coreos/etcd/compactor\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -560,5 +561,5 @@ func parseCompactionRetention(mode, retention string) (ret time.Duration, err er",
                " \t\tswitch mode {",
                "-\t\tcase CompactorModeRevision:",
                "+\t\tcase compactor.ModeRevision:",
                " \t\t\tret = time.Duration(int64(h))",
                "-\t\tcase CompactorModePeriodic:",
                "+\t\tcase compactor.ModePeriodic:",
                " \t\t\tret = time.Duration(int64(h)) * time.Hour"
            ],
            "changed_files": [
                "embed/config.go",
                "embed/etcd.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.2",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f0eb772963f048cb91588f853a2037b83b9addde",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519774621,
            "hunks": 8,
            "message": "auth: add \"IsAuthEnabled\" method Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/auth/store.go b/auth/store.go",
                "index 44d2d5359..dd1bd199d 100644",
                "--- a/auth/store.go",
                "+++ b/auth/store.go",
                "@@ -96,2 +96,5 @@ type AuthStore interface {",
                "+\t// IsAuthEnabled returns true if the authentication feature is enabled.",
                "+\tIsAuthEnabled() bool",
                "+",
                " \t// Authenticate does authentication based on given user name and password",
                "@@ -271,3 +274,3 @@ func (as *authStore) Close() error {",
                " func (as *authStore) Authenticate(ctx context.Context, username, password string) (*pb.AuthenticateResponse, error) {",
                "-\tif !as.isAuthEnabled() {",
                "+\tif !as.IsAuthEnabled() {",
                " \t\treturn nil, ErrAuthNotEnabled",
                "@@ -297,3 +300,3 @@ func (as *authStore) Authenticate(ctx context.Context, username, password string",
                " func (as *authStore) CheckPassword(username, password string) (uint64, error) {",
                "-\tif !as.isAuthEnabled() {",
                "+\tif !as.IsAuthEnabled() {",
                " \t\treturn 0, ErrAuthNotEnabled",
                "@@ -734,3 +737,3 @@ func (as *authStore) isOpPermitted(userName string, revision uint64, key, rangeE",
                " \t// TODO(mitake): this function would be costly so we need a caching mechanism",
                "-\tif !as.isAuthEnabled() {",
                "+\tif !as.IsAuthEnabled() {",
                " \t\treturn nil",
                "@@ -782,3 +785,3 @@ func (as *authStore) IsDeleteRangePermitted(authInfo *AuthInfo, key, rangeEnd []",
                " func (as *authStore) IsAdminPermitted(authInfo *AuthInfo) error {",
                "-\tif !as.isAuthEnabled() {",
                "+\tif !as.IsAuthEnabled() {",
                " \t\treturn nil",
                "@@ -894,3 +897,3 @@ func delRole(tx backend.BatchTx, rolename string) {",
                "-func (as *authStore) isAuthEnabled() bool {",
                "+func (as *authStore) IsAuthEnabled() bool {",
                " \tas.enabledMu.RLock()",
                "@@ -1066,3 +1069,3 @@ func NewTokenProvider(tokenOpts string, indexWaiter func(uint64) <-chan struct{}",
                " func (as *authStore) WithRoot(ctx context.Context) context.Context {",
                "-\tif !as.isAuthEnabled() {",
                "+\tif !as.IsAuthEnabled() {",
                " \t\treturn ctx",
                "diff --git a/auth/store_test.go b/auth/store_test.go",
                "index b4eaa5e74..2d4f3bff0 100644",
                "--- a/auth/store_test.go",
                "+++ b/auth/store_test.go",
                "@@ -590,3 +590,3 @@ func TestRecoverFromSnapshot(t *testing.T) {",
                "-\tif !as2.isAuthEnabled() {",
                "+\tif !as2.IsAuthEnabled() {",
                " \t\tt.Fatal(\"recovering authStore from existing backend failed\")"
            ],
            "changed_files": [
                "auth/store.go",
                "auth/store_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "808450129b3d002924a565737e8163316d983421",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520517894,
            "hunks": 18,
            "message": "Documentation/op-guide: add job=\"etcd\" label matcher to Grafana dashboard Prometheus that scrapes etcd might also scrape other things, so we should specifically ask for etcd metrics, especially when dealing with generic metrics like `process_resident_memory_bytes`.",
            "diff": [
                "diff --git a/Documentation/op-guide/grafana.json b/Documentation/op-guide/grafana.json",
                "index 4b7a432ea..e56626f1d 100644",
                "--- a/Documentation/op-guide/grafana.json",
                "+++ b/Documentation/op-guide/grafana.json",
                "@@ -68,3 +68,3 @@",
                "                     \"targets\": [{",
                "-                        \"expr\": \"sum(etcd_server_has_leader)\",",
                "+                        \"expr\": \"sum(etcd_server_has_leader{job=\\\"etcd\\\"})\",",
                "                         \"intervalFactor\": 2,",
                "@@ -118,3 +118,3 @@",
                "                         {",
                "-                            \"expr\": \"sum(rate(grpc_server_started_total{grpc_type=\\\"unary\\\"}[5m]))\",",
                "+                            \"expr\": \"sum(rate(grpc_server_started_total{job=\\\"etcd\\\",grpc_type=\\\"unary\\\"}[5m]))\",",
                "                             \"format\": \"time_series\",",
                "@@ -127,3 +127,3 @@",
                "                         {",
                "-                            \"expr\": \"sum(rate(grpc_server_handled_total{grpc_type=\\\"unary\\\",grpc_code!=\\\"OK\\\"}[5m]))\",",
                "+                            \"expr\": \"sum(rate(grpc_server_handled_total{job=\\\"etcd\\\",grpc_type=\\\"unary\\\",grpc_code!=\\\"OK\\\"}[5m]))\",",
                "                             \"format\": \"time_series\",",
                "@@ -202,3 +202,3 @@",
                "                     \"targets\": [{",
                "-                            \"expr\": \"sum(grpc_server_started_total{grpc_service=\\\"etcdserverpb.Watch\\\",grpc_type=\\\"bidi_stream\\\"}) - sum(grpc_server_handled_total{grpc_service=\\\"etcdserverpb.Watch\\\",grpc_type=\\\"bidi_stream\\\"})\",",
                "+                            \"expr\": \"sum(grpc_server_started_total{job=\\\"etcd\\\",grpc_service=\\\"etcdserverpb.Watch\\\",grpc_type=\\\"bidi_stream\\\"}) - sum(grpc_server_handled_total{job=\\\"etcd\\\",grpc_service=\\\"etcdserverpb.Watch\\\",grpc_type=\\\"bidi_stream\\\"})\",",
                "                             \"intervalFactor\": 2,",
                "@@ -210,3 +210,3 @@",
                "                         {",
                "-                            \"expr\": \"sum(grpc_server_started_total{grpc_service=\\\"etcdserverpb.Lease\\\",grpc_type=\\\"bidi_stream\\\"}) - sum(grpc_server_handled_total{grpc_service=\\\"etcdserverpb.Lease\\\",grpc_type=\\\"bidi_stream\\\"})\",",
                "+                            \"expr\": \"sum(grpc_server_started_total{job=\\\"etcd\\\",grpc_service=\\\"etcdserverpb.Lease\\\",grpc_type=\\\"bidi_stream\\\"}) - sum(grpc_server_handled_total{job=\\\"etcd\\\",grpc_service=\\\"etcdserverpb.Lease\\\",grpc_type=\\\"bidi_stream\\\"})\",",
                "                             \"intervalFactor\": 2,",
                "@@ -293,3 +293,3 @@",
                "                     \"targets\": [{",
                "-                        \"expr\": \"etcd_debugging_mvcc_db_total_size_in_bytes\",",
                "+                        \"expr\": \"etcd_debugging_mvcc_db_total_size_in_bytes{job=\\\"etcd\\\"}\",",
                "                         \"hide\": false,",
                "@@ -366,3 +366,3 @@",
                "                     \"targets\": [{",
                "-                            \"expr\": \"histogram_quantile(0.99, sum(rate(etcd_disk_wal_fsync_duration_seconds_bucket[5m])) by (instance, le))\",",
                "+                            \"expr\": \"histogram_quantile(0.99, sum(rate(etcd_disk_wal_fsync_duration_seconds_bucket{job=\\\"etcd\\\"}[5m])) by (instance, le))\",",
                "                             \"hide\": false,",
                "@@ -375,3 +375,3 @@",
                "                         {",
                "-                            \"expr\": \"histogram_quantile(0.99, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket[5m])) by (instance, le))\",",
                "+                            \"expr\": \"histogram_quantile(0.99, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket{job=\\\"etcd\\\"}[5m])) by (instance, le))\",",
                "                             \"intervalFactor\": 2,",
                "@@ -447,3 +447,3 @@",
                "                     \"targets\": [{",
                "-                        \"expr\": \"process_resident_memory_bytes\",",
                "+                        \"expr\": \"process_resident_memory_bytes{job=\\\"etcd\\\"}\",",
                "                         \"intervalFactor\": 2,",
                "@@ -527,3 +527,3 @@",
                "                     \"targets\": [{",
                "-                        \"expr\": \"rate(etcd_network_client_grpc_received_bytes_total[5m])\",",
                "+                        \"expr\": \"rate(etcd_network_client_grpc_received_bytes_total{job=\\\"etcd\\\"}[5m])\",",
                "                         \"intervalFactor\": 2,",
                "@@ -600,3 +600,3 @@",
                "                     \"targets\": [{",
                "-                        \"expr\": \"rate(etcd_network_client_grpc_sent_bytes_total[5m])\",",
                "+                        \"expr\": \"rate(etcd_network_client_grpc_sent_bytes_total{job=\\\"etcd\\\"}[5m])\",",
                "                         \"intervalFactor\": 2,",
                "@@ -673,3 +673,3 @@",
                "                     \"targets\": [{",
                "-                        \"expr\": \"sum(rate(etcd_network_peer_received_bytes_total[5m])) by (instance)\",",
                "+                        \"expr\": \"sum(rate(etcd_network_peer_received_bytes_total{job=\\\"etcd\\\"}[5m])) by (instance)\",",
                "                         \"intervalFactor\": 2,",
                "@@ -747,3 +747,3 @@",
                "                     \"targets\": [{",
                "-                        \"expr\": \"sum(rate(etcd_network_peer_sent_bytes_total[5m])) by (instance)\",",
                "+                        \"expr\": \"sum(rate(etcd_network_peer_sent_bytes_total{job=\\\"etcd\\\"}[5m])) by (instance)\",",
                "                         \"hide\": false,",
                "@@ -827,3 +827,3 @@",
                "                     \"targets\": [{",
                "-                            \"expr\": \"sum(rate(etcd_server_proposals_failed_total[5m]))\",",
                "+                            \"expr\": \"sum(rate(etcd_server_proposals_failed_total{job=\\\"etcd\\\"}[5m]))\",",
                "                             \"intervalFactor\": 2,",
                "@@ -835,3 +835,3 @@",
                "                         {",
                "-                            \"expr\": \"sum(etcd_server_proposals_pending)\",",
                "+                            \"expr\": \"sum(etcd_server_proposals_pending{job=\\\"etcd\\\"})\",",
                "                             \"intervalFactor\": 2,",
                "@@ -843,3 +843,3 @@",
                "                         {",
                "-                            \"expr\": \"sum(rate(etcd_server_proposals_committed_total[5m]))\",",
                "+                            \"expr\": \"sum(rate(etcd_server_proposals_committed_total{job=\\\"etcd\\\"}[5m]))\",",
                "                             \"intervalFactor\": 2,",
                "@@ -851,3 +851,3 @@",
                "                         {",
                "-                            \"expr\": \"sum(rate(etcd_server_proposals_applied_total[5m]))\",",
                "+                            \"expr\": \"sum(rate(etcd_server_proposals_applied_total{job=\\\"etcd\\\"}[5m]))\",",
                "                             \"intervalFactor\": 2,",
                "@@ -927,3 +927,3 @@",
                "                     \"targets\": [{",
                "-                        \"expr\": \"changes(etcd_server_leader_changes_seen_total[1d])\",",
                "+                        \"expr\": \"changes(etcd_server_leader_changes_seen_total{job=\\\"etcd\\\"}[1d])\",",
                "                         \"intervalFactor\": 2,"
            ],
            "changed_files": [
                "Documentation/op-guide/grafana.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ab339786463fc970fac12ba270869120c787b170",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519668234,
            "hunks": 10,
            "message": "etcd-tester: fix spell check warnings Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/tools/functional-tester/etcd-tester/main.go b/tools/functional-tester/etcd-tester/main.go",
                "index 5f5853206..82adb362f 100644",
                "--- a/tools/functional-tester/etcd-tester/main.go",
                "+++ b/tools/functional-tester/etcd-tester/main.go",
                "@@ -58,3 +58,3 @@ func main() {",
                " \tconsistencyCheck := flag.Bool(\"consistency-check\", true, \"true to check consistency (revision, hash)\")",
                "-\tstresserType := flag.String(\"stresser\", \"keys,lease\", \"comma separated list of stressers (keys, lease, v2keys, nop, election-runner, watch-runner, lock-racer-runner, lease-runner).\")",
                "+\tstresserType := flag.String(\"stresser\", \"keys,lease\", \"comma separated list of stressing clients (keys, lease, v2keys, nop, election-runner, watch-runner, lock-racer-runner, lease-runner).\")",
                " \tetcdRunnerPath := flag.String(\"etcd-runner\", \"\", \"specify a path of etcd runner binary\")",
                "diff --git a/tools/functional-tester/etcd-tester/stresser.go b/tools/functional-tester/etcd-tester/stresser.go",
                "index bf0d88214..9c3bddb7c 100644",
                "--- a/tools/functional-tester/etcd-tester/stresser.go",
                "+++ b/tools/functional-tester/etcd-tester/stresser.go",
                "@@ -53,3 +53,3 @@ func (s *nopStresser) Checker() Checker { return nil }",
                " // compositeStresser implements a Stresser that runs a slice of",
                "-// stressers concurrently.",
                "+// stressing clients concurrently.",
                " type compositeStresser struct {",
                "@@ -143,3 +143,3 @@ func NewStresser(s string, sc *stressConfig, m *member) Stresser {",
                " \tcase \"keys\":",
                "-\t\t// TODO: Too intensive stressers can panic etcd member with",
                "+\t\t// TODO: Too intensive stressing clients can panic etcd member with",
                " \t\t// 'out of memory' error. Put rate limits in server side.",
                "diff --git a/tools/functional-tester/etcd-tester/tester.go b/tools/functional-tester/etcd-tester/tester.go",
                "index 6a0c72af5..6c910ed83 100644",
                "--- a/tools/functional-tester/etcd-tester/tester.go",
                "+++ b/tools/functional-tester/etcd-tester/tester.go",
                "@@ -247,5 +247,5 @@ func (tt *tester) cleanup() error {",
                " func (tt *tester) pauseStresser() {",
                "-\tplog.Infof(\"%s pausing the stressers...\", tt.logPrefix())",
                "+\tplog.Infof(\"%s pausing the stressing clients...\", tt.logPrefix())",
                " \ttt.stresser.Pause()",
                "-\tplog.Infof(\"%s paused stressers\", tt.logPrefix())",
                "+\tplog.Infof(\"%s paused stressing clients\", tt.logPrefix())",
                " }",
                "@@ -253,5 +253,5 @@ func (tt *tester) pauseStresser() {",
                " func (tt *tester) startStresser() (err error) {",
                "-\tplog.Infof(\"%s starting the stressers...\", tt.logPrefix())",
                "+\tplog.Infof(\"%s starting the stressing clients...\", tt.logPrefix())",
                " \terr = tt.stresser.Stress()",
                "-\tplog.Infof(\"%s started stressers\", tt.logPrefix())",
                "+\tplog.Infof(\"%s started stressing clients\", tt.logPrefix())",
                " \treturn err",
                "@@ -260,5 +260,5 @@ func (tt *tester) startStresser() (err error) {",
                " func (tt *tester) closeStresser() {",
                "-\tplog.Infof(\"%s closing the stressers...\", tt.logPrefix())",
                "+\tplog.Infof(\"%s closing the stressing clients...\", tt.logPrefix())",
                " \ttt.stresser.Close()",
                "-\tplog.Infof(\"%s closed stressers\", tt.logPrefix())",
                "+\tplog.Infof(\"%s closed stressing clients\", tt.logPrefix())",
                " }",
                "@@ -266,3 +266,3 @@ func (tt *tester) closeStresser() {",
                " func (tt *tester) resetStressCheck() error {",
                "-\tplog.Infof(\"%s resetting stressers and checkers...\", tt.logPrefix())",
                "+\tplog.Infof(\"%s resetting stressing clients and checkers...\", tt.logPrefix())",
                " \tcs := &compositeStresser{}"
            ],
            "changed_files": [
                "tools/functional-tester/etcd-tester/main.go",
                "tools/functional-tester/etcd-tester/stresser.go",
                "tools/functional-tester/etcd-tester/tester.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b6373f16255f88314a29932c58b0c143e4eeae77",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1517879304,
            "hunks": 4,
            "message": "mvcc: restore unsynced watchers In case syncWatchersLoop() starts before Restore() is called, watchers already added by that moment are moved to s.synced by the loop. However, there is a broken logic that moves watchers from s.synced to s.uncyned without setting keyWatchers of the watcherGroup. Eventually syncWatchers() fails to pickup those watchers from s.unsynced and no events are sent to the watchers, because newWatcherBatch() called in the function uses wg.watcherSetByKey() internally that requires a proper keyWatchers value.",
            "diff": [
                "diff --git a/mvcc/watchable_store.go b/mvcc/watchable_store.go",
                "index 028e05b9a..7be9641d4 100644",
                "--- a/mvcc/watchable_store.go",
                "+++ b/mvcc/watchable_store.go",
                "@@ -269,3 +269,3 @@ func (s *watchableStore) Restore(b backend.Backend) error {",
                " \tfor wa := range s.synced.watchers {",
                "-\t\ts.unsynced.watchers.add(wa)",
                "+\t\ts.unsynced.add(wa)",
                " \t}",
                "diff --git a/mvcc/watchable_store_test.go b/mvcc/watchable_store_test.go",
                "index 42d2ae571..25639fa8a 100644",
                "--- a/mvcc/watchable_store_test.go",
                "+++ b/mvcc/watchable_store_test.go",
                "@@ -297,32 +297,41 @@ func TestWatchFutureRev(t *testing.T) {",
                " func TestWatchRestore(t *testing.T) {",
                "-\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "-\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "-\tdefer cleanup(s, b, tmpPath)",
                "-",
                "-\ttestKey := []byte(\"foo\")",
                "-\ttestValue := []byte(\"bar\")",
                "-\trev := s.Put(testKey, testValue, lease.NoLease)",
                "-",
                "-\tnewBackend, newPath := backend.NewDefaultTmpBackend()",
                "-\tnewStore := newWatchableStore(newBackend, &lease.FakeLessor{}, nil)",
                "-\tdefer cleanup(newStore, newBackend, newPath)",
                "-",
                "-\tw := newStore.NewWatchStream()",
                "-\tw.Watch(testKey, nil, rev-1)",
                "-",
                "-\tnewStore.Restore(b)",
                "-\tselect {",
                "-\tcase resp := <-w.Chan():",
                "-\t\tif resp.Revision != rev {",
                "-\t\t\tt.Fatalf(\"rev = %d, want %d\", resp.Revision, rev)",
                "-\t\t}",
                "-\t\tif len(resp.Events) != 1 {",
                "-\t\t\tt.Fatalf(\"failed to get events from the response\")",
                "-\t\t}",
                "-\t\tif resp.Events[0].Kv.ModRevision != rev {",
                "-\t\t\tt.Fatalf(\"kv.rev = %d, want %d\", resp.Events[0].Kv.ModRevision, rev)",
                "+\ttest := func(delay time.Duration) func(t *testing.T) {",
                "+\t\treturn func(t *testing.T) {",
                "+\t\t\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\t\t\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+\t\t\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\t\t\ttestKey := []byte(\"foo\")",
                "+\t\t\ttestValue := []byte(\"bar\")",
                "+\t\t\trev := s.Put(testKey, testValue, lease.NoLease)",
                "+",
                "+\t\t\tnewBackend, newPath := backend.NewDefaultTmpBackend()",
                "+\t\t\tnewStore := newWatchableStore(newBackend, &lease.FakeLessor{}, nil)",
                "+\t\t\tdefer cleanup(newStore, newBackend, newPath)",
                "+",
                "+\t\t\tw := newStore.NewWatchStream()",
                "+\t\t\tw.Watch(0, testKey, nil, rev-1)",
                "+",
                "+\t\t\ttime.Sleep(delay)",
                "+",
                "+\t\t\tnewStore.Restore(b)",
                "+\t\t\tselect {",
                "+\t\t\tcase resp := <-w.Chan():",
                "+\t\t\t\tif resp.Revision != rev {",
                "+\t\t\t\t\tt.Fatalf(\"rev = %d, want %d\", resp.Revision, rev)",
                "+\t\t\t\t}",
                "+\t\t\t\tif len(resp.Events) != 1 {",
                "+\t\t\t\t\tt.Fatalf(\"failed to get events from the response\")",
                "+\t\t\t\t}",
                "+\t\t\t\tif resp.Events[0].Kv.ModRevision != rev {",
                "+\t\t\t\t\tt.Fatalf(\"kv.rev = %d, want %d\", resp.Events[0].Kv.ModRevision, rev)",
                "+\t\t\t\t}",
                "+\t\t\tcase <-time.After(time.Second):",
                "+\t\t\t\tt.Fatal(\"failed to receive event in 1 second.\")",
                "+\t\t\t}",
                " \t\t}",
                "-\tcase <-time.After(time.Second):",
                "-\t\tt.Fatal(\"failed to receive event in 1 second.\")",
                " \t}",
                "+",
                "+\tt.Run(\"Normal\", test(0))",
                "+\tt.Run(\"RunSyncWatchLoopBeforeRestore\", test(time.Millisecond*120)) // longer than default waitDuration",
                " }"
            ],
            "changed_files": [
                "mvcc/watchable_store.go",
                "mvcc/watchable_store_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6f848b3fd38f09f880aff70ff509894b17dc09b8",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520547384,
            "hunks": 1,
            "message": "version: bump up to 3.2.17+git",
            "diff": [
                "diff --git a/version/version.go b/version/version.go",
                "index ac56f632a..11c85a33b 100644",
                "--- a/version/version.go",
                "+++ b/version/version.go",
                "@@ -28,3 +28,3 @@ var (",
                " \tMinClusterVersion = \"3.0.0\"",
                "-\tVersion           = \"3.2.17\"",
                "+\tVersion           = \"3.2.17+git\"",
                " \tAPIVersion        = \"unknown\""
            ],
            "changed_files": [
                "version/version.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "418bb9296338ccc2ea7419fe94a9094fddd65457",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519853598,
            "hunks": 6,
            "message": "pkg/httputil: add \"GetHostname\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/pkg/httputil/httputil.go b/pkg/httputil/httputil.go",
                "index 09f44e7c7..3bf58a3a1 100644",
                "--- a/pkg/httputil/httputil.go",
                "+++ b/pkg/httputil/httputil.go",
                "@@ -1 +1,15 @@",
                "+// Copyright 2018 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                " // Copyright 2015 The Go Authors. All rights reserved.",
                "@@ -4,4 +18,2 @@",
                "-// borrowed from golang/net/context/ctxhttp/cancelreq.go",
                "-",
                " // Package httputil provides HTTP utility functions.",
                "@@ -12,2 +24,3 @@ import (",
                " \t\"io/ioutil\"",
                "+\t\"net\"",
                " \t\"net/http\"",
                "@@ -18,2 +31,3 @@ import (",
                " // therefore available for reuse.",
                "+// Borrowed from golang/net/context/ctxhttp/cancelreq.go.",
                " func GracefulClose(resp *http.Response) {",
                "@@ -22 +36,15 @@ func GracefulClose(resp *http.Response) {",
                " }",
                "+",
                "+// GetHostname returns the hostname from request Host field.",
                "+// It returns empty string, if Host field contains invalid",
                "+// value (e.g. \"localhost:::\" with too many colons).",
                "+func GetHostname(req *http.Request) string {",
                "+\tif req == nil {",
                "+\t\treturn \"\"",
                "+\t}",
                "+\th, _, err := net.SplitHostPort(req.Host)",
                "+\tif err != nil {",
                "+\t\treturn req.Host",
                "+\t}",
                "+\treturn h",
                "+}",
                "diff --git a/pkg/httputil/httputil_test.go b/pkg/httputil/httputil_test.go",
                "new file mode 100644",
                "index 000000000..f14d597ed",
                "--- /dev/null",
                "+++ b/pkg/httputil/httputil_test.go",
                "@@ -0,0 +1,50 @@",
                "+// Copyright 2018 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package httputil",
                "+",
                "+import (",
                "+\t\"net/http\"",
                "+\t\"testing\"",
                "+)",
                "+",
                "+func TestGetHostname(t *testing.T) {",
                "+\ttt := []struct {",
                "+\t\treq  *http.Request",
                "+\t\thost string",
                "+\t}{",
                "+\t\t{&http.Request{Host: \"localhost\"}, \"localhost\"},",
                "+\t\t{&http.Request{Host: \"localhost:2379\"}, \"localhost\"},",
                "+\t\t{&http.Request{Host: \"localhost.\"}, \"localhost.\"},",
                "+\t\t{&http.Request{Host: \"localhost.:2379\"}, \"localhost.\"},",
                "+\t\t{&http.Request{Host: \"127.0.0.1\"}, \"127.0.0.1\"},",
                "+\t\t{&http.Request{Host: \"127.0.0.1:2379\"}, \"127.0.0.1\"},",
                "+",
                "+\t\t{&http.Request{Host: \"localhos\"}, \"localhos\"},",
                "+\t\t{&http.Request{Host: \"localhos:2379\"}, \"localhos\"},",
                "+\t\t{&http.Request{Host: \"localhos.\"}, \"localhos.\"},",
                "+\t\t{&http.Request{Host: \"localhos.:2379\"}, \"localhos.\"},",
                "+\t\t{&http.Request{Host: \"1.2.3.4\"}, \"1.2.3.4\"},",
                "+\t\t{&http.Request{Host: \"1.2.3.4:2379\"}, \"1.2.3.4\"},",
                "+",
                "+\t\t// too many colons in address",
                "+\t\t{&http.Request{Host: \"localhost:::::\"}, \"localhost:::::\"},",
                "+\t}",
                "+\tfor i := range tt {",
                "+\t\thv := GetHostname(tt[i].req)",
                "+\t\tif hv != tt[i].host {",
                "+\t\t\tt.Errorf(\"#%d: %q expected host %q, got '%v'\", i, tt[i].req.Host, tt[i].host, hv)",
                "+\t\t}",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "pkg/httputil/httputil.go",
                "pkg/httputil/httputil_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c9d46ab3799b7f2174268e75f72d01e6d6aac953",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520542629,
            "hunks": 1,
            "message": "version: 3.3.2 Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/version/version.go b/version/version.go",
                "index 3a87cc9d0..e42bf546b 100644",
                "--- a/version/version.go",
                "+++ b/version/version.go",
                "@@ -28,3 +28,3 @@ var (",
                " \tMinClusterVersion = \"3.0.0\"",
                "-\tVersion           = \"3.3.1+git\"",
                "+\tVersion           = \"3.3.2\"",
                " \tAPIVersion        = \"unknown\""
            ],
            "changed_files": [
                "version/version.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.2",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a4827447be7ad84904265d7e20958cf004a97287",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519759717,
            "hunks": 8,
            "message": "travis: update Go version",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 00f2b8102..0e5541b1a 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -8,3 +8,3 @@ services: docker",
                " go:",
                "-- 1.8.5",
                "+- 1.8.7",
                " - tip",
                "@@ -32,3 +32,3 @@ matrix:",
                "   exclude:",
                "-  - go: 1.8.5",
                "+  - go: 1.8.7",
                "     env: TARGET=amd64-go-tip",
                "@@ -50,3 +50,3 @@ matrix:",
                " before_install:",
                "-- docker pull gcr.io/etcd-development/etcd-test:go1.8.5",
                "+- docker pull gcr.io/etcd-development/etcd-test:go1.8.7",
                "@@ -60,3 +60,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.5 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "           /bin/bash -c \"GOARCH=amd64 ./test\"",
                "@@ -68,3 +68,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.5 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "           /bin/bash -c \"GO_BUILD_FLAGS='-a -v' GOOS=darwin GOARCH=amd64 ./build\"",
                "@@ -73,3 +73,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.5 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "           /bin/bash -c \"GO_BUILD_FLAGS='-a -v' GOOS=windows GOARCH=amd64 ./build\"",
                "@@ -78,3 +78,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.5 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "           /bin/bash -c \"GOARCH=386 PASSES='build unit' ./test\"",
                "@@ -84,3 +84,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.5 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "           /bin/bash -c \"GO_BUILD_FLAGS='-a -v' GOARCH='${TARGET}' ./build\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3641af83e72d6d28a17b29814421c332d0021276",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519759798,
            "hunks": 1,
            "message": "semaphore: release test version",
            "diff": [
                "diff --git a/.semaphore.sh b/.semaphore.sh",
                "index 51d66e884..d2a685748 100755",
                "--- a/.semaphore.sh",
                "+++ b/.semaphore.sh",
                "@@ -4,3 +4,3 @@ TEST_SUFFIX=$(date +%s | base64 | head -c 15)",
                "-TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.3.0\"",
                "+TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.3.1\"",
                " if [ \"$TEST_ARCH\" == \"386\" ]; then"
            ],
            "changed_files": [
                ".semaphore.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.2",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b6526b9d42e7a7d5b65c7d8f25f7c02a2750b8d7",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520460677,
            "hunks": 2,
            "message": "hack/scripts-dev: add more docker commands Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/Makefile b/hack/scripts-dev/Makefile",
                "index 20a7086f6..c9450a4c9 100644",
                "--- a/hack/scripts-dev/Makefile",
                "+++ b/hack/scripts-dev/Makefile",
                "@@ -8,2 +8,4 @@",
                " #   make clean-docker -f ./hack/scripts-dev/Makefile",
                "+#   make restart-docker -f ./hack/scripts-dev/Makefile",
                "+#   make delete-docker-images -f ./hack/scripts-dev/Makefile",
                "@@ -32,2 +34,9 @@ clean-docker:",
                "+restart-docker:",
                "+\tservice docker restart",
                "+",
                "+delete-docker-images:",
                "+\tdocker rm --force $(docker ps -a -q) || true",
                "+\tdocker rmi --force $(docker images -q) || true",
                "+"
            ],
            "changed_files": [
                "hack/scripts-dev/Makefile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2dd08a08aef4c482968908b6465796a9516607fc",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1518823652,
            "hunks": 1,
            "message": "semaphore.sh: use Go 1.10 Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/.semaphore.sh b/.semaphore.sh",
                "index 51d66e884..f74db332b 100755",
                "--- a/.semaphore.sh",
                "+++ b/.semaphore.sh",
                "@@ -12,3 +12,3 @@ docker run \\",
                " \t--volume=`pwd`:/go/src/github.com/coreos/etcd \\",
                "-\tgcr.io/etcd-development/etcd-test:go1.9.4 \\",
                "+\tgcr.io/etcd-development/etcd-test:go1.10 \\",
                " \t/bin/bash -c \"${TEST_OPTS} ./test 2>&1 | tee test-${TEST_SUFFIX}.log\""
            ],
            "changed_files": [
                ".semaphore.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "78918848bd61d22faec0f5612b27ca50b78121b3",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519363163,
            "hunks": 5,
            "message": "etcdserver: support Raft Pre-Vote Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/config.go b/etcdserver/config.go",
                "index 4626ab85d..7a362aa13 100644",
                "--- a/etcdserver/config.go",
                "+++ b/etcdserver/config.go",
                "@@ -78,2 +78,5 @@ type ServerConfig struct {",
                "+\t// PreVote is true to enable Raft Pre-Vote.",
                "+\tPreVote bool",
                "+",
                " \tDebug bool",
                "diff --git a/etcdserver/raft.go b/etcdserver/raft.go",
                "index 9695da80e..1fa085905 100644",
                "--- a/etcdserver/raft.go",
                "+++ b/etcdserver/raft.go",
                "@@ -413,2 +413,3 @@ func startNode(cfg ServerConfig, cl *membership.RaftCluster, ids []types.ID) (id",
                " \t\tCheckQuorum:     true,",
                "+\t\tPreVote:         cfg.PreVote,",
                " \t}",
                "@@ -447,2 +448,3 @@ func restartNode(cfg ServerConfig, snapshot *raftpb.Snapshot) (types.ID, *member",
                " \t\tCheckQuorum:     true,",
                "+\t\tPreVote:         cfg.PreVote,",
                " \t}",
                "@@ -503,2 +505,3 @@ func restartAsStandaloneNode(cfg ServerConfig, snapshot *raftpb.Snapshot) (types",
                " \t\tCheckQuorum:     true,",
                "+\t\tPreVote:         cfg.PreVote,",
                " \t}",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 5bd489c12..aa2321752 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -260,2 +260,8 @@ type EtcdServer struct {",
                " func NewServer(cfg ServerConfig) (srv *EtcdServer, err error) {",
                "+\tif cfg.PreVote {",
                "+\t\tplog.Info(\"Raft Pre-Vote is enabled\")",
                "+\t} else {",
                "+\t\tplog.Info(\"Raft Pre-Vote is disabled\")",
                "+\t}",
                "+",
                " \tst := v2store.New(StoreClusterPrefix, StoreKeysPrefix)"
            ],
            "changed_files": [
                "etcdserver/config.go",
                "etcdserver/raft.go",
                "etcdserver/server.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c0910085f59eaa089eeda93e6d2fed0c6283bf97",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519237254,
            "hunks": 2,
            "message": "ctlv2: fix govet -shadow warning Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdctl/ctlv2/command/backup_command.go b/etcdctl/ctlv2/command/backup_command.go",
                "index 0a8714cd2..6a9ecc690 100644",
                "--- a/etcdctl/ctlv2/command/backup_command.go",
                "+++ b/etcdctl/ctlv2/command/backup_command.go",
                "@@ -191,3 +191,3 @@ func saveDB(destDB, srcDB string, idx uint64, v3 bool) {",
                " \t\tgo func() {",
                "-\t\t\tsrc, err := bolt.Open(srcDB, 0444, &bolt.Options{ReadOnly: true})",
                "+\t\t\tdb, err := bolt.Open(srcDB, 0444, &bolt.Options{ReadOnly: true})",
                " \t\t\tif err != nil {",
                "@@ -195,3 +195,3 @@ func saveDB(destDB, srcDB string, idx uint64, v3 bool) {",
                " \t\t\t}",
                "-\t\t\tch <- src",
                "+\t\t\tch <- db",
                " \t\t}()"
            ],
            "changed_files": [
                "etcdctl/ctlv2/command/backup_command.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "00d14cfd036bbc4e4c5d3a46c6e25c1abc2cefb1",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520526244,
            "hunks": 6,
            "message": "test: fix etcd-tester flags Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/test b/test",
                "index 8249c989b..3a46b2a43 100755",
                "--- a/test",
                "+++ b/test",
                "@@ -84,8 +84,7 @@ function integration_pass {",
                " function functional_pass {",
                "-  \t# Clean up any data and logs from previous runs",
                "+        # Clean up any data and logs from previous runs",
                "   \trm -rf ./agent-*",
                "-",
                " \tfor a in 1 2 3; do",
                " \t\tmkdir -p ./agent-$a",
                "-\t\t./bin/etcd-agent -etcd-path ./bin/etcd -etcd-log-dir \"./agent-$a\" -port \":${a}9027\" &",
                "+\t\t./bin/etcd-agent -etcd-path ./bin/etcd -etcd-log-dir \"./agent-$a\" -port \":${a}9027\" -use-root=false &",
                " \t\tpid=\"$!\"",
                "@@ -104,11 +103,6 @@ function functional_pass {",
                " \t\t-agent-endpoints \"127.0.0.1:19027,127.0.0.1:29027,127.0.0.1:39027\" \\",
                "-\t\t-client-ports 1379,2379,3379 \\",
                "-\t\t-advertise-client-ports 13790,23790,33790 \\",
                "-\t\t-peer-ports 1380,2380,3380 \\",
                "-\t\t-advertise-peer-ports 13800,23800,33800 \\",
                "+\t\t-client-ports 12379,22379,32379 \\",
                "+\t\t-peer-ports 12380,22380,32380 \\",
                " \t\t-limit 1 \\",
                " \t\t-schedule-cases \"0 1 2 3 4 5 6 7 8 9\" \\",
                "-\t\t-stress-qps 1000 \\",
                "-\t\t-stress-key-txn-count 100 \\",
                "-\t\t-stress-key-txn-ops 10 \\",
                " \t\t-exit-on-failure && echo \"'etcd-tester' succeeded\"",
                "@@ -118,5 +112,4 @@ function functional_pass {",
                " \techo \"Waiting for processes to exit\"",
                "-\tagent_pids=($agent_pids)",
                "-\tkill -s TERM \"${agent_pids[@]}\"",
                "-\tfor a in \"${agent_pids[@]}\"; do wait \"$a\" || true; done",
                "+\tkill -s TERM ${agent_pids}",
                "+\tfor a in ${agent_pids}; do wait $a || true; done"
            ],
            "changed_files": [
                "test"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "af4e092e324a8a3e88c42649b7158816c7fbdf43",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1518823639,
            "hunks": 2,
            "message": "travis: use Go 1.10 Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 37f707a63..8e2bd416c 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -8,3 +8,3 @@ services: docker",
                " go:",
                "-- 1.9.4",
                "+- \"1.10\"",
                " - tip",
                "@@ -32,3 +32,3 @@ matrix:",
                "   exclude:",
                "-  - go: 1.9.4",
                "+  - go: \"1.10\"",
                "     env: TARGET=amd64-go-tip"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8b6ee6aea93ac13cfa0c3bc2c2dd0b11a65597bd",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520458143,
            "hunks": 4,
            "message": "hack/scripts: update comments on \"build-docker-release-master\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/Makefile b/hack/scripts-dev/Makefile",
                "index 2df1c35f4..20a7086f6 100644",
                "--- a/hack/scripts-dev/Makefile",
                "+++ b/hack/scripts-dev/Makefile",
                "@@ -5,4 +5,5 @@",
                " # Example:",
                "-#   make clean -f ./hack/scripts-dev/Makefile",
                " #   make build -f ./hack/scripts-dev/Makefile",
                "+#   make clean -f ./hack/scripts-dev/Makefile",
                "+#   make clean-docker -f ./hack/scripts-dev/Makefile",
                "@@ -161,7 +162,8 @@ docker-test-coverage:",
                " # Example:",
                "-#   ETCD_VERSION=v3.3.0-test.0 make build-docker-release-master -f ./hack/scripts-dev/Makefile",
                "-#   ETCD_VERSION=v3.3.0-test.0 make push-docker-release-master -f ./hack/scripts-dev/Makefile",
                "+#   make compile-with-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   ETCD_VERSION=v3-test make build-docker-release-master -f ./hack/scripts-dev/Makefile",
                "+#   ETCD_VERSION=v3-test make push-docker-release-master -f ./hack/scripts-dev/Makefile",
                " #   gsutil -m acl ch -u allUsers:R -r gs://artifacts.etcd-development.appspot.com",
                "-build-docker-release-master: compile-with-docker-test",
                "+build-docker-release-master:",
                " \t$(info ETCD_VERSION: $(ETCD_VERSION))"
            ],
            "changed_files": [
                "hack/scripts-dev/Makefile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d7092b360d79665752bce01074df7e88ae166cc5",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519755828,
            "hunks": 3,
            "message": "hack/scripts-dev: fix \"compile-with-docker-test\" in Makefile Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/Makefile b/hack/scripts-dev/Makefile",
                "index 2de4b9bbb..12f2729b1 100644",
                "--- a/hack/scripts-dev/Makefile",
                "+++ b/hack/scripts-dev/Makefile",
                "@@ -73,4 +73,13 @@ pull-docker-test:",
                " #   make compile-with-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   make compile-setup-gopath-with-docker-test -f ./hack/scripts-dev/Makefile",
                " compile-with-docker-test:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --mount type=bind,source=`pwd`,destination=/go/src/github.com/coreos/etcd \\",
                "+\t  gcr.io/etcd-development/etcd-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"GO_BUILD_FLAGS=-v ./build && ./bin/etcd --version\"",
                "+",
                "+compile-setup-gopath-with-docker-test:",
                " \t$(info GO_VERSION: $(GO_VERSION))",
                "@@ -80,3 +89,3 @@ compile-with-docker-test:",
                " \t  gcr.io/etcd-development/etcd-test:go$(GO_VERSION) \\",
                "-\t  /bin/bash -c \"cd /etcd && GO_BUILD_FLAGS=-v ./build && ./bin/etcd --version\"",
                "+\t  /bin/bash -c \"cd /etcd && ETCD_SETUP_GOPATH=1 GO_BUILD_FLAGS=-v ./build && ./bin/etcd --version && rm -rf ./gopath\""
            ],
            "changed_files": [
                "hack/scripts-dev/Makefile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "748ab8c3989886c2145eea06703d2981a224024f",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520015209,
            "hunks": 4,
            "message": "pkg/flags: fatal on conflicting environment variable Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/pkg/flags/flag.go b/pkg/flags/flag.go",
                "index 69c464118..3a8f050af 100644",
                "--- a/pkg/flags/flag.go",
                "+++ b/pkg/flags/flag.go",
                "@@ -121,5 +121,3 @@ func verifyEnv(prefix string, usedEnvKey, alreadySet map[string]bool) {",
                " \t\tif alreadySet[kv[0]] {",
                "-\t\t\t// TODO: exit with error in v3.4",
                "-\t\t\tplog.Warningf(\"recognized environment variable %s, but unused: shadowed by corresponding flag\", kv[0])",
                "-\t\t\tcontinue",
                "+\t\t\tplog.Fatalf(\"conflicting environment variable %q is shadowed by corresponding command-line flag (either unset environment variable or disable flag)\", kv[0])",
                " \t\t}",
                "diff --git a/pkg/flags/flag_test.go b/pkg/flags/flag_test.go",
                "index db157c9be..07914e685 100644",
                "--- a/pkg/flags/flag_test.go",
                "+++ b/pkg/flags/flag_test.go",
                "@@ -36,7 +36,2 @@ func TestSetFlagsFromEnv(t *testing.T) {",
                " \t}",
                "-\t// command-line flags take precedence over env vars",
                "-\tos.Setenv(\"ETCD_C\", \"woof\")",
                "-\tif err := fs.Set(\"c\", \"quack\"); err != nil {",
                "-\t\tt.Fatal(err)",
                "-\t}",
                "@@ -46,3 +41,2 @@ func TestSetFlagsFromEnv(t *testing.T) {",
                " \t\t\"b\": \"bar\",",
                "-\t\t\"c\": \"quack\",",
                " \t} {",
                "@@ -61,3 +55,2 @@ func TestSetFlagsFromEnv(t *testing.T) {",
                " \t\t\"b\": \"bar\",",
                "-\t\t\"c\": \"quack\",",
                " \t} {"
            ],
            "changed_files": [
                "pkg/flags/flag.go",
                "pkg/flags/flag_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e9b14788cc1d603562bc8cb63a6443211f3f1422",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1518823678,
            "hunks": 1,
            "message": "hack/scripts-dev: use Go 1.10 in Makefile Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/Makefile b/hack/scripts-dev/Makefile",
                "index 8cc5877f8..138c6a0c4 100644",
                "--- a/hack/scripts-dev/Makefile",
                "+++ b/hack/scripts-dev/Makefile",
                "@@ -29,3 +29,3 @@ clean:",
                "-GO_VERSION ?= 1.9.4",
                "+GO_VERSION ?= 1.10",
                " ETCD_VERSION ?= $(shell git rev-parse --short HEAD || echo \"GitNotFound\")"
            ],
            "changed_files": [
                "hack/scripts-dev/Makefile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "32c46954eef73d76e12666ee5b33f041defa64f5",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519328044,
            "hunks": 4,
            "message": "hack/scripts-dev: add \"docker-dns-test-insecure-run\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/Makefile b/hack/scripts-dev/Makefile",
                "index 138c6a0c4..2de4b9bbb 100644",
                "--- a/hack/scripts-dev/Makefile",
                "+++ b/hack/scripts-dev/Makefile",
                "@@ -236,2 +236,3 @@ docker-static-ip-test-certs-metrics-proxy-run:",
                " #   make pull-docker-dns-test -f ./hack/scripts-dev/Makefile",
                "+#   make docker-dns-test-insecure-run -f ./hack/scripts-dev/Makefile",
                " #   make docker-dns-test-certs-run -f ./hack/scripts-dev/Makefile",
                "@@ -265,2 +266,16 @@ pull-docker-dns-test:",
                "+docker-dns-test-insecure-run:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --tty \\",
                "+\t  --dns 127.0.0.1 \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns/insecure,destination=/insecure \\",
                "+\t  gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"cd /etcd && /insecure/run.sh && rm -rf m*.etcd\"",
                "+",
                " docker-dns-test-certs-run:",
                "diff --git a/hack/scripts-dev/docker-dns/insecure/Procfile b/hack/scripts-dev/docker-dns/insecure/Procfile",
                "new file mode 100644",
                "index 000000000..0029aeda6",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/insecure/Procfile",
                "@@ -0,0 +1,6 @@",
                "+# Use goreman to run `go get github.com/mattn/goreman`",
                "+etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls http://127.0.0.1:2379 --advertise-client-urls http://m1.etcd.local:2379 --listen-peer-urls http://127.0.0.1:2380 --initial-advertise-peer-urls=http://m1.etcd.local:2380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380",
                "+",
                "+etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls http://127.0.0.1:22379 --advertise-client-urls http://m2.etcd.local:22379 --listen-peer-urls http://127.0.0.1:22380 --initial-advertise-peer-urls=http://m2.etcd.local:22380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380",
                "+",
                "+etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls http://127.0.0.1:32379 --advertise-client-urls http://m3.etcd.local:32379 --listen-peer-urls http://127.0.0.1:32380 --initial-advertise-peer-urls=http://m3.etcd.local:32380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380",
                "\\ No newline at end of file",
                "diff --git a/hack/scripts-dev/docker-dns/insecure/run.sh b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "new file mode 100755",
                "index 000000000..28a82cc38",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "@@ -0,0 +1,33 @@",
                "+#!/bin/sh",
                "+rm -rf /tmp/m1.data /tmp/m2.data /tmp/m3.data",
                "+",
                "+/etc/init.d/bind9 start",
                "+",
                "+# get rid of hosts so go lookup won't resolve 127.0.0.1 to localhost",
                "+cat /dev/null >/etc/hosts",
                "+",
                "+goreman -f /insecure/Procfile start &",
                "+",
                "+# TODO: remove random sleeps",
                "+sleep 7s",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --endpoints=http://m1.etcd.local:2379 \\",
                "+  endpoint health --cluster",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --endpoints=http://m1.etcd.local:2379,http://m2.etcd.local:22379,http://m3.etcd.local:32379 \\",
                "+  put abc def",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --endpoints=http://m1.etcd.local:2379,http://m2.etcd.local:22379,http://m3.etcd.local:32379 \\",
                "+  get abc",
                "+",
                "+# TODO: add host header check to enforce same-origin-policy",
                "+curl -L http://127.0.0.1:2379/v2/keys/queue \\",
                "+  -XPOST \\",
                "+  -d value=Job1",
                "+",
                "+curl -L http://m1.etcd.local:2379/v2/keys/queue \\",
                "+  -XPOST \\",
                "+  -d value=Job1"
            ],
            "changed_files": [
                "hack/scripts-dev/Makefile",
                "hack/scripts-dev/docker-dns/insecure/Procfile",
                "hack/scripts-dev/docker-dns/insecure/run.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0874fcbed497fb6ef9474e7c5bd17e159a0aa38b",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520497612,
            "hunks": 4,
            "message": "test: run \"functional\" tests in 3.1 branch Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/test b/test",
                "index ea845dcfa..c2d6a52d3 100755",
                "--- a/test",
                "+++ b/test",
                "@@ -20,2 +20,7 @@ etcd_setup_gopath",
                "+# build before setting up test GOPATH",
                "+if [[ \"${PASSES}\" == *\"functional\"* ]]; then",
                "+\t./tools/functional-tester/build",
                "+fi",
                "+",
                " if [ -z \"$PASSES\" ]; then",
                "@@ -78,2 +83,47 @@ function integration_pass {",
                "+function functional_pass {",
                "+  \t# Clean up any data and logs from previous runs",
                "+  \trm -rf ./agent-*",
                "+",
                "+\tfor a in 1 2 3; do",
                "+\t\tmkdir -p ./agent-$a",
                "+\t\t./bin/etcd-agent -etcd-path ./bin/etcd -etcd-log-dir \"./agent-$a\" -port \":${a}9027\" &",
                "+\t\tpid=\"$!\"",
                "+\t\tagent_pids=\"${agent_pids} $pid\"",
                "+\tdone",
                "+",
                "+\tfor a in 1 2 3; do",
                "+\t\techo \"Waiting for 'etcd-agent' on ${a}9027...\"",
                "+\t\twhile ! nc -z localhost ${a}9027; do",
                "+\t\t\tsleep 1",
                "+\t\tdone",
                "+\tdone",
                "+",
                "+\techo \"Starting 'etcd-tester'\"",
                "+\t./bin/etcd-tester \\",
                "+\t\t-agent-endpoints \"127.0.0.1:19027,127.0.0.1:29027,127.0.0.1:39027\" \\",
                "+\t\t-client-ports 1379,2379,3379 \\",
                "+\t\t-advertise-client-ports 13790,23790,33790 \\",
                "+\t\t-peer-ports 1380,2380,3380 \\",
                "+\t\t-advertise-peer-ports 13800,23800,33800 \\",
                "+\t\t-limit 1 \\",
                "+\t\t-schedule-cases \"0 1 2 3 4 5 6 7 8 9\" \\",
                "+\t\t-stress-qps 1000 \\",
                "+\t\t-stress-key-txn-count 100 \\",
                "+\t\t-stress-key-txn-ops 10 \\",
                "+\t\t-exit-on-failure && echo \"'etcd-tester' succeeded\"",
                "+\tETCD_TESTER_EXIT_CODE=$?",
                "+\techo \"ETCD_TESTER_EXIT_CODE:\" ${ETCD_TESTER_EXIT_CODE}",
                "+",
                "+\techo \"Waiting for processes to exit\"",
                "+\tagent_pids=($agent_pids)",
                "+\tkill -s TERM \"${agent_pids[@]}\"",
                "+\tfor a in \"${agent_pids[@]}\"; do wait \"$a\" || true; done",
                "+",
                "+\tif [[ \"${ETCD_TESTER_EXIT_CODE}\" -ne \"0\" ]]; then",
                "+\t\techo \"--- FAIL: exit code\" ${ETCD_TESTER_EXIT_CODE}",
                "+\t\texit ${ETCD_TESTER_EXIT_CODE}",
                "+\tfi",
                "+}",
                "+",
                " function cov_pass {",
                "@@ -81,3 +131,3 @@ function cov_pass {",
                " \t# install gocovmerge before running code coverage from github.com/wadey/gocovmerge",
                "-\t# gocovmerge merges coverage files ",
                "+\t# gocovmerge merges coverage files",
                " \tif ! which gocovmerge >/dev/null; then",
                "@@ -95,3 +145,3 @@ function cov_pass {",
                " \t# PKGS_DELIM contains all the core etcd pkgs delimited by ',' which will be profiled for code coverage.",
                "-\t# Integration tests will generate code coverage for those pkgs ",
                "+\t# Integration tests will generate code coverage for those pkgs",
                " \tPKGS_DELIM=$(echo $TEST | sed 's/ /,/g')"
            ],
            "changed_files": [
                "test"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ebfba72715b4135fb1aa9a16fce5cde9a0c77f9f",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519668438,
            "hunks": 1,
            "message": "client: fix \"ineffassign\" warning Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/client/client_test.go b/client/client_test.go",
                "index 5e547a8cd..20bcf2d86 100644",
                "--- a/client/client_test.go",
                "+++ b/client/client_test.go",
                "@@ -485,4 +485,10 @@ func (f fakeCancelContext) Value(key interface{}) interface{} { return 1 }",
                "-func withTimeout(parent context.Context, timeout time.Duration) (context.Context, context.CancelFunc) {",
                "-\treturn parent, func() { parent = nil }",
                "+func withTimeout(parent context.Context, timeout time.Duration) (",
                "+\tctx context.Context,",
                "+\tcancel context.CancelFunc) {",
                "+\tctx = parent",
                "+\tcancel = func() {",
                "+\t\tctx = nil",
                "+\t}",
                "+\treturn ctx, cancel",
                " }"
            ],
            "changed_files": [
                "client/client_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "18f8b1b1e1375cfeadaa64145a7b1f1bf2feb38f",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519755794,
            "hunks": 2,
            "message": "build,test: set up GOPATH in build script Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/build b/build",
                "index c56a2f944..03824461e 100755",
                "--- a/build",
                "+++ b/build",
                "@@ -86,2 +86,6 @@ toggle_failpoints_default",
                "+if [[ \"${ETCD_SETUP_GOPATH}\" == \"1\" ]]; then",
                "+\tetcd_setup_gopath",
                "+fi",
                "+",
                " # only build when called directly, not sourced",
                "diff --git a/test b/test",
                "index cc8897902..78e657df9 100755",
                "--- a/test",
                "+++ b/test",
                "@@ -18,6 +18,2 @@ source ./build",
                "-if [[ \"${ETCD_SETUP_GOPATH}\" == \"1\" ]]; then",
                "-\tetcd_setup_gopath",
                "-fi",
                "-",
                " # build before setting up test GOPATH"
            ],
            "changed_files": [
                "build",
                "test"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6bbe1072250b397732c76918a098251adf8573f7",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519669944,
            "hunks": 11,
            "message": "*: revert \"internal/compactor\" package change Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/compactor/compactor.go b/compactor/compactor.go",
                "new file mode 100644",
                "index 000000000..c05722517",
                "--- /dev/null",
                "+++ b/compactor/compactor.go",
                "@@ -0,0 +1,68 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package compactor",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"fmt\"",
                "+\t\"time\"",
                "+",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+)",
                "+",
                "+var (",
                "+\tplog = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"compactor\")",
                "+)",
                "+",
                "+const (",
                "+\tcheckCompactionInterval = 5 * time.Minute",
                "+",
                "+\tModePeriodic = \"periodic\"",
                "+\tModeRevision = \"revision\"",
                "+)",
                "+",
                "+// Compactor purges old log from the storage periodically.",
                "+type Compactor interface {",
                "+\t// Run starts the main loop of the compactor in background.",
                "+\t// Use Stop() to halt the loop and release the resource.",
                "+\tRun()",
                "+\t// Stop halts the main loop of the compactor.",
                "+\tStop()",
                "+\t// Pause temporally suspend the compactor not to run compaction. Resume() to unpose.",
                "+\tPause()",
                "+\t// Resume restarts the compactor suspended by Pause().",
                "+\tResume()",
                "+}",
                "+",
                "+type Compactable interface {",
                "+\tCompact(ctx context.Context, r *pb.CompactionRequest) (*pb.CompactionResponse, error)",
                "+}",
                "+",
                "+type RevGetter interface {",
                "+\tRev() int64",
                "+}",
                "+",
                "+func New(mode string, retention time.Duration, rg RevGetter, c Compactable) (Compactor, error) {",
                "+\tswitch mode {",
                "+\tcase ModePeriodic:",
                "+\t\treturn NewPeriodic(retention, rg, c), nil",
                "+\tcase ModeRevision:",
                "+\t\treturn NewRevision(int64(retention), rg, c), nil",
                "+\tdefault:",
                "+\t\treturn nil, fmt.Errorf(\"unsupported compaction mode %s\", mode)",
                "+\t}",
                "+}",
                "diff --git a/compactor/compactor_test.go b/compactor/compactor_test.go",
                "new file mode 100644",
                "index 000000000..c3db1c1f8",
                "--- /dev/null",
                "+++ b/compactor/compactor_test.go",
                "@@ -0,0 +1,47 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package compactor",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"sync/atomic\"",
                "+",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+)",
                "+",
                "+type fakeCompactable struct {",
                "+\ttestutil.Recorder",
                "+}",
                "+",
                "+func (fc *fakeCompactable) Compact(ctx context.Context, r *pb.CompactionRequest) (*pb.CompactionResponse, error) {",
                "+\tfc.Record(testutil.Action{Name: \"c\", Params: []interface{}{r}})",
                "+\treturn &pb.CompactionResponse{}, nil",
                "+}",
                "+",
                "+type fakeRevGetter struct {",
                "+\ttestutil.Recorder",
                "+\trev int64",
                "+}",
                "+",
                "+func (fr *fakeRevGetter) Rev() int64 {",
                "+\tfr.Record(testutil.Action{Name: \"g\"})",
                "+\trev := atomic.AddInt64(&fr.rev, 1)",
                "+\treturn rev",
                "+}",
                "+",
                "+func (fr *fakeRevGetter) SetRev(rev int64) {",
                "+\tatomic.StoreInt64(&fr.rev, rev)",
                "+}",
                "diff --git a/compactor/doc.go b/compactor/doc.go",
                "new file mode 100644",
                "index 000000000..cb158340e",
                "--- /dev/null",
                "+++ b/compactor/doc.go",
                "@@ -0,0 +1,16 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package compactor implements automated policies for compacting etcd's mvcc storage.",
                "+package compactor",
                "diff --git a/compactor/periodic.go b/compactor/periodic.go",
                "new file mode 100644",
                "index 000000000..c2ebbe8d2",
                "--- /dev/null",
                "+++ b/compactor/periodic.go",
                "@@ -0,0 +1,122 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package compactor",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"sync\"",
                "+\t\"time\"",
                "+",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/internal/mvcc\"",
                "+",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+// Periodic compacts the log by purging revisions older than",
                "+// the configured retention time.",
                "+type Periodic struct {",
                "+\tclock  clockwork.Clock",
                "+\tperiod time.Duration",
                "+",
                "+\trg RevGetter",
                "+\tc  Compactable",
                "+",
                "+\trevs   []int64",
                "+\tctx    context.Context",
                "+\tcancel context.CancelFunc",
                "+",
                "+\t// mu protects paused",
                "+\tmu     sync.RWMutex",
                "+\tpaused bool",
                "+}",
                "+",
                "+// NewPeriodic creates a new instance of Periodic compactor that purges",
                "+// the log older than h Duration.",
                "+func NewPeriodic(h time.Duration, rg RevGetter, c Compactable) *Periodic {",
                "+\treturn &Periodic{",
                "+\t\tclock:  clockwork.NewRealClock(),",
                "+\t\tperiod: h,",
                "+\t\trg:     rg,",
                "+\t\tc:      c,",
                "+\t}",
                "+}",
                "+",
                "+// periodDivisor divides Periodic.period in into checkCompactInterval duration",
                "+const periodDivisor = 10",
                "+",
                "+func (t *Periodic) Run() {",
                "+\tt.ctx, t.cancel = context.WithCancel(context.Background())",
                "+\tt.revs = make([]int64, 0)",
                "+\tclock := t.clock",
                "+\tcheckCompactInterval := t.period / time.Duration(periodDivisor)",
                "+\tgo func() {",
                "+\t\tlast := clock.Now()",
                "+\t\tfor {",
                "+\t\t\tt.revs = append(t.revs, t.rg.Rev())",
                "+\t\t\tselect {",
                "+\t\t\tcase <-t.ctx.Done():",
                "+\t\t\t\treturn",
                "+\t\t\tcase <-clock.After(checkCompactInterval):",
                "+\t\t\t\tt.mu.Lock()",
                "+\t\t\t\tp := t.paused",
                "+\t\t\t\tt.mu.Unlock()",
                "+\t\t\t\tif p {",
                "+\t\t\t\t\tcontinue",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif clock.Now().Sub(last) < t.period {",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\trev, remaining := t.getRev()",
                "+\t\t\tif rev < 0 {",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\tplog.Noticef(\"Starting auto-compaction at revision %d (retention: %v)\", rev, t.period)",
                "+\t\t\t_, err := t.c.Compact(t.ctx, &pb.CompactionRequest{Revision: rev})",
                "+\t\t\tif err == nil || err == mvcc.ErrCompacted {",
                "+\t\t\t\tt.revs = remaining",
                "+\t\t\t\tplog.Noticef(\"Finished auto-compaction at revision %d\", rev)",
                "+\t\t\t} else {",
                "+\t\t\t\tplog.Noticef(\"Failed auto-compaction at revision %d (%v)\", rev, err)",
                "+\t\t\t\tplog.Noticef(\"Retry after %v\", checkCompactInterval)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}()",
                "+}",
                "+",
                "+func (t *Periodic) Stop() {",
                "+\tt.cancel()",
                "+}",
                "+",
                "+func (t *Periodic) Pause() {",
                "+\tt.mu.Lock()",
                "+\tdefer t.mu.Unlock()",
                "+\tt.paused = true",
                "+}",
                "+",
                "+func (t *Periodic) Resume() {",
                "+\tt.mu.Lock()",
                "+\tdefer t.mu.Unlock()",
                "+\tt.paused = false",
                "+}",
                "+",
                "+func (t *Periodic) getRev() (int64, []int64) {",
                "+\ti := len(t.revs) - periodDivisor",
                "+\tif i < 0 {",
                "+\t\treturn -1, t.revs",
                "+\t}",
                "+\treturn t.revs[i], t.revs[i+1:]",
                "+}",
                "diff --git a/compactor/periodic_test.go b/compactor/periodic_test.go",
                "new file mode 100644",
                "index 000000000..19abd4fdb",
                "--- /dev/null",
                "+++ b/compactor/periodic_test.go",
                "@@ -0,0 +1,116 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package compactor",
                "+",
                "+import (",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+func TestPeriodic(t *testing.T) {",
                "+\tretentionHours := 2",
                "+\tretentionDuration := time.Duration(retentionHours) * time.Hour",
                "+",
                "+\tfc := clockwork.NewFakeClock()",
                "+\trg := &fakeRevGetter{testutil.NewRecorderStream(), 0}",
                "+\tcompactable := &fakeCompactable{testutil.NewRecorderStream()}",
                "+\ttb := &Periodic{",
                "+\t\tclock:  fc,",
                "+\t\tperiod: retentionDuration,",
                "+\t\trg:     rg,",
                "+\t\tc:      compactable,",
                "+\t}",
                "+",
                "+\ttb.Run()",
                "+\tdefer tb.Stop()",
                "+\tcheckCompactInterval := retentionDuration / time.Duration(periodDivisor)",
                "+\tn := periodDivisor",
                "+\t// simulate 5 hours worth of intervals.",
                "+\tfor i := 0; i < n/retentionHours*5; i++ {",
                "+\t\trg.Wait(1)",
                "+\t\tfc.Advance(checkCompactInterval)",
                "+\t\t// compaction doesn't happen til 2 hours elapses.",
                "+\t\tif i < n {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\t// after 2 hours, compaction happens at every checkCompactInterval.",
                "+\t\ta, err := compactable.Wait(1)",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\texpectedRevision := int64(i + 1 - n)",
                "+\t\tif !reflect.DeepEqual(a[0].Params[0], &pb.CompactionRequest{Revision: expectedRevision}) {",
                "+\t\t\tt.Errorf(\"compact request = %v, want %v\", a[0].Params[0], &pb.CompactionRequest{Revision: expectedRevision})",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// unblock the rev getter, so we can stop the compactor routine.",
                "+\t_, err := rg.Wait(1)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+}",
                "+",
                "+func TestPeriodicPause(t *testing.T) {",
                "+\tfc := clockwork.NewFakeClock()",
                "+\tcompactable := &fakeCompactable{testutil.NewRecorderStream()}",
                "+\trg := &fakeRevGetter{testutil.NewRecorderStream(), 0}",
                "+\tretentionDuration := time.Hour",
                "+\ttb := &Periodic{",
                "+\t\tclock:  fc,",
                "+\t\tperiod: retentionDuration,",
                "+\t\trg:     rg,",
                "+\t\tc:      compactable,",
                "+\t}",
                "+",
                "+\ttb.Run()",
                "+\ttb.Pause()",
                "+",
                "+\t// tb will collect 3 hours of revisions but not compact since paused",
                "+\tcheckCompactInterval := retentionDuration / time.Duration(periodDivisor)",
                "+\tn := periodDivisor",
                "+\tfor i := 0; i < 3*n; i++ {",
                "+\t\trg.Wait(1)",
                "+\t\tfc.Advance(checkCompactInterval)",
                "+\t}",
                "+\t// tb ends up waiting for the clock",
                "+",
                "+\tselect {",
                "+\tcase a := <-compactable.Chan():",
                "+\t\tt.Fatalf(\"unexpected action %v\", a)",
                "+\tcase <-time.After(10 * time.Millisecond):",
                "+\t}",
                "+",
                "+\t// tb resumes to being blocked on the clock",
                "+\ttb.Resume()",
                "+",
                "+\t// unblock clock, will kick off a compaction at hour 3:06",
                "+\trg.Wait(1)",
                "+\tfc.Advance(checkCompactInterval)",
                "+\ta, err := compactable.Wait(1)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\t// compact the revision from hour 2:06",
                "+\twreq := &pb.CompactionRequest{Revision: int64(1 + 2*n + 1)}",
                "+\tif !reflect.DeepEqual(a[0].Params[0], wreq) {",
                "+\t\tt.Errorf(\"compact request = %v, want %v\", a[0].Params[0], wreq.Revision)",
                "+\t}",
                "+}",
                "diff --git a/compactor/revision.go b/compactor/revision.go",
                "new file mode 100644",
                "index 000000000..54561e9ab",
                "--- /dev/null",
                "+++ b/compactor/revision.go",
                "@@ -0,0 +1,106 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package compactor",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"sync\"",
                "+",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/internal/mvcc\"",
                "+",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+// Revision compacts the log by purging revisions older than",
                "+// the configured reivison number. Compaction happens every 5 minutes.",
                "+type Revision struct {",
                "+\tclock     clockwork.Clock",
                "+\tretention int64",
                "+",
                "+\trg RevGetter",
                "+\tc  Compactable",
                "+",
                "+\tctx    context.Context",
                "+\tcancel context.CancelFunc",
                "+",
                "+\tmu     sync.Mutex",
                "+\tpaused bool",
                "+}",
                "+",
                "+// NewRevision creates a new instance of Revisonal compactor that purges",
                "+// the log older than retention revisions from the current revision.",
                "+func NewRevision(retention int64, rg RevGetter, c Compactable) *Revision {",
                "+\treturn &Revision{",
                "+\t\tclock:     clockwork.NewRealClock(),",
                "+\t\tretention: retention,",
                "+\t\trg:        rg,",
                "+\t\tc:         c,",
                "+\t}",
                "+}",
                "+",
                "+func (t *Revision) Run() {",
                "+\tt.ctx, t.cancel = context.WithCancel(context.Background())",
                "+\tclock := t.clock",
                "+\tprevious := int64(0)",
                "+",
                "+\tgo func() {",
                "+\t\tfor {",
                "+\t\t\tselect {",
                "+\t\t\tcase <-t.ctx.Done():",
                "+\t\t\t\treturn",
                "+\t\t\tcase <-clock.After(checkCompactionInterval):",
                "+\t\t\t\tt.mu.Lock()",
                "+\t\t\t\tp := t.paused",
                "+\t\t\t\tt.mu.Unlock()",
                "+\t\t\t\tif p {",
                "+\t\t\t\t\tcontinue",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+",
                "+\t\t\trev := t.rg.Rev() - t.retention",
                "+",
                "+\t\t\tif rev <= 0 || rev == previous {",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+",
                "+\t\t\tplog.Noticef(\"Starting auto-compaction at revision %d (retention: %d revisions)\", rev, t.retention)",
                "+\t\t\t_, err := t.c.Compact(t.ctx, &pb.CompactionRequest{Revision: rev})",
                "+\t\t\tif err == nil || err == mvcc.ErrCompacted {",
                "+\t\t\t\tprevious = rev",
                "+\t\t\t\tplog.Noticef(\"Finished auto-compaction at revision %d\", rev)",
                "+\t\t\t} else {",
                "+\t\t\t\tplog.Noticef(\"Failed auto-compaction at revision %d (%v)\", rev, err)",
                "+\t\t\t\tplog.Noticef(\"Retry after %v\", checkCompactionInterval)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}()",
                "+}",
                "+",
                "+func (t *Revision) Stop() {",
                "+\tt.cancel()",
                "+}",
                "+",
                "+func (t *Revision) Pause() {",
                "+\tt.mu.Lock()",
                "+\tdefer t.mu.Unlock()",
                "+\tt.paused = true",
                "+}",
                "+",
                "+func (t *Revision) Resume() {",
                "+\tt.mu.Lock()",
                "+\tdefer t.mu.Unlock()",
                "+\tt.paused = false",
                "+}",
                "diff --git a/compactor/revision_test.go b/compactor/revision_test.go",
                "new file mode 100644",
                "index 000000000..3c52f94c9",
                "--- /dev/null",
                "+++ b/compactor/revision_test.go",
                "@@ -0,0 +1,116 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package compactor",
                "+",
                "+import (",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+func TestRevision(t *testing.T) {",
                "+\tfc := clockwork.NewFakeClock()",
                "+\trg := &fakeRevGetter{testutil.NewRecorderStream(), 0}",
                "+\tcompactable := &fakeCompactable{testutil.NewRecorderStream()}",
                "+\ttb := &Revision{",
                "+\t\tclock:     fc,",
                "+\t\tretention: 10,",
                "+\t\trg:        rg,",
                "+\t\tc:         compactable,",
                "+\t}",
                "+",
                "+\ttb.Run()",
                "+\tdefer tb.Stop()",
                "+",
                "+\tfc.Advance(checkCompactionInterval)",
                "+\trg.Wait(1)",
                "+\t// nothing happens",
                "+",
                "+\trg.SetRev(99) // will be 100",
                "+\texpectedRevision := int64(90)",
                "+\tfc.Advance(checkCompactionInterval)",
                "+\trg.Wait(1)",
                "+\ta, err := compactable.Wait(1)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif !reflect.DeepEqual(a[0].Params[0], &pb.CompactionRequest{Revision: expectedRevision}) {",
                "+\t\tt.Errorf(\"compact request = %v, want %v\", a[0].Params[0], &pb.CompactionRequest{Revision: expectedRevision})",
                "+\t}",
                "+",
                "+\t// skip the same revision",
                "+\trg.SetRev(99) // will be 100",
                "+\trg.Wait(1)",
                "+\t// nothing happens",
                "+",
                "+\trg.SetRev(199) // will be 200",
                "+\texpectedRevision = int64(190)",
                "+\tfc.Advance(checkCompactionInterval)",
                "+\trg.Wait(1)",
                "+\ta, err = compactable.Wait(1)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif !reflect.DeepEqual(a[0].Params[0], &pb.CompactionRequest{Revision: expectedRevision}) {",
                "+\t\tt.Errorf(\"compact request = %v, want %v\", a[0].Params[0], &pb.CompactionRequest{Revision: expectedRevision})",
                "+\t}",
                "+}",
                "+",
                "+func TestRevisionPause(t *testing.T) {",
                "+\tfc := clockwork.NewFakeClock()",
                "+\tcompactable := &fakeCompactable{testutil.NewRecorderStream()}",
                "+\trg := &fakeRevGetter{testutil.NewRecorderStream(), 99} // will be 100",
                "+\ttb := &Revision{",
                "+\t\tclock:     fc,",
                "+\t\tretention: 10,",
                "+\t\trg:        rg,",
                "+\t\tc:         compactable,",
                "+\t}",
                "+",
                "+\ttb.Run()",
                "+\ttb.Pause()",
                "+",
                "+\t// tb will collect 3 hours of revisions but not compact since paused",
                "+\tn := int(time.Hour / checkCompactionInterval)",
                "+\tfor i := 0; i < 3*n; i++ {",
                "+\t\tfc.Advance(checkCompactionInterval)",
                "+\t}",
                "+\t// tb ends up waiting for the clock",
                "+",
                "+\tselect {",
                "+\tcase a := <-compactable.Chan():",
                "+\t\tt.Fatalf(\"unexpected action %v\", a)",
                "+\tcase <-time.After(10 * time.Millisecond):",
                "+\t}",
                "+",
                "+\t// tb resumes to being blocked on the clock",
                "+\ttb.Resume()",
                "+",
                "+\t// unblock clock, will kick off a compaction at hour 3:05",
                "+\tfc.Advance(checkCompactionInterval)",
                "+\trg.Wait(1)",
                "+\ta, err := compactable.Wait(1)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\twreq := &pb.CompactionRequest{Revision: int64(90)}",
                "+\tif !reflect.DeepEqual(a[0].Params[0], wreq) {",
                "+\t\tt.Errorf(\"compact request = %v, want %v\", a[0].Params[0], wreq.Revision)",
                "+\t}",
                "+}",
                "diff --git a/embed/config.go b/embed/config.go",
                "index 7204130bb..a639df5bb 100644",
                "--- a/embed/config.go",
                "+++ b/embed/config.go",
                "@@ -28,4 +28,4 @@ import (",
                "+\t\"github.com/coreos/etcd/compactor\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "-\t\"github.com/coreos/etcd/internal/compactor\"",
                " \t\"github.com/coreos/etcd/pkg/cors\"",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 79d174258..c0505edb8 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -31,2 +31,3 @@ import (",
                "+\t\"github.com/coreos/etcd/compactor\"",
                " \t\"github.com/coreos/etcd/etcdserver/api\"",
                "@@ -38,3 +39,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/auth\"",
                "-\t\"github.com/coreos/etcd/internal/compactor\"",
                " \t\"github.com/coreos/etcd/internal/discovery\""
            ],
            "changed_files": [
                "compactor/compactor.go",
                "compactor/compactor_test.go",
                "compactor/doc.go",
                "compactor/periodic.go",
                "compactor/periodic_test.go",
                "compactor/revision.go",
                "compactor/revision_test.go",
                "embed/config.go",
                "etcdserver/server.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "67c66884e363e76bc56c4504a037b887a5fe6e85",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520505404,
            "hunks": 2,
            "message": "etcdserverpb: fix protobuf code style",
            "diff": [
                "diff --git a/etcdserver/etcdserverpb/rpc.proto b/etcdserver/etcdserverpb/rpc.proto",
                "index 7a95f780e..6560118f9 100644",
                "--- a/etcdserver/etcdserverpb/rpc.proto",
                "+++ b/etcdserver/etcdserverpb/rpc.proto",
                "@@ -518,3 +518,3 @@ message Compare {",
                "     MOD = 2;",
                "-    VALUE= 3;",
                "+    VALUE = 3;",
                "     LEASE = 4;",
                "@@ -707,3 +707,3 @@ message WatchResponse {",
                "   // watcher with the same start_revision again.",
                "-  int64 compact_revision  = 5;",
                "+  int64 compact_revision = 5;"
            ],
            "changed_files": [
                "etcdserver/etcdserverpb/rpc.proto"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8fd01f56d630bab9face30a7da1c8d4c052e2149",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1500967350,
            "hunks": 10,
            "message": "auth: a new option for configuring TTL of jwt tokens This commit adds a new option of --auth-token, ttl, for configuring TTL of jwt tokens. It can be specified like this: ``` --auth-token jwt,pub-key=<pub key path>,priv-key=<priv key path>,sign-method=<sign method>,ttl=5m ``` In the above case, TTL will be 5 minutes.",
            "diff": [
                "diff --git a/auth/jwt.go b/auth/jwt.go",
                "index 99b2d6b5c..64535043c 100644",
                "--- a/auth/jwt.go",
                "+++ b/auth/jwt.go",
                "@@ -20,2 +20,3 @@ import (",
                " \t\"io/ioutil\"",
                "+\t\"time\"",
                "@@ -28,2 +29,3 @@ type tokenJWT struct {",
                " \tverifyKey  *rsa.PublicKey",
                "+\tttl        time.Duration",
                " }",
                "@@ -72,2 +74,3 @@ func (t *tokenJWT) assign(ctx context.Context, username string, revision uint64)",
                " \t\t\t\"revision\": revision,",
                "+\t\t\t\"exp\":      time.Now().Add(t.ttl).Unix(),",
                " \t\t})",
                "@@ -85,3 +88,3 @@ func (t *tokenJWT) assign(ctx context.Context, username string, revision uint64)",
                "-func prepareOpts(opts map[string]string) (jwtSignMethod, jwtPubKeyPath, jwtPrivKeyPath string, err error) {",
                "+func prepareOpts(opts map[string]string) (jwtSignMethod, jwtPubKeyPath, jwtPrivKeyPath string, ttl time.Duration, err error) {",
                " \tfor k, v := range opts {",
                "@@ -94,5 +97,11 @@ func prepareOpts(opts map[string]string) (jwtSignMethod, jwtPubKeyPath, jwtPrivK",
                " \t\t\tjwtPrivKeyPath = v",
                "+\t\tcase \"ttl\":",
                "+\t\t\tttl, err = time.ParseDuration(v)",
                "+\t\t\tif err != nil {",
                "+\t\t\t\tplog.Errorf(\"failed to parse ttl option (%s)\", err)",
                "+\t\t\t\treturn \"\", \"\", \"\", 0, ErrInvalidAuthOpts",
                "+\t\t\t}",
                " \t\tdefault:",
                " \t\t\tplog.Errorf(\"unknown token specific option: %s\", k)",
                "-\t\t\treturn \"\", \"\", \"\", ErrInvalidAuthOpts",
                "+\t\t\treturn \"\", \"\", \"\", 0, ErrInvalidAuthOpts",
                " \t\t}",
                "@@ -100,5 +109,5 @@ func prepareOpts(opts map[string]string) (jwtSignMethod, jwtPubKeyPath, jwtPrivK",
                " \tif len(jwtSignMethod) == 0 {",
                "-\t\treturn \"\", \"\", \"\", ErrInvalidAuthOpts",
                "+\t\treturn \"\", \"\", \"\", 0, ErrInvalidAuthOpts",
                " \t}",
                "-\treturn jwtSignMethod, jwtPubKeyPath, jwtPrivKeyPath, nil",
                "+\treturn jwtSignMethod, jwtPubKeyPath, jwtPrivKeyPath, ttl, nil",
                " }",
                "@@ -106,3 +115,3 @@ func prepareOpts(opts map[string]string) (jwtSignMethod, jwtPubKeyPath, jwtPrivK",
                " func newTokenProviderJWT(opts map[string]string) (*tokenJWT, error) {",
                "-\tjwtSignMethod, jwtPubKeyPath, jwtPrivKeyPath, err := prepareOpts(opts)",
                "+\tjwtSignMethod, jwtPubKeyPath, jwtPrivKeyPath, ttl, err := prepareOpts(opts)",
                " \tif err != nil {",
                "@@ -111,3 +120,9 @@ func newTokenProviderJWT(opts map[string]string) (*tokenJWT, error) {",
                "-\tt := &tokenJWT{}",
                "+\tif ttl == 0 {",
                "+\t\tttl = 5 * time.Minute",
                "+\t}",
                "+",
                "+\tt := &tokenJWT{",
                "+\t\tttl: ttl,",
                "+\t}"
            ],
            "changed_files": [
                "auth/jwt.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2a54e32819a25ad0af8aa6e7b4135750e0b724af",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1507690210,
            "hunks": 6,
            "message": "e2e: add a test case of JWT token expiration",
            "diff": [
                "diff --git a/e2e/cluster_test.go b/e2e/cluster_test.go",
                "index 69896dd48..4ca5072f6 100644",
                "--- a/e2e/cluster_test.go",
                "+++ b/e2e/cluster_test.go",
                "@@ -80,2 +80,7 @@ var (",
                " \t}",
                "+\tconfigJWT = etcdProcessClusterConfig{",
                "+\t\tclusterSize:   1,",
                "+\t\tinitialToken:  \"new\",",
                "+\t\tauthTokenOpts: \"jwt,pub-key=../integration/fixtures/server.crt,priv-key=../integration/fixtures/server.key.insecure,sign-method=RS256,ttl=1s\",",
                "+\t}",
                " )",
                "@@ -119,2 +124,3 @@ type etcdProcessClusterConfig struct {",
                " \tinitialCorruptCheck bool",
                "+\tauthTokenOpts       string",
                " }",
                "@@ -240,2 +246,7 @@ func (cfg *etcdProcessClusterConfig) etcdServerProcessConfigs() []*etcdServerPro",
                " \t\targs = append(args, cfg.tlsArgs()...)",
                "+",
                "+\t\tif cfg.authTokenOpts != \"\" {",
                "+\t\t\targs = append(args, \"--auth-token\", cfg.authTokenOpts)",
                "+\t\t}",
                "+",
                " \t\tetcdCfgs[i] = &etcdServerProcessConfig{",
                "diff --git a/e2e/ctl_v3_auth_test.go b/e2e/ctl_v3_auth_test.go",
                "index e0555a225..db38d5fc6 100644",
                "--- a/e2e/ctl_v3_auth_test.go",
                "+++ b/e2e/ctl_v3_auth_test.go",
                "@@ -20,2 +20,3 @@ import (",
                " \t\"testing\"",
                "+\t\"time\"",
                "@@ -60,2 +61,3 @@ func TestCtlV3AuthCertCNAndUsername(t *testing.T) {",
                " }",
                "+func TestCtlV3AuthJWTExpire(t *testing.T) { testCtl(t, authTestJWTExpire, withCfg(configJWT)) }",
                "@@ -1075 +1077,22 @@ func authTestCertCNAndUsername(cx ctlCtx) {",
                " }",
                "+",
                "+func authTestJWTExpire(cx ctlCtx) {",
                "+\tif err := authEnable(cx); err != nil {",
                "+\t\tcx.t.Fatal(err)",
                "+\t}",
                "+",
                "+\tcx.user, cx.pass = \"root\", \"root\"",
                "+\tauthSetupTestUser(cx)",
                "+",
                "+\t// try a granted key",
                "+\tif err := ctlV3Put(cx, \"hoo\", \"bar\", \"\"); err != nil {",
                "+\t\tcx.t.Error(err)",
                "+\t}",
                "+",
                "+\t// wait an expiration of my JWT token",
                "+\t<-time.After(3 * time.Second)",
                "+",
                "+\tif err := ctlV3Put(cx, \"hoo\", \"bar\", \"\"); err != nil {",
                "+\t\tcx.t.Error(err)",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "e2e/cluster_test.go",
                "e2e/ctl_v3_auth_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d598af104da077b25797a1cd306fed1e3ffc23a4",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520455159,
            "hunks": 40,
            "message": "vendor: regenerate with latest \"dep\" Better pruning Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/vendor/github.com/coreos/go-semver/example.go b/vendor/github.com/coreos/go-semver/example.go",
                "new file mode 100644",
                "index 000000000..fd2ee5af2",
                "--- /dev/null",
                "+++ b/vendor/github.com/coreos/go-semver/example.go",
                "@@ -0,0 +1,20 @@",
                "+package main",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"github.com/coreos/go-semver/semver\"",
                "+\t\"os\"",
                "+)",
                "+",
                "+func main() {",
                "+\tvA, err := semver.NewVersion(os.Args[1])",
                "+\tif err != nil {",
                "+\t\tfmt.Println(err.Error())",
                "+\t}",
                "+\tvB, err := semver.NewVersion(os.Args[2])",
                "+\tif err != nil {",
                "+\t\tfmt.Println(err.Error())",
                "+\t}",
                "+",
                "+\tfmt.Printf(\"%s < %s == %t\\n\", vA, vB, vA.LessThan(*vB))",
                "+}",
                "diff --git a/vendor/github.com/cpuguy83/go-md2man/md2man.go b/vendor/github.com/cpuguy83/go-md2man/md2man.go",
                "new file mode 100644",
                "index 000000000..8f6dcdaed",
                "--- /dev/null",
                "+++ b/vendor/github.com/cpuguy83/go-md2man/md2man.go",
                "@@ -0,0 +1,51 @@",
                "+package main",
                "+",
                "+import (",
                "+\t\"flag\"",
                "+\t\"fmt\"",
                "+\t\"io/ioutil\"",
                "+\t\"os\"",
                "+",
                "+\t\"github.com/cpuguy83/go-md2man/md2man\"",
                "+)",
                "+",
                "+var inFilePath = flag.String(\"in\", \"\", \"Path to file to be processed (default: stdin)\")",
                "+var outFilePath = flag.String(\"out\", \"\", \"Path to output processed file (default: stdout)\")",
                "+",
                "+func main() {",
                "+\tvar err error",
                "+\tflag.Parse()",
                "+",
                "+\tinFile := os.Stdin",
                "+\tif *inFilePath != \"\" {",
                "+\t\tinFile, err = os.Open(*inFilePath)",
                "+\t\tif err != nil {",
                "+\t\t\tfmt.Println(err)",
                "+\t\t\tos.Exit(1)",
                "+\t\t}",
                "+\t}",
                "+\tdefer inFile.Close()",
                "+",
                "+\tdoc, err := ioutil.ReadAll(inFile)",
                "+\tif err != nil {",
                "+\t\tfmt.Println(err)",
                "+\t\tos.Exit(1)",
                "+\t}",
                "+",
                "+\tout := md2man.Render(doc)",
                "+",
                "+\toutFile := os.Stdout",
                "+\tif *outFilePath != \"\" {",
                "+\t\toutFile, err = os.Create(*outFilePath)",
                "+\t\tif err != nil {",
                "+\t\t\tfmt.Println(err)",
                "+\t\t\tos.Exit(1)",
                "+\t\t}",
                "+\t\tdefer outFile.Close()",
                "+\t}",
                "+\t_, err = outFile.Write(out)",
                "+\tif err != nil {",
                "+\t\tfmt.Println(err)",
                "+\t\tos.Exit(1)",
                "+\t}",
                "+}",
                "diff --git a/vendor/github.com/gogo/protobuf/protoc-gen-gogo/doc.go b/vendor/github.com/gogo/protobuf/protoc-gen-gogo/doc.go",
                "new file mode 100644",
                "index 000000000..15c7cf43c",
                "--- /dev/null",
                "+++ b/vendor/github.com/gogo/protobuf/protoc-gen-gogo/doc.go",
                "@@ -0,0 +1,51 @@",
                "+// Go support for Protocol Buffers - Google's data interchange format",
                "+//",
                "+// Copyright 2010 The Go Authors.  All rights reserved.",
                "+// https://github.com/golang/protobuf",
                "+//",
                "+// Redistribution and use in source and binary forms, with or without",
                "+// modification, are permitted provided that the following conditions are",
                "+// met:",
                "+//",
                "+//     * Redistributions of source code must retain the above copyright",
                "+// notice, this list of conditions and the following disclaimer.",
                "+//     * Redistributions in binary form must reproduce the above",
                "+// copyright notice, this list of conditions and the following disclaimer",
                "+// in the documentation and/or other materials provided with the",
                "+// distribution.",
                "+//     * Neither the name of Google Inc. nor the names of its",
                "+// contributors may be used to endorse or promote products derived from",
                "+// this software without specific prior written permission.",
                "+//",
                "+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "+// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
                "+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
                "+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
                "+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
                "+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",
                "+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",
                "+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
                "+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "+",
                "+/*",
                "+\tA plugin for the Google protocol buffer compiler to generate Go code.",
                "+\tRun it by building this program and putting it in your path with the name",
                "+\t\tprotoc-gen-gogo",
                "+\tThat word 'gogo' at the end becomes part of the option string set for the",
                "+\tprotocol compiler, so once the protocol compiler (protoc) is installed",
                "+\tyou can run",
                "+\t\tprotoc --gogo_out=output_directory input_directory/file.proto",
                "+\tto generate Go bindings for the protocol defined by file.proto.",
                "+\tWith that input, the output will be written to",
                "+\t\toutput_directory/go_package/file.pb.go",
                "+",
                "+\tThe generated code is documented in the package comment for",
                "+\tthe library.",
                "+",
                "+\tSee the README and documentation for protocol buffers to learn more:",
                "+\t\thttps://developers.google.com/protocol-buffers/",
                "+",
                "+*/",
                "+package documentation",
                "diff --git a/vendor/github.com/gogo/protobuf/protoc-gen-gogo/main.go b/vendor/github.com/gogo/protobuf/protoc-gen-gogo/main.go",
                "new file mode 100644",
                "index 000000000..dd8e79503",
                "--- /dev/null",
                "+++ b/vendor/github.com/gogo/protobuf/protoc-gen-gogo/main.go",
                "@@ -0,0 +1,57 @@",
                "+// Go support for Protocol Buffers - Google's data interchange format",
                "+//",
                "+// Copyright 2010 The Go Authors.  All rights reserved.",
                "+// https://github.com/golang/protobuf",
                "+//",
                "+// Redistribution and use in source and binary forms, with or without",
                "+// modification, are permitted provided that the following conditions are",
                "+// met:",
                "+//",
                "+//     * Redistributions of source code must retain the above copyright",
                "+// notice, this list of conditions and the following disclaimer.",
                "+//     * Redistributions in binary form must reproduce the above",
                "+// copyright notice, this list of conditions and the following disclaimer",
                "+// in the documentation and/or other materials provided with the",
                "+// distribution.",
                "+//     * Neither the name of Google Inc. nor the names of its",
                "+// contributors may be used to endorse or promote products derived from",
                "+// this software without specific prior written permission.",
                "+//",
                "+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
                "+// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
                "+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
                "+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
                "+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
                "+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
                "+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",
                "+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",
                "+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
                "+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "+",
                "+// protoc-gen-go is a plugin for the Google protocol buffer compiler to generate",
                "+// Go code.  Run it by building this program and putting it in your path with",
                "+// the name",
                "+// \tprotoc-gen-gogo",
                "+// That word 'gogo' at the end becomes part of the option string set for the",
                "+// protocol compiler, so once the protocol compiler (protoc) is installed",
                "+// you can run",
                "+// \tprotoc --gogo_out=output_directory input_directory/file.proto",
                "+// to generate Go bindings for the protocol defined by file.proto.",
                "+// With that input, the output will be written to",
                "+// \toutput_directory/file.pb.go",
                "+//",
                "+// The generated code is documented in the package comment for",
                "+// the library.",
                "+//",
                "+// See the README and documentation for protocol buffers to learn more:",
                "+// \thttps://developers.google.com/protocol-buffers/",
                "+package main",
                "+",
                "+import (",
                "+\t\"github.com/gogo/protobuf/vanity/command\"",
                "+)",
                "+",
                "+func main() {",
                "+\tcommand.Write(command.Generate(command.Read()))",
                "+}",
                "diff --git a/vendor/github.com/golang/groupcache/byteview.go b/vendor/github.com/golang/groupcache/byteview.go",
                "new file mode 100644",
                "index 000000000..035a9ee44",
                "--- /dev/null",
                "+++ b/vendor/github.com/golang/groupcache/byteview.go",
                "@@ -0,0 +1,160 @@",
                "+/*",
                "+Copyright 2012 Google Inc.",
                "+",
                "+Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+you may not use this file except in compliance with the License.",
                "+You may obtain a copy of the License at",
                "+",
                "+     http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing, software",
                "+distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+See the License for the specific language governing permissions and",
                "+limitations under the License.",
                "+*/",
                "+",
                "+package groupcache",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"errors\"",
                "+\t\"io\"",
                "+\t\"strings\"",
                "+)",
                "+",
                "+// A ByteView holds an immutable view of bytes.",
                "+// Internally it wraps either a []byte or a string,",
                "+// but that detail is invisible to callers.",
                "+//",
                "+// A ByteView is meant to be used as a value type, not",
                "+// a pointer (like a time.Time).",
                "+type ByteView struct {",
                "+\t// If b is non-nil, b is used, else s is used.",
                "+\tb []byte",
                "+\ts string",
                "+}",
                "+",
                "+// Len returns the view's length.",
                "+func (v ByteView) Len() int {",
                "+\tif v.b != nil {",
                "+\t\treturn len(v.b)",
                "+\t}",
                "+\treturn len(v.s)",
                "+}",
                "+",
                "+// ByteSlice returns a copy of the data as a byte slice.",
                "+func (v ByteView) ByteSlice() []byte {",
                "+\tif v.b != nil {",
                "+\t\treturn cloneBytes(v.b)",
                "+\t}",
                "+\treturn []byte(v.s)",
                "+}",
                "+",
                "+// String returns the data as a string, making a copy if necessary.",
                "+func (v ByteView) String() string {",
                "+\tif v.b != nil {",
                "+\t\treturn string(v.b)",
                "+\t}",
                "+\treturn v.s",
                "+}",
                "+",
                "+// At returns the byte at index i.",
                "+func (v ByteView) At(i int) byte {",
                "+\tif v.b != nil {",
                "+\t\treturn v.b[i]",
                "+\t}",
                "+\treturn v.s[i]",
                "+}",
                "+",
                "+// Slice slices the view between the provided from and to indices.",
                "+func (v ByteView) Slice(from, to int) ByteView {",
                "+\tif v.b != nil {",
                "+\t\treturn ByteView{b: v.b[from:to]}",
                "+\t}",
                "+\treturn ByteView{s: v.s[from:to]}",
                "+}",
                "+",
                "+// SliceFrom slices the view from the provided index until the end.",
                "+func (v ByteView) SliceFrom(from int) ByteView {",
                "+\tif v.b != nil {",
                "+\t\treturn ByteView{b: v.b[from:]}",
                "+\t}",
                "+\treturn ByteView{s: v.s[from:]}",
                "+}",
                "+",
                "+// Copy copies b into dest and returns the number of bytes copied.",
                "+func (v ByteView) Copy(dest []byte) int {",
                "+\tif v.b != nil {",
                "+\t\treturn copy(dest, v.b)",
                "+\t}",
                "+\treturn copy(dest, v.s)",
                "+}",
                "+",
                "+// Equal returns whether the bytes in b are the same as the bytes in",
                "+// b2.",
                "+func (v ByteView) Equal(b2 ByteView) bool {",
                "+\tif b2.b == nil {",
                "+\t\treturn v.EqualString(b2.s)",
                "+\t}",
                "+\treturn v.EqualBytes(b2.b)",
                "+}",
                "+",
                "+// EqualString returns whether the bytes in b are the same as the bytes",
                "+// in s.",
                "+func (v ByteView) EqualString(s string) bool {",
                "+\tif v.b == nil {",
                "+\t\treturn v.s == s",
                "+\t}",
                "+\tl := v.Len()",
                "+\tif len(s) != l {",
                "+\t\treturn false",
                "+\t}",
                "+\tfor i, bi := range v.b {",
                "+\t\tif bi != s[i] {",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t}",
                "+\treturn true",
                "+}",
                "+",
                "+// EqualBytes returns whether the bytes in b are the same as the bytes",
                "+// in b2.",
                "+func (v ByteView) EqualBytes(b2 []byte) bool {",
                "+\tif v.b != nil {",
                "+\t\treturn bytes.Equal(v.b, b2)",
                "+\t}",
                "+\tl := v.Len()",
                "+\tif len(b2) != l {",
                "+\t\treturn false",
                "+\t}",
                "+\tfor i, bi := range b2 {",
                "+\t\tif bi != v.s[i] {",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t}",
                "+\treturn true",
                "+}",
                "+",
                "+// Reader returns an io.ReadSeeker for the bytes in v.",
                "+func (v ByteView) Reader() io.ReadSeeker {",
                "+\tif v.b != nil {",
                "+\t\treturn bytes.NewReader(v.b)",
                "+\t}",
                "+\treturn strings.NewReader(v.s)",
                "+}",
                "+",
                "+// ReadAt implements io.ReaderAt on the bytes in v.",
                "+func (v ByteView) ReadAt(p []byte, off int64) (n int, err error) {",
                "+\tif off < 0 {",
                "+\t\treturn 0, errors.New(\"view: invalid offset\")",
                "+\t}",
                "+\tif off >= int64(v.Len()) {",
                "+\t\treturn 0, io.EOF",
                "+\t}",
                "+\tn = v.SliceFrom(int(off)).Copy(p)",
                "+\tif n < len(p) {",
                "+\t\terr = io.EOF",
                "+\t}",
                "+\treturn",
                "+}",
                "diff --git a/vendor/github.com/golang/groupcache/groupcache.go b/vendor/github.com/golang/groupcache/groupcache.go",
                "new file mode 100644",
                "index 000000000..9499dbb6a",
                "--- /dev/null",
                "+++ b/vendor/github.com/golang/groupcache/groupcache.go",
                "@@ -0,0 +1,489 @@",
                "+/*",
                "+Copyright 2012 Google Inc.",
                "+",
                "+Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+you may not use this file except in compliance with the License.",
                "+You may obtain a copy of the License at",
                "+",
                "+     http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing, software",
                "+distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+See the License for the specific language governing permissions and",
                "+limitations under the License.",
                "+*/",
                "+",
                "+// Package groupcache provides a data loading mechanism with caching",
                "+// and de-duplication that works across a set of peer processes.",
                "+//",
                "+// Each data Get first consults its local cache, otherwise delegates",
                "+// to the requested key's canonical owner, which then checks its cache",
                "+// or finally gets the data.  In the common case, many concurrent",
                "+// cache misses across a set of peers for the same key result in just",
                "+// one cache fill.",
                "+package groupcache",
                "+",
                "+import (",
                "+\t\"errors\"",
                "+\t\"math/rand\"",
                "+\t\"strconv\"",
                "+\t\"sync\"",
                "+\t\"sync/atomic\"",
                "+",
                "+\tpb \"github.com/golang/groupcache/groupcachepb\"",
                "+\t\"github.com/golang/groupcache/lru\"",
                "+\t\"github.com/golang/groupcache/singleflight\"",
                "+)",
                "+",
                "+// A Getter loads data for a key.",
                "+type Getter interface {",
                "+\t// Get returns the value identified by key, populating dest.",
                "+\t//",
                "+\t// The returned data must be unversioned. That is, key must",
                "+\t// uniquely describe the loaded data, without an implicit",
                "+\t// current time, and without relying on cache expiration",
                "+\t// mechanisms.",
                "+\tGet(ctx Context, key string, dest Sink) error",
                "+}",
                "+",
                "+// A GetterFunc implements Getter with a function.",
                "+type GetterFunc func(ctx Context, key string, dest Sink) error",
                "+",
                "+func (f GetterFunc) Get(ctx Context, key string, dest Sink) error {",
                "+\treturn f(ctx, key, dest)",
                "+}",
                "+",
                "+var (",
                "+\tmu     sync.RWMutex",
                "+\tgroups = make(map[string]*Group)",
                "+",
                "+\tinitPeerServerOnce sync.Once",
                "+\tinitPeerServer     func()",
                "+)",
                "+",
                "+// GetGroup returns the named group previously created with NewGroup, or",
                "+// nil if there's no such group.",
                "+func GetGroup(name string) *Group {",
                "+\tmu.RLock()",
                "+\tg := groups[name]",
                "+\tmu.RUnlock()",
                "+\treturn g",
                "+}",
                "+",
                "+// NewGroup creates a coordinated group-aware Getter from a Getter.",
                "+//",
                "+// The returned Getter tries (but does not guarantee) to run only one",
                "+// Get call at once for a given key across an entire set of peer",
                "+// processes. Concurrent callers both in the local process and in",
                "+// other processes receive copies of the answer once the original Get",
                "+// completes.",
                "+//",
                "+// The group name must be unique for each getter.",
                "+func NewGroup(name string, cacheBytes int64, getter Getter) *Group {",
                "+\treturn newGroup(name, cacheBytes, getter, nil)",
                "+}",
                "+",
                "+// If peers is nil, the peerPicker is called via a sync.Once to initialize it.",
                "+func newGroup(name string, cacheBytes int64, getter Getter, peers PeerPicker) *Group {",
                "+\tif getter == nil {",
                "+\t\tpanic(\"nil Getter\")",
                "+\t}",
                "+\tmu.Lock()",
                "+\tdefer mu.Unlock()",
                "+\tinitPeerServerOnce.Do(callInitPeerServer)",
                "+\tif _, dup := groups[name]; dup {",
                "+\t\tpanic(\"duplicate registration of group \" + name)",
                "+\t}",
                "+\tg := &Group{",
                "+\t\tname:       name,",
                "+\t\tgetter:     getter,",
                "+\t\tpeers:      peers,",
                "+\t\tcacheBytes: cacheBytes,",
                "+\t\tloadGroup:  &singleflight.Group{},",
                "+\t}",
                "+\tif fn := newGroupHook; fn != nil {",
                "+\t\tfn(g)",
                "+\t}",
                "+\tgroups[name] = g",
                "+\treturn g",
                "+}",
                "+",
                "+// newGroupHook, if non-nil, is called right after a new group is created.",
                "+var newGroupHook func(*Group)",
                "+",
                "+// RegisterNewGroupHook registers a hook that is run each time",
                "+// a group is created.",
                "+func RegisterNewGroupHook(fn func(*Group)) {",
                "+\tif newGroupHook != nil {",
                "+\t\tpanic(\"RegisterNewGroupHook called more than once\")",
                "+\t}",
                "+\tnewGroupHook = fn",
                "+}",
                "+",
                "+// RegisterServerStart registers a hook that is run when the first",
                "+// group is created.",
                "+func RegisterServerStart(fn func()) {",
                "+\tif initPeerServer != nil {",
                "+\t\tpanic(\"RegisterServerStart called more than once\")",
                "+\t}",
                "+\tinitPeerServer = fn",
                "+}",
                "+",
                "+func callInitPeerServer() {",
                "+\tif initPeerServer != nil {",
                "+\t\tinitPeerServer()",
                "+\t}",
                "+}",
                "+",
                "+// A Group is a cache namespace and associated data loaded spread over",
                "+// a group of 1 or more machines.",
                "+type Group struct {",
                "+\tname       string",
                "+\tgetter     Getter",
                "+\tpeersOnce  sync.Once",
                "+\tpeers      PeerPicker",
                "+\tcacheBytes int64 // limit for sum of mainCache and hotCache size",
                "+",
                "+\t// mainCache is a cache of the keys for which this process",
                "+\t// (amongst its peers) is authoritative. That is, this cache",
                "+\t// contains keys which consistent hash on to this process's",
                "+\t// peer number.",
                "+\tmainCache cache",
                "+",
                "+\t// hotCache contains keys/values for which this peer is not",
                "+\t// authoritative (otherwise they would be in mainCache), but",
                "+\t// are popular enough to warrant mirroring in this process to",
                "+\t// avoid going over the network to fetch from a peer.  Having",
                "+\t// a hotCache avoids network hotspotting, where a peer's",
                "+\t// network card could become the bottleneck on a popular key.",
                "+\t// This cache is used sparingly to maximize the total number",
                "+\t// of key/value pairs that can be stored globally.",
                "+\thotCache cache",
                "+",
                "+\t// loadGroup ensures that each key is only fetched once",
                "+\t// (either locally or remotely), regardless of the number of",
                "+\t// concurrent callers.",
                "+\tloadGroup flightGroup",
                "+",
                "+\t// Stats are statistics on the group.",
                "+\tStats Stats",
                "+}",
                "+",
                "+// flightGroup is defined as an interface which flightgroup.Group",
                "+// satisfies.  We define this so that we may test with an alternate",
                "+// implementation.",
                "+type flightGroup interface {",
                "+\t// Done is called when Do is done.",
                "+\tDo(key string, fn func() (interface{}, error)) (interface{}, error)",
                "+}",
                "+",
                "+// Stats are per-group statistics.",
                "+type Stats struct {",
                "+\tGets           AtomicInt // any Get request, including from peers",
                "+\tCacheHits      AtomicInt // either cache was good",
                "+\tPeerLoads      AtomicInt // either remote load or remote cache hit (not an error)",
                "+\tPeerErrors     AtomicInt",
                "+\tLoads          AtomicInt // (gets - cacheHits)",
                "+\tLoadsDeduped   AtomicInt // after singleflight",
                "+\tLocalLoads     AtomicInt // total good local loads",
                "+\tLocalLoadErrs  AtomicInt // total bad local loads",
                "+\tServerRequests AtomicInt // gets that came over the network from peers",
                "+}",
                "+",
                "+// Name returns the name of the group.",
                "+func (g *Group) Name() string {",
                "+\treturn g.name",
                "+}",
                "+",
                "+func (g *Group) initPeers() {",
                "+\tif g.peers == nil {",
                "+\t\tg.peers = getPeers()",
                "+\t}",
                "+}",
                "+",
                "+func (g *Group) Get(ctx Context, key string, dest Sink) error {",
                "+\tg.peersOnce.Do(g.initPeers)",
                "+\tg.Stats.Gets.Add(1)",
                "+\tif dest == nil {",
                "+\t\treturn errors.New(\"groupcache: nil dest Sink\")",
                "+\t}",
                "+\tvalue, cacheHit := g.lookupCache(key)",
                "+",
                "+\tif cacheHit {",
                "+\t\tg.Stats.CacheHits.Add(1)",
                "+\t\treturn setSinkView(dest, value)",
                "+\t}",
                "+",
                "+\t// Optimization to avoid double unmarshalling or copying: keep",
                "+\t// track of whether the dest was already populated. One caller",
                "+\t// (if local) will set this; the losers will not. The common",
                "+\t// case will likely be one caller.",
                "+\tdestPopulated := false",
                "+\tvalue, destPopulated, err := g.load(ctx, key, dest)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tif destPopulated {",
                "+\t\treturn nil",
                "+\t}",
                "+\treturn setSinkView(dest, value)",
                "+}",
                "+",
                "+// load loads key either by invoking the getter locally or by sending it to another machine.",
                "+func (g *Group) load(ctx Context, key string, dest Sink) (value ByteView, destPopulated bool, err error) {",
                "+\tg.Stats.Loads.Add(1)",
                "+\tviewi, err := g.loadGroup.Do(key, func() (interface{}, error) {",
                "+\t\t// Check the cache again because singleflight can only dedup calls",
                "+\t\t// that overlap concurrently.  It's possible for 2 concurrent",
                "+\t\t// requests to miss the cache, resulting in 2 load() calls.  An",
                "+\t\t// unfortunate goroutine scheduling would result in this callback",
                "+\t\t// being run twice, serially.  If we don't check the cache again,",
                "+\t\t// cache.nbytes would be incremented below even though there will",
                "+\t\t// be only one entry for this key.",
                "+\t\t//",
                "+\t\t// Consider the following serialized event ordering for two",
                "+\t\t// goroutines in which this callback gets called twice for hte",
                "+\t\t// same key:",
                "+\t\t// 1: Get(\"key\")",
                "+\t\t// 2: Get(\"key\")",
                "+\t\t// 1: lookupCache(\"key\")",
                "+\t\t// 2: lookupCache(\"key\")",
                "+\t\t// 1: load(\"key\")",
                "+\t\t// 2: load(\"key\")",
                "+\t\t// 1: loadGroup.Do(\"key\", fn)",
                "+\t\t// 1: fn()",
                "+\t\t// 2: loadGroup.Do(\"key\", fn)",
                "+\t\t// 2: fn()",
                "+\t\tif value, cacheHit := g.lookupCache(key); cacheHit {",
                "+\t\t\tg.Stats.CacheHits.Add(1)",
                "+\t\t\treturn value, nil",
                "+\t\t}",
                "+\t\tg.Stats.LoadsDeduped.Add(1)",
                "+\t\tvar value ByteView",
                "+\t\tvar err error",
                "+\t\tif peer, ok := g.peers.PickPeer(key); ok {",
                "+\t\t\tvalue, err = g.getFromPeer(ctx, peer, key)",
                "+\t\t\tif err == nil {",
                "+\t\t\t\tg.Stats.PeerLoads.Add(1)",
                "+\t\t\t\treturn value, nil",
                "+\t\t\t}",
                "+\t\t\tg.Stats.PeerErrors.Add(1)",
                "+\t\t\t// TODO(bradfitz): log the peer's error? keep",
                "+\t\t\t// log of the past few for /groupcachez?  It's",
                "+\t\t\t// probably boring (normal task movement), so not",
                "+\t\t\t// worth logging I imagine.",
                "+\t\t}",
                "+\t\tvalue, err = g.getLocally(ctx, key, dest)",
                "+\t\tif err != nil {",
                "+\t\t\tg.Stats.LocalLoadErrs.Add(1)",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\tg.Stats.LocalLoads.Add(1)",
                "+\t\tdestPopulated = true // only one caller of load gets this return value",
                "+\t\tg.populateCache(key, value, &g.mainCache)",
                "+\t\treturn value, nil",
                "+\t})",
                "+\tif err == nil {",
                "+\t\tvalue = viewi.(ByteView)",
                "+\t}",
                "+\treturn",
                "+}",
                "+",
                "+func (g *Group) getLocally(ctx Context, key string, dest Sink) (ByteView, error) {",
                "+\terr := g.getter.Get(ctx, key, dest)",
                "+\tif err != nil {",
                "+\t\treturn ByteView{}, err",
                "+\t}",
                "+\treturn dest.view()",
                "+}",
                "+",
                "+func (g *Group) getFromPeer(ctx Context, peer ProtoGetter, key string) (ByteView, error) {",
                "+\treq := &pb.GetRequest{",
                "+\t\tGroup: &g.name,",
                "+\t\tKey:   &key,",
                "+\t}",
                "+\tres := &pb.GetResponse{}",
                "+\terr := peer.Get(ctx, req, res)",
                "+\tif err != nil {",
                "+\t\treturn ByteView{}, err",
                "+\t}",
                "+\tvalue := ByteView{b: res.Value}",
                "+\t// TODO(bradfitz): use res.MinuteQps or something smart to",
                "+\t// conditionally populate hotCache.  For now just do it some",
                "+\t// percentage of the time.",
                "+\tif rand.Intn(10) == 0 {",
                "+\t\tg.populateCache(key, value, &g.hotCache)",
                "+\t}",
                "+\treturn value, nil",
                "+}",
                "+",
                "+func (g *Group) lookupCache(key string) (value ByteView, ok bool) {",
                "+\tif g.cacheBytes <= 0 {",
                "+\t\treturn",
                "+\t}",
                "+\tvalue, ok = g.mainCache.get(key)",
                "+\tif ok {",
                "+\t\treturn",
                "+\t}",
                "+\tvalue, ok = g.hotCache.get(key)",
                "+\treturn",
                "+}",
                "+",
                "+func (g *Group) populateCache(key string, value ByteView, cache *cache) {",
                "+\tif g.cacheBytes <= 0 {",
                "+\t\treturn",
                "+\t}",
                "+\tcache.add(key, value)",
                "+",
                "+\t// Evict items from cache(s) if necessary.",
                "+\tfor {",
                "+\t\tmainBytes := g.mainCache.bytes()",
                "+\t\thotBytes := g.hotCache.bytes()",
                "+\t\tif mainBytes+hotBytes <= g.cacheBytes {",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\t// TODO(bradfitz): this is good-enough-for-now logic.",
                "+\t\t// It should be something based on measurements and/or",
                "+\t\t// respecting the costs of different resources.",
                "+\t\tvictim := &g.mainCache",
                "+\t\tif hotBytes > mainBytes/8 {",
                "+\t\t\tvictim = &g.hotCache",
                "+\t\t}",
                "+\t\tvictim.removeOldest()",
                "+\t}",
                "+}",
                "+",
                "+// CacheType represents a type of cache.",
                "+type CacheType int",
                "+",
                "+const (",
                "+\t// The MainCache is the cache for items that this peer is the",
                "+\t// owner for.",
                "+\tMainCache CacheType = iota + 1",
                "+",
                "+\t// The HotCache is the cache for items that seem popular",
                "+\t// enough to replicate to this node, even though it's not the",
                "+\t// owner.",
                "+\tHotCache",
                "+)",
                "+",
                "+// CacheStats returns stats about the provided cache within the group.",
                "+func (g *Group) CacheStats(which CacheType) CacheStats {",
                "+\tswitch which {",
                "+\tcase MainCache:",
                "+\t\treturn g.mainCache.stats()",
                "+\tcase HotCache:",
                "+\t\treturn g.hotCache.stats()",
                "+\tdefault:",
                "+\t\treturn CacheStats{}",
                "+\t}",
                "+}",
                "+",
                "+// cache is a wrapper around an *lru.Cache that adds synchronization,",
                "+// makes values always be ByteView, and counts the size of all keys and",
                "+// values.",
                "+type cache struct {",
                "+\tmu         sync.RWMutex",
                "+\tnbytes     int64 // of all keys and values",
                "+\tlru        *lru.Cache",
                "+\tnhit, nget int64",
                "+\tnevict     int64 // number of evictions",
                "+}",
                "+",
                "+func (c *cache) stats() CacheStats {",
                "+\tc.mu.RLock()",
                "+\tdefer c.mu.RUnlock()",
                "+\treturn CacheStats{",
                "+\t\tBytes:     c.nbytes,",
                "+\t\tItems:     c.itemsLocked(),",
                "+\t\tGets:      c.nget,",
                "+\t\tHits:      c.nhit,",
                "+\t\tEvictions: c.nevict,",
                "+\t}",
                "+}",
                "+",
                "+func (c *cache) add(key string, value ByteView) {",
                "+\tc.mu.Lock()",
                "+\tdefer c.mu.Unlock()",
                "+\tif c.lru == nil {",
                "+\t\tc.lru = &lru.Cache{",
                "+\t\t\tOnEvicted: func(key lru.Key, value interface{}) {",
                "+\t\t\t\tval := value.(ByteView)",
                "+\t\t\t\tc.nbytes -= int64(len(key.(string))) + int64(val.Len())",
                "+\t\t\t\tc.nevict++",
                "+\t\t\t},",
                "+\t\t}",
                "+\t}",
                "+\tc.lru.Add(key, value)",
                "+\tc.nbytes += int64(len(key)) + int64(value.Len())",
                "+}",
                "+",
                "+func (c *cache) get(key string) (value ByteView, ok bool) {",
                "+\tc.mu.Lock()",
                "+\tdefer c.mu.Unlock()",
                "+\tc.nget++",
                "+\tif c.lru == nil {",
                "+\t\treturn",
                "+\t}",
                "+\tvi, ok := c.lru.Get(key)",
                "+\tif !ok {",
                "+\t\treturn",
                "+\t}",
                "+\tc.nhit++",
                "+\treturn vi.(ByteView), true",
                "+}",
                "+",
                "+func (c *cache) removeOldest() {",
                "+\tc.mu.Lock()",
                "+\tdefer c.mu.Unlock()",
                "+\tif c.lru != nil {",
                "+\t\tc.lru.RemoveOldest()",
                "+\t}",
                "+}",
                "+",
                "+func (c *cache) bytes() int64 {",
                "+\tc.mu.RLock()",
                "+\tdefer c.mu.RUnlock()",
                "+\treturn c.nbytes",
                "+}",
                "+",
                "+func (c *cache) items() int64 {",
                "+\tc.mu.RLock()",
                "+\tdefer c.mu.RUnlock()",
                "+\treturn c.itemsLocked()",
                "+}",
                "+",
                "+func (c *cache) itemsLocked() int64 {",
                "+\tif c.lru == nil {",
                "+\t\treturn 0",
                "+\t}",
                "+\treturn int64(c.lru.Len())",
                "+}",
                "+",
                "+// An AtomicInt is an int64 to be accessed atomically.",
                "+type AtomicInt int64",
                "+",
                "+// Add atomically adds n to i.",
                "+func (i *AtomicInt) Add(n int64) {",
                "+\tatomic.AddInt64((*int64)(i), n)",
                "+}",
                "+",
                "+// Get atomically gets the value of i.",
                "+func (i *AtomicInt) Get() int64 {",
                "+\treturn atomic.LoadInt64((*int64)(i))",
                "+}",
                "+",
                "+func (i *AtomicInt) String() string {",
                "+\treturn strconv.FormatInt(i.Get(), 10)",
                "+}",
                "+",
                "+// CacheStats are returned by stats accessors on Group.",
                "+type CacheStats struct {",
                "+\tBytes     int64",
                "+\tItems     int64",
                "+\tGets      int64",
                "+\tHits      int64",
                "+\tEvictions int64",
                "+}",
                "diff --git a/vendor/github.com/golang/groupcache/http.go b/vendor/github.com/golang/groupcache/http.go",
                "new file mode 100644",
                "index 000000000..14eb345a8",
                "--- /dev/null",
                "+++ b/vendor/github.com/golang/groupcache/http.go",
                "@@ -0,0 +1,227 @@",
                "+/*",
                "+Copyright 2013 Google Inc.",
                "+",
                "+Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+you may not use this file except in compliance with the License.",
                "+You may obtain a copy of the License at",
                "+",
                "+     http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing, software",
                "+distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+See the License for the specific language governing permissions and",
                "+limitations under the License.",
                "+*/",
                "+",
                "+package groupcache",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"net/http\"",
                "+\t\"net/url\"",
                "+\t\"strings\"",
                "+\t\"sync\"",
                "+",
                "+\t\"github.com/golang/groupcache/consistenthash\"",
                "+\tpb \"github.com/golang/groupcache/groupcachepb\"",
                "+\t\"github.com/golang/protobuf/proto\"",
                "+)",
                "+",
                "+const defaultBasePath = \"/_groupcache/\"",
                "+",
                "+const defaultReplicas = 50",
                "+",
                "+// HTTPPool implements PeerPicker for a pool of HTTP peers.",
                "+type HTTPPool struct {",
                "+\t// Context optionally specifies a context for the server to use when it",
                "+\t// receives a request.",
                "+\t// If nil, the server uses a nil Context.",
                "+\tContext func(*http.Request) Context",
                "+",
                "+\t// Transport optionally specifies an http.RoundTripper for the client",
                "+\t// to use when it makes a request.",
                "+\t// If nil, the client uses http.DefaultTransport.",
                "+\tTransport func(Context) http.RoundTripper",
                "+",
                "+\t// this peer's base URL, e.g. \"https://example.net:8000\"",
                "+\tself string",
                "+",
                "+\t// opts specifies the options.",
                "+\topts HTTPPoolOptions",
                "+",
                "+\tmu          sync.Mutex // guards peers and httpGetters",
                "+\tpeers       *consistenthash.Map",
                "+\thttpGetters map[string]*httpGetter // keyed by e.g. \"http://10.0.0.2:8008\"",
                "+}",
                "+",
                "+// HTTPPoolOptions are the configurations of a HTTPPool.",
                "+type HTTPPoolOptions struct {",
                "+\t// BasePath specifies the HTTP path that will serve groupcache requests.",
                "+\t// If blank, it defaults to \"/_groupcache/\".",
                "+\tBasePath string",
                "+",
                "+\t// Replicas specifies the number of key replicas on the consistent hash.",
                "+\t// If blank, it defaults to 50.",
                "+\tReplicas int",
                "+",
                "+\t// HashFn specifies the hash function of the consistent hash.",
                "+\t// If blank, it defaults to crc32.ChecksumIEEE.",
                "+\tHashFn consistenthash.Hash",
                "+}",
                "+",
                "+// NewHTTPPool initializes an HTTP pool of peers, and registers itself as a PeerPicker.",
                "+// For convenience, it also registers itself as an http.Handler with http.DefaultServeMux.",
                "+// The self argument be a valid base URL that points to the current server,",
                "+// for example \"http://example.net:8000\".",
                "+func NewHTTPPool(self string) *HTTPPool {",
                "+\tp := NewHTTPPoolOpts(self, nil)",
                "+\thttp.Handle(p.opts.BasePath, p)",
                "+\treturn p",
                "+}",
                "+",
                "+var httpPoolMade bool",
                "+",
                "+// NewHTTPPoolOpts initializes an HTTP pool of peers with the given options.",
                "+// Unlike NewHTTPPool, this function does not register the created pool as an HTTP handler.",
                "+// The returned *HTTPPool implements http.Handler and must be registered using http.Handle.",
                "+func NewHTTPPoolOpts(self string, o *HTTPPoolOptions) *HTTPPool {",
                "+\tif httpPoolMade {",
                "+\t\tpanic(\"groupcache: NewHTTPPool must be called only once\")",
                "+\t}",
                "+\thttpPoolMade = true",
                "+",
                "+\tp := &HTTPPool{",
                "+\t\tself:        self,",
                "+\t\thttpGetters: make(map[string]*httpGetter),",
                "+\t}",
                "+\tif o != nil {",
                "+\t\tp.opts = *o",
                "+\t}",
                "+\tif p.opts.BasePath == \"\" {",
                "+\t\tp.opts.BasePath = defaultBasePath",
                "+\t}",
                "+\tif p.opts.Replicas == 0 {",
                "+\t\tp.opts.Replicas = defaultReplicas",
                "+\t}",
                "+\tp.peers = consistenthash.New(p.opts.Replicas, p.opts.HashFn)",
                "+",
                "+\tRegisterPeerPicker(func() PeerPicker { return p })",
                "+\treturn p",
                "+}",
                "+",
                "+// Set updates the pool's list of peers.",
                "+// Each peer value should be a valid base URL,",
                "+// for example \"http://example.net:8000\".",
                "+func (p *HTTPPool) Set(peers ...string) {",
                "+\tp.mu.Lock()",
                "+\tdefer p.mu.Unlock()",
                "+\tp.peers = consistenthash.New(p.opts.Replicas, p.opts.HashFn)",
                "+\tp.peers.Add(peers...)",
                "+\tp.httpGetters = make(map[string]*httpGetter, len(peers))",
                "+\tfor _, peer := range peers {",
                "+\t\tp.httpGetters[peer] = &httpGetter{transport: p.Transport, baseURL: peer + p.opts.BasePath}",
                "+\t}",
                "+}",
                "+",
                "+func (p *HTTPPool) PickPeer(key string) (ProtoGetter, bool) {",
                "+\tp.mu.Lock()",
                "+\tdefer p.mu.Unlock()",
                "+\tif p.peers.IsEmpty() {",
                "+\t\treturn nil, false",
                "+\t}",
                "+\tif peer := p.peers.Get(key); peer != p.self {",
                "+\t\treturn p.httpGetters[peer], true",
                "+\t}",
                "+\treturn nil, false",
                "+}",
                "+",
                "+func (p *HTTPPool) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
                "+\t// Parse request.",
                "+\tif !strings.HasPrefix(r.URL.Path, p.opts.BasePath) {",
                "+\t\tpanic(\"HTTPPool serving unexpected path: \" + r.URL.Path)",
                "+\t}",
                "+\tparts := strings.SplitN(r.URL.Path[len(p.opts.BasePath):], \"/\", 2)",
                "+\tif len(parts) != 2 {",
                "+\t\thttp.Error(w, \"bad request\", http.StatusBadRequest)",
                "+\t\treturn",
                "+\t}",
                "+\tgroupName := parts[0]",
                "+\tkey := parts[1]",
                "+",
                "+\t// Fetch the value for this group/key.",
                "+\tgroup := GetGroup(groupName)",
                "+\tif group == nil {",
                "+\t\thttp.Error(w, \"no such group: \"+groupName, http.StatusNotFound)",
                "+\t\treturn",
                "+\t}",
                "+\tvar ctx Context",
                "+\tif p.Context != nil {",
                "+\t\tctx = p.Context(r)",
                "+\t}",
                "+",
                "+\tgroup.Stats.ServerRequests.Add(1)",
                "+\tvar value []byte",
                "+\terr := group.Get(ctx, key, AllocatingByteSliceSink(&value))",
                "+\tif err != nil {",
                "+\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\t// Write the value to the response body as a proto message.",
                "+\tbody, err := proto.Marshal(&pb.GetResponse{Value: value})",
                "+\tif err != nil {",
                "+\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)",
                "+\t\treturn",
                "+\t}",
                "+\tw.Header().Set(\"Content-Type\", \"application/x-protobuf\")",
                "+\tw.Write(body)",
                "+}",
                "+",
                "+type httpGetter struct {",
                "+\ttransport func(Context) http.RoundTripper",
                "+\tbaseURL   string",
                "+}",
                "+",
                "+var bufferPool = sync.Pool{",
                "+\tNew: func() interface{} { return new(bytes.Buffer) },",
                "+}",
                "+",
                "+func (h *httpGetter) Get(context Context, in *pb.GetRequest, out *pb.GetResponse) error {",
                "+\tu := fmt.Sprintf(",
                "+\t\t\"%v%v/%v\",",
                "+\t\th.baseURL,",
                "+\t\turl.QueryEscape(in.GetGroup()),",
                "+\t\turl.QueryEscape(in.GetKey()),",
                "+\t)",
                "+\treq, err := http.NewRequest(\"GET\", u, nil)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\ttr := http.DefaultTransport",
                "+\tif h.transport != nil {",
                "+\t\ttr = h.transport(context)",
                "+\t}",
                "+\tres, err := tr.RoundTrip(req)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tdefer res.Body.Close()",
                "+\tif res.StatusCode != http.StatusOK {",
                "+\t\treturn fmt.Errorf(\"server returned: %v\", res.Status)",
                "+\t}",
                "+\tb := bufferPool.Get().(*bytes.Buffer)",
                "+\tb.Reset()",
                "+\tdefer bufferPool.Put(b)",
                "+\t_, err = io.Copy(b, res.Body)",
                "+\tif err != nil {",
                "+\t\treturn fmt.Errorf(\"reading response body: %v\", err)",
                "+\t}",
                "+\terr = proto.Unmarshal(b.Bytes(), out)",
                "+\tif err != nil {",
                "+\t\treturn fmt.Errorf(\"decoding response body: %v\", err)",
                "+\t}",
                "+\treturn nil",
                "+}",
                "diff --git a/vendor/github.com/golang/groupcache/peers.go b/vendor/github.com/golang/groupcache/peers.go",
                "new file mode 100644",
                "index 000000000..a74a79b8f",
                "--- /dev/null",
                "+++ b/vendor/github.com/golang/groupcache/peers.go",
                "@@ -0,0 +1,71 @@",
                "+/*",
                "+Copyright 2012 Google Inc.",
                "+",
                "+Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+you may not use this file except in compliance with the License.",
                "+You may obtain a copy of the License at",
                "+",
                "+     http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing, software",
                "+distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+See the License for the specific language governing permissions and",
                "+limitations under the License.",
                "+*/",
                "+",
                "+// peers.go defines how processes find and communicate with their peers.",
                "+",
                "+package groupcache",
                "+",
                "+import (",
                "+\tpb \"github.com/golang/groupcache/groupcachepb\"",
                "+)",
                "+",
                "+// Context is an opaque value passed through calls to the",
                "+// ProtoGetter. It may be nil if your ProtoGetter implementation does",
                "+// not require a context.",
                "+type Context interface{}",
                "+",
                "+// ProtoGetter is the interface that must be implemented by a peer.",
                "+type ProtoGetter interface {",
                "+\tGet(context Context, in *pb.GetRequest, out *pb.GetResponse) error",
                "+}",
                "+",
                "+// PeerPicker is the interface that must be implemented to locate",
                "+// the peer that owns a specific key.",
                "+type PeerPicker interface {",
                "+\t// PickPeer returns the peer that owns the specific key",
                "+\t// and true to indicate that a remote peer was nominated.",
                "+\t// It returns nil, false if the key owner is the current peer.",
                "+\tPickPeer(key string) (peer ProtoGetter, ok bool)",
                "+}",
                "+",
                "+// NoPeers is an implementation of PeerPicker that never finds a peer.",
                "+type NoPeers struct{}",
                "+",
                "+func (NoPeers) PickPeer(key string) (peer ProtoGetter, ok bool) { return }",
                "+",
                "+var (",
                "+\tportPicker func() PeerPicker",
                "+)",
                "+",
                "+// RegisterPeerPicker registers the peer initialization function.",
                "+// It is called once, when the first group is created.",
                "+func RegisterPeerPicker(fn func() PeerPicker) {",
                "+\tif portPicker != nil {",
                "+\t\tpanic(\"RegisterPeerPicker called more than once\")",
                "+\t}",
                "+\tportPicker = fn",
                "+}",
                "+",
                "+func getPeers() PeerPicker {",
                "+\tif portPicker == nil {",
                "+\t\treturn NoPeers{}",
                "+\t}",
                "+\tpk := portPicker()",
                "+\tif pk == nil {",
                "+\t\tpk = NoPeers{}",
                "+\t}",
                "+\treturn pk",
                "+}",
                "diff --git a/vendor/github.com/golang/groupcache/sinks.go b/vendor/github.com/golang/groupcache/sinks.go",
                "new file mode 100644",
                "index 000000000..cb42b41b4",
                "--- /dev/null",
                "+++ b/vendor/github.com/golang/groupcache/sinks.go",
                "@@ -0,0 +1,322 @@",
                "+/*",
                "+Copyright 2012 Google Inc.",
                "+",
                "+Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+you may not use this file except in compliance with the License.",
                "+You may obtain a copy of the License at",
                "+",
                "+     http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing, software",
                "+distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+See the License for the specific language governing permissions and",
                "+limitations under the License.",
                "+*/",
                "+",
                "+package groupcache",
                "+",
                "+import (",
                "+\t\"errors\"",
                "+",
                "+\t\"github.com/golang/protobuf/proto\"",
                "+)",
                "+",
                "+// A Sink receives data from a Get call.",
                "+//",
                "+// Implementation of Getter must call exactly one of the Set methods",
                "+// on success.",
                "+type Sink interface {",
                "+\t// SetString sets the value to s.",
                "+\tSetString(s string) error",
                "+",
                "+\t// SetBytes sets the value to the contents of v.",
                "+\t// The caller retains ownership of v.",
                "+\tSetBytes(v []byte) error",
                "+",
                "+\t// SetProto sets the value to the encoded version of m.",
                "+\t// The caller retains ownership of m.",
                "+\tSetProto(m proto.Message) error",
                "+",
                "+\t// view returns a frozen view of the bytes for caching.",
                "+\tview() (ByteView, error)",
                "+}",
                "+",
                "+func cloneBytes(b []byte) []byte {",
                "+\tc := make([]byte, len(b))",
                "+\tcopy(c, b)",
                "+\treturn c",
                "+}",
                "+",
                "+func setSinkView(s Sink, v ByteView) error {",
                "+\t// A viewSetter is a Sink that can also receive its value from",
                "+\t// a ByteView. This is a fast path to minimize copies when the",
                "+\t// item was already cached locally in memory (where it's",
                "+\t// cached as a ByteView)",
                "+\ttype viewSetter interface {",
                "+\t\tsetView(v ByteView) error",
                "+\t}",
                "+\tif vs, ok := s.(viewSetter); ok {",
                "+\t\treturn vs.setView(v)",
                "+\t}",
                "+\tif v.b != nil {",
                "+\t\treturn s.SetBytes(v.b)",
                "+\t}",
                "+\treturn s.SetString(v.s)",
                "+}",
                "+",
                "+// StringSink returns a Sink that populates the provided string pointer.",
                "+func StringSink(sp *string) Sink {",
                "+\treturn &stringSink{sp: sp}",
                "+}",
                "+",
                "+type stringSink struct {",
                "+\tsp *string",
                "+\tv  ByteView",
                "+\t// TODO(bradfitz): track whether any Sets were called.",
                "+}",
                "+",
                "+func (s *stringSink) view() (ByteView, error) {",
                "+\t// TODO(bradfitz): return an error if no Set was called",
                "+\treturn s.v, nil",
                "+}",
                "+",
                "+func (s *stringSink) SetString(v string) error {",
                "+\ts.v.b = nil",
                "+\ts.v.s = v",
                "+\t*s.sp = v",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *stringSink) SetBytes(v []byte) error {",
                "+\treturn s.SetString(string(v))",
                "+}",
                "+",
                "+func (s *stringSink) SetProto(m proto.Message) error {",
                "+\tb, err := proto.Marshal(m)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\ts.v.b = b",
                "+\t*s.sp = string(b)",
                "+\treturn nil",
                "+}",
                "+",
                "+// ByteViewSink returns a Sink that populates a ByteView.",
                "+func ByteViewSink(dst *ByteView) Sink {",
                "+\tif dst == nil {",
                "+\t\tpanic(\"nil dst\")",
                "+\t}",
                "+\treturn &byteViewSink{dst: dst}",
                "+}",
                "+",
                "+type byteViewSink struct {",
                "+\tdst *ByteView",
                "+",
                "+\t// if this code ever ends up tracking that at least one set*",
                "+\t// method was called, don't make it an error to call set",
                "+\t// methods multiple times. Lorry's payload.go does that, and",
                "+\t// it makes sense. The comment at the top of this file about",
                "+\t// \"exactly one of the Set methods\" is overly strict. We",
                "+\t// really care about at least once (in a handler), but if",
                "+\t// multiple handlers fail (or multiple functions in a program",
                "+\t// using a Sink), it's okay to re-use the same one.",
                "+}",
                "+",
                "+func (s *byteViewSink) setView(v ByteView) error {",
                "+\t*s.dst = v",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *byteViewSink) view() (ByteView, error) {",
                "+\treturn *s.dst, nil",
                "+}",
                "+",
                "+func (s *byteViewSink) SetProto(m proto.Message) error {",
                "+\tb, err := proto.Marshal(m)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\t*s.dst = ByteView{b: b}",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *byteViewSink) SetBytes(b []byte) error {",
                "+\t*s.dst = ByteView{b: cloneBytes(b)}",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *byteViewSink) SetString(v string) error {",
                "+\t*s.dst = ByteView{s: v}",
                "+\treturn nil",
                "+}",
                "+",
                "+// ProtoSink returns a sink that unmarshals binary proto values into m.",
                "+func ProtoSink(m proto.Message) Sink {",
                "+\treturn &protoSink{",
                "+\t\tdst: m,",
                "+\t}",
                "+}",
                "+",
                "+type protoSink struct {",
                "+\tdst proto.Message // authorative value",
                "+\ttyp string",
                "+",
                "+\tv ByteView // encoded",
                "+}",
                "+",
                "+func (s *protoSink) view() (ByteView, error) {",
                "+\treturn s.v, nil",
                "+}",
                "+",
                "+func (s *protoSink) SetBytes(b []byte) error {",
                "+\terr := proto.Unmarshal(b, s.dst)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\ts.v.b = cloneBytes(b)",
                "+\ts.v.s = \"\"",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *protoSink) SetString(v string) error {",
                "+\tb := []byte(v)",
                "+\terr := proto.Unmarshal(b, s.dst)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\ts.v.b = b",
                "+\ts.v.s = \"\"",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *protoSink) SetProto(m proto.Message) error {",
                "+\tb, err := proto.Marshal(m)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\t// TODO(bradfitz): optimize for same-task case more and write",
                "+\t// right through? would need to document ownership rules at",
                "+\t// the same time. but then we could just assign *dst = *m",
                "+\t// here. This works for now:",
                "+\terr = proto.Unmarshal(b, s.dst)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\ts.v.b = b",
                "+\ts.v.s = \"\"",
                "+\treturn nil",
                "+}",
                "+",
                "+// AllocatingByteSliceSink returns a Sink that allocates",
                "+// a byte slice to hold the received value and assigns",
                "+// it to *dst. The memory is not retained by groupcache.",
                "+func AllocatingByteSliceSink(dst *[]byte) Sink {",
                "+\treturn &allocBytesSink{dst: dst}",
                "+}",
                "+",
                "+type allocBytesSink struct {",
                "+\tdst *[]byte",
                "+\tv   ByteView",
                "+}",
                "+",
                "+func (s *allocBytesSink) view() (ByteView, error) {",
                "+\treturn s.v, nil",
                "+}",
                "+",
                "+func (s *allocBytesSink) setView(v ByteView) error {",
                "+\tif v.b != nil {",
                "+\t\t*s.dst = cloneBytes(v.b)",
                "+\t} else {",
                "+\t\t*s.dst = []byte(v.s)",
                "+\t}",
                "+\ts.v = v",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *allocBytesSink) SetProto(m proto.Message) error {",
                "+\tb, err := proto.Marshal(m)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\treturn s.setBytesOwned(b)",
                "+}",
                "+",
                "+func (s *allocBytesSink) SetBytes(b []byte) error {",
                "+\treturn s.setBytesOwned(cloneBytes(b))",
                "+}",
                "+",
                "+func (s *allocBytesSink) setBytesOwned(b []byte) error {",
                "+\tif s.dst == nil {",
                "+\t\treturn errors.New(\"nil AllocatingByteSliceSink *[]byte dst\")",
                "+\t}",
                "+\t*s.dst = cloneBytes(b) // another copy, protecting the read-only s.v.b view",
                "+\ts.v.b = b",
                "+\ts.v.s = \"\"",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *allocBytesSink) SetString(v string) error {",
                "+\tif s.dst == nil {",
                "+\t\treturn errors.New(\"nil AllocatingByteSliceSink *[]byte dst\")",
                "+\t}",
                "+\t*s.dst = []byte(v)",
                "+\ts.v.b = nil",
                "+\ts.v.s = v",
                "+\treturn nil",
                "+}",
                "+",
                "+// TruncatingByteSliceSink returns a Sink that writes up to len(*dst)",
                "+// bytes to *dst. If more bytes are available, they're silently",
                "+// truncated. If fewer bytes are available than len(*dst), *dst",
                "+// is shrunk to fit the number of bytes available.",
                "+func TruncatingByteSliceSink(dst *[]byte) Sink {",
                "+\treturn &truncBytesSink{dst: dst}",
                "+}",
                "+",
                "+type truncBytesSink struct {",
                "+\tdst *[]byte",
                "+\tv   ByteView",
                "+}",
                "+",
                "+func (s *truncBytesSink) view() (ByteView, error) {",
                "+\treturn s.v, nil",
                "+}",
                "+",
                "+func (s *truncBytesSink) SetProto(m proto.Message) error {",
                "+\tb, err := proto.Marshal(m)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\treturn s.setBytesOwned(b)",
                "+}",
                "+",
                "+func (s *truncBytesSink) SetBytes(b []byte) error {",
                "+\treturn s.setBytesOwned(cloneBytes(b))",
                "+}",
                "+",
                "+func (s *truncBytesSink) setBytesOwned(b []byte) error {",
                "+\tif s.dst == nil {",
                "+\t\treturn errors.New(\"nil TruncatingByteSliceSink *[]byte dst\")",
                "+\t}",
                "+\tn := copy(*s.dst, b)",
                "+\tif n < len(*s.dst) {",
                "+\t\t*s.dst = (*s.dst)[:n]",
                "+\t}",
                "+\ts.v.b = b",
                "+\ts.v.s = \"\"",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *truncBytesSink) SetString(v string) error {",
                "+\tif s.dst == nil {",
                "+\t\treturn errors.New(\"nil TruncatingByteSliceSink *[]byte dst\")",
                "+\t}",
                "+\tn := copy(*s.dst, v)",
                "+\tif n < len(*s.dst) {",
                "+\t\t*s.dst = (*s.dst)[:n]",
                "+\t}",
                "+\ts.v.b = nil",
                "+\ts.v.s = v",
                "+\treturn nil",
                "+}",
                "diff --git a/vendor/github.com/spf13/cobra/cobra/cmd/licenses.go b/vendor/github.com/spf13/cobra/cobra/cmd/licenses.go",
                "deleted file mode 100644",
                "index 5ad9c96ef..000000000",
                "--- a/vendor/github.com/spf13/cobra/cobra/cmd/licenses.go",
                "+++ /dev/null",
                "@@ -1,1133 +0,0 @@",
                "-// Copyright \u00c2\u00a9 2015 Steve Francia <spf@spf13.com>.",
                "-//",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-// http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.",
                "-",
                "-// Parts inspired by https://github.com/ryanuber/go-license",
                "-",
                "-package cmd",
                "-",
                "-import \"strings\"",
                "-",
                "-//Licenses contains all possible licenses a user can chose from",
                "-var Licenses map[string]License",
                "-",
                "-//License represents a software license agreement, containing the Name of",
                "-// the license, its possible matches (on the command line as given to cobra)",
                "-// the header to be used with each file on the file's creating, and the text",
                "-// of the license",
                "-type License struct {",
                "-\tName            string   // The type of license in use",
                "-\tPossibleMatches []string // Similar names to guess",
                "-\tText            string   // License text data",
                "-\tHeader          string   // License header for source files",
                "-}",
                "-",
                "-// given a license name (in), try to match the license indicated",
                "-func matchLicense(in string) string {",
                "-\tfor key, lic := range Licenses {",
                "-\t\tfor _, match := range lic.PossibleMatches {",
                "-\t\t\tif strings.EqualFold(in, match) {",
                "-\t\t\t\treturn key",
                "-\t\t\t}",
                "-\t\t}",
                "-\t}",
                "-\treturn \"\"",
                "-}",
                "-",
                "-func init() {",
                "-\tLicenses = make(map[string]License)",
                "-",
                "-\tLicenses[\"apache\"] = License{",
                "-\t\tName:            \"Apache 2.0\",",
                "-\t\tPossibleMatches: []string{\"apache\", \"apache20\", \"apache 2.0\", \"apache2.0\", \"apache-2.0\"},",
                "-\t\tHeader: `",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-//",
                "-//     http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.`,",
                "-\t\tText: `",
                "-                                 Apache License",
                "-                           Version 2.0, January 2004",
                "-                        http://www.apache.org/licenses/",
                "-",
                "-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION",
                "-",
                "-   1. Definitions.",
                "-",
                "-      \"License\" shall mean the terms and conditions for use, reproduction,",
                "-      and distribution as defined by Sections 1 through 9 of this document.",
                "-",
                "-      \"Licensor\" shall mean the copyright owner or entity authorized by",
                "-      the copyright owner that is granting the License.",
                "-",
                "-      \"Legal Entity\" shall mean the union of the acting entity and all",
                "-      other entities that control, are controlled by, or are under common",
                "-      control with that entity. For the purposes of this definition,",
                "-      \"control\" means (i) the power, direct or indirect, to cause the",
                "-      direction or management of such entity, whether by contract or",
                "-      otherwise, or (ii) ownership of fifty percent (50%) or more of the",
                "-      outstanding shares, or (iii) beneficial ownership of such entity.",
                "-",
                "-      \"You\" (or \"Your\") shall mean an individual or Legal Entity",
                "-      exercising permissions granted by this License.",
                "-",
                "-      \"Source\" form shall mean the preferred form for making modifications,",
                "-      including but not limited to software source code, documentation",
                "-      source, and configuration files.",
                "-",
                "-      \"Object\" form shall mean any form resulting from mechanical",
                "-      transformation or translation of a Source form, including but",
                "-      not limited to compiled object code, generated documentation,",
                "-      and conversions to other media types.",
                "-",
                "-      \"Work\" shall mean the work of authorship, whether in Source or",
                "-      Object form, made available under the License, as indicated by a",
                "-      copyright notice that is included in or attached to the work",
                "-      (an example is provided in the Appendix below).",
                "-",
                "-      \"Derivative Works\" shall mean any work, whether in Source or Object",
                "-      form, that is based on (or derived from) the Work and for which the",
                "-      editorial revisions, annotations, elaborations, or other modifications",
                "-      represent, as a whole, an original work of authorship. For the purposes",
                "-      of this License, Derivative Works shall not include works that remain",
                "-      separable from, or merely link (or bind by name) to the interfaces of,",
                "-      the Work and Derivative Works thereof.",
                "-",
                "-      \"Contribution\" shall mean any work of authorship, including",
                "-      the original version of the Work and any modifications or additions",
                "-      to that Work or Derivative Works thereof, that is intentionally",
                "-      submitted to Licensor for inclusion in the Work by the copyright owner",
                "-      or by an individual or Legal Entity authorized to submit on behalf of",
                "-      the copyright owner. For the purposes of this definition, \"submitted\"",
                "-      means any form of electronic, verbal, or written communication sent",
                "-      to the Licensor or its representatives, including but not limited to",
                "-      communication on electronic mailing lists, source code control systems,",
                "-      and issue tracking systems that are managed by, or on behalf of, the",
                "-      Licensor for the purpose of discussing and improving the Work, but",
                "-      excluding communication that is conspicuously marked or otherwise",
                "-      designated in writing by the copyright owner as \"Not a Contribution.\"",
                "-",
                "-      \"Contributor\" shall mean Licensor and any individual or Legal Entity",
                "-      on behalf of whom a Contribution has been received by Licensor and",
                "-      subsequently incorporated within the Work.",
                "-",
                "-   2. Grant of Copyright License. Subject to the terms and conditions of",
                "-      this License, each Contributor hereby grants to You a perpetual,",
                "-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable",
                "-      copyright license to reproduce, prepare Derivative Works of,",
                "-      publicly display, publicly perform, sublicense, and distribute the",
                "-      Work and such Derivative Works in Source or Object form.",
                "-",
                "-   3. Grant of Patent License. Subject to the terms and conditions of",
                "-      this License, each Contributor hereby grants to You a perpetual,",
                "-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable",
                "-      (except as stated in this section) patent license to make, have made,",
                "-      use, offer to sell, sell, import, and otherwise transfer the Work,",
                "-      where such license applies only to those patent claims licensable",
                "-      by such Contributor that are necessarily infringed by their",
                "-      Contribution(s) alone or by combination of their Contribution(s)",
                "-      with the Work to which such Contribution(s) was submitted. If You",
                "-      institute patent litigation against any entity (including a",
                "-      cross-claim or counterclaim in a lawsuit) alleging that the Work",
                "-      or a Contribution incorporated within the Work constitutes direct",
                "-      or contributory patent infringement, then any patent licenses",
                "-      granted to You under this License for that Work shall terminate",
                "-      as of the date such litigation is filed.",
                "-",
                "-   4. Redistribution. You may reproduce and distribute copies of the",
                "-      Work or Derivative Works thereof in any medium, with or without",
                "-      modifications, and in Source or Object form, provided that You",
                "-      meet the following conditions:",
                "-",
                "-      (a) You must give any other recipients of the Work or",
                "-          Derivative Works a copy of this License; and",
                "-",
                "-      (b) You must cause any modified files to carry prominent notices",
                "-          stating that You changed the files; and",
                "-",
                "-      (c) You must retain, in the Source form of any Derivative Works",
                "-          that You distribute, all copyright, patent, trademark, and",
                "-          attribution notices from the Source form of the Work,",
                "-          excluding those notices that do not pertain to any part of",
                "-          the Derivative Works; and",
                "-",
                "-      (d) If the Work includes a \"NOTICE\" text file as part of its",
                "-          distribution, then any Derivative Works that You distribute must",
                "-          include a readable copy of the attribution notices contained",
                "-          within such NOTICE file, excluding those notices that do not",
                "-          pertain to any part of the Derivative Works, in at least one",
                "-          of the following places: within a NOTICE text file distributed",
                "-          as part of the Derivative Works; within the Source form or",
                "-          documentation, if provided along with the Derivative Works; or,",
                "-          within a display generated by the Derivative Works, if and",
                "-          wherever such third-party notices normally appear. The contents",
                "-          of the NOTICE file are for informational purposes only and",
                "-          do not modify the License. You may add Your own attribution",
                "-          notices within Derivative Works that You distribute, alongside",
                "-          or as an addendum to the NOTICE text from the Work, provided",
                "-          that such additional attribution notices cannot be construed",
                "-          as modifying the License.",
                "-",
                "-      You may add Your own copyright statement to Your modifications and",
                "-      may provide additional or different license terms and conditions",
                "-      for use, reproduction, or distribution of Your modifications, or",
                "-      for any such Derivative Works as a whole, provided Your use,",
                "-      reproduction, and distribution of the Work otherwise complies with",
                "-      the conditions stated in this License.",
                "-",
                "-   5. Submission of Contributions. Unless You explicitly state otherwise,",
                "-      any Contribution intentionally submitted for inclusion in the Work",
                "-      by You to the Licensor shall be under the terms and conditions of",
                "-      this License, without any additional terms or conditions.",
                "-      Notwithstanding the above, nothing herein shall supersede or modify",
                "-      the terms of any separate license agreement you may have executed",
                "-      with Licensor regarding such Contributions.",
                "-",
                "-   6. Trademarks. This License does not grant permission to use the trade",
                "-      names, trademarks, service marks, or product names of the Licensor,",
                "-      except as required for reasonable and customary use in describing the",
                "-      origin of the Work and reproducing the content of the NOTICE file.",
                "-",
                "-   7. Disclaimer of Warranty. Unless required by applicable law or",
                "-      agreed to in writing, Licensor provides the Work (and each",
                "-      Contributor provides its Contributions) on an \"AS IS\" BASIS,",
                "-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",
                "-      implied, including, without limitation, any warranties or conditions",
                "-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A",
                "-      PARTICULAR PURPOSE. You are solely responsible for determining the",
                "-      appropriateness of using or redistributing the Work and assume any",
                "-      risks associated with Your exercise of permissions under this License.",
                "-",
                "-   8. Limitation of Liability. In no event and under no legal theory,",
                "-      whether in tort (including negligence), contract, or otherwise,",
                "-      unless required by applicable law (such as deliberate and grossly",
                "-      negligent acts) or agreed to in writing, shall any Contributor be",
                "-      liable to You for damages, including any direct, indirect, special,",
                "-      incidental, or consequential damages of any character arising as a",
                "-      result of this License or out of the use or inability to use the",
                "-      Work (including but not limited to damages for loss of goodwill,",
                "-      work stoppage, computer failure or malfunction, or any and all",
                "-      other commercial damages or losses), even if such Contributor",
                "-      has been advised of the possibility of such damages.",
                "-",
                "-   9. Accepting Warranty or Additional Liability. While redistributing",
                "-      the Work or Derivative Works thereof, You may choose to offer,",
                "-      and charge a fee for, acceptance of support, warranty, indemnity,",
                "-      or other liability obligations and/or rights consistent with this",
                "-      License. However, in accepting such obligations, You may act only",
                "-      on Your own behalf and on Your sole responsibility, not on behalf",
                "-      of any other Contributor, and only if You agree to indemnify,",
                "-      defend, and hold each Contributor harmless for any liability",
                "-      incurred by, or claims asserted against, such Contributor by reason",
                "-      of your accepting any such warranty or additional liability.",
                "-",
                "-   END OF TERMS AND CONDITIONS",
                "-",
                "-   APPENDIX: How to apply the Apache License to your work.",
                "-",
                "-      To apply the Apache License to your work, attach the following",
                "-      boilerplate notice, with the fields enclosed by brackets \"[]\"",
                "-      replaced with your own identifying information. (Don't include",
                "-      the brackets!)  The text should be enclosed in the appropriate",
                "-      comment syntax for the file format. We also recommend that a",
                "-      file or class name and description of purpose be included on the",
                "-      same \"printed page\" as the copyright notice for easier",
                "-      identification within third-party archives.",
                "-",
                "-   Copyright [yyyy] [name of copyright owner]",
                "-",
                "-   Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-   you may not use this file except in compliance with the License.",
                "-   You may obtain a copy of the License at",
                "-",
                "-       http://www.apache.org/licenses/LICENSE-2.0",
                "-",
                "-   Unless required by applicable law or agreed to in writing, software",
                "-   distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-   See the License for the specific language governing permissions and",
                "-   limitations under the License.",
                "-`,",
                "-\t}",
                "-",
                "-\tLicenses[\"mit\"] = License{",
                "-\t\tName:            \"Mit\",",
                "-\t\tPossibleMatches: []string{\"mit\"},",
                "-\t\tHeader: `",
                "-Permission is hereby granted, free of charge, to any person obtaining a copy",
                "-of this software and associated documentation files (the \"Software\"), to deal",
                "-in the Software without restriction, including without limitation the rights",
                "-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
                "-copies of the Software, and to permit persons to whom the Software is",
                "-furnished to do so, subject to the following conditions:",
                "-",
                "-The above copyright notice and this permission notice shall be included in",
                "-all copies or substantial portions of the Software.",
                "-",
                "-THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
                "-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
                "-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
                "-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
                "-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
                "-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
                "-THE SOFTWARE.`,",
                "-\t\tText: `The MIT License (MIT)",
                "-",
                "-{{ .copyright }}",
                "-",
                "-Permission is hereby granted, free of charge, to any person obtaining a copy",
                "-of this software and associated documentation files (the \"Software\"), to deal",
                "-in the Software without restriction, including without limitation the rights",
                "-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
                "-copies of the Software, and to permit persons to whom the Software is",
                "-furnished to do so, subject to the following conditions:",
                "-",
                "-The above copyright notice and this permission notice shall be included in",
                "-all copies or substantial portions of the Software.",
                "-",
                "-THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
                "-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
                "-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
                "-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
                "-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
                "-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
                "-THE SOFTWARE.",
                "-`,",
                "-\t}",
                "-",
                "-\tLicenses[\"bsd\"] = License{",
                "-\t\tName:            \"NewBSD\",",
                "-\t\tPossibleMatches: []string{\"bsd\", \"newbsd\", \"3 clause bsd\"},",
                "-\t\tHeader: `",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are met:",
                "-",
                "-1. Redistributions of source code must retain the above copyright notice,",
                "-   this list of conditions and the following disclaimer.",
                "-",
                "-2. Redistributions in binary form must reproduce the above copyright notice,",
                "-   this list of conditions and the following disclaimer in the documentation",
                "-   and/or other materials provided with the distribution.",
                "-",
                "-3. Neither the name of the copyright holder nor the names of its contributors",
                "-   may be used to endorse or promote products derived from this software",
                "-   without specific prior written permission.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "-ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
                "-LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
                "-CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
                "-SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
                "-INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
                "-CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
                "-ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "-POSSIBILITY OF SUCH DAMAGE.`,",
                "-\t\tText: `{{ .copyright }}",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are met:",
                "-",
                "-1. Redistributions of source code must retain the above copyright notice,",
                "-   this list of conditions and the following disclaimer.",
                "-",
                "-2. Redistributions in binary form must reproduce the above copyright notice,",
                "-   this list of conditions and the following disclaimer in the documentation",
                "-   and/or other materials provided with the distribution.",
                "-",
                "-3. Neither the name of the copyright holder nor the names of its contributors",
                "-   may be used to endorse or promote products derived from this software",
                "-   without specific prior written permission.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE",
                "-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE",
                "-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL",
                "-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR",
                "-SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER",
                "-CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,",
                "-OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "-`,",
                "-\t}",
                "-",
                "-\tLicenses[\"freebsd\"] = License{",
                "-\t\tName:            \"Simplified BSD License\",",
                "-\t\tPossibleMatches: []string{\"freebsd\", \"simpbsd\", \"simple bsd\", \"2 clause bsd\"},",
                "-\t\tHeader: `",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are met:",
                "-",
                "-1. Redistributions of source code must retain the above copyright notice,",
                "-   this list of conditions and the following disclaimer.",
                "-",
                "-2. Redistributions in binary form must reproduce the above copyright notice,",
                "-   this list of conditions and the following disclaimer in the documentation",
                "-   and/or other materials provided with the distribution.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "-ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
                "-LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
                "-CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
                "-SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
                "-INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
                "-CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
                "-ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
                "-POSSIBILITY OF SUCH DAMAGE.`,",
                "-\t\tText: `{{ .copyright }}",
                "-All rights reserved.",
                "-",
                "-Redistribution and use in source and binary forms, with or without",
                "-modification, are permitted provided that the following conditions are met:",
                "-",
                "-1. Redistributions of source code must retain the above copyright notice,",
                "-   this list of conditions and the following disclaimer.",
                "-",
                "-2. Redistributions in binary form must reproduce the above copyright notice,",
                "-   this list of conditions and the following disclaimer in the documentation",
                "-   and/or other materials provided with the distribution.",
                "-",
                "-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
                "-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
                "-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE",
                "-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE",
                "-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL",
                "-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR",
                "-SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER",
                "-CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,",
                "-OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
                "-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
                "-`,",
                "-\t}",
                "-",
                "-\tLicenses[\"gpl3\"] = License{",
                "-\t\tName:            \"GNU General Public License 3.0\",",
                "-\t\tPossibleMatches: []string{\"gpl3\", \"gpl\", \"gnu gpl3\", \"gnu gpl\"},",
                "-\t\tHeader: `{{ .copyright }}",
                "-",
                "- This file is part of {{ .appName }}.",
                "-",
                "- {{ .appName }} is free software: you can redistribute it and/or modify",
                "- it under the terms of the GNU Lesser General Public License as published by",
                "- the Free Software Foundation, either version 3 of the License, or",
                "- (at your option) any later version.",
                "-",
                "- {{ .appName }} is distributed in the hope that it will be useful,",
                "- but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- GNU Lesser General Public License for more details.",
                "-",
                "- You should have received a copy of the GNU Lesser General Public License",
                "- along with {{ .appName }}. If not, see <http://www.gnu.org/licenses/>.",
                "-\t   `,",
                "-\t\tText: `                    GNU GENERAL PUBLIC LICENSE",
                "-                       Version 3, 29 June 2007",
                "-",
                "- Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>",
                "- Everyone is permitted to copy and distribute verbatim copies",
                "- of this license document, but changing it is not allowed.",
                "-",
                "-                            Preamble",
                "-",
                "-  The GNU General Public License is a free, copyleft license for",
                "-software and other kinds of works.",
                "-",
                "-  The licenses for most software and other practical works are designed",
                "-to take away your freedom to share and change the works.  By contrast,",
                "-the GNU General Public License is intended to guarantee your freedom to",
                "-share and change all versions of a program--to make sure it remains free",
                "-software for all its users.  We, the Free Software Foundation, use the",
                "-GNU General Public License for most of our software; it applies also to",
                "-any other work released this way by its authors.  You can apply it to",
                "-your programs, too.",
                "-",
                "-  When we speak of free software, we are referring to freedom, not",
                "-price.  Our General Public Licenses are designed to make sure that you",
                "-have the freedom to distribute copies of free software (and charge for",
                "-them if you wish), that you receive source code or can get it if you",
                "-want it, that you can change the software or use pieces of it in new",
                "-free programs, and that you know you can do these things.",
                "-",
                "-  To protect your rights, we need to prevent others from denying you",
                "-these rights or asking you to surrender the rights.  Therefore, you have",
                "-certain responsibilities if you distribute copies of the software, or if",
                "-you modify it: responsibilities to respect the freedom of others.",
                "-",
                "-  For example, if you distribute copies of such a program, whether",
                "-gratis or for a fee, you must pass on to the recipients the same",
                "-freedoms that you received.  You must make sure that they, too, receive",
                "-or can get the source code.  And you must show them these terms so they",
                "-know their rights.",
                "-",
                "-  Developers that use the GNU GPL protect your rights with two steps:",
                "-(1) assert copyright on the software, and (2) offer you this License",
                "-giving you legal permission to copy, distribute and/or modify it.",
                "-",
                "-  For the developers' and authors' protection, the GPL clearly explains",
                "-that there is no warranty for this free software.  For both users' and",
                "-authors' sake, the GPL requires that modified versions be marked as",
                "-changed, so that their problems will not be attributed erroneously to",
                "-authors of previous versions.",
                "-",
                "-  Some devices are designed to deny users access to install or run",
                "-modified versions of the software inside them, although the manufacturer",
                "-can do so.  This is fundamentally incompatible with the aim of",
                "-protecting users' freedom to change the software.  The systematic",
                "-pattern of such abuse occurs in the area of products for individuals to",
                "-use, which is precisely where it is most unacceptable.  Therefore, we",
                "-have designed this version of the GPL to prohibit the practice for those",
                "-products.  If such problems arise substantially in other domains, we",
                "-stand ready to extend this provision to those domains in future versions",
                "-of the GPL, as needed to protect the freedom of users.",
                "-",
                "-  Finally, every program is threatened constantly by software patents.",
                "-States should not allow patents to restrict development and use of",
                "-software on general-purpose computers, but in those that do, we wish to",
                "-avoid the special danger that patents applied to a free program could",
                "-make it effectively proprietary.  To prevent this, the GPL assures that",
                "-patents cannot be used to render the program non-free.",
                "-",
                "-  The precise terms and conditions for copying, distribution and",
                "-modification follow.",
                "-",
                "-                       TERMS AND CONDITIONS",
                "-",
                "-  0. Definitions.",
                "-",
                "-  \"This License\" refers to version 3 of the GNU General Public License.",
                "-",
                "-  \"Copyright\" also means copyright-like laws that apply to other kinds of",
                "-works, such as semiconductor masks.",
                "-",
                "-  \"The Program\" refers to any copyrightable work licensed under this",
                "-License.  Each licensee is addressed as \"you\".  \"Licensees\" and",
                "-\"recipients\" may be individuals or organizations.",
                "-",
                "-  To \"modify\" a work means to copy from or adapt all or part of the work",
                "-in a fashion requiring copyright permission, other than the making of an",
                "-exact copy.  The resulting work is called a \"modified version\" of the",
                "-earlier work or a work \"based on\" the earlier work.",
                "-",
                "-  A \"covered work\" means either the unmodified Program or a work based",
                "-on the Program.",
                "-",
                "-  To \"propagate\" a work means to do anything with it that, without",
                "-permission, would make you directly or secondarily liable for",
                "-infringement under applicable copyright law, except executing it on a",
                "-computer or modifying a private copy.  Propagation includes copying,",
                "-distribution (with or without modification), making available to the",
                "-public, and in some countries other activities as well.",
                "-",
                "-  To \"convey\" a work means any kind of propagation that enables other",
                "-parties to make or receive copies.  Mere interaction with a user through",
                "-a computer network, with no transfer of a copy, is not conveying.",
                "-",
                "-  An interactive user interface displays \"Appropriate Legal Notices\"",
                "-to the extent that it includes a convenient and prominently visible",
                "-feature that (1) displays an appropriate copyright notice, and (2)",
                "-tells the user that there is no warranty for the work (except to the",
                "-extent that warranties are provided), that licensees may convey the",
                "-work under this License, and how to view a copy of this License.  If",
                "-the interface presents a list of user commands or options, such as a",
                "-menu, a prominent item in the list meets this criterion.",
                "-",
                "-  1. Source Code.",
                "-",
                "-  The \"source code\" for a work means the preferred form of the work",
                "-for making modifications to it.  \"Object code\" means any non-source",
                "-form of a work.",
                "-",
                "-  A \"Standard Interface\" means an interface that either is an official",
                "-standard defined by a recognized standards body, or, in the case of",
                "-interfaces specified for a particular programming language, one that",
                "-is widely used among developers working in that language.",
                "-",
                "-  The \"System Libraries\" of an executable work include anything, other",
                "-than the work as a whole, that (a) is included in the normal form of",
                "-packaging a Major Component, but which is not part of that Major",
                "-Component, and (b) serves only to enable use of the work with that",
                "-Major Component, or to implement a Standard Interface for which an",
                "-implementation is available to the public in source code form.  A",
                "-\"Major Component\", in this context, means a major essential component",
                "-(kernel, window system, and so on) of the specific operating system",
                "-(if any) on which the executable work runs, or a compiler used to",
                "-produce the work, or an object code interpreter used to run it.",
                "-",
                "-  The \"Corresponding Source\" for a work in object code form means all",
                "-the source code needed to generate, install, and (for an executable",
                "-work) run the object code and to modify the work, including scripts to",
                "-control those activities.  However, it does not include the work's",
                "-System Libraries, or general-purpose tools or generally available free",
                "-programs which are used unmodified in performing those activities but",
                "-which are not part of the work.  For example, Corresponding Source",
                "-includes interface definition files associated with source files for",
                "-the work, and the source code for shared libraries and dynamically",
                "-linked subprograms that the work is specifically designed to require,",
                "-such as by intimate data communication or control flow between those",
                "-subprograms and other parts of the work.",
                "-",
                "-  The Corresponding Source need not include anything that users",
                "-can regenerate automatically from other parts of the Corresponding",
                "-Source.",
                "-",
                "-  The Corresponding Source for a work in source code form is that",
                "-same work.",
                "-",
                "-  2. Basic Permissions.",
                "-",
                "-  All rights granted under this License are granted for the term of",
                "-copyright on the Program, and are irrevocable provided the stated",
                "-conditions are met.  This License explicitly affirms your unlimited",
                "-permission to run the unmodified Program.  The output from running a",
                "-covered work is covered by this License only if the output, given its",
                "-content, constitutes a covered work.  This License acknowledges your",
                "-rights of fair use or other equivalent, as provided by copyright law.",
                "-",
                "-  You may make, run and propagate covered works that you do not",
                "-convey, without conditions so long as your license otherwise remains",
                "-in force.  You may convey covered works to others for the sole purpose",
                "-of having them make modifications exclusively for you, or provide you",
                "-with facilities for running those works, provided that you comply with",
                "-the terms of this License in conveying all material for which you do",
                "-not control copyright.  Those thus making or running the covered works",
                "-for you must do so exclusively on your behalf, under your direction",
                "-and control, on terms that prohibit them from making any copies of",
                "-your copyrighted material outside their relationship with you.",
                "-",
                "-  Conveying under any other circumstances is permitted solely under",
                "-the conditions stated below.  Sublicensing is not allowed; section 10",
                "-makes it unnecessary.",
                "-",
                "-  3. Protecting Users' Legal Rights From Anti-Circumvention Law.",
                "-",
                "-  No covered work shall be deemed part of an effective technological",
                "-measure under any applicable law fulfilling obligations under article",
                "-11 of the WIPO copyright treaty adopted on 20 December 1996, or",
                "-similar laws prohibiting or restricting circumvention of such",
                "-measures.",
                "-",
                "-  When you convey a covered work, you waive any legal power to forbid",
                "-circumvention of technological measures to the extent such circumvention",
                "-is effected by exercising rights under this License with respect to",
                "-the covered work, and you disclaim any intention to limit operation or",
                "-modification of the work as a means of enforcing, against the work's",
                "-users, your or third parties' legal rights to forbid circumvention of",
                "-technological measures.",
                "-",
                "-  4. Conveying Verbatim Copies.",
                "-",
                "-  You may convey verbatim copies of the Program's source code as you",
                "-receive it, in any medium, provided that you conspicuously and",
                "-appropriately publish on each copy an appropriate copyright notice;",
                "-keep intact all notices stating that this License and any",
                "-non-permissive terms added in accord with section 7 apply to the code;",
                "-keep intact all notices of the absence of any warranty; and give all",
                "-recipients a copy of this License along with the Program.",
                "-",
                "-  You may charge any price or no price for each copy that you convey,",
                "-and you may offer support or warranty protection for a fee.",
                "-",
                "-  5. Conveying Modified Source Versions.",
                "-",
                "-  You may convey a work based on the Program, or the modifications to",
                "-produce it from the Program, in the form of source code under the",
                "-terms of section 4, provided that you also meet all of these conditions:",
                "-",
                "-    a) The work must carry prominent notices stating that you modified",
                "-    it, and giving a relevant date.",
                "-",
                "-    b) The work must carry prominent notices stating that it is",
                "-    released under this License and any conditions added under section",
                "-    7.  This requirement modifies the requirement in section 4 to",
                "-    \"keep intact all notices\".",
                "-",
                "-    c) You must license the entire work, as a whole, under this",
                "-    License to anyone who comes into possession of a copy.  This",
                "-    License will therefore apply, along with any applicable section 7",
                "-    additional terms, to the whole of the work, and all its parts,",
                "-    regardless of how they are packaged.  This License gives no",
                "-    permission to license the work in any other way, but it does not",
                "-    invalidate such permission if you have separately received it.",
                "-",
                "-    d) If the work has interactive user interfaces, each must display",
                "-    Appropriate Legal Notices; however, if the Program has interactive",
                "-    interfaces that do not display Appropriate Legal Notices, your",
                "-    work need not make them do so.",
                "-",
                "-  A compilation of a covered work with other separate and independent",
                "-works, which are not by their nature extensions of the covered work,",
                "-and which are not combined with it such as to form a larger program,",
                "-in or on a volume of a storage or distribution medium, is called an",
                "-\"aggregate\" if the compilation and its resulting copyright are not",
                "-used to limit the access or legal rights of the compilation's users",
                "-beyond what the individual works permit.  Inclusion of a covered work",
                "-in an aggregate does not cause this License to apply to the other",
                "-parts of the aggregate.",
                "-",
                "-  6. Conveying Non-Source Forms.",
                "-",
                "-  You may convey a covered work in object code form under the terms",
                "-of sections 4 and 5, provided that you also convey the",
                "-machine-readable Corresponding Source under the terms of this License,",
                "-in one of these ways:",
                "-",
                "-    a) Convey the object code in, or embodied in, a physical product",
                "-    (including a physical distribution medium), accompanied by the",
                "-    Corresponding Source fixed on a durable physical medium",
                "-    customarily used for software interchange.",
                "-",
                "-    b) Convey the object code in, or embodied in, a physical product",
                "-    (including a physical distribution medium), accompanied by a",
                "-    written offer, valid for at least three years and valid for as",
                "-    long as you offer spare parts or customer support for that product",
                "-    model, to give anyone who possesses the object code either (1) a",
                "-    copy of the Corresponding Source for all the software in the",
                "-    product that is covered by this License, on a durable physical",
                "-    medium customarily used for software interchange, for a price no",
                "-    more than your reasonable cost of physically performing this",
                "-    conveying of source, or (2) access to copy the",
                "-    Corresponding Source from a network server at no charge.",
                "-",
                "-    c) Convey individual copies of the object code with a copy of the",
                "-    written offer to provide the Corresponding Source.  This",
                "-    alternative is allowed only occasionally and noncommercially, and",
                "-    only if you received the object code with such an offer, in accord",
                "-    with subsection 6b.",
                "-",
                "-    d) Convey the object code by offering access from a designated",
                "-    place (gratis or for a charge), and offer equivalent access to the",
                "-    Corresponding Source in the same way through the same place at no",
                "-    further charge.  You need not require recipients to copy the",
                "-    Corresponding Source along with the object code.  If the place to",
                "-    copy the object code is a network server, the Corresponding Source",
                "-    may be on a different server (operated by you or a third party)",
                "-    that supports equivalent copying facilities, provided you maintain",
                "-    clear directions next to the object code saying where to find the",
                "-    Corresponding Source.  Regardless of what server hosts the",
                "-    Corresponding Source, you remain obligated to ensure that it is",
                "-    available for as long as needed to satisfy these requirements.",
                "-",
                "-    e) Convey the object code using peer-to-peer transmission, provided",
                "-    you inform other peers where the object code and Corresponding",
                "-    Source of the work are being offered to the general public at no",
                "-    charge under subsection 6d.",
                "-",
                "-  A separable portion of the object code, whose source code is excluded",
                "-from the Corresponding Source as a System Library, need not be",
                "-included in conveying the object code work.",
                "-",
                "-  A \"User Product\" is either (1) a \"consumer product\", which means any",
                "-tangible personal property which is normally used for personal, family,",
                "-or household purposes, or (2) anything designed or sold for incorporation",
                "-into a dwelling.  In determining whether a product is a consumer product,",
                "-doubtful cases shall be resolved in favor of coverage.  For a particular",
                "-product received by a particular user, \"normally used\" refers to a",
                "-typical or common use of that class of product, regardless of the status",
                "-of the particular user or of the way in which the particular user",
                "-actually uses, or expects or is expected to use, the product.  A product",
                "-is a consumer product regardless of whether the product has substantial",
                "-commercial, industrial or non-consumer uses, unless such uses represent",
                "-the only significant mode of use of the product.",
                "-",
                "-  \"Installation Information\" for a User Product means any methods,",
                "-procedures, authorization keys, or other information required to install",
                "-and execute modified versions of a covered work in that User Product from",
                "-a modified version of its Corresponding Source.  The information must",
                "-suffice to ensure that the continued functioning of the modified object",
                "-code is in no case prevented or interfered with solely because",
                "-modification has been made.",
                "-",
                "-  If you convey an object code work under this section in, or with, or",
                "-specifically for use in, a User Product, and the conveying occurs as",
                "-part of a transaction in which the right of possession and use of the",
                "-User Product is transferred to the recipient in perpetuity or for a",
                "-fixed term (regardless of how the transaction is characterized), the",
                "-Corresponding Source conveyed under this section must be accompanied",
                "-by the Installation Information.  But this requirement does not apply",
                "-if neither you nor any third party retains the ability to install",
                "-modified object code on the User Product (for example, the work has",
                "-been installed in ROM).",
                "-",
                "-  The requirement to provide Installation Information does not include a",
                "-requirement to continue to provide support service, warranty, or updates",
                "-for a work that has been modified or installed by the recipient, or for",
                "-the User Product in which it has been modified or installed.  Access to a",
                "-network may be denied when the modification itself materially and",
                "-adversely affects the operation of the network or violates the rules and",
                "-protocols for communication across the network.",
                "-",
                "-  Corresponding Source conveyed, and Installation Information provided,",
                "-in accord with this section must be in a format that is publicly",
                "-documented (and with an implementation available to the public in",
                "-source code form), and must require no special password or key for",
                "-unpacking, reading or copying.",
                "-",
                "-  7. Additional Terms.",
                "-",
                "-  \"Additional permissions\" are terms that supplement the terms of this",
                "-License by making exceptions from one or more of its conditions.",
                "-Additional permissions that are applicable to the entire Program shall",
                "-be treated as though they were included in this License, to the extent",
                "-that they are valid under applicable law.  If additional permissions",
                "-apply only to part of the Program, that part may be used separately",
                "-under those permissions, but the entire Program remains governed by",
                "-this License without regard to the additional permissions.",
                "-",
                "-  When you convey a copy of a covered work, you may at your option",
                "-remove any additional permissions from that copy, or from any part of",
                "-it.  (Additional permissions may be written to require their own",
                "-removal in certain cases when you modify the work.)  You may place",
                "-additional permissions on material, added by you to a covered work,",
                "-for which you have or can give appropriate copyright permission.",
                "-",
                "-  Notwithstanding any other provision of this License, for material you",
                "-add to a covered work, you may (if authorized by the copyright holders of",
                "-that material) supplement the terms of this License with terms:",
                "-",
                "-    a) Disclaiming warranty or limiting liability differently from the",
                "-    terms of sections 15 and 16 of this License; or",
                "-",
                "-    b) Requiring preservation of specified reasonable legal notices or",
                "-    author attributions in that material or in the Appropriate Legal",
                "-    Notices displayed by works containing it; or",
                "-",
                "-    c) Prohibiting misrepresentation of the origin of that material, or",
                "-    requiring that modified versions of such material be marked in",
                "-    reasonable ways as different from the original version; or",
                "-",
                "-    d) Limiting the use for publicity purposes of names of licensors or",
                "-    authors of the material; or",
                "-",
                "-    e) Declining to grant rights under trademark law for use of some",
                "-    trade names, trademarks, or service marks; or",
                "-",
                "-    f) Requiring indemnification of licensors and authors of that",
                "-    material by anyone who conveys the material (or modified versions of",
                "-    it) with contractual assumptions of liability to the recipient, for",
                "-    any liability that these contractual assumptions directly impose on",
                "-    those licensors and authors.",
                "-",
                "-  All other non-permissive additional terms are considered \"further",
                "-restrictions\" within the meaning of section 10.  If the Program as you",
                "-received it, or any part of it, contains a notice stating that it is",
                "-governed by this License along with a term that is a further",
                "-restriction, you may remove that term.  If a license document contains",
                "-a further restriction but permits relicensing or conveying under this",
                "-License, you may add to a covered work material governed by the terms",
                "-of that license document, provided that the further restriction does",
                "-not survive such relicensing or conveying.",
                "-",
                "-  If you add terms to a covered work in accord with this section, you",
                "-must place, in the relevant source files, a statement of the",
                "-additional terms that apply to those files, or a notice indicating",
                "-where to find the applicable terms.",
                "-",
                "-  Additional terms, permissive or non-permissive, may be stated in the",
                "-form of a separately written license, or stated as exceptions;",
                "-the above requirements apply either way.",
                "-",
                "-  8. Termination.",
                "-",
                "-  You may not propagate or modify a covered work except as expressly",
                "-provided under this License.  Any attempt otherwise to propagate or",
                "-modify it is void, and will automatically terminate your rights under",
                "-this License (including any patent licenses granted under the third",
                "-paragraph of section 11).",
                "-",
                "-  However, if you cease all violation of this License, then your",
                "-license from a particular copyright holder is reinstated (a)",
                "-provisionally, unless and until the copyright holder explicitly and",
                "-finally terminates your license, and (b) permanently, if the copyright",
                "-holder fails to notify you of the violation by some reasonable means",
                "-prior to 60 days after the cessation.",
                "-",
                "-  Moreover, your license from a particular copyright holder is",
                "-reinstated permanently if the copyright holder notifies you of the",
                "-violation by some reasonable means, this is the first time you have",
                "-received notice of violation of this License (for any work) from that",
                "-copyright holder, and you cure the violation prior to 30 days after",
                "-your receipt of the notice.",
                "-",
                "-  Termination of your rights under this section does not terminate the",
                "-licenses of parties who have received copies or rights from you under",
                "-this License.  If your rights have been terminated and not permanently",
                "-reinstated, you do not qualify to receive new licenses for the same",
                "-material under section 10.",
                "-",
                "-  9. Acceptance Not Required for Having Copies.",
                "-",
                "-  You are not required to accept this License in order to receive or",
                "-run a copy of the Program.  Ancillary propagation of a covered work",
                "-occurring solely as a consequence of using peer-to-peer transmission",
                "-to receive a copy likewise does not require acceptance.  However,",
                "-nothing other than this License grants you permission to propagate or",
                "-modify any covered work.  These actions infringe copyright if you do",
                "-not accept this License.  Therefore, by modifying or propagating a",
                "-covered work, you indicate your acceptance of this License to do so.",
                "-",
                "-  10. Automatic Licensing of Downstream Recipients.",
                "-",
                "-  Each time you convey a covered work, the recipient automatically",
                "-receives a license from the original licensors, to run, modify and",
                "-propagate that work, subject to this License.  You are not responsible",
                "-for enforcing compliance by third parties with this License.",
                "-",
                "-  An \"entity transaction\" is a transaction transferring control of an",
                "-organization, or substantially all assets of one, or subdividing an",
                "-organization, or merging organizations.  If propagation of a covered",
                "-work results from an entity transaction, each party to that",
                "-transaction who receives a copy of the work also receives whatever",
                "-licenses to the work the party's predecessor in interest had or could",
                "-give under the previous paragraph, plus a right to possession of the",
                "-Corresponding Source of the work from the predecessor in interest, if",
                "-the predecessor has it or can get it with reasonable efforts.",
                "-",
                "-  You may not impose any further restrictions on the exercise of the",
                "-rights granted or affirmed under this License.  For example, you may",
                "-not impose a license fee, royalty, or other charge for exercise of",
                "-rights granted under this License, and you may not initiate litigation",
                "-(including a cross-claim or counterclaim in a lawsuit) alleging that",
                "-any patent claim is infringed by making, using, selling, offering for",
                "-sale, or importing the Program or any portion of it.",
                "-",
                "-  11. Patents.",
                "-",
                "-  A \"contributor\" is a copyright holder who authorizes use under this",
                "-License of the Program or a work on which the Program is based.  The",
                "-work thus licensed is called the contributor's \"contributor version\".",
                "-",
                "-  A contributor's \"essential patent claims\" are all patent claims",
                "-owned or controlled by the contributor, whether already acquired or",
                "-hereafter acquired, that would be infringed by some manner, permitted",
                "-by this License, of making, using, or selling its contributor version,",
                "-but do not include claims that would be infringed only as a",
                "-consequence of further modification of the contributor version.  For",
                "-purposes of this definition, \"control\" includes the right to grant",
                "-patent sublicenses in a manner consistent with the requirements of",
                "-this License.",
                "-",
                "-  Each contributor grants you a non-exclusive, worldwide, royalty-free",
                "-patent license under the contributor's essential patent claims, to",
                "-make, use, sell, offer for sale, import and otherwise run, modify and",
                "-propagate the contents of its contributor version.",
                "-",
                "-  In the following three paragraphs, a \"patent license\" is any express",
                "-agreement or commitment, however denominated, not to enforce a patent",
                "-(such as an express permission to practice a patent or covenant not to",
                "-sue for patent infringement).  To \"grant\" such a patent license to a",
                "-party means to make such an agreement or commitment not to enforce a",
                "-patent against the party.",
                "-",
                "-  If you convey a covered work, knowingly relying on a patent license,",
                "-and the Corresponding Source of the work is not available for anyone",
                "-to copy, free of charge and under the terms of this License, through a",
                "-publicly available network server or other readily accessible means,",
                "-then you must either (1) cause the Corresponding Source to be so",
                "-available, or (2) arrange to deprive yourself of the benefit of the",
                "-patent license for this particular work, or (3) arrange, in a manner",
                "-consistent with the requirements of this License, to extend the patent",
                "-license to downstream recipients.  \"Knowingly relying\" means you have",
                "-actual knowledge that, but for the patent license, your conveying the",
                "-covered work in a country, or your recipient's use of the covered work",
                "-in a country, would infringe one or more identifiable patents in that",
                "-country that you have reason to believe are valid.",
                "-",
                "-  If, pursuant to or in connection with a single transaction or",
                "-arrangement, you convey, or propagate by procuring conveyance of, a",
                "-covered work, and grant a patent license to some of the parties",
                "-receiving the covered work authorizing them to use, propagate, modify",
                "-or convey a specific copy of the covered work, then the patent license",
                "-you grant is automatically extended to all recipients of the covered",
                "-work and works based on it.",
                "-",
                "-  A patent license is \"discriminatory\" if it does not include within",
                "-the scope of its coverage, prohibits the exercise of, or is",
                "-conditioned on the non-exercise of one or more of the rights that are",
                "-specifically granted under this License.  You may not convey a covered",
                "-work if you are a party to an arrangement with a third party that is",
                "-in the business of distributing software, under which you make payment",
                "-to the third party based on the extent of your activity of conveying",
                "-the work, and under which the third party grants, to any of the",
                "-parties who would receive the covered work from you, a discriminatory",
                "-patent license (a) in connection with copies of the covered work",
                "-conveyed by you (or copies made from those copies), or (b) primarily",
                "-for and in connection with specific products or compilations that",
                "-contain the covered work, unless you entered into that arrangement,",
                "-or that patent license was granted, prior to 28 March 2007.",
                "-",
                "-  Nothing in this License shall be construed as excluding or limiting",
                "-any implied license or other defenses to infringement that may",
                "-otherwise be available to you under applicable patent law.",
                "-",
                "-  12. No Surrender of Others' Freedom.",
                "-",
                "-  If conditions are imposed on you (whether by court order, agreement or",
                "-otherwise) that contradict the conditions of this License, they do not",
                "-excuse you from the conditions of this License.  If you cannot convey a",
                "-covered work so as to satisfy simultaneously your obligations under this",
                "-License and any other pertinent obligations, then as a consequence you may",
                "-not convey it at all.  For example, if you agree to terms that obligate you",
                "-to collect a royalty for further conveying from those to whom you convey",
                "-the Program, the only way you could satisfy both those terms and this",
                "-License would be to refrain entirely from conveying the Program.",
                "-",
                "-  13. Use with the GNU Affero General Public License.",
                "-",
                "-  Notwithstanding any other provision of this License, you have",
                "-permission to link or combine any covered work with a work licensed",
                "-under version 3 of the GNU Affero General Public License into a single",
                "-combined work, and to convey the resulting work.  The terms of this",
                "-License will continue to apply to the part which is the covered work,",
                "-but the special requirements of the GNU Affero General Public License,",
                "-section 13, concerning interaction through a network will apply to the",
                "-combination as such.",
                "-",
                "-  14. Revised Versions of this License.",
                "-",
                "-  The Free Software Foundation may publish revised and/or new versions of",
                "-the GNU General Public License from time to time.  Such new versions will",
                "-be similar in spirit to the present version, but may differ in detail to",
                "-address new problems or concerns.",
                "-",
                "-  Each version is given a distinguishing version number.  If the",
                "-Program specifies that a certain numbered version of the GNU General",
                "-Public License \"or any later version\" applies to it, you have the",
                "-option of following the terms and conditions either of that numbered",
                "-version or of any later version published by the Free Software",
                "-Foundation.  If the Program does not specify a version number of the",
                "-GNU General Public License, you may choose any version ever published",
                "-by the Free Software Foundation.",
                "-",
                "-  If the Program specifies that a proxy can decide which future",
                "-versions of the GNU General Public License can be used, that proxy's",
                "-public statement of acceptance of a version permanently authorizes you",
                "-to choose that version for the Program.",
                "-",
                "-  Later license versions may give you additional or different",
                "-permissions.  However, no additional obligations are imposed on any",
                "-author or copyright holder as a result of your choosing to follow a",
                "-later version.",
                "-",
                "-  15. Disclaimer of Warranty.",
                "-",
                "-  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY",
                "-APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT",
                "-HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY",
                "-OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,",
                "-THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR",
                "-PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM",
                "-IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF",
                "-ALL NECESSARY SERVICING, REPAIR OR CORRECTION.",
                "-",
                "-  16. Limitation of Liability.",
                "-",
                "-  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING",
                "-WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS",
                "-THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY",
                "-GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE",
                "-USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF",
                "-DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD",
                "-PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),",
                "-EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF",
                "-SUCH DAMAGES.",
                "-",
                "-  17. Interpretation of Sections 15 and 16.",
                "-",
                "-  If the disclaimer of warranty and limitation of liability provided",
                "-above cannot be given local legal effect according to their terms,",
                "-reviewing courts shall apply local law that most closely approximates",
                "-an absolute waiver of all civil liability in connection with the",
                "-Program, unless a warranty or assumption of liability accompanies a",
                "-copy of the Program in return for a fee.",
                "-",
                "-                     END OF TERMS AND CONDITIONS",
                "-",
                "-            How to Apply These Terms to Your New Programs",
                "-",
                "-  If you develop a new program, and you want it to be of the greatest",
                "-possible use to the public, the best way to achieve this is to make it",
                "-free software which everyone can redistribute and change under these terms.",
                "-",
                "-  To do so, attach the following notices to the program.  It is safest",
                "-to attach them to the start of each source file to most effectively",
                "-state the exclusion of warranty; and each file should have at least",
                "-the \"copyright\" line and a pointer to where the full notice is found.",
                "-",
                "-    <one line to give the program's name and a brief idea of what it does.>",
                "-    Copyright (C) <year>  <name of author>",
                "-",
                "-    This program is free software: you can redistribute it and/or modify",
                "-    it under the terms of the GNU General Public License as published by",
                "-    the Free Software Foundation, either version 3 of the License, or",
                "-    (at your option) any later version.",
                "-",
                "-    This program is distributed in the hope that it will be useful,",
                "-    but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "-    GNU General Public License for more details.",
                "-",
                "-    You should have received a copy of the GNU General Public License",
                "-    along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "-",
                "-Also add information on how to contact you by electronic and paper mail.",
                "-",
                "-  If the program does terminal interaction, make it output a short",
                "-notice like this when it starts in an interactive mode:",
                "-",
                "-    <program>  Copyright (C) <year>  <name of author>",
                "-    This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.",
                "-    This is free software, and you are welcome to redistribute it",
                "-    under certain conditions; type 'show c' for details.",
                "-",
                "-The hypothetical commands 'show w' and 'show c' should show the appropriate",
                "-parts of the General Public License.  Of course, your program's commands",
                "-might be different; for a GUI interface, you would use an \"about box\".",
                "-",
                "-  You should also get your employer (if you work as a programmer) or school,",
                "-if any, to sign a \"copyright disclaimer\" for the program, if necessary.",
                "-For more information on this, and how to apply and follow the GNU GPL, see",
                "-<http://www.gnu.org/licenses/>.",
                "-",
                "-  The GNU General Public License does not permit incorporating your program",
                "-into proprietary programs.  If your program is a subroutine library, you",
                "-may consider it more useful to permit linking proprietary applications with",
                "-the library.  If this is what you want to do, use the GNU Lesser General",
                "-Public License instead of this License.  But first, please read",
                "-<http://www.gnu.org/philosophy/why-not-lgpl.html>.",
                "-`,",
                "-\t}",
                "-",
                "-\t// Licenses[\"apache20\"] = License{",
                "-\t// \tName:            \"Apache 2.0\",",
                "-\t// \tPossibleMatches: []string{\"apache\", \"apache20\", \"\"},",
                "-\t//   Header: `",
                "-\t//   `,",
                "-\t// \tText: `",
                "-\t//   `,",
                "-\t// }",
                "-}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/buffer.go b/vendor/golang.org/x/crypto/ssh/buffer.go",
                "new file mode 100644",
                "index 000000000..1ab07d078",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/buffer.go",
                "@@ -0,0 +1,97 @@",
                "+// Copyright 2012 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"io\"",
                "+\t\"sync\"",
                "+)",
                "+",
                "+// buffer provides a linked list buffer for data exchange",
                "+// between producer and consumer. Theoretically the buffer is",
                "+// of unlimited capacity as it does no allocation of its own.",
                "+type buffer struct {",
                "+\t// protects concurrent access to head, tail and closed",
                "+\t*sync.Cond",
                "+",
                "+\thead *element // the buffer that will be read first",
                "+\ttail *element // the buffer that will be read last",
                "+",
                "+\tclosed bool",
                "+}",
                "+",
                "+// An element represents a single link in a linked list.",
                "+type element struct {",
                "+\tbuf  []byte",
                "+\tnext *element",
                "+}",
                "+",
                "+// newBuffer returns an empty buffer that is not closed.",
                "+func newBuffer() *buffer {",
                "+\te := new(element)",
                "+\tb := &buffer{",
                "+\t\tCond: newCond(),",
                "+\t\thead: e,",
                "+\t\ttail: e,",
                "+\t}",
                "+\treturn b",
                "+}",
                "+",
                "+// write makes buf available for Read to receive.",
                "+// buf must not be modified after the call to write.",
                "+func (b *buffer) write(buf []byte) {",
                "+\tb.Cond.L.Lock()",
                "+\te := &element{buf: buf}",
                "+\tb.tail.next = e",
                "+\tb.tail = e",
                "+\tb.Cond.Signal()",
                "+\tb.Cond.L.Unlock()",
                "+}",
                "+",
                "+// eof closes the buffer. Reads from the buffer once all",
                "+// the data has been consumed will receive io.EOF.",
                "+func (b *buffer) eof() {",
                "+\tb.Cond.L.Lock()",
                "+\tb.closed = true",
                "+\tb.Cond.Signal()",
                "+\tb.Cond.L.Unlock()",
                "+}",
                "+",
                "+// Read reads data from the internal buffer in buf.  Reads will block",
                "+// if no data is available, or until the buffer is closed.",
                "+func (b *buffer) Read(buf []byte) (n int, err error) {",
                "+\tb.Cond.L.Lock()",
                "+\tdefer b.Cond.L.Unlock()",
                "+",
                "+\tfor len(buf) > 0 {",
                "+\t\t// if there is data in b.head, copy it",
                "+\t\tif len(b.head.buf) > 0 {",
                "+\t\t\tr := copy(buf, b.head.buf)",
                "+\t\t\tbuf, b.head.buf = buf[r:], b.head.buf[r:]",
                "+\t\t\tn += r",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\t// if there is a next buffer, make it the head",
                "+\t\tif len(b.head.buf) == 0 && b.head != b.tail {",
                "+\t\t\tb.head = b.head.next",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\t// if at least one byte has been copied, return",
                "+\t\tif n > 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+",
                "+\t\t// if nothing was read, and there is nothing outstanding",
                "+\t\t// check to see if the buffer is closed.",
                "+\t\tif b.closed {",
                "+\t\t\terr = io.EOF",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\t// out of buffers, wait for producer",
                "+\t\tb.Cond.Wait()",
                "+\t}",
                "+\treturn",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/certs.go b/vendor/golang.org/x/crypto/ssh/certs.go",
                "new file mode 100644",
                "index 000000000..b1f022078",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/certs.go",
                "@@ -0,0 +1,519 @@",
                "+// Copyright 2012 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"net\"",
                "+\t\"sort\"",
                "+\t\"time\"",
                "+)",
                "+",
                "+// These constants from [PROTOCOL.certkeys] represent the algorithm names",
                "+// for certificate types supported by this package.",
                "+const (",
                "+\tCertAlgoRSAv01      = \"ssh-rsa-cert-v01@openssh.com\"",
                "+\tCertAlgoDSAv01      = \"ssh-dss-cert-v01@openssh.com\"",
                "+\tCertAlgoECDSA256v01 = \"ecdsa-sha2-nistp256-cert-v01@openssh.com\"",
                "+\tCertAlgoECDSA384v01 = \"ecdsa-sha2-nistp384-cert-v01@openssh.com\"",
                "+\tCertAlgoECDSA521v01 = \"ecdsa-sha2-nistp521-cert-v01@openssh.com\"",
                "+\tCertAlgoED25519v01  = \"ssh-ed25519-cert-v01@openssh.com\"",
                "+)",
                "+",
                "+// Certificate types distinguish between host and user",
                "+// certificates. The values can be set in the CertType field of",
                "+// Certificate.",
                "+const (",
                "+\tUserCert = 1",
                "+\tHostCert = 2",
                "+)",
                "+",
                "+// Signature represents a cryptographic signature.",
                "+type Signature struct {",
                "+\tFormat string",
                "+\tBlob   []byte",
                "+}",
                "+",
                "+// CertTimeInfinity can be used for OpenSSHCertV01.ValidBefore to indicate that",
                "+// a certificate does not expire.",
                "+const CertTimeInfinity = 1<<64 - 1",
                "+",
                "+// An Certificate represents an OpenSSH certificate as defined in",
                "+// [PROTOCOL.certkeys]?rev=1.8.",
                "+type Certificate struct {",
                "+\tNonce           []byte",
                "+\tKey             PublicKey",
                "+\tSerial          uint64",
                "+\tCertType        uint32",
                "+\tKeyId           string",
                "+\tValidPrincipals []string",
                "+\tValidAfter      uint64",
                "+\tValidBefore     uint64",
                "+\tPermissions",
                "+\tReserved     []byte",
                "+\tSignatureKey PublicKey",
                "+\tSignature    *Signature",
                "+}",
                "+",
                "+// genericCertData holds the key-independent part of the certificate data.",
                "+// Overall, certificates contain an nonce, public key fields and",
                "+// key-independent fields.",
                "+type genericCertData struct {",
                "+\tSerial          uint64",
                "+\tCertType        uint32",
                "+\tKeyId           string",
                "+\tValidPrincipals []byte",
                "+\tValidAfter      uint64",
                "+\tValidBefore     uint64",
                "+\tCriticalOptions []byte",
                "+\tExtensions      []byte",
                "+\tReserved        []byte",
                "+\tSignatureKey    []byte",
                "+\tSignature       []byte",
                "+}",
                "+",
                "+func marshalStringList(namelist []string) []byte {",
                "+\tvar to []byte",
                "+\tfor _, name := range namelist {",
                "+\t\ts := struct{ N string }{name}",
                "+\t\tto = append(to, Marshal(&s)...)",
                "+\t}",
                "+\treturn to",
                "+}",
                "+",
                "+type optionsTuple struct {",
                "+\tKey   string",
                "+\tValue []byte",
                "+}",
                "+",
                "+type optionsTupleValue struct {",
                "+\tValue string",
                "+}",
                "+",
                "+// serialize a map of critical options or extensions",
                "+// issue #10569 - per [PROTOCOL.certkeys] and SSH implementation,",
                "+// we need two length prefixes for a non-empty string value",
                "+func marshalTuples(tups map[string]string) []byte {",
                "+\tkeys := make([]string, 0, len(tups))",
                "+\tfor key := range tups {",
                "+\t\tkeys = append(keys, key)",
                "+\t}",
                "+\tsort.Strings(keys)",
                "+",
                "+\tvar ret []byte",
                "+\tfor _, key := range keys {",
                "+\t\ts := optionsTuple{Key: key}",
                "+\t\tif value := tups[key]; len(value) > 0 {",
                "+\t\t\ts.Value = Marshal(&optionsTupleValue{value})",
                "+\t\t}",
                "+\t\tret = append(ret, Marshal(&s)...)",
                "+\t}",
                "+\treturn ret",
                "+}",
                "+",
                "+// issue #10569 - per [PROTOCOL.certkeys] and SSH implementation,",
                "+// we need two length prefixes for a non-empty option value",
                "+func parseTuples(in []byte) (map[string]string, error) {",
                "+\ttups := map[string]string{}",
                "+\tvar lastKey string",
                "+\tvar haveLastKey bool",
                "+",
                "+\tfor len(in) > 0 {",
                "+\t\tvar key, val, extra []byte",
                "+\t\tvar ok bool",
                "+",
                "+\t\tif key, in, ok = parseString(in); !ok {",
                "+\t\t\treturn nil, errShortRead",
                "+\t\t}",
                "+\t\tkeyStr := string(key)",
                "+\t\t// according to [PROTOCOL.certkeys], the names must be in",
                "+\t\t// lexical order.",
                "+\t\tif haveLastKey && keyStr <= lastKey {",
                "+\t\t\treturn nil, fmt.Errorf(\"ssh: certificate options are not in lexical order\")",
                "+\t\t}",
                "+\t\tlastKey, haveLastKey = keyStr, true",
                "+\t\t// the next field is a data field, which if non-empty has a string embedded",
                "+\t\tif val, in, ok = parseString(in); !ok {",
                "+\t\t\treturn nil, errShortRead",
                "+\t\t}",
                "+\t\tif len(val) > 0 {",
                "+\t\t\tval, extra, ok = parseString(val)",
                "+\t\t\tif !ok {",
                "+\t\t\t\treturn nil, errShortRead",
                "+\t\t\t}",
                "+\t\t\tif len(extra) > 0 {",
                "+\t\t\t\treturn nil, fmt.Errorf(\"ssh: unexpected trailing data after certificate option value\")",
                "+\t\t\t}",
                "+\t\t\ttups[keyStr] = string(val)",
                "+\t\t} else {",
                "+\t\t\ttups[keyStr] = \"\"",
                "+\t\t}",
                "+\t}",
                "+\treturn tups, nil",
                "+}",
                "+",
                "+func parseCert(in []byte, privAlgo string) (*Certificate, error) {",
                "+\tnonce, rest, ok := parseString(in)",
                "+\tif !ok {",
                "+\t\treturn nil, errShortRead",
                "+\t}",
                "+",
                "+\tkey, rest, err := parsePubKey(rest, privAlgo)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tvar g genericCertData",
                "+\tif err := Unmarshal(rest, &g); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tc := &Certificate{",
                "+\t\tNonce:       nonce,",
                "+\t\tKey:         key,",
                "+\t\tSerial:      g.Serial,",
                "+\t\tCertType:    g.CertType,",
                "+\t\tKeyId:       g.KeyId,",
                "+\t\tValidAfter:  g.ValidAfter,",
                "+\t\tValidBefore: g.ValidBefore,",
                "+\t}",
                "+",
                "+\tfor principals := g.ValidPrincipals; len(principals) > 0; {",
                "+\t\tprincipal, rest, ok := parseString(principals)",
                "+\t\tif !ok {",
                "+\t\t\treturn nil, errShortRead",
                "+\t\t}",
                "+\t\tc.ValidPrincipals = append(c.ValidPrincipals, string(principal))",
                "+\t\tprincipals = rest",
                "+\t}",
                "+",
                "+\tc.CriticalOptions, err = parseTuples(g.CriticalOptions)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tc.Extensions, err = parseTuples(g.Extensions)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tc.Reserved = g.Reserved",
                "+\tk, err := ParsePublicKey(g.SignatureKey)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tc.SignatureKey = k",
                "+\tc.Signature, rest, ok = parseSignatureBody(g.Signature)",
                "+\tif !ok || len(rest) > 0 {",
                "+\t\treturn nil, errors.New(\"ssh: signature parse error\")",
                "+\t}",
                "+",
                "+\treturn c, nil",
                "+}",
                "+",
                "+type openSSHCertSigner struct {",
                "+\tpub    *Certificate",
                "+\tsigner Signer",
                "+}",
                "+",
                "+// NewCertSigner returns a Signer that signs with the given Certificate, whose",
                "+// private key is held by signer. It returns an error if the public key in cert",
                "+// doesn't match the key used by signer.",
                "+func NewCertSigner(cert *Certificate, signer Signer) (Signer, error) {",
                "+\tif bytes.Compare(cert.Key.Marshal(), signer.PublicKey().Marshal()) != 0 {",
                "+\t\treturn nil, errors.New(\"ssh: signer and cert have different public key\")",
                "+\t}",
                "+",
                "+\treturn &openSSHCertSigner{cert, signer}, nil",
                "+}",
                "+",
                "+func (s *openSSHCertSigner) Sign(rand io.Reader, data []byte) (*Signature, error) {",
                "+\treturn s.signer.Sign(rand, data)",
                "+}",
                "+",
                "+func (s *openSSHCertSigner) PublicKey() PublicKey {",
                "+\treturn s.pub",
                "+}",
                "+",
                "+const sourceAddressCriticalOption = \"source-address\"",
                "+",
                "+// CertChecker does the work of verifying a certificate. Its methods",
                "+// can be plugged into ClientConfig.HostKeyCallback and",
                "+// ServerConfig.PublicKeyCallback. For the CertChecker to work,",
                "+// minimally, the IsAuthority callback should be set.",
                "+type CertChecker struct {",
                "+\t// SupportedCriticalOptions lists the CriticalOptions that the",
                "+\t// server application layer understands. These are only used",
                "+\t// for user certificates.",
                "+\tSupportedCriticalOptions []string",
                "+",
                "+\t// IsUserAuthority should return true if the key is recognized as an",
                "+\t// authority for the given user certificate. This allows for",
                "+\t// certificates to be signed by other certificates. This must be set",
                "+\t// if this CertChecker will be checking user certificates.",
                "+\tIsUserAuthority func(auth PublicKey) bool",
                "+",
                "+\t// IsHostAuthority should report whether the key is recognized as",
                "+\t// an authority for this host. This allows for certificates to be",
                "+\t// signed by other keys, and for those other keys to only be valid",
                "+\t// signers for particular hostnames. This must be set if this",
                "+\t// CertChecker will be checking host certificates.",
                "+\tIsHostAuthority func(auth PublicKey, address string) bool",
                "+",
                "+\t// Clock is used for verifying time stamps. If nil, time.Now",
                "+\t// is used.",
                "+\tClock func() time.Time",
                "+",
                "+\t// UserKeyFallback is called when CertChecker.Authenticate encounters a",
                "+\t// public key that is not a certificate. It must implement validation",
                "+\t// of user keys or else, if nil, all such keys are rejected.",
                "+\tUserKeyFallback func(conn ConnMetadata, key PublicKey) (*Permissions, error)",
                "+",
                "+\t// HostKeyFallback is called when CertChecker.CheckHostKey encounters a",
                "+\t// public key that is not a certificate. It must implement host key",
                "+\t// validation or else, if nil, all such keys are rejected.",
                "+\tHostKeyFallback HostKeyCallback",
                "+",
                "+\t// IsRevoked is called for each certificate so that revocation checking",
                "+\t// can be implemented. It should return true if the given certificate",
                "+\t// is revoked and false otherwise. If nil, no certificates are",
                "+\t// considered to have been revoked.",
                "+\tIsRevoked func(cert *Certificate) bool",
                "+}",
                "+",
                "+// CheckHostKey checks a host key certificate. This method can be",
                "+// plugged into ClientConfig.HostKeyCallback.",
                "+func (c *CertChecker) CheckHostKey(addr string, remote net.Addr, key PublicKey) error {",
                "+\tcert, ok := key.(*Certificate)",
                "+\tif !ok {",
                "+\t\tif c.HostKeyFallback != nil {",
                "+\t\t\treturn c.HostKeyFallback(addr, remote, key)",
                "+\t\t}",
                "+\t\treturn errors.New(\"ssh: non-certificate host key\")",
                "+\t}",
                "+\tif cert.CertType != HostCert {",
                "+\t\treturn fmt.Errorf(\"ssh: certificate presented as a host key has type %d\", cert.CertType)",
                "+\t}",
                "+\tif !c.IsHostAuthority(cert.SignatureKey, addr) {",
                "+\t\treturn fmt.Errorf(\"ssh: no authorities for hostname: %v\", addr)",
                "+\t}",
                "+",
                "+\thostname, _, err := net.SplitHostPort(addr)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\t// Pass hostname only as principal for host certificates (consistent with OpenSSH)",
                "+\treturn c.CheckCert(hostname, cert)",
                "+}",
                "+",
                "+// Authenticate checks a user certificate. Authenticate can be used as",
                "+// a value for ServerConfig.PublicKeyCallback.",
                "+func (c *CertChecker) Authenticate(conn ConnMetadata, pubKey PublicKey) (*Permissions, error) {",
                "+\tcert, ok := pubKey.(*Certificate)",
                "+\tif !ok {",
                "+\t\tif c.UserKeyFallback != nil {",
                "+\t\t\treturn c.UserKeyFallback(conn, pubKey)",
                "+\t\t}",
                "+\t\treturn nil, errors.New(\"ssh: normal key pairs not accepted\")",
                "+\t}",
                "+",
                "+\tif cert.CertType != UserCert {",
                "+\t\treturn nil, fmt.Errorf(\"ssh: cert has type %d\", cert.CertType)",
                "+\t}",
                "+\tif !c.IsUserAuthority(cert.SignatureKey) {",
                "+\t\treturn nil, fmt.Errorf(\"ssh: certificate signed by unrecognized authority\")",
                "+\t}",
                "+",
                "+\tif err := c.CheckCert(conn.User(), cert); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn &cert.Permissions, nil",
                "+}",
                "+",
                "+// CheckCert checks CriticalOptions, ValidPrincipals, revocation, timestamp and",
                "+// the signature of the certificate.",
                "+func (c *CertChecker) CheckCert(principal string, cert *Certificate) error {",
                "+\tif c.IsRevoked != nil && c.IsRevoked(cert) {",
                "+\t\treturn fmt.Errorf(\"ssh: certicate serial %d revoked\", cert.Serial)",
                "+\t}",
                "+",
                "+\tfor opt, _ := range cert.CriticalOptions {",
                "+\t\t// sourceAddressCriticalOption will be enforced by",
                "+\t\t// serverAuthenticate",
                "+\t\tif opt == sourceAddressCriticalOption {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\tfound := false",
                "+\t\tfor _, supp := range c.SupportedCriticalOptions {",
                "+\t\t\tif supp == opt {",
                "+\t\t\t\tfound = true",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif !found {",
                "+\t\t\treturn fmt.Errorf(\"ssh: unsupported critical option %q in certificate\", opt)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif len(cert.ValidPrincipals) > 0 {",
                "+\t\t// By default, certs are valid for all users/hosts.",
                "+\t\tfound := false",
                "+\t\tfor _, p := range cert.ValidPrincipals {",
                "+\t\t\tif p == principal {",
                "+\t\t\t\tfound = true",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif !found {",
                "+\t\t\treturn fmt.Errorf(\"ssh: principal %q not in the set of valid principals for given certificate: %q\", principal, cert.ValidPrincipals)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tclock := c.Clock",
                "+\tif clock == nil {",
                "+\t\tclock = time.Now",
                "+\t}",
                "+",
                "+\tunixNow := clock().Unix()",
                "+\tif after := int64(cert.ValidAfter); after < 0 || unixNow < int64(cert.ValidAfter) {",
                "+\t\treturn fmt.Errorf(\"ssh: cert is not yet valid\")",
                "+\t}",
                "+\tif before := int64(cert.ValidBefore); cert.ValidBefore != uint64(CertTimeInfinity) && (unixNow >= before || before < 0) {",
                "+\t\treturn fmt.Errorf(\"ssh: cert has expired\")",
                "+\t}",
                "+\tif err := cert.SignatureKey.Verify(cert.bytesForSigning(), cert.Signature); err != nil {",
                "+\t\treturn fmt.Errorf(\"ssh: certificate signature does not verify\")",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+// SignCert sets c.SignatureKey to the authority's public key and stores a",
                "+// Signature, by authority, in the certificate.",
                "+func (c *Certificate) SignCert(rand io.Reader, authority Signer) error {",
                "+\tc.Nonce = make([]byte, 32)",
                "+\tif _, err := io.ReadFull(rand, c.Nonce); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tc.SignatureKey = authority.PublicKey()",
                "+",
                "+\tsig, err := authority.Sign(rand, c.bytesForSigning())",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tc.Signature = sig",
                "+\treturn nil",
                "+}",
                "+",
                "+var certAlgoNames = map[string]string{",
                "+\tKeyAlgoRSA:      CertAlgoRSAv01,",
                "+\tKeyAlgoDSA:      CertAlgoDSAv01,",
                "+\tKeyAlgoECDSA256: CertAlgoECDSA256v01,",
                "+\tKeyAlgoECDSA384: CertAlgoECDSA384v01,",
                "+\tKeyAlgoECDSA521: CertAlgoECDSA521v01,",
                "+\tKeyAlgoED25519:  CertAlgoED25519v01,",
                "+}",
                "+",
                "+// certToPrivAlgo returns the underlying algorithm for a certificate algorithm.",
                "+// Panics if a non-certificate algorithm is passed.",
                "+func certToPrivAlgo(algo string) string {",
                "+\tfor privAlgo, pubAlgo := range certAlgoNames {",
                "+\t\tif pubAlgo == algo {",
                "+\t\t\treturn privAlgo",
                "+\t\t}",
                "+\t}",
                "+\tpanic(\"unknown cert algorithm\")",
                "+}",
                "+",
                "+func (cert *Certificate) bytesForSigning() []byte {",
                "+\tc2 := *cert",
                "+\tc2.Signature = nil",
                "+\tout := c2.Marshal()",
                "+\t// Drop trailing signature length.",
                "+\treturn out[:len(out)-4]",
                "+}",
                "+",
                "+// Marshal serializes c into OpenSSH's wire format. It is part of the",
                "+// PublicKey interface.",
                "+func (c *Certificate) Marshal() []byte {",
                "+\tgeneric := genericCertData{",
                "+\t\tSerial:          c.Serial,",
                "+\t\tCertType:        c.CertType,",
                "+\t\tKeyId:           c.KeyId,",
                "+\t\tValidPrincipals: marshalStringList(c.ValidPrincipals),",
                "+\t\tValidAfter:      uint64(c.ValidAfter),",
                "+\t\tValidBefore:     uint64(c.ValidBefore),",
                "+\t\tCriticalOptions: marshalTuples(c.CriticalOptions),",
                "+\t\tExtensions:      marshalTuples(c.Extensions),",
                "+\t\tReserved:        c.Reserved,",
                "+\t\tSignatureKey:    c.SignatureKey.Marshal(),",
                "+\t}",
                "+\tif c.Signature != nil {",
                "+\t\tgeneric.Signature = Marshal(c.Signature)",
                "+\t}",
                "+\tgenericBytes := Marshal(&generic)",
                "+\tkeyBytes := c.Key.Marshal()",
                "+\t_, keyBytes, _ = parseString(keyBytes)",
                "+\tprefix := Marshal(&struct {",
                "+\t\tName  string",
                "+\t\tNonce []byte",
                "+\t\tKey   []byte `ssh:\"rest\"`",
                "+\t}{c.Type(), c.Nonce, keyBytes})",
                "+",
                "+\tresult := make([]byte, 0, len(prefix)+len(genericBytes))",
                "+\tresult = append(result, prefix...)",
                "+\tresult = append(result, genericBytes...)",
                "+\treturn result",
                "+}",
                "+",
                "+// Type returns the key name. It is part of the PublicKey interface.",
                "+func (c *Certificate) Type() string {",
                "+\talgo, ok := certAlgoNames[c.Key.Type()]",
                "+\tif !ok {",
                "+\t\tpanic(\"unknown cert key type \" + c.Key.Type())",
                "+\t}",
                "+\treturn algo",
                "+}",
                "+",
                "+// Verify verifies a signature against the certificate's public",
                "+// key. It is part of the PublicKey interface.",
                "+func (c *Certificate) Verify(data []byte, sig *Signature) error {",
                "+\treturn c.Key.Verify(data, sig)",
                "+}",
                "+",
                "+func parseSignatureBody(in []byte) (out *Signature, rest []byte, ok bool) {",
                "+\tformat, in, ok := parseString(in)",
                "+\tif !ok {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tout = &Signature{",
                "+\t\tFormat: string(format),",
                "+\t}",
                "+",
                "+\tif out.Blob, in, ok = parseString(in); !ok {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\treturn out, in, ok",
                "+}",
                "+",
                "+func parseSignature(in []byte) (out *Signature, rest []byte, ok bool) {",
                "+\tsigBytes, rest, ok := parseString(in)",
                "+\tif !ok {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tout, trailing, ok := parseSignatureBody(sigBytes)",
                "+\tif !ok || len(trailing) > 0 {",
                "+\t\treturn nil, nil, false",
                "+\t}",
                "+\treturn",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/channel.go b/vendor/golang.org/x/crypto/ssh/channel.go",
                "new file mode 100644",
                "index 000000000..195530ea0",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/channel.go",
                "@@ -0,0 +1,633 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"encoding/binary\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"log\"",
                "+\t\"sync\"",
                "+)",
                "+",
                "+const (",
                "+\tminPacketLength = 9",
                "+\t// channelMaxPacket contains the maximum number of bytes that will be",
                "+\t// sent in a single packet. As per RFC 4253, section 6.1, 32k is also",
                "+\t// the minimum.",
                "+\tchannelMaxPacket = 1 << 15",
                "+\t// We follow OpenSSH here.",
                "+\tchannelWindowSize = 64 * channelMaxPacket",
                "+)",
                "+",
                "+// NewChannel represents an incoming request to a channel. It must either be",
                "+// accepted for use by calling Accept, or rejected by calling Reject.",
                "+type NewChannel interface {",
                "+\t// Accept accepts the channel creation request. It returns the Channel",
                "+\t// and a Go channel containing SSH requests. The Go channel must be",
                "+\t// serviced otherwise the Channel will hang.",
                "+\tAccept() (Channel, <-chan *Request, error)",
                "+",
                "+\t// Reject rejects the channel creation request. After calling",
                "+\t// this, no other methods on the Channel may be called.",
                "+\tReject(reason RejectionReason, message string) error",
                "+",
                "+\t// ChannelType returns the type of the channel, as supplied by the",
                "+\t// client.",
                "+\tChannelType() string",
                "+",
                "+\t// ExtraData returns the arbitrary payload for this channel, as supplied",
                "+\t// by the client. This data is specific to the channel type.",
                "+\tExtraData() []byte",
                "+}",
                "+",
                "+// A Channel is an ordered, reliable, flow-controlled, duplex stream",
                "+// that is multiplexed over an SSH connection.",
                "+type Channel interface {",
                "+\t// Read reads up to len(data) bytes from the channel.",
                "+\tRead(data []byte) (int, error)",
                "+",
                "+\t// Write writes len(data) bytes to the channel.",
                "+\tWrite(data []byte) (int, error)",
                "+",
                "+\t// Close signals end of channel use. No data may be sent after this",
                "+\t// call.",
                "+\tClose() error",
                "+",
                "+\t// CloseWrite signals the end of sending in-band",
                "+\t// data. Requests may still be sent, and the other side may",
                "+\t// still send data",
                "+\tCloseWrite() error",
                "+",
                "+\t// SendRequest sends a channel request.  If wantReply is true,",
                "+\t// it will wait for a reply and return the result as a",
                "+\t// boolean, otherwise the return value will be false. Channel",
                "+\t// requests are out-of-band messages so they may be sent even",
                "+\t// if the data stream is closed or blocked by flow control.",
                "+\t// If the channel is closed before a reply is returned, io.EOF",
                "+\t// is returned.",
                "+\tSendRequest(name string, wantReply bool, payload []byte) (bool, error)",
                "+",
                "+\t// Stderr returns an io.ReadWriter that writes to this channel",
                "+\t// with the extended data type set to stderr. Stderr may",
                "+\t// safely be read and written from a different goroutine than",
                "+\t// Read and Write respectively.",
                "+\tStderr() io.ReadWriter",
                "+}",
                "+",
                "+// Request is a request sent outside of the normal stream of",
                "+// data. Requests can either be specific to an SSH channel, or they",
                "+// can be global.",
                "+type Request struct {",
                "+\tType      string",
                "+\tWantReply bool",
                "+\tPayload   []byte",
                "+",
                "+\tch  *channel",
                "+\tmux *mux",
                "+}",
                "+",
                "+// Reply sends a response to a request. It must be called for all requests",
                "+// where WantReply is true and is a no-op otherwise. The payload argument is",
                "+// ignored for replies to channel-specific requests.",
                "+func (r *Request) Reply(ok bool, payload []byte) error {",
                "+\tif !r.WantReply {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tif r.ch == nil {",
                "+\t\treturn r.mux.ackRequest(ok, payload)",
                "+\t}",
                "+",
                "+\treturn r.ch.ackRequest(ok)",
                "+}",
                "+",
                "+// RejectionReason is an enumeration used when rejecting channel creation",
                "+// requests. See RFC 4254, section 5.1.",
                "+type RejectionReason uint32",
                "+",
                "+const (",
                "+\tProhibited RejectionReason = iota + 1",
                "+\tConnectionFailed",
                "+\tUnknownChannelType",
                "+\tResourceShortage",
                "+)",
                "+",
                "+// String converts the rejection reason to human readable form.",
                "+func (r RejectionReason) String() string {",
                "+\tswitch r {",
                "+\tcase Prohibited:",
                "+\t\treturn \"administratively prohibited\"",
                "+\tcase ConnectionFailed:",
                "+\t\treturn \"connect failed\"",
                "+\tcase UnknownChannelType:",
                "+\t\treturn \"unknown channel type\"",
                "+\tcase ResourceShortage:",
                "+\t\treturn \"resource shortage\"",
                "+\t}",
                "+\treturn fmt.Sprintf(\"unknown reason %d\", int(r))",
                "+}",
                "+",
                "+func min(a uint32, b int) uint32 {",
                "+\tif a < uint32(b) {",
                "+\t\treturn a",
                "+\t}",
                "+\treturn uint32(b)",
                "+}",
                "+",
                "+type channelDirection uint8",
                "+",
                "+const (",
                "+\tchannelInbound channelDirection = iota",
                "+\tchannelOutbound",
                "+)",
                "+",
                "+// channel is an implementation of the Channel interface that works",
                "+// with the mux class.",
                "+type channel struct {",
                "+\t// R/O after creation",
                "+\tchanType          string",
                "+\textraData         []byte",
                "+\tlocalId, remoteId uint32",
                "+",
                "+\t// maxIncomingPayload and maxRemotePayload are the maximum",
                "+\t// payload sizes of normal and extended data packets for",
                "+\t// receiving and sending, respectively. The wire packet will",
                "+\t// be 9 or 13 bytes larger (excluding encryption overhead).",
                "+\tmaxIncomingPayload uint32",
                "+\tmaxRemotePayload   uint32",
                "+",
                "+\tmux *mux",
                "+",
                "+\t// decided is set to true if an accept or reject message has been sent",
                "+\t// (for outbound channels) or received (for inbound channels).",
                "+\tdecided bool",
                "+",
                "+\t// direction contains either channelOutbound, for channels created",
                "+\t// locally, or channelInbound, for channels created by the peer.",
                "+\tdirection channelDirection",
                "+",
                "+\t// Pending internal channel messages.",
                "+\tmsg chan interface{}",
                "+",
                "+\t// Since requests have no ID, there can be only one request",
                "+\t// with WantReply=true outstanding.  This lock is held by a",
                "+\t// goroutine that has such an outgoing request pending.",
                "+\tsentRequestMu sync.Mutex",
                "+",
                "+\tincomingRequests chan *Request",
                "+",
                "+\tsentEOF bool",
                "+",
                "+\t// thread-safe data",
                "+\tremoteWin  window",
                "+\tpending    *buffer",
                "+\textPending *buffer",
                "+",
                "+\t// windowMu protects myWindow, the flow-control window.",
                "+\twindowMu sync.Mutex",
                "+\tmyWindow uint32",
                "+",
                "+\t// writeMu serializes calls to mux.conn.writePacket() and",
                "+\t// protects sentClose and packetPool. This mutex must be",
                "+\t// different from windowMu, as writePacket can block if there",
                "+\t// is a key exchange pending.",
                "+\twriteMu   sync.Mutex",
                "+\tsentClose bool",
                "+",
                "+\t// packetPool has a buffer for each extended channel ID to",
                "+\t// save allocations during writes.",
                "+\tpacketPool map[uint32][]byte",
                "+}",
                "+",
                "+// writePacket sends a packet. If the packet is a channel close, it updates",
                "+// sentClose. This method takes the lock c.writeMu.",
                "+func (c *channel) writePacket(packet []byte) error {",
                "+\tc.writeMu.Lock()",
                "+\tif c.sentClose {",
                "+\t\tc.writeMu.Unlock()",
                "+\t\treturn io.EOF",
                "+\t}",
                "+\tc.sentClose = (packet[0] == msgChannelClose)",
                "+\terr := c.mux.conn.writePacket(packet)",
                "+\tc.writeMu.Unlock()",
                "+\treturn err",
                "+}",
                "+",
                "+func (c *channel) sendMessage(msg interface{}) error {",
                "+\tif debugMux {",
                "+\t\tlog.Printf(\"send(%d): %#v\", c.mux.chanList.offset, msg)",
                "+\t}",
                "+",
                "+\tp := Marshal(msg)",
                "+\tbinary.BigEndian.PutUint32(p[1:], c.remoteId)",
                "+\treturn c.writePacket(p)",
                "+}",
                "+",
                "+// WriteExtended writes data to a specific extended stream. These streams are",
                "+// used, for example, for stderr.",
                "+func (c *channel) WriteExtended(data []byte, extendedCode uint32) (n int, err error) {",
                "+\tif c.sentEOF {",
                "+\t\treturn 0, io.EOF",
                "+\t}",
                "+\t// 1 byte message type, 4 bytes remoteId, 4 bytes data length",
                "+\topCode := byte(msgChannelData)",
                "+\theaderLength := uint32(9)",
                "+\tif extendedCode > 0 {",
                "+\t\theaderLength += 4",
                "+\t\topCode = msgChannelExtendedData",
                "+\t}",
                "+",
                "+\tc.writeMu.Lock()",
                "+\tpacket := c.packetPool[extendedCode]",
                "+\t// We don't remove the buffer from packetPool, so",
                "+\t// WriteExtended calls from different goroutines will be",
                "+\t// flagged as errors by the race detector.",
                "+\tc.writeMu.Unlock()",
                "+",
                "+\tfor len(data) > 0 {",
                "+\t\tspace := min(c.maxRemotePayload, len(data))",
                "+\t\tif space, err = c.remoteWin.reserve(space); err != nil {",
                "+\t\t\treturn n, err",
                "+\t\t}",
                "+\t\tif want := headerLength + space; uint32(cap(packet)) < want {",
                "+\t\t\tpacket = make([]byte, want)",
                "+\t\t} else {",
                "+\t\t\tpacket = packet[:want]",
                "+\t\t}",
                "+",
                "+\t\ttodo := data[:space]",
                "+",
                "+\t\tpacket[0] = opCode",
                "+\t\tbinary.BigEndian.PutUint32(packet[1:], c.remoteId)",
                "+\t\tif extendedCode > 0 {",
                "+\t\t\tbinary.BigEndian.PutUint32(packet[5:], uint32(extendedCode))",
                "+\t\t}",
                "+\t\tbinary.BigEndian.PutUint32(packet[headerLength-4:], uint32(len(todo)))",
                "+\t\tcopy(packet[headerLength:], todo)",
                "+\t\tif err = c.writePacket(packet); err != nil {",
                "+\t\t\treturn n, err",
                "+\t\t}",
                "+",
                "+\t\tn += len(todo)",
                "+\t\tdata = data[len(todo):]",
                "+\t}",
                "+",
                "+\tc.writeMu.Lock()",
                "+\tc.packetPool[extendedCode] = packet",
                "+\tc.writeMu.Unlock()",
                "+",
                "+\treturn n, err",
                "+}",
                "+",
                "+func (c *channel) handleData(packet []byte) error {",
                "+\theaderLen := 9",
                "+\tisExtendedData := packet[0] == msgChannelExtendedData",
                "+\tif isExtendedData {",
                "+\t\theaderLen = 13",
                "+\t}",
                "+\tif len(packet) < headerLen {",
                "+\t\t// malformed data packet",
                "+\t\treturn parseError(packet[0])",
                "+\t}",
                "+",
                "+\tvar extended uint32",
                "+\tif isExtendedData {",
                "+\t\textended = binary.BigEndian.Uint32(packet[5:])",
                "+\t}",
                "+",
                "+\tlength := binary.BigEndian.Uint32(packet[headerLen-4 : headerLen])",
                "+\tif length == 0 {",
                "+\t\treturn nil",
                "+\t}",
                "+\tif length > c.maxIncomingPayload {",
                "+\t\t// TODO(hanwen): should send Disconnect?",
                "+\t\treturn errors.New(\"ssh: incoming packet exceeds maximum payload size\")",
                "+\t}",
                "+",
                "+\tdata := packet[headerLen:]",
                "+\tif length != uint32(len(data)) {",
                "+\t\treturn errors.New(\"ssh: wrong packet length\")",
                "+\t}",
                "+",
                "+\tc.windowMu.Lock()",
                "+\tif c.myWindow < length {",
                "+\t\tc.windowMu.Unlock()",
                "+\t\t// TODO(hanwen): should send Disconnect with reason?",
                "+\t\treturn errors.New(\"ssh: remote side wrote too much\")",
                "+\t}",
                "+\tc.myWindow -= length",
                "+\tc.windowMu.Unlock()",
                "+",
                "+\tif extended == 1 {",
                "+\t\tc.extPending.write(data)",
                "+\t} else if extended > 0 {",
                "+\t\t// discard other extended data.",
                "+\t} else {",
                "+\t\tc.pending.write(data)",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+func (c *channel) adjustWindow(n uint32) error {",
                "+\tc.windowMu.Lock()",
                "+\t// Since myWindow is managed on our side, and can never exceed",
                "+\t// the initial window setting, we don't worry about overflow.",
                "+\tc.myWindow += uint32(n)",
                "+\tc.windowMu.Unlock()",
                "+\treturn c.sendMessage(windowAdjustMsg{",
                "+\t\tAdditionalBytes: uint32(n),",
                "+\t})",
                "+}",
                "+",
                "+func (c *channel) ReadExtended(data []byte, extended uint32) (n int, err error) {",
                "+\tswitch extended {",
                "+\tcase 1:",
                "+\t\tn, err = c.extPending.Read(data)",
                "+\tcase 0:",
                "+\t\tn, err = c.pending.Read(data)",
                "+\tdefault:",
                "+\t\treturn 0, fmt.Errorf(\"ssh: extended code %d unimplemented\", extended)",
                "+\t}",
                "+",
                "+\tif n > 0 {",
                "+\t\terr = c.adjustWindow(uint32(n))",
                "+\t\t// sendWindowAdjust can return io.EOF if the remote",
                "+\t\t// peer has closed the connection, however we want to",
                "+\t\t// defer forwarding io.EOF to the caller of Read until",
                "+\t\t// the buffer has been drained.",
                "+\t\tif n > 0 && err == io.EOF {",
                "+\t\t\terr = nil",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn n, err",
                "+}",
                "+",
                "+func (c *channel) close() {",
                "+\tc.pending.eof()",
                "+\tc.extPending.eof()",
                "+\tclose(c.msg)",
                "+\tclose(c.incomingRequests)",
                "+\tc.writeMu.Lock()",
                "+\t// This is not necessary for a normal channel teardown, but if",
                "+\t// there was another error, it is.",
                "+\tc.sentClose = true",
                "+\tc.writeMu.Unlock()",
                "+\t// Unblock writers.",
                "+\tc.remoteWin.close()",
                "+}",
                "+",
                "+// responseMessageReceived is called when a success or failure message is",
                "+// received on a channel to check that such a message is reasonable for the",
                "+// given channel.",
                "+func (c *channel) responseMessageReceived() error {",
                "+\tif c.direction == channelInbound {",
                "+\t\treturn errors.New(\"ssh: channel response message received on inbound channel\")",
                "+\t}",
                "+\tif c.decided {",
                "+\t\treturn errors.New(\"ssh: duplicate response received for channel\")",
                "+\t}",
                "+\tc.decided = true",
                "+\treturn nil",
                "+}",
                "+",
                "+func (c *channel) handlePacket(packet []byte) error {",
                "+\tswitch packet[0] {",
                "+\tcase msgChannelData, msgChannelExtendedData:",
                "+\t\treturn c.handleData(packet)",
                "+\tcase msgChannelClose:",
                "+\t\tc.sendMessage(channelCloseMsg{PeersId: c.remoteId})",
                "+\t\tc.mux.chanList.remove(c.localId)",
                "+\t\tc.close()",
                "+\t\treturn nil",
                "+\tcase msgChannelEOF:",
                "+\t\t// RFC 4254 is mute on how EOF affects dataExt messages but",
                "+\t\t// it is logical to signal EOF at the same time.",
                "+\t\tc.extPending.eof()",
                "+\t\tc.pending.eof()",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tdecoded, err := decode(packet)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tswitch msg := decoded.(type) {",
                "+\tcase *channelOpenFailureMsg:",
                "+\t\tif err := c.responseMessageReceived(); err != nil {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t\tc.mux.chanList.remove(msg.PeersId)",
                "+\t\tc.msg <- msg",
                "+\tcase *channelOpenConfirmMsg:",
                "+\t\tif err := c.responseMessageReceived(); err != nil {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t\tif msg.MaxPacketSize < minPacketLength || msg.MaxPacketSize > 1<<31 {",
                "+\t\t\treturn fmt.Errorf(\"ssh: invalid MaxPacketSize %d from peer\", msg.MaxPacketSize)",
                "+\t\t}",
                "+\t\tc.remoteId = msg.MyId",
                "+\t\tc.maxRemotePayload = msg.MaxPacketSize",
                "+\t\tc.remoteWin.add(msg.MyWindow)",
                "+\t\tc.msg <- msg",
                "+\tcase *windowAdjustMsg:",
                "+\t\tif !c.remoteWin.add(msg.AdditionalBytes) {",
                "+\t\t\treturn fmt.Errorf(\"ssh: invalid window update for %d bytes\", msg.AdditionalBytes)",
                "+\t\t}",
                "+\tcase *channelRequestMsg:",
                "+\t\treq := Request{",
                "+\t\t\tType:      msg.Request,",
                "+\t\t\tWantReply: msg.WantReply,",
                "+\t\t\tPayload:   msg.RequestSpecificData,",
                "+\t\t\tch:        c,",
                "+\t\t}",
                "+",
                "+\t\tc.incomingRequests <- &req",
                "+\tdefault:",
                "+\t\tc.msg <- msg",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+func (m *mux) newChannel(chanType string, direction channelDirection, extraData []byte) *channel {",
                "+\tch := &channel{",
                "+\t\tremoteWin:        window{Cond: newCond()},",
                "+\t\tmyWindow:         channelWindowSize,",
                "+\t\tpending:          newBuffer(),",
                "+\t\textPending:       newBuffer(),",
                "+\t\tdirection:        direction,",
                "+\t\tincomingRequests: make(chan *Request, chanSize),",
                "+\t\tmsg:              make(chan interface{}, chanSize),",
                "+\t\tchanType:         chanType,",
                "+\t\textraData:        extraData,",
                "+\t\tmux:              m,",
                "+\t\tpacketPool:       make(map[uint32][]byte),",
                "+\t}",
                "+\tch.localId = m.chanList.add(ch)",
                "+\treturn ch",
                "+}",
                "+",
                "+var errUndecided = errors.New(\"ssh: must Accept or Reject channel\")",
                "+var errDecidedAlready = errors.New(\"ssh: can call Accept or Reject only once\")",
                "+",
                "+type extChannel struct {",
                "+\tcode uint32",
                "+\tch   *channel",
                "+}",
                "+",
                "+func (e *extChannel) Write(data []byte) (n int, err error) {",
                "+\treturn e.ch.WriteExtended(data, e.code)",
                "+}",
                "+",
                "+func (e *extChannel) Read(data []byte) (n int, err error) {",
                "+\treturn e.ch.ReadExtended(data, e.code)",
                "+}",
                "+",
                "+func (c *channel) Accept() (Channel, <-chan *Request, error) {",
                "+\tif c.decided {",
                "+\t\treturn nil, nil, errDecidedAlready",
                "+\t}",
                "+\tc.maxIncomingPayload = channelMaxPacket",
                "+\tconfirm := channelOpenConfirmMsg{",
                "+\t\tPeersId:       c.remoteId,",
                "+\t\tMyId:          c.localId,",
                "+\t\tMyWindow:      c.myWindow,",
                "+\t\tMaxPacketSize: c.maxIncomingPayload,",
                "+\t}",
                "+\tc.decided = true",
                "+\tif err := c.sendMessage(confirm); err != nil {",
                "+\t\treturn nil, nil, err",
                "+\t}",
                "+",
                "+\treturn c, c.incomingRequests, nil",
                "+}",
                "+",
                "+func (ch *channel) Reject(reason RejectionReason, message string) error {",
                "+\tif ch.decided {",
                "+\t\treturn errDecidedAlready",
                "+\t}",
                "+\treject := channelOpenFailureMsg{",
                "+\t\tPeersId:  ch.remoteId,",
                "+\t\tReason:   reason,",
                "+\t\tMessage:  message,",
                "+\t\tLanguage: \"en\",",
                "+\t}",
                "+\tch.decided = true",
                "+\treturn ch.sendMessage(reject)",
                "+}",
                "+",
                "+func (ch *channel) Read(data []byte) (int, error) {",
                "+\tif !ch.decided {",
                "+\t\treturn 0, errUndecided",
                "+\t}",
                "+\treturn ch.ReadExtended(data, 0)",
                "+}",
                "+",
                "+func (ch *channel) Write(data []byte) (int, error) {",
                "+\tif !ch.decided {",
                "+\t\treturn 0, errUndecided",
                "+\t}",
                "+\treturn ch.WriteExtended(data, 0)",
                "+}",
                "+",
                "+func (ch *channel) CloseWrite() error {",
                "+\tif !ch.decided {",
                "+\t\treturn errUndecided",
                "+\t}",
                "+\tch.sentEOF = true",
                "+\treturn ch.sendMessage(channelEOFMsg{",
                "+\t\tPeersId: ch.remoteId})",
                "+}",
                "+",
                "+func (ch *channel) Close() error {",
                "+\tif !ch.decided {",
                "+\t\treturn errUndecided",
                "+\t}",
                "+",
                "+\treturn ch.sendMessage(channelCloseMsg{",
                "+\t\tPeersId: ch.remoteId})",
                "+}",
                "+",
                "+// Extended returns an io.ReadWriter that sends and receives data on the given,",
                "+// SSH extended stream. Such streams are used, for example, for stderr.",
                "+func (ch *channel) Extended(code uint32) io.ReadWriter {",
                "+\tif !ch.decided {",
                "+\t\treturn nil",
                "+\t}",
                "+\treturn &extChannel{code, ch}",
                "+}",
                "+",
                "+func (ch *channel) Stderr() io.ReadWriter {",
                "+\treturn ch.Extended(1)",
                "+}",
                "+",
                "+func (ch *channel) SendRequest(name string, wantReply bool, payload []byte) (bool, error) {",
                "+\tif !ch.decided {",
                "+\t\treturn false, errUndecided",
                "+\t}",
                "+",
                "+\tif wantReply {",
                "+\t\tch.sentRequestMu.Lock()",
                "+\t\tdefer ch.sentRequestMu.Unlock()",
                "+\t}",
                "+",
                "+\tmsg := channelRequestMsg{",
                "+\t\tPeersId:             ch.remoteId,",
                "+\t\tRequest:             name,",
                "+\t\tWantReply:           wantReply,",
                "+\t\tRequestSpecificData: payload,",
                "+\t}",
                "+",
                "+\tif err := ch.sendMessage(msg); err != nil {",
                "+\t\treturn false, err",
                "+\t}",
                "+",
                "+\tif wantReply {",
                "+\t\tm, ok := (<-ch.msg)",
                "+\t\tif !ok {",
                "+\t\t\treturn false, io.EOF",
                "+\t\t}",
                "+\t\tswitch m.(type) {",
                "+\t\tcase *channelRequestFailureMsg:",
                "+\t\t\treturn false, nil",
                "+\t\tcase *channelRequestSuccessMsg:",
                "+\t\t\treturn true, nil",
                "+\t\tdefault:",
                "+\t\t\treturn false, fmt.Errorf(\"ssh: unexpected response to channel request: %#v\", m)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn false, nil",
                "+}",
                "+",
                "+// ackRequest either sends an ack or nack to the channel request.",
                "+func (ch *channel) ackRequest(ok bool) error {",
                "+\tif !ch.decided {",
                "+\t\treturn errUndecided",
                "+\t}",
                "+",
                "+\tvar msg interface{}",
                "+\tif !ok {",
                "+\t\tmsg = channelRequestFailureMsg{",
                "+\t\t\tPeersId: ch.remoteId,",
                "+\t\t}",
                "+\t} else {",
                "+\t\tmsg = channelRequestSuccessMsg{",
                "+\t\t\tPeersId: ch.remoteId,",
                "+\t\t}",
                "+\t}",
                "+\treturn ch.sendMessage(msg)",
                "+}",
                "+",
                "+func (ch *channel) ChannelType() string {",
                "+\treturn ch.chanType",
                "+}",
                "+",
                "+func (ch *channel) ExtraData() []byte {",
                "+\treturn ch.extraData",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/cipher.go b/vendor/golang.org/x/crypto/ssh/cipher.go",
                "new file mode 100644",
                "index 000000000..22bb30ccd",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/cipher.go",
                "@@ -0,0 +1,629 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"crypto/aes\"",
                "+\t\"crypto/cipher\"",
                "+\t\"crypto/des\"",
                "+\t\"crypto/rc4\"",
                "+\t\"crypto/subtle\"",
                "+\t\"encoding/binary\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"hash\"",
                "+\t\"io\"",
                "+\t\"io/ioutil\"",
                "+)",
                "+",
                "+const (",
                "+\tpacketSizeMultiple = 16 // TODO(huin) this should be determined by the cipher.",
                "+",
                "+\t// RFC 4253 section 6.1 defines a minimum packet size of 32768 that implementations",
                "+\t// MUST be able to process (plus a few more kilobytes for padding and mac). The RFC",
                "+\t// indicates implementations SHOULD be able to handle larger packet sizes, but then",
                "+\t// waffles on about reasonable limits.",
                "+\t//",
                "+\t// OpenSSH caps their maxPacket at 256kB so we choose to do",
                "+\t// the same. maxPacket is also used to ensure that uint32",
                "+\t// length fields do not overflow, so it should remain well",
                "+\t// below 4G.",
                "+\tmaxPacket = 256 * 1024",
                "+)",
                "+",
                "+// noneCipher implements cipher.Stream and provides no encryption. It is used",
                "+// by the transport before the first key-exchange.",
                "+type noneCipher struct{}",
                "+",
                "+func (c noneCipher) XORKeyStream(dst, src []byte) {",
                "+\tcopy(dst, src)",
                "+}",
                "+",
                "+func newAESCTR(key, iv []byte) (cipher.Stream, error) {",
                "+\tc, err := aes.NewCipher(key)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn cipher.NewCTR(c, iv), nil",
                "+}",
                "+",
                "+func newRC4(key, iv []byte) (cipher.Stream, error) {",
                "+\treturn rc4.NewCipher(key)",
                "+}",
                "+",
                "+type streamCipherMode struct {",
                "+\tkeySize    int",
                "+\tivSize     int",
                "+\tskip       int",
                "+\tcreateFunc func(key, iv []byte) (cipher.Stream, error)",
                "+}",
                "+",
                "+func (c *streamCipherMode) createStream(key, iv []byte) (cipher.Stream, error) {",
                "+\tif len(key) < c.keySize {",
                "+\t\tpanic(\"ssh: key length too small for cipher\")",
                "+\t}",
                "+\tif len(iv) < c.ivSize {",
                "+\t\tpanic(\"ssh: iv too small for cipher\")",
                "+\t}",
                "+",
                "+\tstream, err := c.createFunc(key[:c.keySize], iv[:c.ivSize])",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tvar streamDump []byte",
                "+\tif c.skip > 0 {",
                "+\t\tstreamDump = make([]byte, 512)",
                "+\t}",
                "+",
                "+\tfor remainingToDump := c.skip; remainingToDump > 0; {",
                "+\t\tdumpThisTime := remainingToDump",
                "+\t\tif dumpThisTime > len(streamDump) {",
                "+\t\t\tdumpThisTime = len(streamDump)",
                "+\t\t}",
                "+\t\tstream.XORKeyStream(streamDump[:dumpThisTime], streamDump[:dumpThisTime])",
                "+\t\tremainingToDump -= dumpThisTime",
                "+\t}",
                "+",
                "+\treturn stream, nil",
                "+}",
                "+",
                "+// cipherModes documents properties of supported ciphers. Ciphers not included",
                "+// are not supported and will not be negotiated, even if explicitly requested in",
                "+// ClientConfig.Crypto.Ciphers.",
                "+var cipherModes = map[string]*streamCipherMode{",
                "+\t// Ciphers from RFC4344, which introduced many CTR-based ciphers. Algorithms",
                "+\t// are defined in the order specified in the RFC.",
                "+\t\"aes128-ctr\": {16, aes.BlockSize, 0, newAESCTR},",
                "+\t\"aes192-ctr\": {24, aes.BlockSize, 0, newAESCTR},",
                "+\t\"aes256-ctr\": {32, aes.BlockSize, 0, newAESCTR},",
                "+",
                "+\t// Ciphers from RFC4345, which introduces security-improved arcfour ciphers.",
                "+\t// They are defined in the order specified in the RFC.",
                "+\t\"arcfour128\": {16, 0, 1536, newRC4},",
                "+\t\"arcfour256\": {32, 0, 1536, newRC4},",
                "+",
                "+\t// Cipher defined in RFC 4253, which describes SSH Transport Layer Protocol.",
                "+\t// Note that this cipher is not safe, as stated in RFC 4253: \"Arcfour (and",
                "+\t// RC4) has problems with weak keys, and should be used with caution.\"",
                "+\t// RFC4345 introduces improved versions of Arcfour.",
                "+\t\"arcfour\": {16, 0, 0, newRC4},",
                "+",
                "+\t// AES-GCM is not a stream cipher, so it is constructed with a",
                "+\t// special case. If we add any more non-stream ciphers, we",
                "+\t// should invest a cleaner way to do this.",
                "+\tgcmCipherID: {16, 12, 0, nil},",
                "+",
                "+\t// CBC mode is insecure and so is not included in the default config.",
                "+\t// (See http://www.isg.rhul.ac.uk/~kp/SandPfinal.pdf). If absolutely",
                "+\t// needed, it's possible to specify a custom Config to enable it.",
                "+\t// You should expect that an active attacker can recover plaintext if",
                "+\t// you do.",
                "+\taes128cbcID: {16, aes.BlockSize, 0, nil},",
                "+",
                "+\t// 3des-cbc is insecure and is disabled by default.",
                "+\ttripledescbcID: {24, des.BlockSize, 0, nil},",
                "+}",
                "+",
                "+// prefixLen is the length of the packet prefix that contains the packet length",
                "+// and number of padding bytes.",
                "+const prefixLen = 5",
                "+",
                "+// streamPacketCipher is a packetCipher using a stream cipher.",
                "+type streamPacketCipher struct {",
                "+\tmac    hash.Hash",
                "+\tcipher cipher.Stream",
                "+\tetm    bool",
                "+",
                "+\t// The following members are to avoid per-packet allocations.",
                "+\tprefix      [prefixLen]byte",
                "+\tseqNumBytes [4]byte",
                "+\tpadding     [2 * packetSizeMultiple]byte",
                "+\tpacketData  []byte",
                "+\tmacResult   []byte",
                "+}",
                "+",
                "+// readPacket reads and decrypt a single packet from the reader argument.",
                "+func (s *streamPacketCipher) readPacket(seqNum uint32, r io.Reader) ([]byte, error) {",
                "+\tif _, err := io.ReadFull(r, s.prefix[:]); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tvar encryptedPaddingLength [1]byte",
                "+\tif s.mac != nil && s.etm {",
                "+\t\tcopy(encryptedPaddingLength[:], s.prefix[4:5])",
                "+\t\ts.cipher.XORKeyStream(s.prefix[4:5], s.prefix[4:5])",
                "+\t} else {",
                "+\t\ts.cipher.XORKeyStream(s.prefix[:], s.prefix[:])",
                "+\t}",
                "+",
                "+\tlength := binary.BigEndian.Uint32(s.prefix[0:4])",
                "+\tpaddingLength := uint32(s.prefix[4])",
                "+",
                "+\tvar macSize uint32",
                "+\tif s.mac != nil {",
                "+\t\ts.mac.Reset()",
                "+\t\tbinary.BigEndian.PutUint32(s.seqNumBytes[:], seqNum)",
                "+\t\ts.mac.Write(s.seqNumBytes[:])",
                "+\t\tif s.etm {",
                "+\t\t\ts.mac.Write(s.prefix[:4])",
                "+\t\t\ts.mac.Write(encryptedPaddingLength[:])",
                "+\t\t} else {",
                "+\t\t\ts.mac.Write(s.prefix[:])",
                "+\t\t}",
                "+\t\tmacSize = uint32(s.mac.Size())",
                "+\t}",
                "+",
                "+\tif length <= paddingLength+1 {",
                "+\t\treturn nil, errors.New(\"ssh: invalid packet length, packet too small\")",
                "+\t}",
                "+",
                "+\tif length > maxPacket {",
                "+\t\treturn nil, errors.New(\"ssh: invalid packet length, packet too large\")",
                "+\t}",
                "+",
                "+\t// the maxPacket check above ensures that length-1+macSize",
                "+\t// does not overflow.",
                "+\tif uint32(cap(s.packetData)) < length-1+macSize {",
                "+\t\ts.packetData = make([]byte, length-1+macSize)",
                "+\t} else {",
                "+\t\ts.packetData = s.packetData[:length-1+macSize]",
                "+\t}",
                "+",
                "+\tif _, err := io.ReadFull(r, s.packetData); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tmac := s.packetData[length-1:]",
                "+\tdata := s.packetData[:length-1]",
                "+",
                "+\tif s.mac != nil && s.etm {",
                "+\t\ts.mac.Write(data)",
                "+\t}",
                "+",
                "+\ts.cipher.XORKeyStream(data, data)",
                "+",
                "+\tif s.mac != nil {",
                "+\t\tif !s.etm {",
                "+\t\t\ts.mac.Write(data)",
                "+\t\t}",
                "+\t\ts.macResult = s.mac.Sum(s.macResult[:0])",
                "+\t\tif subtle.ConstantTimeCompare(s.macResult, mac) != 1 {",
                "+\t\t\treturn nil, errors.New(\"ssh: MAC failure\")",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn s.packetData[:length-paddingLength-1], nil",
                "+}",
                "+",
                "+// writePacket encrypts and sends a packet of data to the writer argument",
                "+func (s *streamPacketCipher) writePacket(seqNum uint32, w io.Writer, rand io.Reader, packet []byte) error {",
                "+\tif len(packet) > maxPacket {",
                "+\t\treturn errors.New(\"ssh: packet too large\")",
                "+\t}",
                "+",
                "+\taadlen := 0",
                "+\tif s.mac != nil && s.etm {",
                "+\t\t// packet length is not encrypted for EtM modes",
                "+\t\taadlen = 4",
                "+\t}",
                "+",
                "+\tpaddingLength := packetSizeMultiple - (prefixLen+len(packet)-aadlen)%packetSizeMultiple",
                "+\tif paddingLength < 4 {",
                "+\t\tpaddingLength += packetSizeMultiple",
                "+\t}",
                "+",
                "+\tlength := len(packet) + 1 + paddingLength",
                "+\tbinary.BigEndian.PutUint32(s.prefix[:], uint32(length))",
                "+\ts.prefix[4] = byte(paddingLength)",
                "+\tpadding := s.padding[:paddingLength]",
                "+\tif _, err := io.ReadFull(rand, padding); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tif s.mac != nil {",
                "+\t\ts.mac.Reset()",
                "+\t\tbinary.BigEndian.PutUint32(s.seqNumBytes[:], seqNum)",
                "+\t\ts.mac.Write(s.seqNumBytes[:])",
                "+",
                "+\t\tif s.etm {",
                "+\t\t\t// For EtM algorithms, the packet length must stay unencrypted,",
                "+\t\t\t// but the following data (padding length) must be encrypted",
                "+\t\t\ts.cipher.XORKeyStream(s.prefix[4:5], s.prefix[4:5])",
                "+\t\t}",
                "+",
                "+\t\ts.mac.Write(s.prefix[:])",
                "+",
                "+\t\tif !s.etm {",
                "+\t\t\t// For non-EtM algorithms, the algorithm is applied on unencrypted data",
                "+\t\t\ts.mac.Write(packet)",
                "+\t\t\ts.mac.Write(padding)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif !(s.mac != nil && s.etm) {",
                "+\t\t// For EtM algorithms, the padding length has already been encrypted",
                "+\t\t// and the packet length must remain unencrypted",
                "+\t\ts.cipher.XORKeyStream(s.prefix[:], s.prefix[:])",
                "+\t}",
                "+",
                "+\ts.cipher.XORKeyStream(packet, packet)",
                "+\ts.cipher.XORKeyStream(padding, padding)",
                "+",
                "+\tif s.mac != nil && s.etm {",
                "+\t\t// For EtM algorithms, packet and padding must be encrypted",
                "+\t\ts.mac.Write(packet)",
                "+\t\ts.mac.Write(padding)",
                "+\t}",
                "+",
                "+\tif _, err := w.Write(s.prefix[:]); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tif _, err := w.Write(packet); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tif _, err := w.Write(padding); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tif s.mac != nil {",
                "+\t\ts.macResult = s.mac.Sum(s.macResult[:0])",
                "+\t\tif _, err := w.Write(s.macResult); err != nil {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+type gcmCipher struct {",
                "+\taead   cipher.AEAD",
                "+\tprefix [4]byte",
                "+\tiv     []byte",
                "+\tbuf    []byte",
                "+}",
                "+",
                "+func newGCMCipher(iv, key, macKey []byte) (packetCipher, error) {",
                "+\tc, err := aes.NewCipher(key)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\taead, err := cipher.NewGCM(c)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn &gcmCipher{",
                "+\t\taead: aead,",
                "+\t\tiv:   iv,",
                "+\t}, nil",
                "+}",
                "+",
                "+const gcmTagSize = 16",
                "+",
                "+func (c *gcmCipher) writePacket(seqNum uint32, w io.Writer, rand io.Reader, packet []byte) error {",
                "+\t// Pad out to multiple of 16 bytes. This is different from the",
                "+\t// stream cipher because that encrypts the length too.",
                "+\tpadding := byte(packetSizeMultiple - (1+len(packet))%packetSizeMultiple)",
                "+\tif padding < 4 {",
                "+\t\tpadding += packetSizeMultiple",
                "+\t}",
                "+",
                "+\tlength := uint32(len(packet) + int(padding) + 1)",
                "+\tbinary.BigEndian.PutUint32(c.prefix[:], length)",
                "+\tif _, err := w.Write(c.prefix[:]); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tif cap(c.buf) < int(length) {",
                "+\t\tc.buf = make([]byte, length)",
                "+\t} else {",
                "+\t\tc.buf = c.buf[:length]",
                "+\t}",
                "+",
                "+\tc.buf[0] = padding",
                "+\tcopy(c.buf[1:], packet)",
                "+\tif _, err := io.ReadFull(rand, c.buf[1+len(packet):]); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tc.buf = c.aead.Seal(c.buf[:0], c.iv, c.buf, c.prefix[:])",
                "+\tif _, err := w.Write(c.buf); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tc.incIV()",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (c *gcmCipher) incIV() {",
                "+\tfor i := 4 + 7; i >= 4; i-- {",
                "+\t\tc.iv[i]++",
                "+\t\tif c.iv[i] != 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func (c *gcmCipher) readPacket(seqNum uint32, r io.Reader) ([]byte, error) {",
                "+\tif _, err := io.ReadFull(r, c.prefix[:]); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tlength := binary.BigEndian.Uint32(c.prefix[:])",
                "+\tif length > maxPacket {",
                "+\t\treturn nil, errors.New(\"ssh: max packet length exceeded.\")",
                "+\t}",
                "+",
                "+\tif cap(c.buf) < int(length+gcmTagSize) {",
                "+\t\tc.buf = make([]byte, length+gcmTagSize)",
                "+\t} else {",
                "+\t\tc.buf = c.buf[:length+gcmTagSize]",
                "+\t}",
                "+",
                "+\tif _, err := io.ReadFull(r, c.buf); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tplain, err := c.aead.Open(c.buf[:0], c.iv, c.buf, c.prefix[:])",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tc.incIV()",
                "+",
                "+\tpadding := plain[0]",
                "+\tif padding < 4 {",
                "+\t\t// padding is a byte, so it automatically satisfies",
                "+\t\t// the maximum size, which is 255.",
                "+\t\treturn nil, fmt.Errorf(\"ssh: illegal padding %d\", padding)",
                "+\t}",
                "+",
                "+\tif int(padding+1) >= len(plain) {",
                "+\t\treturn nil, fmt.Errorf(\"ssh: padding %d too large\", padding)",
                "+\t}",
                "+\tplain = plain[1 : length-uint32(padding)]",
                "+\treturn plain, nil",
                "+}",
                "+",
                "+// cbcCipher implements aes128-cbc cipher defined in RFC 4253 section 6.1",
                "+type cbcCipher struct {",
                "+\tmac       hash.Hash",
                "+\tmacSize   uint32",
                "+\tdecrypter cipher.BlockMode",
                "+\tencrypter cipher.BlockMode",
                "+",
                "+\t// The following members are to avoid per-packet allocations.",
                "+\tseqNumBytes [4]byte",
                "+\tpacketData  []byte",
                "+\tmacResult   []byte",
                "+",
                "+\t// Amount of data we should still read to hide which",
                "+\t// verification error triggered.",
                "+\toracleCamouflage uint32",
                "+}",
                "+",
                "+func newCBCCipher(c cipher.Block, iv, key, macKey []byte, algs directionAlgorithms) (packetCipher, error) {",
                "+\tcbc := &cbcCipher{",
                "+\t\tmac:        macModes[algs.MAC].new(macKey),",
                "+\t\tdecrypter:  cipher.NewCBCDecrypter(c, iv),",
                "+\t\tencrypter:  cipher.NewCBCEncrypter(c, iv),",
                "+\t\tpacketData: make([]byte, 1024),",
                "+\t}",
                "+\tif cbc.mac != nil {",
                "+\t\tcbc.macSize = uint32(cbc.mac.Size())",
                "+\t}",
                "+",
                "+\treturn cbc, nil",
                "+}",
                "+",
                "+func newAESCBCCipher(iv, key, macKey []byte, algs directionAlgorithms) (packetCipher, error) {",
                "+\tc, err := aes.NewCipher(key)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tcbc, err := newCBCCipher(c, iv, key, macKey, algs)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn cbc, nil",
                "+}",
                "+",
                "+func newTripleDESCBCCipher(iv, key, macKey []byte, algs directionAlgorithms) (packetCipher, error) {",
                "+\tc, err := des.NewTripleDESCipher(key)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tcbc, err := newCBCCipher(c, iv, key, macKey, algs)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn cbc, nil",
                "+}",
                "+",
                "+func maxUInt32(a, b int) uint32 {",
                "+\tif a > b {",
                "+\t\treturn uint32(a)",
                "+\t}",
                "+\treturn uint32(b)",
                "+}",
                "+",
                "+const (",
                "+\tcbcMinPacketSizeMultiple = 8",
                "+\tcbcMinPacketSize         = 16",
                "+\tcbcMinPaddingSize        = 4",
                "+)",
                "+",
                "+// cbcError represents a verification error that may leak information.",
                "+type cbcError string",
                "+",
                "+func (e cbcError) Error() string { return string(e) }",
                "+",
                "+func (c *cbcCipher) readPacket(seqNum uint32, r io.Reader) ([]byte, error) {",
                "+\tp, err := c.readPacketLeaky(seqNum, r)",
                "+\tif err != nil {",
                "+\t\tif _, ok := err.(cbcError); ok {",
                "+\t\t\t// Verification error: read a fixed amount of",
                "+\t\t\t// data, to make distinguishing between",
                "+\t\t\t// failing MAC and failing length check more",
                "+\t\t\t// difficult.",
                "+\t\t\tio.CopyN(ioutil.Discard, r, int64(c.oracleCamouflage))",
                "+\t\t}",
                "+\t}",
                "+\treturn p, err",
                "+}",
                "+",
                "+func (c *cbcCipher) readPacketLeaky(seqNum uint32, r io.Reader) ([]byte, error) {",
                "+\tblockSize := c.decrypter.BlockSize()",
                "+",
                "+\t// Read the header, which will include some of the subsequent data in the",
                "+\t// case of block ciphers - this is copied back to the payload later.",
                "+\t// How many bytes of payload/padding will be read with this first read.",
                "+\tfirstBlockLength := uint32((prefixLen + blockSize - 1) / blockSize * blockSize)",
                "+\tfirstBlock := c.packetData[:firstBlockLength]",
                "+\tif _, err := io.ReadFull(r, firstBlock); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tc.oracleCamouflage = maxPacket + 4 + c.macSize - firstBlockLength",
                "+",
                "+\tc.decrypter.CryptBlocks(firstBlock, firstBlock)",
                "+\tlength := binary.BigEndian.Uint32(firstBlock[:4])",
                "+\tif length > maxPacket {",
                "+\t\treturn nil, cbcError(\"ssh: packet too large\")",
                "+\t}",
                "+\tif length+4 < maxUInt32(cbcMinPacketSize, blockSize) {",
                "+\t\t// The minimum size of a packet is 16 (or the cipher block size, whichever",
                "+\t\t// is larger) bytes.",
                "+\t\treturn nil, cbcError(\"ssh: packet too small\")",
                "+\t}",
                "+\t// The length of the packet (including the length field but not the MAC) must",
                "+\t// be a multiple of the block size or 8, whichever is larger.",
                "+\tif (length+4)%maxUInt32(cbcMinPacketSizeMultiple, blockSize) != 0 {",
                "+\t\treturn nil, cbcError(\"ssh: invalid packet length multiple\")",
                "+\t}",
                "+",
                "+\tpaddingLength := uint32(firstBlock[4])",
                "+\tif paddingLength < cbcMinPaddingSize || length <= paddingLength+1 {",
                "+\t\treturn nil, cbcError(\"ssh: invalid packet length\")",
                "+\t}",
                "+",
                "+\t// Positions within the c.packetData buffer:",
                "+\tmacStart := 4 + length",
                "+\tpaddingStart := macStart - paddingLength",
                "+",
                "+\t// Entire packet size, starting before length, ending at end of mac.",
                "+\tentirePacketSize := macStart + c.macSize",
                "+",
                "+\t// Ensure c.packetData is large enough for the entire packet data.",
                "+\tif uint32(cap(c.packetData)) < entirePacketSize {",
                "+\t\t// Still need to upsize and copy, but this should be rare at runtime, only",
                "+\t\t// on upsizing the packetData buffer.",
                "+\t\tc.packetData = make([]byte, entirePacketSize)",
                "+\t\tcopy(c.packetData, firstBlock)",
                "+\t} else {",
                "+\t\tc.packetData = c.packetData[:entirePacketSize]",
                "+\t}",
                "+",
                "+\tif n, err := io.ReadFull(r, c.packetData[firstBlockLength:]); err != nil {",
                "+\t\treturn nil, err",
                "+\t} else {",
                "+\t\tc.oracleCamouflage -= uint32(n)",
                "+\t}",
                "+",
                "+\tremainingCrypted := c.packetData[firstBlockLength:macStart]",
                "+\tc.decrypter.CryptBlocks(remainingCrypted, remainingCrypted)",
                "+",
                "+\tmac := c.packetData[macStart:]",
                "+\tif c.mac != nil {",
                "+\t\tc.mac.Reset()",
                "+\t\tbinary.BigEndian.PutUint32(c.seqNumBytes[:], seqNum)",
                "+\t\tc.mac.Write(c.seqNumBytes[:])",
                "+\t\tc.mac.Write(c.packetData[:macStart])",
                "+\t\tc.macResult = c.mac.Sum(c.macResult[:0])",
                "+\t\tif subtle.ConstantTimeCompare(c.macResult, mac) != 1 {",
                "+\t\t\treturn nil, cbcError(\"ssh: MAC failure\")",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn c.packetData[prefixLen:paddingStart], nil",
                "+}",
                "+",
                "+func (c *cbcCipher) writePacket(seqNum uint32, w io.Writer, rand io.Reader, packet []byte) error {",
                "+\teffectiveBlockSize := maxUInt32(cbcMinPacketSizeMultiple, c.encrypter.BlockSize())",
                "+",
                "+\t// Length of encrypted portion of the packet (header, payload, padding).",
                "+\t// Enforce minimum padding and packet size.",
                "+\tencLength := maxUInt32(prefixLen+len(packet)+cbcMinPaddingSize, cbcMinPaddingSize)",
                "+\t// Enforce block size.",
                "+\tencLength = (encLength + effectiveBlockSize - 1) / effectiveBlockSize * effectiveBlockSize",
                "+",
                "+\tlength := encLength - 4",
                "+\tpaddingLength := int(length) - (1 + len(packet))",
                "+",
                "+\t// Overall buffer contains: header, payload, padding, mac.",
                "+\t// Space for the MAC is reserved in the capacity but not the slice length.",
                "+\tbufferSize := encLength + c.macSize",
                "+\tif uint32(cap(c.packetData)) < bufferSize {",
                "+\t\tc.packetData = make([]byte, encLength, bufferSize)",
                "+\t} else {",
                "+\t\tc.packetData = c.packetData[:encLength]",
                "+\t}",
                "+",
                "+\tp := c.packetData",
                "+",
                "+\t// Packet header.",
                "+\tbinary.BigEndian.PutUint32(p, length)",
                "+\tp = p[4:]",
                "+\tp[0] = byte(paddingLength)",
                "+",
                "+\t// Payload.",
                "+\tp = p[1:]",
                "+\tcopy(p, packet)",
                "+",
                "+\t// Padding.",
                "+\tp = p[len(packet):]",
                "+\tif _, err := io.ReadFull(rand, p); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tif c.mac != nil {",
                "+\t\tc.mac.Reset()",
                "+\t\tbinary.BigEndian.PutUint32(c.seqNumBytes[:], seqNum)",
                "+\t\tc.mac.Write(c.seqNumBytes[:])",
                "+\t\tc.mac.Write(c.packetData)",
                "+\t\t// The MAC is now appended into the capacity reserved for it earlier.",
                "+\t\tc.packetData = c.mac.Sum(c.packetData)",
                "+\t}",
                "+",
                "+\tc.encrypter.CryptBlocks(c.packetData[:encLength], c.packetData[:encLength])",
                "+",
                "+\tif _, err := w.Write(c.packetData); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/client.go b/vendor/golang.org/x/crypto/ssh/client.go",
                "new file mode 100644",
                "index 000000000..a7e3263bc",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/client.go",
                "@@ -0,0 +1,257 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"net\"",
                "+\t\"sync\"",
                "+\t\"time\"",
                "+)",
                "+",
                "+// Client implements a traditional SSH client that supports shells,",
                "+// subprocesses, TCP port/streamlocal forwarding and tunneled dialing.",
                "+type Client struct {",
                "+\tConn",
                "+",
                "+\tforwards        forwardList // forwarded tcpip connections from the remote side",
                "+\tmu              sync.Mutex",
                "+\tchannelHandlers map[string]chan NewChannel",
                "+}",
                "+",
                "+// HandleChannelOpen returns a channel on which NewChannel requests",
                "+// for the given type are sent. If the type already is being handled,",
                "+// nil is returned. The channel is closed when the connection is closed.",
                "+func (c *Client) HandleChannelOpen(channelType string) <-chan NewChannel {",
                "+\tc.mu.Lock()",
                "+\tdefer c.mu.Unlock()",
                "+\tif c.channelHandlers == nil {",
                "+\t\t// The SSH channel has been closed.",
                "+\t\tc := make(chan NewChannel)",
                "+\t\tclose(c)",
                "+\t\treturn c",
                "+\t}",
                "+",
                "+\tch := c.channelHandlers[channelType]",
                "+\tif ch != nil {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tch = make(chan NewChannel, chanSize)",
                "+\tc.channelHandlers[channelType] = ch",
                "+\treturn ch",
                "+}",
                "+",
                "+// NewClient creates a Client on top of the given connection.",
                "+func NewClient(c Conn, chans <-chan NewChannel, reqs <-chan *Request) *Client {",
                "+\tconn := &Client{",
                "+\t\tConn:            c,",
                "+\t\tchannelHandlers: make(map[string]chan NewChannel, 1),",
                "+\t}",
                "+",
                "+\tgo conn.handleGlobalRequests(reqs)",
                "+\tgo conn.handleChannelOpens(chans)",
                "+\tgo func() {",
                "+\t\tconn.Wait()",
                "+\t\tconn.forwards.closeAll()",
                "+\t}()",
                "+\tgo conn.forwards.handleChannels(conn.HandleChannelOpen(\"forwarded-tcpip\"))",
                "+\tgo conn.forwards.handleChannels(conn.HandleChannelOpen(\"forwarded-streamlocal@openssh.com\"))",
                "+\treturn conn",
                "+}",
                "+",
                "+// NewClientConn establishes an authenticated SSH connection using c",
                "+// as the underlying transport.  The Request and NewChannel channels",
                "+// must be serviced or the connection will hang.",
                "+func NewClientConn(c net.Conn, addr string, config *ClientConfig) (Conn, <-chan NewChannel, <-chan *Request, error) {",
                "+\tfullConf := *config",
                "+\tfullConf.SetDefaults()",
                "+\tif fullConf.HostKeyCallback == nil {",
                "+\t\tc.Close()",
                "+\t\treturn nil, nil, nil, errors.New(\"ssh: must specify HostKeyCallback\")",
                "+\t}",
                "+",
                "+\tconn := &connection{",
                "+\t\tsshConn: sshConn{conn: c},",
                "+\t}",
                "+",
                "+\tif err := conn.clientHandshake(addr, &fullConf); err != nil {",
                "+\t\tc.Close()",
                "+\t\treturn nil, nil, nil, fmt.Errorf(\"ssh: handshake failed: %v\", err)",
                "+\t}",
                "+\tconn.mux = newMux(conn.transport)",
                "+\treturn conn, conn.mux.incomingChannels, conn.mux.incomingRequests, nil",
                "+}",
                "+",
                "+// clientHandshake performs the client side key exchange. See RFC 4253 Section",
                "+// 7.",
                "+func (c *connection) clientHandshake(dialAddress string, config *ClientConfig) error {",
                "+\tif config.ClientVersion != \"\" {",
                "+\t\tc.clientVersion = []byte(config.ClientVersion)",
                "+\t} else {",
                "+\t\tc.clientVersion = []byte(packageVersion)",
                "+\t}",
                "+\tvar err error",
                "+\tc.serverVersion, err = exchangeVersions(c.sshConn.conn, c.clientVersion)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tc.transport = newClientTransport(",
                "+\t\tnewTransport(c.sshConn.conn, config.Rand, true /* is client */),",
                "+\t\tc.clientVersion, c.serverVersion, config, dialAddress, c.sshConn.RemoteAddr())",
                "+\tif err := c.transport.waitSession(); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tc.sessionID = c.transport.getSessionID()",
                "+\treturn c.clientAuthenticate(config)",
                "+}",
                "+",
                "+// verifyHostKeySignature verifies the host key obtained in the key",
                "+// exchange.",
                "+func verifyHostKeySignature(hostKey PublicKey, result *kexResult) error {",
                "+\tsig, rest, ok := parseSignatureBody(result.Signature)",
                "+\tif len(rest) > 0 || !ok {",
                "+\t\treturn errors.New(\"ssh: signature parse error\")",
                "+\t}",
                "+",
                "+\treturn hostKey.Verify(result.H, sig)",
                "+}",
                "+",
                "+// NewSession opens a new Session for this client. (A session is a remote",
                "+// execution of a program.)",
                "+func (c *Client) NewSession() (*Session, error) {",
                "+\tch, in, err := c.OpenChannel(\"session\", nil)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn newSession(ch, in)",
                "+}",
                "+",
                "+func (c *Client) handleGlobalRequests(incoming <-chan *Request) {",
                "+\tfor r := range incoming {",
                "+\t\t// This handles keepalive messages and matches",
                "+\t\t// the behaviour of OpenSSH.",
                "+\t\tr.Reply(false, nil)",
                "+\t}",
                "+}",
                "+",
                "+// handleChannelOpens channel open messages from the remote side.",
                "+func (c *Client) handleChannelOpens(in <-chan NewChannel) {",
                "+\tfor ch := range in {",
                "+\t\tc.mu.Lock()",
                "+\t\thandler := c.channelHandlers[ch.ChannelType()]",
                "+\t\tc.mu.Unlock()",
                "+",
                "+\t\tif handler != nil {",
                "+\t\t\thandler <- ch",
                "+\t\t} else {",
                "+\t\t\tch.Reject(UnknownChannelType, fmt.Sprintf(\"unknown channel type: %v\", ch.ChannelType()))",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tc.mu.Lock()",
                "+\tfor _, ch := range c.channelHandlers {",
                "+\t\tclose(ch)",
                "+\t}",
                "+\tc.channelHandlers = nil",
                "+\tc.mu.Unlock()",
                "+}",
                "+",
                "+// Dial starts a client connection to the given SSH server. It is a",
                "+// convenience function that connects to the given network address,",
                "+// initiates the SSH handshake, and then sets up a Client.  For access",
                "+// to incoming channels and requests, use net.Dial with NewClientConn",
                "+// instead.",
                "+func Dial(network, addr string, config *ClientConfig) (*Client, error) {",
                "+\tconn, err := net.DialTimeout(network, addr, config.Timeout)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tc, chans, reqs, err := NewClientConn(conn, addr, config)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn NewClient(c, chans, reqs), nil",
                "+}",
                "+",
                "+// HostKeyCallback is the function type used for verifying server",
                "+// keys.  A HostKeyCallback must return nil if the host key is OK, or",
                "+// an error to reject it. It receives the hostname as passed to Dial",
                "+// or NewClientConn. The remote address is the RemoteAddr of the",
                "+// net.Conn underlying the the SSH connection.",
                "+type HostKeyCallback func(hostname string, remote net.Addr, key PublicKey) error",
                "+",
                "+// A ClientConfig structure is used to configure a Client. It must not be",
                "+// modified after having been passed to an SSH function.",
                "+type ClientConfig struct {",
                "+\t// Config contains configuration that is shared between clients and",
                "+\t// servers.",
                "+\tConfig",
                "+",
                "+\t// User contains the username to authenticate as.",
                "+\tUser string",
                "+",
                "+\t// Auth contains possible authentication methods to use with the",
                "+\t// server. Only the first instance of a particular RFC 4252 method will",
                "+\t// be used during authentication.",
                "+\tAuth []AuthMethod",
                "+",
                "+\t// HostKeyCallback is called during the cryptographic",
                "+\t// handshake to validate the server's host key. The client",
                "+\t// configuration must supply this callback for the connection",
                "+\t// to succeed. The functions InsecureIgnoreHostKey or",
                "+\t// FixedHostKey can be used for simplistic host key checks.",
                "+\tHostKeyCallback HostKeyCallback",
                "+",
                "+\t// ClientVersion contains the version identification string that will",
                "+\t// be used for the connection. If empty, a reasonable default is used.",
                "+\tClientVersion string",
                "+",
                "+\t// HostKeyAlgorithms lists the key types that the client will",
                "+\t// accept from the server as host key, in order of",
                "+\t// preference. If empty, a reasonable default is used. Any",
                "+\t// string returned from PublicKey.Type method may be used, or",
                "+\t// any of the CertAlgoXxxx and KeyAlgoXxxx constants.",
                "+\tHostKeyAlgorithms []string",
                "+",
                "+\t// Timeout is the maximum amount of time for the TCP connection to establish.",
                "+\t//",
                "+\t// A Timeout of zero means no timeout.",
                "+\tTimeout time.Duration",
                "+}",
                "+",
                "+// InsecureIgnoreHostKey returns a function that can be used for",
                "+// ClientConfig.HostKeyCallback to accept any host key. It should",
                "+// not be used for production code.",
                "+func InsecureIgnoreHostKey() HostKeyCallback {",
                "+\treturn func(hostname string, remote net.Addr, key PublicKey) error {",
                "+\t\treturn nil",
                "+\t}",
                "+}",
                "+",
                "+type fixedHostKey struct {",
                "+\tkey PublicKey",
                "+}",
                "+",
                "+func (f *fixedHostKey) check(hostname string, remote net.Addr, key PublicKey) error {",
                "+\tif f.key == nil {",
                "+\t\treturn fmt.Errorf(\"ssh: required host key was nil\")",
                "+\t}",
                "+\tif !bytes.Equal(key.Marshal(), f.key.Marshal()) {",
                "+\t\treturn fmt.Errorf(\"ssh: host key mismatch\")",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+// FixedHostKey returns a function for use in",
                "+// ClientConfig.HostKeyCallback to accept only a specific host key.",
                "+func FixedHostKey(key PublicKey) HostKeyCallback {",
                "+\thk := &fixedHostKey{key}",
                "+\treturn hk.check",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/client_auth.go b/vendor/golang.org/x/crypto/ssh/client_auth.go",
                "new file mode 100644",
                "index 000000000..3acd8d498",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/client_auth.go",
                "@@ -0,0 +1,486 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+)",
                "+",
                "+// clientAuthenticate authenticates with the remote server. See RFC 4252.",
                "+func (c *connection) clientAuthenticate(config *ClientConfig) error {",
                "+\t// initiate user auth session",
                "+\tif err := c.transport.writePacket(Marshal(&serviceRequestMsg{serviceUserAuth})); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tpacket, err := c.transport.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tvar serviceAccept serviceAcceptMsg",
                "+\tif err := Unmarshal(packet, &serviceAccept); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\t// during the authentication phase the client first attempts the \"none\" method",
                "+\t// then any untried methods suggested by the server.",
                "+\ttried := make(map[string]bool)",
                "+\tvar lastMethods []string",
                "+",
                "+\tsessionID := c.transport.getSessionID()",
                "+\tfor auth := AuthMethod(new(noneAuth)); auth != nil; {",
                "+\t\tok, methods, err := auth.auth(sessionID, config.User, c.transport, config.Rand)",
                "+\t\tif err != nil {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t\tif ok {",
                "+\t\t\t// success",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\ttried[auth.method()] = true",
                "+\t\tif methods == nil {",
                "+\t\t\tmethods = lastMethods",
                "+\t\t}",
                "+\t\tlastMethods = methods",
                "+",
                "+\t\tauth = nil",
                "+",
                "+\tfindNext:",
                "+\t\tfor _, a := range config.Auth {",
                "+\t\t\tcandidateMethod := a.method()",
                "+\t\t\tif tried[candidateMethod] {",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\tfor _, meth := range methods {",
                "+\t\t\t\tif meth == candidateMethod {",
                "+\t\t\t\t\tauth = a",
                "+\t\t\t\t\tbreak findNext",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+\treturn fmt.Errorf(\"ssh: unable to authenticate, attempted methods %v, no supported methods remain\", keys(tried))",
                "+}",
                "+",
                "+func keys(m map[string]bool) []string {",
                "+\ts := make([]string, 0, len(m))",
                "+",
                "+\tfor key := range m {",
                "+\t\ts = append(s, key)",
                "+\t}",
                "+\treturn s",
                "+}",
                "+",
                "+// An AuthMethod represents an instance of an RFC 4252 authentication method.",
                "+type AuthMethod interface {",
                "+\t// auth authenticates user over transport t.",
                "+\t// Returns true if authentication is successful.",
                "+\t// If authentication is not successful, a []string of alternative",
                "+\t// method names is returned. If the slice is nil, it will be ignored",
                "+\t// and the previous set of possible methods will be reused.",
                "+\tauth(session []byte, user string, p packetConn, rand io.Reader) (bool, []string, error)",
                "+",
                "+\t// method returns the RFC 4252 method name.",
                "+\tmethod() string",
                "+}",
                "+",
                "+// \"none\" authentication, RFC 4252 section 5.2.",
                "+type noneAuth int",
                "+",
                "+func (n *noneAuth) auth(session []byte, user string, c packetConn, rand io.Reader) (bool, []string, error) {",
                "+\tif err := c.writePacket(Marshal(&userAuthRequestMsg{",
                "+\t\tUser:    user,",
                "+\t\tService: serviceSSH,",
                "+\t\tMethod:  \"none\",",
                "+\t})); err != nil {",
                "+\t\treturn false, nil, err",
                "+\t}",
                "+",
                "+\treturn handleAuthResponse(c)",
                "+}",
                "+",
                "+func (n *noneAuth) method() string {",
                "+\treturn \"none\"",
                "+}",
                "+",
                "+// passwordCallback is an AuthMethod that fetches the password through",
                "+// a function call, e.g. by prompting the user.",
                "+type passwordCallback func() (password string, err error)",
                "+",
                "+func (cb passwordCallback) auth(session []byte, user string, c packetConn, rand io.Reader) (bool, []string, error) {",
                "+\ttype passwordAuthMsg struct {",
                "+\t\tUser     string `sshtype:\"50\"`",
                "+\t\tService  string",
                "+\t\tMethod   string",
                "+\t\tReply    bool",
                "+\t\tPassword string",
                "+\t}",
                "+",
                "+\tpw, err := cb()",
                "+\t// REVIEW NOTE: is there a need to support skipping a password attempt?",
                "+\t// The program may only find out that the user doesn't have a password",
                "+\t// when prompting.",
                "+\tif err != nil {",
                "+\t\treturn false, nil, err",
                "+\t}",
                "+",
                "+\tif err := c.writePacket(Marshal(&passwordAuthMsg{",
                "+\t\tUser:     user,",
                "+\t\tService:  serviceSSH,",
                "+\t\tMethod:   cb.method(),",
                "+\t\tReply:    false,",
                "+\t\tPassword: pw,",
                "+\t})); err != nil {",
                "+\t\treturn false, nil, err",
                "+\t}",
                "+",
                "+\treturn handleAuthResponse(c)",
                "+}",
                "+",
                "+func (cb passwordCallback) method() string {",
                "+\treturn \"password\"",
                "+}",
                "+",
                "+// Password returns an AuthMethod using the given password.",
                "+func Password(secret string) AuthMethod {",
                "+\treturn passwordCallback(func() (string, error) { return secret, nil })",
                "+}",
                "+",
                "+// PasswordCallback returns an AuthMethod that uses a callback for",
                "+// fetching a password.",
                "+func PasswordCallback(prompt func() (secret string, err error)) AuthMethod {",
                "+\treturn passwordCallback(prompt)",
                "+}",
                "+",
                "+type publickeyAuthMsg struct {",
                "+\tUser    string `sshtype:\"50\"`",
                "+\tService string",
                "+\tMethod  string",
                "+\t// HasSig indicates to the receiver packet that the auth request is signed and",
                "+\t// should be used for authentication of the request.",
                "+\tHasSig   bool",
                "+\tAlgoname string",
                "+\tPubKey   []byte",
                "+\t// Sig is tagged with \"rest\" so Marshal will exclude it during",
                "+\t// validateKey",
                "+\tSig []byte `ssh:\"rest\"`",
                "+}",
                "+",
                "+// publicKeyCallback is an AuthMethod that uses a set of key",
                "+// pairs for authentication.",
                "+type publicKeyCallback func() ([]Signer, error)",
                "+",
                "+func (cb publicKeyCallback) method() string {",
                "+\treturn \"publickey\"",
                "+}",
                "+",
                "+func (cb publicKeyCallback) auth(session []byte, user string, c packetConn, rand io.Reader) (bool, []string, error) {",
                "+\t// Authentication is performed by sending an enquiry to test if a key is",
                "+\t// acceptable to the remote. If the key is acceptable, the client will",
                "+\t// attempt to authenticate with the valid key.  If not the client will repeat",
                "+\t// the process with the remaining keys.",
                "+",
                "+\tsigners, err := cb()",
                "+\tif err != nil {",
                "+\t\treturn false, nil, err",
                "+\t}",
                "+\tvar methods []string",
                "+\tfor _, signer := range signers {",
                "+\t\tok, err := validateKey(signer.PublicKey(), user, c)",
                "+\t\tif err != nil {",
                "+\t\t\treturn false, nil, err",
                "+\t\t}",
                "+\t\tif !ok {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\tpub := signer.PublicKey()",
                "+\t\tpubKey := pub.Marshal()",
                "+\t\tsign, err := signer.Sign(rand, buildDataSignedForAuth(session, userAuthRequestMsg{",
                "+\t\t\tUser:    user,",
                "+\t\t\tService: serviceSSH,",
                "+\t\t\tMethod:  cb.method(),",
                "+\t\t}, []byte(pub.Type()), pubKey))",
                "+\t\tif err != nil {",
                "+\t\t\treturn false, nil, err",
                "+\t\t}",
                "+",
                "+\t\t// manually wrap the serialized signature in a string",
                "+\t\ts := Marshal(sign)",
                "+\t\tsig := make([]byte, stringLength(len(s)))",
                "+\t\tmarshalString(sig, s)",
                "+\t\tmsg := publickeyAuthMsg{",
                "+\t\t\tUser:     user,",
                "+\t\t\tService:  serviceSSH,",
                "+\t\t\tMethod:   cb.method(),",
                "+\t\t\tHasSig:   true,",
                "+\t\t\tAlgoname: pub.Type(),",
                "+\t\t\tPubKey:   pubKey,",
                "+\t\t\tSig:      sig,",
                "+\t\t}",
                "+\t\tp := Marshal(&msg)",
                "+\t\tif err := c.writePacket(p); err != nil {",
                "+\t\t\treturn false, nil, err",
                "+\t\t}",
                "+\t\tvar success bool",
                "+\t\tsuccess, methods, err = handleAuthResponse(c)",
                "+\t\tif err != nil {",
                "+\t\t\treturn false, nil, err",
                "+\t\t}",
                "+",
                "+\t\t// If authentication succeeds or the list of available methods does not",
                "+\t\t// contain the \"publickey\" method, do not attempt to authenticate with any",
                "+\t\t// other keys.  According to RFC 4252 Section 7, the latter can occur when",
                "+\t\t// additional authentication methods are required.",
                "+\t\tif success || !containsMethod(methods, cb.method()) {",
                "+\t\t\treturn success, methods, err",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn false, methods, nil",
                "+}",
                "+",
                "+func containsMethod(methods []string, method string) bool {",
                "+\tfor _, m := range methods {",
                "+\t\tif m == method {",
                "+\t\t\treturn true",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn false",
                "+}",
                "+",
                "+// validateKey validates the key provided is acceptable to the server.",
                "+func validateKey(key PublicKey, user string, c packetConn) (bool, error) {",
                "+\tpubKey := key.Marshal()",
                "+\tmsg := publickeyAuthMsg{",
                "+\t\tUser:     user,",
                "+\t\tService:  serviceSSH,",
                "+\t\tMethod:   \"publickey\",",
                "+\t\tHasSig:   false,",
                "+\t\tAlgoname: key.Type(),",
                "+\t\tPubKey:   pubKey,",
                "+\t}",
                "+\tif err := c.writePacket(Marshal(&msg)); err != nil {",
                "+\t\treturn false, err",
                "+\t}",
                "+",
                "+\treturn confirmKeyAck(key, c)",
                "+}",
                "+",
                "+func confirmKeyAck(key PublicKey, c packetConn) (bool, error) {",
                "+\tpubKey := key.Marshal()",
                "+\talgoname := key.Type()",
                "+",
                "+\tfor {",
                "+\t\tpacket, err := c.readPacket()",
                "+\t\tif err != nil {",
                "+\t\t\treturn false, err",
                "+\t\t}",
                "+\t\tswitch packet[0] {",
                "+\t\tcase msgUserAuthBanner:",
                "+\t\t\t// TODO(gpaul): add callback to present the banner to the user",
                "+\t\tcase msgUserAuthPubKeyOk:",
                "+\t\t\tvar msg userAuthPubKeyOkMsg",
                "+\t\t\tif err := Unmarshal(packet, &msg); err != nil {",
                "+\t\t\t\treturn false, err",
                "+\t\t\t}",
                "+\t\t\tif msg.Algo != algoname || !bytes.Equal(msg.PubKey, pubKey) {",
                "+\t\t\t\treturn false, nil",
                "+\t\t\t}",
                "+\t\t\treturn true, nil",
                "+\t\tcase msgUserAuthFailure:",
                "+\t\t\treturn false, nil",
                "+\t\tdefault:",
                "+\t\t\treturn false, unexpectedMessageError(msgUserAuthSuccess, packet[0])",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// PublicKeys returns an AuthMethod that uses the given key",
                "+// pairs.",
                "+func PublicKeys(signers ...Signer) AuthMethod {",
                "+\treturn publicKeyCallback(func() ([]Signer, error) { return signers, nil })",
                "+}",
                "+",
                "+// PublicKeysCallback returns an AuthMethod that runs the given",
                "+// function to obtain a list of key pairs.",
                "+func PublicKeysCallback(getSigners func() (signers []Signer, err error)) AuthMethod {",
                "+\treturn publicKeyCallback(getSigners)",
                "+}",
                "+",
                "+// handleAuthResponse returns whether the preceding authentication request succeeded",
                "+// along with a list of remaining authentication methods to try next and",
                "+// an error if an unexpected response was received.",
                "+func handleAuthResponse(c packetConn) (bool, []string, error) {",
                "+\tfor {",
                "+\t\tpacket, err := c.readPacket()",
                "+\t\tif err != nil {",
                "+\t\t\treturn false, nil, err",
                "+\t\t}",
                "+",
                "+\t\tswitch packet[0] {",
                "+\t\tcase msgUserAuthBanner:",
                "+\t\t\t// TODO: add callback to present the banner to the user",
                "+\t\tcase msgUserAuthFailure:",
                "+\t\t\tvar msg userAuthFailureMsg",
                "+\t\t\tif err := Unmarshal(packet, &msg); err != nil {",
                "+\t\t\t\treturn false, nil, err",
                "+\t\t\t}",
                "+\t\t\treturn false, msg.Methods, nil",
                "+\t\tcase msgUserAuthSuccess:",
                "+\t\t\treturn true, nil, nil",
                "+\t\tdefault:",
                "+\t\t\treturn false, nil, unexpectedMessageError(msgUserAuthSuccess, packet[0])",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// KeyboardInteractiveChallenge should print questions, optionally",
                "+// disabling echoing (e.g. for passwords), and return all the answers.",
                "+// Challenge may be called multiple times in a single session. After",
                "+// successful authentication, the server may send a challenge with no",
                "+// questions, for which the user and instruction messages should be",
                "+// printed.  RFC 4256 section 3.3 details how the UI should behave for",
                "+// both CLI and GUI environments.",
                "+type KeyboardInteractiveChallenge func(user, instruction string, questions []string, echos []bool) (answers []string, err error)",
                "+",
                "+// KeyboardInteractive returns an AuthMethod using a prompt/response",
                "+// sequence controlled by the server.",
                "+func KeyboardInteractive(challenge KeyboardInteractiveChallenge) AuthMethod {",
                "+\treturn challenge",
                "+}",
                "+",
                "+func (cb KeyboardInteractiveChallenge) method() string {",
                "+\treturn \"keyboard-interactive\"",
                "+}",
                "+",
                "+func (cb KeyboardInteractiveChallenge) auth(session []byte, user string, c packetConn, rand io.Reader) (bool, []string, error) {",
                "+\ttype initiateMsg struct {",
                "+\t\tUser       string `sshtype:\"50\"`",
                "+\t\tService    string",
                "+\t\tMethod     string",
                "+\t\tLanguage   string",
                "+\t\tSubmethods string",
                "+\t}",
                "+",
                "+\tif err := c.writePacket(Marshal(&initiateMsg{",
                "+\t\tUser:    user,",
                "+\t\tService: serviceSSH,",
                "+\t\tMethod:  \"keyboard-interactive\",",
                "+\t})); err != nil {",
                "+\t\treturn false, nil, err",
                "+\t}",
                "+",
                "+\tfor {",
                "+\t\tpacket, err := c.readPacket()",
                "+\t\tif err != nil {",
                "+\t\t\treturn false, nil, err",
                "+\t\t}",
                "+",
                "+\t\t// like handleAuthResponse, but with less options.",
                "+\t\tswitch packet[0] {",
                "+\t\tcase msgUserAuthBanner:",
                "+\t\t\t// TODO: Print banners during userauth.",
                "+\t\t\tcontinue",
                "+\t\tcase msgUserAuthInfoRequest:",
                "+\t\t\t// OK",
                "+\t\tcase msgUserAuthFailure:",
                "+\t\t\tvar msg userAuthFailureMsg",
                "+\t\t\tif err := Unmarshal(packet, &msg); err != nil {",
                "+\t\t\t\treturn false, nil, err",
                "+\t\t\t}",
                "+\t\t\treturn false, msg.Methods, nil",
                "+\t\tcase msgUserAuthSuccess:",
                "+\t\t\treturn true, nil, nil",
                "+\t\tdefault:",
                "+\t\t\treturn false, nil, unexpectedMessageError(msgUserAuthInfoRequest, packet[0])",
                "+\t\t}",
                "+",
                "+\t\tvar msg userAuthInfoRequestMsg",
                "+\t\tif err := Unmarshal(packet, &msg); err != nil {",
                "+\t\t\treturn false, nil, err",
                "+\t\t}",
                "+",
                "+\t\t// Manually unpack the prompt/echo pairs.",
                "+\t\trest := msg.Prompts",
                "+\t\tvar prompts []string",
                "+\t\tvar echos []bool",
                "+\t\tfor i := 0; i < int(msg.NumPrompts); i++ {",
                "+\t\t\tprompt, r, ok := parseString(rest)",
                "+\t\t\tif !ok || len(r) == 0 {",
                "+\t\t\t\treturn false, nil, errors.New(\"ssh: prompt format error\")",
                "+\t\t\t}",
                "+\t\t\tprompts = append(prompts, string(prompt))",
                "+\t\t\techos = append(echos, r[0] != 0)",
                "+\t\t\trest = r[1:]",
                "+\t\t}",
                "+",
                "+\t\tif len(rest) != 0 {",
                "+\t\t\treturn false, nil, errors.New(\"ssh: extra data following keyboard-interactive pairs\")",
                "+\t\t}",
                "+",
                "+\t\tanswers, err := cb(msg.User, msg.Instruction, prompts, echos)",
                "+\t\tif err != nil {",
                "+\t\t\treturn false, nil, err",
                "+\t\t}",
                "+",
                "+\t\tif len(answers) != len(prompts) {",
                "+\t\t\treturn false, nil, errors.New(\"ssh: not enough answers from keyboard-interactive callback\")",
                "+\t\t}",
                "+\t\tresponseLength := 1 + 4",
                "+\t\tfor _, a := range answers {",
                "+\t\t\tresponseLength += stringLength(len(a))",
                "+\t\t}",
                "+\t\tserialized := make([]byte, responseLength)",
                "+\t\tp := serialized",
                "+\t\tp[0] = msgUserAuthInfoResponse",
                "+\t\tp = p[1:]",
                "+\t\tp = marshalUint32(p, uint32(len(answers)))",
                "+\t\tfor _, a := range answers {",
                "+\t\t\tp = marshalString(p, []byte(a))",
                "+\t\t}",
                "+",
                "+\t\tif err := c.writePacket(serialized); err != nil {",
                "+\t\t\treturn false, nil, err",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+type retryableAuthMethod struct {",
                "+\tauthMethod AuthMethod",
                "+\tmaxTries   int",
                "+}",
                "+",
                "+func (r *retryableAuthMethod) auth(session []byte, user string, c packetConn, rand io.Reader) (ok bool, methods []string, err error) {",
                "+\tfor i := 0; r.maxTries <= 0 || i < r.maxTries; i++ {",
                "+\t\tok, methods, err = r.authMethod.auth(session, user, c, rand)",
                "+\t\tif ok || err != nil { // either success or error terminate",
                "+\t\t\treturn ok, methods, err",
                "+\t\t}",
                "+\t}",
                "+\treturn ok, methods, err",
                "+}",
                "+",
                "+func (r *retryableAuthMethod) method() string {",
                "+\treturn r.authMethod.method()",
                "+}",
                "+",
                "+// RetryableAuthMethod is a decorator for other auth methods enabling them to",
                "+// be retried up to maxTries before considering that AuthMethod itself failed.",
                "+// If maxTries is <= 0, will retry indefinitely",
                "+//",
                "+// This is useful for interactive clients using challenge/response type",
                "+// authentication (e.g. Keyboard-Interactive, Password, etc) where the user",
                "+// could mistype their response resulting in the server issuing a",
                "+// SSH_MSG_USERAUTH_FAILURE (rfc4252 #8 [password] and rfc4256 #3.4",
                "+// [keyboard-interactive]); Without this decorator, the non-retryable",
                "+// AuthMethod would be removed from future consideration, and never tried again",
                "+// (and so the user would never be able to retry their entry).",
                "+func RetryableAuthMethod(auth AuthMethod, maxTries int) AuthMethod {",
                "+\treturn &retryableAuthMethod{authMethod: auth, maxTries: maxTries}",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/common.go b/vendor/golang.org/x/crypto/ssh/common.go",
                "new file mode 100644",
                "index 000000000..dc39e4d23",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/common.go",
                "@@ -0,0 +1,373 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"crypto\"",
                "+\t\"crypto/rand\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"math\"",
                "+\t\"sync\"",
                "+",
                "+\t_ \"crypto/sha1\"",
                "+\t_ \"crypto/sha256\"",
                "+\t_ \"crypto/sha512\"",
                "+)",
                "+",
                "+// These are string constants in the SSH protocol.",
                "+const (",
                "+\tcompressionNone = \"none\"",
                "+\tserviceUserAuth = \"ssh-userauth\"",
                "+\tserviceSSH      = \"ssh-connection\"",
                "+)",
                "+",
                "+// supportedCiphers specifies the supported ciphers in preference order.",
                "+var supportedCiphers = []string{",
                "+\t\"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",",
                "+\t\"aes128-gcm@openssh.com\",",
                "+\t\"arcfour256\", \"arcfour128\",",
                "+}",
                "+",
                "+// supportedKexAlgos specifies the supported key-exchange algorithms in",
                "+// preference order.",
                "+var supportedKexAlgos = []string{",
                "+\tkexAlgoCurve25519SHA256,",
                "+\t// P384 and P521 are not constant-time yet, but since we don't",
                "+\t// reuse ephemeral keys, using them for ECDH should be OK.",
                "+\tkexAlgoECDH256, kexAlgoECDH384, kexAlgoECDH521,",
                "+\tkexAlgoDH14SHA1, kexAlgoDH1SHA1,",
                "+}",
                "+",
                "+// supportedHostKeyAlgos specifies the supported host-key algorithms (i.e. methods",
                "+// of authenticating servers) in preference order.",
                "+var supportedHostKeyAlgos = []string{",
                "+\tCertAlgoRSAv01, CertAlgoDSAv01, CertAlgoECDSA256v01,",
                "+\tCertAlgoECDSA384v01, CertAlgoECDSA521v01, CertAlgoED25519v01,",
                "+",
                "+\tKeyAlgoECDSA256, KeyAlgoECDSA384, KeyAlgoECDSA521,",
                "+\tKeyAlgoRSA, KeyAlgoDSA,",
                "+",
                "+\tKeyAlgoED25519,",
                "+}",
                "+",
                "+// supportedMACs specifies a default set of MAC algorithms in preference order.",
                "+// This is based on RFC 4253, section 6.4, but with hmac-md5 variants removed",
                "+// because they have reached the end of their useful life.",
                "+var supportedMACs = []string{",
                "+\t\"hmac-sha2-256-etm@openssh.com\", \"hmac-sha2-256\", \"hmac-sha1\", \"hmac-sha1-96\",",
                "+}",
                "+",
                "+var supportedCompressions = []string{compressionNone}",
                "+",
                "+// hashFuncs keeps the mapping of supported algorithms to their respective",
                "+// hashes needed for signature verification.",
                "+var hashFuncs = map[string]crypto.Hash{",
                "+\tKeyAlgoRSA:          crypto.SHA1,",
                "+\tKeyAlgoDSA:          crypto.SHA1,",
                "+\tKeyAlgoECDSA256:     crypto.SHA256,",
                "+\tKeyAlgoECDSA384:     crypto.SHA384,",
                "+\tKeyAlgoECDSA521:     crypto.SHA512,",
                "+\tCertAlgoRSAv01:      crypto.SHA1,",
                "+\tCertAlgoDSAv01:      crypto.SHA1,",
                "+\tCertAlgoECDSA256v01: crypto.SHA256,",
                "+\tCertAlgoECDSA384v01: crypto.SHA384,",
                "+\tCertAlgoECDSA521v01: crypto.SHA512,",
                "+}",
                "+",
                "+// unexpectedMessageError results when the SSH message that we received didn't",
                "+// match what we wanted.",
                "+func unexpectedMessageError(expected, got uint8) error {",
                "+\treturn fmt.Errorf(\"ssh: unexpected message type %d (expected %d)\", got, expected)",
                "+}",
                "+",
                "+// parseError results from a malformed SSH message.",
                "+func parseError(tag uint8) error {",
                "+\treturn fmt.Errorf(\"ssh: parse error in message type %d\", tag)",
                "+}",
                "+",
                "+func findCommon(what string, client []string, server []string) (common string, err error) {",
                "+\tfor _, c := range client {",
                "+\t\tfor _, s := range server {",
                "+\t\t\tif c == s {",
                "+\t\t\t\treturn c, nil",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+\treturn \"\", fmt.Errorf(\"ssh: no common algorithm for %s; client offered: %v, server offered: %v\", what, client, server)",
                "+}",
                "+",
                "+type directionAlgorithms struct {",
                "+\tCipher      string",
                "+\tMAC         string",
                "+\tCompression string",
                "+}",
                "+",
                "+// rekeyBytes returns a rekeying intervals in bytes.",
                "+func (a *directionAlgorithms) rekeyBytes() int64 {",
                "+\t// According to RFC4344 block ciphers should rekey after",
                "+\t// 2^(BLOCKSIZE/4) blocks. For all AES flavors BLOCKSIZE is",
                "+\t// 128.",
                "+\tswitch a.Cipher {",
                "+\tcase \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", gcmCipherID, aes128cbcID:",
                "+\t\treturn 16 * (1 << 32)",
                "+",
                "+\t}",
                "+",
                "+\t// For others, stick with RFC4253 recommendation to rekey after 1 Gb of data.",
                "+\treturn 1 << 30",
                "+}",
                "+",
                "+type algorithms struct {",
                "+\tkex     string",
                "+\thostKey string",
                "+\tw       directionAlgorithms",
                "+\tr       directionAlgorithms",
                "+}",
                "+",
                "+func findAgreedAlgorithms(clientKexInit, serverKexInit *kexInitMsg) (algs *algorithms, err error) {",
                "+\tresult := &algorithms{}",
                "+",
                "+\tresult.kex, err = findCommon(\"key exchange\", clientKexInit.KexAlgos, serverKexInit.KexAlgos)",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tresult.hostKey, err = findCommon(\"host key\", clientKexInit.ServerHostKeyAlgos, serverKexInit.ServerHostKeyAlgos)",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tresult.w.Cipher, err = findCommon(\"client to server cipher\", clientKexInit.CiphersClientServer, serverKexInit.CiphersClientServer)",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tresult.r.Cipher, err = findCommon(\"server to client cipher\", clientKexInit.CiphersServerClient, serverKexInit.CiphersServerClient)",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tresult.w.MAC, err = findCommon(\"client to server MAC\", clientKexInit.MACsClientServer, serverKexInit.MACsClientServer)",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tresult.r.MAC, err = findCommon(\"server to client MAC\", clientKexInit.MACsServerClient, serverKexInit.MACsServerClient)",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tresult.w.Compression, err = findCommon(\"client to server compression\", clientKexInit.CompressionClientServer, serverKexInit.CompressionClientServer)",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tresult.r.Compression, err = findCommon(\"server to client compression\", clientKexInit.CompressionServerClient, serverKexInit.CompressionServerClient)",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\treturn result, nil",
                "+}",
                "+",
                "+// If rekeythreshold is too small, we can't make any progress sending",
                "+// stuff.",
                "+const minRekeyThreshold uint64 = 256",
                "+",
                "+// Config contains configuration data common to both ServerConfig and",
                "+// ClientConfig.",
                "+type Config struct {",
                "+\t// Rand provides the source of entropy for cryptographic",
                "+\t// primitives. If Rand is nil, the cryptographic random reader",
                "+\t// in package crypto/rand will be used.",
                "+\tRand io.Reader",
                "+",
                "+\t// The maximum number of bytes sent or received after which a",
                "+\t// new key is negotiated. It must be at least 256. If",
                "+\t// unspecified, a size suitable for the chosen cipher is used.",
                "+\tRekeyThreshold uint64",
                "+",
                "+\t// The allowed key exchanges algorithms. If unspecified then a",
                "+\t// default set of algorithms is used.",
                "+\tKeyExchanges []string",
                "+",
                "+\t// The allowed cipher algorithms. If unspecified then a sensible",
                "+\t// default is used.",
                "+\tCiphers []string",
                "+",
                "+\t// The allowed MAC algorithms. If unspecified then a sensible default",
                "+\t// is used.",
                "+\tMACs []string",
                "+}",
                "+",
                "+// SetDefaults sets sensible values for unset fields in config. This is",
                "+// exported for testing: Configs passed to SSH functions are copied and have",
                "+// default values set automatically.",
                "+func (c *Config) SetDefaults() {",
                "+\tif c.Rand == nil {",
                "+\t\tc.Rand = rand.Reader",
                "+\t}",
                "+\tif c.Ciphers == nil {",
                "+\t\tc.Ciphers = supportedCiphers",
                "+\t}",
                "+\tvar ciphers []string",
                "+\tfor _, c := range c.Ciphers {",
                "+\t\tif cipherModes[c] != nil {",
                "+\t\t\t// reject the cipher if we have no cipherModes definition",
                "+\t\t\tciphers = append(ciphers, c)",
                "+\t\t}",
                "+\t}",
                "+\tc.Ciphers = ciphers",
                "+",
                "+\tif c.KeyExchanges == nil {",
                "+\t\tc.KeyExchanges = supportedKexAlgos",
                "+\t}",
                "+",
                "+\tif c.MACs == nil {",
                "+\t\tc.MACs = supportedMACs",
                "+\t}",
                "+",
                "+\tif c.RekeyThreshold == 0 {",
                "+\t\t// cipher specific default",
                "+\t} else if c.RekeyThreshold < minRekeyThreshold {",
                "+\t\tc.RekeyThreshold = minRekeyThreshold",
                "+\t} else if c.RekeyThreshold >= math.MaxInt64 {",
                "+\t\t// Avoid weirdness if somebody uses -1 as a threshold.",
                "+\t\tc.RekeyThreshold = math.MaxInt64",
                "+\t}",
                "+}",
                "+",
                "+// buildDataSignedForAuth returns the data that is signed in order to prove",
                "+// possession of a private key. See RFC 4252, section 7.",
                "+func buildDataSignedForAuth(sessionId []byte, req userAuthRequestMsg, algo, pubKey []byte) []byte {",
                "+\tdata := struct {",
                "+\t\tSession []byte",
                "+\t\tType    byte",
                "+\t\tUser    string",
                "+\t\tService string",
                "+\t\tMethod  string",
                "+\t\tSign    bool",
                "+\t\tAlgo    []byte",
                "+\t\tPubKey  []byte",
                "+\t}{",
                "+\t\tsessionId,",
                "+\t\tmsgUserAuthRequest,",
                "+\t\treq.User,",
                "+\t\treq.Service,",
                "+\t\treq.Method,",
                "+\t\ttrue,",
                "+\t\talgo,",
                "+\t\tpubKey,",
                "+\t}",
                "+\treturn Marshal(data)",
                "+}",
                "+",
                "+func appendU16(buf []byte, n uint16) []byte {",
                "+\treturn append(buf, byte(n>>8), byte(n))",
                "+}",
                "+",
                "+func appendU32(buf []byte, n uint32) []byte {",
                "+\treturn append(buf, byte(n>>24), byte(n>>16), byte(n>>8), byte(n))",
                "+}",
                "+",
                "+func appendU64(buf []byte, n uint64) []byte {",
                "+\treturn append(buf,",
                "+\t\tbyte(n>>56), byte(n>>48), byte(n>>40), byte(n>>32),",
                "+\t\tbyte(n>>24), byte(n>>16), byte(n>>8), byte(n))",
                "+}",
                "+",
                "+func appendInt(buf []byte, n int) []byte {",
                "+\treturn appendU32(buf, uint32(n))",
                "+}",
                "+",
                "+func appendString(buf []byte, s string) []byte {",
                "+\tbuf = appendU32(buf, uint32(len(s)))",
                "+\tbuf = append(buf, s...)",
                "+\treturn buf",
                "+}",
                "+",
                "+func appendBool(buf []byte, b bool) []byte {",
                "+\tif b {",
                "+\t\treturn append(buf, 1)",
                "+\t}",
                "+\treturn append(buf, 0)",
                "+}",
                "+",
                "+// newCond is a helper to hide the fact that there is no usable zero",
                "+// value for sync.Cond.",
                "+func newCond() *sync.Cond { return sync.NewCond(new(sync.Mutex)) }",
                "+",
                "+// window represents the buffer available to clients",
                "+// wishing to write to a channel.",
                "+type window struct {",
                "+\t*sync.Cond",
                "+\twin          uint32 // RFC 4254 5.2 says the window size can grow to 2^32-1",
                "+\twriteWaiters int",
                "+\tclosed       bool",
                "+}",
                "+",
                "+// add adds win to the amount of window available",
                "+// for consumers.",
                "+func (w *window) add(win uint32) bool {",
                "+\t// a zero sized window adjust is a noop.",
                "+\tif win == 0 {",
                "+\t\treturn true",
                "+\t}",
                "+\tw.L.Lock()",
                "+\tif w.win+win < win {",
                "+\t\tw.L.Unlock()",
                "+\t\treturn false",
                "+\t}",
                "+\tw.win += win",
                "+\t// It is unusual that multiple goroutines would be attempting to reserve",
                "+\t// window space, but not guaranteed. Use broadcast to notify all waiters",
                "+\t// that additional window is available.",
                "+\tw.Broadcast()",
                "+\tw.L.Unlock()",
                "+\treturn true",
                "+}",
                "+",
                "+// close sets the window to closed, so all reservations fail",
                "+// immediately.",
                "+func (w *window) close() {",
                "+\tw.L.Lock()",
                "+\tw.closed = true",
                "+\tw.Broadcast()",
                "+\tw.L.Unlock()",
                "+}",
                "+",
                "+// reserve reserves win from the available window capacity.",
                "+// If no capacity remains, reserve will block. reserve may",
                "+// return less than requested.",
                "+func (w *window) reserve(win uint32) (uint32, error) {",
                "+\tvar err error",
                "+\tw.L.Lock()",
                "+\tw.writeWaiters++",
                "+\tw.Broadcast()",
                "+\tfor w.win == 0 && !w.closed {",
                "+\t\tw.Wait()",
                "+\t}",
                "+\tw.writeWaiters--",
                "+\tif w.win < win {",
                "+\t\twin = w.win",
                "+\t}",
                "+\tw.win -= win",
                "+\tif w.closed {",
                "+\t\terr = io.EOF",
                "+\t}",
                "+\tw.L.Unlock()",
                "+\treturn win, err",
                "+}",
                "+",
                "+// waitWriterBlocked waits until some goroutine is blocked for further",
                "+// writes. It is used in tests only.",
                "+func (w *window) waitWriterBlocked() {",
                "+\tw.Cond.L.Lock()",
                "+\tfor w.writeWaiters == 0 {",
                "+\t\tw.Cond.Wait()",
                "+\t}",
                "+\tw.Cond.L.Unlock()",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/connection.go b/vendor/golang.org/x/crypto/ssh/connection.go",
                "new file mode 100644",
                "index 000000000..fd6b0681b",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/connection.go",
                "@@ -0,0 +1,143 @@",
                "+// Copyright 2013 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"net\"",
                "+)",
                "+",
                "+// OpenChannelError is returned if the other side rejects an",
                "+// OpenChannel request.",
                "+type OpenChannelError struct {",
                "+\tReason  RejectionReason",
                "+\tMessage string",
                "+}",
                "+",
                "+func (e *OpenChannelError) Error() string {",
                "+\treturn fmt.Sprintf(\"ssh: rejected: %s (%s)\", e.Reason, e.Message)",
                "+}",
                "+",
                "+// ConnMetadata holds metadata for the connection.",
                "+type ConnMetadata interface {",
                "+\t// User returns the user ID for this connection.",
                "+\tUser() string",
                "+",
                "+\t// SessionID returns the session hash, also denoted by H.",
                "+\tSessionID() []byte",
                "+",
                "+\t// ClientVersion returns the client's version string as hashed",
                "+\t// into the session ID.",
                "+\tClientVersion() []byte",
                "+",
                "+\t// ServerVersion returns the server's version string as hashed",
                "+\t// into the session ID.",
                "+\tServerVersion() []byte",
                "+",
                "+\t// RemoteAddr returns the remote address for this connection.",
                "+\tRemoteAddr() net.Addr",
                "+",
                "+\t// LocalAddr returns the local address for this connection.",
                "+\tLocalAddr() net.Addr",
                "+}",
                "+",
                "+// Conn represents an SSH connection for both server and client roles.",
                "+// Conn is the basis for implementing an application layer, such",
                "+// as ClientConn, which implements the traditional shell access for",
                "+// clients.",
                "+type Conn interface {",
                "+\tConnMetadata",
                "+",
                "+\t// SendRequest sends a global request, and returns the",
                "+\t// reply. If wantReply is true, it returns the response status",
                "+\t// and payload. See also RFC4254, section 4.",
                "+\tSendRequest(name string, wantReply bool, payload []byte) (bool, []byte, error)",
                "+",
                "+\t// OpenChannel tries to open an channel. If the request is",
                "+\t// rejected, it returns *OpenChannelError. On success it returns",
                "+\t// the SSH Channel and a Go channel for incoming, out-of-band",
                "+\t// requests. The Go channel must be serviced, or the",
                "+\t// connection will hang.",
                "+\tOpenChannel(name string, data []byte) (Channel, <-chan *Request, error)",
                "+",
                "+\t// Close closes the underlying network connection",
                "+\tClose() error",
                "+",
                "+\t// Wait blocks until the connection has shut down, and returns the",
                "+\t// error causing the shutdown.",
                "+\tWait() error",
                "+",
                "+\t// TODO(hanwen): consider exposing:",
                "+\t//   RequestKeyChange",
                "+\t//   Disconnect",
                "+}",
                "+",
                "+// DiscardRequests consumes and rejects all requests from the",
                "+// passed-in channel.",
                "+func DiscardRequests(in <-chan *Request) {",
                "+\tfor req := range in {",
                "+\t\tif req.WantReply {",
                "+\t\t\treq.Reply(false, nil)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// A connection represents an incoming connection.",
                "+type connection struct {",
                "+\ttransport *handshakeTransport",
                "+\tsshConn",
                "+",
                "+\t// The connection protocol.",
                "+\t*mux",
                "+}",
                "+",
                "+func (c *connection) Close() error {",
                "+\treturn c.sshConn.conn.Close()",
                "+}",
                "+",
                "+// sshconn provides net.Conn metadata, but disallows direct reads and",
                "+// writes.",
                "+type sshConn struct {",
                "+\tconn net.Conn",
                "+",
                "+\tuser          string",
                "+\tsessionID     []byte",
                "+\tclientVersion []byte",
                "+\tserverVersion []byte",
                "+}",
                "+",
                "+func dup(src []byte) []byte {",
                "+\tdst := make([]byte, len(src))",
                "+\tcopy(dst, src)",
                "+\treturn dst",
                "+}",
                "+",
                "+func (c *sshConn) User() string {",
                "+\treturn c.user",
                "+}",
                "+",
                "+func (c *sshConn) RemoteAddr() net.Addr {",
                "+\treturn c.conn.RemoteAddr()",
                "+}",
                "+",
                "+func (c *sshConn) Close() error {",
                "+\treturn c.conn.Close()",
                "+}",
                "+",
                "+func (c *sshConn) LocalAddr() net.Addr {",
                "+\treturn c.conn.LocalAddr()",
                "+}",
                "+",
                "+func (c *sshConn) SessionID() []byte {",
                "+\treturn dup(c.sessionID)",
                "+}",
                "+",
                "+func (c *sshConn) ClientVersion() []byte {",
                "+\treturn dup(c.clientVersion)",
                "+}",
                "+",
                "+func (c *sshConn) ServerVersion() []byte {",
                "+\treturn dup(c.serverVersion)",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/doc.go b/vendor/golang.org/x/crypto/ssh/doc.go",
                "new file mode 100644",
                "index 000000000..67b7322c0",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/doc.go",
                "@@ -0,0 +1,21 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+/*",
                "+Package ssh implements an SSH client and server.",
                "+",
                "+SSH is a transport security protocol, an authentication protocol and a",
                "+family of application protocols. The most typical application level",
                "+protocol is a remote shell and this is specifically implemented.  However,",
                "+the multiplexed nature of SSH is exposed to users that wish to support",
                "+others.",
                "+",
                "+References:",
                "+  [PROTOCOL.certkeys]: http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/PROTOCOL.certkeys?rev=HEAD",
                "+  [SSH-PARAMETERS]:    http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xml#ssh-parameters-1",
                "+",
                "+This package does not fall under the stability promise of the Go language itself,",
                "+so its API may be changed when pressing needs arise.",
                "+*/",
                "+package ssh // import \"golang.org/x/crypto/ssh\"",
                "diff --git a/vendor/golang.org/x/crypto/ssh/handshake.go b/vendor/golang.org/x/crypto/ssh/handshake.go",
                "new file mode 100644",
                "index 000000000..932ce8393",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/handshake.go",
                "@@ -0,0 +1,640 @@",
                "+// Copyright 2013 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"crypto/rand\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"log\"",
                "+\t\"net\"",
                "+\t\"sync\"",
                "+)",
                "+",
                "+// debugHandshake, if set, prints messages sent and received.  Key",
                "+// exchange messages are printed as if DH were used, so the debug",
                "+// messages are wrong when using ECDH.",
                "+const debugHandshake = false",
                "+",
                "+// chanSize sets the amount of buffering SSH connections. This is",
                "+// primarily for testing: setting chanSize=0 uncovers deadlocks more",
                "+// quickly.",
                "+const chanSize = 16",
                "+",
                "+// keyingTransport is a packet based transport that supports key",
                "+// changes. It need not be thread-safe. It should pass through",
                "+// msgNewKeys in both directions.",
                "+type keyingTransport interface {",
                "+\tpacketConn",
                "+",
                "+\t// prepareKeyChange sets up a key change. The key change for a",
                "+\t// direction will be effected if a msgNewKeys message is sent",
                "+\t// or received.",
                "+\tprepareKeyChange(*algorithms, *kexResult) error",
                "+}",
                "+",
                "+// handshakeTransport implements rekeying on top of a keyingTransport",
                "+// and offers a thread-safe writePacket() interface.",
                "+type handshakeTransport struct {",
                "+\tconn   keyingTransport",
                "+\tconfig *Config",
                "+",
                "+\tserverVersion []byte",
                "+\tclientVersion []byte",
                "+",
                "+\t// hostKeys is non-empty if we are the server. In that case,",
                "+\t// it contains all host keys that can be used to sign the",
                "+\t// connection.",
                "+\thostKeys []Signer",
                "+",
                "+\t// hostKeyAlgorithms is non-empty if we are the client. In that case,",
                "+\t// we accept these key types from the server as host key.",
                "+\thostKeyAlgorithms []string",
                "+",
                "+\t// On read error, incoming is closed, and readError is set.",
                "+\tincoming  chan []byte",
                "+\treadError error",
                "+",
                "+\tmu             sync.Mutex",
                "+\twriteError     error",
                "+\tsentInitPacket []byte",
                "+\tsentInitMsg    *kexInitMsg",
                "+\tpendingPackets [][]byte // Used when a key exchange is in progress.",
                "+",
                "+\t// If the read loop wants to schedule a kex, it pings this",
                "+\t// channel, and the write loop will send out a kex",
                "+\t// message.",
                "+\trequestKex chan struct{}",
                "+",
                "+\t// If the other side requests or confirms a kex, its kexInit",
                "+\t// packet is sent here for the write loop to find it.",
                "+\tstartKex chan *pendingKex",
                "+",
                "+\t// data for host key checking",
                "+\thostKeyCallback HostKeyCallback",
                "+\tdialAddress     string",
                "+\tremoteAddr      net.Addr",
                "+",
                "+\t// Algorithms agreed in the last key exchange.",
                "+\talgorithms *algorithms",
                "+",
                "+\treadPacketsLeft uint32",
                "+\treadBytesLeft   int64",
                "+",
                "+\twritePacketsLeft uint32",
                "+\twriteBytesLeft   int64",
                "+",
                "+\t// The session ID or nil if first kex did not complete yet.",
                "+\tsessionID []byte",
                "+}",
                "+",
                "+type pendingKex struct {",
                "+\totherInit []byte",
                "+\tdone      chan error",
                "+}",
                "+",
                "+func newHandshakeTransport(conn keyingTransport, config *Config, clientVersion, serverVersion []byte) *handshakeTransport {",
                "+\tt := &handshakeTransport{",
                "+\t\tconn:          conn,",
                "+\t\tserverVersion: serverVersion,",
                "+\t\tclientVersion: clientVersion,",
                "+\t\tincoming:      make(chan []byte, chanSize),",
                "+\t\trequestKex:    make(chan struct{}, 1),",
                "+\t\tstartKex:      make(chan *pendingKex, 1),",
                "+",
                "+\t\tconfig: config,",
                "+\t}",
                "+\tt.resetReadThresholds()",
                "+\tt.resetWriteThresholds()",
                "+",
                "+\t// We always start with a mandatory key exchange.",
                "+\tt.requestKex <- struct{}{}",
                "+\treturn t",
                "+}",
                "+",
                "+func newClientTransport(conn keyingTransport, clientVersion, serverVersion []byte, config *ClientConfig, dialAddr string, addr net.Addr) *handshakeTransport {",
                "+\tt := newHandshakeTransport(conn, &config.Config, clientVersion, serverVersion)",
                "+\tt.dialAddress = dialAddr",
                "+\tt.remoteAddr = addr",
                "+\tt.hostKeyCallback = config.HostKeyCallback",
                "+\tif config.HostKeyAlgorithms != nil {",
                "+\t\tt.hostKeyAlgorithms = config.HostKeyAlgorithms",
                "+\t} else {",
                "+\t\tt.hostKeyAlgorithms = supportedHostKeyAlgos",
                "+\t}",
                "+\tgo t.readLoop()",
                "+\tgo t.kexLoop()",
                "+\treturn t",
                "+}",
                "+",
                "+func newServerTransport(conn keyingTransport, clientVersion, serverVersion []byte, config *ServerConfig) *handshakeTransport {",
                "+\tt := newHandshakeTransport(conn, &config.Config, clientVersion, serverVersion)",
                "+\tt.hostKeys = config.hostKeys",
                "+\tgo t.readLoop()",
                "+\tgo t.kexLoop()",
                "+\treturn t",
                "+}",
                "+",
                "+func (t *handshakeTransport) getSessionID() []byte {",
                "+\treturn t.sessionID",
                "+}",
                "+",
                "+// waitSession waits for the session to be established. This should be",
                "+// the first thing to call after instantiating handshakeTransport.",
                "+func (t *handshakeTransport) waitSession() error {",
                "+\tp, err := t.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tif p[0] != msgNewKeys {",
                "+\t\treturn fmt.Errorf(\"ssh: first packet should be msgNewKeys\")",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (t *handshakeTransport) id() string {",
                "+\tif len(t.hostKeys) > 0 {",
                "+\t\treturn \"server\"",
                "+\t}",
                "+\treturn \"client\"",
                "+}",
                "+",
                "+func (t *handshakeTransport) printPacket(p []byte, write bool) {",
                "+\taction := \"got\"",
                "+\tif write {",
                "+\t\taction = \"sent\"",
                "+\t}",
                "+",
                "+\tif p[0] == msgChannelData || p[0] == msgChannelExtendedData {",
                "+\t\tlog.Printf(\"%s %s data (packet %d bytes)\", t.id(), action, len(p))",
                "+\t} else {",
                "+\t\tmsg, err := decode(p)",
                "+\t\tlog.Printf(\"%s %s %T %v (%v)\", t.id(), action, msg, msg, err)",
                "+\t}",
                "+}",
                "+",
                "+func (t *handshakeTransport) readPacket() ([]byte, error) {",
                "+\tp, ok := <-t.incoming",
                "+\tif !ok {",
                "+\t\treturn nil, t.readError",
                "+\t}",
                "+\treturn p, nil",
                "+}",
                "+",
                "+func (t *handshakeTransport) readLoop() {",
                "+\tfirst := true",
                "+\tfor {",
                "+\t\tp, err := t.readOnePacket(first)",
                "+\t\tfirst = false",
                "+\t\tif err != nil {",
                "+\t\t\tt.readError = err",
                "+\t\t\tclose(t.incoming)",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\tif p[0] == msgIgnore || p[0] == msgDebug {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tt.incoming <- p",
                "+\t}",
                "+",
                "+\t// Stop writers too.",
                "+\tt.recordWriteError(t.readError)",
                "+",
                "+\t// Unblock the writer should it wait for this.",
                "+\tclose(t.startKex)",
                "+",
                "+\t// Don't close t.requestKex; it's also written to from writePacket.",
                "+}",
                "+",
                "+func (t *handshakeTransport) pushPacket(p []byte) error {",
                "+\tif debugHandshake {",
                "+\t\tt.printPacket(p, true)",
                "+\t}",
                "+\treturn t.conn.writePacket(p)",
                "+}",
                "+",
                "+func (t *handshakeTransport) getWriteError() error {",
                "+\tt.mu.Lock()",
                "+\tdefer t.mu.Unlock()",
                "+\treturn t.writeError",
                "+}",
                "+",
                "+func (t *handshakeTransport) recordWriteError(err error) {",
                "+\tt.mu.Lock()",
                "+\tdefer t.mu.Unlock()",
                "+\tif t.writeError == nil && err != nil {",
                "+\t\tt.writeError = err",
                "+\t}",
                "+}",
                "+",
                "+func (t *handshakeTransport) requestKeyExchange() {",
                "+\tselect {",
                "+\tcase t.requestKex <- struct{}{}:",
                "+\tdefault:",
                "+\t\t// something already requested a kex, so do nothing.",
                "+\t}",
                "+}",
                "+",
                "+func (t *handshakeTransport) resetWriteThresholds() {",
                "+\tt.writePacketsLeft = packetRekeyThreshold",
                "+\tif t.config.RekeyThreshold > 0 {",
                "+\t\tt.writeBytesLeft = int64(t.config.RekeyThreshold)",
                "+\t} else if t.algorithms != nil {",
                "+\t\tt.writeBytesLeft = t.algorithms.w.rekeyBytes()",
                "+\t} else {",
                "+\t\tt.writeBytesLeft = 1 << 30",
                "+\t}",
                "+}",
                "+",
                "+func (t *handshakeTransport) kexLoop() {",
                "+",
                "+write:",
                "+\tfor t.getWriteError() == nil {",
                "+\t\tvar request *pendingKex",
                "+\t\tvar sent bool",
                "+",
                "+\t\tfor request == nil || !sent {",
                "+\t\t\tvar ok bool",
                "+\t\t\tselect {",
                "+\t\t\tcase request, ok = <-t.startKex:",
                "+\t\t\t\tif !ok {",
                "+\t\t\t\t\tbreak write",
                "+\t\t\t\t}",
                "+\t\t\tcase <-t.requestKex:",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+",
                "+\t\t\tif !sent {",
                "+\t\t\t\tif err := t.sendKexInit(); err != nil {",
                "+\t\t\t\t\tt.recordWriteError(err)",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t\tsent = true",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tif err := t.getWriteError(); err != nil {",
                "+\t\t\tif request != nil {",
                "+\t\t\t\trequest.done <- err",
                "+\t\t\t}",
                "+\t\t\tbreak",
                "+\t\t}",
                "+",
                "+\t\t// We're not servicing t.requestKex, but that is OK:",
                "+\t\t// we never block on sending to t.requestKex.",
                "+",
                "+\t\t// We're not servicing t.startKex, but the remote end",
                "+\t\t// has just sent us a kexInitMsg, so it can't send",
                "+\t\t// another key change request, until we close the done",
                "+\t\t// channel on the pendingKex request.",
                "+",
                "+\t\terr := t.enterKeyExchange(request.otherInit)",
                "+",
                "+\t\tt.mu.Lock()",
                "+\t\tt.writeError = err",
                "+\t\tt.sentInitPacket = nil",
                "+\t\tt.sentInitMsg = nil",
                "+",
                "+\t\tt.resetWriteThresholds()",
                "+",
                "+\t\t// we have completed the key exchange. Since the",
                "+\t\t// reader is still blocked, it is safe to clear out",
                "+\t\t// the requestKex channel. This avoids the situation",
                "+\t\t// where: 1) we consumed our own request for the",
                "+\t\t// initial kex, and 2) the kex from the remote side",
                "+\t\t// caused another send on the requestKex channel,",
                "+\tclear:",
                "+\t\tfor {",
                "+\t\t\tselect {",
                "+\t\t\tcase <-t.requestKex:",
                "+\t\t\t\t//",
                "+\t\t\tdefault:",
                "+\t\t\t\tbreak clear",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\trequest.done <- t.writeError",
                "+",
                "+\t\t// kex finished. Push packets that we received while",
                "+\t\t// the kex was in progress. Don't look at t.startKex",
                "+\t\t// and don't increment writtenSinceKex: if we trigger",
                "+\t\t// another kex while we are still busy with the last",
                "+\t\t// one, things will become very confusing.",
                "+\t\tfor _, p := range t.pendingPackets {",
                "+\t\t\tt.writeError = t.pushPacket(p)",
                "+\t\t\tif t.writeError != nil {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tt.pendingPackets = t.pendingPackets[:0]",
                "+\t\tt.mu.Unlock()",
                "+\t}",
                "+",
                "+\t// drain startKex channel. We don't service t.requestKex",
                "+\t// because nobody does blocking sends there.",
                "+\tgo func() {",
                "+\t\tfor init := range t.startKex {",
                "+\t\t\tinit.done <- t.writeError",
                "+\t\t}",
                "+\t}()",
                "+",
                "+\t// Unblock reader.",
                "+\tt.conn.Close()",
                "+}",
                "+",
                "+// The protocol uses uint32 for packet counters, so we can't let them",
                "+// reach 1<<32.  We will actually read and write more packets than",
                "+// this, though: the other side may send more packets, and after we",
                "+// hit this limit on writing we will send a few more packets for the",
                "+// key exchange itself.",
                "+const packetRekeyThreshold = (1 << 31)",
                "+",
                "+func (t *handshakeTransport) resetReadThresholds() {",
                "+\tt.readPacketsLeft = packetRekeyThreshold",
                "+\tif t.config.RekeyThreshold > 0 {",
                "+\t\tt.readBytesLeft = int64(t.config.RekeyThreshold)",
                "+\t} else if t.algorithms != nil {",
                "+\t\tt.readBytesLeft = t.algorithms.r.rekeyBytes()",
                "+\t} else {",
                "+\t\tt.readBytesLeft = 1 << 30",
                "+\t}",
                "+}",
                "+",
                "+func (t *handshakeTransport) readOnePacket(first bool) ([]byte, error) {",
                "+\tp, err := t.conn.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tif t.readPacketsLeft > 0 {",
                "+\t\tt.readPacketsLeft--",
                "+\t} else {",
                "+\t\tt.requestKeyExchange()",
                "+\t}",
                "+",
                "+\tif t.readBytesLeft > 0 {",
                "+\t\tt.readBytesLeft -= int64(len(p))",
                "+\t} else {",
                "+\t\tt.requestKeyExchange()",
                "+\t}",
                "+",
                "+\tif debugHandshake {",
                "+\t\tt.printPacket(p, false)",
                "+\t}",
                "+",
                "+\tif first && p[0] != msgKexInit {",
                "+\t\treturn nil, fmt.Errorf(\"ssh: first packet should be msgKexInit\")",
                "+\t}",
                "+",
                "+\tif p[0] != msgKexInit {",
                "+\t\treturn p, nil",
                "+\t}",
                "+",
                "+\tfirstKex := t.sessionID == nil",
                "+",
                "+\tkex := pendingKex{",
                "+\t\tdone:      make(chan error, 1),",
                "+\t\totherInit: p,",
                "+\t}",
                "+\tt.startKex <- &kex",
                "+\terr = <-kex.done",
                "+",
                "+\tif debugHandshake {",
                "+\t\tlog.Printf(\"%s exited key exchange (first %v), err %v\", t.id(), firstKex, err)",
                "+\t}",
                "+",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tt.resetReadThresholds()",
                "+",
                "+\t// By default, a key exchange is hidden from higher layers by",
                "+\t// translating it into msgIgnore.",
                "+\tsuccessPacket := []byte{msgIgnore}",
                "+\tif firstKex {",
                "+\t\t// sendKexInit() for the first kex waits for",
                "+\t\t// msgNewKeys so the authentication process is",
                "+\t\t// guaranteed to happen over an encrypted transport.",
                "+\t\tsuccessPacket = []byte{msgNewKeys}",
                "+\t}",
                "+",
                "+\treturn successPacket, nil",
                "+}",
                "+",
                "+// sendKexInit sends a key change message.",
                "+func (t *handshakeTransport) sendKexInit() error {",
                "+\tt.mu.Lock()",
                "+\tdefer t.mu.Unlock()",
                "+\tif t.sentInitMsg != nil {",
                "+\t\t// kexInits may be sent either in response to the other side,",
                "+\t\t// or because our side wants to initiate a key change, so we",
                "+\t\t// may have already sent a kexInit. In that case, don't send a",
                "+\t\t// second kexInit.",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tmsg := &kexInitMsg{",
                "+\t\tKexAlgos:                t.config.KeyExchanges,",
                "+\t\tCiphersClientServer:     t.config.Ciphers,",
                "+\t\tCiphersServerClient:     t.config.Ciphers,",
                "+\t\tMACsClientServer:        t.config.MACs,",
                "+\t\tMACsServerClient:        t.config.MACs,",
                "+\t\tCompressionClientServer: supportedCompressions,",
                "+\t\tCompressionServerClient: supportedCompressions,",
                "+\t}",
                "+\tio.ReadFull(rand.Reader, msg.Cookie[:])",
                "+",
                "+\tif len(t.hostKeys) > 0 {",
                "+\t\tfor _, k := range t.hostKeys {",
                "+\t\t\tmsg.ServerHostKeyAlgos = append(",
                "+\t\t\t\tmsg.ServerHostKeyAlgos, k.PublicKey().Type())",
                "+\t\t}",
                "+\t} else {",
                "+\t\tmsg.ServerHostKeyAlgos = t.hostKeyAlgorithms",
                "+\t}",
                "+\tpacket := Marshal(msg)",
                "+",
                "+\t// writePacket destroys the contents, so save a copy.",
                "+\tpacketCopy := make([]byte, len(packet))",
                "+\tcopy(packetCopy, packet)",
                "+",
                "+\tif err := t.pushPacket(packetCopy); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tt.sentInitMsg = msg",
                "+\tt.sentInitPacket = packet",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (t *handshakeTransport) writePacket(p []byte) error {",
                "+\tswitch p[0] {",
                "+\tcase msgKexInit:",
                "+\t\treturn errors.New(\"ssh: only handshakeTransport can send kexInit\")",
                "+\tcase msgNewKeys:",
                "+\t\treturn errors.New(\"ssh: only handshakeTransport can send newKeys\")",
                "+\t}",
                "+",
                "+\tt.mu.Lock()",
                "+\tdefer t.mu.Unlock()",
                "+\tif t.writeError != nil {",
                "+\t\treturn t.writeError",
                "+\t}",
                "+",
                "+\tif t.sentInitMsg != nil {",
                "+\t\t// Copy the packet so the writer can reuse the buffer.",
                "+\t\tcp := make([]byte, len(p))",
                "+\t\tcopy(cp, p)",
                "+\t\tt.pendingPackets = append(t.pendingPackets, cp)",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tif t.writeBytesLeft > 0 {",
                "+\t\tt.writeBytesLeft -= int64(len(p))",
                "+\t} else {",
                "+\t\tt.requestKeyExchange()",
                "+\t}",
                "+",
                "+\tif t.writePacketsLeft > 0 {",
                "+\t\tt.writePacketsLeft--",
                "+\t} else {",
                "+\t\tt.requestKeyExchange()",
                "+\t}",
                "+",
                "+\tif err := t.pushPacket(p); err != nil {",
                "+\t\tt.writeError = err",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (t *handshakeTransport) Close() error {",
                "+\treturn t.conn.Close()",
                "+}",
                "+",
                "+func (t *handshakeTransport) enterKeyExchange(otherInitPacket []byte) error {",
                "+\tif debugHandshake {",
                "+\t\tlog.Printf(\"%s entered key exchange\", t.id())",
                "+\t}",
                "+",
                "+\totherInit := &kexInitMsg{}",
                "+\tif err := Unmarshal(otherInitPacket, otherInit); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tmagics := handshakeMagics{",
                "+\t\tclientVersion: t.clientVersion,",
                "+\t\tserverVersion: t.serverVersion,",
                "+\t\tclientKexInit: otherInitPacket,",
                "+\t\tserverKexInit: t.sentInitPacket,",
                "+\t}",
                "+",
                "+\tclientInit := otherInit",
                "+\tserverInit := t.sentInitMsg",
                "+\tif len(t.hostKeys) == 0 {",
                "+\t\tclientInit, serverInit = serverInit, clientInit",
                "+",
                "+\t\tmagics.clientKexInit = t.sentInitPacket",
                "+\t\tmagics.serverKexInit = otherInitPacket",
                "+\t}",
                "+",
                "+\tvar err error",
                "+\tt.algorithms, err = findAgreedAlgorithms(clientInit, serverInit)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\t// We don't send FirstKexFollows, but we handle receiving it.",
                "+\t//",
                "+\t// RFC 4253 section 7 defines the kex and the agreement method for",
                "+\t// first_kex_packet_follows. It states that the guessed packet",
                "+\t// should be ignored if the \"kex algorithm and/or the host",
                "+\t// key algorithm is guessed wrong (server and client have",
                "+\t// different preferred algorithm), or if any of the other",
                "+\t// algorithms cannot be agreed upon\". The other algorithms have",
                "+\t// already been checked above so the kex algorithm and host key",
                "+\t// algorithm are checked here.",
                "+\tif otherInit.FirstKexFollows && (clientInit.KexAlgos[0] != serverInit.KexAlgos[0] || clientInit.ServerHostKeyAlgos[0] != serverInit.ServerHostKeyAlgos[0]) {",
                "+\t\t// other side sent a kex message for the wrong algorithm,",
                "+\t\t// which we have to ignore.",
                "+\t\tif _, err := t.conn.readPacket(); err != nil {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tkex, ok := kexAlgoMap[t.algorithms.kex]",
                "+\tif !ok {",
                "+\t\treturn fmt.Errorf(\"ssh: unexpected key exchange algorithm %v\", t.algorithms.kex)",
                "+\t}",
                "+",
                "+\tvar result *kexResult",
                "+\tif len(t.hostKeys) > 0 {",
                "+\t\tresult, err = t.server(kex, t.algorithms, &magics)",
                "+\t} else {",
                "+\t\tresult, err = t.client(kex, t.algorithms, &magics)",
                "+\t}",
                "+",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tif t.sessionID == nil {",
                "+\t\tt.sessionID = result.H",
                "+\t}",
                "+\tresult.SessionID = t.sessionID",
                "+",
                "+\tif err := t.conn.prepareKeyChange(t.algorithms, result); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tif err = t.conn.writePacket([]byte{msgNewKeys}); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tif packet, err := t.conn.readPacket(); err != nil {",
                "+\t\treturn err",
                "+\t} else if packet[0] != msgNewKeys {",
                "+\t\treturn unexpectedMessageError(msgNewKeys, packet[0])",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (t *handshakeTransport) server(kex kexAlgorithm, algs *algorithms, magics *handshakeMagics) (*kexResult, error) {",
                "+\tvar hostKey Signer",
                "+\tfor _, k := range t.hostKeys {",
                "+\t\tif algs.hostKey == k.PublicKey().Type() {",
                "+\t\t\thostKey = k",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tr, err := kex.Server(t.conn, t.config.Rand, magics, hostKey)",
                "+\treturn r, err",
                "+}",
                "+",
                "+func (t *handshakeTransport) client(kex kexAlgorithm, algs *algorithms, magics *handshakeMagics) (*kexResult, error) {",
                "+\tresult, err := kex.Client(t.conn, t.config.Rand, magics)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\thostKey, err := ParsePublicKey(result.HostKey)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tif err := verifyHostKeySignature(hostKey, result); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\terr = t.hostKeyCallback(t.dialAddress, t.remoteAddr, hostKey)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn result, nil",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/kex.go b/vendor/golang.org/x/crypto/ssh/kex.go",
                "new file mode 100644",
                "index 000000000..f91c2770e",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/kex.go",
                "@@ -0,0 +1,540 @@",
                "+// Copyright 2013 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"crypto\"",
                "+\t\"crypto/ecdsa\"",
                "+\t\"crypto/elliptic\"",
                "+\t\"crypto/rand\"",
                "+\t\"crypto/subtle\"",
                "+\t\"errors\"",
                "+\t\"io\"",
                "+\t\"math/big\"",
                "+",
                "+\t\"golang.org/x/crypto/curve25519\"",
                "+)",
                "+",
                "+const (",
                "+\tkexAlgoDH1SHA1          = \"diffie-hellman-group1-sha1\"",
                "+\tkexAlgoDH14SHA1         = \"diffie-hellman-group14-sha1\"",
                "+\tkexAlgoECDH256          = \"ecdh-sha2-nistp256\"",
                "+\tkexAlgoECDH384          = \"ecdh-sha2-nistp384\"",
                "+\tkexAlgoECDH521          = \"ecdh-sha2-nistp521\"",
                "+\tkexAlgoCurve25519SHA256 = \"curve25519-sha256@libssh.org\"",
                "+)",
                "+",
                "+// kexResult captures the outcome of a key exchange.",
                "+type kexResult struct {",
                "+\t// Session hash. See also RFC 4253, section 8.",
                "+\tH []byte",
                "+",
                "+\t// Shared secret. See also RFC 4253, section 8.",
                "+\tK []byte",
                "+",
                "+\t// Host key as hashed into H.",
                "+\tHostKey []byte",
                "+",
                "+\t// Signature of H.",
                "+\tSignature []byte",
                "+",
                "+\t// A cryptographic hash function that matches the security",
                "+\t// level of the key exchange algorithm. It is used for",
                "+\t// calculating H, and for deriving keys from H and K.",
                "+\tHash crypto.Hash",
                "+",
                "+\t// The session ID, which is the first H computed. This is used",
                "+\t// to derive key material inside the transport.",
                "+\tSessionID []byte",
                "+}",
                "+",
                "+// handshakeMagics contains data that is always included in the",
                "+// session hash.",
                "+type handshakeMagics struct {",
                "+\tclientVersion, serverVersion []byte",
                "+\tclientKexInit, serverKexInit []byte",
                "+}",
                "+",
                "+func (m *handshakeMagics) write(w io.Writer) {",
                "+\twriteString(w, m.clientVersion)",
                "+\twriteString(w, m.serverVersion)",
                "+\twriteString(w, m.clientKexInit)",
                "+\twriteString(w, m.serverKexInit)",
                "+}",
                "+",
                "+// kexAlgorithm abstracts different key exchange algorithms.",
                "+type kexAlgorithm interface {",
                "+\t// Server runs server-side key agreement, signing the result",
                "+\t// with a hostkey.",
                "+\tServer(p packetConn, rand io.Reader, magics *handshakeMagics, s Signer) (*kexResult, error)",
                "+",
                "+\t// Client runs the client-side key agreement. Caller is",
                "+\t// responsible for verifying the host key signature.",
                "+\tClient(p packetConn, rand io.Reader, magics *handshakeMagics) (*kexResult, error)",
                "+}",
                "+",
                "+// dhGroup is a multiplicative group suitable for implementing Diffie-Hellman key agreement.",
                "+type dhGroup struct {",
                "+\tg, p, pMinus1 *big.Int",
                "+}",
                "+",
                "+func (group *dhGroup) diffieHellman(theirPublic, myPrivate *big.Int) (*big.Int, error) {",
                "+\tif theirPublic.Cmp(bigOne) <= 0 || theirPublic.Cmp(group.pMinus1) >= 0 {",
                "+\t\treturn nil, errors.New(\"ssh: DH parameter out of bounds\")",
                "+\t}",
                "+\treturn new(big.Int).Exp(theirPublic, myPrivate, group.p), nil",
                "+}",
                "+",
                "+func (group *dhGroup) Client(c packetConn, randSource io.Reader, magics *handshakeMagics) (*kexResult, error) {",
                "+\thashFunc := crypto.SHA1",
                "+",
                "+\tvar x *big.Int",
                "+\tfor {",
                "+\t\tvar err error",
                "+\t\tif x, err = rand.Int(randSource, group.pMinus1); err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\tif x.Sign() > 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tX := new(big.Int).Exp(group.g, x, group.p)",
                "+\tkexDHInit := kexDHInitMsg{",
                "+\t\tX: X,",
                "+\t}",
                "+\tif err := c.writePacket(Marshal(&kexDHInit)); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tpacket, err := c.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tvar kexDHReply kexDHReplyMsg",
                "+\tif err = Unmarshal(packet, &kexDHReply); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tkInt, err := group.diffieHellman(kexDHReply.Y, x)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\th := hashFunc.New()",
                "+\tmagics.write(h)",
                "+\twriteString(h, kexDHReply.HostKey)",
                "+\twriteInt(h, X)",
                "+\twriteInt(h, kexDHReply.Y)",
                "+\tK := make([]byte, intLength(kInt))",
                "+\tmarshalInt(K, kInt)",
                "+\th.Write(K)",
                "+",
                "+\treturn &kexResult{",
                "+\t\tH:         h.Sum(nil),",
                "+\t\tK:         K,",
                "+\t\tHostKey:   kexDHReply.HostKey,",
                "+\t\tSignature: kexDHReply.Signature,",
                "+\t\tHash:      crypto.SHA1,",
                "+\t}, nil",
                "+}",
                "+",
                "+func (group *dhGroup) Server(c packetConn, randSource io.Reader, magics *handshakeMagics, priv Signer) (result *kexResult, err error) {",
                "+\thashFunc := crypto.SHA1",
                "+\tpacket, err := c.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+\tvar kexDHInit kexDHInitMsg",
                "+\tif err = Unmarshal(packet, &kexDHInit); err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tvar y *big.Int",
                "+\tfor {",
                "+\t\tif y, err = rand.Int(randSource, group.pMinus1); err != nil {",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tif y.Sign() > 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tY := new(big.Int).Exp(group.g, y, group.p)",
                "+\tkInt, err := group.diffieHellman(kexDHInit.X, y)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\thostKeyBytes := priv.PublicKey().Marshal()",
                "+",
                "+\th := hashFunc.New()",
                "+\tmagics.write(h)",
                "+\twriteString(h, hostKeyBytes)",
                "+\twriteInt(h, kexDHInit.X)",
                "+\twriteInt(h, Y)",
                "+",
                "+\tK := make([]byte, intLength(kInt))",
                "+\tmarshalInt(K, kInt)",
                "+\th.Write(K)",
                "+",
                "+\tH := h.Sum(nil)",
                "+",
                "+\t// H is already a hash, but the hostkey signing will apply its",
                "+\t// own key-specific hash algorithm.",
                "+\tsig, err := signAndMarshal(priv, randSource, H)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tkexDHReply := kexDHReplyMsg{",
                "+\t\tHostKey:   hostKeyBytes,",
                "+\t\tY:         Y,",
                "+\t\tSignature: sig,",
                "+\t}",
                "+\tpacket = Marshal(&kexDHReply)",
                "+",
                "+\terr = c.writePacket(packet)",
                "+\treturn &kexResult{",
                "+\t\tH:         H,",
                "+\t\tK:         K,",
                "+\t\tHostKey:   hostKeyBytes,",
                "+\t\tSignature: sig,",
                "+\t\tHash:      crypto.SHA1,",
                "+\t}, nil",
                "+}",
                "+",
                "+// ecdh performs Elliptic Curve Diffie-Hellman key exchange as",
                "+// described in RFC 5656, section 4.",
                "+type ecdh struct {",
                "+\tcurve elliptic.Curve",
                "+}",
                "+",
                "+func (kex *ecdh) Client(c packetConn, rand io.Reader, magics *handshakeMagics) (*kexResult, error) {",
                "+\tephKey, err := ecdsa.GenerateKey(kex.curve, rand)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tkexInit := kexECDHInitMsg{",
                "+\t\tClientPubKey: elliptic.Marshal(kex.curve, ephKey.PublicKey.X, ephKey.PublicKey.Y),",
                "+\t}",
                "+",
                "+\tserialized := Marshal(&kexInit)",
                "+\tif err := c.writePacket(serialized); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tpacket, err := c.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tvar reply kexECDHReplyMsg",
                "+\tif err = Unmarshal(packet, &reply); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tx, y, err := unmarshalECKey(kex.curve, reply.EphemeralPubKey)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\t// generate shared secret",
                "+\tsecret, _ := kex.curve.ScalarMult(x, y, ephKey.D.Bytes())",
                "+",
                "+\th := ecHash(kex.curve).New()",
                "+\tmagics.write(h)",
                "+\twriteString(h, reply.HostKey)",
                "+\twriteString(h, kexInit.ClientPubKey)",
                "+\twriteString(h, reply.EphemeralPubKey)",
                "+\tK := make([]byte, intLength(secret))",
                "+\tmarshalInt(K, secret)",
                "+\th.Write(K)",
                "+",
                "+\treturn &kexResult{",
                "+\t\tH:         h.Sum(nil),",
                "+\t\tK:         K,",
                "+\t\tHostKey:   reply.HostKey,",
                "+\t\tSignature: reply.Signature,",
                "+\t\tHash:      ecHash(kex.curve),",
                "+\t}, nil",
                "+}",
                "+",
                "+// unmarshalECKey parses and checks an EC key.",
                "+func unmarshalECKey(curve elliptic.Curve, pubkey []byte) (x, y *big.Int, err error) {",
                "+\tx, y = elliptic.Unmarshal(curve, pubkey)",
                "+\tif x == nil {",
                "+\t\treturn nil, nil, errors.New(\"ssh: elliptic.Unmarshal failure\")",
                "+\t}",
                "+\tif !validateECPublicKey(curve, x, y) {",
                "+\t\treturn nil, nil, errors.New(\"ssh: public key not on curve\")",
                "+\t}",
                "+\treturn x, y, nil",
                "+}",
                "+",
                "+// validateECPublicKey checks that the point is a valid public key for",
                "+// the given curve. See [SEC1], 3.2.2",
                "+func validateECPublicKey(curve elliptic.Curve, x, y *big.Int) bool {",
                "+\tif x.Sign() == 0 && y.Sign() == 0 {",
                "+\t\treturn false",
                "+\t}",
                "+",
                "+\tif x.Cmp(curve.Params().P) >= 0 {",
                "+\t\treturn false",
                "+\t}",
                "+",
                "+\tif y.Cmp(curve.Params().P) >= 0 {",
                "+\t\treturn false",
                "+\t}",
                "+",
                "+\tif !curve.IsOnCurve(x, y) {",
                "+\t\treturn false",
                "+\t}",
                "+",
                "+\t// We don't check if N * PubKey == 0, since",
                "+\t//",
                "+\t// - the NIST curves have cofactor = 1, so this is implicit.",
                "+\t// (We don't foresee an implementation that supports non NIST",
                "+\t// curves)",
                "+\t//",
                "+\t// - for ephemeral keys, we don't need to worry about small",
                "+\t// subgroup attacks.",
                "+\treturn true",
                "+}",
                "+",
                "+func (kex *ecdh) Server(c packetConn, rand io.Reader, magics *handshakeMagics, priv Signer) (result *kexResult, err error) {",
                "+\tpacket, err := c.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tvar kexECDHInit kexECDHInitMsg",
                "+\tif err = Unmarshal(packet, &kexECDHInit); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tclientX, clientY, err := unmarshalECKey(kex.curve, kexECDHInit.ClientPubKey)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\t// We could cache this key across multiple users/multiple",
                "+\t// connection attempts, but the benefit is small. OpenSSH",
                "+\t// generates a new key for each incoming connection.",
                "+\tephKey, err := ecdsa.GenerateKey(kex.curve, rand)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\thostKeyBytes := priv.PublicKey().Marshal()",
                "+",
                "+\tserializedEphKey := elliptic.Marshal(kex.curve, ephKey.PublicKey.X, ephKey.PublicKey.Y)",
                "+",
                "+\t// generate shared secret",
                "+\tsecret, _ := kex.curve.ScalarMult(clientX, clientY, ephKey.D.Bytes())",
                "+",
                "+\th := ecHash(kex.curve).New()",
                "+\tmagics.write(h)",
                "+\twriteString(h, hostKeyBytes)",
                "+\twriteString(h, kexECDHInit.ClientPubKey)",
                "+\twriteString(h, serializedEphKey)",
                "+",
                "+\tK := make([]byte, intLength(secret))",
                "+\tmarshalInt(K, secret)",
                "+\th.Write(K)",
                "+",
                "+\tH := h.Sum(nil)",
                "+",
                "+\t// H is already a hash, but the hostkey signing will apply its",
                "+\t// own key-specific hash algorithm.",
                "+\tsig, err := signAndMarshal(priv, rand, H)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treply := kexECDHReplyMsg{",
                "+\t\tEphemeralPubKey: serializedEphKey,",
                "+\t\tHostKey:         hostKeyBytes,",
                "+\t\tSignature:       sig,",
                "+\t}",
                "+",
                "+\tserialized := Marshal(&reply)",
                "+\tif err := c.writePacket(serialized); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn &kexResult{",
                "+\t\tH:         H,",
                "+\t\tK:         K,",
                "+\t\tHostKey:   reply.HostKey,",
                "+\t\tSignature: sig,",
                "+\t\tHash:      ecHash(kex.curve),",
                "+\t}, nil",
                "+}",
                "+",
                "+var kexAlgoMap = map[string]kexAlgorithm{}",
                "+",
                "+func init() {",
                "+\t// This is the group called diffie-hellman-group1-sha1 in RFC",
                "+\t// 4253 and Oakley Group 2 in RFC 2409.",
                "+\tp, _ := new(big.Int).SetString(\"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF\", 16)",
                "+\tkexAlgoMap[kexAlgoDH1SHA1] = &dhGroup{",
                "+\t\tg:       new(big.Int).SetInt64(2),",
                "+\t\tp:       p,",
                "+\t\tpMinus1: new(big.Int).Sub(p, bigOne),",
                "+\t}",
                "+",
                "+\t// This is the group called diffie-hellman-group14-sha1 in RFC",
                "+\t// 4253 and Oakley Group 14 in RFC 3526.",
                "+\tp, _ = new(big.Int).SetString(\"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF\", 16)",
                "+",
                "+\tkexAlgoMap[kexAlgoDH14SHA1] = &dhGroup{",
                "+\t\tg:       new(big.Int).SetInt64(2),",
                "+\t\tp:       p,",
                "+\t\tpMinus1: new(big.Int).Sub(p, bigOne),",
                "+\t}",
                "+",
                "+\tkexAlgoMap[kexAlgoECDH521] = &ecdh{elliptic.P521()}",
                "+\tkexAlgoMap[kexAlgoECDH384] = &ecdh{elliptic.P384()}",
                "+\tkexAlgoMap[kexAlgoECDH256] = &ecdh{elliptic.P256()}",
                "+\tkexAlgoMap[kexAlgoCurve25519SHA256] = &curve25519sha256{}",
                "+}",
                "+",
                "+// curve25519sha256 implements the curve25519-sha256@libssh.org key",
                "+// agreement protocol, as described in",
                "+// https://git.libssh.org/projects/libssh.git/tree/doc/curve25519-sha256@libssh.org.txt",
                "+type curve25519sha256 struct{}",
                "+",
                "+type curve25519KeyPair struct {",
                "+\tpriv [32]byte",
                "+\tpub  [32]byte",
                "+}",
                "+",
                "+func (kp *curve25519KeyPair) generate(rand io.Reader) error {",
                "+\tif _, err := io.ReadFull(rand, kp.priv[:]); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tcurve25519.ScalarBaseMult(&kp.pub, &kp.priv)",
                "+\treturn nil",
                "+}",
                "+",
                "+// curve25519Zeros is just an array of 32 zero bytes so that we have something",
                "+// convenient to compare against in order to reject curve25519 points with the",
                "+// wrong order.",
                "+var curve25519Zeros [32]byte",
                "+",
                "+func (kex *curve25519sha256) Client(c packetConn, rand io.Reader, magics *handshakeMagics) (*kexResult, error) {",
                "+\tvar kp curve25519KeyPair",
                "+\tif err := kp.generate(rand); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif err := c.writePacket(Marshal(&kexECDHInitMsg{kp.pub[:]})); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tpacket, err := c.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tvar reply kexECDHReplyMsg",
                "+\tif err = Unmarshal(packet, &reply); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif len(reply.EphemeralPubKey) != 32 {",
                "+\t\treturn nil, errors.New(\"ssh: peer's curve25519 public value has wrong length\")",
                "+\t}",
                "+",
                "+\tvar servPub, secret [32]byte",
                "+\tcopy(servPub[:], reply.EphemeralPubKey)",
                "+\tcurve25519.ScalarMult(&secret, &kp.priv, &servPub)",
                "+\tif subtle.ConstantTimeCompare(secret[:], curve25519Zeros[:]) == 1 {",
                "+\t\treturn nil, errors.New(\"ssh: peer's curve25519 public value has wrong order\")",
                "+\t}",
                "+",
                "+\th := crypto.SHA256.New()",
                "+\tmagics.write(h)",
                "+\twriteString(h, reply.HostKey)",
                "+\twriteString(h, kp.pub[:])",
                "+\twriteString(h, reply.EphemeralPubKey)",
                "+",
                "+\tkInt := new(big.Int).SetBytes(secret[:])",
                "+\tK := make([]byte, intLength(kInt))",
                "+\tmarshalInt(K, kInt)",
                "+\th.Write(K)",
                "+",
                "+\treturn &kexResult{",
                "+\t\tH:         h.Sum(nil),",
                "+\t\tK:         K,",
                "+\t\tHostKey:   reply.HostKey,",
                "+\t\tSignature: reply.Signature,",
                "+\t\tHash:      crypto.SHA256,",
                "+\t}, nil",
                "+}",
                "+",
                "+func (kex *curve25519sha256) Server(c packetConn, rand io.Reader, magics *handshakeMagics, priv Signer) (result *kexResult, err error) {",
                "+\tpacket, err := c.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn",
                "+\t}",
                "+\tvar kexInit kexECDHInitMsg",
                "+\tif err = Unmarshal(packet, &kexInit); err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tif len(kexInit.ClientPubKey) != 32 {",
                "+\t\treturn nil, errors.New(\"ssh: peer's curve25519 public value has wrong length\")",
                "+\t}",
                "+",
                "+\tvar kp curve25519KeyPair",
                "+\tif err := kp.generate(rand); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tvar clientPub, secret [32]byte",
                "+\tcopy(clientPub[:], kexInit.ClientPubKey)",
                "+\tcurve25519.ScalarMult(&secret, &kp.priv, &clientPub)",
                "+\tif subtle.ConstantTimeCompare(secret[:], curve25519Zeros[:]) == 1 {",
                "+\t\treturn nil, errors.New(\"ssh: peer's curve25519 public value has wrong order\")",
                "+\t}",
                "+",
                "+\thostKeyBytes := priv.PublicKey().Marshal()",
                "+",
                "+\th := crypto.SHA256.New()",
                "+\tmagics.write(h)",
                "+\twriteString(h, hostKeyBytes)",
                "+\twriteString(h, kexInit.ClientPubKey)",
                "+\twriteString(h, kp.pub[:])",
                "+",
                "+\tkInt := new(big.Int).SetBytes(secret[:])",
                "+\tK := make([]byte, intLength(kInt))",
                "+\tmarshalInt(K, kInt)",
                "+\th.Write(K)",
                "+",
                "+\tH := h.Sum(nil)",
                "+",
                "+\tsig, err := signAndMarshal(priv, rand, H)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treply := kexECDHReplyMsg{",
                "+\t\tEphemeralPubKey: kp.pub[:],",
                "+\t\tHostKey:         hostKeyBytes,",
                "+\t\tSignature:       sig,",
                "+\t}",
                "+\tif err := c.writePacket(Marshal(&reply)); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn &kexResult{",
                "+\t\tH:         H,",
                "+\t\tK:         K,",
                "+\t\tHostKey:   hostKeyBytes,",
                "+\t\tSignature: sig,",
                "+\t\tHash:      crypto.SHA256,",
                "+\t}, nil",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/keys.go b/vendor/golang.org/x/crypto/ssh/keys.go",
                "new file mode 100644",
                "index 000000000..b682c1741",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/keys.go",
                "@@ -0,0 +1,1031 @@",
                "+// Copyright 2012 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"crypto\"",
                "+\t\"crypto/dsa\"",
                "+\t\"crypto/ecdsa\"",
                "+\t\"crypto/elliptic\"",
                "+\t\"crypto/md5\"",
                "+\t\"crypto/rsa\"",
                "+\t\"crypto/sha256\"",
                "+\t\"crypto/x509\"",
                "+\t\"encoding/asn1\"",
                "+\t\"encoding/base64\"",
                "+\t\"encoding/hex\"",
                "+\t\"encoding/pem\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"math/big\"",
                "+\t\"strings\"",
                "+",
                "+\t\"golang.org/x/crypto/ed25519\"",
                "+)",
                "+",
                "+// These constants represent the algorithm names for key types supported by this",
                "+// package.",
                "+const (",
                "+\tKeyAlgoRSA      = \"ssh-rsa\"",
                "+\tKeyAlgoDSA      = \"ssh-dss\"",
                "+\tKeyAlgoECDSA256 = \"ecdsa-sha2-nistp256\"",
                "+\tKeyAlgoECDSA384 = \"ecdsa-sha2-nistp384\"",
                "+\tKeyAlgoECDSA521 = \"ecdsa-sha2-nistp521\"",
                "+\tKeyAlgoED25519  = \"ssh-ed25519\"",
                "+)",
                "+",
                "+// parsePubKey parses a public key of the given algorithm.",
                "+// Use ParsePublicKey for keys with prepended algorithm.",
                "+func parsePubKey(in []byte, algo string) (pubKey PublicKey, rest []byte, err error) {",
                "+\tswitch algo {",
                "+\tcase KeyAlgoRSA:",
                "+\t\treturn parseRSA(in)",
                "+\tcase KeyAlgoDSA:",
                "+\t\treturn parseDSA(in)",
                "+\tcase KeyAlgoECDSA256, KeyAlgoECDSA384, KeyAlgoECDSA521:",
                "+\t\treturn parseECDSA(in)",
                "+\tcase KeyAlgoED25519:",
                "+\t\treturn parseED25519(in)",
                "+\tcase CertAlgoRSAv01, CertAlgoDSAv01, CertAlgoECDSA256v01, CertAlgoECDSA384v01, CertAlgoECDSA521v01, CertAlgoED25519v01:",
                "+\t\tcert, err := parseCert(in, certToPrivAlgo(algo))",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, nil, err",
                "+\t\t}",
                "+\t\treturn cert, nil, nil",
                "+\t}",
                "+\treturn nil, nil, fmt.Errorf(\"ssh: unknown key algorithm: %v\", algo)",
                "+}",
                "+",
                "+// parseAuthorizedKey parses a public key in OpenSSH authorized_keys format",
                "+// (see sshd(8) manual page) once the options and key type fields have been",
                "+// removed.",
                "+func parseAuthorizedKey(in []byte) (out PublicKey, comment string, err error) {",
                "+\tin = bytes.TrimSpace(in)",
                "+",
                "+\ti := bytes.IndexAny(in, \" \\t\")",
                "+\tif i == -1 {",
                "+\t\ti = len(in)",
                "+\t}",
                "+\tbase64Key := in[:i]",
                "+",
                "+\tkey := make([]byte, base64.StdEncoding.DecodedLen(len(base64Key)))",
                "+\tn, err := base64.StdEncoding.Decode(key, base64Key)",
                "+\tif err != nil {",
                "+\t\treturn nil, \"\", err",
                "+\t}",
                "+\tkey = key[:n]",
                "+\tout, err = ParsePublicKey(key)",
                "+\tif err != nil {",
                "+\t\treturn nil, \"\", err",
                "+\t}",
                "+\tcomment = string(bytes.TrimSpace(in[i:]))",
                "+\treturn out, comment, nil",
                "+}",
                "+",
                "+// ParseKnownHosts parses an entry in the format of the known_hosts file.",
                "+//",
                "+// The known_hosts format is documented in the sshd(8) manual page. This",
                "+// function will parse a single entry from in. On successful return, marker",
                "+// will contain the optional marker value (i.e. \"cert-authority\" or \"revoked\")",
                "+// or else be empty, hosts will contain the hosts that this entry matches,",
                "+// pubKey will contain the public key and comment will contain any trailing",
                "+// comment at the end of the line. See the sshd(8) manual page for the various",
                "+// forms that a host string can take.",
                "+//",
                "+// The unparsed remainder of the input will be returned in rest. This function",
                "+// can be called repeatedly to parse multiple entries.",
                "+//",
                "+// If no entries were found in the input then err will be io.EOF. Otherwise a",
                "+// non-nil err value indicates a parse error.",
                "+func ParseKnownHosts(in []byte) (marker string, hosts []string, pubKey PublicKey, comment string, rest []byte, err error) {",
                "+\tfor len(in) > 0 {",
                "+\t\tend := bytes.IndexByte(in, '\\n')",
                "+\t\tif end != -1 {",
                "+\t\t\trest = in[end+1:]",
                "+\t\t\tin = in[:end]",
                "+\t\t} else {",
                "+\t\t\trest = nil",
                "+\t\t}",
                "+",
                "+\t\tend = bytes.IndexByte(in, '\\r')",
                "+\t\tif end != -1 {",
                "+\t\t\tin = in[:end]",
                "+\t\t}",
                "+",
                "+\t\tin = bytes.TrimSpace(in)",
                "+\t\tif len(in) == 0 || in[0] == '#' {",
                "+\t\t\tin = rest",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\ti := bytes.IndexAny(in, \" \\t\")",
                "+\t\tif i == -1 {",
                "+\t\t\tin = rest",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\t// Strip out the beginning of the known_host key.",
                "+\t\t// This is either an optional marker or a (set of) hostname(s).",
                "+\t\tkeyFields := bytes.Fields(in)",
                "+\t\tif len(keyFields) < 3 || len(keyFields) > 5 {",
                "+\t\t\treturn \"\", nil, nil, \"\", nil, errors.New(\"ssh: invalid entry in known_hosts data\")",
                "+\t\t}",
                "+",
                "+\t\t// keyFields[0] is either \"@cert-authority\", \"@revoked\" or a comma separated",
                "+\t\t// list of hosts",
                "+\t\tmarker := \"\"",
                "+\t\tif keyFields[0][0] == '@' {",
                "+\t\t\tmarker = string(keyFields[0][1:])",
                "+\t\t\tkeyFields = keyFields[1:]",
                "+\t\t}",
                "+",
                "+\t\thosts := string(keyFields[0])",
                "+\t\t// keyFields[1] contains the key type (e.g. \u00e2\u0080\u009cssh-rsa\u00e2\u0080\u009d).",
                "+\t\t// However, that information is duplicated inside the",
                "+\t\t// base64-encoded key and so is ignored here.",
                "+",
                "+\t\tkey := bytes.Join(keyFields[2:], []byte(\" \"))",
                "+\t\tif pubKey, comment, err = parseAuthorizedKey(key); err != nil {",
                "+\t\t\treturn \"\", nil, nil, \"\", nil, err",
                "+\t\t}",
                "+",
                "+\t\treturn marker, strings.Split(hosts, \",\"), pubKey, comment, rest, nil",
                "+\t}",
                "+",
                "+\treturn \"\", nil, nil, \"\", nil, io.EOF",
                "+}",
                "+",
                "+// ParseAuthorizedKeys parses a public key from an authorized_keys",
                "+// file used in OpenSSH according to the sshd(8) manual page.",
                "+func ParseAuthorizedKey(in []byte) (out PublicKey, comment string, options []string, rest []byte, err error) {",
                "+\tfor len(in) > 0 {",
                "+\t\tend := bytes.IndexByte(in, '\\n')",
                "+\t\tif end != -1 {",
                "+\t\t\trest = in[end+1:]",
                "+\t\t\tin = in[:end]",
                "+\t\t} else {",
                "+\t\t\trest = nil",
                "+\t\t}",
                "+",
                "+\t\tend = bytes.IndexByte(in, '\\r')",
                "+\t\tif end != -1 {",
                "+\t\t\tin = in[:end]",
                "+\t\t}",
                "+",
                "+\t\tin = bytes.TrimSpace(in)",
                "+\t\tif len(in) == 0 || in[0] == '#' {",
                "+\t\t\tin = rest",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\ti := bytes.IndexAny(in, \" \\t\")",
                "+\t\tif i == -1 {",
                "+\t\t\tin = rest",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\tif out, comment, err = parseAuthorizedKey(in[i:]); err == nil {",
                "+\t\t\treturn out, comment, options, rest, nil",
                "+\t\t}",
                "+",
                "+\t\t// No key type recognised. Maybe there's an options field at",
                "+\t\t// the beginning.",
                "+\t\tvar b byte",
                "+\t\tinQuote := false",
                "+\t\tvar candidateOptions []string",
                "+\t\toptionStart := 0",
                "+\t\tfor i, b = range in {",
                "+\t\t\tisEnd := !inQuote && (b == ' ' || b == '\\t')",
                "+\t\t\tif (b == ',' && !inQuote) || isEnd {",
                "+\t\t\t\tif i-optionStart > 0 {",
                "+\t\t\t\t\tcandidateOptions = append(candidateOptions, string(in[optionStart:i]))",
                "+\t\t\t\t}",
                "+\t\t\t\toptionStart = i + 1",
                "+\t\t\t}",
                "+\t\t\tif isEnd {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t\tif b == '\"' && (i == 0 || (i > 0 && in[i-1] != '\\\\')) {",
                "+\t\t\t\tinQuote = !inQuote",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfor i < len(in) && (in[i] == ' ' || in[i] == '\\t') {",
                "+\t\t\ti++",
                "+\t\t}",
                "+\t\tif i == len(in) {",
                "+\t\t\t// Invalid line: unmatched quote",
                "+\t\t\tin = rest",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\tin = in[i:]",
                "+\t\ti = bytes.IndexAny(in, \" \\t\")",
                "+\t\tif i == -1 {",
                "+\t\t\tin = rest",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\tif out, comment, err = parseAuthorizedKey(in[i:]); err == nil {",
                "+\t\t\toptions = candidateOptions",
                "+\t\t\treturn out, comment, options, rest, nil",
                "+\t\t}",
                "+",
                "+\t\tin = rest",
                "+\t\tcontinue",
                "+\t}",
                "+",
                "+\treturn nil, \"\", nil, nil, errors.New(\"ssh: no key found\")",
                "+}",
                "+",
                "+// ParsePublicKey parses an SSH public key formatted for use in",
                "+// the SSH wire protocol according to RFC 4253, section 6.6.",
                "+func ParsePublicKey(in []byte) (out PublicKey, err error) {",
                "+\talgo, in, ok := parseString(in)",
                "+\tif !ok {",
                "+\t\treturn nil, errShortRead",
                "+\t}",
                "+\tvar rest []byte",
                "+\tout, rest, err = parsePubKey(in, string(algo))",
                "+\tif len(rest) > 0 {",
                "+\t\treturn nil, errors.New(\"ssh: trailing junk in public key\")",
                "+\t}",
                "+",
                "+\treturn out, err",
                "+}",
                "+",
                "+// MarshalAuthorizedKey serializes key for inclusion in an OpenSSH",
                "+// authorized_keys file. The return value ends with newline.",
                "+func MarshalAuthorizedKey(key PublicKey) []byte {",
                "+\tb := &bytes.Buffer{}",
                "+\tb.WriteString(key.Type())",
                "+\tb.WriteByte(' ')",
                "+\te := base64.NewEncoder(base64.StdEncoding, b)",
                "+\te.Write(key.Marshal())",
                "+\te.Close()",
                "+\tb.WriteByte('\\n')",
                "+\treturn b.Bytes()",
                "+}",
                "+",
                "+// PublicKey is an abstraction of different types of public keys.",
                "+type PublicKey interface {",
                "+\t// Type returns the key's type, e.g. \"ssh-rsa\".",
                "+\tType() string",
                "+",
                "+\t// Marshal returns the serialized key data in SSH wire format,",
                "+\t// with the name prefix.",
                "+\tMarshal() []byte",
                "+",
                "+\t// Verify that sig is a signature on the given data using this",
                "+\t// key. This function will hash the data appropriately first.",
                "+\tVerify(data []byte, sig *Signature) error",
                "+}",
                "+",
                "+// CryptoPublicKey, if implemented by a PublicKey,",
                "+// returns the underlying crypto.PublicKey form of the key.",
                "+type CryptoPublicKey interface {",
                "+\tCryptoPublicKey() crypto.PublicKey",
                "+}",
                "+",
                "+// A Signer can create signatures that verify against a public key.",
                "+type Signer interface {",
                "+\t// PublicKey returns an associated PublicKey instance.",
                "+\tPublicKey() PublicKey",
                "+",
                "+\t// Sign returns raw signature for the given data. This method",
                "+\t// will apply the hash specified for the keytype to the data.",
                "+\tSign(rand io.Reader, data []byte) (*Signature, error)",
                "+}",
                "+",
                "+type rsaPublicKey rsa.PublicKey",
                "+",
                "+func (r *rsaPublicKey) Type() string {",
                "+\treturn \"ssh-rsa\"",
                "+}",
                "+",
                "+// parseRSA parses an RSA key according to RFC 4253, section 6.6.",
                "+func parseRSA(in []byte) (out PublicKey, rest []byte, err error) {",
                "+\tvar w struct {",
                "+\t\tE    *big.Int",
                "+\t\tN    *big.Int",
                "+\t\tRest []byte `ssh:\"rest\"`",
                "+\t}",
                "+\tif err := Unmarshal(in, &w); err != nil {",
                "+\t\treturn nil, nil, err",
                "+\t}",
                "+",
                "+\tif w.E.BitLen() > 24 {",
                "+\t\treturn nil, nil, errors.New(\"ssh: exponent too large\")",
                "+\t}",
                "+\te := w.E.Int64()",
                "+\tif e < 3 || e&1 == 0 {",
                "+\t\treturn nil, nil, errors.New(\"ssh: incorrect exponent\")",
                "+\t}",
                "+",
                "+\tvar key rsa.PublicKey",
                "+\tkey.E = int(e)",
                "+\tkey.N = w.N",
                "+\treturn (*rsaPublicKey)(&key), w.Rest, nil",
                "+}",
                "+",
                "+func (r *rsaPublicKey) Marshal() []byte {",
                "+\te := new(big.Int).SetInt64(int64(r.E))",
                "+\t// RSA publickey struct layout should match the struct used by",
                "+\t// parseRSACert in the x/crypto/ssh/agent package.",
                "+\twirekey := struct {",
                "+\t\tName string",
                "+\t\tE    *big.Int",
                "+\t\tN    *big.Int",
                "+\t}{",
                "+\t\tKeyAlgoRSA,",
                "+\t\te,",
                "+\t\tr.N,",
                "+\t}",
                "+\treturn Marshal(&wirekey)",
                "+}",
                "+",
                "+func (r *rsaPublicKey) Verify(data []byte, sig *Signature) error {",
                "+\tif sig.Format != r.Type() {",
                "+\t\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, r.Type())",
                "+\t}",
                "+\th := crypto.SHA1.New()",
                "+\th.Write(data)",
                "+\tdigest := h.Sum(nil)",
                "+\treturn rsa.VerifyPKCS1v15((*rsa.PublicKey)(r), crypto.SHA1, digest, sig.Blob)",
                "+}",
                "+",
                "+func (r *rsaPublicKey) CryptoPublicKey() crypto.PublicKey {",
                "+\treturn (*rsa.PublicKey)(r)",
                "+}",
                "+",
                "+type dsaPublicKey dsa.PublicKey",
                "+",
                "+func (r *dsaPublicKey) Type() string {",
                "+\treturn \"ssh-dss\"",
                "+}",
                "+",
                "+func checkDSAParams(param *dsa.Parameters) error {",
                "+\t// SSH specifies FIPS 186-2, which only provided a single size",
                "+\t// (1024 bits) DSA key. FIPS 186-3 allows for larger key",
                "+\t// sizes, which would confuse SSH.",
                "+\tif l := param.P.BitLen(); l != 1024 {",
                "+\t\treturn fmt.Errorf(\"ssh: unsupported DSA key size %d\", l)",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+// parseDSA parses an DSA key according to RFC 4253, section 6.6.",
                "+func parseDSA(in []byte) (out PublicKey, rest []byte, err error) {",
                "+\tvar w struct {",
                "+\t\tP, Q, G, Y *big.Int",
                "+\t\tRest       []byte `ssh:\"rest\"`",
                "+\t}",
                "+\tif err := Unmarshal(in, &w); err != nil {",
                "+\t\treturn nil, nil, err",
                "+\t}",
                "+",
                "+\tparam := dsa.Parameters{",
                "+\t\tP: w.P,",
                "+\t\tQ: w.Q,",
                "+\t\tG: w.G,",
                "+\t}",
                "+\tif err := checkDSAParams(&param); err != nil {",
                "+\t\treturn nil, nil, err",
                "+\t}",
                "+",
                "+\tkey := &dsaPublicKey{",
                "+\t\tParameters: param,",
                "+\t\tY:          w.Y,",
                "+\t}",
                "+\treturn key, w.Rest, nil",
                "+}",
                "+",
                "+func (k *dsaPublicKey) Marshal() []byte {",
                "+\t// DSA publickey struct layout should match the struct used by",
                "+\t// parseDSACert in the x/crypto/ssh/agent package.",
                "+\tw := struct {",
                "+\t\tName       string",
                "+\t\tP, Q, G, Y *big.Int",
                "+\t}{",
                "+\t\tk.Type(),",
                "+\t\tk.P,",
                "+\t\tk.Q,",
                "+\t\tk.G,",
                "+\t\tk.Y,",
                "+\t}",
                "+",
                "+\treturn Marshal(&w)",
                "+}",
                "+",
                "+func (k *dsaPublicKey) Verify(data []byte, sig *Signature) error {",
                "+\tif sig.Format != k.Type() {",
                "+\t\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, k.Type())",
                "+\t}",
                "+\th := crypto.SHA1.New()",
                "+\th.Write(data)",
                "+\tdigest := h.Sum(nil)",
                "+",
                "+\t// Per RFC 4253, section 6.6,",
                "+\t// The value for 'dss_signature_blob' is encoded as a string containing",
                "+\t// r, followed by s (which are 160-bit integers, without lengths or",
                "+\t// padding, unsigned, and in network byte order).",
                "+\t// For DSS purposes, sig.Blob should be exactly 40 bytes in length.",
                "+\tif len(sig.Blob) != 40 {",
                "+\t\treturn errors.New(\"ssh: DSA signature parse error\")",
                "+\t}",
                "+\tr := new(big.Int).SetBytes(sig.Blob[:20])",
                "+\ts := new(big.Int).SetBytes(sig.Blob[20:])",
                "+\tif dsa.Verify((*dsa.PublicKey)(k), digest, r, s) {",
                "+\t\treturn nil",
                "+\t}",
                "+\treturn errors.New(\"ssh: signature did not verify\")",
                "+}",
                "+",
                "+func (k *dsaPublicKey) CryptoPublicKey() crypto.PublicKey {",
                "+\treturn (*dsa.PublicKey)(k)",
                "+}",
                "+",
                "+type dsaPrivateKey struct {",
                "+\t*dsa.PrivateKey",
                "+}",
                "+",
                "+func (k *dsaPrivateKey) PublicKey() PublicKey {",
                "+\treturn (*dsaPublicKey)(&k.PrivateKey.PublicKey)",
                "+}",
                "+",
                "+func (k *dsaPrivateKey) Sign(rand io.Reader, data []byte) (*Signature, error) {",
                "+\th := crypto.SHA1.New()",
                "+\th.Write(data)",
                "+\tdigest := h.Sum(nil)",
                "+\tr, s, err := dsa.Sign(rand, k.PrivateKey, digest)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tsig := make([]byte, 40)",
                "+\trb := r.Bytes()",
                "+\tsb := s.Bytes()",
                "+",
                "+\tcopy(sig[20-len(rb):20], rb)",
                "+\tcopy(sig[40-len(sb):], sb)",
                "+",
                "+\treturn &Signature{",
                "+\t\tFormat: k.PublicKey().Type(),",
                "+\t\tBlob:   sig,",
                "+\t}, nil",
                "+}",
                "+",
                "+type ecdsaPublicKey ecdsa.PublicKey",
                "+",
                "+func (key *ecdsaPublicKey) Type() string {",
                "+\treturn \"ecdsa-sha2-\" + key.nistID()",
                "+}",
                "+",
                "+func (key *ecdsaPublicKey) nistID() string {",
                "+\tswitch key.Params().BitSize {",
                "+\tcase 256:",
                "+\t\treturn \"nistp256\"",
                "+\tcase 384:",
                "+\t\treturn \"nistp384\"",
                "+\tcase 521:",
                "+\t\treturn \"nistp521\"",
                "+\t}",
                "+\tpanic(\"ssh: unsupported ecdsa key size\")",
                "+}",
                "+",
                "+type ed25519PublicKey ed25519.PublicKey",
                "+",
                "+func (key ed25519PublicKey) Type() string {",
                "+\treturn KeyAlgoED25519",
                "+}",
                "+",
                "+func parseED25519(in []byte) (out PublicKey, rest []byte, err error) {",
                "+\tvar w struct {",
                "+\t\tKeyBytes []byte",
                "+\t\tRest     []byte `ssh:\"rest\"`",
                "+\t}",
                "+",
                "+\tif err := Unmarshal(in, &w); err != nil {",
                "+\t\treturn nil, nil, err",
                "+\t}",
                "+",
                "+\tkey := ed25519.PublicKey(w.KeyBytes)",
                "+",
                "+\treturn (ed25519PublicKey)(key), w.Rest, nil",
                "+}",
                "+",
                "+func (key ed25519PublicKey) Marshal() []byte {",
                "+\tw := struct {",
                "+\t\tName     string",
                "+\t\tKeyBytes []byte",
                "+\t}{",
                "+\t\tKeyAlgoED25519,",
                "+\t\t[]byte(key),",
                "+\t}",
                "+\treturn Marshal(&w)",
                "+}",
                "+",
                "+func (key ed25519PublicKey) Verify(b []byte, sig *Signature) error {",
                "+\tif sig.Format != key.Type() {",
                "+\t\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, key.Type())",
                "+\t}",
                "+",
                "+\tedKey := (ed25519.PublicKey)(key)",
                "+\tif ok := ed25519.Verify(edKey, b, sig.Blob); !ok {",
                "+\t\treturn errors.New(\"ssh: signature did not verify\")",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (k ed25519PublicKey) CryptoPublicKey() crypto.PublicKey {",
                "+\treturn ed25519.PublicKey(k)",
                "+}",
                "+",
                "+func supportedEllipticCurve(curve elliptic.Curve) bool {",
                "+\treturn curve == elliptic.P256() || curve == elliptic.P384() || curve == elliptic.P521()",
                "+}",
                "+",
                "+// ecHash returns the hash to match the given elliptic curve, see RFC",
                "+// 5656, section 6.2.1",
                "+func ecHash(curve elliptic.Curve) crypto.Hash {",
                "+\tbitSize := curve.Params().BitSize",
                "+\tswitch {",
                "+\tcase bitSize <= 256:",
                "+\t\treturn crypto.SHA256",
                "+\tcase bitSize <= 384:",
                "+\t\treturn crypto.SHA384",
                "+\t}",
                "+\treturn crypto.SHA512",
                "+}",
                "+",
                "+// parseECDSA parses an ECDSA key according to RFC 5656, section 3.1.",
                "+func parseECDSA(in []byte) (out PublicKey, rest []byte, err error) {",
                "+\tvar w struct {",
                "+\t\tCurve    string",
                "+\t\tKeyBytes []byte",
                "+\t\tRest     []byte `ssh:\"rest\"`",
                "+\t}",
                "+",
                "+\tif err := Unmarshal(in, &w); err != nil {",
                "+\t\treturn nil, nil, err",
                "+\t}",
                "+",
                "+\tkey := new(ecdsa.PublicKey)",
                "+",
                "+\tswitch w.Curve {",
                "+\tcase \"nistp256\":",
                "+\t\tkey.Curve = elliptic.P256()",
                "+\tcase \"nistp384\":",
                "+\t\tkey.Curve = elliptic.P384()",
                "+\tcase \"nistp521\":",
                "+\t\tkey.Curve = elliptic.P521()",
                "+\tdefault:",
                "+\t\treturn nil, nil, errors.New(\"ssh: unsupported curve\")",
                "+\t}",
                "+",
                "+\tkey.X, key.Y = elliptic.Unmarshal(key.Curve, w.KeyBytes)",
                "+\tif key.X == nil || key.Y == nil {",
                "+\t\treturn nil, nil, errors.New(\"ssh: invalid curve point\")",
                "+\t}",
                "+\treturn (*ecdsaPublicKey)(key), w.Rest, nil",
                "+}",
                "+",
                "+func (key *ecdsaPublicKey) Marshal() []byte {",
                "+\t// See RFC 5656, section 3.1.",
                "+\tkeyBytes := elliptic.Marshal(key.Curve, key.X, key.Y)",
                "+\t// ECDSA publickey struct layout should match the struct used by",
                "+\t// parseECDSACert in the x/crypto/ssh/agent package.",
                "+\tw := struct {",
                "+\t\tName string",
                "+\t\tID   string",
                "+\t\tKey  []byte",
                "+\t}{",
                "+\t\tkey.Type(),",
                "+\t\tkey.nistID(),",
                "+\t\tkeyBytes,",
                "+\t}",
                "+",
                "+\treturn Marshal(&w)",
                "+}",
                "+",
                "+func (key *ecdsaPublicKey) Verify(data []byte, sig *Signature) error {",
                "+\tif sig.Format != key.Type() {",
                "+\t\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, key.Type())",
                "+\t}",
                "+",
                "+\th := ecHash(key.Curve).New()",
                "+\th.Write(data)",
                "+\tdigest := h.Sum(nil)",
                "+",
                "+\t// Per RFC 5656, section 3.1.2,",
                "+\t// The ecdsa_signature_blob value has the following specific encoding:",
                "+\t//    mpint    r",
                "+\t//    mpint    s",
                "+\tvar ecSig struct {",
                "+\t\tR *big.Int",
                "+\t\tS *big.Int",
                "+\t}",
                "+",
                "+\tif err := Unmarshal(sig.Blob, &ecSig); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tif ecdsa.Verify((*ecdsa.PublicKey)(key), digest, ecSig.R, ecSig.S) {",
                "+\t\treturn nil",
                "+\t}",
                "+\treturn errors.New(\"ssh: signature did not verify\")",
                "+}",
                "+",
                "+func (k *ecdsaPublicKey) CryptoPublicKey() crypto.PublicKey {",
                "+\treturn (*ecdsa.PublicKey)(k)",
                "+}",
                "+",
                "+// NewSignerFromKey takes an *rsa.PrivateKey, *dsa.PrivateKey,",
                "+// *ecdsa.PrivateKey or any other crypto.Signer and returns a",
                "+// corresponding Signer instance. ECDSA keys must use P-256, P-384 or",
                "+// P-521. DSA keys must use parameter size L1024N160.",
                "+func NewSignerFromKey(key interface{}) (Signer, error) {",
                "+\tswitch key := key.(type) {",
                "+\tcase crypto.Signer:",
                "+\t\treturn NewSignerFromSigner(key)",
                "+\tcase *dsa.PrivateKey:",
                "+\t\treturn newDSAPrivateKey(key)",
                "+\tdefault:",
                "+\t\treturn nil, fmt.Errorf(\"ssh: unsupported key type %T\", key)",
                "+\t}",
                "+}",
                "+",
                "+func newDSAPrivateKey(key *dsa.PrivateKey) (Signer, error) {",
                "+\tif err := checkDSAParams(&key.PublicKey.Parameters); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn &dsaPrivateKey{key}, nil",
                "+}",
                "+",
                "+type wrappedSigner struct {",
                "+\tsigner crypto.Signer",
                "+\tpubKey PublicKey",
                "+}",
                "+",
                "+// NewSignerFromSigner takes any crypto.Signer implementation and",
                "+// returns a corresponding Signer interface. This can be used, for",
                "+// example, with keys kept in hardware modules.",
                "+func NewSignerFromSigner(signer crypto.Signer) (Signer, error) {",
                "+\tpubKey, err := NewPublicKey(signer.Public())",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn &wrappedSigner{signer, pubKey}, nil",
                "+}",
                "+",
                "+func (s *wrappedSigner) PublicKey() PublicKey {",
                "+\treturn s.pubKey",
                "+}",
                "+",
                "+func (s *wrappedSigner) Sign(rand io.Reader, data []byte) (*Signature, error) {",
                "+\tvar hashFunc crypto.Hash",
                "+",
                "+\tswitch key := s.pubKey.(type) {",
                "+\tcase *rsaPublicKey, *dsaPublicKey:",
                "+\t\thashFunc = crypto.SHA1",
                "+\tcase *ecdsaPublicKey:",
                "+\t\thashFunc = ecHash(key.Curve)",
                "+\tcase ed25519PublicKey:",
                "+\tdefault:",
                "+\t\treturn nil, fmt.Errorf(\"ssh: unsupported key type %T\", key)",
                "+\t}",
                "+",
                "+\tvar digest []byte",
                "+\tif hashFunc != 0 {",
                "+\t\th := hashFunc.New()",
                "+\t\th.Write(data)",
                "+\t\tdigest = h.Sum(nil)",
                "+\t} else {",
                "+\t\tdigest = data",
                "+\t}",
                "+",
                "+\tsignature, err := s.signer.Sign(rand, digest, hashFunc)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\t// crypto.Signer.Sign is expected to return an ASN.1-encoded signature",
                "+\t// for ECDSA and DSA, but that's not the encoding expected by SSH, so",
                "+\t// re-encode.",
                "+\tswitch s.pubKey.(type) {",
                "+\tcase *ecdsaPublicKey, *dsaPublicKey:",
                "+\t\ttype asn1Signature struct {",
                "+\t\t\tR, S *big.Int",
                "+\t\t}",
                "+\t\tasn1Sig := new(asn1Signature)",
                "+\t\t_, err := asn1.Unmarshal(signature, asn1Sig)",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+",
                "+\t\tswitch s.pubKey.(type) {",
                "+\t\tcase *ecdsaPublicKey:",
                "+\t\t\tsignature = Marshal(asn1Sig)",
                "+",
                "+\t\tcase *dsaPublicKey:",
                "+\t\t\tsignature = make([]byte, 40)",
                "+\t\t\tr := asn1Sig.R.Bytes()",
                "+\t\t\ts := asn1Sig.S.Bytes()",
                "+\t\t\tcopy(signature[20-len(r):20], r)",
                "+\t\t\tcopy(signature[40-len(s):40], s)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn &Signature{",
                "+\t\tFormat: s.pubKey.Type(),",
                "+\t\tBlob:   signature,",
                "+\t}, nil",
                "+}",
                "+",
                "+// NewPublicKey takes an *rsa.PublicKey, *dsa.PublicKey, *ecdsa.PublicKey,",
                "+// or ed25519.PublicKey returns a corresponding PublicKey instance.",
                "+// ECDSA keys must use P-256, P-384 or P-521.",
                "+func NewPublicKey(key interface{}) (PublicKey, error) {",
                "+\tswitch key := key.(type) {",
                "+\tcase *rsa.PublicKey:",
                "+\t\treturn (*rsaPublicKey)(key), nil",
                "+\tcase *ecdsa.PublicKey:",
                "+\t\tif !supportedEllipticCurve(key.Curve) {",
                "+\t\t\treturn nil, errors.New(\"ssh: only P-256, P-384 and P-521 EC keys are supported.\")",
                "+\t\t}",
                "+\t\treturn (*ecdsaPublicKey)(key), nil",
                "+\tcase *dsa.PublicKey:",
                "+\t\treturn (*dsaPublicKey)(key), nil",
                "+\tcase ed25519.PublicKey:",
                "+\t\treturn (ed25519PublicKey)(key), nil",
                "+\tdefault:",
                "+\t\treturn nil, fmt.Errorf(\"ssh: unsupported key type %T\", key)",
                "+\t}",
                "+}",
                "+",
                "+// ParsePrivateKey returns a Signer from a PEM encoded private key. It supports",
                "+// the same keys as ParseRawPrivateKey.",
                "+func ParsePrivateKey(pemBytes []byte) (Signer, error) {",
                "+\tkey, err := ParseRawPrivateKey(pemBytes)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn NewSignerFromKey(key)",
                "+}",
                "+",
                "+// ParsePrivateKeyWithPassphrase returns a Signer from a PEM encoded private",
                "+// key and passphrase. It supports the same keys as",
                "+// ParseRawPrivateKeyWithPassphrase.",
                "+func ParsePrivateKeyWithPassphrase(pemBytes, passPhrase []byte) (Signer, error) {",
                "+\tkey, err := ParseRawPrivateKeyWithPassphrase(pemBytes, passPhrase)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn NewSignerFromKey(key)",
                "+}",
                "+",
                "+// encryptedBlock tells whether a private key is",
                "+// encrypted by examining its Proc-Type header",
                "+// for a mention of ENCRYPTED",
                "+// according to RFC 1421 Section 4.6.1.1.",
                "+func encryptedBlock(block *pem.Block) bool {",
                "+\treturn strings.Contains(block.Headers[\"Proc-Type\"], \"ENCRYPTED\")",
                "+}",
                "+",
                "+// ParseRawPrivateKey returns a private key from a PEM encoded private key. It",
                "+// supports RSA (PKCS#1), DSA (OpenSSL), and ECDSA private keys.",
                "+func ParseRawPrivateKey(pemBytes []byte) (interface{}, error) {",
                "+\tblock, _ := pem.Decode(pemBytes)",
                "+\tif block == nil {",
                "+\t\treturn nil, errors.New(\"ssh: no key found\")",
                "+\t}",
                "+",
                "+\tif encryptedBlock(block) {",
                "+\t\treturn nil, errors.New(\"ssh: cannot decode encrypted private keys\")",
                "+\t}",
                "+",
                "+\tswitch block.Type {",
                "+\tcase \"RSA PRIVATE KEY\":",
                "+\t\treturn x509.ParsePKCS1PrivateKey(block.Bytes)",
                "+\tcase \"EC PRIVATE KEY\":",
                "+\t\treturn x509.ParseECPrivateKey(block.Bytes)",
                "+\tcase \"DSA PRIVATE KEY\":",
                "+\t\treturn ParseDSAPrivateKey(block.Bytes)",
                "+\tcase \"OPENSSH PRIVATE KEY\":",
                "+\t\treturn parseOpenSSHPrivateKey(block.Bytes)",
                "+\tdefault:",
                "+\t\treturn nil, fmt.Errorf(\"ssh: unsupported key type %q\", block.Type)",
                "+\t}",
                "+}",
                "+",
                "+// ParseRawPrivateKeyWithPassphrase returns a private key decrypted with",
                "+// passphrase from a PEM encoded private key. If wrong passphrase, return",
                "+// x509.IncorrectPasswordError.",
                "+func ParseRawPrivateKeyWithPassphrase(pemBytes, passPhrase []byte) (interface{}, error) {",
                "+\tblock, _ := pem.Decode(pemBytes)",
                "+\tif block == nil {",
                "+\t\treturn nil, errors.New(\"ssh: no key found\")",
                "+\t}",
                "+\tbuf := block.Bytes",
                "+",
                "+\tif encryptedBlock(block) {",
                "+\t\tif x509.IsEncryptedPEMBlock(block) {",
                "+\t\t\tvar err error",
                "+\t\t\tbuf, err = x509.DecryptPEMBlock(block, passPhrase)",
                "+\t\t\tif err != nil {",
                "+\t\t\t\tif err == x509.IncorrectPasswordError {",
                "+\t\t\t\t\treturn nil, err",
                "+\t\t\t\t}",
                "+\t\t\t\treturn nil, fmt.Errorf(\"ssh: cannot decode encrypted private keys: %v\", err)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tswitch block.Type {",
                "+\tcase \"RSA PRIVATE KEY\":",
                "+\t\treturn x509.ParsePKCS1PrivateKey(buf)",
                "+\tcase \"EC PRIVATE KEY\":",
                "+\t\treturn x509.ParseECPrivateKey(buf)",
                "+\tcase \"DSA PRIVATE KEY\":",
                "+\t\treturn ParseDSAPrivateKey(buf)",
                "+\tcase \"OPENSSH PRIVATE KEY\":",
                "+\t\treturn parseOpenSSHPrivateKey(buf)",
                "+\tdefault:",
                "+\t\treturn nil, fmt.Errorf(\"ssh: unsupported key type %q\", block.Type)",
                "+\t}",
                "+}",
                "+",
                "+// ParseDSAPrivateKey returns a DSA private key from its ASN.1 DER encoding, as",
                "+// specified by the OpenSSL DSA man page.",
                "+func ParseDSAPrivateKey(der []byte) (*dsa.PrivateKey, error) {",
                "+\tvar k struct {",
                "+\t\tVersion int",
                "+\t\tP       *big.Int",
                "+\t\tQ       *big.Int",
                "+\t\tG       *big.Int",
                "+\t\tPub     *big.Int",
                "+\t\tPriv    *big.Int",
                "+\t}",
                "+\trest, err := asn1.Unmarshal(der, &k)",
                "+\tif err != nil {",
                "+\t\treturn nil, errors.New(\"ssh: failed to parse DSA key: \" + err.Error())",
                "+\t}",
                "+\tif len(rest) > 0 {",
                "+\t\treturn nil, errors.New(\"ssh: garbage after DSA key\")",
                "+\t}",
                "+",
                "+\treturn &dsa.PrivateKey{",
                "+\t\tPublicKey: dsa.PublicKey{",
                "+\t\t\tParameters: dsa.Parameters{",
                "+\t\t\t\tP: k.P,",
                "+\t\t\t\tQ: k.Q,",
                "+\t\t\t\tG: k.G,",
                "+\t\t\t},",
                "+\t\t\tY: k.Pub,",
                "+\t\t},",
                "+\t\tX: k.Priv,",
                "+\t}, nil",
                "+}",
                "+",
                "+// Implemented based on the documentation at",
                "+// https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.key",
                "+func parseOpenSSHPrivateKey(key []byte) (crypto.PrivateKey, error) {",
                "+\tmagic := append([]byte(\"openssh-key-v1\"), 0)",
                "+\tif !bytes.Equal(magic, key[0:len(magic)]) {",
                "+\t\treturn nil, errors.New(\"ssh: invalid openssh private key format\")",
                "+\t}",
                "+\tremaining := key[len(magic):]",
                "+",
                "+\tvar w struct {",
                "+\t\tCipherName   string",
                "+\t\tKdfName      string",
                "+\t\tKdfOpts      string",
                "+\t\tNumKeys      uint32",
                "+\t\tPubKey       []byte",
                "+\t\tPrivKeyBlock []byte",
                "+\t}",
                "+",
                "+\tif err := Unmarshal(remaining, &w); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tif w.KdfName != \"none\" || w.CipherName != \"none\" {",
                "+\t\treturn nil, errors.New(\"ssh: cannot decode encrypted private keys\")",
                "+\t}",
                "+",
                "+\tpk1 := struct {",
                "+\t\tCheck1  uint32",
                "+\t\tCheck2  uint32",
                "+\t\tKeytype string",
                "+\t\tRest    []byte `ssh:\"rest\"`",
                "+\t}{}",
                "+",
                "+\tif err := Unmarshal(w.PrivKeyBlock, &pk1); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tif pk1.Check1 != pk1.Check2 {",
                "+\t\treturn nil, errors.New(\"ssh: checkint mismatch\")",
                "+\t}",
                "+",
                "+\t// we only handle ed25519 and rsa keys currently",
                "+\tswitch pk1.Keytype {",
                "+\tcase KeyAlgoRSA:",
                "+\t\t// https://github.com/openssh/openssh-portable/blob/master/sshkey.c#L2760-L2773",
                "+\t\tkey := struct {",
                "+\t\t\tN       *big.Int",
                "+\t\t\tE       *big.Int",
                "+\t\t\tD       *big.Int",
                "+\t\t\tIqmp    *big.Int",
                "+\t\t\tP       *big.Int",
                "+\t\t\tQ       *big.Int",
                "+\t\t\tComment string",
                "+\t\t\tPad     []byte `ssh:\"rest\"`",
                "+\t\t}{}",
                "+",
                "+\t\tif err := Unmarshal(pk1.Rest, &key); err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+",
                "+\t\tfor i, b := range key.Pad {",
                "+\t\t\tif int(b) != i+1 {",
                "+\t\t\t\treturn nil, errors.New(\"ssh: padding not as expected\")",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tpk := &rsa.PrivateKey{",
                "+\t\t\tPublicKey: rsa.PublicKey{",
                "+\t\t\t\tN: key.N,",
                "+\t\t\t\tE: int(key.E.Int64()),",
                "+\t\t\t},",
                "+\t\t\tD:      key.D,",
                "+\t\t\tPrimes: []*big.Int{key.P, key.Q},",
                "+\t\t}",
                "+",
                "+\t\tif err := pk.Validate(); err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+",
                "+\t\tpk.Precompute()",
                "+",
                "+\t\treturn pk, nil",
                "+\tcase KeyAlgoED25519:",
                "+\t\tkey := struct {",
                "+\t\t\tPub     []byte",
                "+\t\t\tPriv    []byte",
                "+\t\t\tComment string",
                "+\t\t\tPad     []byte `ssh:\"rest\"`",
                "+\t\t}{}",
                "+",
                "+\t\tif err := Unmarshal(pk1.Rest, &key); err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+",
                "+\t\tif len(key.Priv) != ed25519.PrivateKeySize {",
                "+\t\t\treturn nil, errors.New(\"ssh: private key unexpected length\")",
                "+\t\t}",
                "+",
                "+\t\tfor i, b := range key.Pad {",
                "+\t\t\tif int(b) != i+1 {",
                "+\t\t\t\treturn nil, errors.New(\"ssh: padding not as expected\")",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tpk := ed25519.PrivateKey(make([]byte, ed25519.PrivateKeySize))",
                "+\t\tcopy(pk, key.Priv)",
                "+\t\treturn &pk, nil",
                "+\tdefault:",
                "+\t\treturn nil, errors.New(\"ssh: unhandled key type\")",
                "+\t}",
                "+}",
                "+",
                "+// FingerprintLegacyMD5 returns the user presentation of the key's",
                "+// fingerprint as described by RFC 4716 section 4.",
                "+func FingerprintLegacyMD5(pubKey PublicKey) string {",
                "+\tmd5sum := md5.Sum(pubKey.Marshal())",
                "+\thexarray := make([]string, len(md5sum))",
                "+\tfor i, c := range md5sum {",
                "+\t\thexarray[i] = hex.EncodeToString([]byte{c})",
                "+\t}",
                "+\treturn strings.Join(hexarray, \":\")",
                "+}",
                "+",
                "+// FingerprintSHA256 returns the user presentation of the key's",
                "+// fingerprint as unpadded base64 encoded sha256 hash.",
                "+// This format was introduced from OpenSSH 6.8.",
                "+// https://www.openssh.com/txt/release-6.8",
                "+// https://tools.ietf.org/html/rfc4648#section-3.2 (unpadded base64 encoding)",
                "+func FingerprintSHA256(pubKey PublicKey) string {",
                "+\tsha256sum := sha256.Sum256(pubKey.Marshal())",
                "+\thash := base64.RawStdEncoding.EncodeToString(sha256sum[:])",
                "+\treturn \"SHA256:\" + hash",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/mac.go b/vendor/golang.org/x/crypto/ssh/mac.go",
                "new file mode 100644",
                "index 000000000..c07a06285",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/mac.go",
                "@@ -0,0 +1,61 @@",
                "+// Copyright 2012 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+// Message authentication support",
                "+",
                "+import (",
                "+\t\"crypto/hmac\"",
                "+\t\"crypto/sha1\"",
                "+\t\"crypto/sha256\"",
                "+\t\"hash\"",
                "+)",
                "+",
                "+type macMode struct {",
                "+\tkeySize int",
                "+\tetm     bool",
                "+\tnew     func(key []byte) hash.Hash",
                "+}",
                "+",
                "+// truncatingMAC wraps around a hash.Hash and truncates the output digest to",
                "+// a given size.",
                "+type truncatingMAC struct {",
                "+\tlength int",
                "+\thmac   hash.Hash",
                "+}",
                "+",
                "+func (t truncatingMAC) Write(data []byte) (int, error) {",
                "+\treturn t.hmac.Write(data)",
                "+}",
                "+",
                "+func (t truncatingMAC) Sum(in []byte) []byte {",
                "+\tout := t.hmac.Sum(in)",
                "+\treturn out[:len(in)+t.length]",
                "+}",
                "+",
                "+func (t truncatingMAC) Reset() {",
                "+\tt.hmac.Reset()",
                "+}",
                "+",
                "+func (t truncatingMAC) Size() int {",
                "+\treturn t.length",
                "+}",
                "+",
                "+func (t truncatingMAC) BlockSize() int { return t.hmac.BlockSize() }",
                "+",
                "+var macModes = map[string]*macMode{",
                "+\t\"hmac-sha2-256-etm@openssh.com\": {32, true, func(key []byte) hash.Hash {",
                "+\t\treturn hmac.New(sha256.New, key)",
                "+\t}},",
                "+\t\"hmac-sha2-256\": {32, false, func(key []byte) hash.Hash {",
                "+\t\treturn hmac.New(sha256.New, key)",
                "+\t}},",
                "+\t\"hmac-sha1\": {20, false, func(key []byte) hash.Hash {",
                "+\t\treturn hmac.New(sha1.New, key)",
                "+\t}},",
                "+\t\"hmac-sha1-96\": {20, false, func(key []byte) hash.Hash {",
                "+\t\treturn truncatingMAC{12, hmac.New(sha1.New, key)}",
                "+\t}},",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/messages.go b/vendor/golang.org/x/crypto/ssh/messages.go",
                "new file mode 100644",
                "index 000000000..e6ecd3afa",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/messages.go",
                "@@ -0,0 +1,758 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"encoding/binary\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"math/big\"",
                "+\t\"reflect\"",
                "+\t\"strconv\"",
                "+\t\"strings\"",
                "+)",
                "+",
                "+// These are SSH message type numbers. They are scattered around several",
                "+// documents but many were taken from [SSH-PARAMETERS].",
                "+const (",
                "+\tmsgIgnore        = 2",
                "+\tmsgUnimplemented = 3",
                "+\tmsgDebug         = 4",
                "+\tmsgNewKeys       = 21",
                "+",
                "+\t// Standard authentication messages",
                "+\tmsgUserAuthSuccess = 52",
                "+\tmsgUserAuthBanner  = 53",
                "+)",
                "+",
                "+// SSH messages:",
                "+//",
                "+// These structures mirror the wire format of the corresponding SSH messages.",
                "+// They are marshaled using reflection with the marshal and unmarshal functions",
                "+// in this file. The only wrinkle is that a final member of type []byte with a",
                "+// ssh tag of \"rest\" receives the remainder of a packet when unmarshaling.",
                "+",
                "+// See RFC 4253, section 11.1.",
                "+const msgDisconnect = 1",
                "+",
                "+// disconnectMsg is the message that signals a disconnect. It is also",
                "+// the error type returned from mux.Wait()",
                "+type disconnectMsg struct {",
                "+\tReason   uint32 `sshtype:\"1\"`",
                "+\tMessage  string",
                "+\tLanguage string",
                "+}",
                "+",
                "+func (d *disconnectMsg) Error() string {",
                "+\treturn fmt.Sprintf(\"ssh: disconnect, reason %d: %s\", d.Reason, d.Message)",
                "+}",
                "+",
                "+// See RFC 4253, section 7.1.",
                "+const msgKexInit = 20",
                "+",
                "+type kexInitMsg struct {",
                "+\tCookie                  [16]byte `sshtype:\"20\"`",
                "+\tKexAlgos                []string",
                "+\tServerHostKeyAlgos      []string",
                "+\tCiphersClientServer     []string",
                "+\tCiphersServerClient     []string",
                "+\tMACsClientServer        []string",
                "+\tMACsServerClient        []string",
                "+\tCompressionClientServer []string",
                "+\tCompressionServerClient []string",
                "+\tLanguagesClientServer   []string",
                "+\tLanguagesServerClient   []string",
                "+\tFirstKexFollows         bool",
                "+\tReserved                uint32",
                "+}",
                "+",
                "+// See RFC 4253, section 8.",
                "+",
                "+// Diffie-Helman",
                "+const msgKexDHInit = 30",
                "+",
                "+type kexDHInitMsg struct {",
                "+\tX *big.Int `sshtype:\"30\"`",
                "+}",
                "+",
                "+const msgKexECDHInit = 30",
                "+",
                "+type kexECDHInitMsg struct {",
                "+\tClientPubKey []byte `sshtype:\"30\"`",
                "+}",
                "+",
                "+const msgKexECDHReply = 31",
                "+",
                "+type kexECDHReplyMsg struct {",
                "+\tHostKey         []byte `sshtype:\"31\"`",
                "+\tEphemeralPubKey []byte",
                "+\tSignature       []byte",
                "+}",
                "+",
                "+const msgKexDHReply = 31",
                "+",
                "+type kexDHReplyMsg struct {",
                "+\tHostKey   []byte `sshtype:\"31\"`",
                "+\tY         *big.Int",
                "+\tSignature []byte",
                "+}",
                "+",
                "+// See RFC 4253, section 10.",
                "+const msgServiceRequest = 5",
                "+",
                "+type serviceRequestMsg struct {",
                "+\tService string `sshtype:\"5\"`",
                "+}",
                "+",
                "+// See RFC 4253, section 10.",
                "+const msgServiceAccept = 6",
                "+",
                "+type serviceAcceptMsg struct {",
                "+\tService string `sshtype:\"6\"`",
                "+}",
                "+",
                "+// See RFC 4252, section 5.",
                "+const msgUserAuthRequest = 50",
                "+",
                "+type userAuthRequestMsg struct {",
                "+\tUser    string `sshtype:\"50\"`",
                "+\tService string",
                "+\tMethod  string",
                "+\tPayload []byte `ssh:\"rest\"`",
                "+}",
                "+",
                "+// Used for debug printouts of packets.",
                "+type userAuthSuccessMsg struct {",
                "+}",
                "+",
                "+// See RFC 4252, section 5.1",
                "+const msgUserAuthFailure = 51",
                "+",
                "+type userAuthFailureMsg struct {",
                "+\tMethods        []string `sshtype:\"51\"`",
                "+\tPartialSuccess bool",
                "+}",
                "+",
                "+// See RFC 4256, section 3.2",
                "+const msgUserAuthInfoRequest = 60",
                "+const msgUserAuthInfoResponse = 61",
                "+",
                "+type userAuthInfoRequestMsg struct {",
                "+\tUser               string `sshtype:\"60\"`",
                "+\tInstruction        string",
                "+\tDeprecatedLanguage string",
                "+\tNumPrompts         uint32",
                "+\tPrompts            []byte `ssh:\"rest\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 5.1.",
                "+const msgChannelOpen = 90",
                "+",
                "+type channelOpenMsg struct {",
                "+\tChanType         string `sshtype:\"90\"`",
                "+\tPeersId          uint32",
                "+\tPeersWindow      uint32",
                "+\tMaxPacketSize    uint32",
                "+\tTypeSpecificData []byte `ssh:\"rest\"`",
                "+}",
                "+",
                "+const msgChannelExtendedData = 95",
                "+const msgChannelData = 94",
                "+",
                "+// Used for debug print outs of packets.",
                "+type channelDataMsg struct {",
                "+\tPeersId uint32 `sshtype:\"94\"`",
                "+\tLength  uint32",
                "+\tRest    []byte `ssh:\"rest\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 5.1.",
                "+const msgChannelOpenConfirm = 91",
                "+",
                "+type channelOpenConfirmMsg struct {",
                "+\tPeersId          uint32 `sshtype:\"91\"`",
                "+\tMyId             uint32",
                "+\tMyWindow         uint32",
                "+\tMaxPacketSize    uint32",
                "+\tTypeSpecificData []byte `ssh:\"rest\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 5.1.",
                "+const msgChannelOpenFailure = 92",
                "+",
                "+type channelOpenFailureMsg struct {",
                "+\tPeersId  uint32 `sshtype:\"92\"`",
                "+\tReason   RejectionReason",
                "+\tMessage  string",
                "+\tLanguage string",
                "+}",
                "+",
                "+const msgChannelRequest = 98",
                "+",
                "+type channelRequestMsg struct {",
                "+\tPeersId             uint32 `sshtype:\"98\"`",
                "+\tRequest             string",
                "+\tWantReply           bool",
                "+\tRequestSpecificData []byte `ssh:\"rest\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 5.4.",
                "+const msgChannelSuccess = 99",
                "+",
                "+type channelRequestSuccessMsg struct {",
                "+\tPeersId uint32 `sshtype:\"99\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 5.4.",
                "+const msgChannelFailure = 100",
                "+",
                "+type channelRequestFailureMsg struct {",
                "+\tPeersId uint32 `sshtype:\"100\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 5.3",
                "+const msgChannelClose = 97",
                "+",
                "+type channelCloseMsg struct {",
                "+\tPeersId uint32 `sshtype:\"97\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 5.3",
                "+const msgChannelEOF = 96",
                "+",
                "+type channelEOFMsg struct {",
                "+\tPeersId uint32 `sshtype:\"96\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 4",
                "+const msgGlobalRequest = 80",
                "+",
                "+type globalRequestMsg struct {",
                "+\tType      string `sshtype:\"80\"`",
                "+\tWantReply bool",
                "+\tData      []byte `ssh:\"rest\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 4",
                "+const msgRequestSuccess = 81",
                "+",
                "+type globalRequestSuccessMsg struct {",
                "+\tData []byte `ssh:\"rest\" sshtype:\"81\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 4",
                "+const msgRequestFailure = 82",
                "+",
                "+type globalRequestFailureMsg struct {",
                "+\tData []byte `ssh:\"rest\" sshtype:\"82\"`",
                "+}",
                "+",
                "+// See RFC 4254, section 5.2",
                "+const msgChannelWindowAdjust = 93",
                "+",
                "+type windowAdjustMsg struct {",
                "+\tPeersId         uint32 `sshtype:\"93\"`",
                "+\tAdditionalBytes uint32",
                "+}",
                "+",
                "+// See RFC 4252, section 7",
                "+const msgUserAuthPubKeyOk = 60",
                "+",
                "+type userAuthPubKeyOkMsg struct {",
                "+\tAlgo   string `sshtype:\"60\"`",
                "+\tPubKey []byte",
                "+}",
                "+",
                "+// typeTags returns the possible type bytes for the given reflect.Type, which",
                "+// should be a struct. The possible values are separated by a '|' character.",
                "+func typeTags(structType reflect.Type) (tags []byte) {",
                "+\ttagStr := structType.Field(0).Tag.Get(\"sshtype\")",
                "+",
                "+\tfor _, tag := range strings.Split(tagStr, \"|\") {",
                "+\t\ti, err := strconv.Atoi(tag)",
                "+\t\tif err == nil {",
                "+\t\t\ttags = append(tags, byte(i))",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn tags",
                "+}",
                "+",
                "+func fieldError(t reflect.Type, field int, problem string) error {",
                "+\tif problem != \"\" {",
                "+\t\tproblem = \": \" + problem",
                "+\t}",
                "+\treturn fmt.Errorf(\"ssh: unmarshal error for field %s of type %s%s\", t.Field(field).Name, t.Name(), problem)",
                "+}",
                "+",
                "+var errShortRead = errors.New(\"ssh: short read\")",
                "+",
                "+// Unmarshal parses data in SSH wire format into a structure. The out",
                "+// argument should be a pointer to struct. If the first member of the",
                "+// struct has the \"sshtype\" tag set to a '|'-separated set of numbers",
                "+// in decimal, the packet must start with one of those numbers. In",
                "+// case of error, Unmarshal returns a ParseError or",
                "+// UnexpectedMessageError.",
                "+func Unmarshal(data []byte, out interface{}) error {",
                "+\tv := reflect.ValueOf(out).Elem()",
                "+\tstructType := v.Type()",
                "+\texpectedTypes := typeTags(structType)",
                "+",
                "+\tvar expectedType byte",
                "+\tif len(expectedTypes) > 0 {",
                "+\t\texpectedType = expectedTypes[0]",
                "+\t}",
                "+",
                "+\tif len(data) == 0 {",
                "+\t\treturn parseError(expectedType)",
                "+\t}",
                "+",
                "+\tif len(expectedTypes) > 0 {",
                "+\t\tgoodType := false",
                "+\t\tfor _, e := range expectedTypes {",
                "+\t\t\tif e > 0 && data[0] == e {",
                "+\t\t\t\tgoodType = true",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif !goodType {",
                "+\t\t\treturn fmt.Errorf(\"ssh: unexpected message type %d (expected one of %v)\", data[0], expectedTypes)",
                "+\t\t}",
                "+\t\tdata = data[1:]",
                "+\t}",
                "+",
                "+\tvar ok bool",
                "+\tfor i := 0; i < v.NumField(); i++ {",
                "+\t\tfield := v.Field(i)",
                "+\t\tt := field.Type()",
                "+\t\tswitch t.Kind() {",
                "+\t\tcase reflect.Bool:",
                "+\t\t\tif len(data) < 1 {",
                "+\t\t\t\treturn errShortRead",
                "+\t\t\t}",
                "+\t\t\tfield.SetBool(data[0] != 0)",
                "+\t\t\tdata = data[1:]",
                "+\t\tcase reflect.Array:",
                "+\t\t\tif t.Elem().Kind() != reflect.Uint8 {",
                "+\t\t\t\treturn fieldError(structType, i, \"array of unsupported type\")",
                "+\t\t\t}",
                "+\t\t\tif len(data) < t.Len() {",
                "+\t\t\t\treturn errShortRead",
                "+\t\t\t}",
                "+\t\t\tfor j, n := 0, t.Len(); j < n; j++ {",
                "+\t\t\t\tfield.Index(j).Set(reflect.ValueOf(data[j]))",
                "+\t\t\t}",
                "+\t\t\tdata = data[t.Len():]",
                "+\t\tcase reflect.Uint64:",
                "+\t\t\tvar u64 uint64",
                "+\t\t\tif u64, data, ok = parseUint64(data); !ok {",
                "+\t\t\t\treturn errShortRead",
                "+\t\t\t}",
                "+\t\t\tfield.SetUint(u64)",
                "+\t\tcase reflect.Uint32:",
                "+\t\t\tvar u32 uint32",
                "+\t\t\tif u32, data, ok = parseUint32(data); !ok {",
                "+\t\t\t\treturn errShortRead",
                "+\t\t\t}",
                "+\t\t\tfield.SetUint(uint64(u32))",
                "+\t\tcase reflect.Uint8:",
                "+\t\t\tif len(data) < 1 {",
                "+\t\t\t\treturn errShortRead",
                "+\t\t\t}",
                "+\t\t\tfield.SetUint(uint64(data[0]))",
                "+\t\t\tdata = data[1:]",
                "+\t\tcase reflect.String:",
                "+\t\t\tvar s []byte",
                "+\t\t\tif s, data, ok = parseString(data); !ok {",
                "+\t\t\t\treturn fieldError(structType, i, \"\")",
                "+\t\t\t}",
                "+\t\t\tfield.SetString(string(s))",
                "+\t\tcase reflect.Slice:",
                "+\t\t\tswitch t.Elem().Kind() {",
                "+\t\t\tcase reflect.Uint8:",
                "+\t\t\t\tif structType.Field(i).Tag.Get(\"ssh\") == \"rest\" {",
                "+\t\t\t\t\tfield.Set(reflect.ValueOf(data))",
                "+\t\t\t\t\tdata = nil",
                "+\t\t\t\t} else {",
                "+\t\t\t\t\tvar s []byte",
                "+\t\t\t\t\tif s, data, ok = parseString(data); !ok {",
                "+\t\t\t\t\t\treturn errShortRead",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tfield.Set(reflect.ValueOf(s))",
                "+\t\t\t\t}",
                "+\t\t\tcase reflect.String:",
                "+\t\t\t\tvar nl []string",
                "+\t\t\t\tif nl, data, ok = parseNameList(data); !ok {",
                "+\t\t\t\t\treturn errShortRead",
                "+\t\t\t\t}",
                "+\t\t\t\tfield.Set(reflect.ValueOf(nl))",
                "+\t\t\tdefault:",
                "+\t\t\t\treturn fieldError(structType, i, \"slice of unsupported type\")",
                "+\t\t\t}",
                "+\t\tcase reflect.Ptr:",
                "+\t\t\tif t == bigIntType {",
                "+\t\t\t\tvar n *big.Int",
                "+\t\t\t\tif n, data, ok = parseInt(data); !ok {",
                "+\t\t\t\t\treturn errShortRead",
                "+\t\t\t\t}",
                "+\t\t\t\tfield.Set(reflect.ValueOf(n))",
                "+\t\t\t} else {",
                "+\t\t\t\treturn fieldError(structType, i, \"pointer to unsupported type\")",
                "+\t\t\t}",
                "+\t\tdefault:",
                "+\t\t\treturn fieldError(structType, i, fmt.Sprintf(\"unsupported type: %v\", t))",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif len(data) != 0 {",
                "+\t\treturn parseError(expectedType)",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+// Marshal serializes the message in msg to SSH wire format.  The msg",
                "+// argument should be a struct or pointer to struct. If the first",
                "+// member has the \"sshtype\" tag set to a number in decimal, that",
                "+// number is prepended to the result. If the last of member has the",
                "+// \"ssh\" tag set to \"rest\", its contents are appended to the output.",
                "+func Marshal(msg interface{}) []byte {",
                "+\tout := make([]byte, 0, 64)",
                "+\treturn marshalStruct(out, msg)",
                "+}",
                "+",
                "+func marshalStruct(out []byte, msg interface{}) []byte {",
                "+\tv := reflect.Indirect(reflect.ValueOf(msg))",
                "+\tmsgTypes := typeTags(v.Type())",
                "+\tif len(msgTypes) > 0 {",
                "+\t\tout = append(out, msgTypes[0])",
                "+\t}",
                "+",
                "+\tfor i, n := 0, v.NumField(); i < n; i++ {",
                "+\t\tfield := v.Field(i)",
                "+\t\tswitch t := field.Type(); t.Kind() {",
                "+\t\tcase reflect.Bool:",
                "+\t\t\tvar v uint8",
                "+\t\t\tif field.Bool() {",
                "+\t\t\t\tv = 1",
                "+\t\t\t}",
                "+\t\t\tout = append(out, v)",
                "+\t\tcase reflect.Array:",
                "+\t\t\tif t.Elem().Kind() != reflect.Uint8 {",
                "+\t\t\t\tpanic(fmt.Sprintf(\"array of non-uint8 in field %d: %T\", i, field.Interface()))",
                "+\t\t\t}",
                "+\t\t\tfor j, l := 0, t.Len(); j < l; j++ {",
                "+\t\t\t\tout = append(out, uint8(field.Index(j).Uint()))",
                "+\t\t\t}",
                "+\t\tcase reflect.Uint32:",
                "+\t\t\tout = appendU32(out, uint32(field.Uint()))",
                "+\t\tcase reflect.Uint64:",
                "+\t\t\tout = appendU64(out, uint64(field.Uint()))",
                "+\t\tcase reflect.Uint8:",
                "+\t\t\tout = append(out, uint8(field.Uint()))",
                "+\t\tcase reflect.String:",
                "+\t\t\ts := field.String()",
                "+\t\t\tout = appendInt(out, len(s))",
                "+\t\t\tout = append(out, s...)",
                "+\t\tcase reflect.Slice:",
                "+\t\t\tswitch t.Elem().Kind() {",
                "+\t\t\tcase reflect.Uint8:",
                "+\t\t\t\tif v.Type().Field(i).Tag.Get(\"ssh\") != \"rest\" {",
                "+\t\t\t\t\tout = appendInt(out, field.Len())",
                "+\t\t\t\t}",
                "+\t\t\t\tout = append(out, field.Bytes()...)",
                "+\t\t\tcase reflect.String:",
                "+\t\t\t\toffset := len(out)",
                "+\t\t\t\tout = appendU32(out, 0)",
                "+\t\t\t\tif n := field.Len(); n > 0 {",
                "+\t\t\t\t\tfor j := 0; j < n; j++ {",
                "+\t\t\t\t\t\tf := field.Index(j)",
                "+\t\t\t\t\t\tif j != 0 {",
                "+\t\t\t\t\t\t\tout = append(out, ',')",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t\tout = append(out, f.String()...)",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\t// overwrite length value",
                "+\t\t\t\t\tbinary.BigEndian.PutUint32(out[offset:], uint32(len(out)-offset-4))",
                "+\t\t\t\t}",
                "+\t\t\tdefault:",
                "+\t\t\t\tpanic(fmt.Sprintf(\"slice of unknown type in field %d: %T\", i, field.Interface()))",
                "+\t\t\t}",
                "+\t\tcase reflect.Ptr:",
                "+\t\t\tif t == bigIntType {",
                "+\t\t\t\tvar n *big.Int",
                "+\t\t\t\tnValue := reflect.ValueOf(&n)",
                "+\t\t\t\tnValue.Elem().Set(field)",
                "+\t\t\t\tneeded := intLength(n)",
                "+\t\t\t\toldLength := len(out)",
                "+",
                "+\t\t\t\tif cap(out)-len(out) < needed {",
                "+\t\t\t\t\tnewOut := make([]byte, len(out), 2*(len(out)+needed))",
                "+\t\t\t\t\tcopy(newOut, out)",
                "+\t\t\t\t\tout = newOut",
                "+\t\t\t\t}",
                "+\t\t\t\tout = out[:oldLength+needed]",
                "+\t\t\t\tmarshalInt(out[oldLength:], n)",
                "+\t\t\t} else {",
                "+\t\t\t\tpanic(fmt.Sprintf(\"pointer to unknown type in field %d: %T\", i, field.Interface()))",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn out",
                "+}",
                "+",
                "+var bigOne = big.NewInt(1)",
                "+",
                "+func parseString(in []byte) (out, rest []byte, ok bool) {",
                "+\tif len(in) < 4 {",
                "+\t\treturn",
                "+\t}",
                "+\tlength := binary.BigEndian.Uint32(in)",
                "+\tin = in[4:]",
                "+\tif uint32(len(in)) < length {",
                "+\t\treturn",
                "+\t}",
                "+\tout = in[:length]",
                "+\trest = in[length:]",
                "+\tok = true",
                "+\treturn",
                "+}",
                "+",
                "+var (",
                "+\tcomma         = []byte{','}",
                "+\temptyNameList = []string{}",
                "+)",
                "+",
                "+func parseNameList(in []byte) (out []string, rest []byte, ok bool) {",
                "+\tcontents, rest, ok := parseString(in)",
                "+\tif !ok {",
                "+\t\treturn",
                "+\t}",
                "+\tif len(contents) == 0 {",
                "+\t\tout = emptyNameList",
                "+\t\treturn",
                "+\t}",
                "+\tparts := bytes.Split(contents, comma)",
                "+\tout = make([]string, len(parts))",
                "+\tfor i, part := range parts {",
                "+\t\tout[i] = string(part)",
                "+\t}",
                "+\treturn",
                "+}",
                "+",
                "+func parseInt(in []byte) (out *big.Int, rest []byte, ok bool) {",
                "+\tcontents, rest, ok := parseString(in)",
                "+\tif !ok {",
                "+\t\treturn",
                "+\t}",
                "+\tout = new(big.Int)",
                "+",
                "+\tif len(contents) > 0 && contents[0]&0x80 == 0x80 {",
                "+\t\t// This is a negative number",
                "+\t\tnotBytes := make([]byte, len(contents))",
                "+\t\tfor i := range notBytes {",
                "+\t\t\tnotBytes[i] = ^contents[i]",
                "+\t\t}",
                "+\t\tout.SetBytes(notBytes)",
                "+\t\tout.Add(out, bigOne)",
                "+\t\tout.Neg(out)",
                "+\t} else {",
                "+\t\t// Positive number",
                "+\t\tout.SetBytes(contents)",
                "+\t}",
                "+\tok = true",
                "+\treturn",
                "+}",
                "+",
                "+func parseUint32(in []byte) (uint32, []byte, bool) {",
                "+\tif len(in) < 4 {",
                "+\t\treturn 0, nil, false",
                "+\t}",
                "+\treturn binary.BigEndian.Uint32(in), in[4:], true",
                "+}",
                "+",
                "+func parseUint64(in []byte) (uint64, []byte, bool) {",
                "+\tif len(in) < 8 {",
                "+\t\treturn 0, nil, false",
                "+\t}",
                "+\treturn binary.BigEndian.Uint64(in), in[8:], true",
                "+}",
                "+",
                "+func intLength(n *big.Int) int {",
                "+\tlength := 4 /* length bytes */",
                "+\tif n.Sign() < 0 {",
                "+\t\tnMinus1 := new(big.Int).Neg(n)",
                "+\t\tnMinus1.Sub(nMinus1, bigOne)",
                "+\t\tbitLen := nMinus1.BitLen()",
                "+\t\tif bitLen%8 == 0 {",
                "+\t\t\t// The number will need 0xff padding",
                "+\t\t\tlength++",
                "+\t\t}",
                "+\t\tlength += (bitLen + 7) / 8",
                "+\t} else if n.Sign() == 0 {",
                "+\t\t// A zero is the zero length string",
                "+\t} else {",
                "+\t\tbitLen := n.BitLen()",
                "+\t\tif bitLen%8 == 0 {",
                "+\t\t\t// The number will need 0x00 padding",
                "+\t\t\tlength++",
                "+\t\t}",
                "+\t\tlength += (bitLen + 7) / 8",
                "+\t}",
                "+",
                "+\treturn length",
                "+}",
                "+",
                "+func marshalUint32(to []byte, n uint32) []byte {",
                "+\tbinary.BigEndian.PutUint32(to, n)",
                "+\treturn to[4:]",
                "+}",
                "+",
                "+func marshalUint64(to []byte, n uint64) []byte {",
                "+\tbinary.BigEndian.PutUint64(to, n)",
                "+\treturn to[8:]",
                "+}",
                "+",
                "+func marshalInt(to []byte, n *big.Int) []byte {",
                "+\tlengthBytes := to",
                "+\tto = to[4:]",
                "+\tlength := 0",
                "+",
                "+\tif n.Sign() < 0 {",
                "+\t\t// A negative number has to be converted to two's-complement",
                "+\t\t// form. So we'll subtract 1 and invert. If the",
                "+\t\t// most-significant-bit isn't set then we'll need to pad the",
                "+\t\t// beginning with 0xff in order to keep the number negative.",
                "+\t\tnMinus1 := new(big.Int).Neg(n)",
                "+\t\tnMinus1.Sub(nMinus1, bigOne)",
                "+\t\tbytes := nMinus1.Bytes()",
                "+\t\tfor i := range bytes {",
                "+\t\t\tbytes[i] ^= 0xff",
                "+\t\t}",
                "+\t\tif len(bytes) == 0 || bytes[0]&0x80 == 0 {",
                "+\t\t\tto[0] = 0xff",
                "+\t\t\tto = to[1:]",
                "+\t\t\tlength++",
                "+\t\t}",
                "+\t\tnBytes := copy(to, bytes)",
                "+\t\tto = to[nBytes:]",
                "+\t\tlength += nBytes",
                "+\t} else if n.Sign() == 0 {",
                "+\t\t// A zero is the zero length string",
                "+\t} else {",
                "+\t\tbytes := n.Bytes()",
                "+\t\tif len(bytes) > 0 && bytes[0]&0x80 != 0 {",
                "+\t\t\t// We'll have to pad this with a 0x00 in order to",
                "+\t\t\t// stop it looking like a negative number.",
                "+\t\t\tto[0] = 0",
                "+\t\t\tto = to[1:]",
                "+\t\t\tlength++",
                "+\t\t}",
                "+\t\tnBytes := copy(to, bytes)",
                "+\t\tto = to[nBytes:]",
                "+\t\tlength += nBytes",
                "+\t}",
                "+",
                "+\tlengthBytes[0] = byte(length >> 24)",
                "+\tlengthBytes[1] = byte(length >> 16)",
                "+\tlengthBytes[2] = byte(length >> 8)",
                "+\tlengthBytes[3] = byte(length)",
                "+\treturn to",
                "+}",
                "+",
                "+func writeInt(w io.Writer, n *big.Int) {",
                "+\tlength := intLength(n)",
                "+\tbuf := make([]byte, length)",
                "+\tmarshalInt(buf, n)",
                "+\tw.Write(buf)",
                "+}",
                "+",
                "+func writeString(w io.Writer, s []byte) {",
                "+\tvar lengthBytes [4]byte",
                "+\tlengthBytes[0] = byte(len(s) >> 24)",
                "+\tlengthBytes[1] = byte(len(s) >> 16)",
                "+\tlengthBytes[2] = byte(len(s) >> 8)",
                "+\tlengthBytes[3] = byte(len(s))",
                "+\tw.Write(lengthBytes[:])",
                "+\tw.Write(s)",
                "+}",
                "+",
                "+func stringLength(n int) int {",
                "+\treturn 4 + n",
                "+}",
                "+",
                "+func marshalString(to []byte, s []byte) []byte {",
                "+\tto[0] = byte(len(s) >> 24)",
                "+\tto[1] = byte(len(s) >> 16)",
                "+\tto[2] = byte(len(s) >> 8)",
                "+\tto[3] = byte(len(s))",
                "+\tto = to[4:]",
                "+\tcopy(to, s)",
                "+\treturn to[len(s):]",
                "+}",
                "+",
                "+var bigIntType = reflect.TypeOf((*big.Int)(nil))",
                "+",
                "+// Decode a packet into its corresponding message.",
                "+func decode(packet []byte) (interface{}, error) {",
                "+\tvar msg interface{}",
                "+\tswitch packet[0] {",
                "+\tcase msgDisconnect:",
                "+\t\tmsg = new(disconnectMsg)",
                "+\tcase msgServiceRequest:",
                "+\t\tmsg = new(serviceRequestMsg)",
                "+\tcase msgServiceAccept:",
                "+\t\tmsg = new(serviceAcceptMsg)",
                "+\tcase msgKexInit:",
                "+\t\tmsg = new(kexInitMsg)",
                "+\tcase msgKexDHInit:",
                "+\t\tmsg = new(kexDHInitMsg)",
                "+\tcase msgKexDHReply:",
                "+\t\tmsg = new(kexDHReplyMsg)",
                "+\tcase msgUserAuthRequest:",
                "+\t\tmsg = new(userAuthRequestMsg)",
                "+\tcase msgUserAuthSuccess:",
                "+\t\treturn new(userAuthSuccessMsg), nil",
                "+\tcase msgUserAuthFailure:",
                "+\t\tmsg = new(userAuthFailureMsg)",
                "+\tcase msgUserAuthPubKeyOk:",
                "+\t\tmsg = new(userAuthPubKeyOkMsg)",
                "+\tcase msgGlobalRequest:",
                "+\t\tmsg = new(globalRequestMsg)",
                "+\tcase msgRequestSuccess:",
                "+\t\tmsg = new(globalRequestSuccessMsg)",
                "+\tcase msgRequestFailure:",
                "+\t\tmsg = new(globalRequestFailureMsg)",
                "+\tcase msgChannelOpen:",
                "+\t\tmsg = new(channelOpenMsg)",
                "+\tcase msgChannelData:",
                "+\t\tmsg = new(channelDataMsg)",
                "+\tcase msgChannelOpenConfirm:",
                "+\t\tmsg = new(channelOpenConfirmMsg)",
                "+\tcase msgChannelOpenFailure:",
                "+\t\tmsg = new(channelOpenFailureMsg)",
                "+\tcase msgChannelWindowAdjust:",
                "+\t\tmsg = new(windowAdjustMsg)",
                "+\tcase msgChannelEOF:",
                "+\t\tmsg = new(channelEOFMsg)",
                "+\tcase msgChannelClose:",
                "+\t\tmsg = new(channelCloseMsg)",
                "+\tcase msgChannelRequest:",
                "+\t\tmsg = new(channelRequestMsg)",
                "+\tcase msgChannelSuccess:",
                "+\t\tmsg = new(channelRequestSuccessMsg)",
                "+\tcase msgChannelFailure:",
                "+\t\tmsg = new(channelRequestFailureMsg)",
                "+\tdefault:",
                "+\t\treturn nil, unexpectedMessageError(0, packet[0])",
                "+\t}",
                "+\tif err := Unmarshal(packet, msg); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn msg, nil",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/mux.go b/vendor/golang.org/x/crypto/ssh/mux.go",
                "new file mode 100644",
                "index 000000000..27a527c10",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/mux.go",
                "@@ -0,0 +1,330 @@",
                "+// Copyright 2013 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"encoding/binary\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"log\"",
                "+\t\"sync\"",
                "+\t\"sync/atomic\"",
                "+)",
                "+",
                "+// debugMux, if set, causes messages in the connection protocol to be",
                "+// logged.",
                "+const debugMux = false",
                "+",
                "+// chanList is a thread safe channel list.",
                "+type chanList struct {",
                "+\t// protects concurrent access to chans",
                "+\tsync.Mutex",
                "+",
                "+\t// chans are indexed by the local id of the channel, which the",
                "+\t// other side should send in the PeersId field.",
                "+\tchans []*channel",
                "+",
                "+\t// This is a debugging aid: it offsets all IDs by this",
                "+\t// amount. This helps distinguish otherwise identical",
                "+\t// server/client muxes",
                "+\toffset uint32",
                "+}",
                "+",
                "+// Assigns a channel ID to the given channel.",
                "+func (c *chanList) add(ch *channel) uint32 {",
                "+\tc.Lock()",
                "+\tdefer c.Unlock()",
                "+\tfor i := range c.chans {",
                "+\t\tif c.chans[i] == nil {",
                "+\t\t\tc.chans[i] = ch",
                "+\t\t\treturn uint32(i) + c.offset",
                "+\t\t}",
                "+\t}",
                "+\tc.chans = append(c.chans, ch)",
                "+\treturn uint32(len(c.chans)-1) + c.offset",
                "+}",
                "+",
                "+// getChan returns the channel for the given ID.",
                "+func (c *chanList) getChan(id uint32) *channel {",
                "+\tid -= c.offset",
                "+",
                "+\tc.Lock()",
                "+\tdefer c.Unlock()",
                "+\tif id < uint32(len(c.chans)) {",
                "+\t\treturn c.chans[id]",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+func (c *chanList) remove(id uint32) {",
                "+\tid -= c.offset",
                "+\tc.Lock()",
                "+\tif id < uint32(len(c.chans)) {",
                "+\t\tc.chans[id] = nil",
                "+\t}",
                "+\tc.Unlock()",
                "+}",
                "+",
                "+// dropAll forgets all channels it knows, returning them in a slice.",
                "+func (c *chanList) dropAll() []*channel {",
                "+\tc.Lock()",
                "+\tdefer c.Unlock()",
                "+\tvar r []*channel",
                "+",
                "+\tfor _, ch := range c.chans {",
                "+\t\tif ch == nil {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tr = append(r, ch)",
                "+\t}",
                "+\tc.chans = nil",
                "+\treturn r",
                "+}",
                "+",
                "+// mux represents the state for the SSH connection protocol, which",
                "+// multiplexes many channels onto a single packet transport.",
                "+type mux struct {",
                "+\tconn     packetConn",
                "+\tchanList chanList",
                "+",
                "+\tincomingChannels chan NewChannel",
                "+",
                "+\tglobalSentMu     sync.Mutex",
                "+\tglobalResponses  chan interface{}",
                "+\tincomingRequests chan *Request",
                "+",
                "+\terrCond *sync.Cond",
                "+\terr     error",
                "+}",
                "+",
                "+// When debugging, each new chanList instantiation has a different",
                "+// offset.",
                "+var globalOff uint32",
                "+",
                "+func (m *mux) Wait() error {",
                "+\tm.errCond.L.Lock()",
                "+\tdefer m.errCond.L.Unlock()",
                "+\tfor m.err == nil {",
                "+\t\tm.errCond.Wait()",
                "+\t}",
                "+\treturn m.err",
                "+}",
                "+",
                "+// newMux returns a mux that runs over the given connection.",
                "+func newMux(p packetConn) *mux {",
                "+\tm := &mux{",
                "+\t\tconn:             p,",
                "+\t\tincomingChannels: make(chan NewChannel, chanSize),",
                "+\t\tglobalResponses:  make(chan interface{}, 1),",
                "+\t\tincomingRequests: make(chan *Request, chanSize),",
                "+\t\terrCond:          newCond(),",
                "+\t}",
                "+\tif debugMux {",
                "+\t\tm.chanList.offset = atomic.AddUint32(&globalOff, 1)",
                "+\t}",
                "+",
                "+\tgo m.loop()",
                "+\treturn m",
                "+}",
                "+",
                "+func (m *mux) sendMessage(msg interface{}) error {",
                "+\tp := Marshal(msg)",
                "+\tif debugMux {",
                "+\t\tlog.Printf(\"send global(%d): %#v\", m.chanList.offset, msg)",
                "+\t}",
                "+\treturn m.conn.writePacket(p)",
                "+}",
                "+",
                "+func (m *mux) SendRequest(name string, wantReply bool, payload []byte) (bool, []byte, error) {",
                "+\tif wantReply {",
                "+\t\tm.globalSentMu.Lock()",
                "+\t\tdefer m.globalSentMu.Unlock()",
                "+\t}",
                "+",
                "+\tif err := m.sendMessage(globalRequestMsg{",
                "+\t\tType:      name,",
                "+\t\tWantReply: wantReply,",
                "+\t\tData:      payload,",
                "+\t}); err != nil {",
                "+\t\treturn false, nil, err",
                "+\t}",
                "+",
                "+\tif !wantReply {",
                "+\t\treturn false, nil, nil",
                "+\t}",
                "+",
                "+\tmsg, ok := <-m.globalResponses",
                "+\tif !ok {",
                "+\t\treturn false, nil, io.EOF",
                "+\t}",
                "+\tswitch msg := msg.(type) {",
                "+\tcase *globalRequestFailureMsg:",
                "+\t\treturn false, msg.Data, nil",
                "+\tcase *globalRequestSuccessMsg:",
                "+\t\treturn true, msg.Data, nil",
                "+\tdefault:",
                "+\t\treturn false, nil, fmt.Errorf(\"ssh: unexpected response to request: %#v\", msg)",
                "+\t}",
                "+}",
                "+",
                "+// ackRequest must be called after processing a global request that",
                "+// has WantReply set.",
                "+func (m *mux) ackRequest(ok bool, data []byte) error {",
                "+\tif ok {",
                "+\t\treturn m.sendMessage(globalRequestSuccessMsg{Data: data})",
                "+\t}",
                "+\treturn m.sendMessage(globalRequestFailureMsg{Data: data})",
                "+}",
                "+",
                "+func (m *mux) Close() error {",
                "+\treturn m.conn.Close()",
                "+}",
                "+",
                "+// loop runs the connection machine. It will process packets until an",
                "+// error is encountered. To synchronize on loop exit, use mux.Wait.",
                "+func (m *mux) loop() {",
                "+\tvar err error",
                "+\tfor err == nil {",
                "+\t\terr = m.onePacket()",
                "+\t}",
                "+",
                "+\tfor _, ch := range m.chanList.dropAll() {",
                "+\t\tch.close()",
                "+\t}",
                "+",
                "+\tclose(m.incomingChannels)",
                "+\tclose(m.incomingRequests)",
                "+\tclose(m.globalResponses)",
                "+",
                "+\tm.conn.Close()",
                "+",
                "+\tm.errCond.L.Lock()",
                "+\tm.err = err",
                "+\tm.errCond.Broadcast()",
                "+\tm.errCond.L.Unlock()",
                "+",
                "+\tif debugMux {",
                "+\t\tlog.Println(\"loop exit\", err)",
                "+\t}",
                "+}",
                "+",
                "+// onePacket reads and processes one packet.",
                "+func (m *mux) onePacket() error {",
                "+\tpacket, err := m.conn.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tif debugMux {",
                "+\t\tif packet[0] == msgChannelData || packet[0] == msgChannelExtendedData {",
                "+\t\t\tlog.Printf(\"decoding(%d): data packet - %d bytes\", m.chanList.offset, len(packet))",
                "+\t\t} else {",
                "+\t\t\tp, _ := decode(packet)",
                "+\t\t\tlog.Printf(\"decoding(%d): %d %#v - %d bytes\", m.chanList.offset, packet[0], p, len(packet))",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tswitch packet[0] {",
                "+\tcase msgChannelOpen:",
                "+\t\treturn m.handleChannelOpen(packet)",
                "+\tcase msgGlobalRequest, msgRequestSuccess, msgRequestFailure:",
                "+\t\treturn m.handleGlobalPacket(packet)",
                "+\t}",
                "+",
                "+\t// assume a channel packet.",
                "+\tif len(packet) < 5 {",
                "+\t\treturn parseError(packet[0])",
                "+\t}",
                "+\tid := binary.BigEndian.Uint32(packet[1:])",
                "+\tch := m.chanList.getChan(id)",
                "+\tif ch == nil {",
                "+\t\treturn fmt.Errorf(\"ssh: invalid channel %d\", id)",
                "+\t}",
                "+",
                "+\treturn ch.handlePacket(packet)",
                "+}",
                "+",
                "+func (m *mux) handleGlobalPacket(packet []byte) error {",
                "+\tmsg, err := decode(packet)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tswitch msg := msg.(type) {",
                "+\tcase *globalRequestMsg:",
                "+\t\tm.incomingRequests <- &Request{",
                "+\t\t\tType:      msg.Type,",
                "+\t\t\tWantReply: msg.WantReply,",
                "+\t\t\tPayload:   msg.Data,",
                "+\t\t\tmux:       m,",
                "+\t\t}",
                "+\tcase *globalRequestSuccessMsg, *globalRequestFailureMsg:",
                "+\t\tm.globalResponses <- msg",
                "+\tdefault:",
                "+\t\tpanic(fmt.Sprintf(\"not a global message %#v\", msg))",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+// handleChannelOpen schedules a channel to be Accept()ed.",
                "+func (m *mux) handleChannelOpen(packet []byte) error {",
                "+\tvar msg channelOpenMsg",
                "+\tif err := Unmarshal(packet, &msg); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tif msg.MaxPacketSize < minPacketLength || msg.MaxPacketSize > 1<<31 {",
                "+\t\tfailMsg := channelOpenFailureMsg{",
                "+\t\t\tPeersId:  msg.PeersId,",
                "+\t\t\tReason:   ConnectionFailed,",
                "+\t\t\tMessage:  \"invalid request\",",
                "+\t\t\tLanguage: \"en_US.UTF-8\",",
                "+\t\t}",
                "+\t\treturn m.sendMessage(failMsg)",
                "+\t}",
                "+",
                "+\tc := m.newChannel(msg.ChanType, channelInbound, msg.TypeSpecificData)",
                "+\tc.remoteId = msg.PeersId",
                "+\tc.maxRemotePayload = msg.MaxPacketSize",
                "+\tc.remoteWin.add(msg.PeersWindow)",
                "+\tm.incomingChannels <- c",
                "+\treturn nil",
                "+}",
                "+",
                "+func (m *mux) OpenChannel(chanType string, extra []byte) (Channel, <-chan *Request, error) {",
                "+\tch, err := m.openChannel(chanType, extra)",
                "+\tif err != nil {",
                "+\t\treturn nil, nil, err",
                "+\t}",
                "+",
                "+\treturn ch, ch.incomingRequests, nil",
                "+}",
                "+",
                "+func (m *mux) openChannel(chanType string, extra []byte) (*channel, error) {",
                "+\tch := m.newChannel(chanType, channelOutbound, extra)",
                "+",
                "+\tch.maxIncomingPayload = channelMaxPacket",
                "+",
                "+\topen := channelOpenMsg{",
                "+\t\tChanType:         chanType,",
                "+\t\tPeersWindow:      ch.myWindow,",
                "+\t\tMaxPacketSize:    ch.maxIncomingPayload,",
                "+\t\tTypeSpecificData: extra,",
                "+\t\tPeersId:          ch.localId,",
                "+\t}",
                "+\tif err := m.sendMessage(open); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tswitch msg := (<-ch.msg).(type) {",
                "+\tcase *channelOpenConfirmMsg:",
                "+\t\treturn ch, nil",
                "+\tcase *channelOpenFailureMsg:",
                "+\t\treturn nil, &OpenChannelError{msg.Reason, msg.Message}",
                "+\tdefault:",
                "+\t\treturn nil, fmt.Errorf(\"ssh: unexpected packet in response to channel open: %T\", msg)",
                "+\t}",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/server.go b/vendor/golang.org/x/crypto/ssh/server.go",
                "new file mode 100644",
                "index 000000000..8a78b7ca0",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/server.go",
                "@@ -0,0 +1,563 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"net\"",
                "+\t\"strings\"",
                "+)",
                "+",
                "+// The Permissions type holds fine-grained permissions that are",
                "+// specific to a user or a specific authentication method for a user.",
                "+// The Permissions value for a successful authentication attempt is",
                "+// available in ServerConn, so it can be used to pass information from",
                "+// the user-authentication phase to the application layer.",
                "+type Permissions struct {",
                "+\t// CriticalOptions indicate restrictions to the default",
                "+\t// permissions, and are typically used in conjunction with",
                "+\t// user certificates. The standard for SSH certificates",
                "+\t// defines \"force-command\" (only allow the given command to",
                "+\t// execute) and \"source-address\" (only allow connections from",
                "+\t// the given address). The SSH package currently only enforces",
                "+\t// the \"source-address\" critical option. It is up to server",
                "+\t// implementations to enforce other critical options, such as",
                "+\t// \"force-command\", by checking them after the SSH handshake",
                "+\t// is successful. In general, SSH servers should reject",
                "+\t// connections that specify critical options that are unknown",
                "+\t// or not supported.",
                "+\tCriticalOptions map[string]string",
                "+",
                "+\t// Extensions are extra functionality that the server may",
                "+\t// offer on authenticated connections. Lack of support for an",
                "+\t// extension does not preclude authenticating a user. Common",
                "+\t// extensions are \"permit-agent-forwarding\",",
                "+\t// \"permit-X11-forwarding\". The Go SSH library currently does",
                "+\t// not act on any extension, and it is up to server",
                "+\t// implementations to honor them. Extensions can be used to",
                "+\t// pass data from the authentication callbacks to the server",
                "+\t// application layer.",
                "+\tExtensions map[string]string",
                "+}",
                "+",
                "+// ServerConfig holds server specific configuration data.",
                "+type ServerConfig struct {",
                "+\t// Config contains configuration shared between client and server.",
                "+\tConfig",
                "+",
                "+\thostKeys []Signer",
                "+",
                "+\t// NoClientAuth is true if clients are allowed to connect without",
                "+\t// authenticating.",
                "+\tNoClientAuth bool",
                "+",
                "+\t// MaxAuthTries specifies the maximum number of authentication attempts",
                "+\t// permitted per connection. If set to a negative number, the number of",
                "+\t// attempts are unlimited. If set to zero, the number of attempts are limited",
                "+\t// to 6.",
                "+\tMaxAuthTries int",
                "+",
                "+\t// PasswordCallback, if non-nil, is called when a user",
                "+\t// attempts to authenticate using a password.",
                "+\tPasswordCallback func(conn ConnMetadata, password []byte) (*Permissions, error)",
                "+",
                "+\t// PublicKeyCallback, if non-nil, is called when a client",
                "+\t// offers a public key for authentication. It must return a nil error",
                "+\t// if the given public key can be used to authenticate the",
                "+\t// given user. For example, see CertChecker.Authenticate. A",
                "+\t// call to this function does not guarantee that the key",
                "+\t// offered is in fact used to authenticate. To record any data",
                "+\t// depending on the public key, store it inside a",
                "+\t// Permissions.Extensions entry.",
                "+\tPublicKeyCallback func(conn ConnMetadata, key PublicKey) (*Permissions, error)",
                "+",
                "+\t// KeyboardInteractiveCallback, if non-nil, is called when",
                "+\t// keyboard-interactive authentication is selected (RFC",
                "+\t// 4256). The client object's Challenge function should be",
                "+\t// used to query the user. The callback may offer multiple",
                "+\t// Challenge rounds. To avoid information leaks, the client",
                "+\t// should be presented a challenge even if the user is",
                "+\t// unknown.",
                "+\tKeyboardInteractiveCallback func(conn ConnMetadata, client KeyboardInteractiveChallenge) (*Permissions, error)",
                "+",
                "+\t// AuthLogCallback, if non-nil, is called to log all authentication",
                "+\t// attempts.",
                "+\tAuthLogCallback func(conn ConnMetadata, method string, err error)",
                "+",
                "+\t// ServerVersion is the version identification string to announce in",
                "+\t// the public handshake.",
                "+\t// If empty, a reasonable default is used.",
                "+\t// Note that RFC 4253 section 4.2 requires that this string start with",
                "+\t// \"SSH-2.0-\".",
                "+\tServerVersion string",
                "+}",
                "+",
                "+// AddHostKey adds a private key as a host key. If an existing host",
                "+// key exists with the same algorithm, it is overwritten. Each server",
                "+// config must have at least one host key.",
                "+func (s *ServerConfig) AddHostKey(key Signer) {",
                "+\tfor i, k := range s.hostKeys {",
                "+\t\tif k.PublicKey().Type() == key.PublicKey().Type() {",
                "+\t\t\ts.hostKeys[i] = key",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t}",
                "+",
                "+\ts.hostKeys = append(s.hostKeys, key)",
                "+}",
                "+",
                "+// cachedPubKey contains the results of querying whether a public key is",
                "+// acceptable for a user.",
                "+type cachedPubKey struct {",
                "+\tuser       string",
                "+\tpubKeyData []byte",
                "+\tresult     error",
                "+\tperms      *Permissions",
                "+}",
                "+",
                "+const maxCachedPubKeys = 16",
                "+",
                "+// pubKeyCache caches tests for public keys.  Since SSH clients",
                "+// will query whether a public key is acceptable before attempting to",
                "+// authenticate with it, we end up with duplicate queries for public",
                "+// key validity.  The cache only applies to a single ServerConn.",
                "+type pubKeyCache struct {",
                "+\tkeys []cachedPubKey",
                "+}",
                "+",
                "+// get returns the result for a given user/algo/key tuple.",
                "+func (c *pubKeyCache) get(user string, pubKeyData []byte) (cachedPubKey, bool) {",
                "+\tfor _, k := range c.keys {",
                "+\t\tif k.user == user && bytes.Equal(k.pubKeyData, pubKeyData) {",
                "+\t\t\treturn k, true",
                "+\t\t}",
                "+\t}",
                "+\treturn cachedPubKey{}, false",
                "+}",
                "+",
                "+// add adds the given tuple to the cache.",
                "+func (c *pubKeyCache) add(candidate cachedPubKey) {",
                "+\tif len(c.keys) < maxCachedPubKeys {",
                "+\t\tc.keys = append(c.keys, candidate)",
                "+\t}",
                "+}",
                "+",
                "+// ServerConn is an authenticated SSH connection, as seen from the",
                "+// server",
                "+type ServerConn struct {",
                "+\tConn",
                "+",
                "+\t// If the succeeding authentication callback returned a",
                "+\t// non-nil Permissions pointer, it is stored here.",
                "+\tPermissions *Permissions",
                "+}",
                "+",
                "+// NewServerConn starts a new SSH server with c as the underlying",
                "+// transport.  It starts with a handshake and, if the handshake is",
                "+// unsuccessful, it closes the connection and returns an error.  The",
                "+// Request and NewChannel channels must be serviced, or the connection",
                "+// will hang.",
                "+func NewServerConn(c net.Conn, config *ServerConfig) (*ServerConn, <-chan NewChannel, <-chan *Request, error) {",
                "+\tfullConf := *config",
                "+\tfullConf.SetDefaults()",
                "+\tif fullConf.MaxAuthTries == 0 {",
                "+\t\tfullConf.MaxAuthTries = 6",
                "+\t}",
                "+",
                "+\ts := &connection{",
                "+\t\tsshConn: sshConn{conn: c},",
                "+\t}",
                "+\tperms, err := s.serverHandshake(&fullConf)",
                "+\tif err != nil {",
                "+\t\tc.Close()",
                "+\t\treturn nil, nil, nil, err",
                "+\t}",
                "+\treturn &ServerConn{s, perms}, s.mux.incomingChannels, s.mux.incomingRequests, nil",
                "+}",
                "+",
                "+// signAndMarshal signs the data with the appropriate algorithm,",
                "+// and serializes the result in SSH wire format.",
                "+func signAndMarshal(k Signer, rand io.Reader, data []byte) ([]byte, error) {",
                "+\tsig, err := k.Sign(rand, data)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn Marshal(sig), nil",
                "+}",
                "+",
                "+// handshake performs key exchange and user authentication.",
                "+func (s *connection) serverHandshake(config *ServerConfig) (*Permissions, error) {",
                "+\tif len(config.hostKeys) == 0 {",
                "+\t\treturn nil, errors.New(\"ssh: server has no host keys\")",
                "+\t}",
                "+",
                "+\tif !config.NoClientAuth && config.PasswordCallback == nil && config.PublicKeyCallback == nil && config.KeyboardInteractiveCallback == nil {",
                "+\t\treturn nil, errors.New(\"ssh: no authentication methods configured but NoClientAuth is also false\")",
                "+\t}",
                "+",
                "+\tif config.ServerVersion != \"\" {",
                "+\t\ts.serverVersion = []byte(config.ServerVersion)",
                "+\t} else {",
                "+\t\ts.serverVersion = []byte(packageVersion)",
                "+\t}",
                "+\tvar err error",
                "+\ts.clientVersion, err = exchangeVersions(s.sshConn.conn, s.serverVersion)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\ttr := newTransport(s.sshConn.conn, config.Rand, false /* not client */)",
                "+\ts.transport = newServerTransport(tr, s.clientVersion, s.serverVersion, config)",
                "+",
                "+\tif err := s.transport.waitSession(); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\t// We just did the key change, so the session ID is established.",
                "+\ts.sessionID = s.transport.getSessionID()",
                "+",
                "+\tvar packet []byte",
                "+\tif packet, err = s.transport.readPacket(); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tvar serviceRequest serviceRequestMsg",
                "+\tif err = Unmarshal(packet, &serviceRequest); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif serviceRequest.Service != serviceUserAuth {",
                "+\t\treturn nil, errors.New(\"ssh: requested service '\" + serviceRequest.Service + \"' before authenticating\")",
                "+\t}",
                "+\tserviceAccept := serviceAcceptMsg{",
                "+\t\tService: serviceUserAuth,",
                "+\t}",
                "+\tif err := s.transport.writePacket(Marshal(&serviceAccept)); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tperms, err := s.serverAuthenticate(config)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\ts.mux = newMux(s.transport)",
                "+\treturn perms, err",
                "+}",
                "+",
                "+func isAcceptableAlgo(algo string) bool {",
                "+\tswitch algo {",
                "+\tcase KeyAlgoRSA, KeyAlgoDSA, KeyAlgoECDSA256, KeyAlgoECDSA384, KeyAlgoECDSA521, KeyAlgoED25519,",
                "+\t\tCertAlgoRSAv01, CertAlgoDSAv01, CertAlgoECDSA256v01, CertAlgoECDSA384v01, CertAlgoECDSA521v01:",
                "+\t\treturn true",
                "+\t}",
                "+\treturn false",
                "+}",
                "+",
                "+func checkSourceAddress(addr net.Addr, sourceAddrs string) error {",
                "+\tif addr == nil {",
                "+\t\treturn errors.New(\"ssh: no address known for client, but source-address match required\")",
                "+\t}",
                "+",
                "+\ttcpAddr, ok := addr.(*net.TCPAddr)",
                "+\tif !ok {",
                "+\t\treturn fmt.Errorf(\"ssh: remote address %v is not an TCP address when checking source-address match\", addr)",
                "+\t}",
                "+",
                "+\tfor _, sourceAddr := range strings.Split(sourceAddrs, \",\") {",
                "+\t\tif allowedIP := net.ParseIP(sourceAddr); allowedIP != nil {",
                "+\t\t\tif allowedIP.Equal(tcpAddr.IP) {",
                "+\t\t\t\treturn nil",
                "+\t\t\t}",
                "+\t\t} else {",
                "+\t\t\t_, ipNet, err := net.ParseCIDR(sourceAddr)",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn fmt.Errorf(\"ssh: error parsing source-address restriction %q: %v\", sourceAddr, err)",
                "+\t\t\t}",
                "+",
                "+\t\t\tif ipNet.Contains(tcpAddr.IP) {",
                "+\t\t\t\treturn nil",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn fmt.Errorf(\"ssh: remote address %v is not allowed because of source-address restriction\", addr)",
                "+}",
                "+",
                "+// ServerAuthError implements the error interface. It appends any authentication",
                "+// errors that may occur, and is returned if all of the authentication methods",
                "+// provided by the user failed to authenticate.",
                "+type ServerAuthError struct {",
                "+\t// Errors contains authentication errors returned by the authentication",
                "+\t// callback methods.",
                "+\tErrors []error",
                "+}",
                "+",
                "+func (l ServerAuthError) Error() string {",
                "+\tvar errs []string",
                "+\tfor _, err := range l.Errors {",
                "+\t\terrs = append(errs, err.Error())",
                "+\t}",
                "+\treturn \"[\" + strings.Join(errs, \", \") + \"]\"",
                "+}",
                "+",
                "+func (s *connection) serverAuthenticate(config *ServerConfig) (*Permissions, error) {",
                "+\tsessionID := s.transport.getSessionID()",
                "+\tvar cache pubKeyCache",
                "+\tvar perms *Permissions",
                "+",
                "+\tauthFailures := 0",
                "+\tvar authErrs []error",
                "+",
                "+userAuthLoop:",
                "+\tfor {",
                "+\t\tif authFailures >= config.MaxAuthTries && config.MaxAuthTries > 0 {",
                "+\t\t\tdiscMsg := &disconnectMsg{",
                "+\t\t\t\tReason:  2,",
                "+\t\t\t\tMessage: \"too many authentication failures\",",
                "+\t\t\t}",
                "+",
                "+\t\t\tif err := s.transport.writePacket(Marshal(discMsg)); err != nil {",
                "+\t\t\t\treturn nil, err",
                "+\t\t\t}",
                "+",
                "+\t\t\treturn nil, discMsg",
                "+\t\t}",
                "+",
                "+\t\tvar userAuthReq userAuthRequestMsg",
                "+\t\tif packet, err := s.transport.readPacket(); err != nil {",
                "+\t\t\tif err == io.EOF {",
                "+\t\t\t\treturn nil, &ServerAuthError{Errors: authErrs}",
                "+\t\t\t}",
                "+\t\t\treturn nil, err",
                "+\t\t} else if err = Unmarshal(packet, &userAuthReq); err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+",
                "+\t\tif userAuthReq.Service != serviceSSH {",
                "+\t\t\treturn nil, errors.New(\"ssh: client attempted to negotiate for unknown service: \" + userAuthReq.Service)",
                "+\t\t}",
                "+",
                "+\t\ts.user = userAuthReq.User",
                "+\t\tperms = nil",
                "+\t\tauthErr := errors.New(\"no auth passed yet\")",
                "+",
                "+\t\tswitch userAuthReq.Method {",
                "+\t\tcase \"none\":",
                "+\t\t\tif config.NoClientAuth {",
                "+\t\t\t\tauthErr = nil",
                "+\t\t\t}",
                "+",
                "+\t\t\t// allow initial attempt of 'none' without penalty",
                "+\t\t\tif authFailures == 0 {",
                "+\t\t\t\tauthFailures--",
                "+\t\t\t}",
                "+\t\tcase \"password\":",
                "+\t\t\tif config.PasswordCallback == nil {",
                "+\t\t\t\tauthErr = errors.New(\"ssh: password auth not configured\")",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t\tpayload := userAuthReq.Payload",
                "+\t\t\tif len(payload) < 1 || payload[0] != 0 {",
                "+\t\t\t\treturn nil, parseError(msgUserAuthRequest)",
                "+\t\t\t}",
                "+\t\t\tpayload = payload[1:]",
                "+\t\t\tpassword, payload, ok := parseString(payload)",
                "+\t\t\tif !ok || len(payload) > 0 {",
                "+\t\t\t\treturn nil, parseError(msgUserAuthRequest)",
                "+\t\t\t}",
                "+",
                "+\t\t\tperms, authErr = config.PasswordCallback(s, password)",
                "+\t\tcase \"keyboard-interactive\":",
                "+\t\t\tif config.KeyboardInteractiveCallback == nil {",
                "+\t\t\t\tauthErr = errors.New(\"ssh: keyboard-interactive auth not configubred\")",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+",
                "+\t\t\tprompter := &sshClientKeyboardInteractive{s}",
                "+\t\t\tperms, authErr = config.KeyboardInteractiveCallback(s, prompter.Challenge)",
                "+\t\tcase \"publickey\":",
                "+\t\t\tif config.PublicKeyCallback == nil {",
                "+\t\t\t\tauthErr = errors.New(\"ssh: publickey auth not configured\")",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t\tpayload := userAuthReq.Payload",
                "+\t\t\tif len(payload) < 1 {",
                "+\t\t\t\treturn nil, parseError(msgUserAuthRequest)",
                "+\t\t\t}",
                "+\t\t\tisQuery := payload[0] == 0",
                "+\t\t\tpayload = payload[1:]",
                "+\t\t\talgoBytes, payload, ok := parseString(payload)",
                "+\t\t\tif !ok {",
                "+\t\t\t\treturn nil, parseError(msgUserAuthRequest)",
                "+\t\t\t}",
                "+\t\t\talgo := string(algoBytes)",
                "+\t\t\tif !isAcceptableAlgo(algo) {",
                "+\t\t\t\tauthErr = fmt.Errorf(\"ssh: algorithm %q not accepted\", algo)",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+",
                "+\t\t\tpubKeyData, payload, ok := parseString(payload)",
                "+\t\t\tif !ok {",
                "+\t\t\t\treturn nil, parseError(msgUserAuthRequest)",
                "+\t\t\t}",
                "+",
                "+\t\t\tpubKey, err := ParsePublicKey(pubKeyData)",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn nil, err",
                "+\t\t\t}",
                "+",
                "+\t\t\tcandidate, ok := cache.get(s.user, pubKeyData)",
                "+\t\t\tif !ok {",
                "+\t\t\t\tcandidate.user = s.user",
                "+\t\t\t\tcandidate.pubKeyData = pubKeyData",
                "+\t\t\t\tcandidate.perms, candidate.result = config.PublicKeyCallback(s, pubKey)",
                "+\t\t\t\tif candidate.result == nil && candidate.perms != nil && candidate.perms.CriticalOptions != nil && candidate.perms.CriticalOptions[sourceAddressCriticalOption] != \"\" {",
                "+\t\t\t\t\tcandidate.result = checkSourceAddress(",
                "+\t\t\t\t\t\ts.RemoteAddr(),",
                "+\t\t\t\t\t\tcandidate.perms.CriticalOptions[sourceAddressCriticalOption])",
                "+\t\t\t\t}",
                "+\t\t\t\tcache.add(candidate)",
                "+\t\t\t}",
                "+",
                "+\t\t\tif isQuery {",
                "+\t\t\t\t// The client can query if the given public key",
                "+\t\t\t\t// would be okay.",
                "+",
                "+\t\t\t\tif len(payload) > 0 {",
                "+\t\t\t\t\treturn nil, parseError(msgUserAuthRequest)",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tif candidate.result == nil {",
                "+\t\t\t\t\tokMsg := userAuthPubKeyOkMsg{",
                "+\t\t\t\t\t\tAlgo:   algo,",
                "+\t\t\t\t\t\tPubKey: pubKeyData,",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tif err = s.transport.writePacket(Marshal(&okMsg)); err != nil {",
                "+\t\t\t\t\t\treturn nil, err",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tcontinue userAuthLoop",
                "+\t\t\t\t}",
                "+\t\t\t\tauthErr = candidate.result",
                "+\t\t\t} else {",
                "+\t\t\t\tsig, payload, ok := parseSignature(payload)",
                "+\t\t\t\tif !ok || len(payload) > 0 {",
                "+\t\t\t\t\treturn nil, parseError(msgUserAuthRequest)",
                "+\t\t\t\t}",
                "+\t\t\t\t// Ensure the public key algo and signature algo",
                "+\t\t\t\t// are supported.  Compare the private key",
                "+\t\t\t\t// algorithm name that corresponds to algo with",
                "+\t\t\t\t// sig.Format.  This is usually the same, but",
                "+\t\t\t\t// for certs, the names differ.",
                "+\t\t\t\tif !isAcceptableAlgo(sig.Format) {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t\tsignedData := buildDataSignedForAuth(sessionID, userAuthReq, algoBytes, pubKeyData)",
                "+",
                "+\t\t\t\tif err := pubKey.Verify(signedData, sig); err != nil {",
                "+\t\t\t\t\treturn nil, err",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tauthErr = candidate.result",
                "+\t\t\t\tperms = candidate.perms",
                "+\t\t\t}",
                "+\t\tdefault:",
                "+\t\t\tauthErr = fmt.Errorf(\"ssh: unknown method %q\", userAuthReq.Method)",
                "+\t\t}",
                "+",
                "+\t\tauthErrs = append(authErrs, authErr)",
                "+",
                "+\t\tif config.AuthLogCallback != nil {",
                "+\t\t\tconfig.AuthLogCallback(s, userAuthReq.Method, authErr)",
                "+\t\t}",
                "+",
                "+\t\tif authErr == nil {",
                "+\t\t\tbreak userAuthLoop",
                "+\t\t}",
                "+",
                "+\t\tauthFailures++",
                "+",
                "+\t\tvar failureMsg userAuthFailureMsg",
                "+\t\tif config.PasswordCallback != nil {",
                "+\t\t\tfailureMsg.Methods = append(failureMsg.Methods, \"password\")",
                "+\t\t}",
                "+\t\tif config.PublicKeyCallback != nil {",
                "+\t\t\tfailureMsg.Methods = append(failureMsg.Methods, \"publickey\")",
                "+\t\t}",
                "+\t\tif config.KeyboardInteractiveCallback != nil {",
                "+\t\t\tfailureMsg.Methods = append(failureMsg.Methods, \"keyboard-interactive\")",
                "+\t\t}",
                "+",
                "+\t\tif len(failureMsg.Methods) == 0 {",
                "+\t\t\treturn nil, errors.New(\"ssh: no authentication methods configured but NoClientAuth is also false\")",
                "+\t\t}",
                "+",
                "+\t\tif err := s.transport.writePacket(Marshal(&failureMsg)); err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif err := s.transport.writePacket([]byte{msgUserAuthSuccess}); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn perms, nil",
                "+}",
                "+",
                "+// sshClientKeyboardInteractive implements a ClientKeyboardInteractive by",
                "+// asking the client on the other side of a ServerConn.",
                "+type sshClientKeyboardInteractive struct {",
                "+\t*connection",
                "+}",
                "+",
                "+func (c *sshClientKeyboardInteractive) Challenge(user, instruction string, questions []string, echos []bool) (answers []string, err error) {",
                "+\tif len(questions) != len(echos) {",
                "+\t\treturn nil, errors.New(\"ssh: echos and questions must have equal length\")",
                "+\t}",
                "+",
                "+\tvar prompts []byte",
                "+\tfor i := range questions {",
                "+\t\tprompts = appendString(prompts, questions[i])",
                "+\t\tprompts = appendBool(prompts, echos[i])",
                "+\t}",
                "+",
                "+\tif err := c.transport.writePacket(Marshal(&userAuthInfoRequestMsg{",
                "+\t\tInstruction: instruction,",
                "+\t\tNumPrompts:  uint32(len(questions)),",
                "+\t\tPrompts:     prompts,",
                "+\t})); err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tpacket, err := c.transport.readPacket()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif packet[0] != msgUserAuthInfoResponse {",
                "+\t\treturn nil, unexpectedMessageError(msgUserAuthInfoResponse, packet[0])",
                "+\t}",
                "+\tpacket = packet[1:]",
                "+",
                "+\tn, packet, ok := parseUint32(packet)",
                "+\tif !ok || int(n) != len(questions) {",
                "+\t\treturn nil, parseError(msgUserAuthInfoResponse)",
                "+\t}",
                "+",
                "+\tfor i := uint32(0); i < n; i++ {",
                "+\t\tans, rest, ok := parseString(packet)",
                "+\t\tif !ok {",
                "+\t\t\treturn nil, parseError(msgUserAuthInfoResponse)",
                "+\t\t}",
                "+",
                "+\t\tanswers = append(answers, string(ans))",
                "+\t\tpacket = rest",
                "+\t}",
                "+\tif len(packet) != 0 {",
                "+\t\treturn nil, errors.New(\"ssh: junk at end of message\")",
                "+\t}",
                "+",
                "+\treturn answers, nil",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/session.go b/vendor/golang.org/x/crypto/ssh/session.go",
                "new file mode 100644",
                "index 000000000..cc06e03f5",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/session.go",
                "@@ -0,0 +1,647 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+// Session implements an interactive session described in",
                "+// \"RFC 4254, section 6\".",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"encoding/binary\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"io/ioutil\"",
                "+\t\"sync\"",
                "+)",
                "+",
                "+type Signal string",
                "+",
                "+// POSIX signals as listed in RFC 4254 Section 6.10.",
                "+const (",
                "+\tSIGABRT Signal = \"ABRT\"",
                "+\tSIGALRM Signal = \"ALRM\"",
                "+\tSIGFPE  Signal = \"FPE\"",
                "+\tSIGHUP  Signal = \"HUP\"",
                "+\tSIGILL  Signal = \"ILL\"",
                "+\tSIGINT  Signal = \"INT\"",
                "+\tSIGKILL Signal = \"KILL\"",
                "+\tSIGPIPE Signal = \"PIPE\"",
                "+\tSIGQUIT Signal = \"QUIT\"",
                "+\tSIGSEGV Signal = \"SEGV\"",
                "+\tSIGTERM Signal = \"TERM\"",
                "+\tSIGUSR1 Signal = \"USR1\"",
                "+\tSIGUSR2 Signal = \"USR2\"",
                "+)",
                "+",
                "+var signals = map[Signal]int{",
                "+\tSIGABRT: 6,",
                "+\tSIGALRM: 14,",
                "+\tSIGFPE:  8,",
                "+\tSIGHUP:  1,",
                "+\tSIGILL:  4,",
                "+\tSIGINT:  2,",
                "+\tSIGKILL: 9,",
                "+\tSIGPIPE: 13,",
                "+\tSIGQUIT: 3,",
                "+\tSIGSEGV: 11,",
                "+\tSIGTERM: 15,",
                "+}",
                "+",
                "+type TerminalModes map[uint8]uint32",
                "+",
                "+// POSIX terminal mode flags as listed in RFC 4254 Section 8.",
                "+const (",
                "+\ttty_OP_END    = 0",
                "+\tVINTR         = 1",
                "+\tVQUIT         = 2",
                "+\tVERASE        = 3",
                "+\tVKILL         = 4",
                "+\tVEOF          = 5",
                "+\tVEOL          = 6",
                "+\tVEOL2         = 7",
                "+\tVSTART        = 8",
                "+\tVSTOP         = 9",
                "+\tVSUSP         = 10",
                "+\tVDSUSP        = 11",
                "+\tVREPRINT      = 12",
                "+\tVWERASE       = 13",
                "+\tVLNEXT        = 14",
                "+\tVFLUSH        = 15",
                "+\tVSWTCH        = 16",
                "+\tVSTATUS       = 17",
                "+\tVDISCARD      = 18",
                "+\tIGNPAR        = 30",
                "+\tPARMRK        = 31",
                "+\tINPCK         = 32",
                "+\tISTRIP        = 33",
                "+\tINLCR         = 34",
                "+\tIGNCR         = 35",
                "+\tICRNL         = 36",
                "+\tIUCLC         = 37",
                "+\tIXON          = 38",
                "+\tIXANY         = 39",
                "+\tIXOFF         = 40",
                "+\tIMAXBEL       = 41",
                "+\tISIG          = 50",
                "+\tICANON        = 51",
                "+\tXCASE         = 52",
                "+\tECHO          = 53",
                "+\tECHOE         = 54",
                "+\tECHOK         = 55",
                "+\tECHONL        = 56",
                "+\tNOFLSH        = 57",
                "+\tTOSTOP        = 58",
                "+\tIEXTEN        = 59",
                "+\tECHOCTL       = 60",
                "+\tECHOKE        = 61",
                "+\tPENDIN        = 62",
                "+\tOPOST         = 70",
                "+\tOLCUC         = 71",
                "+\tONLCR         = 72",
                "+\tOCRNL         = 73",
                "+\tONOCR         = 74",
                "+\tONLRET        = 75",
                "+\tCS7           = 90",
                "+\tCS8           = 91",
                "+\tPARENB        = 92",
                "+\tPARODD        = 93",
                "+\tTTY_OP_ISPEED = 128",
                "+\tTTY_OP_OSPEED = 129",
                "+)",
                "+",
                "+// A Session represents a connection to a remote command or shell.",
                "+type Session struct {",
                "+\t// Stdin specifies the remote process's standard input.",
                "+\t// If Stdin is nil, the remote process reads from an empty",
                "+\t// bytes.Buffer.",
                "+\tStdin io.Reader",
                "+",
                "+\t// Stdout and Stderr specify the remote process's standard",
                "+\t// output and error.",
                "+\t//",
                "+\t// If either is nil, Run connects the corresponding file",
                "+\t// descriptor to an instance of ioutil.Discard. There is a",
                "+\t// fixed amount of buffering that is shared for the two streams.",
                "+\t// If either blocks it may eventually cause the remote",
                "+\t// command to block.",
                "+\tStdout io.Writer",
                "+\tStderr io.Writer",
                "+",
                "+\tch        Channel // the channel backing this session",
                "+\tstarted   bool    // true once Start, Run or Shell is invoked.",
                "+\tcopyFuncs []func() error",
                "+\terrors    chan error // one send per copyFunc",
                "+",
                "+\t// true if pipe method is active",
                "+\tstdinpipe, stdoutpipe, stderrpipe bool",
                "+",
                "+\t// stdinPipeWriter is non-nil if StdinPipe has not been called",
                "+\t// and Stdin was specified by the user; it is the write end of",
                "+\t// a pipe connecting Session.Stdin to the stdin channel.",
                "+\tstdinPipeWriter io.WriteCloser",
                "+",
                "+\texitStatus chan error",
                "+}",
                "+",
                "+// SendRequest sends an out-of-band channel request on the SSH channel",
                "+// underlying the session.",
                "+func (s *Session) SendRequest(name string, wantReply bool, payload []byte) (bool, error) {",
                "+\treturn s.ch.SendRequest(name, wantReply, payload)",
                "+}",
                "+",
                "+func (s *Session) Close() error {",
                "+\treturn s.ch.Close()",
                "+}",
                "+",
                "+// RFC 4254 Section 6.4.",
                "+type setenvRequest struct {",
                "+\tName  string",
                "+\tValue string",
                "+}",
                "+",
                "+// Setenv sets an environment variable that will be applied to any",
                "+// command executed by Shell or Run.",
                "+func (s *Session) Setenv(name, value string) error {",
                "+\tmsg := setenvRequest{",
                "+\t\tName:  name,",
                "+\t\tValue: value,",
                "+\t}",
                "+\tok, err := s.ch.SendRequest(\"env\", true, Marshal(&msg))",
                "+\tif err == nil && !ok {",
                "+\t\terr = errors.New(\"ssh: setenv failed\")",
                "+\t}",
                "+\treturn err",
                "+}",
                "+",
                "+// RFC 4254 Section 6.2.",
                "+type ptyRequestMsg struct {",
                "+\tTerm     string",
                "+\tColumns  uint32",
                "+\tRows     uint32",
                "+\tWidth    uint32",
                "+\tHeight   uint32",
                "+\tModelist string",
                "+}",
                "+",
                "+// RequestPty requests the association of a pty with the session on the remote host.",
                "+func (s *Session) RequestPty(term string, h, w int, termmodes TerminalModes) error {",
                "+\tvar tm []byte",
                "+\tfor k, v := range termmodes {",
                "+\t\tkv := struct {",
                "+\t\t\tKey byte",
                "+\t\t\tVal uint32",
                "+\t\t}{k, v}",
                "+",
                "+\t\ttm = append(tm, Marshal(&kv)...)",
                "+\t}",
                "+\ttm = append(tm, tty_OP_END)",
                "+\treq := ptyRequestMsg{",
                "+\t\tTerm:     term,",
                "+\t\tColumns:  uint32(w),",
                "+\t\tRows:     uint32(h),",
                "+\t\tWidth:    uint32(w * 8),",
                "+\t\tHeight:   uint32(h * 8),",
                "+\t\tModelist: string(tm),",
                "+\t}",
                "+\tok, err := s.ch.SendRequest(\"pty-req\", true, Marshal(&req))",
                "+\tif err == nil && !ok {",
                "+\t\terr = errors.New(\"ssh: pty-req failed\")",
                "+\t}",
                "+\treturn err",
                "+}",
                "+",
                "+// RFC 4254 Section 6.5.",
                "+type subsystemRequestMsg struct {",
                "+\tSubsystem string",
                "+}",
                "+",
                "+// RequestSubsystem requests the association of a subsystem with the session on the remote host.",
                "+// A subsystem is a predefined command that runs in the background when the ssh session is initiated",
                "+func (s *Session) RequestSubsystem(subsystem string) error {",
                "+\tmsg := subsystemRequestMsg{",
                "+\t\tSubsystem: subsystem,",
                "+\t}",
                "+\tok, err := s.ch.SendRequest(\"subsystem\", true, Marshal(&msg))",
                "+\tif err == nil && !ok {",
                "+\t\terr = errors.New(\"ssh: subsystem request failed\")",
                "+\t}",
                "+\treturn err",
                "+}",
                "+",
                "+// RFC 4254 Section 6.7.",
                "+type ptyWindowChangeMsg struct {",
                "+\tColumns uint32",
                "+\tRows    uint32",
                "+\tWidth   uint32",
                "+\tHeight  uint32",
                "+}",
                "+",
                "+// WindowChange informs the remote host about a terminal window dimension change to h rows and w columns.",
                "+func (s *Session) WindowChange(h, w int) error {",
                "+\treq := ptyWindowChangeMsg{",
                "+\t\tColumns: uint32(w),",
                "+\t\tRows:    uint32(h),",
                "+\t\tWidth:   uint32(w * 8),",
                "+\t\tHeight:  uint32(h * 8),",
                "+\t}",
                "+\t_, err := s.ch.SendRequest(\"window-change\", false, Marshal(&req))",
                "+\treturn err",
                "+}",
                "+",
                "+// RFC 4254 Section 6.9.",
                "+type signalMsg struct {",
                "+\tSignal string",
                "+}",
                "+",
                "+// Signal sends the given signal to the remote process.",
                "+// sig is one of the SIG* constants.",
                "+func (s *Session) Signal(sig Signal) error {",
                "+\tmsg := signalMsg{",
                "+\t\tSignal: string(sig),",
                "+\t}",
                "+",
                "+\t_, err := s.ch.SendRequest(\"signal\", false, Marshal(&msg))",
                "+\treturn err",
                "+}",
                "+",
                "+// RFC 4254 Section 6.5.",
                "+type execMsg struct {",
                "+\tCommand string",
                "+}",
                "+",
                "+// Start runs cmd on the remote host. Typically, the remote",
                "+// server passes cmd to the shell for interpretation.",
                "+// A Session only accepts one call to Run, Start or Shell.",
                "+func (s *Session) Start(cmd string) error {",
                "+\tif s.started {",
                "+\t\treturn errors.New(\"ssh: session already started\")",
                "+\t}",
                "+\treq := execMsg{",
                "+\t\tCommand: cmd,",
                "+\t}",
                "+",
                "+\tok, err := s.ch.SendRequest(\"exec\", true, Marshal(&req))",
                "+\tif err == nil && !ok {",
                "+\t\terr = fmt.Errorf(\"ssh: command %v failed\", cmd)",
                "+\t}",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\treturn s.start()",
                "+}",
                "+",
                "+// Run runs cmd on the remote host. Typically, the remote",
                "+// server passes cmd to the shell for interpretation.",
                "+// A Session only accepts one call to Run, Start, Shell, Output,",
                "+// or CombinedOutput.",
                "+//",
                "+// The returned error is nil if the command runs, has no problems",
                "+// copying stdin, stdout, and stderr, and exits with a zero exit",
                "+// status.",
                "+//",
                "+// If the remote server does not send an exit status, an error of type",
                "+// *ExitMissingError is returned. If the command completes",
                "+// unsuccessfully or is interrupted by a signal, the error is of type",
                "+// *ExitError. Other error types may be returned for I/O problems.",
                "+func (s *Session) Run(cmd string) error {",
                "+\terr := s.Start(cmd)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\treturn s.Wait()",
                "+}",
                "+",
                "+// Output runs cmd on the remote host and returns its standard output.",
                "+func (s *Session) Output(cmd string) ([]byte, error) {",
                "+\tif s.Stdout != nil {",
                "+\t\treturn nil, errors.New(\"ssh: Stdout already set\")",
                "+\t}",
                "+\tvar b bytes.Buffer",
                "+\ts.Stdout = &b",
                "+\terr := s.Run(cmd)",
                "+\treturn b.Bytes(), err",
                "+}",
                "+",
                "+type singleWriter struct {",
                "+\tb  bytes.Buffer",
                "+\tmu sync.Mutex",
                "+}",
                "+",
                "+func (w *singleWriter) Write(p []byte) (int, error) {",
                "+\tw.mu.Lock()",
                "+\tdefer w.mu.Unlock()",
                "+\treturn w.b.Write(p)",
                "+}",
                "+",
                "+// CombinedOutput runs cmd on the remote host and returns its combined",
                "+// standard output and standard error.",
                "+func (s *Session) CombinedOutput(cmd string) ([]byte, error) {",
                "+\tif s.Stdout != nil {",
                "+\t\treturn nil, errors.New(\"ssh: Stdout already set\")",
                "+\t}",
                "+\tif s.Stderr != nil {",
                "+\t\treturn nil, errors.New(\"ssh: Stderr already set\")",
                "+\t}",
                "+\tvar b singleWriter",
                "+\ts.Stdout = &b",
                "+\ts.Stderr = &b",
                "+\terr := s.Run(cmd)",
                "+\treturn b.b.Bytes(), err",
                "+}",
                "+",
                "+// Shell starts a login shell on the remote host. A Session only",
                "+// accepts one call to Run, Start, Shell, Output, or CombinedOutput.",
                "+func (s *Session) Shell() error {",
                "+\tif s.started {",
                "+\t\treturn errors.New(\"ssh: session already started\")",
                "+\t}",
                "+",
                "+\tok, err := s.ch.SendRequest(\"shell\", true, nil)",
                "+\tif err == nil && !ok {",
                "+\t\treturn errors.New(\"ssh: could not start shell\")",
                "+\t}",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\treturn s.start()",
                "+}",
                "+",
                "+func (s *Session) start() error {",
                "+\ts.started = true",
                "+",
                "+\ttype F func(*Session)",
                "+\tfor _, setupFd := range []F{(*Session).stdin, (*Session).stdout, (*Session).stderr} {",
                "+\t\tsetupFd(s)",
                "+\t}",
                "+",
                "+\ts.errors = make(chan error, len(s.copyFuncs))",
                "+\tfor _, fn := range s.copyFuncs {",
                "+\t\tgo func(fn func() error) {",
                "+\t\t\ts.errors <- fn()",
                "+\t\t}(fn)",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+// Wait waits for the remote command to exit.",
                "+//",
                "+// The returned error is nil if the command runs, has no problems",
                "+// copying stdin, stdout, and stderr, and exits with a zero exit",
                "+// status.",
                "+//",
                "+// If the remote server does not send an exit status, an error of type",
                "+// *ExitMissingError is returned. If the command completes",
                "+// unsuccessfully or is interrupted by a signal, the error is of type",
                "+// *ExitError. Other error types may be returned for I/O problems.",
                "+func (s *Session) Wait() error {",
                "+\tif !s.started {",
                "+\t\treturn errors.New(\"ssh: session not started\")",
                "+\t}",
                "+\twaitErr := <-s.exitStatus",
                "+",
                "+\tif s.stdinPipeWriter != nil {",
                "+\t\ts.stdinPipeWriter.Close()",
                "+\t}",
                "+\tvar copyError error",
                "+\tfor _ = range s.copyFuncs {",
                "+\t\tif err := <-s.errors; err != nil && copyError == nil {",
                "+\t\t\tcopyError = err",
                "+\t\t}",
                "+\t}",
                "+\tif waitErr != nil {",
                "+\t\treturn waitErr",
                "+\t}",
                "+\treturn copyError",
                "+}",
                "+",
                "+func (s *Session) wait(reqs <-chan *Request) error {",
                "+\twm := Waitmsg{status: -1}",
                "+\t// Wait for msg channel to be closed before returning.",
                "+\tfor msg := range reqs {",
                "+\t\tswitch msg.Type {",
                "+\t\tcase \"exit-status\":",
                "+\t\t\twm.status = int(binary.BigEndian.Uint32(msg.Payload))",
                "+\t\tcase \"exit-signal\":",
                "+\t\t\tvar sigval struct {",
                "+\t\t\t\tSignal     string",
                "+\t\t\t\tCoreDumped bool",
                "+\t\t\t\tError      string",
                "+\t\t\t\tLang       string",
                "+\t\t\t}",
                "+\t\t\tif err := Unmarshal(msg.Payload, &sigval); err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+",
                "+\t\t\t// Must sanitize strings?",
                "+\t\t\twm.signal = sigval.Signal",
                "+\t\t\twm.msg = sigval.Error",
                "+\t\t\twm.lang = sigval.Lang",
                "+\t\tdefault:",
                "+\t\t\t// This handles keepalives and matches",
                "+\t\t\t// OpenSSH's behaviour.",
                "+\t\t\tif msg.WantReply {",
                "+\t\t\t\tmsg.Reply(false, nil)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+\tif wm.status == 0 {",
                "+\t\treturn nil",
                "+\t}",
                "+\tif wm.status == -1 {",
                "+\t\t// exit-status was never sent from server",
                "+\t\tif wm.signal == \"\" {",
                "+\t\t\t// signal was not sent either.  RFC 4254",
                "+\t\t\t// section 6.10 recommends against this",
                "+\t\t\t// behavior, but it is allowed, so we let",
                "+\t\t\t// clients handle it.",
                "+\t\t\treturn &ExitMissingError{}",
                "+\t\t}",
                "+\t\twm.status = 128",
                "+\t\tif _, ok := signals[Signal(wm.signal)]; ok {",
                "+\t\t\twm.status += signals[Signal(wm.signal)]",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn &ExitError{wm}",
                "+}",
                "+",
                "+// ExitMissingError is returned if a session is torn down cleanly, but",
                "+// the server sends no confirmation of the exit status.",
                "+type ExitMissingError struct{}",
                "+",
                "+func (e *ExitMissingError) Error() string {",
                "+\treturn \"wait: remote command exited without exit status or exit signal\"",
                "+}",
                "+",
                "+func (s *Session) stdin() {",
                "+\tif s.stdinpipe {",
                "+\t\treturn",
                "+\t}",
                "+\tvar stdin io.Reader",
                "+\tif s.Stdin == nil {",
                "+\t\tstdin = new(bytes.Buffer)",
                "+\t} else {",
                "+\t\tr, w := io.Pipe()",
                "+\t\tgo func() {",
                "+\t\t\t_, err := io.Copy(w, s.Stdin)",
                "+\t\t\tw.CloseWithError(err)",
                "+\t\t}()",
                "+\t\tstdin, s.stdinPipeWriter = r, w",
                "+\t}",
                "+\ts.copyFuncs = append(s.copyFuncs, func() error {",
                "+\t\t_, err := io.Copy(s.ch, stdin)",
                "+\t\tif err1 := s.ch.CloseWrite(); err == nil && err1 != io.EOF {",
                "+\t\t\terr = err1",
                "+\t\t}",
                "+\t\treturn err",
                "+\t})",
                "+}",
                "+",
                "+func (s *Session) stdout() {",
                "+\tif s.stdoutpipe {",
                "+\t\treturn",
                "+\t}",
                "+\tif s.Stdout == nil {",
                "+\t\ts.Stdout = ioutil.Discard",
                "+\t}",
                "+\ts.copyFuncs = append(s.copyFuncs, func() error {",
                "+\t\t_, err := io.Copy(s.Stdout, s.ch)",
                "+\t\treturn err",
                "+\t})",
                "+}",
                "+",
                "+func (s *Session) stderr() {",
                "+\tif s.stderrpipe {",
                "+\t\treturn",
                "+\t}",
                "+\tif s.Stderr == nil {",
                "+\t\ts.Stderr = ioutil.Discard",
                "+\t}",
                "+\ts.copyFuncs = append(s.copyFuncs, func() error {",
                "+\t\t_, err := io.Copy(s.Stderr, s.ch.Stderr())",
                "+\t\treturn err",
                "+\t})",
                "+}",
                "+",
                "+// sessionStdin reroutes Close to CloseWrite.",
                "+type sessionStdin struct {",
                "+\tio.Writer",
                "+\tch Channel",
                "+}",
                "+",
                "+func (s *sessionStdin) Close() error {",
                "+\treturn s.ch.CloseWrite()",
                "+}",
                "+",
                "+// StdinPipe returns a pipe that will be connected to the",
                "+// remote command's standard input when the command starts.",
                "+func (s *Session) StdinPipe() (io.WriteCloser, error) {",
                "+\tif s.Stdin != nil {",
                "+\t\treturn nil, errors.New(\"ssh: Stdin already set\")",
                "+\t}",
                "+\tif s.started {",
                "+\t\treturn nil, errors.New(\"ssh: StdinPipe after process started\")",
                "+\t}",
                "+\ts.stdinpipe = true",
                "+\treturn &sessionStdin{s.ch, s.ch}, nil",
                "+}",
                "+",
                "+// StdoutPipe returns a pipe that will be connected to the",
                "+// remote command's standard output when the command starts.",
                "+// There is a fixed amount of buffering that is shared between",
                "+// stdout and stderr streams. If the StdoutPipe reader is",
                "+// not serviced fast enough it may eventually cause the",
                "+// remote command to block.",
                "+func (s *Session) StdoutPipe() (io.Reader, error) {",
                "+\tif s.Stdout != nil {",
                "+\t\treturn nil, errors.New(\"ssh: Stdout already set\")",
                "+\t}",
                "+\tif s.started {",
                "+\t\treturn nil, errors.New(\"ssh: StdoutPipe after process started\")",
                "+\t}",
                "+\ts.stdoutpipe = true",
                "+\treturn s.ch, nil",
                "+}",
                "+",
                "+// StderrPipe returns a pipe that will be connected to the",
                "+// remote command's standard error when the command starts.",
                "+// There is a fixed amount of buffering that is shared between",
                "+// stdout and stderr streams. If the StderrPipe reader is",
                "+// not serviced fast enough it may eventually cause the",
                "+// remote command to block.",
                "+func (s *Session) StderrPipe() (io.Reader, error) {",
                "+\tif s.Stderr != nil {",
                "+\t\treturn nil, errors.New(\"ssh: Stderr already set\")",
                "+\t}",
                "+\tif s.started {",
                "+\t\treturn nil, errors.New(\"ssh: StderrPipe after process started\")",
                "+\t}",
                "+\ts.stderrpipe = true",
                "+\treturn s.ch.Stderr(), nil",
                "+}",
                "+",
                "+// newSession returns a new interactive session on the remote host.",
                "+func newSession(ch Channel, reqs <-chan *Request) (*Session, error) {",
                "+\ts := &Session{",
                "+\t\tch: ch,",
                "+\t}",
                "+\ts.exitStatus = make(chan error, 1)",
                "+\tgo func() {",
                "+\t\ts.exitStatus <- s.wait(reqs)",
                "+\t}()",
                "+",
                "+\treturn s, nil",
                "+}",
                "+",
                "+// An ExitError reports unsuccessful completion of a remote command.",
                "+type ExitError struct {",
                "+\tWaitmsg",
                "+}",
                "+",
                "+func (e *ExitError) Error() string {",
                "+\treturn e.Waitmsg.String()",
                "+}",
                "+",
                "+// Waitmsg stores the information about an exited remote command",
                "+// as reported by Wait.",
                "+type Waitmsg struct {",
                "+\tstatus int",
                "+\tsignal string",
                "+\tmsg    string",
                "+\tlang   string",
                "+}",
                "+",
                "+// ExitStatus returns the exit status of the remote command.",
                "+func (w Waitmsg) ExitStatus() int {",
                "+\treturn w.status",
                "+}",
                "+",
                "+// Signal returns the exit signal of the remote command if",
                "+// it was terminated violently.",
                "+func (w Waitmsg) Signal() string {",
                "+\treturn w.signal",
                "+}",
                "+",
                "+// Msg returns the exit message given by the remote command",
                "+func (w Waitmsg) Msg() string {",
                "+\treturn w.msg",
                "+}",
                "+",
                "+// Lang returns the language tag. See RFC 3066",
                "+func (w Waitmsg) Lang() string {",
                "+\treturn w.lang",
                "+}",
                "+",
                "+func (w Waitmsg) String() string {",
                "+\tstr := fmt.Sprintf(\"Process exited with status %v\", w.status)",
                "+\tif w.signal != \"\" {",
                "+\t\tstr += fmt.Sprintf(\" from signal %v\", w.signal)",
                "+\t}",
                "+\tif w.msg != \"\" {",
                "+\t\tstr += fmt.Sprintf(\". Reason was: %v\", w.msg)",
                "+\t}",
                "+\treturn str",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/streamlocal.go b/vendor/golang.org/x/crypto/ssh/streamlocal.go",
                "new file mode 100644",
                "index 000000000..a2dccc64c",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/streamlocal.go",
                "@@ -0,0 +1,115 @@",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"errors\"",
                "+\t\"io\"",
                "+\t\"net\"",
                "+)",
                "+",
                "+// streamLocalChannelOpenDirectMsg is a struct used for SSH_MSG_CHANNEL_OPEN message",
                "+// with \"direct-streamlocal@openssh.com\" string.",
                "+//",
                "+// See openssh-portable/PROTOCOL, section 2.4. connection: Unix domain socket forwarding",
                "+// https://github.com/openssh/openssh-portable/blob/master/PROTOCOL#L235",
                "+type streamLocalChannelOpenDirectMsg struct {",
                "+\tsocketPath string",
                "+\treserved0  string",
                "+\treserved1  uint32",
                "+}",
                "+",
                "+// forwardedStreamLocalPayload is a struct used for SSH_MSG_CHANNEL_OPEN message",
                "+// with \"forwarded-streamlocal@openssh.com\" string.",
                "+type forwardedStreamLocalPayload struct {",
                "+\tSocketPath string",
                "+\tReserved0  string",
                "+}",
                "+",
                "+// streamLocalChannelForwardMsg is a struct used for SSH2_MSG_GLOBAL_REQUEST message",
                "+// with \"streamlocal-forward@openssh.com\"/\"cancel-streamlocal-forward@openssh.com\" string.",
                "+type streamLocalChannelForwardMsg struct {",
                "+\tsocketPath string",
                "+}",
                "+",
                "+// ListenUnix is similar to ListenTCP but uses a Unix domain socket.",
                "+func (c *Client) ListenUnix(socketPath string) (net.Listener, error) {",
                "+\tm := streamLocalChannelForwardMsg{",
                "+\t\tsocketPath,",
                "+\t}",
                "+\t// send message",
                "+\tok, _, err := c.SendRequest(\"streamlocal-forward@openssh.com\", true, Marshal(&m))",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif !ok {",
                "+\t\treturn nil, errors.New(\"ssh: streamlocal-forward@openssh.com request denied by peer\")",
                "+\t}",
                "+\tch := c.forwards.add(&net.UnixAddr{Name: socketPath, Net: \"unix\"})",
                "+",
                "+\treturn &unixListener{socketPath, c, ch}, nil",
                "+}",
                "+",
                "+func (c *Client) dialStreamLocal(socketPath string) (Channel, error) {",
                "+\tmsg := streamLocalChannelOpenDirectMsg{",
                "+\t\tsocketPath: socketPath,",
                "+\t}",
                "+\tch, in, err := c.OpenChannel(\"direct-streamlocal@openssh.com\", Marshal(&msg))",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tgo DiscardRequests(in)",
                "+\treturn ch, err",
                "+}",
                "+",
                "+type unixListener struct {",
                "+\tsocketPath string",
                "+",
                "+\tconn *Client",
                "+\tin   <-chan forward",
                "+}",
                "+",
                "+// Accept waits for and returns the next connection to the listener.",
                "+func (l *unixListener) Accept() (net.Conn, error) {",
                "+\ts, ok := <-l.in",
                "+\tif !ok {",
                "+\t\treturn nil, io.EOF",
                "+\t}",
                "+\tch, incoming, err := s.newCh.Accept()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tgo DiscardRequests(incoming)",
                "+",
                "+\treturn &chanConn{",
                "+\t\tChannel: ch,",
                "+\t\tladdr: &net.UnixAddr{",
                "+\t\t\tName: l.socketPath,",
                "+\t\t\tNet:  \"unix\",",
                "+\t\t},",
                "+\t\traddr: &net.UnixAddr{",
                "+\t\t\tName: \"@\",",
                "+\t\t\tNet:  \"unix\",",
                "+\t\t},",
                "+\t}, nil",
                "+}",
                "+",
                "+// Close closes the listener.",
                "+func (l *unixListener) Close() error {",
                "+\t// this also closes the listener.",
                "+\tl.conn.forwards.remove(&net.UnixAddr{Name: l.socketPath, Net: \"unix\"})",
                "+\tm := streamLocalChannelForwardMsg{",
                "+\t\tl.socketPath,",
                "+\t}",
                "+\tok, _, err := l.conn.SendRequest(\"cancel-streamlocal-forward@openssh.com\", true, Marshal(&m))",
                "+\tif err == nil && !ok {",
                "+\t\terr = errors.New(\"ssh: cancel-streamlocal-forward@openssh.com failed\")",
                "+\t}",
                "+\treturn err",
                "+}",
                "+",
                "+// Addr returns the listener's network address.",
                "+func (l *unixListener) Addr() net.Addr {",
                "+\treturn &net.UnixAddr{",
                "+\t\tName: l.socketPath,",
                "+\t\tNet:  \"unix\",",
                "+\t}",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/tcpip.go b/vendor/golang.org/x/crypto/ssh/tcpip.go",
                "new file mode 100644",
                "index 000000000..acf17175d",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/tcpip.go",
                "@@ -0,0 +1,465 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io\"",
                "+\t\"math/rand\"",
                "+\t\"net\"",
                "+\t\"strconv\"",
                "+\t\"strings\"",
                "+\t\"sync\"",
                "+\t\"time\"",
                "+)",
                "+",
                "+// Listen requests the remote peer open a listening socket on",
                "+// addr. Incoming connections will be available by calling Accept on",
                "+// the returned net.Listener. The listener must be serviced, or the",
                "+// SSH connection may hang.",
                "+// N must be \"tcp\", \"tcp4\", \"tcp6\", or \"unix\".",
                "+func (c *Client) Listen(n, addr string) (net.Listener, error) {",
                "+\tswitch n {",
                "+\tcase \"tcp\", \"tcp4\", \"tcp6\":",
                "+\t\tladdr, err := net.ResolveTCPAddr(n, addr)",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\treturn c.ListenTCP(laddr)",
                "+\tcase \"unix\":",
                "+\t\treturn c.ListenUnix(addr)",
                "+\tdefault:",
                "+\t\treturn nil, fmt.Errorf(\"ssh: unsupported protocol: %s\", n)",
                "+\t}",
                "+}",
                "+",
                "+// Automatic port allocation is broken with OpenSSH before 6.0. See",
                "+// also https://bugzilla.mindrot.org/show_bug.cgi?id=2017.  In",
                "+// particular, OpenSSH 5.9 sends a channelOpenMsg with port number 0,",
                "+// rather than the actual port number. This means you can never open",
                "+// two different listeners with auto allocated ports. We work around",
                "+// this by trying explicit ports until we succeed.",
                "+",
                "+const openSSHPrefix = \"OpenSSH_\"",
                "+",
                "+var portRandomizer = rand.New(rand.NewSource(time.Now().UnixNano()))",
                "+",
                "+// isBrokenOpenSSHVersion returns true if the given version string",
                "+// specifies a version of OpenSSH that is known to have a bug in port",
                "+// forwarding.",
                "+func isBrokenOpenSSHVersion(versionStr string) bool {",
                "+\ti := strings.Index(versionStr, openSSHPrefix)",
                "+\tif i < 0 {",
                "+\t\treturn false",
                "+\t}",
                "+\ti += len(openSSHPrefix)",
                "+\tj := i",
                "+\tfor ; j < len(versionStr); j++ {",
                "+\t\tif versionStr[j] < '0' || versionStr[j] > '9' {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+\tversion, _ := strconv.Atoi(versionStr[i:j])",
                "+\treturn version < 6",
                "+}",
                "+",
                "+// autoPortListenWorkaround simulates automatic port allocation by",
                "+// trying random ports repeatedly.",
                "+func (c *Client) autoPortListenWorkaround(laddr *net.TCPAddr) (net.Listener, error) {",
                "+\tvar sshListener net.Listener",
                "+\tvar err error",
                "+\tconst tries = 10",
                "+\tfor i := 0; i < tries; i++ {",
                "+\t\taddr := *laddr",
                "+\t\taddr.Port = 1024 + portRandomizer.Intn(60000)",
                "+\t\tsshListener, err = c.ListenTCP(&addr)",
                "+\t\tif err == nil {",
                "+\t\t\tladdr.Port = addr.Port",
                "+\t\t\treturn sshListener, err",
                "+\t\t}",
                "+\t}",
                "+\treturn nil, fmt.Errorf(\"ssh: listen on random port failed after %d tries: %v\", tries, err)",
                "+}",
                "+",
                "+// RFC 4254 7.1",
                "+type channelForwardMsg struct {",
                "+\taddr  string",
                "+\trport uint32",
                "+}",
                "+",
                "+// ListenTCP requests the remote peer open a listening socket",
                "+// on laddr. Incoming connections will be available by calling",
                "+// Accept on the returned net.Listener.",
                "+func (c *Client) ListenTCP(laddr *net.TCPAddr) (net.Listener, error) {",
                "+\tif laddr.Port == 0 && isBrokenOpenSSHVersion(string(c.ServerVersion())) {",
                "+\t\treturn c.autoPortListenWorkaround(laddr)",
                "+\t}",
                "+",
                "+\tm := channelForwardMsg{",
                "+\t\tladdr.IP.String(),",
                "+\t\tuint32(laddr.Port),",
                "+\t}",
                "+\t// send message",
                "+\tok, resp, err := c.SendRequest(\"tcpip-forward\", true, Marshal(&m))",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif !ok {",
                "+\t\treturn nil, errors.New(\"ssh: tcpip-forward request denied by peer\")",
                "+\t}",
                "+",
                "+\t// If the original port was 0, then the remote side will",
                "+\t// supply a real port number in the response.",
                "+\tif laddr.Port == 0 {",
                "+\t\tvar p struct {",
                "+\t\t\tPort uint32",
                "+\t\t}",
                "+\t\tif err := Unmarshal(resp, &p); err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\tladdr.Port = int(p.Port)",
                "+\t}",
                "+",
                "+\t// Register this forward, using the port number we obtained.",
                "+\tch := c.forwards.add(laddr)",
                "+",
                "+\treturn &tcpListener{laddr, c, ch}, nil",
                "+}",
                "+",
                "+// forwardList stores a mapping between remote",
                "+// forward requests and the tcpListeners.",
                "+type forwardList struct {",
                "+\tsync.Mutex",
                "+\tentries []forwardEntry",
                "+}",
                "+",
                "+// forwardEntry represents an established mapping of a laddr on a",
                "+// remote ssh server to a channel connected to a tcpListener.",
                "+type forwardEntry struct {",
                "+\tladdr net.Addr",
                "+\tc     chan forward",
                "+}",
                "+",
                "+// forward represents an incoming forwarded tcpip connection. The",
                "+// arguments to add/remove/lookup should be address as specified in",
                "+// the original forward-request.",
                "+type forward struct {",
                "+\tnewCh NewChannel // the ssh client channel underlying this forward",
                "+\traddr net.Addr   // the raddr of the incoming connection",
                "+}",
                "+",
                "+func (l *forwardList) add(addr net.Addr) chan forward {",
                "+\tl.Lock()",
                "+\tdefer l.Unlock()",
                "+\tf := forwardEntry{",
                "+\t\tladdr: addr,",
                "+\t\tc:     make(chan forward, 1),",
                "+\t}",
                "+\tl.entries = append(l.entries, f)",
                "+\treturn f.c",
                "+}",
                "+",
                "+// See RFC 4254, section 7.2",
                "+type forwardedTCPPayload struct {",
                "+\tAddr       string",
                "+\tPort       uint32",
                "+\tOriginAddr string",
                "+\tOriginPort uint32",
                "+}",
                "+",
                "+// parseTCPAddr parses the originating address from the remote into a *net.TCPAddr.",
                "+func parseTCPAddr(addr string, port uint32) (*net.TCPAddr, error) {",
                "+\tif port == 0 || port > 65535 {",
                "+\t\treturn nil, fmt.Errorf(\"ssh: port number out of range: %d\", port)",
                "+\t}",
                "+\tip := net.ParseIP(string(addr))",
                "+\tif ip == nil {",
                "+\t\treturn nil, fmt.Errorf(\"ssh: cannot parse IP address %q\", addr)",
                "+\t}",
                "+\treturn &net.TCPAddr{IP: ip, Port: int(port)}, nil",
                "+}",
                "+",
                "+func (l *forwardList) handleChannels(in <-chan NewChannel) {",
                "+\tfor ch := range in {",
                "+\t\tvar (",
                "+\t\t\tladdr net.Addr",
                "+\t\t\traddr net.Addr",
                "+\t\t\terr   error",
                "+\t\t)",
                "+\t\tswitch channelType := ch.ChannelType(); channelType {",
                "+\t\tcase \"forwarded-tcpip\":",
                "+\t\t\tvar payload forwardedTCPPayload",
                "+\t\t\tif err = Unmarshal(ch.ExtraData(), &payload); err != nil {",
                "+\t\t\t\tch.Reject(ConnectionFailed, \"could not parse forwarded-tcpip payload: \"+err.Error())",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+",
                "+\t\t\t// RFC 4254 section 7.2 specifies that incoming",
                "+\t\t\t// addresses should list the address, in string",
                "+\t\t\t// format. It is implied that this should be an IP",
                "+\t\t\t// address, as it would be impossible to connect to it",
                "+\t\t\t// otherwise.",
                "+\t\t\tladdr, err = parseTCPAddr(payload.Addr, payload.Port)",
                "+\t\t\tif err != nil {",
                "+\t\t\t\tch.Reject(ConnectionFailed, err.Error())",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\traddr, err = parseTCPAddr(payload.OriginAddr, payload.OriginPort)",
                "+\t\t\tif err != nil {",
                "+\t\t\t\tch.Reject(ConnectionFailed, err.Error())",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+",
                "+\t\tcase \"forwarded-streamlocal@openssh.com\":",
                "+\t\t\tvar payload forwardedStreamLocalPayload",
                "+\t\t\tif err = Unmarshal(ch.ExtraData(), &payload); err != nil {",
                "+\t\t\t\tch.Reject(ConnectionFailed, \"could not parse forwarded-streamlocal@openssh.com payload: \"+err.Error())",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\tladdr = &net.UnixAddr{",
                "+\t\t\t\tName: payload.SocketPath,",
                "+\t\t\t\tNet:  \"unix\",",
                "+\t\t\t}",
                "+\t\t\traddr = &net.UnixAddr{",
                "+\t\t\t\tName: \"@\",",
                "+\t\t\t\tNet:  \"unix\",",
                "+\t\t\t}",
                "+\t\tdefault:",
                "+\t\t\tpanic(fmt.Errorf(\"ssh: unknown channel type %s\", channelType))",
                "+\t\t}",
                "+\t\tif ok := l.forward(laddr, raddr, ch); !ok {",
                "+\t\t\t// Section 7.2, implementations MUST reject spurious incoming",
                "+\t\t\t// connections.",
                "+\t\t\tch.Reject(Prohibited, \"no forward for address\")",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t}",
                "+}",
                "+",
                "+// remove removes the forward entry, and the channel feeding its",
                "+// listener.",
                "+func (l *forwardList) remove(addr net.Addr) {",
                "+\tl.Lock()",
                "+\tdefer l.Unlock()",
                "+\tfor i, f := range l.entries {",
                "+\t\tif addr.Network() == f.laddr.Network() && addr.String() == f.laddr.String() {",
                "+\t\t\tl.entries = append(l.entries[:i], l.entries[i+1:]...)",
                "+\t\t\tclose(f.c)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// closeAll closes and clears all forwards.",
                "+func (l *forwardList) closeAll() {",
                "+\tl.Lock()",
                "+\tdefer l.Unlock()",
                "+\tfor _, f := range l.entries {",
                "+\t\tclose(f.c)",
                "+\t}",
                "+\tl.entries = nil",
                "+}",
                "+",
                "+func (l *forwardList) forward(laddr, raddr net.Addr, ch NewChannel) bool {",
                "+\tl.Lock()",
                "+\tdefer l.Unlock()",
                "+\tfor _, f := range l.entries {",
                "+\t\tif laddr.Network() == f.laddr.Network() && laddr.String() == f.laddr.String() {",
                "+\t\t\tf.c <- forward{newCh: ch, raddr: raddr}",
                "+\t\t\treturn true",
                "+\t\t}",
                "+\t}",
                "+\treturn false",
                "+}",
                "+",
                "+type tcpListener struct {",
                "+\tladdr *net.TCPAddr",
                "+",
                "+\tconn *Client",
                "+\tin   <-chan forward",
                "+}",
                "+",
                "+// Accept waits for and returns the next connection to the listener.",
                "+func (l *tcpListener) Accept() (net.Conn, error) {",
                "+\ts, ok := <-l.in",
                "+\tif !ok {",
                "+\t\treturn nil, io.EOF",
                "+\t}",
                "+\tch, incoming, err := s.newCh.Accept()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tgo DiscardRequests(incoming)",
                "+",
                "+\treturn &chanConn{",
                "+\t\tChannel: ch,",
                "+\t\tladdr:   l.laddr,",
                "+\t\traddr:   s.raddr,",
                "+\t}, nil",
                "+}",
                "+",
                "+// Close closes the listener.",
                "+func (l *tcpListener) Close() error {",
                "+\tm := channelForwardMsg{",
                "+\t\tl.laddr.IP.String(),",
                "+\t\tuint32(l.laddr.Port),",
                "+\t}",
                "+",
                "+\t// this also closes the listener.",
                "+\tl.conn.forwards.remove(l.laddr)",
                "+\tok, _, err := l.conn.SendRequest(\"cancel-tcpip-forward\", true, Marshal(&m))",
                "+\tif err == nil && !ok {",
                "+\t\terr = errors.New(\"ssh: cancel-tcpip-forward failed\")",
                "+\t}",
                "+\treturn err",
                "+}",
                "+",
                "+// Addr returns the listener's network address.",
                "+func (l *tcpListener) Addr() net.Addr {",
                "+\treturn l.laddr",
                "+}",
                "+",
                "+// Dial initiates a connection to the addr from the remote host.",
                "+// The resulting connection has a zero LocalAddr() and RemoteAddr().",
                "+func (c *Client) Dial(n, addr string) (net.Conn, error) {",
                "+\tvar ch Channel",
                "+\tswitch n {",
                "+\tcase \"tcp\", \"tcp4\", \"tcp6\":",
                "+\t\t// Parse the address into host and numeric port.",
                "+\t\thost, portString, err := net.SplitHostPort(addr)",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\tport, err := strconv.ParseUint(portString, 10, 16)",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\tch, err = c.dial(net.IPv4zero.String(), 0, host, int(port))",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\t// Use a zero address for local and remote address.",
                "+\t\tzeroAddr := &net.TCPAddr{",
                "+\t\t\tIP:   net.IPv4zero,",
                "+\t\t\tPort: 0,",
                "+\t\t}",
                "+\t\treturn &chanConn{",
                "+\t\t\tChannel: ch,",
                "+\t\t\tladdr:   zeroAddr,",
                "+\t\t\traddr:   zeroAddr,",
                "+\t\t}, nil",
                "+\tcase \"unix\":",
                "+\t\tvar err error",
                "+\t\tch, err = c.dialStreamLocal(addr)",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\treturn &chanConn{",
                "+\t\t\tChannel: ch,",
                "+\t\t\tladdr: &net.UnixAddr{",
                "+\t\t\t\tName: \"@\",",
                "+\t\t\t\tNet:  \"unix\",",
                "+\t\t\t},",
                "+\t\t\traddr: &net.UnixAddr{",
                "+\t\t\t\tName: addr,",
                "+\t\t\t\tNet:  \"unix\",",
                "+\t\t\t},",
                "+\t\t}, nil",
                "+\tdefault:",
                "+\t\treturn nil, fmt.Errorf(\"ssh: unsupported protocol: %s\", n)",
                "+\t}",
                "+}",
                "+",
                "+// DialTCP connects to the remote address raddr on the network net,",
                "+// which must be \"tcp\", \"tcp4\", or \"tcp6\".  If laddr is not nil, it is used",
                "+// as the local address for the connection.",
                "+func (c *Client) DialTCP(n string, laddr, raddr *net.TCPAddr) (net.Conn, error) {",
                "+\tif laddr == nil {",
                "+\t\tladdr = &net.TCPAddr{",
                "+\t\t\tIP:   net.IPv4zero,",
                "+\t\t\tPort: 0,",
                "+\t\t}",
                "+\t}",
                "+\tch, err := c.dial(laddr.IP.String(), laddr.Port, raddr.IP.String(), raddr.Port)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn &chanConn{",
                "+\t\tChannel: ch,",
                "+\t\tladdr:   laddr,",
                "+\t\traddr:   raddr,",
                "+\t}, nil",
                "+}",
                "+",
                "+// RFC 4254 7.2",
                "+type channelOpenDirectMsg struct {",
                "+\traddr string",
                "+\trport uint32",
                "+\tladdr string",
                "+\tlport uint32",
                "+}",
                "+",
                "+func (c *Client) dial(laddr string, lport int, raddr string, rport int) (Channel, error) {",
                "+\tmsg := channelOpenDirectMsg{",
                "+\t\traddr: raddr,",
                "+\t\trport: uint32(rport),",
                "+\t\tladdr: laddr,",
                "+\t\tlport: uint32(lport),",
                "+\t}",
                "+\tch, in, err := c.OpenChannel(\"direct-tcpip\", Marshal(&msg))",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tgo DiscardRequests(in)",
                "+\treturn ch, err",
                "+}",
                "+",
                "+type tcpChan struct {",
                "+\tChannel // the backing channel",
                "+}",
                "+",
                "+// chanConn fulfills the net.Conn interface without",
                "+// the tcpChan having to hold laddr or raddr directly.",
                "+type chanConn struct {",
                "+\tChannel",
                "+\tladdr, raddr net.Addr",
                "+}",
                "+",
                "+// LocalAddr returns the local network address.",
                "+func (t *chanConn) LocalAddr() net.Addr {",
                "+\treturn t.laddr",
                "+}",
                "+",
                "+// RemoteAddr returns the remote network address.",
                "+func (t *chanConn) RemoteAddr() net.Addr {",
                "+\treturn t.raddr",
                "+}",
                "+",
                "+// SetDeadline sets the read and write deadlines associated",
                "+// with the connection.",
                "+func (t *chanConn) SetDeadline(deadline time.Time) error {",
                "+\tif err := t.SetReadDeadline(deadline); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\treturn t.SetWriteDeadline(deadline)",
                "+}",
                "+",
                "+// SetReadDeadline sets the read deadline.",
                "+// A zero value for t means Read will not time out.",
                "+// After the deadline, the error from Read will implement net.Error",
                "+// with Timeout() == true.",
                "+func (t *chanConn) SetReadDeadline(deadline time.Time) error {",
                "+\t// for compatibility with previous version,",
                "+\t// the error message contains \"tcpChan\"",
                "+\treturn errors.New(\"ssh: tcpChan: deadline not supported\")",
                "+}",
                "+",
                "+// SetWriteDeadline exists to satisfy the net.Conn interface",
                "+// but is not implemented by this type.  It always returns an error.",
                "+func (t *chanConn) SetWriteDeadline(deadline time.Time) error {",
                "+\treturn errors.New(\"ssh: tcpChan: deadline not supported\")",
                "+}",
                "diff --git a/vendor/golang.org/x/crypto/ssh/transport.go b/vendor/golang.org/x/crypto/ssh/transport.go",
                "new file mode 100644",
                "index 000000000..f9780e0ae",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/crypto/ssh/transport.go",
                "@@ -0,0 +1,375 @@",
                "+// Copyright 2011 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package ssh",
                "+",
                "+import (",
                "+\t\"bufio\"",
                "+\t\"errors\"",
                "+\t\"io\"",
                "+\t\"log\"",
                "+)",
                "+",
                "+// debugTransport if set, will print packet types as they go over the",
                "+// wire. No message decoding is done, to minimize the impact on timing.",
                "+const debugTransport = false",
                "+",
                "+const (",
                "+\tgcmCipherID    = \"aes128-gcm@openssh.com\"",
                "+\taes128cbcID    = \"aes128-cbc\"",
                "+\ttripledescbcID = \"3des-cbc\"",
                "+)",
                "+",
                "+// packetConn represents a transport that implements packet based",
                "+// operations.",
                "+type packetConn interface {",
                "+\t// Encrypt and send a packet of data to the remote peer.",
                "+\twritePacket(packet []byte) error",
                "+",
                "+\t// Read a packet from the connection. The read is blocking,",
                "+\t// i.e. if error is nil, then the returned byte slice is",
                "+\t// always non-empty.",
                "+\treadPacket() ([]byte, error)",
                "+",
                "+\t// Close closes the write-side of the connection.",
                "+\tClose() error",
                "+}",
                "+",
                "+// transport is the keyingTransport that implements the SSH packet",
                "+// protocol.",
                "+type transport struct {",
                "+\treader connectionState",
                "+\twriter connectionState",
                "+",
                "+\tbufReader *bufio.Reader",
                "+\tbufWriter *bufio.Writer",
                "+\trand      io.Reader",
                "+\tisClient  bool",
                "+\tio.Closer",
                "+}",
                "+",
                "+// packetCipher represents a combination of SSH encryption/MAC",
                "+// protocol.  A single instance should be used for one direction only.",
                "+type packetCipher interface {",
                "+\t// writePacket encrypts the packet and writes it to w. The",
                "+\t// contents of the packet are generally scrambled.",
                "+\twritePacket(seqnum uint32, w io.Writer, rand io.Reader, packet []byte) error",
                "+",
                "+\t// readPacket reads and decrypts a packet of data. The",
                "+\t// returned packet may be overwritten by future calls of",
                "+\t// readPacket.",
                "+\treadPacket(seqnum uint32, r io.Reader) ([]byte, error)",
                "+}",
                "+",
                "+// connectionState represents one side (read or write) of the",
                "+// connection. This is necessary because each direction has its own",
                "+// keys, and can even have its own algorithms",
                "+type connectionState struct {",
                "+\tpacketCipher",
                "+\tseqNum           uint32",
                "+\tdir              direction",
                "+\tpendingKeyChange chan packetCipher",
                "+}",
                "+",
                "+// prepareKeyChange sets up key material for a keychange. The key changes in",
                "+// both directions are triggered by reading and writing a msgNewKey packet",
                "+// respectively.",
                "+func (t *transport) prepareKeyChange(algs *algorithms, kexResult *kexResult) error {",
                "+\tif ciph, err := newPacketCipher(t.reader.dir, algs.r, kexResult); err != nil {",
                "+\t\treturn err",
                "+\t} else {",
                "+\t\tt.reader.pendingKeyChange <- ciph",
                "+\t}",
                "+",
                "+\tif ciph, err := newPacketCipher(t.writer.dir, algs.w, kexResult); err != nil {",
                "+\t\treturn err",
                "+\t} else {",
                "+\t\tt.writer.pendingKeyChange <- ciph",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (t *transport) printPacket(p []byte, write bool) {",
                "+\tif len(p) == 0 {",
                "+\t\treturn",
                "+\t}",
                "+\twho := \"server\"",
                "+\tif t.isClient {",
                "+\t\twho = \"client\"",
                "+\t}",
                "+\twhat := \"read\"",
                "+\tif write {",
                "+\t\twhat = \"write\"",
                "+\t}",
                "+",
                "+\tlog.Println(what, who, p[0])",
                "+}",
                "+",
                "+// Read and decrypt next packet.",
                "+func (t *transport) readPacket() (p []byte, err error) {",
                "+\tfor {",
                "+\t\tp, err = t.reader.readPacket(t.bufReader)",
                "+\t\tif err != nil {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\tif len(p) == 0 || (p[0] != msgIgnore && p[0] != msgDebug) {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+\tif debugTransport {",
                "+\t\tt.printPacket(p, false)",
                "+\t}",
                "+",
                "+\treturn p, err",
                "+}",
                "+",
                "+func (s *connectionState) readPacket(r *bufio.Reader) ([]byte, error) {",
                "+\tpacket, err := s.packetCipher.readPacket(s.seqNum, r)",
                "+\ts.seqNum++",
                "+\tif err == nil && len(packet) == 0 {",
                "+\t\terr = errors.New(\"ssh: zero length packet\")",
                "+\t}",
                "+",
                "+\tif len(packet) > 0 {",
                "+\t\tswitch packet[0] {",
                "+\t\tcase msgNewKeys:",
                "+\t\t\tselect {",
                "+\t\t\tcase cipher := <-s.pendingKeyChange:",
                "+\t\t\t\ts.packetCipher = cipher",
                "+\t\t\tdefault:",
                "+\t\t\t\treturn nil, errors.New(\"ssh: got bogus newkeys message.\")",
                "+\t\t\t}",
                "+",
                "+\t\tcase msgDisconnect:",
                "+\t\t\t// Transform a disconnect message into an",
                "+\t\t\t// error. Since this is lowest level at which",
                "+\t\t\t// we interpret message types, doing it here",
                "+\t\t\t// ensures that we don't have to handle it",
                "+\t\t\t// elsewhere.",
                "+\t\t\tvar msg disconnectMsg",
                "+\t\t\tif err := Unmarshal(packet, &msg); err != nil {",
                "+\t\t\t\treturn nil, err",
                "+\t\t\t}",
                "+\t\t\treturn nil, &msg",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// The packet may point to an internal buffer, so copy the",
                "+\t// packet out here.",
                "+\tfresh := make([]byte, len(packet))",
                "+\tcopy(fresh, packet)",
                "+",
                "+\treturn fresh, err",
                "+}",
                "+",
                "+func (t *transport) writePacket(packet []byte) error {",
                "+\tif debugTransport {",
                "+\t\tt.printPacket(packet, true)",
                "+\t}",
                "+\treturn t.writer.writePacket(t.bufWriter, t.rand, packet)",
                "+}",
                "+",
                "+func (s *connectionState) writePacket(w *bufio.Writer, rand io.Reader, packet []byte) error {",
                "+\tchangeKeys := len(packet) > 0 && packet[0] == msgNewKeys",
                "+",
                "+\terr := s.packetCipher.writePacket(s.seqNum, w, rand, packet)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tif err = w.Flush(); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\ts.seqNum++",
                "+\tif changeKeys {",
                "+\t\tselect {",
                "+\t\tcase cipher := <-s.pendingKeyChange:",
                "+\t\t\ts.packetCipher = cipher",
                "+\t\tdefault:",
                "+\t\t\tpanic(\"ssh: no key material for msgNewKeys\")",
                "+\t\t}",
                "+\t}",
                "+\treturn err",
                "+}",
                "+",
                "+func newTransport(rwc io.ReadWriteCloser, rand io.Reader, isClient bool) *transport {",
                "+\tt := &transport{",
                "+\t\tbufReader: bufio.NewReader(rwc),",
                "+\t\tbufWriter: bufio.NewWriter(rwc),",
                "+\t\trand:      rand,",
                "+\t\treader: connectionState{",
                "+\t\t\tpacketCipher:     &streamPacketCipher{cipher: noneCipher{}},",
                "+\t\t\tpendingKeyChange: make(chan packetCipher, 1),",
                "+\t\t},",
                "+\t\twriter: connectionState{",
                "+\t\t\tpacketCipher:     &streamPacketCipher{cipher: noneCipher{}},",
                "+\t\t\tpendingKeyChange: make(chan packetCipher, 1),",
                "+\t\t},",
                "+\t\tCloser: rwc,",
                "+\t}",
                "+\tt.isClient = isClient",
                "+",
                "+\tif isClient {",
                "+\t\tt.reader.dir = serverKeys",
                "+\t\tt.writer.dir = clientKeys",
                "+\t} else {",
                "+\t\tt.reader.dir = clientKeys",
                "+\t\tt.writer.dir = serverKeys",
                "+\t}",
                "+",
                "+\treturn t",
                "+}",
                "+",
                "+type direction struct {",
                "+\tivTag     []byte",
                "+\tkeyTag    []byte",
                "+\tmacKeyTag []byte",
                "+}",
                "+",
                "+var (",
                "+\tserverKeys = direction{[]byte{'B'}, []byte{'D'}, []byte{'F'}}",
                "+\tclientKeys = direction{[]byte{'A'}, []byte{'C'}, []byte{'E'}}",
                "+)",
                "+",
                "+// generateKeys generates key material for IV, MAC and encryption.",
                "+func generateKeys(d direction, algs directionAlgorithms, kex *kexResult) (iv, key, macKey []byte) {",
                "+\tcipherMode := cipherModes[algs.Cipher]",
                "+\tmacMode := macModes[algs.MAC]",
                "+",
                "+\tiv = make([]byte, cipherMode.ivSize)",
                "+\tkey = make([]byte, cipherMode.keySize)",
                "+\tmacKey = make([]byte, macMode.keySize)",
                "+",
                "+\tgenerateKeyMaterial(iv, d.ivTag, kex)",
                "+\tgenerateKeyMaterial(key, d.keyTag, kex)",
                "+\tgenerateKeyMaterial(macKey, d.macKeyTag, kex)",
                "+\treturn",
                "+}",
                "+",
                "+// setupKeys sets the cipher and MAC keys from kex.K, kex.H and sessionId, as",
                "+// described in RFC 4253, section 6.4. direction should either be serverKeys",
                "+// (to setup server->client keys) or clientKeys (for client->server keys).",
                "+func newPacketCipher(d direction, algs directionAlgorithms, kex *kexResult) (packetCipher, error) {",
                "+\tiv, key, macKey := generateKeys(d, algs, kex)",
                "+",
                "+\tif algs.Cipher == gcmCipherID {",
                "+\t\treturn newGCMCipher(iv, key, macKey)",
                "+\t}",
                "+",
                "+\tif algs.Cipher == aes128cbcID {",
                "+\t\treturn newAESCBCCipher(iv, key, macKey, algs)",
                "+\t}",
                "+",
                "+\tif algs.Cipher == tripledescbcID {",
                "+\t\treturn newTripleDESCBCCipher(iv, key, macKey, algs)",
                "+\t}",
                "+",
                "+\tc := &streamPacketCipher{",
                "+\t\tmac: macModes[algs.MAC].new(macKey),",
                "+\t\tetm: macModes[algs.MAC].etm,",
                "+\t}",
                "+\tc.macResult = make([]byte, c.mac.Size())",
                "+",
                "+\tvar err error",
                "+\tc.cipher, err = cipherModes[algs.Cipher].createStream(key, iv)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn c, nil",
                "+}",
                "+",
                "+// generateKeyMaterial fills out with key material generated from tag, K, H",
                "+// and sessionId, as specified in RFC 4253, section 7.2.",
                "+func generateKeyMaterial(out, tag []byte, r *kexResult) {",
                "+\tvar digestsSoFar []byte",
                "+",
                "+\th := r.Hash.New()",
                "+\tfor len(out) > 0 {",
                "+\t\th.Reset()",
                "+\t\th.Write(r.K)",
                "+\t\th.Write(r.H)",
                "+",
                "+\t\tif len(digestsSoFar) == 0 {",
                "+\t\t\th.Write(tag)",
                "+\t\t\th.Write(r.SessionID)",
                "+\t\t} else {",
                "+\t\t\th.Write(digestsSoFar)",
                "+\t\t}",
                "+",
                "+\t\tdigest := h.Sum(nil)",
                "+\t\tn := copy(out, digest)",
                "+\t\tout = out[n:]",
                "+\t\tif len(out) > 0 {",
                "+\t\t\tdigestsSoFar = append(digestsSoFar, digest...)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+const packageVersion = \"SSH-2.0-Go\"",
                "+",
                "+// Sends and receives a version line.  The versionLine string should",
                "+// be US ASCII, start with \"SSH-2.0-\", and should not include a",
                "+// newline. exchangeVersions returns the other side's version line.",
                "+func exchangeVersions(rw io.ReadWriter, versionLine []byte) (them []byte, err error) {",
                "+\t// Contrary to the RFC, we do not ignore lines that don't",
                "+\t// start with \"SSH-2.0-\" to make the library usable with",
                "+\t// nonconforming servers.",
                "+\tfor _, c := range versionLine {",
                "+\t\t// The spec disallows non US-ASCII chars, and",
                "+\t\t// specifically forbids null chars.",
                "+\t\tif c < 32 {",
                "+\t\t\treturn nil, errors.New(\"ssh: junk character in version line\")",
                "+\t\t}",
                "+\t}",
                "+\tif _, err = rw.Write(append(versionLine, '\\r', '\\n')); err != nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tthem, err = readVersion(rw)",
                "+\treturn them, err",
                "+}",
                "+",
                "+// maxVersionStringBytes is the maximum number of bytes that we'll",
                "+// accept as a version string. RFC 4253 section 4.2 limits this at 255",
                "+// chars",
                "+const maxVersionStringBytes = 255",
                "+",
                "+// Read version string as specified by RFC 4253, section 4.2.",
                "+func readVersion(r io.Reader) ([]byte, error) {",
                "+\tversionString := make([]byte, 0, 64)",
                "+\tvar ok bool",
                "+\tvar buf [1]byte",
                "+",
                "+\tfor len(versionString) < maxVersionStringBytes {",
                "+\t\t_, err := io.ReadFull(r, buf[:])",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\t// The RFC says that the version should be terminated with \\r\\n",
                "+\t\t// but several SSH servers actually only send a \\n.",
                "+\t\tif buf[0] == '\\n' {",
                "+\t\t\tok = true",
                "+\t\t\tbreak",
                "+\t\t}",
                "+",
                "+\t\t// non ASCII chars are disallowed, but we are lenient,",
                "+\t\t// since Go doesn't use null-terminated strings.",
                "+",
                "+\t\t// The RFC allows a comment after a space, however,",
                "+\t\t// all of it (version and comments) goes into the",
                "+\t\t// session hash.",
                "+\t\tversionString = append(versionString, buf[0])",
                "+\t}",
                "+",
                "+\tif !ok {",
                "+\t\treturn nil, errors.New(\"ssh: overflow reading version string\")",
                "+\t}",
                "+",
                "+\t// There might be a '\\r' on the end which we should remove.",
                "+\tif len(versionString) > 0 && versionString[len(versionString)-1] == '\\r' {",
                "+\t\tversionString = versionString[:len(versionString)-1]",
                "+\t}",
                "+\treturn versionString, nil",
                "+}",
                "diff --git a/vendor/golang.org/x/text/doc.go b/vendor/golang.org/x/text/doc.go",
                "new file mode 100644",
                "index 000000000..a48e2843f",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/text/doc.go",
                "@@ -0,0 +1,13 @@",
                "+// Copyright 2015 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+//go:generate go run gen.go",
                "+",
                "+// text is a repository of text-related packages related to internationalization",
                "+// (i18n) and localization (l10n), such as character encodings, text",
                "+// transformations, and locale-specific text handling.",
                "+package text",
                "+",
                "+// TODO: more documentation on general concepts, such as Transformers, use",
                "+// of normalization, etc.",
                "diff --git a/vendor/golang.org/x/text/gen.go b/vendor/golang.org/x/text/gen.go",
                "new file mode 100644",
                "index 000000000..79af97e70",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/text/gen.go",
                "@@ -0,0 +1,292 @@",
                "+// Copyright 2015 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+// +build ignore",
                "+",
                "+// gen runs go generate on Unicode- and CLDR-related package in the text",
                "+// repositories, taking into account dependencies and versions.",
                "+package main",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"flag\"",
                "+\t\"fmt\"",
                "+\t\"go/build\"",
                "+\t\"go/format\"",
                "+\t\"io/ioutil\"",
                "+\t\"os\"",
                "+\t\"os/exec\"",
                "+\t\"path\"",
                "+\t\"path/filepath\"",
                "+\t\"regexp\"",
                "+\t\"runtime\"",
                "+\t\"strings\"",
                "+\t\"sync\"",
                "+\t\"unicode\"",
                "+",
                "+\t\"golang.org/x/text/internal/gen\"",
                "+)",
                "+",
                "+var (",
                "+\tverbose     = flag.Bool(\"v\", false, \"verbose output\")",
                "+\tforce       = flag.Bool(\"force\", false, \"ignore failing dependencies\")",
                "+\tdoCore      = flag.Bool(\"core\", false, \"force an update to core\")",
                "+\texcludeList = flag.String(\"exclude\", \"\",",
                "+\t\t\"comma-separated list of packages to exclude\")",
                "+",
                "+\t// The user can specify a selection of packages to build on the command line.",
                "+\targs []string",
                "+)",
                "+",
                "+func exclude(pkg string) bool {",
                "+\tif len(args) > 0 {",
                "+\t\treturn !contains(args, pkg)",
                "+\t}",
                "+\treturn contains(strings.Split(*excludeList, \",\"), pkg)",
                "+}",
                "+",
                "+// TODO:",
                "+// - Better version handling.",
                "+// - Generate tables for the core unicode package?",
                "+// - Add generation for encodings. This requires some retooling here and there.",
                "+// - Running repo-wide \"long\" tests.",
                "+",
                "+var vprintf = fmt.Printf",
                "+",
                "+func main() {",
                "+\tgen.Init()",
                "+\targs = flag.Args()",
                "+\tif !*verbose {",
                "+\t\t// Set vprintf to a no-op.",
                "+\t\tvprintf = func(string, ...interface{}) (int, error) { return 0, nil }",
                "+\t}",
                "+",
                "+\t// TODO: create temporary cache directory to load files and create and set",
                "+\t// a \"cache\" option if the user did not specify the UNICODE_DIR environment",
                "+\t// variable. This will prevent duplicate downloads and also will enable long",
                "+\t// tests, which really need to be run after each generated package.",
                "+",
                "+\tupdateCore := *doCore",
                "+\tif gen.UnicodeVersion() != unicode.Version {",
                "+\t\tfmt.Printf(\"Requested Unicode version %s; core unicode version is %s.\\n\",",
                "+\t\t\tgen.UnicodeVersion(),",
                "+\t\t\tunicode.Version)",
                "+\t\t// TODO: use collate to compare. Simple comparison will work, though,",
                "+\t\t// until Unicode reaches version 10. To avoid circular dependencies, we",
                "+\t\t// could use the NumericWeighter without using package collate using a",
                "+\t\t// trivial Weighter implementation.",
                "+\t\tif gen.UnicodeVersion() < unicode.Version && !*force {",
                "+\t\t\tos.Exit(2)",
                "+\t\t}",
                "+\t\tupdateCore = true",
                "+\t}",
                "+",
                "+\tvar unicode = &dependency{}",
                "+\tif updateCore {",
                "+\t\tfmt.Printf(\"Updating core to version %s...\\n\", gen.UnicodeVersion())",
                "+\t\tunicode = generate(\"unicode\")",
                "+",
                "+\t\t// Test some users of the unicode packages, especially the ones that",
                "+\t\t// keep a mirrored table. These may need to be corrected by hand.",
                "+\t\tgenerate(\"regexp\", unicode)",
                "+\t\tgenerate(\"strconv\", unicode) // mimics Unicode table",
                "+\t\tgenerate(\"strings\", unicode)",
                "+\t\tgenerate(\"testing\", unicode) // mimics Unicode table",
                "+\t}",
                "+",
                "+\tvar (",
                "+\t\tcldr       = generate(\"./unicode/cldr\", unicode)",
                "+\t\tlanguage   = generate(\"./language\", cldr)",
                "+\t\tinternal   = generate(\"./internal\", unicode, language)",
                "+\t\tnorm       = generate(\"./unicode/norm\", unicode)",
                "+\t\trangetable = generate(\"./unicode/rangetable\", unicode)",
                "+\t\tcases      = generate(\"./cases\", unicode, norm, language, rangetable)",
                "+\t\twidth      = generate(\"./width\", unicode)",
                "+\t\tbidi       = generate(\"./unicode/bidi\", unicode, norm, rangetable)",
                "+\t\tmib        = generate(\"./encoding/internal/identifier\", unicode)",
                "+\t\t_          = generate(\"./encoding/htmlindex\", unicode, language, mib)",
                "+\t\t_          = generate(\"./encoding/ianaindex\", unicode, language, mib)",
                "+\t\t_          = generate(\"./secure/precis\", unicode, norm, rangetable, cases, width, bidi)",
                "+\t\t_          = generate(\"./currency\", unicode, cldr, language, internal)",
                "+\t\t_          = generate(\"./internal/number\", unicode, cldr, language, internal)",
                "+\t\t_          = generate(\"./feature/plural\", unicode, cldr, language, internal)",
                "+\t\t_          = generate(\"./internal/export/idna\", unicode, bidi, norm)",
                "+\t\t_          = generate(\"./language/display\", unicode, cldr, language, internal)",
                "+\t\t_          = generate(\"./collate\", unicode, norm, cldr, language, rangetable)",
                "+\t\t_          = generate(\"./search\", unicode, norm, cldr, language, rangetable)",
                "+\t)",
                "+\tall.Wait()",
                "+",
                "+\t// Copy exported packages to the destination golang.org repo.",
                "+\tcopyExported(\"golang.org/x/net/idna\")",
                "+",
                "+\tif updateCore {",
                "+\t\tcopyVendored()",
                "+\t}",
                "+",
                "+\tif hasErrors {",
                "+\t\tfmt.Println(\"FAIL\")",
                "+\t\tos.Exit(1)",
                "+\t}",
                "+\tvprintf(\"SUCCESS\\n\")",
                "+}",
                "+",
                "+var (",
                "+\tall       sync.WaitGroup",
                "+\thasErrors bool",
                "+)",
                "+",
                "+type dependency struct {",
                "+\tsync.WaitGroup",
                "+\thasErrors bool",
                "+}",
                "+",
                "+func generate(pkg string, deps ...*dependency) *dependency {",
                "+\tvar wg dependency",
                "+\tif exclude(pkg) {",
                "+\t\treturn &wg",
                "+\t}",
                "+\twg.Add(1)",
                "+\tall.Add(1)",
                "+\tgo func() {",
                "+\t\tdefer wg.Done()",
                "+\t\tdefer all.Done()",
                "+\t\t// Wait for dependencies to finish.",
                "+\t\tfor _, d := range deps {",
                "+\t\t\td.Wait()",
                "+\t\t\tif d.hasErrors && !*force {",
                "+\t\t\t\tfmt.Printf(\"--- ABORT: %s\\n\", pkg)",
                "+\t\t\t\twg.hasErrors = true",
                "+\t\t\t\treturn",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tvprintf(\"=== GENERATE %s\\n\", pkg)",
                "+\t\targs := []string{\"generate\"}",
                "+\t\tif *verbose {",
                "+\t\t\targs = append(args, \"-v\")",
                "+\t\t}",
                "+\t\targs = append(args, pkg)",
                "+\t\tcmd := exec.Command(filepath.Join(runtime.GOROOT(), \"bin\", \"go\"), args...)",
                "+\t\tw := &bytes.Buffer{}",
                "+\t\tcmd.Stderr = w",
                "+\t\tcmd.Stdout = w",
                "+\t\tif err := cmd.Run(); err != nil {",
                "+\t\t\tfmt.Printf(\"--- FAIL: %s:\\n\\t%v\\n\\tError: %v\\n\", pkg, indent(w), err)",
                "+\t\t\thasErrors = true",
                "+\t\t\twg.hasErrors = true",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\tvprintf(\"=== TEST %s\\n\", pkg)",
                "+\t\targs[0] = \"test\"",
                "+\t\tcmd = exec.Command(filepath.Join(runtime.GOROOT(), \"bin\", \"go\"), args...)",
                "+\t\twt := &bytes.Buffer{}",
                "+\t\tcmd.Stderr = wt",
                "+\t\tcmd.Stdout = wt",
                "+\t\tif err := cmd.Run(); err != nil {",
                "+\t\t\tfmt.Printf(\"--- FAIL: %s:\\n\\t%v\\n\\tError: %v\\n\", pkg, indent(wt), err)",
                "+\t\t\thasErrors = true",
                "+\t\t\twg.hasErrors = true",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tvprintf(\"--- SUCCESS: %s\\n\\t%v\\n\", pkg, indent(w))",
                "+\t\tfmt.Print(wt.String())",
                "+\t}()",
                "+\treturn &wg",
                "+}",
                "+",
                "+// copyExported copies a package in x/text/internal/export to the",
                "+// destination repository.",
                "+func copyExported(p string) {",
                "+\tcopyPackage(",
                "+\t\tfilepath.Join(\"internal\", \"export\", path.Base(p)),",
                "+\t\tfilepath.Join(\"..\", filepath.FromSlash(p[len(\"golang.org/x\"):])),",
                "+\t\t\"golang.org/x/text/internal/export/\"+path.Base(p),",
                "+\t\tp)",
                "+}",
                "+",
                "+// copyVendored copies packages used by Go core into the vendored directory.",
                "+func copyVendored() {",
                "+\troot := filepath.Join(build.Default.GOROOT, filepath.FromSlash(\"src/vendor/golang_org/x\"))",
                "+",
                "+\terr := filepath.Walk(root, func(dir string, info os.FileInfo, err error) error {",
                "+\t\tif err != nil || !info.IsDir() || root == dir {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t\tsrc := dir[len(root)+1:]",
                "+\t\tconst slash = string(filepath.Separator)",
                "+\t\tif c := strings.Split(src, slash); c[0] == \"text\" {",
                "+\t\t\t// Copy a text repo package from its normal location.",
                "+\t\t\tsrc = strings.Join(c[1:], slash)",
                "+\t\t} else {",
                "+\t\t\t// Copy the vendored package if it exists in the export directory.",
                "+\t\t\tsrc = filepath.Join(\"internal\", \"export\", filepath.Base(src))",
                "+\t\t}",
                "+\t\tcopyPackage(src, dir, \"golang.org\", \"golang_org\")",
                "+\t\treturn nil",
                "+\t})",
                "+\tif err != nil {",
                "+\t\tfmt.Printf(\"Seeding directory %s has failed %v:\", root, err)",
                "+\t\tos.Exit(1)",
                "+\t}",
                "+}",
                "+",
                "+// goGenRE is used to remove go:generate lines.",
                "+var goGenRE = regexp.MustCompile(\"//go:generate[^\\n]*\\n\")",
                "+",
                "+// copyPackage copies relevant files from a directory in x/text to the",
                "+// destination package directory. The destination package is assumed to have",
                "+// the same name. For each copied file go:generate lines are removed and",
                "+// and package comments are rewritten to the new path.",
                "+func copyPackage(dirSrc, dirDst, search, replace string) {",
                "+\terr := filepath.Walk(dirSrc, func(file string, info os.FileInfo, err error) error {",
                "+\t\tbase := filepath.Base(file)",
                "+\t\tif err != nil || info.IsDir() ||",
                "+\t\t\t!strings.HasSuffix(base, \".go\") ||",
                "+\t\t\tstrings.HasSuffix(base, \"_test.go\") && !strings.HasPrefix(base, \"example\") ||",
                "+\t\t\t// Don't process subdirectories.",
                "+\t\t\tfilepath.Dir(file) != dirSrc {",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\tb, err := ioutil.ReadFile(file)",
                "+\t\tif err != nil || bytes.Contains(b, []byte(\"\\n// +build ignore\")) {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t\t// Fix paths.",
                "+\t\tb = bytes.Replace(b, []byte(search), []byte(replace), -1)",
                "+\t\t// Remove go:generate lines.",
                "+\t\tb = goGenRE.ReplaceAllLiteral(b, nil)",
                "+\t\tcomment := \"// Code generated by running \\\"go generate\\\" in golang.org/x/text. DO NOT EDIT.\\n\\n\"",
                "+\t\tif *doCore {",
                "+\t\t\tcomment = \"// Code generated by running \\\"go run gen.go -core\\\" in golang.org/x/text. DO NOT EDIT.\\n\\n\"",
                "+\t\t}",
                "+\t\tif !bytes.HasPrefix(b, []byte(comment)) {",
                "+\t\t\tb = append([]byte(comment), b...)",
                "+\t\t}",
                "+\t\tif b, err = format.Source(b); err != nil {",
                "+\t\t\tfmt.Println(\"Failed to format file:\", err)",
                "+\t\t\tos.Exit(1)",
                "+\t\t}",
                "+\t\tfile = filepath.Join(dirDst, base)",
                "+\t\tvprintf(\"=== COPY %s\\n\", file)",
                "+\t\treturn ioutil.WriteFile(file, b, 0666)",
                "+\t})",
                "+\tif err != nil {",
                "+\t\tfmt.Println(\"Copying exported files failed:\", err)",
                "+\t\tos.Exit(1)",
                "+\t}",
                "+}",
                "+",
                "+func contains(a []string, s string) bool {",
                "+\tfor _, e := range a {",
                "+\t\tif s == e {",
                "+\t\t\treturn true",
                "+\t\t}",
                "+\t}",
                "+\treturn false",
                "+}",
                "+",
                "+func indent(b *bytes.Buffer) string {",
                "+\treturn strings.Replace(strings.TrimSpace(b.String()), \"\\n\", \"\\n\\t\", -1)",
                "+}",
                "diff --git a/vendor/golang.org/x/text/internal/gen.go b/vendor/golang.org/x/text/internal/gen.go",
                "new file mode 100644",
                "index 000000000..1d678af57",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/text/internal/gen.go",
                "@@ -0,0 +1,52 @@",
                "+// Copyright 2015 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+// +build ignore",
                "+",
                "+package main",
                "+",
                "+import (",
                "+\t\"log\"",
                "+",
                "+\t\"golang.org/x/text/internal/gen\"",
                "+\t\"golang.org/x/text/language\"",
                "+\t\"golang.org/x/text/unicode/cldr\"",
                "+)",
                "+",
                "+func main() {",
                "+\tr := gen.OpenCLDRCoreZip()",
                "+\tdefer r.Close()",
                "+",
                "+\td := &cldr.Decoder{}",
                "+\tdata, err := d.DecodeZip(r)",
                "+\tif err != nil {",
                "+\t\tlog.Fatalf(\"DecodeZip: %v\", err)",
                "+\t}",
                "+",
                "+\tw := gen.NewCodeWriter()",
                "+\tdefer w.WriteGoFile(\"tables.go\", \"internal\")",
                "+",
                "+\t// Create parents table.",
                "+\tparents := make([]uint16, language.NumCompactTags)",
                "+\tfor _, loc := range data.Locales() {",
                "+\t\ttag := language.MustParse(loc)",
                "+\t\tindex, ok := language.CompactIndex(tag)",
                "+\t\tif !ok {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tparentIndex := 0 // und",
                "+\t\tfor p := tag.Parent(); p != language.Und; p = p.Parent() {",
                "+\t\t\tif x, ok := language.CompactIndex(p); ok {",
                "+\t\t\t\tparentIndex = x",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tparents[index] = uint16(parentIndex)",
                "+\t}",
                "+",
                "+\tw.WriteComment(`",
                "+\tParent maps a compact index of a tag to the compact index of the parent of",
                "+\tthis tag.`)",
                "+\tw.WriteVar(\"Parent\", parents)",
                "+}",
                "diff --git a/vendor/golang.org/x/text/internal/internal.go b/vendor/golang.org/x/text/internal/internal.go",
                "new file mode 100644",
                "index 000000000..eac832850",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/text/internal/internal.go",
                "@@ -0,0 +1,51 @@",
                "+// Copyright 2015 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+//go:generate go run gen.go",
                "+",
                "+// Package internal contains non-exported functionality that are used by",
                "+// packages in the text repository.",
                "+package internal // import \"golang.org/x/text/internal\"",
                "+",
                "+import (",
                "+\t\"sort\"",
                "+",
                "+\t\"golang.org/x/text/language\"",
                "+)",
                "+",
                "+// SortTags sorts tags in place.",
                "+func SortTags(tags []language.Tag) {",
                "+\tsort.Sort(sorter(tags))",
                "+}",
                "+",
                "+type sorter []language.Tag",
                "+",
                "+func (s sorter) Len() int {",
                "+\treturn len(s)",
                "+}",
                "+",
                "+func (s sorter) Swap(i, j int) {",
                "+\ts[i], s[j] = s[j], s[i]",
                "+}",
                "+",
                "+func (s sorter) Less(i, j int) bool {",
                "+\treturn s[i].String() < s[j].String()",
                "+}",
                "+",
                "+// UniqueTags sorts and filters duplicate tags in place and returns a slice with",
                "+// only unique tags.",
                "+func UniqueTags(tags []language.Tag) []language.Tag {",
                "+\tif len(tags) <= 1 {",
                "+\t\treturn tags",
                "+\t}",
                "+\tSortTags(tags)",
                "+\tk := 0",
                "+\tfor i := 1; i < len(tags); i++ {",
                "+\t\tif tags[k].String() < tags[i].String() {",
                "+\t\t\tk++",
                "+\t\t\ttags[k] = tags[i]",
                "+\t\t}",
                "+\t}",
                "+\treturn tags[:k+1]",
                "+}",
                "diff --git a/vendor/golang.org/x/text/internal/match.go b/vendor/golang.org/x/text/internal/match.go",
                "new file mode 100644",
                "index 000000000..a67fcaca1",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/text/internal/match.go",
                "@@ -0,0 +1,67 @@",
                "+// Copyright 2015 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+package internal",
                "+",
                "+// This file contains matchers that implement CLDR inheritance.",
                "+//",
                "+//     See http://unicode.org/reports/tr35/#Locale_Inheritance.",
                "+//",
                "+// Some of the inheritance described in this document is already handled by",
                "+// the cldr package.",
                "+",
                "+import (",
                "+\t\"golang.org/x/text/language\"",
                "+)",
                "+",
                "+// TODO: consider if (some of the) matching algorithm needs to be public after",
                "+// getting some feel about what is generic and what is specific.",
                "+",
                "+// NewInheritanceMatcher returns a matcher that matches based on the inheritance",
                "+// chain.",
                "+//",
                "+// The matcher uses canonicalization and the parent relationship to find a",
                "+// match. The resulting match will always be either Und or a language with the",
                "+// same language and script as the requested language. It will not match",
                "+// languages for which there is understood to be mutual or one-directional",
                "+// intelligibility.",
                "+//",
                "+// A Match will indicate an Exact match if the language matches after",
                "+// canonicalization and High if the matched tag is a parent.",
                "+func NewInheritanceMatcher(t []language.Tag) *InheritanceMatcher {",
                "+\ttags := &InheritanceMatcher{make(map[language.Tag]int)}",
                "+\tfor i, tag := range t {",
                "+\t\tct, err := language.All.Canonicalize(tag)",
                "+\t\tif err != nil {",
                "+\t\t\tct = tag",
                "+\t\t}",
                "+\t\ttags.index[ct] = i",
                "+\t}",
                "+\treturn tags",
                "+}",
                "+",
                "+type InheritanceMatcher struct {",
                "+\tindex map[language.Tag]int",
                "+}",
                "+",
                "+func (m InheritanceMatcher) Match(want ...language.Tag) (language.Tag, int, language.Confidence) {",
                "+\tfor _, t := range want {",
                "+\t\tct, err := language.All.Canonicalize(t)",
                "+\t\tif err != nil {",
                "+\t\t\tct = t",
                "+\t\t}",
                "+\t\tconf := language.Exact",
                "+\t\tfor {",
                "+\t\t\tif index, ok := m.index[ct]; ok {",
                "+\t\t\t\treturn ct, index, conf",
                "+\t\t\t}",
                "+\t\t\tif ct == language.Und {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t\tct = ct.Parent()",
                "+\t\t\tconf = language.High",
                "+\t\t}",
                "+\t}",
                "+\treturn language.Und, 0, language.No",
                "+}",
                "diff --git a/vendor/golang.org/x/text/internal/tables.go b/vendor/golang.org/x/text/internal/tables.go",
                "new file mode 100644",
                "index 000000000..a53042aab",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/text/internal/tables.go",
                "@@ -0,0 +1,117 @@",
                "+// Code generated by running \"go generate\" in golang.org/x/text. DO NOT EDIT.",
                "+",
                "+package internal",
                "+",
                "+// Parent maps a compact index of a tag to the compact index of the parent of",
                "+// this tag.",
                "+var Parent = []uint16{ // 754 elements",
                "+\t// Entry 0 - 3F",
                "+\t0x0000, 0x0053, 0x00e5, 0x0000, 0x0003, 0x0003, 0x0000, 0x0006,",
                "+\t0x0000, 0x0008, 0x0000, 0x000a, 0x0000, 0x000c, 0x000c, 0x000c,",
                "+\t0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c,",
                "+\t0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c,",
                "+\t0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c,",
                "+\t0x000c, 0x0000, 0x0000, 0x002a, 0x0000, 0x002c, 0x0000, 0x002e,",
                "+\t0x0000, 0x0000, 0x0031, 0x0030, 0x0030, 0x0000, 0x0035, 0x0000,",
                "+\t0x0037, 0x0000, 0x0039, 0x0000, 0x003b, 0x0000, 0x003d, 0x0000,",
                "+\t// Entry 40 - 7F",
                "+\t0x0000, 0x0040, 0x0000, 0x0042, 0x0042, 0x0000, 0x0045, 0x0045,",
                "+\t0x0000, 0x0048, 0x0000, 0x004a, 0x0000, 0x0000, 0x004d, 0x004c,",
                "+\t0x004c, 0x0000, 0x0051, 0x0051, 0x0051, 0x0051, 0x0000, 0x0056,",
                "+\t0x0000, 0x0058, 0x0000, 0x005a, 0x0000, 0x005c, 0x005c, 0x0000,",
                "+\t0x005f, 0x0000, 0x0061, 0x0000, 0x0063, 0x0000, 0x0065, 0x0065,",
                "+\t0x0000, 0x0068, 0x0000, 0x006a, 0x006a, 0x006a, 0x006a, 0x006a,",
                "+\t0x006a, 0x006a, 0x0000, 0x0072, 0x0000, 0x0074, 0x0000, 0x0076,",
                "+\t0x0000, 0x0000, 0x0079, 0x0000, 0x007b, 0x0000, 0x007d, 0x0000,",
                "+\t// Entry 80 - BF",
                "+\t0x007f, 0x007f, 0x0000, 0x0082, 0x0082, 0x0000, 0x0085, 0x0086,",
                "+\t0x0086, 0x0086, 0x0085, 0x0087, 0x0086, 0x0086, 0x0086, 0x0085,",
                "+\t0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0087, 0x0086,",
                "+\t0x0086, 0x0086, 0x0086, 0x0087, 0x0086, 0x0087, 0x0086, 0x0086,",
                "+\t0x0087, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086,",
                "+\t0x0086, 0x0086, 0x0085, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086,",
                "+\t0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086,",
                "+\t0x0086, 0x0086, 0x0086, 0x0086, 0x0085, 0x0086, 0x0085, 0x0086,",
                "+\t// Entry C0 - FF",
                "+\t0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0087,",
                "+\t0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0085,",
                "+\t0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0087, 0x0086, 0x0086,",
                "+\t0x0087, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086,",
                "+\t0x0086, 0x0086, 0x0086, 0x0086, 0x0085, 0x0085, 0x0086, 0x0086,",
                "+\t0x0085, 0x0086, 0x0086, 0x0086, 0x0086, 0x0086, 0x0000, 0x00ee,",
                "+\t0x0000, 0x00f0, 0x00f1, 0x00f1, 0x00f1, 0x00f1, 0x00f1, 0x00f1,",
                "+\t0x00f1, 0x00f1, 0x00f1, 0x00f0, 0x00f1, 0x00f0, 0x00f0, 0x00f1,",
                "+\t// Entry 100 - 13F",
                "+\t0x00f1, 0x00f0, 0x00f1, 0x00f1, 0x00f1, 0x00f1, 0x00f0, 0x00f1,",
                "+\t0x00f1, 0x00f1, 0x00f1, 0x00f1, 0x00f1, 0x0000, 0x010d, 0x0000,",
                "+\t0x010f, 0x0000, 0x0111, 0x0000, 0x0113, 0x0113, 0x0000, 0x0116,",
                "+\t0x0116, 0x0116, 0x0116, 0x0000, 0x011b, 0x0000, 0x011d, 0x0000,",
                "+\t0x011f, 0x011f, 0x0000, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122,",
                "+\t0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122,",
                "+\t0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122,",
                "+\t0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122,",
                "+\t// Entry 140 - 17F",
                "+\t0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122,",
                "+\t0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122, 0x0122,",
                "+\t0x0122, 0x0000, 0x0151, 0x0000, 0x0153, 0x0000, 0x0155, 0x0000,",
                "+\t0x0157, 0x0000, 0x0159, 0x0000, 0x015b, 0x015b, 0x015b, 0x0000,",
                "+\t0x015f, 0x0000, 0x0000, 0x0162, 0x0000, 0x0164, 0x0000, 0x0166,",
                "+\t0x0166, 0x0166, 0x0000, 0x016a, 0x0000, 0x016c, 0x0000, 0x016e,",
                "+\t0x0000, 0x0170, 0x0170, 0x0000, 0x0173, 0x0000, 0x0175, 0x0000,",
                "+\t0x0177, 0x0000, 0x0179, 0x0000, 0x017b, 0x0000, 0x017d, 0x0000,",
                "+\t// Entry 180 - 1BF",
                "+\t0x017f, 0x0000, 0x0181, 0x0181, 0x0181, 0x0181, 0x0000, 0x0000,",
                "+\t0x0187, 0x0000, 0x0000, 0x018a, 0x0000, 0x018c, 0x0000, 0x0000,",
                "+\t0x018f, 0x0000, 0x0191, 0x0000, 0x0000, 0x0194, 0x0000, 0x0000,",
                "+\t0x0197, 0x0000, 0x0199, 0x0000, 0x019b, 0x0000, 0x019d, 0x0000,",
                "+\t0x019f, 0x0000, 0x01a1, 0x0000, 0x01a3, 0x0000, 0x01a5, 0x0000,",
                "+\t0x01a7, 0x0000, 0x01a9, 0x0000, 0x01ab, 0x01ab, 0x0000, 0x01ae,",
                "+\t0x0000, 0x01b0, 0x0000, 0x01b2, 0x0000, 0x01b4, 0x0000, 0x01b6,",
                "+\t0x0000, 0x0000, 0x01b9, 0x0000, 0x01bb, 0x0000, 0x01bd, 0x0000,",
                "+\t// Entry 1C0 - 1FF",
                "+\t0x01bf, 0x0000, 0x01c1, 0x0000, 0x01c3, 0x0000, 0x01c5, 0x01c5,",
                "+\t0x01c5, 0x01c5, 0x0000, 0x01ca, 0x0000, 0x01cc, 0x01cc, 0x0000,",
                "+\t0x01cf, 0x0000, 0x01d1, 0x0000, 0x01d3, 0x0000, 0x01d5, 0x0000,",
                "+\t0x01d7, 0x0000, 0x01d9, 0x01d9, 0x0000, 0x01dc, 0x0000, 0x01de,",
                "+\t0x0000, 0x01e0, 0x0000, 0x01e2, 0x0000, 0x01e4, 0x0000, 0x01e6,",
                "+\t0x0000, 0x01e8, 0x0000, 0x01ea, 0x0000, 0x01ec, 0x0000, 0x01ee,",
                "+\t0x01ee, 0x01ee, 0x0000, 0x01f2, 0x0000, 0x01f4, 0x0000, 0x01f6,",
                "+\t0x0000, 0x01f8, 0x0000, 0x0000, 0x01fb, 0x0000, 0x01fd, 0x01fd,",
                "+\t// Entry 200 - 23F",
                "+\t0x0000, 0x0200, 0x0000, 0x0202, 0x0202, 0x0000, 0x0205, 0x0205,",
                "+\t0x0000, 0x0208, 0x0208, 0x0208, 0x0208, 0x0208, 0x0208, 0x0208,",
                "+\t0x0000, 0x0210, 0x0000, 0x0212, 0x0000, 0x0214, 0x0000, 0x0000,",
                "+\t0x0000, 0x0000, 0x0000, 0x021a, 0x0000, 0x0000, 0x021d, 0x0000,",
                "+\t0x021f, 0x021f, 0x0000, 0x0222, 0x0000, 0x0224, 0x0224, 0x0000,",
                "+\t0x0000, 0x0228, 0x0227, 0x0227, 0x0000, 0x0000, 0x022d, 0x0000,",
                "+\t0x022f, 0x0000, 0x0231, 0x0000, 0x023d, 0x0233, 0x023d, 0x023d,",
                "+\t0x023d, 0x023d, 0x023d, 0x023d, 0x023d, 0x0233, 0x023d, 0x023d,",
                "+\t// Entry 240 - 27F",
                "+\t0x0000, 0x0240, 0x0240, 0x0240, 0x0000, 0x0244, 0x0000, 0x0246,",
                "+\t0x0000, 0x0248, 0x0248, 0x0000, 0x024b, 0x0000, 0x024d, 0x024d,",
                "+\t0x024d, 0x024d, 0x024d, 0x024d, 0x0000, 0x0254, 0x0000, 0x0256,",
                "+\t0x0000, 0x0258, 0x0000, 0x025a, 0x0000, 0x025c, 0x0000, 0x0000,",
                "+\t0x025f, 0x025f, 0x025f, 0x0000, 0x0263, 0x0000, 0x0265, 0x0000,",
                "+\t0x0267, 0x0000, 0x0000, 0x026a, 0x0269, 0x0269, 0x0000, 0x026e,",
                "+\t0x0000, 0x0270, 0x0000, 0x0272, 0x0000, 0x0000, 0x0000, 0x0000,",
                "+\t0x0277, 0x0000, 0x0000, 0x027a, 0x0000, 0x027c, 0x027c, 0x027c,",
                "+\t// Entry 280 - 2BF",
                "+\t0x027c, 0x0000, 0x0281, 0x0281, 0x0281, 0x0000, 0x0285, 0x0285,",
                "+\t0x0285, 0x0285, 0x0285, 0x0000, 0x028b, 0x028b, 0x028b, 0x028b,",
                "+\t0x0000, 0x0000, 0x0000, 0x0000, 0x0293, 0x0293, 0x0293, 0x0000,",
                "+\t0x0297, 0x0297, 0x0297, 0x0297, 0x0000, 0x0000, 0x029d, 0x029d,",
                "+\t0x029d, 0x029d, 0x0000, 0x02a2, 0x0000, 0x02a4, 0x02a4, 0x0000,",
                "+\t0x02a7, 0x0000, 0x02a9, 0x02a9, 0x0000, 0x0000, 0x02ad, 0x0000,",
                "+\t0x0000, 0x02b0, 0x0000, 0x02b2, 0x02b2, 0x0000, 0x0000, 0x02b6,",
                "+\t0x0000, 0x02b8, 0x0000, 0x02ba, 0x0000, 0x02bc, 0x0000, 0x02be,",
                "+\t// Entry 2C0 - 2FF",
                "+\t0x02be, 0x0000, 0x0000, 0x02c2, 0x0000, 0x02c4, 0x02c1, 0x02c1,",
                "+\t0x0000, 0x0000, 0x02c9, 0x02c8, 0x02c8, 0x0000, 0x0000, 0x02ce,",
                "+\t0x0000, 0x02d0, 0x0000, 0x02d2, 0x0000, 0x0000, 0x02d5, 0x0000,",
                "+\t0x0000, 0x0000, 0x02d9, 0x0000, 0x02db, 0x0000, 0x02dd, 0x0000,",
                "+\t0x02df, 0x02df, 0x0000, 0x02e2, 0x0000, 0x02e4, 0x0000, 0x02e6,",
                "+\t0x02e6, 0x02e6, 0x02e6, 0x02e6, 0x0000, 0x02ec, 0x02ed, 0x02ec,",
                "+\t0x0000, 0x02f0,",
                "+} // Size: 1532 bytes",
                "+",
                "+// Total table size 1532 bytes (1KiB); checksum: 90718A2",
                "diff --git a/vendor/golang.org/x/text/secure/doc.go b/vendor/golang.org/x/text/secure/doc.go",
                "new file mode 100644",
                "index 000000000..e531c3543",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/text/secure/doc.go",
                "@@ -0,0 +1,6 @@",
                "+// Copyright 2016 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+// secure is a repository of text security related packages.",
                "+package secure // import \"golang.org/x/text/secure\"",
                "diff --git a/vendor/golang.org/x/text/unicode/doc.go b/vendor/golang.org/x/text/unicode/doc.go",
                "new file mode 100644",
                "index 000000000..e8f1032d0",
                "--- /dev/null",
                "+++ b/vendor/golang.org/x/text/unicode/doc.go",
                "@@ -0,0 +1,8 @@",
                "+// Copyright 2015 The Go Authors. All rights reserved.",
                "+// Use of this source code is governed by a BSD-style",
                "+// license that can be found in the LICENSE file.",
                "+",
                "+// unicode holds packages with implementations of Unicode standards that are",
                "+// mostly used as building blocks for other packages in golang.org/x/text,",
                "+// layout engines, or are otherwise more low-level in nature.",
                "+package unicode",
                "diff --git a/vendor/google.golang.org/genproto/regen.go b/vendor/google.golang.org/genproto/regen.go",
                "new file mode 100644",
                "index 000000000..9c906f209",
                "--- /dev/null",
                "+++ b/vendor/google.golang.org/genproto/regen.go",
                "@@ -0,0 +1,123 @@",
                "+// Copyright 2016 Google Inc.",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// +build ignore",
                "+",
                "+// Regen.go regenerates the genproto repository.",
                "+//",
                "+// Regen.go recursively walks through each directory named by given arguments,",
                "+// looking for all .proto files. (Symlinks are not followed.)",
                "+// If the pkg_prefix flag is not an empty string,",
                "+// any proto file without `go_package` option",
                "+// or whose option does not begin with the prefix is ignored.",
                "+// Protoc is executed on remaining files,",
                "+// one invocation per set of files declaring the same Go package.",
                "+package main",
                "+",
                "+import (",
                "+\t\"flag\"",
                "+\t\"fmt\"",
                "+\t\"io/ioutil\"",
                "+\t\"log\"",
                "+\t\"os\"",
                "+\t\"os/exec\"",
                "+\t\"path/filepath\"",
                "+\t\"regexp\"",
                "+\t\"strconv\"",
                "+\t\"strings\"",
                "+)",
                "+",
                "+var goPkgOptRe = regexp.MustCompile(`(?m)^option go_package = (.*);`)",
                "+",
                "+func usage() {",
                "+\tfmt.Fprintln(os.Stderr, `usage: go run regen.go -go_out=path/to/output [-pkg_prefix=pkg/prefix] roots...",
                "+",
                "+Most users will not need to run this file directly.",
                "+To regenerate this repository, run regen.sh instead.`)",
                "+\tflag.PrintDefaults()",
                "+}",
                "+",
                "+func main() {",
                "+\tgoOutDir := flag.String(\"go_out\", \"\", \"go_out argument to pass to protoc-gen-go\")",
                "+\tpkgPrefix := flag.String(\"pkg_prefix\", \"\", \"only include proto files with go_package starting with this prefix\")",
                "+\tflag.Usage = usage",
                "+\tflag.Parse()",
                "+",
                "+\tif *goOutDir == \"\" {",
                "+\t\tlog.Fatal(\"need go_out flag\")",
                "+\t}",
                "+",
                "+\tpkgFiles := make(map[string][]string)",
                "+\twalkFn := func(path string, info os.FileInfo, err error) error {",
                "+\t\tif err != nil {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t\tif !info.Mode().IsRegular() || !strings.HasSuffix(path, \".proto\") {",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\tpkg, err := goPkg(path)",
                "+\t\tif err != nil {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t\tpkgFiles[pkg] = append(pkgFiles[pkg], path)",
                "+\t\treturn nil",
                "+\t}",
                "+\tfor _, root := range flag.Args() {",
                "+\t\tif err := filepath.Walk(root, walkFn); err != nil {",
                "+\t\t\tlog.Fatal(err)",
                "+\t\t}",
                "+\t}",
                "+\tfor pkg, fnames := range pkgFiles {",
                "+\t\tif !strings.HasPrefix(pkg, *pkgPrefix) {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tif out, err := protoc(*goOutDir, flag.Args(), fnames); err != nil {",
                "+\t\t\tlog.Fatalf(\"error executing protoc: %s\\n%s\", err, out)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// goPkg reports the import path declared in the given file's",
                "+// `go_package` option. If the option is missing, goPkg returns empty string.",
                "+func goPkg(fname string) (string, error) {",
                "+\tcontent, err := ioutil.ReadFile(fname)",
                "+\tif err != nil {",
                "+\t\treturn \"\", err",
                "+\t}",
                "+",
                "+\tvar pkgName string",
                "+\tif match := goPkgOptRe.FindSubmatch(content); len(match) > 0 {",
                "+\t\tpn, err := strconv.Unquote(string(match[1]))",
                "+\t\tif err != nil {",
                "+\t\t\treturn \"\", err",
                "+\t\t}",
                "+\t\tpkgName = pn",
                "+\t}",
                "+\tif p := strings.IndexRune(pkgName, ';'); p > 0 {",
                "+\t\tpkgName = pkgName[:p]",
                "+\t}",
                "+\treturn pkgName, nil",
                "+}",
                "+",
                "+// protoc executes the \"protoc\" command on files named in fnames,",
                "+// passing go_out and include flags specified in goOut and includes respectively.",
                "+// protoc returns combined output from stdout and stderr.",
                "+func protoc(goOut string, includes, fnames []string) ([]byte, error) {",
                "+\targs := []string{\"--go_out=plugins=grpc:\" + goOut}",
                "+\tfor _, inc := range includes {",
                "+\t\targs = append(args, \"-I\", inc)",
                "+\t}",
                "+\targs = append(args, fnames...)",
                "+\treturn exec.Command(\"protoc\", args...).CombinedOutput()",
                "+}",
                "diff --git a/vendor/google.golang.org/grpc/grpclb/grpc_lb_v1/doc.go b/vendor/google.golang.org/grpc/grpclb/grpc_lb_v1/doc.go",
                "new file mode 100644",
                "index 000000000..aba962840",
                "--- /dev/null",
                "+++ b/vendor/google.golang.org/grpc/grpclb/grpc_lb_v1/doc.go",
                "@@ -0,0 +1,21 @@",
                "+/*",
                "+ *",
                "+ * Copyright 2017 gRPC authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ *",
                "+ */",
                "+",
                "+// Package grpc_lb_v1 is the parent package of all gRPC loadbalancer",
                "+// message and service protobuf definitions.",
                "+package grpc_lb_v1"
            ],
            "changed_files": [
                "vendor/github.com/coreos/go-semver/example.go",
                "vendor/github.com/cpuguy83/go-md2man/md2man.go",
                "vendor/github.com/gogo/protobuf/protoc-gen-gogo/doc.go",
                "vendor/github.com/gogo/protobuf/protoc-gen-gogo/main.go",
                "vendor/github.com/golang/groupcache/byteview.go",
                "vendor/github.com/golang/groupcache/groupcache.go",
                "vendor/github.com/golang/groupcache/http.go",
                "vendor/github.com/golang/groupcache/peers.go",
                "vendor/github.com/golang/groupcache/sinks.go",
                "vendor/github.com/spf13/cobra/cobra/cmd/licenses.go",
                "vendor/golang.org/x/crypto/ssh/buffer.go",
                "vendor/golang.org/x/crypto/ssh/certs.go",
                "vendor/golang.org/x/crypto/ssh/channel.go",
                "vendor/golang.org/x/crypto/ssh/cipher.go",
                "vendor/golang.org/x/crypto/ssh/client.go",
                "vendor/golang.org/x/crypto/ssh/client_auth.go",
                "vendor/golang.org/x/crypto/ssh/common.go",
                "vendor/golang.org/x/crypto/ssh/connection.go",
                "vendor/golang.org/x/crypto/ssh/doc.go",
                "vendor/golang.org/x/crypto/ssh/handshake.go",
                "vendor/golang.org/x/crypto/ssh/kex.go",
                "vendor/golang.org/x/crypto/ssh/keys.go",
                "vendor/golang.org/x/crypto/ssh/mac.go",
                "vendor/golang.org/x/crypto/ssh/messages.go",
                "vendor/golang.org/x/crypto/ssh/mux.go",
                "vendor/golang.org/x/crypto/ssh/server.go",
                "vendor/golang.org/x/crypto/ssh/session.go",
                "vendor/golang.org/x/crypto/ssh/streamlocal.go",
                "vendor/golang.org/x/crypto/ssh/tcpip.go",
                "vendor/golang.org/x/crypto/ssh/transport.go",
                "vendor/golang.org/x/text/doc.go",
                "vendor/golang.org/x/text/gen.go",
                "vendor/golang.org/x/text/internal/gen.go",
                "vendor/golang.org/x/text/internal/internal.go",
                "vendor/golang.org/x/text/internal/match.go",
                "vendor/golang.org/x/text/internal/tables.go",
                "vendor/golang.org/x/text/secure/doc.go",
                "vendor/golang.org/x/text/unicode/doc.go",
                "vendor/google.golang.org/genproto/regen.go",
                "vendor/google.golang.org/grpc/grpclb/grpc_lb_v1/doc.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1ddfade9246d7e73962fb2a871dd32530fa02b0a",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519706255,
            "hunks": 2,
            "message": "build: Fix setting gopath",
            "diff": [
                "diff --git a/build b/build",
                "index 9389dfe96..c56a2f944 100755",
                "--- a/build",
                "+++ b/build",
                "@@ -33,3 +33,3 @@ etcd_setup_gopath() {",
                " \tif [ -n \"$GOPATH\" ]; then",
                "-\t\tGOPATH=\"$GOPATH\"",
                "+\t\tGOPATH=\":$GOPATH\"",
                " \tfi",
                "@@ -37,3 +37,3 @@ etcd_setup_gopath() {",
                " \tmkdir -p \"${etcdGOPATH}/vendor\" \"${etcdGOPATH}/etcd_src/src/github.com/coreos\"",
                "-\texport GOPATH=${etcdGOPATH}/vendor:${etcdGOPATH}/etcd_src:$GOPATH",
                "+\texport GOPATH=${etcdGOPATH}/vendor:${etcdGOPATH}/etcd_src${GOPATH}",
                " \tln -s \"${CDIR}/vendor\" \"${etcdGOPATH}/vendor/src\""
            ],
            "changed_files": [
                "build"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "dd2f3b0de8c70d54c9e6eaa06329e3ad6bcb7260",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519670505,
            "hunks": 60,
            "message": "*: revert \"internal/lease\" change Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/clientv3/integration/maintenance_test.go b/clientv3/integration/maintenance_test.go",
                "index 7db1938bc..87bc75f54 100644",
                "--- a/clientv3/integration/maintenance_test.go",
                "+++ b/clientv3/integration/maintenance_test.go",
                "@@ -28,5 +28,5 @@ import (",
                " \t\"github.com/coreos/etcd/integration\"",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/etcdserver/api/etcdhttp/peer.go b/etcdserver/api/etcdhttp/peer.go",
                "index ce376cbe6..0a9213b01 100644",
                "--- a/etcdserver/api/etcdhttp/peer.go",
                "+++ b/etcdserver/api/etcdhttp/peer.go",
                "@@ -22,3 +22,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/api\"",
                "-\t\"github.com/coreos/etcd/internal/lease/leasehttp\"",
                "+\t\"github.com/coreos/etcd/lease/leasehttp\"",
                " \t\"github.com/coreos/etcd/rafthttp\"",
                "diff --git a/etcdserver/api/v3rpc/lease.go b/etcdserver/api/v3rpc/lease.go",
                "index f872e860f..5b4f2b142 100644",
                "--- a/etcdserver/api/v3rpc/lease.go",
                "+++ b/etcdserver/api/v3rpc/lease.go",
                "@@ -23,3 +23,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/etcdserver/api/v3rpc/util.go b/etcdserver/api/v3rpc/util.go",
                "index bd092b3a1..e645918d2 100644",
                "--- a/etcdserver/api/v3rpc/util.go",
                "+++ b/etcdserver/api/v3rpc/util.go",
                "@@ -24,4 +24,4 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                "diff --git a/etcdserver/apply.go b/etcdserver/apply.go",
                "index 791750d8e..9ca815e95 100644",
                "--- a/etcdserver/apply.go",
                "+++ b/etcdserver/apply.go",
                "@@ -24,5 +24,5 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "diff --git a/etcdserver/apply_auth.go b/etcdserver/apply_auth.go",
                "index d95385af3..c46eaefd8 100644",
                "--- a/etcdserver/apply_auth.go",
                "+++ b/etcdserver/apply_auth.go",
                "@@ -21,4 +21,4 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/etcdserver/backend.go b/etcdserver/backend.go",
                "index f6af4cbbe..0b72b0127 100644",
                "--- a/etcdserver/backend.go",
                "+++ b/etcdserver/backend.go",
                "@@ -21,3 +21,2 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "@@ -25,2 +24,3 @@ import (",
                " \t\"github.com/coreos/etcd/internal/raftsnap\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 4bfcdfd49..0b3ea768d 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -40,4 +40,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                "-\t\"github.com/coreos/etcd/internal/lease/leasehttp\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "@@ -46,2 +44,4 @@ import (",
                " \t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/lease/leasehttp\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "diff --git a/etcdserver/server_test.go b/etcdserver/server_test.go",
                "index 3c51dcc51..897895194 100644",
                "--- a/etcdserver/server_test.go",
                "+++ b/etcdserver/server_test.go",
                "@@ -30,3 +30,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "@@ -35,2 +34,3 @@ import (",
                " \t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "diff --git a/etcdserver/v3_server.go b/etcdserver/v3_server.go",
                "index eeabb10eb..975383b66 100644",
                "--- a/etcdserver/v3_server.go",
                "+++ b/etcdserver/v3_server.go",
                "@@ -25,5 +25,5 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                "-\t\"github.com/coreos/etcd/internal/lease/leasehttp\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/lease/leasehttp\"",
                " \t\"github.com/coreos/etcd/raft\"",
                "diff --git a/internal/mvcc/kv.go b/internal/mvcc/kv.go",
                "index e8cb1dec3..ae5f5fa66 100644",
                "--- a/internal/mvcc/kv.go",
                "+++ b/internal/mvcc/kv.go",
                "@@ -17,5 +17,5 @@ package mvcc",
                " import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/internal/mvcc/kv_test.go b/internal/mvcc/kv_test.go",
                "index e4185f47b..4a8295470 100644",
                "--- a/internal/mvcc/kv_test.go",
                "+++ b/internal/mvcc/kv_test.go",
                "@@ -23,5 +23,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/internal/mvcc/kv_view.go b/internal/mvcc/kv_view.go",
                "index 8269a7273..1e869c25b 100644",
                "--- a/internal/mvcc/kv_view.go",
                "+++ b/internal/mvcc/kv_view.go",
                "@@ -16,3 +16,3 @@ package mvcc",
                "-import \"github.com/coreos/etcd/internal/lease\"",
                "+import \"github.com/coreos/etcd/lease\"",
                "diff --git a/internal/mvcc/kvstore.go b/internal/mvcc/kvstore.go",
                "index 1330b7b5c..6fd438205 100644",
                "--- a/internal/mvcc/kvstore.go",
                "+++ b/internal/mvcc/kvstore.go",
                "@@ -26,6 +26,7 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/pkg/schedule\"",
                "+",
                " \t\"github.com/coreos/pkg/capnslog\"",
                "diff --git a/internal/mvcc/kvstore_bench_test.go b/internal/mvcc/kvstore_bench_test.go",
                "index 0d4381a03..6551944b0 100644",
                "--- a/internal/mvcc/kvstore_bench_test.go",
                "+++ b/internal/mvcc/kvstore_bench_test.go",
                "@@ -20,4 +20,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/internal/mvcc/kvstore_compaction_test.go b/internal/mvcc/kvstore_compaction_test.go",
                "index 1dc9e08c3..e315602eb 100644",
                "--- a/internal/mvcc/kvstore_compaction_test.go",
                "+++ b/internal/mvcc/kvstore_compaction_test.go",
                "@@ -22,4 +22,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/internal/mvcc/kvstore_test.go b/internal/mvcc/kvstore_test.go",
                "index a526b603a..df7216923 100644",
                "--- a/internal/mvcc/kvstore_test.go",
                "+++ b/internal/mvcc/kvstore_test.go",
                "@@ -28,5 +28,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/pkg/schedule\"",
                "diff --git a/internal/mvcc/kvstore_txn.go b/internal/mvcc/kvstore_txn.go",
                "index 6d839a1a5..33939800b 100644",
                "--- a/internal/mvcc/kvstore_txn.go",
                "+++ b/internal/mvcc/kvstore_txn.go",
                "@@ -17,5 +17,5 @@ package mvcc",
                " import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/internal/mvcc/metrics_txn.go b/internal/mvcc/metrics_txn.go",
                "index 8f81f45e1..6a96be764 100644",
                "--- a/internal/mvcc/metrics_txn.go",
                "+++ b/internal/mvcc/metrics_txn.go",
                "@@ -16,5 +16,3 @@ package mvcc",
                "-import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                "-)",
                "+import \"github.com/coreos/etcd/lease\"",
                "diff --git a/internal/mvcc/watchable_store.go b/internal/mvcc/watchable_store.go",
                "index 054be1034..d93fb6c9b 100644",
                "--- a/internal/mvcc/watchable_store.go",
                "+++ b/internal/mvcc/watchable_store.go",
                "@@ -20,5 +20,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/internal/mvcc/watchable_store_bench_test.go b/internal/mvcc/watchable_store_bench_test.go",
                "index 65807ab42..5f7e39738 100644",
                "--- a/internal/mvcc/watchable_store_bench_test.go",
                "+++ b/internal/mvcc/watchable_store_bench_test.go",
                "@@ -21,4 +21,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/internal/mvcc/watchable_store_test.go b/internal/mvcc/watchable_store_test.go",
                "index 4f21aee45..00ea0c084 100644",
                "--- a/internal/mvcc/watchable_store_test.go",
                "+++ b/internal/mvcc/watchable_store_test.go",
                "@@ -25,5 +25,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/internal/mvcc/watcher_bench_test.go b/internal/mvcc/watcher_bench_test.go",
                "index 72264cb0c..99ff29f1b 100644",
                "--- a/internal/mvcc/watcher_bench_test.go",
                "+++ b/internal/mvcc/watcher_bench_test.go",
                "@@ -20,4 +20,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/internal/mvcc/watcher_test.go b/internal/mvcc/watcher_test.go",
                "index c4005b061..3a9c56303 100644",
                "--- a/internal/mvcc/watcher_test.go",
                "+++ b/internal/mvcc/watcher_test.go",
                "@@ -24,5 +24,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " )",
                "diff --git a/lease/doc.go b/lease/doc.go",
                "new file mode 100644",
                "index 000000000..a74eaf76f",
                "--- /dev/null",
                "+++ b/lease/doc.go",
                "@@ -0,0 +1,16 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package lease provides an interface and implementation for time-limited leases over arbitrary resources.",
                "+package lease",
                "diff --git a/lease/leasehttp/doc.go b/lease/leasehttp/doc.go",
                "new file mode 100644",
                "index 000000000..8177a37b6",
                "--- /dev/null",
                "+++ b/lease/leasehttp/doc.go",
                "@@ -0,0 +1,16 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package leasehttp serves lease renewals made through HTTP requests.",
                "+package leasehttp",
                "diff --git a/lease/leasehttp/http.go b/lease/leasehttp/http.go",
                "new file mode 100644",
                "index 000000000..aa713f28e",
                "--- /dev/null",
                "+++ b/lease/leasehttp/http.go",
                "@@ -0,0 +1,247 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package leasehttp",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"context\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"io/ioutil\"",
                "+\t\"net/http\"",
                "+\t\"time\"",
                "+",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/lease/leasepb\"",
                "+\t\"github.com/coreos/etcd/pkg/httputil\"",
                "+)",
                "+",
                "+var (",
                "+\tLeasePrefix         = \"/leases\"",
                "+\tLeaseInternalPrefix = \"/leases/internal\"",
                "+\tapplyTimeout        = time.Second",
                "+\tErrLeaseHTTPTimeout = errors.New(\"waiting for node to catch up its applied index has timed out\")",
                "+)",
                "+",
                "+// NewHandler returns an http Handler for lease renewals",
                "+func NewHandler(l lease.Lessor, waitch func() <-chan struct{}) http.Handler {",
                "+\treturn &leaseHandler{l, waitch}",
                "+}",
                "+",
                "+type leaseHandler struct {",
                "+\tl      lease.Lessor",
                "+\twaitch func() <-chan struct{}",
                "+}",
                "+",
                "+func (h *leaseHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",
                "+\tif r.Method != \"POST\" {",
                "+\t\thttp.Error(w, \"Method Not Allowed\", http.StatusMethodNotAllowed)",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tb, err := ioutil.ReadAll(r.Body)",
                "+\tif err != nil {",
                "+\t\thttp.Error(w, \"error reading body\", http.StatusBadRequest)",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tvar v []byte",
                "+\tswitch r.URL.Path {",
                "+\tcase LeasePrefix:",
                "+\t\tlreq := pb.LeaseKeepAliveRequest{}",
                "+\t\tif uerr := lreq.Unmarshal(b); uerr != nil {",
                "+\t\t\thttp.Error(w, \"error unmarshalling request\", http.StatusBadRequest)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tselect {",
                "+\t\tcase <-h.waitch():",
                "+\t\tcase <-time.After(applyTimeout):",
                "+\t\t\thttp.Error(w, ErrLeaseHTTPTimeout.Error(), http.StatusRequestTimeout)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tttl, rerr := h.l.Renew(lease.LeaseID(lreq.ID))",
                "+\t\tif rerr != nil {",
                "+\t\t\tif rerr == lease.ErrLeaseNotFound {",
                "+\t\t\t\thttp.Error(w, rerr.Error(), http.StatusNotFound)",
                "+\t\t\t\treturn",
                "+\t\t\t}",
                "+",
                "+\t\t\thttp.Error(w, rerr.Error(), http.StatusBadRequest)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\t// TODO: fill out ResponseHeader",
                "+\t\tresp := &pb.LeaseKeepAliveResponse{ID: lreq.ID, TTL: ttl}",
                "+\t\tv, err = resp.Marshal()",
                "+\t\tif err != nil {",
                "+\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\tcase LeaseInternalPrefix:",
                "+\t\tlreq := leasepb.LeaseInternalRequest{}",
                "+\t\tif lerr := lreq.Unmarshal(b); lerr != nil {",
                "+\t\t\thttp.Error(w, \"error unmarshalling request\", http.StatusBadRequest)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tselect {",
                "+\t\tcase <-h.waitch():",
                "+\t\tcase <-time.After(applyTimeout):",
                "+\t\t\thttp.Error(w, ErrLeaseHTTPTimeout.Error(), http.StatusRequestTimeout)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tl := h.l.Lookup(lease.LeaseID(lreq.LeaseTimeToLiveRequest.ID))",
                "+\t\tif l == nil {",
                "+\t\t\thttp.Error(w, lease.ErrLeaseNotFound.Error(), http.StatusNotFound)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\t// TODO: fill out ResponseHeader",
                "+\t\tresp := &leasepb.LeaseInternalResponse{",
                "+\t\t\tLeaseTimeToLiveResponse: &pb.LeaseTimeToLiveResponse{",
                "+\t\t\t\tHeader:     &pb.ResponseHeader{},",
                "+\t\t\t\tID:         lreq.LeaseTimeToLiveRequest.ID,",
                "+\t\t\t\tTTL:        int64(l.Remaining().Seconds()),",
                "+\t\t\t\tGrantedTTL: l.TTL(),",
                "+\t\t\t},",
                "+\t\t}",
                "+\t\tif lreq.LeaseTimeToLiveRequest.Keys {",
                "+\t\t\tks := l.Keys()",
                "+\t\t\tkbs := make([][]byte, len(ks))",
                "+\t\t\tfor i := range ks {",
                "+\t\t\t\tkbs[i] = []byte(ks[i])",
                "+\t\t\t}",
                "+\t\t\tresp.LeaseTimeToLiveResponse.Keys = kbs",
                "+\t\t}",
                "+",
                "+\t\tv, err = resp.Marshal()",
                "+\t\tif err != nil {",
                "+\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\tdefault:",
                "+\t\thttp.Error(w, fmt.Sprintf(\"unknown request path %q\", r.URL.Path), http.StatusBadRequest)",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tw.Header().Set(\"Content-Type\", \"application/protobuf\")",
                "+\tw.Write(v)",
                "+}",
                "+",
                "+// RenewHTTP renews a lease at a given primary server.",
                "+// TODO: Batch request in future?",
                "+func RenewHTTP(ctx context.Context, id lease.LeaseID, url string, rt http.RoundTripper) (int64, error) {",
                "+\t// will post lreq protobuf to leader",
                "+\tlreq, err := (&pb.LeaseKeepAliveRequest{ID: int64(id)}).Marshal()",
                "+\tif err != nil {",
                "+\t\treturn -1, err",
                "+\t}",
                "+",
                "+\tcc := &http.Client{Transport: rt}",
                "+\treq, err := http.NewRequest(\"POST\", url, bytes.NewReader(lreq))",
                "+\tif err != nil {",
                "+\t\treturn -1, err",
                "+\t}",
                "+\treq.Header.Set(\"Content-Type\", \"application/protobuf\")",
                "+\treq.Cancel = ctx.Done()",
                "+",
                "+\tresp, err := cc.Do(req)",
                "+\tif err != nil {",
                "+\t\treturn -1, err",
                "+\t}",
                "+\tb, err := readResponse(resp)",
                "+\tif err != nil {",
                "+\t\treturn -1, err",
                "+\t}",
                "+",
                "+\tif resp.StatusCode == http.StatusRequestTimeout {",
                "+\t\treturn -1, ErrLeaseHTTPTimeout",
                "+\t}",
                "+",
                "+\tif resp.StatusCode == http.StatusNotFound {",
                "+\t\treturn -1, lease.ErrLeaseNotFound",
                "+\t}",
                "+",
                "+\tif resp.StatusCode != http.StatusOK {",
                "+\t\treturn -1, fmt.Errorf(\"lease: unknown error(%s)\", string(b))",
                "+\t}",
                "+",
                "+\tlresp := &pb.LeaseKeepAliveResponse{}",
                "+\tif err := lresp.Unmarshal(b); err != nil {",
                "+\t\treturn -1, fmt.Errorf(`lease: %v. data = \"%s\"`, err, string(b))",
                "+\t}",
                "+\tif lresp.ID != int64(id) {",
                "+\t\treturn -1, fmt.Errorf(\"lease: renew id mismatch\")",
                "+\t}",
                "+\treturn lresp.TTL, nil",
                "+}",
                "+",
                "+// TimeToLiveHTTP retrieves lease information of the given lease ID.",
                "+func TimeToLiveHTTP(ctx context.Context, id lease.LeaseID, keys bool, url string, rt http.RoundTripper) (*leasepb.LeaseInternalResponse, error) {",
                "+\t// will post lreq protobuf to leader",
                "+\tlreq, err := (&leasepb.LeaseInternalRequest{",
                "+\t\tLeaseTimeToLiveRequest: &pb.LeaseTimeToLiveRequest{",
                "+\t\t\tID:   int64(id),",
                "+\t\t\tKeys: keys,",
                "+\t\t},",
                "+\t}).Marshal()",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treq, err := http.NewRequest(\"POST\", url, bytes.NewReader(lreq))",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treq.Header.Set(\"Content-Type\", \"application/protobuf\")",
                "+",
                "+\treq = req.WithContext(ctx)",
                "+",
                "+\tcc := &http.Client{Transport: rt}",
                "+\tvar b []byte",
                "+\t// buffer errc channel so that errc don't block inside the go routinue",
                "+\tresp, err := cc.Do(req)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tb, err = readResponse(resp)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tif resp.StatusCode == http.StatusRequestTimeout {",
                "+\t\treturn nil, ErrLeaseHTTPTimeout",
                "+\t}",
                "+\tif resp.StatusCode == http.StatusNotFound {",
                "+\t\treturn nil, lease.ErrLeaseNotFound",
                "+\t}",
                "+\tif resp.StatusCode != http.StatusOK {",
                "+\t\treturn nil, fmt.Errorf(\"lease: unknown error(%s)\", string(b))",
                "+\t}",
                "+",
                "+\tlresp := &leasepb.LeaseInternalResponse{}",
                "+\tif err := lresp.Unmarshal(b); err != nil {",
                "+\t\treturn nil, fmt.Errorf(`lease: %v. data = \"%s\"`, err, string(b))",
                "+\t}",
                "+\tif lresp.LeaseTimeToLiveResponse.ID != int64(id) {",
                "+\t\treturn nil, fmt.Errorf(\"lease: renew id mismatch\")",
                "+\t}",
                "+\treturn lresp, nil",
                "+}",
                "+",
                "+func readResponse(resp *http.Response) (b []byte, err error) {",
                "+\tb, err = ioutil.ReadAll(resp.Body)",
                "+\thttputil.GracefulClose(resp)",
                "+\treturn",
                "+}",
                "diff --git a/lease/leasehttp/http_test.go b/lease/leasehttp/http_test.go",
                "new file mode 100644",
                "index 000000000..ba545b272",
                "--- /dev/null",
                "+++ b/lease/leasehttp/http_test.go",
                "@@ -0,0 +1,126 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package leasehttp",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"net/http\"",
                "+\t\"net/http/httptest\"",
                "+\t\"os\"",
                "+\t\"strings\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+)",
                "+",
                "+func TestRenewHTTP(t *testing.T) {",
                "+\tbe, tmpPath := backend.NewTmpBackend(time.Hour, 10000)",
                "+\tdefer os.Remove(tmpPath)",
                "+\tdefer be.Close()",
                "+",
                "+\tle := lease.NewLessor(be, int64(5))",
                "+\tle.Promote(time.Second)",
                "+\tl, err := le.Grant(1, int64(5))",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"failed to create lease: %v\", err)",
                "+\t}",
                "+",
                "+\tts := httptest.NewServer(NewHandler(le, waitReady))",
                "+\tdefer ts.Close()",
                "+",
                "+\tttl, err := RenewHTTP(context.TODO(), l.ID, ts.URL+LeasePrefix, http.DefaultTransport)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif ttl != 5 {",
                "+\t\tt.Fatalf(\"ttl expected 5, got %d\", ttl)",
                "+\t}",
                "+}",
                "+",
                "+func TestTimeToLiveHTTP(t *testing.T) {",
                "+\tbe, tmpPath := backend.NewTmpBackend(time.Hour, 10000)",
                "+\tdefer os.Remove(tmpPath)",
                "+\tdefer be.Close()",
                "+",
                "+\tle := lease.NewLessor(be, int64(5))",
                "+\tle.Promote(time.Second)",
                "+\tl, err := le.Grant(1, int64(5))",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"failed to create lease: %v\", err)",
                "+\t}",
                "+",
                "+\tts := httptest.NewServer(NewHandler(le, waitReady))",
                "+\tdefer ts.Close()",
                "+",
                "+\tresp, err := TimeToLiveHTTP(context.TODO(), l.ID, true, ts.URL+LeaseInternalPrefix, http.DefaultTransport)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif resp.LeaseTimeToLiveResponse.ID != 1 {",
                "+\t\tt.Fatalf(\"lease id expected 1, got %d\", resp.LeaseTimeToLiveResponse.ID)",
                "+\t}",
                "+\tif resp.LeaseTimeToLiveResponse.GrantedTTL != 5 {",
                "+\t\tt.Fatalf(\"granted TTL expected 5, got %d\", resp.LeaseTimeToLiveResponse.GrantedTTL)",
                "+\t}",
                "+}",
                "+",
                "+func TestRenewHTTPTimeout(t *testing.T) {",
                "+\ttestApplyTimeout(t, func(l *lease.Lease, serverURL string) error {",
                "+\t\t_, err := RenewHTTP(context.TODO(), l.ID, serverURL+LeasePrefix, http.DefaultTransport)",
                "+\t\treturn err",
                "+\t})",
                "+}",
                "+",
                "+func TestTimeToLiveHTTPTimeout(t *testing.T) {",
                "+\ttestApplyTimeout(t, func(l *lease.Lease, serverURL string) error {",
                "+\t\t_, err := TimeToLiveHTTP(context.TODO(), l.ID, true, serverURL+LeaseInternalPrefix, http.DefaultTransport)",
                "+\t\treturn err",
                "+\t})",
                "+}",
                "+",
                "+func testApplyTimeout(t *testing.T, f func(*lease.Lease, string) error) {",
                "+\tbe, tmpPath := backend.NewTmpBackend(time.Hour, 10000)",
                "+\tdefer os.Remove(tmpPath)",
                "+\tdefer be.Close()",
                "+",
                "+\tle := lease.NewLessor(be, int64(5))",
                "+\tle.Promote(time.Second)",
                "+\tl, err := le.Grant(1, int64(5))",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"failed to create lease: %v\", err)",
                "+\t}",
                "+",
                "+\tts := httptest.NewServer(NewHandler(le, waitNotReady))",
                "+\tdefer ts.Close()",
                "+\terr = f(l, ts.URL)",
                "+\tif err == nil {",
                "+\t\tt.Fatalf(\"expected timeout error, got nil\")",
                "+\t}",
                "+\tif strings.Compare(err.Error(), ErrLeaseHTTPTimeout.Error()) != 0 {",
                "+\t\tt.Fatalf(\"expected (%v), got (%v)\", ErrLeaseHTTPTimeout.Error(), err.Error())",
                "+\t}",
                "+}",
                "+",
                "+func waitReady() <-chan struct{} {",
                "+\tch := make(chan struct{})",
                "+\tclose(ch)",
                "+\treturn ch",
                "+}",
                "+",
                "+func waitNotReady() <-chan struct{} {",
                "+\treturn nil",
                "+}",
                "diff --git a/lease/leasepb/lease.pb.go b/lease/leasepb/lease.pb.go",
                "new file mode 100644",
                "index 000000000..4ab937672",
                "--- /dev/null",
                "+++ b/lease/leasepb/lease.pb.go",
                "@@ -0,0 +1,591 @@",
                "+// Code generated by protoc-gen-gogo. DO NOT EDIT.",
                "+// source: lease.proto",
                "+",
                "+/*",
                "+\tPackage leasepb is a generated protocol buffer package.",
                "+",
                "+\tIt is generated from these files:",
                "+\t\tlease.proto",
                "+",
                "+\tIt has these top-level messages:",
                "+\t\tLease",
                "+\t\tLeaseInternalRequest",
                "+\t\tLeaseInternalResponse",
                "+*/",
                "+package leasepb",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+",
                "+\tproto \"github.com/golang/protobuf/proto\"",
                "+",
                "+\tmath \"math\"",
                "+",
                "+\t_ \"github.com/gogo/protobuf/gogoproto\"",
                "+",
                "+\tetcdserverpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+",
                "+\tio \"io\"",
                "+)",
                "+",
                "+// Reference imports to suppress errors if they are not otherwise used.",
                "+var _ = proto.Marshal",
                "+var _ = fmt.Errorf",
                "+var _ = math.Inf",
                "+",
                "+// This is a compile-time assertion to ensure that this generated file",
                "+// is compatible with the proto package it is being compiled against.",
                "+// A compilation error at this line likely means your copy of the",
                "+// proto package needs to be updated.",
                "+const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package",
                "+",
                "+type Lease struct {",
                "+\tID  int64 `protobuf:\"varint,1,opt,name=ID,proto3\" json:\"ID,omitempty\"`",
                "+\tTTL int64 `protobuf:\"varint,2,opt,name=TTL,proto3\" json:\"TTL,omitempty\"`",
                "+}",
                "+",
                "+func (m *Lease) Reset()                    { *m = Lease{} }",
                "+func (m *Lease) String() string            { return proto.CompactTextString(m) }",
                "+func (*Lease) ProtoMessage()               {}",
                "+func (*Lease) Descriptor() ([]byte, []int) { return fileDescriptorLease, []int{0} }",
                "+",
                "+type LeaseInternalRequest struct {",
                "+\tLeaseTimeToLiveRequest *etcdserverpb.LeaseTimeToLiveRequest `protobuf:\"bytes,1,opt,name=LeaseTimeToLiveRequest\" json:\"LeaseTimeToLiveRequest,omitempty\"`",
                "+}",
                "+",
                "+func (m *LeaseInternalRequest) Reset()                    { *m = LeaseInternalRequest{} }",
                "+func (m *LeaseInternalRequest) String() string            { return proto.CompactTextString(m) }",
                "+func (*LeaseInternalRequest) ProtoMessage()               {}",
                "+func (*LeaseInternalRequest) Descriptor() ([]byte, []int) { return fileDescriptorLease, []int{1} }",
                "+",
                "+type LeaseInternalResponse struct {",
                "+\tLeaseTimeToLiveResponse *etcdserverpb.LeaseTimeToLiveResponse `protobuf:\"bytes,1,opt,name=LeaseTimeToLiveResponse\" json:\"LeaseTimeToLiveResponse,omitempty\"`",
                "+}",
                "+",
                "+func (m *LeaseInternalResponse) Reset()                    { *m = LeaseInternalResponse{} }",
                "+func (m *LeaseInternalResponse) String() string            { return proto.CompactTextString(m) }",
                "+func (*LeaseInternalResponse) ProtoMessage()               {}",
                "+func (*LeaseInternalResponse) Descriptor() ([]byte, []int) { return fileDescriptorLease, []int{2} }",
                "+",
                "+func init() {",
                "+\tproto.RegisterType((*Lease)(nil), \"leasepb.Lease\")",
                "+\tproto.RegisterType((*LeaseInternalRequest)(nil), \"leasepb.LeaseInternalRequest\")",
                "+\tproto.RegisterType((*LeaseInternalResponse)(nil), \"leasepb.LeaseInternalResponse\")",
                "+}",
                "+func (m *Lease) Marshal() (dAtA []byte, err error) {",
                "+\tsize := m.Size()",
                "+\tdAtA = make([]byte, size)",
                "+\tn, err := m.MarshalTo(dAtA)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn dAtA[:n], nil",
                "+}",
                "+",
                "+func (m *Lease) MarshalTo(dAtA []byte) (int, error) {",
                "+\tvar i int",
                "+\t_ = i",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.ID != 0 {",
                "+\t\tdAtA[i] = 0x8",
                "+\t\ti++",
                "+\t\ti = encodeVarintLease(dAtA, i, uint64(m.ID))",
                "+\t}",
                "+\tif m.TTL != 0 {",
                "+\t\tdAtA[i] = 0x10",
                "+\t\ti++",
                "+\t\ti = encodeVarintLease(dAtA, i, uint64(m.TTL))",
                "+\t}",
                "+\treturn i, nil",
                "+}",
                "+",
                "+func (m *LeaseInternalRequest) Marshal() (dAtA []byte, err error) {",
                "+\tsize := m.Size()",
                "+\tdAtA = make([]byte, size)",
                "+\tn, err := m.MarshalTo(dAtA)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn dAtA[:n], nil",
                "+}",
                "+",
                "+func (m *LeaseInternalRequest) MarshalTo(dAtA []byte) (int, error) {",
                "+\tvar i int",
                "+\t_ = i",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.LeaseTimeToLiveRequest != nil {",
                "+\t\tdAtA[i] = 0xa",
                "+\t\ti++",
                "+\t\ti = encodeVarintLease(dAtA, i, uint64(m.LeaseTimeToLiveRequest.Size()))",
                "+\t\tn1, err := m.LeaseTimeToLiveRequest.MarshalTo(dAtA[i:])",
                "+\t\tif err != nil {",
                "+\t\t\treturn 0, err",
                "+\t\t}",
                "+\t\ti += n1",
                "+\t}",
                "+\treturn i, nil",
                "+}",
                "+",
                "+func (m *LeaseInternalResponse) Marshal() (dAtA []byte, err error) {",
                "+\tsize := m.Size()",
                "+\tdAtA = make([]byte, size)",
                "+\tn, err := m.MarshalTo(dAtA)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn dAtA[:n], nil",
                "+}",
                "+",
                "+func (m *LeaseInternalResponse) MarshalTo(dAtA []byte) (int, error) {",
                "+\tvar i int",
                "+\t_ = i",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.LeaseTimeToLiveResponse != nil {",
                "+\t\tdAtA[i] = 0xa",
                "+\t\ti++",
                "+\t\ti = encodeVarintLease(dAtA, i, uint64(m.LeaseTimeToLiveResponse.Size()))",
                "+\t\tn2, err := m.LeaseTimeToLiveResponse.MarshalTo(dAtA[i:])",
                "+\t\tif err != nil {",
                "+\t\t\treturn 0, err",
                "+\t\t}",
                "+\t\ti += n2",
                "+\t}",
                "+\treturn i, nil",
                "+}",
                "+",
                "+func encodeVarintLease(dAtA []byte, offset int, v uint64) int {",
                "+\tfor v >= 1<<7 {",
                "+\t\tdAtA[offset] = uint8(v&0x7f | 0x80)",
                "+\t\tv >>= 7",
                "+\t\toffset++",
                "+\t}",
                "+\tdAtA[offset] = uint8(v)",
                "+\treturn offset + 1",
                "+}",
                "+func (m *Lease) Size() (n int) {",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.ID != 0 {",
                "+\t\tn += 1 + sovLease(uint64(m.ID))",
                "+\t}",
                "+\tif m.TTL != 0 {",
                "+\t\tn += 1 + sovLease(uint64(m.TTL))",
                "+\t}",
                "+\treturn n",
                "+}",
                "+",
                "+func (m *LeaseInternalRequest) Size() (n int) {",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.LeaseTimeToLiveRequest != nil {",
                "+\t\tl = m.LeaseTimeToLiveRequest.Size()",
                "+\t\tn += 1 + l + sovLease(uint64(l))",
                "+\t}",
                "+\treturn n",
                "+}",
                "+",
                "+func (m *LeaseInternalResponse) Size() (n int) {",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.LeaseTimeToLiveResponse != nil {",
                "+\t\tl = m.LeaseTimeToLiveResponse.Size()",
                "+\t\tn += 1 + l + sovLease(uint64(l))",
                "+\t}",
                "+\treturn n",
                "+}",
                "+",
                "+func sovLease(x uint64) (n int) {",
                "+\tfor {",
                "+\t\tn++",
                "+\t\tx >>= 7",
                "+\t\tif x == 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+\treturn n",
                "+}",
                "+func sozLease(x uint64) (n int) {",
                "+\treturn sovLease(uint64((x << 1) ^ uint64((int64(x) >> 63))))",
                "+}",
                "+func (m *Lease) Unmarshal(dAtA []byte) error {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tpreIndex := iNdEx",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn ErrIntOverflowLease",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfieldNum := int32(wire >> 3)",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tif wireType == 4 {",
                "+\t\t\treturn fmt.Errorf(\"proto: Lease: wiretype end group for non-group\")",
                "+\t\t}",
                "+\t\tif fieldNum <= 0 {",
                "+\t\t\treturn fmt.Errorf(\"proto: Lease: illegal tag %d (wire type %d)\", fieldNum, wire)",
                "+\t\t}",
                "+\t\tswitch fieldNum {",
                "+\t\tcase 1:",
                "+\t\t\tif wireType != 0 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field ID\", wireType)",
                "+\t\t\t}",
                "+\t\t\tm.ID = 0",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowLease",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tm.ID |= (int64(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\tcase 2:",
                "+\t\t\tif wireType != 0 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field TTL\", wireType)",
                "+\t\t\t}",
                "+\t\t\tm.TTL = 0",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowLease",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tm.TTL |= (int64(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\tdefault:",
                "+\t\t\tiNdEx = preIndex",
                "+\t\t\tskippy, err := skipLease(dAtA[iNdEx:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tif skippy < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthLease",
                "+\t\t\t}",
                "+\t\t\tif (iNdEx + skippy) > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tiNdEx += skippy",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif iNdEx > l {",
                "+\t\treturn io.ErrUnexpectedEOF",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+func (m *LeaseInternalRequest) Unmarshal(dAtA []byte) error {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tpreIndex := iNdEx",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn ErrIntOverflowLease",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfieldNum := int32(wire >> 3)",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tif wireType == 4 {",
                "+\t\t\treturn fmt.Errorf(\"proto: LeaseInternalRequest: wiretype end group for non-group\")",
                "+\t\t}",
                "+\t\tif fieldNum <= 0 {",
                "+\t\t\treturn fmt.Errorf(\"proto: LeaseInternalRequest: illegal tag %d (wire type %d)\", fieldNum, wire)",
                "+\t\t}",
                "+\t\tswitch fieldNum {",
                "+\t\tcase 1:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field LeaseTimeToLiveRequest\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar msglen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowLease",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tmsglen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif msglen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthLease",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + msglen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tif m.LeaseTimeToLiveRequest == nil {",
                "+\t\t\t\tm.LeaseTimeToLiveRequest = &etcdserverpb.LeaseTimeToLiveRequest{}",
                "+\t\t\t}",
                "+\t\t\tif err := m.LeaseTimeToLiveRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tdefault:",
                "+\t\t\tiNdEx = preIndex",
                "+\t\t\tskippy, err := skipLease(dAtA[iNdEx:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tif skippy < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthLease",
                "+\t\t\t}",
                "+\t\t\tif (iNdEx + skippy) > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tiNdEx += skippy",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif iNdEx > l {",
                "+\t\treturn io.ErrUnexpectedEOF",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+func (m *LeaseInternalResponse) Unmarshal(dAtA []byte) error {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tpreIndex := iNdEx",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn ErrIntOverflowLease",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfieldNum := int32(wire >> 3)",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tif wireType == 4 {",
                "+\t\t\treturn fmt.Errorf(\"proto: LeaseInternalResponse: wiretype end group for non-group\")",
                "+\t\t}",
                "+\t\tif fieldNum <= 0 {",
                "+\t\t\treturn fmt.Errorf(\"proto: LeaseInternalResponse: illegal tag %d (wire type %d)\", fieldNum, wire)",
                "+\t\t}",
                "+\t\tswitch fieldNum {",
                "+\t\tcase 1:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field LeaseTimeToLiveResponse\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar msglen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowLease",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tmsglen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif msglen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthLease",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + msglen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tif m.LeaseTimeToLiveResponse == nil {",
                "+\t\t\t\tm.LeaseTimeToLiveResponse = &etcdserverpb.LeaseTimeToLiveResponse{}",
                "+\t\t\t}",
                "+\t\t\tif err := m.LeaseTimeToLiveResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tdefault:",
                "+\t\t\tiNdEx = preIndex",
                "+\t\t\tskippy, err := skipLease(dAtA[iNdEx:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tif skippy < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthLease",
                "+\t\t\t}",
                "+\t\t\tif (iNdEx + skippy) > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tiNdEx += skippy",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif iNdEx > l {",
                "+\t\treturn io.ErrUnexpectedEOF",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+func skipLease(dAtA []byte) (n int, err error) {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn 0, ErrIntOverflowLease",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tswitch wireType {",
                "+\t\tcase 0:",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn 0, ErrIntOverflowLease",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tif dAtA[iNdEx-1] < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 1:",
                "+\t\t\tiNdEx += 8",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 2:",
                "+\t\t\tvar length int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn 0, ErrIntOverflowLease",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tlength |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tiNdEx += length",
                "+\t\t\tif length < 0 {",
                "+\t\t\t\treturn 0, ErrInvalidLengthLease",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 3:",
                "+\t\t\tfor {",
                "+\t\t\t\tvar innerWire uint64",
                "+\t\t\t\tvar start int = iNdEx",
                "+\t\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\t\treturn 0, ErrIntOverflowLease",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\t\tiNdEx++",
                "+\t\t\t\t\tinnerWire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\t\tbreak",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\tinnerWireType := int(innerWire & 0x7)",
                "+\t\t\t\tif innerWireType == 4 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t\tnext, err := skipLease(dAtA[start:])",
                "+\t\t\t\tif err != nil {",
                "+\t\t\t\t\treturn 0, err",
                "+\t\t\t\t}",
                "+\t\t\t\tiNdEx = start + next",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 4:",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 5:",
                "+\t\t\tiNdEx += 4",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tdefault:",
                "+\t\t\treturn 0, fmt.Errorf(\"proto: illegal wireType %d\", wireType)",
                "+\t\t}",
                "+\t}",
                "+\tpanic(\"unreachable\")",
                "+}",
                "+",
                "+var (",
                "+\tErrInvalidLengthLease = fmt.Errorf(\"proto: negative length found during unmarshaling\")",
                "+\tErrIntOverflowLease   = fmt.Errorf(\"proto: integer overflow\")",
                "+)",
                "+",
                "+func init() { proto.RegisterFile(\"lease.proto\", fileDescriptorLease) }",
                "+",
                "+var fileDescriptorLease = []byte{",
                "+\t// 233 bytes of a gzipped FileDescriptorProto",
                "+\t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x49, 0x4d, 0x2c,",
                "+\t0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x07, 0x73, 0x0a, 0x92, 0xa4, 0x44, 0xd2,",
                "+\t0xf3, 0xd3, 0xf3, 0xc1, 0x62, 0xfa, 0x20, 0x16, 0x44, 0x5a, 0x4a, 0x2d, 0xb5, 0x24, 0x39, 0x45,",
                "+\t0x1f, 0x44, 0x14, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x21, 0x31, 0x0b, 0x92, 0xf4, 0x8b, 0x0a, 0x92,",
                "+\t0x21, 0xea, 0x94, 0x34, 0xb9, 0x58, 0x7d, 0x40, 0x06, 0x09, 0xf1, 0x71, 0x31, 0x79, 0xba, 0x48,",
                "+\t0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x31, 0x79, 0xba, 0x08, 0x09, 0x70, 0x31, 0x87, 0x84, 0xf8,",
                "+\t0x48, 0x30, 0x81, 0x05, 0x40, 0x4c, 0xa5, 0x12, 0x2e, 0x11, 0xb0, 0x52, 0xcf, 0xbc, 0x92, 0xd4,",
                "+\t0xa2, 0xbc, 0xc4, 0x9c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0xa1, 0x18, 0x2e, 0x31, 0xb0,",
                "+\t0x78, 0x48, 0x66, 0x6e, 0x6a, 0x48, 0xbe, 0x4f, 0x66, 0x59, 0x2a, 0x54, 0x06, 0x6c, 0x1a, 0xb7,",
                "+\t0x91, 0x8a, 0x1e, 0xb2, 0xdd, 0x7a, 0xd8, 0xd5, 0x06, 0xe1, 0x30, 0x43, 0xa9, 0x82, 0x4b, 0x14,",
                "+\t0xcd, 0xd6, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa1, 0x78, 0x2e, 0x71, 0x0c, 0x2d, 0x10, 0x29,",
                "+\t0xa8, 0xbd, 0xaa, 0x04, 0xec, 0x85, 0x28, 0x0e, 0xc2, 0x65, 0x8a, 0x93, 0xc4, 0x89, 0x87, 0x72,",
                "+\t0x0c, 0x17, 0x1e, 0xca, 0x31, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47,",
                "+\t0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0xc3, 0xce, 0x18, 0x10, 0x00, 0x00, 0xff,",
                "+\t0xff, 0x9f, 0xf2, 0x42, 0xe0, 0x91, 0x01, 0x00, 0x00,",
                "+}",
                "diff --git a/lease/leasepb/lease.proto b/lease/leasepb/lease.proto",
                "new file mode 100644",
                "index 000000000..be414b993",
                "--- /dev/null",
                "+++ b/lease/leasepb/lease.proto",
                "@@ -0,0 +1,24 @@",
                "+syntax = \"proto3\";",
                "+package leasepb;",
                "+",
                "+import \"gogoproto/gogo.proto\";",
                "+import \"etcd/etcdserver/etcdserverpb/rpc.proto\";",
                "+",
                "+option (gogoproto.marshaler_all) = true;",
                "+option (gogoproto.sizer_all) = true;",
                "+option (gogoproto.unmarshaler_all) = true;",
                "+option (gogoproto.goproto_getters_all) = false;",
                "+option (gogoproto.goproto_enum_prefix_all) = false;",
                "+",
                "+message Lease {",
                "+  int64 ID = 1;",
                "+  int64 TTL = 2;",
                "+}",
                "+",
                "+message LeaseInternalRequest {",
                "+  etcdserverpb.LeaseTimeToLiveRequest LeaseTimeToLiveRequest = 1;",
                "+}",
                "+",
                "+message LeaseInternalResponse {",
                "+  etcdserverpb.LeaseTimeToLiveResponse LeaseTimeToLiveResponse = 1;",
                "+}",
                "diff --git a/lease/lessor.go b/lease/lessor.go",
                "new file mode 100644",
                "index 000000000..d3dda9bdc",
                "--- /dev/null",
                "+++ b/lease/lessor.go",
                "@@ -0,0 +1,672 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package lease",
                "+",
                "+import (",
                "+\t\"encoding/binary\"",
                "+\t\"errors\"",
                "+\t\"math\"",
                "+\t\"sort\"",
                "+\t\"sync\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/lease/leasepb\"",
                "+)",
                "+",
                "+// NoLease is a special LeaseID representing the absence of a lease.",
                "+const NoLease = LeaseID(0)",
                "+",
                "+var (",
                "+\tforever = time.Time{}",
                "+",
                "+\tleaseBucketName = []byte(\"lease\")",
                "+",
                "+\t// maximum number of leases to revoke per second; configurable for tests",
                "+\tleaseRevokeRate = 1000",
                "+",
                "+\tErrNotPrimary    = errors.New(\"not a primary lessor\")",
                "+\tErrLeaseNotFound = errors.New(\"lease not found\")",
                "+\tErrLeaseExists   = errors.New(\"lease already exists\")",
                "+)",
                "+",
                "+// TxnDelete is a TxnWrite that only permits deletes. Defined here",
                "+// to avoid circular dependency with mvcc.",
                "+type TxnDelete interface {",
                "+\tDeleteRange(key, end []byte) (n, rev int64)",
                "+\tEnd()",
                "+}",
                "+",
                "+// RangeDeleter is a TxnDelete constructor.",
                "+type RangeDeleter func() TxnDelete",
                "+",
                "+type LeaseID int64",
                "+",
                "+// Lessor owns leases. It can grant, revoke, renew and modify leases for lessee.",
                "+type Lessor interface {",
                "+\t// SetRangeDeleter lets the lessor create TxnDeletes to the store.",
                "+\t// Lessor deletes the items in the revoked or expired lease by creating",
                "+\t// new TxnDeletes.",
                "+\tSetRangeDeleter(rd RangeDeleter)",
                "+",
                "+\t// Grant grants a lease that expires at least after TTL seconds.",
                "+\tGrant(id LeaseID, ttl int64) (*Lease, error)",
                "+\t// Revoke revokes a lease with given ID. The item attached to the",
                "+\t// given lease will be removed. If the ID does not exist, an error",
                "+\t// will be returned.",
                "+\tRevoke(id LeaseID) error",
                "+",
                "+\t// Attach attaches given leaseItem to the lease with given LeaseID.",
                "+\t// If the lease does not exist, an error will be returned.",
                "+\tAttach(id LeaseID, items []LeaseItem) error",
                "+",
                "+\t// GetLease returns LeaseID for given item.",
                "+\t// If no lease found, NoLease value will be returned.",
                "+\tGetLease(item LeaseItem) LeaseID",
                "+",
                "+\t// Detach detaches given leaseItem from the lease with given LeaseID.",
                "+\t// If the lease does not exist, an error will be returned.",
                "+\tDetach(id LeaseID, items []LeaseItem) error",
                "+",
                "+\t// Promote promotes the lessor to be the primary lessor. Primary lessor manages",
                "+\t// the expiration and renew of leases.",
                "+\t// Newly promoted lessor renew the TTL of all lease to extend + previous TTL.",
                "+\tPromote(extend time.Duration)",
                "+",
                "+\t// Demote demotes the lessor from being the primary lessor.",
                "+\tDemote()",
                "+",
                "+\t// Renew renews a lease with given ID. It returns the renewed TTL. If the ID does not exist,",
                "+\t// an error will be returned.",
                "+\tRenew(id LeaseID) (int64, error)",
                "+",
                "+\t// Lookup gives the lease at a given lease id, if any",
                "+\tLookup(id LeaseID) *Lease",
                "+",
                "+\t// Leases lists all leases.",
                "+\tLeases() []*Lease",
                "+",
                "+\t// ExpiredLeasesC returns a chan that is used to receive expired leases.",
                "+\tExpiredLeasesC() <-chan []*Lease",
                "+",
                "+\t// Recover recovers the lessor state from the given backend and RangeDeleter.",
                "+\tRecover(b backend.Backend, rd RangeDeleter)",
                "+",
                "+\t// Stop stops the lessor for managing leases. The behavior of calling Stop multiple",
                "+\t// times is undefined.",
                "+\tStop()",
                "+}",
                "+",
                "+// lessor implements Lessor interface.",
                "+// TODO: use clockwork for testability.",
                "+type lessor struct {",
                "+\tmu sync.Mutex",
                "+",
                "+\t// demotec is set when the lessor is the primary.",
                "+\t// demotec will be closed if the lessor is demoted.",
                "+\tdemotec chan struct{}",
                "+",
                "+\t// TODO: probably this should be a heap with a secondary",
                "+\t// id index.",
                "+\t// Now it is O(N) to loop over the leases to find expired ones.",
                "+\t// We want to make Grant, Revoke, and findExpiredLeases all O(logN) and",
                "+\t// Renew O(1).",
                "+\t// findExpiredLeases and Renew should be the most frequent operations.",
                "+\tleaseMap map[LeaseID]*Lease",
                "+",
                "+\titemMap map[LeaseItem]LeaseID",
                "+",
                "+\t// When a lease expires, the lessor will delete the",
                "+\t// leased range (or key) by the RangeDeleter.",
                "+\trd RangeDeleter",
                "+",
                "+\t// backend to persist leases. We only persist lease ID and expiry for now.",
                "+\t// The leased items can be recovered by iterating all the keys in kv.",
                "+\tb backend.Backend",
                "+",
                "+\t// minLeaseTTL is the minimum lease TTL that can be granted for a lease. Any",
                "+\t// requests for shorter TTLs are extended to the minimum TTL.",
                "+\tminLeaseTTL int64",
                "+",
                "+\texpiredC chan []*Lease",
                "+\t// stopC is a channel whose closure indicates that the lessor should be stopped.",
                "+\tstopC chan struct{}",
                "+\t// doneC is a channel whose closure indicates that the lessor is stopped.",
                "+\tdoneC chan struct{}",
                "+}",
                "+",
                "+func NewLessor(b backend.Backend, minLeaseTTL int64) Lessor {",
                "+\treturn newLessor(b, minLeaseTTL)",
                "+}",
                "+",
                "+func newLessor(b backend.Backend, minLeaseTTL int64) *lessor {",
                "+\tl := &lessor{",
                "+\t\tleaseMap:    make(map[LeaseID]*Lease),",
                "+\t\titemMap:     make(map[LeaseItem]LeaseID),",
                "+\t\tb:           b,",
                "+\t\tminLeaseTTL: minLeaseTTL,",
                "+\t\t// expiredC is a small buffered chan to avoid unnecessary blocking.",
                "+\t\texpiredC: make(chan []*Lease, 16),",
                "+\t\tstopC:    make(chan struct{}),",
                "+\t\tdoneC:    make(chan struct{}),",
                "+\t}",
                "+\tl.initAndRecover()",
                "+",
                "+\tgo l.runLoop()",
                "+",
                "+\treturn l",
                "+}",
                "+",
                "+// isPrimary indicates if this lessor is the primary lessor. The primary",
                "+// lessor manages lease expiration and renew.",
                "+//",
                "+// in etcd, raft leader is the primary. Thus there might be two primary",
                "+// leaders at the same time (raft allows concurrent leader but with different term)",
                "+// for at most a leader election timeout.",
                "+// The old primary leader cannot affect the correctness since its proposal has a",
                "+// smaller term and will not be committed.",
                "+//",
                "+// TODO: raft follower do not forward lease management proposals. There might be a",
                "+// very small window (within second normally which depends on go scheduling) that",
                "+// a raft follow is the primary between the raft leader demotion and lessor demotion.",
                "+// Usually this should not be a problem. Lease should not be that sensitive to timing.",
                "+func (le *lessor) isPrimary() bool {",
                "+\treturn le.demotec != nil",
                "+}",
                "+",
                "+func (le *lessor) SetRangeDeleter(rd RangeDeleter) {",
                "+\tle.mu.Lock()",
                "+\tdefer le.mu.Unlock()",
                "+",
                "+\tle.rd = rd",
                "+}",
                "+",
                "+func (le *lessor) Grant(id LeaseID, ttl int64) (*Lease, error) {",
                "+\tif id == NoLease {",
                "+\t\treturn nil, ErrLeaseNotFound",
                "+\t}",
                "+",
                "+\t// TODO: when lessor is under high load, it should give out lease",
                "+\t// with longer TTL to reduce renew load.",
                "+\tl := &Lease{",
                "+\t\tID:      id,",
                "+\t\tttl:     ttl,",
                "+\t\titemSet: make(map[LeaseItem]struct{}),",
                "+\t\trevokec: make(chan struct{}),",
                "+\t}",
                "+",
                "+\tle.mu.Lock()",
                "+\tdefer le.mu.Unlock()",
                "+",
                "+\tif _, ok := le.leaseMap[id]; ok {",
                "+\t\treturn nil, ErrLeaseExists",
                "+\t}",
                "+",
                "+\tif l.ttl < le.minLeaseTTL {",
                "+\t\tl.ttl = le.minLeaseTTL",
                "+\t}",
                "+",
                "+\tif le.isPrimary() {",
                "+\t\tl.refresh(0)",
                "+\t} else {",
                "+\t\tl.forever()",
                "+\t}",
                "+",
                "+\tle.leaseMap[id] = l",
                "+\tl.persistTo(le.b)",
                "+",
                "+\treturn l, nil",
                "+}",
                "+",
                "+func (le *lessor) Revoke(id LeaseID) error {",
                "+\tle.mu.Lock()",
                "+",
                "+\tl := le.leaseMap[id]",
                "+\tif l == nil {",
                "+\t\tle.mu.Unlock()",
                "+\t\treturn ErrLeaseNotFound",
                "+\t}",
                "+\tdefer close(l.revokec)",
                "+\t// unlock before doing external work",
                "+\tle.mu.Unlock()",
                "+",
                "+\tif le.rd == nil {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\ttxn := le.rd()",
                "+",
                "+\t// sort keys so deletes are in same order among all members,",
                "+\t// otherwise the backened hashes will be different",
                "+\tkeys := l.Keys()",
                "+\tsort.StringSlice(keys).Sort()",
                "+\tfor _, key := range keys {",
                "+\t\ttxn.DeleteRange([]byte(key), nil)",
                "+\t}",
                "+",
                "+\tle.mu.Lock()",
                "+\tdefer le.mu.Unlock()",
                "+\tdelete(le.leaseMap, l.ID)",
                "+\t// lease deletion needs to be in the same backend transaction with the",
                "+\t// kv deletion. Or we might end up with not executing the revoke or not",
                "+\t// deleting the keys if etcdserver fails in between.",
                "+\tle.b.BatchTx().UnsafeDelete(leaseBucketName, int64ToBytes(int64(l.ID)))",
                "+",
                "+\ttxn.End()",
                "+\treturn nil",
                "+}",
                "+",
                "+// Renew renews an existing lease. If the given lease does not exist or",
                "+// has expired, an error will be returned.",
                "+func (le *lessor) Renew(id LeaseID) (int64, error) {",
                "+\tle.mu.Lock()",
                "+",
                "+\tunlock := func() { le.mu.Unlock() }",
                "+\tdefer func() { unlock() }()",
                "+",
                "+\tif !le.isPrimary() {",
                "+\t\t// forward renew request to primary instead of returning error.",
                "+\t\treturn -1, ErrNotPrimary",
                "+\t}",
                "+",
                "+\tdemotec := le.demotec",
                "+",
                "+\tl := le.leaseMap[id]",
                "+\tif l == nil {",
                "+\t\treturn -1, ErrLeaseNotFound",
                "+\t}",
                "+",
                "+\tif l.expired() {",
                "+\t\tle.mu.Unlock()",
                "+\t\tunlock = func() {}",
                "+\t\tselect {",
                "+\t\t// A expired lease might be pending for revoking or going through",
                "+\t\t// quorum to be revoked. To be accurate, renew request must wait for the",
                "+\t\t// deletion to complete.",
                "+\t\tcase <-l.revokec:",
                "+\t\t\treturn -1, ErrLeaseNotFound",
                "+\t\t// The expired lease might fail to be revoked if the primary changes.",
                "+\t\t// The caller will retry on ErrNotPrimary.",
                "+\t\tcase <-demotec:",
                "+\t\t\treturn -1, ErrNotPrimary",
                "+\t\tcase <-le.stopC:",
                "+\t\t\treturn -1, ErrNotPrimary",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tl.refresh(0)",
                "+\treturn l.ttl, nil",
                "+}",
                "+",
                "+func (le *lessor) Lookup(id LeaseID) *Lease {",
                "+\tle.mu.Lock()",
                "+\tdefer le.mu.Unlock()",
                "+\treturn le.leaseMap[id]",
                "+}",
                "+",
                "+func (le *lessor) unsafeLeases() []*Lease {",
                "+\tleases := make([]*Lease, 0, len(le.leaseMap))",
                "+\tfor _, l := range le.leaseMap {",
                "+\t\tleases = append(leases, l)",
                "+\t}",
                "+\tsort.Sort(leasesByExpiry(leases))",
                "+\treturn leases",
                "+}",
                "+",
                "+func (le *lessor) Leases() []*Lease {",
                "+\tle.mu.Lock()",
                "+\tls := le.unsafeLeases()",
                "+\tle.mu.Unlock()",
                "+\treturn ls",
                "+}",
                "+",
                "+func (le *lessor) Promote(extend time.Duration) {",
                "+\tle.mu.Lock()",
                "+\tdefer le.mu.Unlock()",
                "+",
                "+\tle.demotec = make(chan struct{})",
                "+",
                "+\t// refresh the expiries of all leases.",
                "+\tfor _, l := range le.leaseMap {",
                "+\t\tl.refresh(extend)",
                "+\t}",
                "+",
                "+\tif len(le.leaseMap) < leaseRevokeRate {",
                "+\t\t// no possibility of lease pile-up",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\t// adjust expiries in case of overlap",
                "+\tleases := le.unsafeLeases()",
                "+",
                "+\tbaseWindow := leases[0].Remaining()",
                "+\tnextWindow := baseWindow + time.Second",
                "+\texpires := 0",
                "+\t// have fewer expires than the total revoke rate so piled up leases",
                "+\t// don't consume the entire revoke limit",
                "+\ttargetExpiresPerSecond := (3 * leaseRevokeRate) / 4",
                "+\tfor _, l := range leases {",
                "+\t\tremaining := l.Remaining()",
                "+\t\tif remaining > nextWindow {",
                "+\t\t\tbaseWindow = remaining",
                "+\t\t\tnextWindow = baseWindow + time.Second",
                "+\t\t\texpires = 1",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\texpires++",
                "+\t\tif expires <= targetExpiresPerSecond {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\trateDelay := float64(time.Second) * (float64(expires) / float64(targetExpiresPerSecond))",
                "+\t\t// If leases are extended by n seconds, leases n seconds ahead of the",
                "+\t\t// base window should be extended by only one second.",
                "+\t\trateDelay -= float64(remaining - baseWindow)",
                "+\t\tdelay := time.Duration(rateDelay)",
                "+\t\tnextWindow = baseWindow + delay",
                "+\t\tl.refresh(delay + extend)",
                "+\t}",
                "+}",
                "+",
                "+type leasesByExpiry []*Lease",
                "+",
                "+func (le leasesByExpiry) Len() int           { return len(le) }",
                "+func (le leasesByExpiry) Less(i, j int) bool { return le[i].Remaining() < le[j].Remaining() }",
                "+func (le leasesByExpiry) Swap(i, j int)      { le[i], le[j] = le[j], le[i] }",
                "+",
                "+func (le *lessor) Demote() {",
                "+\tle.mu.Lock()",
                "+\tdefer le.mu.Unlock()",
                "+",
                "+\t// set the expiries of all leases to forever",
                "+\tfor _, l := range le.leaseMap {",
                "+\t\tl.forever()",
                "+\t}",
                "+",
                "+\tif le.demotec != nil {",
                "+\t\tclose(le.demotec)",
                "+\t\tle.demotec = nil",
                "+\t}",
                "+}",
                "+",
                "+// Attach attaches items to the lease with given ID. When the lease",
                "+// expires, the attached items will be automatically removed.",
                "+// If the given lease does not exist, an error will be returned.",
                "+func (le *lessor) Attach(id LeaseID, items []LeaseItem) error {",
                "+\tle.mu.Lock()",
                "+\tdefer le.mu.Unlock()",
                "+",
                "+\tl := le.leaseMap[id]",
                "+\tif l == nil {",
                "+\t\treturn ErrLeaseNotFound",
                "+\t}",
                "+",
                "+\tl.mu.Lock()",
                "+\tfor _, it := range items {",
                "+\t\tl.itemSet[it] = struct{}{}",
                "+\t\tle.itemMap[it] = id",
                "+\t}",
                "+\tl.mu.Unlock()",
                "+\treturn nil",
                "+}",
                "+",
                "+func (le *lessor) GetLease(item LeaseItem) LeaseID {",
                "+\tle.mu.Lock()",
                "+\tid := le.itemMap[item]",
                "+\tle.mu.Unlock()",
                "+\treturn id",
                "+}",
                "+",
                "+// Detach detaches items from the lease with given ID.",
                "+// If the given lease does not exist, an error will be returned.",
                "+func (le *lessor) Detach(id LeaseID, items []LeaseItem) error {",
                "+\tle.mu.Lock()",
                "+\tdefer le.mu.Unlock()",
                "+",
                "+\tl := le.leaseMap[id]",
                "+\tif l == nil {",
                "+\t\treturn ErrLeaseNotFound",
                "+\t}",
                "+",
                "+\tl.mu.Lock()",
                "+\tfor _, it := range items {",
                "+\t\tdelete(l.itemSet, it)",
                "+\t\tdelete(le.itemMap, it)",
                "+\t}",
                "+\tl.mu.Unlock()",
                "+\treturn nil",
                "+}",
                "+",
                "+func (le *lessor) Recover(b backend.Backend, rd RangeDeleter) {",
                "+\tle.mu.Lock()",
                "+\tdefer le.mu.Unlock()",
                "+",
                "+\tle.b = b",
                "+\tle.rd = rd",
                "+\tle.leaseMap = make(map[LeaseID]*Lease)",
                "+\tle.itemMap = make(map[LeaseItem]LeaseID)",
                "+\tle.initAndRecover()",
                "+}",
                "+",
                "+func (le *lessor) ExpiredLeasesC() <-chan []*Lease {",
                "+\treturn le.expiredC",
                "+}",
                "+",
                "+func (le *lessor) Stop() {",
                "+\tclose(le.stopC)",
                "+\t<-le.doneC",
                "+}",
                "+",
                "+func (le *lessor) runLoop() {",
                "+\tdefer close(le.doneC)",
                "+",
                "+\tfor {",
                "+\t\tvar ls []*Lease",
                "+",
                "+\t\t// rate limit",
                "+\t\trevokeLimit := leaseRevokeRate / 2",
                "+",
                "+\t\tle.mu.Lock()",
                "+\t\tif le.isPrimary() {",
                "+\t\t\tls = le.findExpiredLeases(revokeLimit)",
                "+\t\t}",
                "+\t\tle.mu.Unlock()",
                "+",
                "+\t\tif len(ls) != 0 {",
                "+\t\t\tselect {",
                "+\t\t\tcase <-le.stopC:",
                "+\t\t\t\treturn",
                "+\t\t\tcase le.expiredC <- ls:",
                "+\t\t\tdefault:",
                "+\t\t\t\t// the receiver of expiredC is probably busy handling",
                "+\t\t\t\t// other stuff",
                "+\t\t\t\t// let's try this next time after 500ms",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tselect {",
                "+\t\tcase <-time.After(500 * time.Millisecond):",
                "+\t\tcase <-le.stopC:",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// findExpiredLeases loops leases in the leaseMap until reaching expired limit",
                "+// and returns the expired leases that needed to be revoked.",
                "+func (le *lessor) findExpiredLeases(limit int) []*Lease {",
                "+\tleases := make([]*Lease, 0, 16)",
                "+",
                "+\tfor _, l := range le.leaseMap {",
                "+\t\t// TODO: probably should change to <= 100-500 millisecond to",
                "+\t\t// make up committing latency.",
                "+\t\tif l.expired() {",
                "+\t\t\tleases = append(leases, l)",
                "+",
                "+\t\t\t// reach expired limit",
                "+\t\t\tif len(leases) == limit {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn leases",
                "+}",
                "+",
                "+func (le *lessor) initAndRecover() {",
                "+\ttx := le.b.BatchTx()",
                "+\ttx.Lock()",
                "+",
                "+\ttx.UnsafeCreateBucket(leaseBucketName)",
                "+\t_, vs := tx.UnsafeRange(leaseBucketName, int64ToBytes(0), int64ToBytes(math.MaxInt64), 0)",
                "+\t// TODO: copy vs and do decoding outside tx lock if lock contention becomes an issue.",
                "+\tfor i := range vs {",
                "+\t\tvar lpb leasepb.Lease",
                "+\t\terr := lpb.Unmarshal(vs[i])",
                "+\t\tif err != nil {",
                "+\t\t\ttx.Unlock()",
                "+\t\t\tpanic(\"failed to unmarshal lease proto item\")",
                "+\t\t}",
                "+\t\tID := LeaseID(lpb.ID)",
                "+\t\tif lpb.TTL < le.minLeaseTTL {",
                "+\t\t\tlpb.TTL = le.minLeaseTTL",
                "+\t\t}",
                "+\t\tle.leaseMap[ID] = &Lease{",
                "+\t\t\tID:  ID,",
                "+\t\t\tttl: lpb.TTL,",
                "+\t\t\t// itemSet will be filled in when recover key-value pairs",
                "+\t\t\t// set expiry to forever, refresh when promoted",
                "+\t\t\titemSet: make(map[LeaseItem]struct{}),",
                "+\t\t\texpiry:  forever,",
                "+\t\t\trevokec: make(chan struct{}),",
                "+\t\t}",
                "+\t}",
                "+\ttx.Unlock()",
                "+",
                "+\tle.b.ForceCommit()",
                "+}",
                "+",
                "+type Lease struct {",
                "+\tID  LeaseID",
                "+\tttl int64 // time to live in seconds",
                "+\t// expiryMu protects concurrent accesses to expiry",
                "+\texpiryMu sync.RWMutex",
                "+\t// expiry is time when lease should expire. no expiration when expiry.IsZero() is true",
                "+\texpiry time.Time",
                "+",
                "+\t// mu protects concurrent accesses to itemSet",
                "+\tmu      sync.RWMutex",
                "+\titemSet map[LeaseItem]struct{}",
                "+\trevokec chan struct{}",
                "+}",
                "+",
                "+func (l *Lease) expired() bool {",
                "+\treturn l.Remaining() <= 0",
                "+}",
                "+",
                "+func (l *Lease) persistTo(b backend.Backend) {",
                "+\tkey := int64ToBytes(int64(l.ID))",
                "+",
                "+\tlpb := leasepb.Lease{ID: int64(l.ID), TTL: int64(l.ttl)}",
                "+\tval, err := lpb.Marshal()",
                "+\tif err != nil {",
                "+\t\tpanic(\"failed to marshal lease proto item\")",
                "+\t}",
                "+",
                "+\tb.BatchTx().Lock()",
                "+\tb.BatchTx().UnsafePut(leaseBucketName, key, val)",
                "+\tb.BatchTx().Unlock()",
                "+}",
                "+",
                "+// TTL returns the TTL of the Lease.",
                "+func (l *Lease) TTL() int64 {",
                "+\treturn l.ttl",
                "+}",
                "+",
                "+// refresh refreshes the expiry of the lease.",
                "+func (l *Lease) refresh(extend time.Duration) {",
                "+\tnewExpiry := time.Now().Add(extend + time.Duration(l.ttl)*time.Second)",
                "+\tl.expiryMu.Lock()",
                "+\tdefer l.expiryMu.Unlock()",
                "+\tl.expiry = newExpiry",
                "+}",
                "+",
                "+// forever sets the expiry of lease to be forever.",
                "+func (l *Lease) forever() {",
                "+\tl.expiryMu.Lock()",
                "+\tdefer l.expiryMu.Unlock()",
                "+\tl.expiry = forever",
                "+}",
                "+",
                "+// Keys returns all the keys attached to the lease.",
                "+func (l *Lease) Keys() []string {",
                "+\tl.mu.RLock()",
                "+\tkeys := make([]string, 0, len(l.itemSet))",
                "+\tfor k := range l.itemSet {",
                "+\t\tkeys = append(keys, k.Key)",
                "+\t}",
                "+\tl.mu.RUnlock()",
                "+\treturn keys",
                "+}",
                "+",
                "+// Remaining returns the remaining time of the lease.",
                "+func (l *Lease) Remaining() time.Duration {",
                "+\tl.expiryMu.RLock()",
                "+\tdefer l.expiryMu.RUnlock()",
                "+\tif l.expiry.IsZero() {",
                "+\t\treturn time.Duration(math.MaxInt64)",
                "+\t}",
                "+\treturn time.Until(l.expiry)",
                "+}",
                "+",
                "+type LeaseItem struct {",
                "+\tKey string",
                "+}",
                "+",
                "+func int64ToBytes(n int64) []byte {",
                "+\tbytes := make([]byte, 8)",
                "+\tbinary.BigEndian.PutUint64(bytes, uint64(n))",
                "+\treturn bytes",
                "+}",
                "+",
                "+// FakeLessor is a fake implementation of Lessor interface.",
                "+// Used for testing only.",
                "+type FakeLessor struct{}",
                "+",
                "+func (fl *FakeLessor) SetRangeDeleter(dr RangeDeleter) {}",
                "+",
                "+func (fl *FakeLessor) Grant(id LeaseID, ttl int64) (*Lease, error) { return nil, nil }",
                "+",
                "+func (fl *FakeLessor) Revoke(id LeaseID) error { return nil }",
                "+",
                "+func (fl *FakeLessor) Attach(id LeaseID, items []LeaseItem) error { return nil }",
                "+",
                "+func (fl *FakeLessor) GetLease(item LeaseItem) LeaseID            { return 0 }",
                "+func (fl *FakeLessor) Detach(id LeaseID, items []LeaseItem) error { return nil }",
                "+",
                "+func (fl *FakeLessor) Promote(extend time.Duration) {}",
                "+",
                "+func (fl *FakeLessor) Demote() {}",
                "+",
                "+func (fl *FakeLessor) Renew(id LeaseID) (int64, error) { return 10, nil }",
                "+",
                "+func (fl *FakeLessor) Lookup(id LeaseID) *Lease { return nil }",
                "+",
                "+func (fl *FakeLessor) Leases() []*Lease { return nil }",
                "+",
                "+func (fl *FakeLessor) ExpiredLeasesC() <-chan []*Lease { return nil }",
                "+",
                "+func (fl *FakeLessor) Recover(b backend.Backend, rd RangeDeleter) {}",
                "+",
                "+func (fl *FakeLessor) Stop() {}",
                "diff --git a/lease/lessor_test.go b/lease/lessor_test.go",
                "new file mode 100644",
                "index 000000000..3c6b9d181",
                "--- /dev/null",
                "+++ b/lease/lessor_test.go",
                "@@ -0,0 +1,480 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package lease",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"io/ioutil\"",
                "+\t\"os\"",
                "+\t\"path/filepath\"",
                "+\t\"reflect\"",
                "+\t\"sort\"",
                "+\t\"sync\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+)",
                "+",
                "+const (",
                "+\tminLeaseTTL         = int64(5)",
                "+\tminLeaseTTLDuration = time.Duration(minLeaseTTL) * time.Second",
                "+)",
                "+",
                "+// TestLessorGrant ensures Lessor can grant wanted lease.",
                "+// The granted lease should have a unique ID with a term",
                "+// that is greater than minLeaseTTL.",
                "+func TestLessorGrant(t *testing.T) {",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer os.RemoveAll(dir)",
                "+\tdefer be.Close()",
                "+",
                "+\tle := newLessor(be, minLeaseTTL)",
                "+\tdefer le.Stop()",
                "+\tle.Promote(0)",
                "+",
                "+\tl, err := le.Grant(1, 1)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"could not grant lease 1 (%v)\", err)",
                "+\t}",
                "+\tif l.ttl != minLeaseTTL {",
                "+\t\tt.Fatalf(\"ttl = %v, expect minLeaseTTL %v\", l.ttl, minLeaseTTL)",
                "+\t}",
                "+",
                "+\tgl := le.Lookup(l.ID)",
                "+",
                "+\tif !reflect.DeepEqual(gl, l) {",
                "+\t\tt.Errorf(\"lease = %v, want %v\", gl, l)",
                "+\t}",
                "+\tif l.Remaining() < minLeaseTTLDuration-time.Second {",
                "+\t\tt.Errorf(\"term = %v, want at least %v\", l.Remaining(), minLeaseTTLDuration-time.Second)",
                "+\t}",
                "+",
                "+\t_, err = le.Grant(1, 1)",
                "+\tif err == nil {",
                "+\t\tt.Errorf(\"allocated the same lease\")",
                "+\t}",
                "+",
                "+\tvar nl *Lease",
                "+\tnl, err = le.Grant(2, 1)",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"could not grant lease 2 (%v)\", err)",
                "+\t}",
                "+\tif nl.ID == l.ID {",
                "+\t\tt.Errorf(\"new lease.id = %x, want != %x\", nl.ID, l.ID)",
                "+\t}",
                "+",
                "+\tlss := []*Lease{gl, nl}",
                "+\tleases := le.Leases()",
                "+\tfor i := range lss {",
                "+\t\tif lss[i].ID != leases[i].ID {",
                "+\t\t\tt.Fatalf(\"lease ID expected %d, got %d\", lss[i].ID, leases[i].ID)",
                "+\t\t}",
                "+\t\tif lss[i].ttl != leases[i].ttl {",
                "+\t\t\tt.Fatalf(\"ttl expected %d, got %d\", lss[i].ttl, leases[i].ttl)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tbe.BatchTx().Lock()",
                "+\t_, vs := be.BatchTx().UnsafeRange(leaseBucketName, int64ToBytes(int64(l.ID)), nil, 0)",
                "+\tif len(vs) != 1 {",
                "+\t\tt.Errorf(\"len(vs) = %d, want 1\", len(vs))",
                "+\t}",
                "+\tbe.BatchTx().Unlock()",
                "+}",
                "+",
                "+// TestLeaseConcurrentKeys ensures Lease.Keys method calls are guarded",
                "+// from concurrent map writes on 'itemSet'.",
                "+func TestLeaseConcurrentKeys(t *testing.T) {",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer os.RemoveAll(dir)",
                "+\tdefer be.Close()",
                "+",
                "+\tle := newLessor(be, minLeaseTTL)",
                "+\tdefer le.Stop()",
                "+\tle.SetRangeDeleter(func() TxnDelete { return newFakeDeleter(be) })",
                "+",
                "+\t// grant a lease with long term (100 seconds) to",
                "+\t// avoid early termination during the test.",
                "+\tl, err := le.Grant(1, 100)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"could not grant lease for 100s ttl (%v)\", err)",
                "+\t}",
                "+",
                "+\titemn := 10",
                "+\titems := make([]LeaseItem, itemn)",
                "+\tfor i := 0; i < itemn; i++ {",
                "+\t\titems[i] = LeaseItem{Key: fmt.Sprintf(\"foo%d\", i)}",
                "+\t}",
                "+\tif err = le.Attach(l.ID, items); err != nil {",
                "+\t\tt.Fatalf(\"failed to attach items to the lease: %v\", err)",
                "+\t}",
                "+",
                "+\tdonec := make(chan struct{})",
                "+\tgo func() {",
                "+\t\tle.Detach(l.ID, items)",
                "+\t\tclose(donec)",
                "+\t}()",
                "+",
                "+\tvar wg sync.WaitGroup",
                "+\twg.Add(itemn)",
                "+\tfor i := 0; i < itemn; i++ {",
                "+\t\tgo func() {",
                "+\t\t\tdefer wg.Done()",
                "+\t\t\tl.Keys()",
                "+\t\t}()",
                "+\t}",
                "+",
                "+\t<-donec",
                "+\twg.Wait()",
                "+}",
                "+",
                "+// TestLessorRevoke ensures Lessor can revoke a lease.",
                "+// The items in the revoked lease should be removed from",
                "+// the backend.",
                "+// The revoked lease cannot be got from Lessor again.",
                "+func TestLessorRevoke(t *testing.T) {",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer os.RemoveAll(dir)",
                "+\tdefer be.Close()",
                "+",
                "+\tle := newLessor(be, minLeaseTTL)",
                "+\tdefer le.Stop()",
                "+\tvar fd *fakeDeleter",
                "+\tle.SetRangeDeleter(func() TxnDelete {",
                "+\t\tfd = newFakeDeleter(be)",
                "+\t\treturn fd",
                "+\t})",
                "+",
                "+\t// grant a lease with long term (100 seconds) to",
                "+\t// avoid early termination during the test.",
                "+\tl, err := le.Grant(1, 100)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"could not grant lease for 100s ttl (%v)\", err)",
                "+\t}",
                "+",
                "+\titems := []LeaseItem{",
                "+\t\t{\"foo\"},",
                "+\t\t{\"bar\"},",
                "+\t}",
                "+",
                "+\tif err = le.Attach(l.ID, items); err != nil {",
                "+\t\tt.Fatalf(\"failed to attach items to the lease: %v\", err)",
                "+\t}",
                "+",
                "+\tif err = le.Revoke(l.ID); err != nil {",
                "+\t\tt.Fatal(\"failed to revoke lease:\", err)",
                "+\t}",
                "+",
                "+\tif le.Lookup(l.ID) != nil {",
                "+\t\tt.Errorf(\"got revoked lease %x\", l.ID)",
                "+\t}",
                "+",
                "+\twdeleted := []string{\"bar_\", \"foo_\"}",
                "+\tsort.Strings(fd.deleted)",
                "+\tif !reflect.DeepEqual(fd.deleted, wdeleted) {",
                "+\t\tt.Errorf(\"deleted= %v, want %v\", fd.deleted, wdeleted)",
                "+\t}",
                "+",
                "+\tbe.BatchTx().Lock()",
                "+\t_, vs := be.BatchTx().UnsafeRange(leaseBucketName, int64ToBytes(int64(l.ID)), nil, 0)",
                "+\tif len(vs) != 0 {",
                "+\t\tt.Errorf(\"len(vs) = %d, want 0\", len(vs))",
                "+\t}",
                "+\tbe.BatchTx().Unlock()",
                "+}",
                "+",
                "+// TestLessorRenew ensures Lessor can renew an existing lease.",
                "+func TestLessorRenew(t *testing.T) {",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer be.Close()",
                "+\tdefer os.RemoveAll(dir)",
                "+",
                "+\tle := newLessor(be, minLeaseTTL)",
                "+\tdefer le.Stop()",
                "+\tle.Promote(0)",
                "+",
                "+\tl, err := le.Grant(1, minLeaseTTL)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"failed to grant lease (%v)\", err)",
                "+\t}",
                "+",
                "+\t// manually change the ttl field",
                "+\tle.mu.Lock()",
                "+\tl.ttl = 10",
                "+\tle.mu.Unlock()",
                "+\tttl, err := le.Renew(l.ID)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"failed to renew lease (%v)\", err)",
                "+\t}",
                "+\tif ttl != l.ttl {",
                "+\t\tt.Errorf(\"ttl = %d, want %d\", ttl, l.ttl)",
                "+\t}",
                "+",
                "+\tl = le.Lookup(l.ID)",
                "+\tif l.Remaining() < 9*time.Second {",
                "+\t\tt.Errorf(\"failed to renew the lease\")",
                "+\t}",
                "+}",
                "+",
                "+// TestLessorRenewExtendPileup ensures Lessor extends leases on promotion if too many",
                "+// expire at the same time.",
                "+func TestLessorRenewExtendPileup(t *testing.T) {",
                "+\toldRevokeRate := leaseRevokeRate",
                "+\tdefer func() { leaseRevokeRate = oldRevokeRate }()",
                "+\tleaseRevokeRate = 10",
                "+",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer os.RemoveAll(dir)",
                "+",
                "+\tle := newLessor(be, minLeaseTTL)",
                "+\tttl := int64(10)",
                "+\tfor i := 1; i <= leaseRevokeRate*10; i++ {",
                "+\t\tif _, err := le.Grant(LeaseID(2*i), ttl); err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\t// ttls that overlap spillover for ttl=10",
                "+\t\tif _, err := le.Grant(LeaseID(2*i+1), ttl+1); err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// simulate stop and recovery",
                "+\tle.Stop()",
                "+\tbe.Close()",
                "+\tbcfg := backend.DefaultBackendConfig()",
                "+\tbcfg.Path = filepath.Join(dir, \"be\")",
                "+\tbe = backend.New(bcfg)",
                "+\tdefer be.Close()",
                "+\tle = newLessor(be, minLeaseTTL)",
                "+\tdefer le.Stop()",
                "+",
                "+\t// extend after recovery should extend expiration on lease pile-up",
                "+\tle.Promote(0)",
                "+",
                "+\twindowCounts := make(map[int64]int)",
                "+\tfor _, l := range le.leaseMap {",
                "+\t\t// round up slightly for baseline ttl",
                "+\t\ts := int64(l.Remaining().Seconds() + 0.1)",
                "+\t\twindowCounts[s]++",
                "+\t}",
                "+",
                "+\tfor i := ttl; i < ttl+20; i++ {",
                "+\t\tc := windowCounts[i]",
                "+\t\tif c > leaseRevokeRate {",
                "+\t\t\tt.Errorf(\"expected at most %d expiring at %ds, got %d\", leaseRevokeRate, i, c)",
                "+\t\t}",
                "+\t\tif c < leaseRevokeRate/2 {",
                "+\t\t\tt.Errorf(\"expected at least %d expiring at %ds, got %d\", leaseRevokeRate/2, i, c)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestLessorDetach(t *testing.T) {",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer os.RemoveAll(dir)",
                "+\tdefer be.Close()",
                "+",
                "+\tle := newLessor(be, minLeaseTTL)",
                "+\tdefer le.Stop()",
                "+\tle.SetRangeDeleter(func() TxnDelete { return newFakeDeleter(be) })",
                "+",
                "+\t// grant a lease with long term (100 seconds) to",
                "+\t// avoid early termination during the test.",
                "+\tl, err := le.Grant(1, 100)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"could not grant lease for 100s ttl (%v)\", err)",
                "+\t}",
                "+",
                "+\titems := []LeaseItem{",
                "+\t\t{\"foo\"},",
                "+\t\t{\"bar\"},",
                "+\t}",
                "+",
                "+\tif err := le.Attach(l.ID, items); err != nil {",
                "+\t\tt.Fatalf(\"failed to attach items to the lease: %v\", err)",
                "+\t}",
                "+",
                "+\tif err := le.Detach(l.ID, items[0:1]); err != nil {",
                "+\t\tt.Fatalf(\"failed to de-attach items to the lease: %v\", err)",
                "+\t}",
                "+",
                "+\tl = le.Lookup(l.ID)",
                "+\tif len(l.itemSet) != 1 {",
                "+\t\tt.Fatalf(\"len(l.itemSet) = %d, failed to de-attach items\", len(l.itemSet))",
                "+\t}",
                "+\tif _, ok := l.itemSet[LeaseItem{\"bar\"}]; !ok {",
                "+\t\tt.Fatalf(\"de-attached wrong item, want %q exists\", \"bar\")",
                "+\t}",
                "+}",
                "+",
                "+// TestLessorRecover ensures Lessor recovers leases from",
                "+// persist backend.",
                "+func TestLessorRecover(t *testing.T) {",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer os.RemoveAll(dir)",
                "+\tdefer be.Close()",
                "+",
                "+\tle := newLessor(be, minLeaseTTL)",
                "+\tdefer le.Stop()",
                "+\tl1, err1 := le.Grant(1, 10)",
                "+\tl2, err2 := le.Grant(2, 20)",
                "+\tif err1 != nil || err2 != nil {",
                "+\t\tt.Fatalf(\"could not grant initial leases (%v, %v)\", err1, err2)",
                "+\t}",
                "+",
                "+\t// Create a new lessor with the same backend",
                "+\tnle := newLessor(be, minLeaseTTL)",
                "+\tdefer nle.Stop()",
                "+\tnl1 := nle.Lookup(l1.ID)",
                "+\tif nl1 == nil || nl1.ttl != l1.ttl {",
                "+\t\tt.Errorf(\"nl1 = %v, want nl1.ttl= %d\", nl1.ttl, l1.ttl)",
                "+\t}",
                "+",
                "+\tnl2 := nle.Lookup(l2.ID)",
                "+\tif nl2 == nil || nl2.ttl != l2.ttl {",
                "+\t\tt.Errorf(\"nl2 = %v, want nl2.ttl= %d\", nl2.ttl, l2.ttl)",
                "+\t}",
                "+}",
                "+",
                "+func TestLessorExpire(t *testing.T) {",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer os.RemoveAll(dir)",
                "+\tdefer be.Close()",
                "+",
                "+\ttestMinTTL := int64(1)",
                "+",
                "+\tle := newLessor(be, testMinTTL)",
                "+\tdefer le.Stop()",
                "+",
                "+\tle.Promote(1 * time.Second)",
                "+\tl, err := le.Grant(1, testMinTTL)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"failed to create lease: %v\", err)",
                "+\t}",
                "+",
                "+\tselect {",
                "+\tcase el := <-le.ExpiredLeasesC():",
                "+\t\tif el[0].ID != l.ID {",
                "+\t\t\tt.Fatalf(\"expired id = %x, want %x\", el[0].ID, l.ID)",
                "+\t\t}",
                "+\tcase <-time.After(10 * time.Second):",
                "+\t\tt.Fatalf(\"failed to receive expired lease\")",
                "+\t}",
                "+",
                "+\tdonec := make(chan struct{})",
                "+\tgo func() {",
                "+\t\t// expired lease cannot be renewed",
                "+\t\tif _, err := le.Renew(l.ID); err != ErrLeaseNotFound {",
                "+\t\t\tt.Fatalf(\"unexpected renew\")",
                "+\t\t}",
                "+\t\tdonec <- struct{}{}",
                "+\t}()",
                "+",
                "+\tselect {",
                "+\tcase <-donec:",
                "+\t\tt.Fatalf(\"renew finished before lease revocation\")",
                "+\tcase <-time.After(50 * time.Millisecond):",
                "+\t}",
                "+",
                "+\t// expired lease can be revoked",
                "+\tif err := le.Revoke(l.ID); err != nil {",
                "+\t\tt.Fatalf(\"failed to revoke expired lease: %v\", err)",
                "+\t}",
                "+",
                "+\tselect {",
                "+\tcase <-donec:",
                "+\tcase <-time.After(10 * time.Second):",
                "+\t\tt.Fatalf(\"renew has not returned after lease revocation\")",
                "+\t}",
                "+}",
                "+",
                "+func TestLessorExpireAndDemote(t *testing.T) {",
                "+\tdir, be := NewTestBackend(t)",
                "+\tdefer os.RemoveAll(dir)",
                "+\tdefer be.Close()",
                "+",
                "+\ttestMinTTL := int64(1)",
                "+",
                "+\tle := newLessor(be, testMinTTL)",
                "+\tdefer le.Stop()",
                "+",
                "+\tle.Promote(1 * time.Second)",
                "+\tl, err := le.Grant(1, testMinTTL)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"failed to create lease: %v\", err)",
                "+\t}",
                "+",
                "+\tselect {",
                "+\tcase el := <-le.ExpiredLeasesC():",
                "+\t\tif el[0].ID != l.ID {",
                "+\t\t\tt.Fatalf(\"expired id = %x, want %x\", el[0].ID, l.ID)",
                "+\t\t}",
                "+\tcase <-time.After(10 * time.Second):",
                "+\t\tt.Fatalf(\"failed to receive expired lease\")",
                "+\t}",
                "+",
                "+\tdonec := make(chan struct{})",
                "+\tgo func() {",
                "+\t\t// expired lease cannot be renewed",
                "+\t\tif _, err := le.Renew(l.ID); err != ErrNotPrimary {",
                "+\t\t\tt.Fatalf(\"unexpected renew: %v\", err)",
                "+\t\t}",
                "+\t\tdonec <- struct{}{}",
                "+\t}()",
                "+",
                "+\tselect {",
                "+\tcase <-donec:",
                "+\t\tt.Fatalf(\"renew finished before demotion\")",
                "+\tcase <-time.After(50 * time.Millisecond):",
                "+\t}",
                "+",
                "+\t// demote will cause the renew request to fail with ErrNotPrimary",
                "+\tle.Demote()",
                "+",
                "+\tselect {",
                "+\tcase <-donec:",
                "+\tcase <-time.After(10 * time.Second):",
                "+\t\tt.Fatalf(\"renew has not returned after lessor demotion\")",
                "+\t}",
                "+}",
                "+",
                "+type fakeDeleter struct {",
                "+\tdeleted []string",
                "+\ttx      backend.BatchTx",
                "+}",
                "+",
                "+func newFakeDeleter(be backend.Backend) *fakeDeleter {",
                "+\tfd := &fakeDeleter{nil, be.BatchTx()}",
                "+\tfd.tx.Lock()",
                "+\treturn fd",
                "+}",
                "+",
                "+func (fd *fakeDeleter) End() { fd.tx.Unlock() }",
                "+",
                "+func (fd *fakeDeleter) DeleteRange(key, end []byte) (int64, int64) {",
                "+\tfd.deleted = append(fd.deleted, string(key)+\"_\"+string(end))",
                "+\treturn 0, 0",
                "+}",
                "+",
                "+func NewTestBackend(t *testing.T) (string, backend.Backend) {",
                "+\ttmpPath, err := ioutil.TempDir(\"\", \"lease\")",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"failed to create tmpdir (%v)\", err)",
                "+\t}",
                "+\tbcfg := backend.DefaultBackendConfig()",
                "+\tbcfg.Path = filepath.Join(tmpPath, \"be\")",
                "+\treturn tmpPath, backend.New(bcfg)",
                "+}",
                "diff --git a/snapshot/v3_snapshot.go b/snapshot/v3_snapshot.go",
                "index efff0e273..2a6a0c5a2 100644",
                "--- a/snapshot/v3_snapshot.go",
                "+++ b/snapshot/v3_snapshot.go",
                "@@ -32,3 +32,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "@@ -37,2 +36,3 @@ import (",
                " \t\"github.com/coreos/etcd/internal/store\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "diff --git a/tools/benchmark/cmd/mvcc-put.go b/tools/benchmark/cmd/mvcc-put.go",
                "index ade9b3b47..2bf482d1b 100644",
                "--- a/tools/benchmark/cmd/mvcc-put.go",
                "+++ b/tools/benchmark/cmd/mvcc-put.go",
                "@@ -23,3 +23,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/pkg/report\"",
                "diff --git a/tools/benchmark/cmd/mvcc.go b/tools/benchmark/cmd/mvcc.go",
                "index 72b3f3754..fc666dc32 100644",
                "--- a/tools/benchmark/cmd/mvcc.go",
                "+++ b/tools/benchmark/cmd/mvcc.go",
                "@@ -20,5 +20,6 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/lease\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+",
                " \t\"github.com/spf13/cobra\"",
                "diff --git a/tools/etcd-dump-db/backend.go b/tools/etcd-dump-db/backend.go",
                "index 986adf04d..e03caa6c9 100644",
                "--- a/tools/etcd-dump-db/backend.go",
                "+++ b/tools/etcd-dump-db/backend.go",
                "@@ -21,4 +21,2 @@ import (",
                "-\tbolt \"github.com/coreos/bbolt\"",
                "-\t\"github.com/coreos/etcd/internal/lease/leasepb\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "@@ -26,2 +24,5 @@ import (",
                " \t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/lease/leasepb\"",
                "+",
                "+\tbolt \"github.com/coreos/bbolt\"",
                " )"
            ],
            "changed_files": [
                "clientv3/integration/maintenance_test.go",
                "etcdserver/api/etcdhttp/peer.go",
                "etcdserver/api/v3rpc/lease.go",
                "etcdserver/api/v3rpc/util.go",
                "etcdserver/apply.go",
                "etcdserver/apply_auth.go",
                "etcdserver/backend.go",
                "etcdserver/server.go",
                "etcdserver/server_test.go",
                "etcdserver/v3_server.go",
                "internal/mvcc/kv.go",
                "internal/mvcc/kv_test.go",
                "internal/mvcc/kv_view.go",
                "internal/mvcc/kvstore.go",
                "internal/mvcc/kvstore_bench_test.go",
                "internal/mvcc/kvstore_compaction_test.go",
                "internal/mvcc/kvstore_test.go",
                "internal/mvcc/kvstore_txn.go",
                "internal/mvcc/metrics_txn.go",
                "internal/mvcc/watchable_store.go",
                "internal/mvcc/watchable_store_bench_test.go",
                "internal/mvcc/watchable_store_test.go",
                "internal/mvcc/watcher_bench_test.go",
                "internal/mvcc/watcher_test.go",
                "lease/doc.go",
                "lease/leasehttp/doc.go",
                "lease/leasehttp/http.go",
                "lease/leasehttp/http_test.go",
                "lease/leasepb/lease.pb.go",
                "lease/leasepb/lease.proto",
                "lease/lessor.go",
                "lease/lessor_test.go",
                "snapshot/v3_snapshot.go",
                "tools/benchmark/cmd/mvcc-put.go",
                "tools/benchmark/cmd/mvcc.go",
                "tools/etcd-dump-db/backend.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8aae8c1c9c116496d25117ce02b5006c3de25c8b",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519360745,
            "hunks": 3,
            "message": "raft: document disruptive rejoining server, add tests Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/raft/raft.go b/raft/raft.go",
                "index ef9b86597..92857beb1 100644",
                "--- a/raft/raft.go",
                "+++ b/raft/raft.go",
                "@@ -819,4 +819,11 @@ func (r *raft) Step(m pb.Message) error {",
                " \t\t\t// but it will not receive MsgApp or MsgHeartbeat, so it will not create",
                "-\t\t\t// disruptive term increases",
                "+\t\t\t// disruptive term increases, by notifying leader of this node's activeness.",
                " \t\t\t// The above comments also true for Pre-Vote",
                "+\t\t\t//",
                "+\t\t\t// When follower gets isolated, it soon starts an election ending",
                "+\t\t\t// up with a higher term than leader, although it won't receive enough",
                "+\t\t\t// votes to win the election. When it regains connectivity, this response",
                "+\t\t\t// with \"pb.MsgAppResp\" of higher term would force leader to step down.",
                "+\t\t\t// However, this disruption is inevitable to free this stuck node with",
                "+\t\t\t// fresh election. This can be prevented with Pre-Vote phase.",
                " \t\t\tr.send(pb.Message{To: m.From, Type: pb.MsgAppResp})",
                "diff --git a/raft/raft_test.go b/raft/raft_test.go",
                "index 5ae49bc56..6540d0f72 100644",
                "--- a/raft/raft_test.go",
                "+++ b/raft/raft_test.go",
                "@@ -1995,2 +1995,203 @@ func TestNonPromotableVoterWithCheckQuorum(t *testing.T) {",
                "+// TestDisruptiveFollower tests isolated follower,",
                "+// with slow network incoming from leader, election times out",
                "+// to become a candidate with an increased term. Then, the",
                "+// candiate's response to late leader heartbeat forces the leader",
                "+// to step down.",
                "+func TestDisruptiveFollower(t *testing.T) {",
                "+\tn1 := newTestRaft(1, []uint64{1, 2, 3}, 10, 1, NewMemoryStorage())",
                "+\tn2 := newTestRaft(2, []uint64{1, 2, 3}, 10, 1, NewMemoryStorage())",
                "+\tn3 := newTestRaft(3, []uint64{1, 2, 3}, 10, 1, NewMemoryStorage())",
                "+",
                "+\tn1.checkQuorum = true",
                "+\tn2.checkQuorum = true",
                "+\tn3.checkQuorum = true",
                "+",
                "+\tn1.becomeFollower(1, None)",
                "+\tn2.becomeFollower(1, None)",
                "+\tn3.becomeFollower(1, None)",
                "+",
                "+\tnt := newNetwork(n1, n2, n3)",
                "+",
                "+\tnt.send(pb.Message{From: 1, To: 1, Type: pb.MsgHup})",
                "+",
                "+\t// check state",
                "+\t// n1.state == StateLeader",
                "+\t// n2.state == StateFollower",
                "+\t// n3.state == StateFollower",
                "+\tif n1.state != StateLeader {",
                "+\t\tt.Fatalf(\"node 1 state: %s, want %s\", n1.state, StateLeader)",
                "+\t}",
                "+\tif n2.state != StateFollower {",
                "+\t\tt.Fatalf(\"node 2 state: %s, want %s\", n2.state, StateFollower)",
                "+\t}",
                "+\tif n3.state != StateFollower {",
                "+\t\tt.Fatalf(\"node 3 state: %s, want %s\", n3.state, StateFollower)",
                "+\t}",
                "+",
                "+\t// etcd server \"advanceTicksForElection\" on restart;",
                "+\t// this is to expedite campaign trigger when given larger",
                "+\t// election timeouts (e.g. multi-datacenter deploy)",
                "+\t// Or leader messages are being delayed while ticks elapse",
                "+\tsetRandomizedElectionTimeout(n3, n3.electionTimeout+2)",
                "+\tfor i := 0; i < n3.randomizedElectionTimeout-1; i++ {",
                "+\t\tn3.tick()",
                "+\t}",
                "+",
                "+\t// ideally, before last election tick elapses,",
                "+\t// the follower n3 receives \"pb.MsgApp\" or \"pb.MsgHeartbeat\"",
                "+\t// from leader n1, and then resets its \"electionElapsed\"",
                "+\t// however, last tick may elapse before receiving any",
                "+\t// messages from leader, thus triggering campaign",
                "+\tn3.tick()",
                "+",
                "+\t// n1 is still leader yet",
                "+\t// while its heartbeat to candidate n3 is being delayed",
                "+",
                "+\t// check state",
                "+\t// n1.state == StateLeader",
                "+\t// n2.state == StateFollower",
                "+\t// n3.state == StateCandidate",
                "+\tif n1.state != StateLeader {",
                "+\t\tt.Fatalf(\"node 1 state: %s, want %s\", n1.state, StateLeader)",
                "+\t}",
                "+\tif n2.state != StateFollower {",
                "+\t\tt.Fatalf(\"node 2 state: %s, want %s\", n2.state, StateFollower)",
                "+\t}",
                "+\tif n3.state != StateCandidate {",
                "+\t\tt.Fatalf(\"node 3 state: %s, want %s\", n3.state, StateCandidate)",
                "+\t}",
                "+\t// check term",
                "+\t// n1.Term == 2",
                "+\t// n2.Term == 2",
                "+\t// n3.Term == 3",
                "+\tif n1.Term != 2 {",
                "+\t\tt.Fatalf(\"node 1 term: %d, want %d\", n1.Term, 2)",
                "+\t}",
                "+\tif n2.Term != 2 {",
                "+\t\tt.Fatalf(\"node 2 term: %d, want %d\", n2.Term, 2)",
                "+\t}",
                "+\tif n3.Term != 3 {",
                "+\t\tt.Fatalf(\"node 3 term: %d, want %d\", n3.Term, 3)",
                "+\t}",
                "+",
                "+\t// while outgoing vote requests are still queued in n3,",
                "+\t// leader heartbeat finally arrives at candidate n3",
                "+\t// however, due to delayed network from leader, leader",
                "+\t// heartbeat was sent with lower term than candidate's",
                "+\tnt.send(pb.Message{From: 1, To: 3, Term: n1.Term, Type: pb.MsgHeartbeat})",
                "+",
                "+\t// then candidate n3 responds with \"pb.MsgAppResp\" of higher term",
                "+\t// and leader steps down from a message with higher term",
                "+\t// this is to disrupt the current leader, so that candidate",
                "+\t// with higher term can be freed with following election",
                "+",
                "+\t// check state",
                "+\t// n1.state == StateFollower",
                "+\t// n2.state == StateFollower",
                "+\t// n3.state == StateCandidate",
                "+\tif n1.state != StateFollower {",
                "+\t\tt.Fatalf(\"node 1 state: %s, want %s\", n1.state, StateFollower)",
                "+\t}",
                "+\tif n2.state != StateFollower {",
                "+\t\tt.Fatalf(\"node 2 state: %s, want %s\", n2.state, StateFollower)",
                "+\t}",
                "+\tif n3.state != StateCandidate {",
                "+\t\tt.Fatalf(\"node 3 state: %s, want %s\", n3.state, StateCandidate)",
                "+\t}",
                "+\t// check term",
                "+\t// n1.Term == 3",
                "+\t// n2.Term == 2",
                "+\t// n3.Term == 3",
                "+\tif n1.Term != 3 {",
                "+\t\tt.Fatalf(\"node 1 term: %d, want %d\", n1.Term, 3)",
                "+\t}",
                "+\tif n2.Term != 2 {",
                "+\t\tt.Fatalf(\"node 2 term: %d, want %d\", n2.Term, 2)",
                "+\t}",
                "+\tif n3.Term != 3 {",
                "+\t\tt.Fatalf(\"node 3 term: %d, want %d\", n3.Term, 3)",
                "+\t}",
                "+}",
                "+",
                "+// TestDisruptiveFollowerPreVote tests isolated follower,",
                "+// with slow network incoming from leader, election times out",
                "+// to become a pre-candidate with less log than current leader.",
                "+// Then pre-vote phase prevents this isolated node from forcing",
                "+// current leader to step down, thus less disruptions.",
                "+func TestDisruptiveFollowerPreVote(t *testing.T) {",
                "+\tn1 := newTestRaft(1, []uint64{1, 2, 3}, 10, 1, NewMemoryStorage())",
                "+\tn2 := newTestRaft(2, []uint64{1, 2, 3}, 10, 1, NewMemoryStorage())",
                "+\tn3 := newTestRaft(3, []uint64{1, 2, 3}, 10, 1, NewMemoryStorage())",
                "+",
                "+\tn1.checkQuorum = true",
                "+\tn2.checkQuorum = true",
                "+\tn3.checkQuorum = true",
                "+",
                "+\tn1.becomeFollower(1, None)",
                "+\tn2.becomeFollower(1, None)",
                "+\tn3.becomeFollower(1, None)",
                "+",
                "+\tnt := newNetwork(n1, n2, n3)",
                "+",
                "+\tnt.send(pb.Message{From: 1, To: 1, Type: pb.MsgHup})",
                "+",
                "+\t// check state",
                "+\t// n1.state == StateLeader",
                "+\t// n2.state == StateFollower",
                "+\t// n3.state == StateFollower",
                "+\tif n1.state != StateLeader {",
                "+\t\tt.Fatalf(\"node 1 state: %s, want %s\", n1.state, StateLeader)",
                "+\t}",
                "+\tif n2.state != StateFollower {",
                "+\t\tt.Fatalf(\"node 2 state: %s, want %s\", n2.state, StateFollower)",
                "+\t}",
                "+\tif n3.state != StateFollower {",
                "+\t\tt.Fatalf(\"node 3 state: %s, want %s\", n3.state, StateFollower)",
                "+\t}",
                "+",
                "+\tnt.isolate(3)",
                "+\tnt.send(pb.Message{From: 1, To: 1, Type: pb.MsgProp, Entries: []pb.Entry{{Data: []byte(\"somedata\")}}})",
                "+\tnt.send(pb.Message{From: 1, To: 1, Type: pb.MsgProp, Entries: []pb.Entry{{Data: []byte(\"somedata\")}}})",
                "+\tnt.send(pb.Message{From: 1, To: 1, Type: pb.MsgProp, Entries: []pb.Entry{{Data: []byte(\"somedata\")}}})",
                "+\tn1.preVote = true",
                "+\tn2.preVote = true",
                "+\tn3.preVote = true",
                "+\tnt.recover()",
                "+\tnt.send(pb.Message{From: 3, To: 3, Type: pb.MsgHup})",
                "+",
                "+\t// check state",
                "+\t// n1.state == StateLeader",
                "+\t// n2.state == StateFollower",
                "+\t// n3.state == StatePreCandidate",
                "+\tif n1.state != StateLeader {",
                "+\t\tt.Fatalf(\"node 1 state: %s, want %s\", n1.state, StateLeader)",
                "+\t}",
                "+\tif n2.state != StateFollower {",
                "+\t\tt.Fatalf(\"node 2 state: %s, want %s\", n2.state, StateFollower)",
                "+\t}",
                "+\tif n3.state != StatePreCandidate {",
                "+\t\tt.Fatalf(\"node 3 state: %s, want %s\", n3.state, StatePreCandidate)",
                "+\t}",
                "+\t// check term",
                "+\t// n1.Term == 2",
                "+\t// n2.Term == 2",
                "+\t// n3.Term == 2",
                "+\tif n1.Term != 2 {",
                "+\t\tt.Fatalf(\"node 1 term: %d, want %d\", n1.Term, 2)",
                "+\t}",
                "+\tif n2.Term != 2 {",
                "+\t\tt.Fatalf(\"node 2 term: %d, want %d\", n2.Term, 2)",
                "+\t}",
                "+\tif n3.Term != 2 {",
                "+\t\tt.Fatalf(\"node 2 term: %d, want %d\", n3.Term, 2)",
                "+\t}",
                "+",
                "+\t// delayed leader heartbeat does not force current leader to step down",
                "+\tnt.send(pb.Message{From: 1, To: 3, Term: n1.Term, Type: pb.MsgHeartbeat})",
                "+\tif n1.state != StateLeader {",
                "+\t\tt.Fatalf(\"node 1 state: %s, want %s\", n1.state, StateLeader)",
                "+\t}",
                "+}",
                "+",
                " func TestReadOnlyOptionSafe(t *testing.T) {"
            ],
            "changed_files": [
                "raft/raft.go",
                "raft/raft_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b48d3eb380240096299d824decda710223eedb4a",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519412108,
            "hunks": 2,
            "message": "etcdmain: add \"--experimental-pre-vote\" flag Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdmain/config.go b/etcdmain/config.go",
                "index a78338b63..54363fd94 100644",
                "--- a/etcdmain/config.go",
                "+++ b/etcdmain/config.go",
                "@@ -220,2 +220,3 @@ func newConfig() *config {",
                " \tfs.DurationVar(&cfg.ec.ExperimentalCorruptCheckTime, \"experimental-corrupt-check-time\", cfg.ec.ExperimentalCorruptCheckTime, \"Duration of time between cluster corruption check passes.\")",
                "+\tfs.BoolVar(&cfg.ec.ExperimentalPreVote, \"experimental-pre-vote\", cfg.ec.ExperimentalPreVote, \"Enable to run an additional Raft election phase.\")",
                "diff --git a/etcdmain/help.go b/etcdmain/help.go",
                "index 600a336f4..a806bc5db 100644",
                "--- a/etcdmain/help.go",
                "+++ b/etcdmain/help.go",
                "@@ -199,2 +199,4 @@ experimental flags:",
                " \t\tserve v2 requests through the v3 backend under a given prefix.",
                "+\t--experimental-pre-vote 'false'",
                "+\t\tenable to run an additional Raft election phase.",
                " `"
            ],
            "changed_files": [
                "etcdmain/config.go",
                "etcdmain/help.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1da081818697aca4a8be49cd4d10fd672c23aba6",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519756774,
            "hunks": 18,
            "message": "build: use \"bash\" syntax, clean up Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/build b/build",
                "index 03824461e..01dc5934b 100755",
                "--- a/build",
                "+++ b/build",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/sh -e",
                "+#!/usr/bin/env bash",
                "@@ -7,3 +7,3 @@ REPO_PATH=\"${ORG_PATH}/etcd\"",
                " GIT_SHA=$(git rev-parse --short HEAD || echo \"GitNotFound\")",
                "-if [ ! -z \"$FAILPOINTS\" ]; then",
                "+if [[ ! -z \"$FAILPOINTS\" ]]; then",
                " \tGIT_SHA=\"$GIT_SHA\"-FAILPOINTS",
                "@@ -19,3 +19,3 @@ toggle_failpoints() {",
                " \t\tgofail \"$mode\" etcdserver/ internal/mvcc/backend/",
                "-\telif [ \"$mode\" != \"disable\" ]; then",
                "+\telif [[ \"$mode\" != \"disable\" ]]; then",
                " \t\techo \"FAILPOINTS set but gofail not found\"",
                "@@ -28,7 +28,7 @@ etcd_setup_gopath() {",
                " \td=$(dirname \"$0\")",
                "-\tCDIR=$(cd \"$d\" && pwd)",
                "-\tcd \"$CDIR\"",
                "+\tCDIR=$(cd \"$d\" || return && pwd)",
                "+\tcd \"$CDIR\" || return",
                " \tetcdGOPATH=\"${CDIR}/gopath\"",
                " \t# preserve old gopath to support building with unvendored tooling deps (e.g., gofail)",
                "-\tif [ -n \"$GOPATH\" ]; then",
                "+\tif [[ -n \"$GOPATH\" ]]; then",
                " \t\tGOPATH=\":$GOPATH\"",
                "@@ -40,5 +40,2 @@ etcd_setup_gopath() {",
                " \tln -s \"${CDIR}\" \"${etcdGOPATH}/etcd_src/src/github.com/coreos/etcd\"",
                "-",
                "-\t#ln -s \"${CDIR}/vendor\" \"${etcdGOPATH}/src\"",
                "-\t#ln -s \"${CDIR}\" \"${etcdGOPATH}/src/github.com/coreos\"",
                " }",
                "@@ -47,3 +44,3 @@ toggle_failpoints_default() {",
                " \tmode=\"disable\"",
                "-\tif [ ! -z \"$FAILPOINTS\" ]; then mode=\"enable\"; fi",
                "+\tif [[ ! -z \"$FAILPOINTS\" ]]; then mode=\"enable\"; fi",
                " \ttoggle_failpoints \"$mode\"",
                "@@ -53,10 +50,16 @@ etcd_build() {",
                " \tout=\"bin\"",
                "-\tif [ -n \"${BINDIR}\" ]; then out=\"${BINDIR}\"; fi",
                "+\tif [[ -n \"${BINDIR}\" ]]; then out=\"${BINDIR}\"; fi",
                " \ttoggle_failpoints_default",
                "-\t# Static compilation is useful when etcd is run in a container. $GO_BUILD_FLAGS is OK",
                "+\t# Static compilation is useful when etcd is run in a container. $GO_BUILD_FLAGS is OK",
                " \t# shellcheck disable=SC2086",
                "-\tCGO_ENABLED=0 go build $GO_BUILD_FLAGS -installsuffix cgo -ldflags \"$GO_LDFLAGS\" -o \"${out}/etcd\" ${REPO_PATH} || return",
                "+\tCGO_ENABLED=0 go build $GO_BUILD_FLAGS \\",
                "+\t\t-installsuffix cgo \\",
                "+\t\t-ldflags \"$GO_LDFLAGS\" \\",
                "+\t\t-o \"${out}/etcd\" ${REPO_PATH} || return",
                " \t# shellcheck disable=SC2086",
                "-\tCGO_ENABLED=0 go build $GO_BUILD_FLAGS -installsuffix cgo -ldflags \"$GO_LDFLAGS\" -o \"${out}/etcdctl\" ${REPO_PATH}/etcdctl || return",
                "+\tCGO_ENABLED=0 go build $GO_BUILD_FLAGS \\",
                "+\t\t-installsuffix cgo \\",
                "+\t\t-ldflags \"$GO_LDFLAGS\" \\",
                "+\t\t-o \"${out}/etcdctl\" ${REPO_PATH}/etcdctl || return",
                " }",
                "@@ -65,3 +68,3 @@ tools_build() {",
                " \tout=\"bin\"",
                "-\tif [ -n \"${BINDIR}\" ]; then out=\"${BINDIR}\"; fi",
                "+\tif [[ -n \"${BINDIR}\" ]]; then out=\"${BINDIR}\"; fi",
                " \ttools_path=\"benchmark",
                "diff --git a/test b/test",
                "index 78e657df9..ed4f6c2bb 100755",
                "--- a/test",
                "+++ b/test",
                "@@ -279,28 +279,2 @@ function release_pass {",
                "-function gofmt_pass {",
                "-\tfmtRes=$(gofmt -l -s -d \"${FMT[@]}\")",
                "-\tif [ -n \"${fmtRes}\" ]; then",
                "-\t\techo -e \"gofmt checking failed:\\n${fmtRes}\"",
                "-\t\texit 255",
                "-\tfi",
                "-}",
                "-",
                "-function govet_pass {",
                "-\tvetRes=$(go vet \"${TEST[@]}\")",
                "-\tif [ -n \"${vetRes}\" ]; then",
                "-\t\techo -e \"govet checking failed:\\n${vetRes}\"",
                "-\t\texit 255",
                "-\tfi",
                "-}",
                "-",
                "-function govet_shadow_pass {",
                "-\tfmtpkgs=$(for a in \"${FMT[@]}\"; do dirname \"$a\"; done | sort | uniq | grep -v \"\\\\.\")",
                "-\tfmtpkgs=($fmtpkgs)",
                "-\tvetRes=$(go tool vet -all -shadow \"${fmtpkgs[@]}\" 2>&1 | grep -v '/gw/' || true)",
                "-\tif [ -n \"${vetRes}\" ]; then",
                "-\t\techo -e \"govet -all -shadow checking failed:\\n${vetRes}\"",
                "-\t\texit 255",
                "-\tfi",
                "-}",
                "-",
                " function shellcheck_pass {",
                "@@ -362,2 +336,28 @@ function goword_pass {",
                "+function gofmt_pass {",
                "+\tfmtRes=$(gofmt -l -s -d \"${FMT[@]}\")",
                "+\tif [ -n \"${fmtRes}\" ]; then",
                "+\t\techo -e \"gofmt checking failed:\\n${fmtRes}\"",
                "+\t\texit 255",
                "+\tfi",
                "+}",
                "+",
                "+function govet_pass {",
                "+\tvetRes=$(go vet \"${TEST[@]}\")",
                "+\tif [ -n \"${vetRes}\" ]; then",
                "+\t\techo -e \"govet checking failed:\\n${vetRes}\"",
                "+\t\texit 255",
                "+\tfi",
                "+}",
                "+",
                "+function govet_shadow_pass {",
                "+\tfmtpkgs=$(for a in \"${FMT[@]}\"; do dirname \"$a\"; done | sort | uniq | grep -v \"\\\\.\")",
                "+\tfmtpkgs=($fmtpkgs)",
                "+\tvetRes=$(go tool vet -all -shadow \"${fmtpkgs[@]}\" 2>&1 | grep -v '/gw/' || true)",
                "+\tif [ -n \"${vetRes}\" ]; then",
                "+\t\techo -e \"govet -all -shadow checking failed:\\n${vetRes}\"",
                "+\t\texit 255",
                "+\tfi",
                "+}",
                "+",
                " function gosimple_pass {",
                "@@ -485,6 +485,3 @@ function fmt_pass {",
                "-\tfor p in gofmt \\",
                "-\t\t\tgovet \\",
                "-\t\t\tgovet_shadow \\",
                "-\t\t\tshellcheck \\",
                "+\tfor p in shellcheck \\",
                " \t\t\tmarkdown_you \\",
                "@@ -492,2 +489,5 @@ function fmt_pass {",
                " \t\t\tgoword \\",
                "+\t\t\tgofmt \\",
                "+\t\t\tgovet \\",
                "+\t\t\tgovet_shadow \\",
                " \t\t\tgosimple \\",
                "@@ -501,5 +501,5 @@ function fmt_pass {",
                " \t\t\t; do",
                "-\t\techo \"Starting '$p' pass at $(date)\"",
                "+\t\techo \"'$p' started at $(date)\"",
                " \t\t\"${p}\"_pass \"$@\"",
                "-\t\techo \"Finished '$p' pass at $(date)\"",
                "+\t\techo \"'$p' completed at $(date)\"",
                " \tdone"
            ],
            "changed_files": [
                "build",
                "test"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2dd8af35036b3d11d28e23422eee79c3873b4880",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519693965,
            "hunks": 1,
            "message": "test: fix \"internal/store\" path Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/test b/test",
                "index e53514a54..cc8897902 100755",
                "--- a/test",
                "+++ b/test",
                "@@ -107,3 +107,3 @@ function integration_extra {",
                " \tgo test -timeout 1m -v -cpu 1,2,4 \"$@\" \"${REPO_PATH}/contrib/raftexample\"",
                "-\tgo test -timeout 5m -v ${RACE} -tags v2v3 \"$@\" \"${REPO_PATH}/internal/store\"",
                "+\tgo test -timeout 5m -v ${RACE} -tags v2v3 \"$@\" \"${REPO_PATH}/etcdserver/v2store\"",
                " \tgo test -timeout 1m -v ${RACE} -cpu 1,2,4 -run=Example \"$@\" \"${TEST[@]}\""
            ],
            "changed_files": [
                "test"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "209c820ffa3588e46c414dd100efa5c6e7a007b1",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519677209,
            "hunks": 1,
            "message": "build: ignore \"shellcheck disable=SC2086\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/build b/build",
                "index 9b3947e13..9389dfe96 100755",
                "--- a/build",
                "+++ b/build",
                "@@ -76,2 +76,3 @@ tools_build() {",
                " \t\techo \"Building\" \"'${tool}'\"...",
                "+\t\t# shellcheck disable=SC2086",
                " \t\tCGO_ENABLED=0 go build ${GO_BUILD_FLAGS} \\"
            ],
            "changed_files": [
                "build"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "19010a7182c43dd97e33f31464d6713f8bb48d6d",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519669993,
            "hunks": 3,
            "message": "*: revert \"internal/alarm\" change Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/alarm/alarms.go b/alarm/alarms.go",
                "new file mode 100644",
                "index 000000000..58da77715",
                "--- /dev/null",
                "+++ b/alarm/alarms.go",
                "@@ -0,0 +1,152 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package alarm manages health status alarms in etcd.",
                "+package alarm",
                "+",
                "+import (",
                "+\t\"sync\"",
                "+",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/pkg/types\"",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+)",
                "+",
                "+var (",
                "+\talarmBucketName = []byte(\"alarm\")",
                "+\tplog            = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"alarm\")",
                "+)",
                "+",
                "+type BackendGetter interface {",
                "+\tBackend() backend.Backend",
                "+}",
                "+",
                "+type alarmSet map[types.ID]*pb.AlarmMember",
                "+",
                "+// AlarmStore persists alarms to the backend.",
                "+type AlarmStore struct {",
                "+\tmu    sync.Mutex",
                "+\ttypes map[pb.AlarmType]alarmSet",
                "+",
                "+\tbg BackendGetter",
                "+}",
                "+",
                "+func NewAlarmStore(bg BackendGetter) (*AlarmStore, error) {",
                "+\tret := &AlarmStore{types: make(map[pb.AlarmType]alarmSet), bg: bg}",
                "+\terr := ret.restore()",
                "+\treturn ret, err",
                "+}",
                "+",
                "+func (a *AlarmStore) Activate(id types.ID, at pb.AlarmType) *pb.AlarmMember {",
                "+\ta.mu.Lock()",
                "+\tdefer a.mu.Unlock()",
                "+",
                "+\tnewAlarm := &pb.AlarmMember{MemberID: uint64(id), Alarm: at}",
                "+\tif m := a.addToMap(newAlarm); m != newAlarm {",
                "+\t\treturn m",
                "+\t}",
                "+",
                "+\tv, err := newAlarm.Marshal()",
                "+\tif err != nil {",
                "+\t\tplog.Panicf(\"failed to marshal alarm member\")",
                "+\t}",
                "+",
                "+\tb := a.bg.Backend()",
                "+\tb.BatchTx().Lock()",
                "+\tb.BatchTx().UnsafePut(alarmBucketName, v, nil)",
                "+\tb.BatchTx().Unlock()",
                "+",
                "+\treturn newAlarm",
                "+}",
                "+",
                "+func (a *AlarmStore) Deactivate(id types.ID, at pb.AlarmType) *pb.AlarmMember {",
                "+\ta.mu.Lock()",
                "+\tdefer a.mu.Unlock()",
                "+",
                "+\tt := a.types[at]",
                "+\tif t == nil {",
                "+\t\tt = make(alarmSet)",
                "+\t\ta.types[at] = t",
                "+\t}",
                "+\tm := t[id]",
                "+\tif m == nil {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tdelete(t, id)",
                "+",
                "+\tv, err := m.Marshal()",
                "+\tif err != nil {",
                "+\t\tplog.Panicf(\"failed to marshal alarm member\")",
                "+\t}",
                "+",
                "+\tb := a.bg.Backend()",
                "+\tb.BatchTx().Lock()",
                "+\tb.BatchTx().UnsafeDelete(alarmBucketName, v)",
                "+\tb.BatchTx().Unlock()",
                "+",
                "+\treturn m",
                "+}",
                "+",
                "+func (a *AlarmStore) Get(at pb.AlarmType) (ret []*pb.AlarmMember) {",
                "+\ta.mu.Lock()",
                "+\tdefer a.mu.Unlock()",
                "+\tif at == pb.AlarmType_NONE {",
                "+\t\tfor _, t := range a.types {",
                "+\t\t\tfor _, m := range t {",
                "+\t\t\t\tret = append(ret, m)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\treturn ret",
                "+\t}",
                "+\tfor _, m := range a.types[at] {",
                "+\t\tret = append(ret, m)",
                "+\t}",
                "+\treturn ret",
                "+}",
                "+",
                "+func (a *AlarmStore) restore() error {",
                "+\tb := a.bg.Backend()",
                "+\ttx := b.BatchTx()",
                "+",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket(alarmBucketName)",
                "+\terr := tx.UnsafeForEach(alarmBucketName, func(k, v []byte) error {",
                "+\t\tvar m pb.AlarmMember",
                "+\t\tif err := m.Unmarshal(k); err != nil {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t\ta.addToMap(&m)",
                "+\t\treturn nil",
                "+\t})",
                "+\ttx.Unlock()",
                "+",
                "+\tb.ForceCommit()",
                "+\treturn err",
                "+}",
                "+",
                "+func (a *AlarmStore) addToMap(newAlarm *pb.AlarmMember) *pb.AlarmMember {",
                "+\tt := a.types[newAlarm.Alarm]",
                "+\tif t == nil {",
                "+\t\tt = make(alarmSet)",
                "+\t\ta.types[newAlarm.Alarm] = t",
                "+\t}",
                "+\tm := t[types.ID(newAlarm.MemberID)]",
                "+\tif m != nil {",
                "+\t\treturn m",
                "+\t}",
                "+\tt[types.ID(newAlarm.MemberID)] = newAlarm",
                "+\treturn newAlarm",
                "+}",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index c0505edb8..5c8478073 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -31,2 +31,3 @@ import (",
                "+\t\"github.com/coreos/etcd/alarm\"",
                " \t\"github.com/coreos/etcd/compactor\"",
                "@@ -37,3 +38,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "-\t\"github.com/coreos/etcd/internal/alarm\"",
                " \t\"github.com/coreos/etcd/internal/auth\""
            ],
            "changed_files": [
                "alarm/alarms.go",
                "etcdserver/server.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "40e02256c7cea38277348393b3d4d071e46d59ed",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520549354,
            "hunks": 1,
            "message": "version: 3.3.2+git Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/version/version.go b/version/version.go",
                "index e42bf546b..6c84262ba 100644",
                "--- a/version/version.go",
                "+++ b/version/version.go",
                "@@ -28,3 +28,3 @@ var (",
                " \tMinClusterVersion = \"3.0.0\"",
                "-\tVersion           = \"3.3.2\"",
                "+\tVersion           = \"3.3.2+git\"",
                " \tAPIVersion        = \"unknown\""
            ],
            "changed_files": [
                "version/version.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b24d81c30d8001d8a9cb02c362923dc7ee2e83dc",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519672423,
            "hunks": 3,
            "message": "scripts: remove \"internal\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/scripts/genproto.sh b/scripts/genproto.sh",
                "index 92d95a103..650cbd806 100755",
                "--- a/scripts/genproto.sh",
                "+++ b/scripts/genproto.sh",
                "@@ -18,3 +18,3 @@ fi",
                " # directories containing protos to be built",
                "-DIRS=\"./wal/walpb ./etcdserver/etcdserverpb ./internal/raftsnap/snappb ./raft/raftpb ./internal/mvcc/mvccpb ./internal/lease/leasepb ./internal/auth/authpb ./etcdserver/api/v3lock/v3lockpb ./etcdserver/api/v3election/v3electionpb\"",
                "+DIRS=\"./wal/walpb ./etcdserver/etcdserverpb ./raftsnap/snappb ./raft/raftpb ./mvcc/mvccpb ./lease/leasepb ./auth/authpb ./etcdserver/api/v3lock/v3lockpb ./etcdserver/api/v3election/v3electionpb\"",
                "@@ -130,3 +130,3 @@ if [ \"$1\" != \"--skip-protodoc\" ]; then",
                "-\tprotodoc --directories=\"etcdserver/etcdserverpb=service_message,internal/mvcc/mvccpb=service_message,internal/lease/leasepb=service_message,internal/auth/authpb=service_message\" \\",
                "+\tprotodoc --directories=\"etcdserver/etcdserverpb=service_message,mvcc/mvccpb=service_message,lease/leasepb=service_message,auth/authpb=service_message\" \\",
                " \t\t--title=\"etcd API Reference\" \\",
                "@@ -136,3 +136,3 @@ if [ \"$1\" != \"--skip-protodoc\" ]; then",
                "-\tprotodoc --directories=\"etcdserver/api/v3lock/v3lockpb=service_message,etcdserver/api/v3election/v3electionpb=service_message,internal/mvcc/mvccpb=service_message\" \\",
                "+\tprotodoc --directories=\"etcdserver/api/v3lock/v3lockpb=service_message,etcdserver/api/v3election/v3electionpb=service_message,mvcc/mvccpb=service_message\" \\",
                " \t\t--title=\"etcd concurrency API Reference\" \\"
            ],
            "changed_files": [
                "scripts/genproto.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4e0c00244df50c7aaf0f2e34025bb1f4666dada6",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520448565,
            "hunks": 21,
            "message": "*: remove \"pkg/logger\", replace with \"pkg/logutil\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/clientv3/logger.go b/clientv3/logger.go",
                "index 6c13514a2..3276372ad 100644",
                "--- a/clientv3/logger.go",
                "+++ b/clientv3/logger.go",
                "@@ -20,3 +20,3 @@ import (",
                "-\t\"github.com/coreos/etcd/pkg/logger\"",
                "+\t\"github.com/coreos/etcd/pkg/logutil\"",
                "@@ -27,3 +27,3 @@ var (",
                " \tlgMu sync.RWMutex",
                "-\tlg   logger.Logger",
                "+\tlg   logutil.Logger",
                " )",
                "@@ -44,3 +44,3 @@ func SetLogger(l grpclog.LoggerV2) {",
                " \tlgMu.Lock()",
                "-\tlg = logger.New(l)",
                "+\tlg = logutil.NewLogger(l)",
                " \t// override grpclog so that any changes happen with locking",
                "@@ -50,4 +50,4 @@ func SetLogger(l grpclog.LoggerV2) {",
                "-// GetLogger returns the current logger.Logger.",
                "-func GetLogger() logger.Logger {",
                "+// GetLogger returns the current logutil.Logger.",
                "+func GetLogger() logutil.Logger {",
                " \tlgMu.RLock()",
                "@@ -58,4 +58,4 @@ func GetLogger() logger.Logger {",
                "-// NewLogger returns a new Logger with logger.Logger.",
                "-func NewLogger(gl grpclog.LoggerV2) logger.Logger {",
                "+// NewLogger returns a new Logger with logutil.Logger.",
                "+func NewLogger(gl grpclog.LoggerV2) logutil.Logger {",
                " \treturn &settableLogger{l: gl}",
                "@@ -99,3 +99,3 @@ func (s *settableLogger) Lvl(lvl int) grpclog.LoggerV2 {",
                " \t}",
                "-\treturn logger.NewDiscardLogger()",
                "+\treturn logutil.NewDiscardLogger()",
                " }",
                "diff --git a/etcdctl/ctlv3/command/snapshot_command.go b/etcdctl/ctlv3/command/snapshot_command.go",
                "index b66fadfbc..3ce5b1f8a 100644",
                "--- a/etcdctl/ctlv3/command/snapshot_command.go",
                "+++ b/etcdctl/ctlv3/command/snapshot_command.go",
                "@@ -22,3 +22,3 @@ import (",
                "-\t\"github.com/coreos/etcd/pkg/logger\"",
                "+\t\"github.com/coreos/etcd/pkg/logutil\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "@@ -98,3 +98,3 @@ func snapshotSaveCommandFunc(cmd *cobra.Command, args []string) {",
                "-\tlg := logger.NewDiscardLogger()",
                "+\tlg := logutil.NewDiscardLogger()",
                " \tdebug, err := cmd.Flags().GetBool(\"debug\")",
                "@@ -104,3 +104,3 @@ func snapshotSaveCommandFunc(cmd *cobra.Command, args []string) {",
                " \tif debug {",
                "-\t\tlg = logger.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\")",
                "+\t\tlg = logutil.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\")",
                " \t}",
                "@@ -122,3 +122,3 @@ func snapshotStatusCommandFunc(cmd *cobra.Command, args []string) {",
                "-\tlg := logger.NewDiscardLogger()",
                "+\tlg := logutil.NewDiscardLogger()",
                " \tdebug, err := cmd.Flags().GetBool(\"debug\")",
                "@@ -128,3 +128,3 @@ func snapshotStatusCommandFunc(cmd *cobra.Command, args []string) {",
                " \tif debug {",
                "-\t\tlg = logger.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\")",
                "+\t\tlg = logutil.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\")",
                " \t}",
                "@@ -160,3 +160,3 @@ func snapshotRestoreCommandFunc(cmd *cobra.Command, args []string) {",
                "-\tlg := logger.NewDiscardLogger()",
                "+\tlg := logutil.NewDiscardLogger()",
                " \tdebug, err := cmd.Flags().GetBool(\"debug\")",
                "@@ -166,3 +166,3 @@ func snapshotRestoreCommandFunc(cmd *cobra.Command, args []string) {",
                " \tif debug {",
                "-\t\tlg = logger.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\")",
                "+\t\tlg = logutil.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\")",
                " \t}",
                "diff --git a/snapshot/v3_snapshot.go b/snapshot/v3_snapshot.go",
                "index a410a4453..895a16a00 100644",
                "--- a/snapshot/v3_snapshot.go",
                "+++ b/snapshot/v3_snapshot.go",
                "@@ -37,3 +37,3 @@ import (",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "-\t\"github.com/coreos/etcd/pkg/logger\"",
                "+\t\"github.com/coreos/etcd/pkg/logutil\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "@@ -99,5 +99,5 @@ type RestoreConfig struct {",
                " // Otherwise, pass \"nil\".",
                "-func NewV3(cli *clientv3.Client, lg logger.Logger) Manager {",
                "+func NewV3(cli *clientv3.Client, lg logutil.Logger) Manager {",
                " \tif lg == nil {",
                "-\t\tlg = logger.NewDiscardLogger()",
                "+\t\tlg = logutil.NewDiscardLogger()",
                " \t}",
                "@@ -116,3 +116,3 @@ type v3Manager struct {",
                " \tskipHashCheck bool",
                "-\tlogger        logger.Logger",
                "+\tlogger        logutil.Logger",
                " }",
                "diff --git a/snapshot/v3_snapshot_test.go b/snapshot/v3_snapshot_test.go",
                "index d8edb0faf..c90988bac 100644",
                "--- a/snapshot/v3_snapshot_test.go",
                "+++ b/snapshot/v3_snapshot_test.go",
                "@@ -28,3 +28,3 @@ import (",
                " \t\"github.com/coreos/etcd/embed\"",
                "-\t\"github.com/coreos/etcd/pkg/logger\"",
                "+\t\"github.com/coreos/etcd/pkg/logutil\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "@@ -53,3 +53,3 @@ func TestSnapshotV3RestoreSingle(t *testing.T) {",
                "-\tsp := NewV3(nil, logger.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\"))",
                "+\tsp := NewV3(nil, logutil.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\"))",
                "@@ -190,3 +190,3 @@ func createSnapshotFile(t *testing.T, kvs []kv) string {",
                "-\tsp := NewV3(cli, logger.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\"))",
                "+\tsp := NewV3(cli, logutil.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\"))",
                " \tdpPath := filepath.Join(os.TempDir(), fmt.Sprintf(\"snapshot%d.db\", time.Now().Nanosecond()))",
                "@@ -231,3 +231,3 @@ func restoreCluster(t *testing.T, clusterN int, dbPath string) (",
                "-\t\tsp := NewV3(nil, logger.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\"))",
                "+\t\tsp := NewV3(nil, logutil.NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\"))",
                " \t\tif err := sp.Restore(dbPath, RestoreConfig{"
            ],
            "changed_files": [
                "clientv3/logger.go",
                "etcdctl/ctlv3/command/snapshot_command.go",
                "snapshot/v3_snapshot.go",
                "snapshot/v3_snapshot_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ca1885cf1df1dce3dbc8120f5441b68d35ca46b2",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1518823688,
            "hunks": 3,
            "message": "tools/functional-tester: use Go 1.10 Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/tools/functional-tester/scripts/docker-local-agent.sh b/tools/functional-tester/scripts/docker-local-agent.sh",
                "index 9bb1a18a6..f72f6620b 100755",
                "--- a/tools/functional-tester/scripts/docker-local-agent.sh",
                "+++ b/tools/functional-tester/scripts/docker-local-agent.sh",
                "@@ -15,3 +15,3 @@ fi",
                " if [[ -z \"${GO_VERSION}\" ]]; then",
                "-  GO_VERSION=1.9.4",
                "+  GO_VERSION=1.10",
                " fi",
                "diff --git a/tools/functional-tester/scripts/docker-local-tester.sh b/tools/functional-tester/scripts/docker-local-tester.sh",
                "index 9007bdb0f..a73f2e54f 100755",
                "--- a/tools/functional-tester/scripts/docker-local-tester.sh",
                "+++ b/tools/functional-tester/scripts/docker-local-tester.sh",
                "@@ -5,4 +5,4 @@",
                " # requires prebuilt Docker image",
                "-#   GO_VERSION=1.9.4 make build-docker-functional-tester -f ./hack/scripts-dev/Makefile",
                "-GO_VERSION=1.9.4 ./scripts/docker-local-tester.sh",
                "+#   GO_VERSION=1.10 make build-docker-functional-tester -f ./hack/scripts-dev/Makefile",
                "+GO_VERSION=1.10 ./scripts/docker-local-tester.sh",
                "@@ -29,3 +29,3 @@ fi",
                " if [[ -z \"${GO_VERSION}\" ]]; then",
                "-  GO_VERSION=1.9.4",
                "+  GO_VERSION=1.10",
                " fi"
            ],
            "changed_files": [
                "tools/functional-tester/scripts/docker-local-agent.sh",
                "tools/functional-tester/scripts/docker-local-tester.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "32ea82cd3fbfbb4708e8c335c8e073a428195eef",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519237332,
            "hunks": 2,
            "message": "etcd-runner: fix govet -shadow warning Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/tools/functional-tester/etcd-runner/command/global.go b/tools/functional-tester/etcd-runner/command/global.go",
                "index 02ae92dc2..968dd567e 100644",
                "--- a/tools/functional-tester/etcd-runner/command/global.go",
                "+++ b/tools/functional-tester/etcd-runner/command/global.go",
                "@@ -108,3 +108,3 @@ func doRounds(rcs []roundClient, rounds int, requests int) {",
                " func endpointsFromFlag(cmd *cobra.Command) []string {",
                "-\tendpoints, err := cmd.Flags().GetStringSlice(\"endpoints\")",
                "+\teps, err := cmd.Flags().GetStringSlice(\"endpoints\")",
                " \tif err != nil {",
                "@@ -112,3 +112,3 @@ func endpointsFromFlag(cmd *cobra.Command) []string {",
                " \t}",
                "-\treturn endpoints",
                "+\treturn eps",
                " }"
            ],
            "changed_files": [
                "tools/functional-tester/etcd-runner/command/global.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3534df14b47b6b0d2f6ee4ac24c666ba437a0912",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520221661,
            "hunks": 3,
            "message": "Documentation: trevisions -> revisions",
            "diff": [
                "diff --git a/Documentation/dev-guide/apispec/swagger/rpc.swagger.json b/Documentation/dev-guide/apispec/swagger/rpc.swagger.json",
                "index 8fc46c793..e969e36bb 100644",
                "--- a/Documentation/dev-guide/apispec/swagger/rpc.swagger.json",
                "+++ b/Documentation/dev-guide/apispec/swagger/rpc.swagger.json",
                "@@ -2019,3 +2019,3 @@",
                "         \"min_create_revision\": {",
                "-          \"description\": \"min_create_revision is the lower bound for returned key create revisions; all keys with\\nlesser create trevisions will be filtered away.\",",
                "+          \"description\": \"min_create_revision is the lower bound for returned key create revisions; all keys with\\nlesser create revisions will be filtered away.\",",
                "           \"type\": \"string\",",
                "diff --git a/etcdserver/etcdserverpb/rpc.pb.go b/etcdserver/etcdserverpb/rpc.pb.go",
                "index e0f947970..6af4a6bf0 100644",
                "--- a/etcdserver/etcdserverpb/rpc.pb.go",
                "+++ b/etcdserver/etcdserverpb/rpc.pb.go",
                "@@ -298,3 +298,3 @@ type RangeRequest struct {",
                " \t// min_create_revision is the lower bound for returned key create revisions; all keys with",
                "-\t// lesser create trevisions will be filtered away.",
                "+\t// lesser create revisions will be filtered away.",
                " \tMinCreateRevision int64 `protobuf:\"varint,12,opt,name=min_create_revision,json=minCreateRevision,proto3\" json:\"min_create_revision,omitempty\"`",
                "diff --git a/etcdserver/etcdserverpb/rpc.proto b/etcdserver/etcdserverpb/rpc.proto",
                "index ad52cd641..7a95f780e 100644",
                "--- a/etcdserver/etcdserverpb/rpc.proto",
                "+++ b/etcdserver/etcdserverpb/rpc.proto",
                "@@ -417,3 +417,3 @@ message RangeRequest {",
                "   // min_create_revision is the lower bound for returned key create revisions; all keys with",
                "-  // lesser create trevisions will be filtered away.",
                "+  // lesser create revisions will be filtered away.",
                "   int64 min_create_revision = 12;"
            ],
            "changed_files": [
                "Documentation/dev-guide/apispec/swagger/rpc.swagger.json",
                "etcdserver/etcdserverpb/rpc.pb.go",
                "etcdserver/etcdserverpb/rpc.proto"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "38846c220abfc1e920304dc00afed84de65c5369",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519242820,
            "hunks": 5,
            "message": "raft: use leader's term when candidate becomes follower `raft.Step` already ensures that when `m.Term > r.Term`, candidate reverts back to follower with its term being reset with `m.Term`, thus it's always true that `m.Term == r.Term` in `stepCandidate`. This just makes `r.becomeFollower` calls consistent. Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/raft/raft.go b/raft/raft.go",
                "index 336a7d3ff..235a38b51 100644",
                "--- a/raft/raft.go",
                "+++ b/raft/raft.go",
                "@@ -1130,9 +1130,9 @@ func stepCandidate(r *raft, m pb.Message) error {",
                " \tcase pb.MsgApp:",
                "-\t\tr.becomeFollower(r.Term, m.From)",
                "+\t\tr.becomeFollower(m.Term, m.From) // always m.Term == r.Term",
                " \t\tr.handleAppendEntries(m)",
                " \tcase pb.MsgHeartbeat:",
                "-\t\tr.becomeFollower(r.Term, m.From)",
                "+\t\tr.becomeFollower(m.Term, m.From) // always m.Term == r.Term",
                " \t\tr.handleHeartbeat(m)",
                " \tcase pb.MsgSnap:",
                "-\t\tr.becomeFollower(m.Term, m.From)",
                "+\t\tr.becomeFollower(m.Term, m.From) // always m.Term == r.Term",
                " \t\tr.handleSnapshot(m)",
                "diff --git a/raft/raft_paper_test.go b/raft/raft_paper_test.go",
                "index 71a7d14ac..16359ba31 100644",
                "--- a/raft/raft_paper_test.go",
                "+++ b/raft/raft_paper_test.go",
                "@@ -222,3 +222,3 @@ func TestLeaderElectionInOneRoundRPC(t *testing.T) {",
                " \t\tfor id, vote := range tt.votes {",
                "-\t\t\tr.Step(pb.Message{From: id, To: 1, Type: pb.MsgVoteResp, Reject: !vote})",
                "+\t\t\tr.Step(pb.Message{From: id, To: 1, Term: r.Term, Type: pb.MsgVoteResp, Reject: !vote})",
                " \t\t}",
                "diff --git a/raft/raft_test.go b/raft/raft_test.go",
                "index 374cfd015..c93935fb7 100644",
                "--- a/raft/raft_test.go",
                "+++ b/raft/raft_test.go",
                "@@ -1699,2 +1699,70 @@ func TestAllServerStepdown(t *testing.T) {",
                "+func TestCandidateResetTermMsgHeartbeat(t *testing.T) {",
                "+\ttestCandidateResetTerm(t, pb.MsgHeartbeat)",
                "+}",
                "+",
                "+func TestCandidateResetTermMsgApp(t *testing.T) {",
                "+\ttestCandidateResetTerm(t, pb.MsgApp)",
                "+}",
                "+",
                "+// testCandidateResetTerm tests when a candidate receives a",
                "+// MsgHeartbeat or MsgApp from leader, \"Step\" resets the term",
                "+// with leader's and reverts back to follower.",
                "+func testCandidateResetTerm(t *testing.T, mt pb.MessageType) {",
                "+\ta := newTestRaft(1, []uint64{1, 2, 3}, 10, 1, NewMemoryStorage())",
                "+\tb := newTestRaft(2, []uint64{1, 2, 3}, 10, 1, NewMemoryStorage())",
                "+\tc := newTestRaft(3, []uint64{1, 2, 3}, 10, 1, NewMemoryStorage())",
                "+",
                "+\tnt := newNetwork(a, b, c)",
                "+",
                "+\tnt.send(pb.Message{From: 1, To: 1, Type: pb.MsgHup})",
                "+\tif a.state != StateLeader {",
                "+\t\tt.Errorf(\"state = %s, want %s\", a.state, StateLeader)",
                "+\t}",
                "+\tif b.state != StateFollower {",
                "+\t\tt.Errorf(\"state = %s, want %s\", b.state, StateFollower)",
                "+\t}",
                "+\tif c.state != StateFollower {",
                "+\t\tt.Errorf(\"state = %s, want %s\", c.state, StateFollower)",
                "+\t}",
                "+",
                "+\t// isolate 3 and increase term in rest",
                "+\tnt.isolate(3)",
                "+",
                "+\tnt.send(pb.Message{From: 2, To: 2, Type: pb.MsgHup})",
                "+\tnt.send(pb.Message{From: 1, To: 1, Type: pb.MsgHup})",
                "+",
                "+\tif a.state != StateLeader {",
                "+\t\tt.Errorf(\"state = %s, want %s\", a.state, StateLeader)",
                "+\t}",
                "+\tif b.state != StateFollower {",
                "+\t\tt.Errorf(\"state = %s, want %s\", b.state, StateFollower)",
                "+\t}",
                "+",
                "+\t// trigger campaign in isolated c",
                "+\tc.resetRandomizedElectionTimeout()",
                "+\tfor i := 0; i < c.randomizedElectionTimeout; i++ {",
                "+\t\tc.tick()",
                "+\t}",
                "+",
                "+\tif c.state != StateCandidate {",
                "+\t\tt.Errorf(\"state = %s, want %s\", c.state, StateCandidate)",
                "+\t}",
                "+",
                "+\tnt.recover()",
                "+",
                "+\t// leader sends to isolated candidate",
                "+\t// and expects candidate to revert to follower",
                "+\tnt.send(pb.Message{From: 1, To: 3, Term: a.Term, Type: mt})",
                "+",
                "+\tif c.state != StateFollower {",
                "+\t\tt.Errorf(\"state = %s, want %s\", c.state, StateFollower)",
                "+\t}",
                "+",
                "+\t// follower c term is reset with leader's",
                "+\tif a.Term != c.Term {",
                "+\t\tt.Errorf(\"follower term expected same term as leader's %d, got %d\", a.Term, c.Term)",
                "+\t}",
                "+}",
                "+",
                " func TestLeaderStepdownWhenQuorumActive(t *testing.T) {"
            ],
            "changed_files": [
                "raft/raft.go",
                "raft/raft_paper_test.go",
                "raft/raft_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "028f99b103d304753ebd4d027d94b61d6b752b3d",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520501397,
            "hunks": 2,
            "message": "test: fix \"functional-tester\" build script Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/test b/test",
                "index c2d6a52d3..8249c989b 100755",
                "--- a/test",
                "+++ b/test",
                "@@ -17,5 +17,2 @@ source ./build",
                "-# build tests with vendored dependencies",
                "-etcd_setup_gopath",
                "-",
                " # build before setting up test GOPATH",
                "@@ -25,2 +22,5 @@ fi",
                "+# build tests with vendored dependencies",
                "+etcd_setup_gopath",
                "+",
                " if [ -z \"$PASSES\" ]; then"
            ],
            "changed_files": [
                "test"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "43caf2b28acf94839f198bb0eff3376ec1f1ea7a",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520460271,
            "hunks": 14,
            "message": "hack/scripts-dev: sync with master branch Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/Makefile b/hack/scripts-dev/Makefile",
                "index e01ff2098..c9450a4c9 100644",
                "--- a/hack/scripts-dev/Makefile",
                "+++ b/hack/scripts-dev/Makefile",
                "@@ -5,4 +5,7 @@",
                " # Example:",
                "-#   make clean -f ./hack/scripts-dev/Makefile",
                " #   make build -f ./hack/scripts-dev/Makefile",
                "+#   make clean -f ./hack/scripts-dev/Makefile",
                "+#   make clean-docker -f ./hack/scripts-dev/Makefile",
                "+#   make restart-docker -f ./hack/scripts-dev/Makefile",
                "+#   make delete-docker-images -f ./hack/scripts-dev/Makefile",
                "@@ -27,5 +30,16 @@ clean:",
                "+clean-docker:",
                "+\tdocker images",
                "+\tdocker image prune --force",
                "+",
                "+restart-docker:",
                "+\tservice docker restart",
                "+delete-docker-images:",
                "+\tdocker rm --force $(docker ps -a -q) || true",
                "+\tdocker rmi --force $(docker images -q) || true",
                "-GO_VERSION ?= 1.9.4",
                "+",
                "+",
                "+GO_VERSION ?= 1.10",
                " ETCD_VERSION ?= $(shell git rev-parse --short HEAD || echo \"GitNotFound\")",
                "@@ -73,4 +87,13 @@ pull-docker-test:",
                " #   make compile-with-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   make compile-setup-gopath-with-docker-test -f ./hack/scripts-dev/Makefile",
                " compile-with-docker-test:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --mount type=bind,source=`pwd`,destination=/go/src/github.com/coreos/etcd \\",
                "+\t  gcr.io/etcd-development/etcd-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"GO_BUILD_FLAGS=-v ./build && ./bin/etcd --version\"",
                "+",
                "+compile-setup-gopath-with-docker-test:",
                " \t$(info GO_VERSION: $(GO_VERSION))",
                "@@ -80,3 +103,3 @@ compile-with-docker-test:",
                " \t  gcr.io/etcd-development/etcd-test:go$(GO_VERSION) \\",
                "-\t  /bin/bash -c \"cd /etcd && GO_BUILD_FLAGS=-v ./build && ./bin/etcd --version\"",
                "+\t  /bin/bash -c \"cd /etcd && ETCD_SETUP_GOPATH=1 GO_BUILD_FLAGS=-v ./build && ./bin/etcd --version && rm -rf ./gopath\"",
                "@@ -148,7 +171,8 @@ docker-test-coverage:",
                " # Example:",
                "-#   ETCD_VERSION=v3.3.0-test.0 make build-docker-release-master -f ./hack/scripts-dev/Makefile",
                "-#   ETCD_VERSION=v3.3.0-test.0 make push-docker-release-master -f ./hack/scripts-dev/Makefile",
                "+#   make compile-with-docker-test -f ./hack/scripts-dev/Makefile",
                "+#   ETCD_VERSION=v3-test make build-docker-release-master -f ./hack/scripts-dev/Makefile",
                "+#   ETCD_VERSION=v3-test make push-docker-release-master -f ./hack/scripts-dev/Makefile",
                " #   gsutil -m acl ch -u allUsers:R -r gs://artifacts.etcd-development.appspot.com",
                "-build-docker-release-master: compile-with-docker-test",
                "+build-docker-release-master:",
                " \t$(info ETCD_VERSION: $(ETCD_VERSION))",
                "@@ -236,2 +260,3 @@ docker-static-ip-test-certs-metrics-proxy-run:",
                " #   make pull-docker-dns-test -f ./hack/scripts-dev/Makefile",
                "+#   make docker-dns-test-insecure-run -f ./hack/scripts-dev/Makefile",
                " #   make docker-dns-test-certs-run -f ./hack/scripts-dev/Makefile",
                "@@ -265,2 +290,16 @@ pull-docker-dns-test:",
                "+docker-dns-test-insecure-run:",
                "+\t$(info GO_VERSION: $(GO_VERSION))",
                "+\t$(info HOST_TMP_DIR: $(HOST_TMP_DIR))",
                "+\t$(info TMP_DIR_MOUNT_FLAG: $(TMP_DIR_MOUNT_FLAG))",
                "+\tdocker run \\",
                "+\t  --rm \\",
                "+\t  --tty \\",
                "+\t  --dns 127.0.0.1 \\",
                "+\t  $(TMP_DIR_MOUNT_FLAG) \\",
                "+\t  --mount type=bind,source=`pwd`/bin,destination=/etcd \\",
                "+\t  --mount type=bind,source=`pwd`/hack/scripts-dev/docker-dns/insecure,destination=/insecure \\",
                "+\t  gcr.io/etcd-development/etcd-dns-test:go$(GO_VERSION) \\",
                "+\t  /bin/bash -c \"cd /etcd && /insecure/run.sh && rm -rf m*.etcd\"",
                "+",
                " docker-dns-test-certs-run:",
                "@@ -420,3 +459,3 @@ docker-dns-srv-test-certs-wildcard-run:",
                " build-etcd-test-proxy:",
                "-\tgo build -v -o ./bin/etcd-test-proxy ./cmd/tools/etcd-test-proxy",
                "+\tgo build -v -o ./bin/etcd-test-proxy ./tools/etcd-test-proxy",
                "diff --git a/hack/scripts-dev/docker-dns/certs/run.sh b/hack/scripts-dev/docker-dns/certs/run.sh",
                "index 7f6c31d4f..9311c618b 100755",
                "--- a/hack/scripts-dev/docker-dns/certs/run.sh",
                "+++ b/hack/scripts-dev/docker-dns/certs/run.sh",
                "@@ -33 +33,50 @@ ETCDCTL_API=3 ./etcdctl \\",
                "   get abc",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl -L https://127.0.0.1:2379/v2/keys/queue \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl -L https://m1.etcd.local:2379/v2/keys/queue \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v3 key...\\n\"",
                "+curl -L https://127.0.0.1:2379/v3/kv/put \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nWriting v3 key...\\n\"",
                "+curl -L https://m1.etcd.local:2379/v3/kv/put \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nReading v3 key...\\n\"",
                "+curl -L https://m1.etcd.local:2379/v3/kv/range \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\"}'",
                "+",
                "+printf \"\\n\\nFetching 'curl https://m1.etcd.local:2379/metrics'...\\n\"",
                "+curl \\",
                "+  --cacert /certs/ca.crt \\",
                "+  --cert /certs/server.crt \\",
                "+  --key /certs/server.key.insecure \\",
                "+  -L https://m1.etcd.local:2379/metrics | grep Put | tail -3",
                "+",
                "+printf \"\\n\\nDone!!!\\n\\n\"",
                "diff --git a/hack/scripts-dev/docker-dns/insecure/Procfile b/hack/scripts-dev/docker-dns/insecure/Procfile",
                "new file mode 100644",
                "index 000000000..ad87e4191",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/insecure/Procfile",
                "@@ -0,0 +1,6 @@",
                "+# Use goreman to run `go get github.com/mattn/goreman`",
                "+etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls http://127.0.0.1:2379 --advertise-client-urls http://m1.etcd.local:2379 --listen-peer-urls http://127.0.0.1:2380 --initial-advertise-peer-urls=http://m1.etcd.local:2380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380 --host-whitelist \"localhost,127.0.0.1,m1.etcd.local\"",
                "+",
                "+etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls http://127.0.0.1:22379 --advertise-client-urls http://m2.etcd.local:22379 --listen-peer-urls http://127.0.0.1:22380 --initial-advertise-peer-urls=http://m2.etcd.local:22380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380 --host-whitelist \"localhost,127.0.0.1,m1.etcd.local\"",
                "+",
                "+etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls http://127.0.0.1:32379 --advertise-client-urls http://m3.etcd.local:32379 --listen-peer-urls http://127.0.0.1:32380 --initial-advertise-peer-urls=http://m3.etcd.local:32380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380 --host-whitelist \"localhost,127.0.0.1,m1.etcd.local\"",
                "\\ No newline at end of file",
                "diff --git a/hack/scripts-dev/docker-dns/insecure/run.sh b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "new file mode 100755",
                "index 000000000..de7ff68a8",
                "--- /dev/null",
                "+++ b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "@@ -0,0 +1,89 @@",
                "+#!/bin/sh",
                "+rm -rf /tmp/m1.data /tmp/m2.data /tmp/m3.data",
                "+",
                "+/etc/init.d/bind9 start",
                "+",
                "+# get rid of hosts so go lookup won't resolve 127.0.0.1 to localhost",
                "+cat /dev/null >/etc/hosts",
                "+",
                "+goreman -f /insecure/Procfile start &",
                "+",
                "+# TODO: remove random sleeps",
                "+sleep 7s",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --endpoints=http://m1.etcd.local:2379 \\",
                "+  endpoint health --cluster",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --endpoints=http://m1.etcd.local:2379,http://m2.etcd.local:22379,http://m3.etcd.local:32379 \\",
                "+  put abc def",
                "+",
                "+ETCDCTL_API=3 ./etcdctl \\",
                "+  --endpoints=http://m1.etcd.local:2379,http://m2.etcd.local:22379,http://m3.etcd.local:32379 \\",
                "+  get abc",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl \\",
                "+  -L http://127.0.0.1:2379/v2/keys/queue \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v2 key...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v2/keys/queue \\",
                "+  -X POST \\",
                "+  -d value=data",
                "+",
                "+printf \"\\nWriting v3 key...\\n\"",
                "+curl \\",
                "+  -L http://127.0.0.1:2379/v3/kv/put \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nWriting v3 key...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/kv/put \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'",
                "+",
                "+printf \"\\n\\nReading v3 key...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/kv/range \\",
                "+\t-X POST \\",
                "+  -d '{\"key\": \"Zm9v\"}'",
                "+",
                "+printf \"\\n\\nFetching 'curl http://m1.etcd.local:2379/metrics'...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/metrics | grep Put | tail -3",
                "+",
                "+name1=$(base64 <<< \"/election-prefix\")",
                "+val1=$(base64 <<< \"v1\")",
                "+data1=\"{\\\"name\\\":\\\"${name1}\\\", \\\"value\\\":\\\"${val1}\\\"}\"",
                "+",
                "+printf \"\\n\\nCampaign: ${data1}\\n\"",
                "+result1=$(curl -L http://m1.etcd.local:2379/v3/election/campaign -X POST -d \"${data1}\")",
                "+echo ${result1}",
                "+",
                "+# should not panic servers",
                "+val2=$(base64 <<< \"v2\")",
                "+data2=\"{\\\"value\\\": \\\"${val2}\\\"}\"",
                "+printf \"\\n\\nProclaim (wrong-format): ${data2}\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/election/proclaim \\",
                "+  -X POST \\",
                "+  -d \"${data2}\"",
                "+",
                "+printf \"\\n\\nProclaim (wrong-format)...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/election/proclaim \\",
                "+  -X POST \\",
                "+  -d '}'",
                "+",
                "+printf \"\\n\\nProclaim (wrong-format)...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/election/proclaim \\",
                "+  -X POST \\",
                "+  -d '{\"value\": \"Zm9v\"}'",
                "+",
                "+printf \"\\n\\nDone!!!\\n\\n\""
            ],
            "changed_files": [
                "hack/scripts-dev/Makefile",
                "hack/scripts-dev/docker-dns/certs/run.sh",
                "hack/scripts-dev/docker-dns/insecure/Procfile",
                "hack/scripts-dev/docker-dns/insecure/run.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.2",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c4fb5bdd23d2c0821ba101930f2ab25c80a46140",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519770692,
            "hunks": 2,
            "message": "embed: rename \"v3alphaMutator\" to \"v3Mutator\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/embed/serve.go b/embed/serve.go",
                "index 3dc0434b6..479f680e3 100644",
                "--- a/embed/serve.go",
                "+++ b/embed/serve.go",
                "@@ -252,5 +252,5 @@ func (sctx *serveCtx) createMux(gwmux *gw.ServeMux, handler http.Handler) *http.",
                " // TODO: deprecate this in 3.5 release",
                "-func wrapMux(mux *http.ServeMux) http.Handler { return &v3alphaMutator{mux: mux} }",
                "+func wrapMux(mux *http.ServeMux) http.Handler { return &v3Mutator{mux: mux} }",
                "-type v3alphaMutator struct {",
                "+type v3Mutator struct {",
                " \tmux *http.ServeMux",
                "@@ -258,3 +258,3 @@ type v3alphaMutator struct {",
                "-func (m *v3alphaMutator) ServeHTTP(rw http.ResponseWriter, req *http.Request) {",
                "+func (m *v3Mutator) ServeHTTP(rw http.ResponseWriter, req *http.Request) {",
                " \tif req != nil && req.URL != nil && strings.HasPrefix(req.URL.Path, \"/v3beta/\") {"
            ],
            "changed_files": [
                "embed/serve.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "af3021aa1a6463cd679b06d14ea4dc42014949e6",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520461497,
            "hunks": 3,
            "message": "semaphore: update Go version, release test version Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/.semaphore.sh b/.semaphore.sh",
                "index a487e44c4..395300505 100755",
                "--- a/.semaphore.sh",
                "+++ b/.semaphore.sh",
                "@@ -4,3 +4,3 @@ TEST_SUFFIX=$(date +%s | base64 | head -c 15)",
                "-TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.1.10\"",
                "+TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.1.11\"",
                " if [ \"$TEST_ARCH\" == \"386\" ]; then",
                "@@ -12,5 +12,5 @@ docker run \\",
                " \t--volume=`pwd`:/go/src/github.com/coreos/etcd \\",
                "-\tgcr.io/etcd-development/etcd-test:go1.8.5 \\",
                "+\tgcr.io/etcd-development/etcd-test:go1.8.7 \\",
                " \t/bin/bash -c \"${TEST_OPTS} ./test 2>&1 | tee test-${TEST_SUFFIX}.log\"",
                "-! egrep \"(--- FAIL:|leak)\" -A10 -B50 test-${TEST_SUFFIX}.log",
                "+! egrep \"(--- FAIL:|panic: test timed out|appears to have leaked)\" -B50 -A10 test-${TEST_SUFFIX}.log"
            ],
            "changed_files": [
                ".semaphore.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "912c4021887b5cad84cd1ea991170bf0198fe8d7",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520275497,
            "hunks": 2,
            "message": "etcdctl/ctlv3: add \"--cluster\" flag to \"defrag\" command Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdctl/ctlv3/command/defrag_command.go b/etcdctl/ctlv3/command/defrag_command.go",
                "index a7e6f76f3..d393afa74 100644",
                "--- a/etcdctl/ctlv3/command/defrag_command.go",
                "+++ b/etcdctl/ctlv3/command/defrag_command.go",
                "@@ -37,2 +37,3 @@ func NewDefragCommand() *cobra.Command {",
                " \t}",
                "+\tcmd.PersistentFlags().BoolVar(&epClusterEndpoints, \"cluster\", false, \"use all endpoints from the cluster member list\")",
                " \tcmd.Flags().StringVar(&defragDataDir, \"data-dir\", \"\", \"Optional. If present, defragments a data directory not in use by etcd.\")",
                "@@ -53,3 +54,3 @@ func defragCommandFunc(cmd *cobra.Command, args []string) {",
                " \tc := mustClientFromCmd(cmd)",
                "-\tfor _, ep := range c.Endpoints() {",
                "+\tfor _, ep := range endpointsFromCluster(cmd) {",
                " \t\tctx, cancel := commandCtx(cmd)"
            ],
            "changed_files": [
                "etcdctl/ctlv3/command/defrag_command.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5b8419e9fa32096a06d4fb10368416f07f6d7a72",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519759768,
            "hunks": 1,
            "message": "semaphore: update release test version",
            "diff": [
                "diff --git a/.semaphore.sh b/.semaphore.sh",
                "index f74db332b..18fa538b7 100755",
                "--- a/.semaphore.sh",
                "+++ b/.semaphore.sh",
                "@@ -4,3 +4,3 @@ TEST_SUFFIX=$(date +%s | base64 | head -c 15)",
                "-TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.3.0\"",
                "+TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.3.1\"",
                " if [ \"$TEST_ARCH\" == \"386\" ]; then"
            ],
            "changed_files": [
                ".semaphore.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e48a18256f6f7f6f7c8e84110efab726b86e3a88",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520461262,
            "hunks": 9,
            "message": "travis: use Go 1.8.7, sync with master Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 0e5541b1a..2c4ff0e05 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -8,3 +8,3 @@ services: docker",
                " go:",
                "-- 1.8.7",
                "+- \"1.8.7\"",
                " - tip",
                "@@ -32,3 +32,3 @@ matrix:",
                "   exclude:",
                "-  - go: 1.8.7",
                "+  - go: \"1.8.7\"",
                "     env: TARGET=amd64-go-tip",
                "@@ -50,3 +50,3 @@ matrix:",
                " before_install:",
                "-- docker pull gcr.io/etcd-development/etcd-test:go1.8.7",
                "+- if [[ $TRAVIS_GO_VERSION == 1.* ]]; then docker pull gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION}; fi",
                "@@ -56,2 +56,3 @@ install:",
                " script:",
                "+ - echo \"TRAVIS_GO_VERSION=${TRAVIS_GO_VERSION}\"",
                "  - >",
                "@@ -60,3 +61,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "           /bin/bash -c \"GOARCH=amd64 ./test\"",
                "@@ -68,3 +69,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "           /bin/bash -c \"GO_BUILD_FLAGS='-a -v' GOOS=darwin GOARCH=amd64 ./build\"",
                "@@ -73,3 +74,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "           /bin/bash -c \"GO_BUILD_FLAGS='-a -v' GOOS=windows GOARCH=amd64 ./build\"",
                "@@ -78,3 +79,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "           /bin/bash -c \"GOARCH=386 PASSES='build unit' ./test\"",
                "@@ -84,3 +85,3 @@ script:",
                "         docker run --rm \\",
                "-          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go1.8.7 \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "           /bin/bash -c \"GO_BUILD_FLAGS='-a -v' GOARCH='${TARGET}' ./build\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ab4d888e1fd104535d4d0f229ca569fa8d5c6825",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520457094,
            "hunks": 1,
            "message": "pkg/logutil: fix example Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/pkg/logutil/logger.go b/pkg/logutil/logger.go",
                "index cd1de5f7f..ecc9ae5b3 100644",
                "--- a/pkg/logutil/logger.go",
                "+++ b/pkg/logutil/logger.go",
                "@@ -36,3 +36,3 @@ var _ Logger = &defaultLogger{}",
                " //  g := grpclog.NewLoggerV2WithVerbosity(os.Stderr, os.Stderr, os.Stderr, 4)",
                "-//  defaultLogger = New(g)",
                "+//  defaultLogger = NewLogger(g)",
                " //"
            ],
            "changed_files": [
                "pkg/logutil/logger.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8a518b01c4782840b4de66b118e0468ea703475d",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519672365,
            "hunks": 114,
            "message": "*: revert \"internal/mvcc\" change Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/alarm/alarms.go b/alarm/alarms.go",
                "index 58da77715..4fd79999a 100644",
                "--- a/alarm/alarms.go",
                "+++ b/alarm/alarms.go",
                "@@ -21,4 +21,5 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "+",
                " \t\"github.com/coreos/pkg/capnslog\"",
                "diff --git a/auth/range_perm_cache.go b/auth/range_perm_cache.go",
                "index 62acdf26d..691b65ba3 100644",
                "--- a/auth/range_perm_cache.go",
                "+++ b/auth/range_perm_cache.go",
                "@@ -18,3 +18,3 @@ import (",
                " \t\"github.com/coreos/etcd/auth/authpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/adt\"",
                "diff --git a/auth/store.go b/auth/store.go",
                "index e93560896..d379ffa8e 100644",
                "--- a/auth/store.go",
                "+++ b/auth/store.go",
                "@@ -28,3 +28,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "diff --git a/auth/store_test.go b/auth/store_test.go",
                "index 739d8fcde..b4eaa5e74 100644",
                "--- a/auth/store_test.go",
                "+++ b/auth/store_test.go",
                "@@ -28,3 +28,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "diff --git a/clientv3/concurrency/election.go b/clientv3/concurrency/election.go",
                "index 84156a374..e18a0ed4a 100644",
                "--- a/clientv3/concurrency/election.go",
                "+++ b/clientv3/concurrency/election.go",
                "@@ -23,3 +23,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/clientv3/concurrency/key.go b/clientv3/concurrency/key.go",
                "index 4d11ffef6..4b6e399bd 100644",
                "--- a/clientv3/concurrency/key.go",
                "+++ b/clientv3/concurrency/key.go",
                "@@ -22,3 +22,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/clientv3/integration/kv_test.go b/clientv3/integration/kv_test.go",
                "index 81630c53e..66de753cd 100644",
                "--- a/clientv3/integration/kv_test.go",
                "+++ b/clientv3/integration/kv_test.go",
                "@@ -28,3 +28,3 @@ import (",
                " \t\"github.com/coreos/etcd/integration\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/clientv3/integration/maintenance_test.go b/clientv3/integration/maintenance_test.go",
                "index 87bc75f54..d25c4e9ba 100644",
                "--- a/clientv3/integration/maintenance_test.go",
                "+++ b/clientv3/integration/maintenance_test.go",
                "@@ -28,5 +28,5 @@ import (",
                " \t\"github.com/coreos/etcd/integration\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/clientv3/integration/mirror_test.go b/clientv3/integration/mirror_test.go",
                "index 9a2bac522..01bfef10a 100644",
                "--- a/clientv3/integration/mirror_test.go",
                "+++ b/clientv3/integration/mirror_test.go",
                "@@ -26,3 +26,3 @@ import (",
                " \t\"github.com/coreos/etcd/integration\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/clientv3/integration/namespace_test.go b/clientv3/integration/namespace_test.go",
                "index f884b17b1..b952d333d 100644",
                "--- a/clientv3/integration/namespace_test.go",
                "+++ b/clientv3/integration/namespace_test.go",
                "@@ -24,3 +24,3 @@ import (",
                " \t\"github.com/coreos/etcd/integration\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/clientv3/integration/watch_test.go b/clientv3/integration/watch_test.go",
                "index a3559faa7..f9ac47b4a 100644",
                "--- a/clientv3/integration/watch_test.go",
                "+++ b/clientv3/integration/watch_test.go",
                "@@ -29,3 +29,3 @@ import (",
                " \t\"github.com/coreos/etcd/integration\"",
                "-\tmvccpb \"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\tmvccpb \"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/clientv3/leasing/cache.go b/clientv3/leasing/cache.go",
                "index 5df1d842a..77a1d06c8 100644",
                "--- a/clientv3/leasing/cache.go",
                "+++ b/clientv3/leasing/cache.go",
                "@@ -24,3 +24,3 @@ import (",
                " \tv3pb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/clientv3/leasing/kv.go b/clientv3/leasing/kv.go",
                "index 026320700..051a8fceb 100644",
                "--- a/clientv3/leasing/kv.go",
                "+++ b/clientv3/leasing/kv.go",
                "@@ -26,3 +26,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "diff --git a/clientv3/watch.go b/clientv3/watch.go",
                "index 9452d0d92..312845cbe 100644",
                "--- a/clientv3/watch.go",
                "+++ b/clientv3/watch.go",
                "@@ -24,3 +24,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\tmvccpb \"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\tmvccpb \"github.com/coreos/etcd/mvcc/mvccpb\"",
                "diff --git a/clientv3/watch_test.go b/clientv3/watch_test.go",
                "index 1edb4a843..8d3380522 100644",
                "--- a/clientv3/watch_test.go",
                "+++ b/clientv3/watch_test.go",
                "@@ -19,3 +19,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/compactor/periodic.go b/compactor/periodic.go",
                "index c2ebbe8d2..447352ec3 100644",
                "--- a/compactor/periodic.go",
                "+++ b/compactor/periodic.go",
                "@@ -22,3 +22,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "diff --git a/compactor/revision.go b/compactor/revision.go",
                "index 54561e9ab..4a8761412 100644",
                "--- a/compactor/revision.go",
                "+++ b/compactor/revision.go",
                "@@ -21,3 +21,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "diff --git a/contrib/recipes/barrier.go b/contrib/recipes/barrier.go",
                "index 7dc18cdbd..6e9281721 100644",
                "--- a/contrib/recipes/barrier.go",
                "+++ b/contrib/recipes/barrier.go",
                "@@ -20,3 +20,3 @@ import (",
                " \tv3 \"github.com/coreos/etcd/clientv3\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/contrib/recipes/client.go b/contrib/recipes/client.go",
                "index 79b23a828..111b0b40c 100644",
                "--- a/contrib/recipes/client.go",
                "+++ b/contrib/recipes/client.go",
                "@@ -21,3 +21,3 @@ import (",
                " \tv3 \"github.com/coreos/etcd/clientv3\"",
                "-\tspb \"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\tspb \"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/contrib/recipes/double_barrier.go b/contrib/recipes/double_barrier.go",
                "index 27ff76ab3..93cc61b4f 100644",
                "--- a/contrib/recipes/double_barrier.go",
                "+++ b/contrib/recipes/double_barrier.go",
                "@@ -21,3 +21,3 @@ import (",
                " \t\"github.com/coreos/etcd/clientv3/concurrency\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/contrib/recipes/priority_queue.go b/contrib/recipes/priority_queue.go",
                "index 8be0db74f..2378ce2f8 100644",
                "--- a/contrib/recipes/priority_queue.go",
                "+++ b/contrib/recipes/priority_queue.go",
                "@@ -21,3 +21,3 @@ import (",
                " \tv3 \"github.com/coreos/etcd/clientv3\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/contrib/recipes/queue.go b/contrib/recipes/queue.go",
                "index 33a8f31b3..5d0423a42 100644",
                "--- a/contrib/recipes/queue.go",
                "+++ b/contrib/recipes/queue.go",
                "@@ -20,3 +20,3 @@ import (",
                " \tv3 \"github.com/coreos/etcd/clientv3\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/contrib/recipes/rwmutex.go b/contrib/recipes/rwmutex.go",
                "index 436ee0917..1213b7e42 100644",
                "--- a/contrib/recipes/rwmutex.go",
                "+++ b/contrib/recipes/rwmutex.go",
                "@@ -21,3 +21,3 @@ import (",
                " \t\"github.com/coreos/etcd/clientv3/concurrency\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/contrib/recipes/watch.go b/contrib/recipes/watch.go",
                "index 7226a8ea7..536787227 100644",
                "--- a/contrib/recipes/watch.go",
                "+++ b/contrib/recipes/watch.go",
                "@@ -20,3 +20,3 @@ import (",
                " \t\"github.com/coreos/etcd/clientv3\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/e2e/etcd_corrupt_test.go b/e2e/etcd_corrupt_test.go",
                "index aa6020e4f..a2bbb4c42 100644",
                "--- a/e2e/etcd_corrupt_test.go",
                "+++ b/e2e/etcd_corrupt_test.go",
                "@@ -26,3 +26,3 @@ import (",
                " \t\"github.com/coreos/etcd/clientv3\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "diff --git a/etcdctl/ctlv3/command/defrag_command.go b/etcdctl/ctlv3/command/defrag_command.go",
                "index 097da5900..a7e6f76f3 100644",
                "--- a/etcdctl/ctlv3/command/defrag_command.go",
                "+++ b/etcdctl/ctlv3/command/defrag_command.go",
                "@@ -22,3 +22,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/spf13/cobra\"",
                "diff --git a/etcdctl/ctlv3/command/make_mirror_command.go b/etcdctl/ctlv3/command/make_mirror_command.go",
                "index 030e5580d..8afa479d4 100644",
                "--- a/etcdctl/ctlv3/command/make_mirror_command.go",
                "+++ b/etcdctl/ctlv3/command/make_mirror_command.go",
                "@@ -27,3 +27,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "diff --git a/etcdctl/ctlv3/command/migrate_command.go b/etcdctl/ctlv3/command/migrate_command.go",
                "index b392bbd52..4b08df35e 100644",
                "--- a/etcdctl/ctlv3/command/migrate_command.go",
                "+++ b/etcdctl/ctlv3/command/migrate_command.go",
                "@@ -33,5 +33,5 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/pkg/pbutil\"",
                "diff --git a/etcdctl/ctlv3/command/printer_fields.go b/etcdctl/ctlv3/command/printer_fields.go",
                "index e8dbe3da2..7351aa739 100644",
                "--- a/etcdctl/ctlv3/command/printer_fields.go",
                "+++ b/etcdctl/ctlv3/command/printer_fields.go",
                "@@ -21,3 +21,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\tspb \"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\tspb \"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/snapshot\"",
                "diff --git a/etcdctl/ctlv3/command/printer_protobuf.go b/etcdctl/ctlv3/command/printer_protobuf.go",
                "index 3557331b7..c5109c5c2 100644",
                "--- a/etcdctl/ctlv3/command/printer_protobuf.go",
                "+++ b/etcdctl/ctlv3/command/printer_protobuf.go",
                "@@ -22,3 +22,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\tmvccpb \"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\tmvccpb \"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/etcdctl/ctlv3/command/util.go b/etcdctl/ctlv3/command/util.go",
                "index c47466677..92256bd59 100644",
                "--- a/etcdctl/ctlv3/command/util.go",
                "+++ b/etcdctl/ctlv3/command/util.go",
                "@@ -28,3 +28,3 @@ import (",
                " \tv3 \"github.com/coreos/etcd/clientv3\"",
                "-\tpb \"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\tpb \"github.com/coreos/etcd/mvcc/mvccpb\"",
                "diff --git a/etcdserver/api/v2v3/store.go b/etcdserver/api/v2v3/store.go",
                "index cb034895e..900dc1f69 100644",
                "--- a/etcdserver/api/v2v3/store.go",
                "+++ b/etcdserver/api/v2v3/store.go",
                "@@ -27,3 +27,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/etcdserver/api/v3election/v3electionpb/v3election.pb.go b/etcdserver/api/v3election/v3electionpb/v3election.pb.go",
                "index b097f7401..bddd73137 100644",
                "--- a/etcdserver/api/v3election/v3electionpb/v3election.pb.go",
                "+++ b/etcdserver/api/v3election/v3electionpb/v3election.pb.go",
                "@@ -33,3 +33,3 @@ import (",
                "-\tmvccpb \"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\tmvccpb \"github.com/coreos/etcd/mvcc/mvccpb\"",
                "diff --git a/etcdserver/api/v3rpc/maintenance.go b/etcdserver/api/v3rpc/maintenance.go",
                "index dc40bedca..0f86bc0b8 100644",
                "--- a/etcdserver/api/v3rpc/maintenance.go",
                "+++ b/etcdserver/api/v3rpc/maintenance.go",
                "@@ -25,4 +25,4 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "diff --git a/etcdserver/api/v3rpc/util.go b/etcdserver/api/v3rpc/util.go",
                "index e645918d2..328135b1e 100644",
                "--- a/etcdserver/api/v3rpc/util.go",
                "+++ b/etcdserver/api/v3rpc/util.go",
                "@@ -24,4 +24,4 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "diff --git a/etcdserver/api/v3rpc/util_test.go b/etcdserver/api/v3rpc/util_test.go",
                "index ddc0858e2..8890b1d4f 100644",
                "--- a/etcdserver/api/v3rpc/util_test.go",
                "+++ b/etcdserver/api/v3rpc/util_test.go",
                "@@ -22,3 +22,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "diff --git a/etcdserver/api/v3rpc/watch.go b/etcdserver/api/v3rpc/watch.go",
                "index 45ce6bff0..25a5c9e7c 100644",
                "--- a/etcdserver/api/v3rpc/watch.go",
                "+++ b/etcdserver/api/v3rpc/watch.go",
                "@@ -27,4 +27,4 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/etcdserver/apply.go b/etcdserver/apply.go",
                "index 9ca815e95..5be2ec0e7 100644",
                "--- a/etcdserver/apply.go",
                "+++ b/etcdserver/apply.go",
                "@@ -24,5 +24,5 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "diff --git a/etcdserver/apply_auth.go b/etcdserver/apply_auth.go",
                "index c46eaefd8..ec9391435 100644",
                "--- a/etcdserver/apply_auth.go",
                "+++ b/etcdserver/apply_auth.go",
                "@@ -21,4 +21,4 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                " )",
                "diff --git a/etcdserver/backend.go b/etcdserver/backend.go",
                "index 3b1030444..97e780980 100644",
                "--- a/etcdserver/backend.go",
                "+++ b/etcdserver/backend.go",
                "@@ -21,5 +21,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "diff --git a/etcdserver/corrupt.go b/etcdserver/corrupt.go",
                "index acd57a656..d998ec590 100644",
                "--- a/etcdserver/corrupt.go",
                "+++ b/etcdserver/corrupt.go",
                "@@ -24,3 +24,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "diff --git a/etcdserver/etcdserverpb/rpc.pb.go b/etcdserver/etcdserverpb/rpc.pb.go",
                "index d36060ec1..f25e9a561 100644",
                "--- a/etcdserver/etcdserverpb/rpc.pb.go",
                "+++ b/etcdserver/etcdserverpb/rpc.pb.go",
                "@@ -14,3 +14,3 @@ import (",
                "-\tmvccpb \"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\tmvccpb \"github.com/coreos/etcd/mvcc/mvccpb\"",
                "diff --git a/etcdserver/membership/cluster.go b/etcdserver/membership/cluster.go",
                "index 55337b859..dccfa17f4 100644",
                "--- a/etcdserver/membership/cluster.go",
                "+++ b/etcdserver/membership/cluster.go",
                "@@ -30,3 +30,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/netutil\"",
                "diff --git a/etcdserver/membership/store.go b/etcdserver/membership/store.go",
                "index 1740c4534..3106aca37 100644",
                "--- a/etcdserver/membership/store.go",
                "+++ b/etcdserver/membership/store.go",
                "@@ -22,3 +22,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 134e4ab75..473594a81 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -41,6 +41,6 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/lease/leasehttp\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "diff --git a/etcdserver/server_test.go b/etcdserver/server_test.go",
                "index 9facd7ecf..e1bab47d0 100644",
                "--- a/etcdserver/server_test.go",
                "+++ b/etcdserver/server_test.go",
                "@@ -31,6 +31,6 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/internal/store\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "diff --git a/etcdserver/snapshot_merge.go b/etcdserver/snapshot_merge.go",
                "index 05d6f4f78..7fe852dda 100644",
                "--- a/etcdserver/snapshot_merge.go",
                "+++ b/etcdserver/snapshot_merge.go",
                "@@ -19,3 +19,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "diff --git a/etcdserver/v3_server.go b/etcdserver/v3_server.go",
                "index 975383b66..b3f773274 100644",
                "--- a/etcdserver/v3_server.go",
                "+++ b/etcdserver/v3_server.go",
                "@@ -25,5 +25,5 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                " \t\"github.com/coreos/etcd/lease\"",
                " \t\"github.com/coreos/etcd/lease/leasehttp\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                " \t\"github.com/coreos/etcd/raft\"",
                "diff --git a/integration/v3_alarm_test.go b/integration/v3_alarm_test.go",
                "index 6a1fe0a92..0dbaf6b7f 100644",
                "--- a/integration/v3_alarm_test.go",
                "+++ b/integration/v3_alarm_test.go",
                "@@ -26,4 +26,4 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/integration/v3_lease_test.go b/integration/v3_lease_test.go",
                "index 85e5c2f77..7ec2d3c76 100644",
                "--- a/integration/v3_lease_test.go",
                "+++ b/integration/v3_lease_test.go",
                "@@ -24,3 +24,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/integration/v3_lock_test.go b/integration/v3_lock_test.go",
                "index c9b00b7c1..889a6ef1f 100644",
                "--- a/integration/v3_lock_test.go",
                "+++ b/integration/v3_lock_test.go",
                "@@ -26,3 +26,3 @@ import (",
                " \t\"github.com/coreos/etcd/contrib/recipes\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/integration/v3_watch_test.go b/integration/v3_watch_test.go",
                "index b6d7cfe67..c91f4df65 100644",
                "--- a/integration/v3_watch_test.go",
                "+++ b/integration/v3_watch_test.go",
                "@@ -28,3 +28,3 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "diff --git a/lease/leasehttp/http_test.go b/lease/leasehttp/http_test.go",
                "index ba545b272..367cd8e64 100644",
                "--- a/lease/leasehttp/http_test.go",
                "+++ b/lease/leasehttp/http_test.go",
                "@@ -25,4 +25,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " )",
                "diff --git a/lease/lessor.go b/lease/lessor.go",
                "index d3dda9bdc..29a012416 100644",
                "--- a/lease/lessor.go",
                "+++ b/lease/lessor.go",
                "@@ -24,4 +24,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/lease/leasepb\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " )",
                "diff --git a/lease/lessor_test.go b/lease/lessor_test.go",
                "index 3c6b9d181..3f6a5ce50 100644",
                "--- a/lease/lessor_test.go",
                "+++ b/lease/lessor_test.go",
                "@@ -27,3 +27,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " )",
                "diff --git a/mvcc/backend/backend.go b/mvcc/backend/backend.go",
                "new file mode 100644",
                "index 000000000..bdc8a0d0f",
                "--- /dev/null",
                "+++ b/mvcc/backend/backend.go",
                "@@ -0,0 +1,458 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package backend",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"hash/crc32\"",
                "+\t\"io\"",
                "+\t\"io/ioutil\"",
                "+\t\"os\"",
                "+\t\"path/filepath\"",
                "+\t\"sync\"",
                "+\t\"sync/atomic\"",
                "+\t\"time\"",
                "+",
                "+\tbolt \"github.com/coreos/bbolt\"",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+)",
                "+",
                "+var (",
                "+\tdefaultBatchLimit    = 10000",
                "+\tdefaultBatchInterval = 100 * time.Millisecond",
                "+",
                "+\tdefragLimit = 10000",
                "+",
                "+\t// initialMmapSize is the initial size of the mmapped region. Setting this larger than",
                "+\t// the potential max db size can prevent writer from blocking reader.",
                "+\t// This only works for linux.",
                "+\tinitialMmapSize = uint64(10 * 1024 * 1024 * 1024)",
                "+",
                "+\tplog = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"mvcc/backend\")",
                "+",
                "+\t// minSnapshotWarningTimeout is the minimum threshold to trigger a long running snapshot warning.",
                "+\tminSnapshotWarningTimeout = time.Duration(30 * time.Second)",
                "+)",
                "+",
                "+type Backend interface {",
                "+\tReadTx() ReadTx",
                "+\tBatchTx() BatchTx",
                "+",
                "+\tSnapshot() Snapshot",
                "+\tHash(ignores map[IgnoreKey]struct{}) (uint32, error)",
                "+\t// Size returns the current size of the backend physically allocated.",
                "+\t// The backend can hold DB space that is not utilized at the moment,",
                "+\t// since it can conduct pre-allocation or spare unused space for recycling.",
                "+\t// Use SizeInUse() instead for the actual DB size.",
                "+\tSize() int64",
                "+\t// SizeInUse returns the current size of the backend logically in use.",
                "+\t// Since the backend can manage free space in a non-byte unit such as",
                "+\t// number of pages, the returned value can be not exactly accurate in bytes.",
                "+\tSizeInUse() int64",
                "+\tDefrag() error",
                "+\tForceCommit()",
                "+\tClose() error",
                "+}",
                "+",
                "+type Snapshot interface {",
                "+\t// Size gets the size of the snapshot.",
                "+\tSize() int64",
                "+\t// WriteTo writes the snapshot into the given writer.",
                "+\tWriteTo(w io.Writer) (n int64, err error)",
                "+\t// Close closes the snapshot.",
                "+\tClose() error",
                "+}",
                "+",
                "+type backend struct {",
                "+\t// size and commits are used with atomic operations so they must be",
                "+\t// 64-bit aligned, otherwise 32-bit tests will crash",
                "+",
                "+\t// size is the number of bytes allocated in the backend",
                "+\tsize int64",
                "+\t// sizeInUse is the number of bytes actually used in the backend",
                "+\tsizeInUse int64",
                "+\t// commits counts number of commits since start",
                "+\tcommits int64",
                "+",
                "+\tmu sync.RWMutex",
                "+\tdb *bolt.DB",
                "+",
                "+\tbatchInterval time.Duration",
                "+\tbatchLimit    int",
                "+\tbatchTx       *batchTxBuffered",
                "+",
                "+\treadTx *readTx",
                "+",
                "+\tstopc chan struct{}",
                "+\tdonec chan struct{}",
                "+}",
                "+",
                "+type BackendConfig struct {",
                "+\t// Path is the file path to the backend file.",
                "+\tPath string",
                "+\t// BatchInterval is the maximum time before flushing the BatchTx.",
                "+\tBatchInterval time.Duration",
                "+\t// BatchLimit is the maximum puts before flushing the BatchTx.",
                "+\tBatchLimit int",
                "+\t// MmapSize is the number of bytes to mmap for the backend.",
                "+\tMmapSize uint64",
                "+}",
                "+",
                "+func DefaultBackendConfig() BackendConfig {",
                "+\treturn BackendConfig{",
                "+\t\tBatchInterval: defaultBatchInterval,",
                "+\t\tBatchLimit:    defaultBatchLimit,",
                "+\t\tMmapSize:      initialMmapSize,",
                "+\t}",
                "+}",
                "+",
                "+func New(bcfg BackendConfig) Backend {",
                "+\treturn newBackend(bcfg)",
                "+}",
                "+",
                "+func NewDefaultBackend(path string) Backend {",
                "+\tbcfg := DefaultBackendConfig()",
                "+\tbcfg.Path = path",
                "+\treturn newBackend(bcfg)",
                "+}",
                "+",
                "+func newBackend(bcfg BackendConfig) *backend {",
                "+\tbopts := &bolt.Options{}",
                "+\tif boltOpenOptions != nil {",
                "+\t\t*bopts = *boltOpenOptions",
                "+\t}",
                "+\tbopts.InitialMmapSize = bcfg.mmapSize()",
                "+",
                "+\tdb, err := bolt.Open(bcfg.Path, 0600, bopts)",
                "+\tif err != nil {",
                "+\t\tplog.Panicf(\"cannot open database at %s (%v)\", bcfg.Path, err)",
                "+\t}",
                "+",
                "+\t// In future, may want to make buffering optional for low-concurrency systems",
                "+\t// or dynamically swap between buffered/non-buffered depending on workload.",
                "+\tb := &backend{",
                "+\t\tdb: db,",
                "+",
                "+\t\tbatchInterval: bcfg.BatchInterval,",
                "+\t\tbatchLimit:    bcfg.BatchLimit,",
                "+",
                "+\t\treadTx: &readTx{",
                "+\t\t\tbuf: txReadBuffer{",
                "+\t\t\t\ttxBuffer: txBuffer{make(map[string]*bucketBuffer)},",
                "+\t\t\t},",
                "+\t\t\tbuckets: make(map[string]*bolt.Bucket),",
                "+\t\t},",
                "+",
                "+\t\tstopc: make(chan struct{}),",
                "+\t\tdonec: make(chan struct{}),",
                "+\t}",
                "+\tb.batchTx = newBatchTxBuffered(b)",
                "+\tgo b.run()",
                "+\treturn b",
                "+}",
                "+",
                "+// BatchTx returns the current batch tx in coalescer. The tx can be used for read and",
                "+// write operations. The write result can be retrieved within the same tx immediately.",
                "+// The write result is isolated with other txs until the current one get committed.",
                "+func (b *backend) BatchTx() BatchTx {",
                "+\treturn b.batchTx",
                "+}",
                "+",
                "+func (b *backend) ReadTx() ReadTx { return b.readTx }",
                "+",
                "+// ForceCommit forces the current batching tx to commit.",
                "+func (b *backend) ForceCommit() {",
                "+\tb.batchTx.Commit()",
                "+}",
                "+",
                "+func (b *backend) Snapshot() Snapshot {",
                "+\tb.batchTx.Commit()",
                "+",
                "+\tb.mu.RLock()",
                "+\tdefer b.mu.RUnlock()",
                "+\ttx, err := b.db.Begin(false)",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot begin tx (%s)\", err)",
                "+\t}",
                "+",
                "+\tstopc, donec := make(chan struct{}), make(chan struct{})",
                "+\tdbBytes := tx.Size()",
                "+\tgo func() {",
                "+\t\tdefer close(donec)",
                "+\t\t// sendRateBytes is based on transferring snapshot data over a 1 gigabit/s connection",
                "+\t\t// assuming a min tcp throughput of 100MB/s.",
                "+\t\tvar sendRateBytes int64 = 100 * 1024 * 1014",
                "+\t\twarningTimeout := time.Duration(int64((float64(dbBytes) / float64(sendRateBytes)) * float64(time.Second)))",
                "+\t\tif warningTimeout < minSnapshotWarningTimeout {",
                "+\t\t\twarningTimeout = minSnapshotWarningTimeout",
                "+\t\t}",
                "+\t\tstart := time.Now()",
                "+\t\tticker := time.NewTicker(warningTimeout)",
                "+\t\tdefer ticker.Stop()",
                "+\t\tfor {",
                "+\t\t\tselect {",
                "+\t\t\tcase <-ticker.C:",
                "+\t\t\t\tplog.Warningf(\"snapshotting is taking more than %v seconds to finish transferring %v MB [started at %v]\", time.Since(start).Seconds(), float64(dbBytes)/float64(1024*1014), start)",
                "+\t\t\tcase <-stopc:",
                "+\t\t\t\tsnapshotDurations.Observe(time.Since(start).Seconds())",
                "+\t\t\t\treturn",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}()",
                "+",
                "+\treturn &snapshot{tx, stopc, donec}",
                "+}",
                "+",
                "+type IgnoreKey struct {",
                "+\tBucket string",
                "+\tKey    string",
                "+}",
                "+",
                "+func (b *backend) Hash(ignores map[IgnoreKey]struct{}) (uint32, error) {",
                "+\th := crc32.New(crc32.MakeTable(crc32.Castagnoli))",
                "+",
                "+\tb.mu.RLock()",
                "+\tdefer b.mu.RUnlock()",
                "+\terr := b.db.View(func(tx *bolt.Tx) error {",
                "+\t\tc := tx.Cursor()",
                "+\t\tfor next, _ := c.First(); next != nil; next, _ = c.Next() {",
                "+\t\t\tb := tx.Bucket(next)",
                "+\t\t\tif b == nil {",
                "+\t\t\t\treturn fmt.Errorf(\"cannot get hash of bucket %s\", string(next))",
                "+\t\t\t}",
                "+\t\t\th.Write(next)",
                "+\t\t\tb.ForEach(func(k, v []byte) error {",
                "+\t\t\t\tbk := IgnoreKey{Bucket: string(next), Key: string(k)}",
                "+\t\t\t\tif _, ok := ignores[bk]; !ok {",
                "+\t\t\t\t\th.Write(k)",
                "+\t\t\t\t\th.Write(v)",
                "+\t\t\t\t}",
                "+\t\t\t\treturn nil",
                "+\t\t\t})",
                "+\t\t}",
                "+\t\treturn nil",
                "+\t})",
                "+",
                "+\tif err != nil {",
                "+\t\treturn 0, err",
                "+\t}",
                "+",
                "+\treturn h.Sum32(), nil",
                "+}",
                "+",
                "+func (b *backend) Size() int64 {",
                "+\treturn atomic.LoadInt64(&b.size)",
                "+}",
                "+",
                "+func (b *backend) SizeInUse() int64 {",
                "+\treturn atomic.LoadInt64(&b.sizeInUse)",
                "+}",
                "+",
                "+func (b *backend) run() {",
                "+\tdefer close(b.donec)",
                "+\tt := time.NewTimer(b.batchInterval)",
                "+\tdefer t.Stop()",
                "+\tfor {",
                "+\t\tselect {",
                "+\t\tcase <-t.C:",
                "+\t\tcase <-b.stopc:",
                "+\t\t\tb.batchTx.CommitAndStop()",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tif b.batchTx.safePending() != 0 {",
                "+\t\t\tb.batchTx.Commit()",
                "+\t\t}",
                "+\t\tt.Reset(b.batchInterval)",
                "+\t}",
                "+}",
                "+",
                "+func (b *backend) Close() error {",
                "+\tclose(b.stopc)",
                "+\t<-b.donec",
                "+\treturn b.db.Close()",
                "+}",
                "+",
                "+// Commits returns total number of commits since start",
                "+func (b *backend) Commits() int64 {",
                "+\treturn atomic.LoadInt64(&b.commits)",
                "+}",
                "+",
                "+func (b *backend) Defrag() error {",
                "+\treturn b.defrag()",
                "+}",
                "+",
                "+func (b *backend) defrag() error {",
                "+\t// TODO: make this non-blocking?",
                "+\t// lock batchTx to ensure nobody is using previous tx, and then",
                "+\t// close previous ongoing tx.",
                "+\tb.batchTx.Lock()",
                "+\tdefer b.batchTx.Unlock()",
                "+",
                "+\t// lock database after lock tx to avoid deadlock.",
                "+\tb.mu.Lock()",
                "+\tdefer b.mu.Unlock()",
                "+",
                "+\tb.batchTx.commit(true)",
                "+\tb.batchTx.tx = nil",
                "+",
                "+\ttmpdb, err := bolt.Open(b.db.Path()+\".tmp\", 0600, boltOpenOptions)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\terr = defragdb(b.db, tmpdb, defragLimit)",
                "+",
                "+\tif err != nil {",
                "+\t\ttmpdb.Close()",
                "+\t\tos.RemoveAll(tmpdb.Path())",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tdbp := b.db.Path()",
                "+\ttdbp := tmpdb.Path()",
                "+",
                "+\terr = b.db.Close()",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot close database (%s)\", err)",
                "+\t}",
                "+\terr = tmpdb.Close()",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot close database (%s)\", err)",
                "+\t}",
                "+\terr = os.Rename(tdbp, dbp)",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot rename database (%s)\", err)",
                "+\t}",
                "+",
                "+\tb.db, err = bolt.Open(dbp, 0600, boltOpenOptions)",
                "+\tif err != nil {",
                "+\t\tplog.Panicf(\"cannot open database at %s (%v)\", dbp, err)",
                "+\t}",
                "+\tb.batchTx.tx, err = b.db.Begin(true)",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot begin tx (%s)\", err)",
                "+\t}",
                "+",
                "+\tb.readTx.reset()",
                "+\tb.readTx.tx = b.unsafeBegin(false)",
                "+",
                "+\tsize := b.readTx.tx.Size()",
                "+\tdb := b.readTx.tx.DB()",
                "+\tatomic.StoreInt64(&b.size, size)",
                "+\tatomic.StoreInt64(&b.sizeInUse, size-(int64(db.Stats().FreePageN)*int64(db.Info().PageSize)))",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func defragdb(odb, tmpdb *bolt.DB, limit int) error {",
                "+\t// open a tx on tmpdb for writes",
                "+\ttmptx, err := tmpdb.Begin(true)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\t// open a tx on old db for read",
                "+\ttx, err := odb.Begin(false)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\tdefer tx.Rollback()",
                "+",
                "+\tc := tx.Cursor()",
                "+",
                "+\tcount := 0",
                "+\tfor next, _ := c.First(); next != nil; next, _ = c.Next() {",
                "+\t\tb := tx.Bucket(next)",
                "+\t\tif b == nil {",
                "+\t\t\treturn fmt.Errorf(\"backend: cannot defrag bucket %s\", string(next))",
                "+\t\t}",
                "+",
                "+\t\ttmpb, berr := tmptx.CreateBucketIfNotExists(next)",
                "+\t\tif berr != nil {",
                "+\t\t\treturn berr",
                "+\t\t}",
                "+\t\ttmpb.FillPercent = 0.9 // for seq write in for each",
                "+",
                "+\t\tb.ForEach(func(k, v []byte) error {",
                "+\t\t\tcount++",
                "+\t\t\tif count > limit {",
                "+\t\t\t\terr = tmptx.Commit()",
                "+\t\t\t\tif err != nil {",
                "+\t\t\t\t\treturn err",
                "+\t\t\t\t}",
                "+\t\t\t\ttmptx, err = tmpdb.Begin(true)",
                "+\t\t\t\tif err != nil {",
                "+\t\t\t\t\treturn err",
                "+\t\t\t\t}",
                "+\t\t\t\ttmpb = tmptx.Bucket(next)",
                "+\t\t\t\ttmpb.FillPercent = 0.9 // for seq write in for each",
                "+",
                "+\t\t\t\tcount = 0",
                "+\t\t\t}",
                "+\t\t\treturn tmpb.Put(k, v)",
                "+\t\t})",
                "+\t}",
                "+",
                "+\treturn tmptx.Commit()",
                "+}",
                "+",
                "+func (b *backend) begin(write bool) *bolt.Tx {",
                "+\tb.mu.RLock()",
                "+\ttx := b.unsafeBegin(write)",
                "+\tb.mu.RUnlock()",
                "+",
                "+\tsize := tx.Size()",
                "+\tdb := tx.DB()",
                "+\tatomic.StoreInt64(&b.size, size)",
                "+\tatomic.StoreInt64(&b.sizeInUse, size-(int64(db.Stats().FreePageN)*int64(db.Info().PageSize)))",
                "+",
                "+\treturn tx",
                "+}",
                "+",
                "+func (b *backend) unsafeBegin(write bool) *bolt.Tx {",
                "+\ttx, err := b.db.Begin(write)",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot begin tx (%s)\", err)",
                "+\t}",
                "+\treturn tx",
                "+}",
                "+",
                "+// NewTmpBackend creates a backend implementation for testing.",
                "+func NewTmpBackend(batchInterval time.Duration, batchLimit int) (*backend, string) {",
                "+\tdir, err := ioutil.TempDir(os.TempDir(), \"etcd_backend_test\")",
                "+\tif err != nil {",
                "+\t\tplog.Fatal(err)",
                "+\t}",
                "+\ttmpPath := filepath.Join(dir, \"database\")",
                "+\tbcfg := DefaultBackendConfig()",
                "+\tbcfg.Path, bcfg.BatchInterval, bcfg.BatchLimit = tmpPath, batchInterval, batchLimit",
                "+\treturn newBackend(bcfg), tmpPath",
                "+}",
                "+",
                "+func NewDefaultTmpBackend() (*backend, string) {",
                "+\treturn NewTmpBackend(defaultBatchInterval, defaultBatchLimit)",
                "+}",
                "+",
                "+type snapshot struct {",
                "+\t*bolt.Tx",
                "+\tstopc chan struct{}",
                "+\tdonec chan struct{}",
                "+}",
                "+",
                "+func (s *snapshot) Close() error {",
                "+\tclose(s.stopc)",
                "+\t<-s.donec",
                "+\treturn s.Tx.Rollback()",
                "+}",
                "diff --git a/mvcc/backend/backend_bench_test.go b/mvcc/backend/backend_bench_test.go",
                "new file mode 100644",
                "index 000000000..30b47516f",
                "--- /dev/null",
                "+++ b/mvcc/backend/backend_bench_test.go",
                "@@ -0,0 +1,50 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package backend",
                "+",
                "+import (",
                "+\t\"crypto/rand\"",
                "+\t\"os\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+)",
                "+",
                "+func BenchmarkBackendPut(b *testing.B) {",
                "+\tbackend, tmppath := NewTmpBackend(100*time.Millisecond, 10000)",
                "+\tdefer backend.Close()",
                "+\tdefer os.Remove(tmppath)",
                "+",
                "+\t// prepare keys",
                "+\tkeys := make([][]byte, b.N)",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\tkeys[i] = make([]byte, 64)",
                "+\t\trand.Read(keys[i])",
                "+\t}",
                "+\tvalue := make([]byte, 128)",
                "+\trand.Read(value)",
                "+",
                "+\tbatchTx := backend.BatchTx()",
                "+",
                "+\tbatchTx.Lock()",
                "+\tbatchTx.UnsafeCreateBucket([]byte(\"test\"))",
                "+\tbatchTx.Unlock()",
                "+",
                "+\tb.ResetTimer()",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\tbatchTx.Lock()",
                "+\t\tbatchTx.UnsafePut([]byte(\"test\"), keys[i], value)",
                "+\t\tbatchTx.Unlock()",
                "+\t}",
                "+}",
                "diff --git a/mvcc/backend/backend_test.go b/mvcc/backend/backend_test.go",
                "new file mode 100644",
                "index 000000000..9bdec5c48",
                "--- /dev/null",
                "+++ b/mvcc/backend/backend_test.go",
                "@@ -0,0 +1,306 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package backend",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"io/ioutil\"",
                "+\t\"os\"",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\tbolt \"github.com/coreos/bbolt\"",
                "+)",
                "+",
                "+func TestBackendClose(t *testing.T) {",
                "+\tb, tmpPath := NewTmpBackend(time.Hour, 10000)",
                "+\tdefer os.Remove(tmpPath)",
                "+",
                "+\t// check close could work",
                "+\tdone := make(chan struct{})",
                "+\tgo func() {",
                "+\t\terr := b.Close()",
                "+\t\tif err != nil {",
                "+\t\t\tt.Errorf(\"close error = %v, want nil\", err)",
                "+\t\t}",
                "+\t\tdone <- struct{}{}",
                "+\t}()",
                "+\tselect {",
                "+\tcase <-done:",
                "+\tcase <-time.After(10 * time.Second):",
                "+\t\tt.Errorf(\"failed to close database in 10s\")",
                "+\t}",
                "+}",
                "+",
                "+func TestBackendSnapshot(t *testing.T) {",
                "+\tb, tmpPath := NewTmpBackend(time.Hour, 10000)",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\ttx := b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket([]byte(\"test\"))",
                "+\ttx.UnsafePut([]byte(\"test\"), []byte(\"foo\"), []byte(\"bar\"))",
                "+\ttx.Unlock()",
                "+\tb.ForceCommit()",
                "+",
                "+\t// write snapshot to a new file",
                "+\tf, err := ioutil.TempFile(os.TempDir(), \"etcd_backend_test\")",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tsnap := b.Snapshot()",
                "+\tdefer snap.Close()",
                "+\tif _, err := snap.WriteTo(f); err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tf.Close()",
                "+",
                "+\t// bootstrap new backend from the snapshot",
                "+\tbcfg := DefaultBackendConfig()",
                "+\tbcfg.Path, bcfg.BatchInterval, bcfg.BatchLimit = f.Name(), time.Hour, 10000",
                "+\tnb := New(bcfg)",
                "+\tdefer cleanup(nb, f.Name())",
                "+",
                "+\tnewTx := b.BatchTx()",
                "+\tnewTx.Lock()",
                "+\tks, _ := newTx.UnsafeRange([]byte(\"test\"), []byte(\"foo\"), []byte(\"goo\"), 0)",
                "+\tif len(ks) != 1 {",
                "+\t\tt.Errorf(\"len(kvs) = %d, want 1\", len(ks))",
                "+\t}",
                "+\tnewTx.Unlock()",
                "+}",
                "+",
                "+func TestBackendBatchIntervalCommit(t *testing.T) {",
                "+\t// start backend with super short batch interval so",
                "+\t// we do not need to wait long before commit to happen.",
                "+\tb, tmpPath := NewTmpBackend(time.Nanosecond, 10000)",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\tpc := b.Commits()",
                "+",
                "+\ttx := b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket([]byte(\"test\"))",
                "+\ttx.UnsafePut([]byte(\"test\"), []byte(\"foo\"), []byte(\"bar\"))",
                "+\ttx.Unlock()",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tif b.Commits() >= pc+1 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\ttime.Sleep(time.Duration(i*100) * time.Millisecond)",
                "+\t}",
                "+",
                "+\t// check whether put happens via db view",
                "+\tb.db.View(func(tx *bolt.Tx) error {",
                "+\t\tbucket := tx.Bucket([]byte(\"test\"))",
                "+\t\tif bucket == nil {",
                "+\t\t\tt.Errorf(\"bucket test does not exit\")",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\tv := bucket.Get([]byte(\"foo\"))",
                "+\t\tif v == nil {",
                "+\t\t\tt.Errorf(\"foo key failed to written in backend\")",
                "+\t\t}",
                "+\t\treturn nil",
                "+\t})",
                "+}",
                "+",
                "+func TestBackendDefrag(t *testing.T) {",
                "+\tb, tmpPath := NewDefaultTmpBackend()",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\ttx := b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket([]byte(\"test\"))",
                "+\tfor i := 0; i < defragLimit+100; i++ {",
                "+\t\ttx.UnsafePut([]byte(\"test\"), []byte(fmt.Sprintf(\"foo_%d\", i)), []byte(\"bar\"))",
                "+\t}",
                "+\ttx.Unlock()",
                "+\tb.ForceCommit()",
                "+",
                "+\t// remove some keys to ensure the disk space will be reclaimed after defrag",
                "+\ttx = b.BatchTx()",
                "+\ttx.Lock()",
                "+\tfor i := 0; i < 50; i++ {",
                "+\t\ttx.UnsafeDelete([]byte(\"test\"), []byte(fmt.Sprintf(\"foo_%d\", i)))",
                "+\t}",
                "+\ttx.Unlock()",
                "+\tb.ForceCommit()",
                "+",
                "+\tsize := b.Size()",
                "+",
                "+\t// shrink and check hash",
                "+\toh, err := b.Hash(nil)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\terr = b.Defrag()",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tnh, err := b.Hash(nil)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif oh != nh {",
                "+\t\tt.Errorf(\"hash = %v, want %v\", nh, oh)",
                "+\t}",
                "+",
                "+\tnsize := b.Size()",
                "+\tif nsize >= size {",
                "+\t\tt.Errorf(\"new size = %v, want < %d\", nsize, size)",
                "+\t}",
                "+",
                "+\t// try put more keys after shrink.",
                "+\ttx = b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket([]byte(\"test\"))",
                "+\ttx.UnsafePut([]byte(\"test\"), []byte(\"more\"), []byte(\"bar\"))",
                "+\ttx.Unlock()",
                "+\tb.ForceCommit()",
                "+}",
                "+",
                "+// TestBackendWriteback ensures writes are stored to the read txn on write txn unlock.",
                "+func TestBackendWriteback(t *testing.T) {",
                "+\tb, tmpPath := NewDefaultTmpBackend()",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\ttx := b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket([]byte(\"key\"))",
                "+\ttx.UnsafePut([]byte(\"key\"), []byte(\"abc\"), []byte(\"bar\"))",
                "+\ttx.UnsafePut([]byte(\"key\"), []byte(\"def\"), []byte(\"baz\"))",
                "+\ttx.UnsafePut([]byte(\"key\"), []byte(\"overwrite\"), []byte(\"1\"))",
                "+\ttx.Unlock()",
                "+",
                "+\t// overwrites should be propagated too",
                "+\ttx.Lock()",
                "+\ttx.UnsafePut([]byte(\"key\"), []byte(\"overwrite\"), []byte(\"2\"))",
                "+\ttx.Unlock()",
                "+",
                "+\tkeys := []struct {",
                "+\t\tkey   []byte",
                "+\t\tend   []byte",
                "+\t\tlimit int64",
                "+",
                "+\t\twkey [][]byte",
                "+\t\twval [][]byte",
                "+\t}{",
                "+\t\t{",
                "+\t\t\tkey: []byte(\"abc\"),",
                "+\t\t\tend: nil,",
                "+",
                "+\t\t\twkey: [][]byte{[]byte(\"abc\")},",
                "+\t\t\twval: [][]byte{[]byte(\"bar\")},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tkey: []byte(\"abc\"),",
                "+\t\t\tend: []byte(\"def\"),",
                "+",
                "+\t\t\twkey: [][]byte{[]byte(\"abc\")},",
                "+\t\t\twval: [][]byte{[]byte(\"bar\")},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tkey: []byte(\"abc\"),",
                "+\t\t\tend: []byte(\"deg\"),",
                "+",
                "+\t\t\twkey: [][]byte{[]byte(\"abc\"), []byte(\"def\")},",
                "+\t\t\twval: [][]byte{[]byte(\"bar\"), []byte(\"baz\")},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tkey:   []byte(\"abc\"),",
                "+\t\t\tend:   []byte(\"\\xff\"),",
                "+\t\t\tlimit: 1,",
                "+",
                "+\t\t\twkey: [][]byte{[]byte(\"abc\")},",
                "+\t\t\twval: [][]byte{[]byte(\"bar\")},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tkey: []byte(\"abc\"),",
                "+\t\t\tend: []byte(\"\\xff\"),",
                "+",
                "+\t\t\twkey: [][]byte{[]byte(\"abc\"), []byte(\"def\"), []byte(\"overwrite\")},",
                "+\t\t\twval: [][]byte{[]byte(\"bar\"), []byte(\"baz\"), []byte(\"2\")},",
                "+\t\t},",
                "+\t}",
                "+\trtx := b.ReadTx()",
                "+\tfor i, tt := range keys {",
                "+\t\trtx.Lock()",
                "+\t\tk, v := rtx.UnsafeRange([]byte(\"key\"), tt.key, tt.end, tt.limit)",
                "+\t\trtx.Unlock()",
                "+\t\tif !reflect.DeepEqual(tt.wkey, k) || !reflect.DeepEqual(tt.wval, v) {",
                "+\t\t\tt.Errorf(\"#%d: want k=%+v, v=%+v; got k=%+v, v=%+v\", i, tt.wkey, tt.wval, k, v)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// TestBackendWritebackForEach checks that partially written / buffered",
                "+// data is visited in the same order as fully committed data.",
                "+func TestBackendWritebackForEach(t *testing.T) {",
                "+\tb, tmpPath := NewTmpBackend(time.Hour, 10000)",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\ttx := b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket([]byte(\"key\"))",
                "+\tfor i := 0; i < 5; i++ {",
                "+\t\tk := []byte(fmt.Sprintf(\"%04d\", i))",
                "+\t\ttx.UnsafePut([]byte(\"key\"), k, []byte(\"bar\"))",
                "+\t}",
                "+\ttx.Unlock()",
                "+",
                "+\t// writeback",
                "+\tb.ForceCommit()",
                "+",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket([]byte(\"key\"))",
                "+\tfor i := 5; i < 20; i++ {",
                "+\t\tk := []byte(fmt.Sprintf(\"%04d\", i))",
                "+\t\ttx.UnsafePut([]byte(\"key\"), k, []byte(\"bar\"))",
                "+\t}",
                "+\ttx.Unlock()",
                "+",
                "+\tseq := \"\"",
                "+\tgetSeq := func(k, v []byte) error {",
                "+\t\tseq += string(k)",
                "+\t\treturn nil",
                "+\t}",
                "+\trtx := b.ReadTx()",
                "+\trtx.Lock()",
                "+\trtx.UnsafeForEach([]byte(\"key\"), getSeq)",
                "+\trtx.Unlock()",
                "+",
                "+\tpartialSeq := seq",
                "+",
                "+\tseq = \"\"",
                "+\tb.ForceCommit()",
                "+",
                "+\ttx.Lock()",
                "+\ttx.UnsafeForEach([]byte(\"key\"), getSeq)",
                "+\ttx.Unlock()",
                "+",
                "+\tif seq != partialSeq {",
                "+\t\tt.Fatalf(\"expected %q, got %q\", seq, partialSeq)",
                "+\t}",
                "+}",
                "+",
                "+func cleanup(b Backend, path string) {",
                "+\tb.Close()",
                "+\tos.Remove(path)",
                "+}",
                "diff --git a/mvcc/backend/batch_tx.go b/mvcc/backend/batch_tx.go",
                "new file mode 100644",
                "index 000000000..ceb0b1739",
                "--- /dev/null",
                "+++ b/mvcc/backend/batch_tx.go",
                "@@ -0,0 +1,259 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package backend",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"math\"",
                "+\t\"sync\"",
                "+\t\"sync/atomic\"",
                "+\t\"time\"",
                "+",
                "+\tbolt \"github.com/coreos/bbolt\"",
                "+)",
                "+",
                "+type BatchTx interface {",
                "+\tReadTx",
                "+\tUnsafeCreateBucket(name []byte)",
                "+\tUnsafePut(bucketName []byte, key []byte, value []byte)",
                "+\tUnsafeSeqPut(bucketName []byte, key []byte, value []byte)",
                "+\tUnsafeDelete(bucketName []byte, key []byte)",
                "+\t// Commit commits a previous tx and begins a new writable one.",
                "+\tCommit()",
                "+\t// CommitAndStop commits the previous tx and does not create a new one.",
                "+\tCommitAndStop()",
                "+}",
                "+",
                "+type batchTx struct {",
                "+\tsync.Mutex",
                "+\ttx      *bolt.Tx",
                "+\tbackend *backend",
                "+",
                "+\tpending int",
                "+}",
                "+",
                "+func (t *batchTx) UnsafeCreateBucket(name []byte) {",
                "+\t_, err := t.tx.CreateBucket(name)",
                "+\tif err != nil && err != bolt.ErrBucketExists {",
                "+\t\tplog.Fatalf(\"cannot create bucket %s (%v)\", name, err)",
                "+\t}",
                "+\tt.pending++",
                "+}",
                "+",
                "+// UnsafePut must be called holding the lock on the tx.",
                "+func (t *batchTx) UnsafePut(bucketName []byte, key []byte, value []byte) {",
                "+\tt.unsafePut(bucketName, key, value, false)",
                "+}",
                "+",
                "+// UnsafeSeqPut must be called holding the lock on the tx.",
                "+func (t *batchTx) UnsafeSeqPut(bucketName []byte, key []byte, value []byte) {",
                "+\tt.unsafePut(bucketName, key, value, true)",
                "+}",
                "+",
                "+func (t *batchTx) unsafePut(bucketName []byte, key []byte, value []byte, seq bool) {",
                "+\tbucket := t.tx.Bucket(bucketName)",
                "+\tif bucket == nil {",
                "+\t\tplog.Fatalf(\"bucket %s does not exist\", bucketName)",
                "+\t}",
                "+\tif seq {",
                "+\t\t// it is useful to increase fill percent when the workloads are mostly append-only.",
                "+\t\t// this can delay the page split and reduce space usage.",
                "+\t\tbucket.FillPercent = 0.9",
                "+\t}",
                "+\tif err := bucket.Put(key, value); err != nil {",
                "+\t\tplog.Fatalf(\"cannot put key into bucket (%v)\", err)",
                "+\t}",
                "+\tt.pending++",
                "+}",
                "+",
                "+// UnsafeRange must be called holding the lock on the tx.",
                "+func (t *batchTx) UnsafeRange(bucketName, key, endKey []byte, limit int64) ([][]byte, [][]byte) {",
                "+\tbucket := t.tx.Bucket(bucketName)",
                "+\tif bucket == nil {",
                "+\t\tplog.Fatalf(\"bucket %s does not exist\", bucketName)",
                "+\t}",
                "+\treturn unsafeRange(bucket.Cursor(), key, endKey, limit)",
                "+}",
                "+",
                "+func unsafeRange(c *bolt.Cursor, key, endKey []byte, limit int64) (keys [][]byte, vs [][]byte) {",
                "+\tif limit <= 0 {",
                "+\t\tlimit = math.MaxInt64",
                "+\t}",
                "+\tvar isMatch func(b []byte) bool",
                "+\tif len(endKey) > 0 {",
                "+\t\tisMatch = func(b []byte) bool { return bytes.Compare(b, endKey) < 0 }",
                "+\t} else {",
                "+\t\tisMatch = func(b []byte) bool { return bytes.Equal(b, key) }",
                "+\t\tlimit = 1",
                "+\t}",
                "+",
                "+\tfor ck, cv := c.Seek(key); ck != nil && isMatch(ck); ck, cv = c.Next() {",
                "+\t\tvs = append(vs, cv)",
                "+\t\tkeys = append(keys, ck)",
                "+\t\tif limit == int64(len(keys)) {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+\treturn keys, vs",
                "+}",
                "+",
                "+// UnsafeDelete must be called holding the lock on the tx.",
                "+func (t *batchTx) UnsafeDelete(bucketName []byte, key []byte) {",
                "+\tbucket := t.tx.Bucket(bucketName)",
                "+\tif bucket == nil {",
                "+\t\tplog.Fatalf(\"bucket %s does not exist\", bucketName)",
                "+\t}",
                "+\terr := bucket.Delete(key)",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot delete key from bucket (%v)\", err)",
                "+\t}",
                "+\tt.pending++",
                "+}",
                "+",
                "+// UnsafeForEach must be called holding the lock on the tx.",
                "+func (t *batchTx) UnsafeForEach(bucketName []byte, visitor func(k, v []byte) error) error {",
                "+\treturn unsafeForEach(t.tx, bucketName, visitor)",
                "+}",
                "+",
                "+func unsafeForEach(tx *bolt.Tx, bucket []byte, visitor func(k, v []byte) error) error {",
                "+\tif b := tx.Bucket(bucket); b != nil {",
                "+\t\treturn b.ForEach(visitor)",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+// Commit commits a previous tx and begins a new writable one.",
                "+func (t *batchTx) Commit() {",
                "+\tt.Lock()",
                "+\tdefer t.Unlock()",
                "+\tt.commit(false)",
                "+}",
                "+",
                "+// CommitAndStop commits the previous tx and does not create a new one.",
                "+func (t *batchTx) CommitAndStop() {",
                "+\tt.Lock()",
                "+\tdefer t.Unlock()",
                "+\tt.commit(true)",
                "+}",
                "+",
                "+func (t *batchTx) Unlock() {",
                "+\tif t.pending >= t.backend.batchLimit {",
                "+\t\tt.commit(false)",
                "+\t}",
                "+\tt.Mutex.Unlock()",
                "+}",
                "+",
                "+func (t *batchTx) safePending() int {",
                "+\tt.Mutex.Lock()",
                "+\tdefer t.Mutex.Unlock()",
                "+\treturn t.pending",
                "+}",
                "+",
                "+func (t *batchTx) commit(stop bool) {",
                "+\t// commit the last tx",
                "+\tif t.tx != nil {",
                "+\t\tif t.pending == 0 && !stop {",
                "+\t\t\treturn",
                "+\t\t}",
                "+",
                "+\t\tstart := time.Now()",
                "+\t\t// gofail: var beforeCommit struct{}",
                "+\t\terr := t.tx.Commit()",
                "+\t\t// gofail: var afterCommit struct{}",
                "+\t\tcommitDurations.Observe(time.Since(start).Seconds())",
                "+\t\tatomic.AddInt64(&t.backend.commits, 1)",
                "+",
                "+\t\tt.pending = 0",
                "+\t\tif err != nil {",
                "+\t\t\tplog.Fatalf(\"cannot commit tx (%s)\", err)",
                "+\t\t}",
                "+\t}",
                "+\tif !stop {",
                "+\t\tt.tx = t.backend.begin(true)",
                "+\t}",
                "+}",
                "+",
                "+type batchTxBuffered struct {",
                "+\tbatchTx",
                "+\tbuf txWriteBuffer",
                "+}",
                "+",
                "+func newBatchTxBuffered(backend *backend) *batchTxBuffered {",
                "+\ttx := &batchTxBuffered{",
                "+\t\tbatchTx: batchTx{backend: backend},",
                "+\t\tbuf: txWriteBuffer{",
                "+\t\t\ttxBuffer: txBuffer{make(map[string]*bucketBuffer)},",
                "+\t\t\tseq:      true,",
                "+\t\t},",
                "+\t}",
                "+\ttx.Commit()",
                "+\treturn tx",
                "+}",
                "+",
                "+func (t *batchTxBuffered) Unlock() {",
                "+\tif t.pending != 0 {",
                "+\t\tt.backend.readTx.mu.Lock()",
                "+\t\tt.buf.writeback(&t.backend.readTx.buf)",
                "+\t\tt.backend.readTx.mu.Unlock()",
                "+\t\tif t.pending >= t.backend.batchLimit {",
                "+\t\t\tt.commit(false)",
                "+\t\t}",
                "+\t}",
                "+\tt.batchTx.Unlock()",
                "+}",
                "+",
                "+func (t *batchTxBuffered) Commit() {",
                "+\tt.Lock()",
                "+\tdefer t.Unlock()",
                "+\tt.commit(false)",
                "+}",
                "+",
                "+func (t *batchTxBuffered) CommitAndStop() {",
                "+\tt.Lock()",
                "+\tdefer t.Unlock()",
                "+\tt.commit(true)",
                "+}",
                "+",
                "+func (t *batchTxBuffered) commit(stop bool) {",
                "+\t// all read txs must be closed to acquire boltdb commit rwlock",
                "+\tt.backend.readTx.mu.Lock()",
                "+\tdefer t.backend.readTx.mu.Unlock()",
                "+\tt.unsafeCommit(stop)",
                "+}",
                "+",
                "+func (t *batchTxBuffered) unsafeCommit(stop bool) {",
                "+\tif t.backend.readTx.tx != nil {",
                "+\t\tif err := t.backend.readTx.tx.Rollback(); err != nil {",
                "+\t\t\tplog.Fatalf(\"cannot rollback tx (%s)\", err)",
                "+\t\t}",
                "+\t\tt.backend.readTx.reset()",
                "+\t}",
                "+",
                "+\tt.batchTx.commit(stop)",
                "+",
                "+\tif !stop {",
                "+\t\tt.backend.readTx.tx = t.backend.begin(false)",
                "+\t}",
                "+}",
                "+",
                "+func (t *batchTxBuffered) UnsafePut(bucketName []byte, key []byte, value []byte) {",
                "+\tt.batchTx.UnsafePut(bucketName, key, value)",
                "+\tt.buf.put(bucketName, key, value)",
                "+}",
                "+",
                "+func (t *batchTxBuffered) UnsafeSeqPut(bucketName []byte, key []byte, value []byte) {",
                "+\tt.batchTx.UnsafeSeqPut(bucketName, key, value)",
                "+\tt.buf.putSeq(bucketName, key, value)",
                "+}",
                "diff --git a/mvcc/backend/batch_tx_test.go b/mvcc/backend/batch_tx_test.go",
                "new file mode 100644",
                "index 000000000..57549b98b",
                "--- /dev/null",
                "+++ b/mvcc/backend/batch_tx_test.go",
                "@@ -0,0 +1,197 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package backend",
                "+",
                "+import (",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\tbolt \"github.com/coreos/bbolt\"",
                "+)",
                "+",
                "+func TestBatchTxPut(t *testing.T) {",
                "+\tb, tmpPath := NewTmpBackend(time.Hour, 10000)",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\ttx := b.batchTx",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\t// create bucket",
                "+\ttx.UnsafeCreateBucket([]byte(\"test\"))",
                "+",
                "+\t// put",
                "+\tv := []byte(\"bar\")",
                "+\ttx.UnsafePut([]byte(\"test\"), []byte(\"foo\"), v)",
                "+",
                "+\t// check put result before and after tx is committed",
                "+\tfor k := 0; k < 2; k++ {",
                "+\t\t_, gv := tx.UnsafeRange([]byte(\"test\"), []byte(\"foo\"), nil, 0)",
                "+\t\tif !reflect.DeepEqual(gv[0], v) {",
                "+\t\t\tt.Errorf(\"v = %s, want %s\", string(gv[0]), string(v))",
                "+\t\t}",
                "+\t\ttx.commit(false)",
                "+\t}",
                "+}",
                "+",
                "+func TestBatchTxRange(t *testing.T) {",
                "+\tb, tmpPath := NewTmpBackend(time.Hour, 10000)",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\ttx := b.batchTx",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\ttx.UnsafeCreateBucket([]byte(\"test\"))",
                "+\t// put keys",
                "+\tallKeys := [][]byte{[]byte(\"foo\"), []byte(\"foo1\"), []byte(\"foo2\")}",
                "+\tallVals := [][]byte{[]byte(\"bar\"), []byte(\"bar1\"), []byte(\"bar2\")}",
                "+\tfor i := range allKeys {",
                "+\t\ttx.UnsafePut([]byte(\"test\"), allKeys[i], allVals[i])",
                "+\t}",
                "+",
                "+\ttests := []struct {",
                "+\t\tkey    []byte",
                "+\t\tendKey []byte",
                "+\t\tlimit  int64",
                "+",
                "+\t\twkeys [][]byte",
                "+\t\twvals [][]byte",
                "+\t}{",
                "+\t\t// single key",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), nil, 0,",
                "+\t\t\tallKeys[:1], allVals[:1],",
                "+\t\t},",
                "+\t\t// single key, bad",
                "+\t\t{",
                "+\t\t\t[]byte(\"doo\"), nil, 0,",
                "+\t\t\tnil, nil,",
                "+\t\t},",
                "+\t\t// key range",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo1\"), 0,",
                "+\t\t\tallKeys[:1], allVals[:1],",
                "+\t\t},",
                "+\t\t// key range, get all keys",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo3\"), 0,",
                "+\t\t\tallKeys, allVals,",
                "+\t\t},",
                "+\t\t// key range, bad",
                "+\t\t{",
                "+\t\t\t[]byte(\"goo\"), []byte(\"goo3\"), 0,",
                "+\t\t\tnil, nil,",
                "+\t\t},",
                "+\t\t// key range with effective limit",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo3\"), 1,",
                "+\t\t\tallKeys[:1], allVals[:1],",
                "+\t\t},",
                "+\t\t// key range with limit",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo3\"), 4,",
                "+\t\t\tallKeys, allVals,",
                "+\t\t},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tkeys, vals := tx.UnsafeRange([]byte(\"test\"), tt.key, tt.endKey, tt.limit)",
                "+\t\tif !reflect.DeepEqual(keys, tt.wkeys) {",
                "+\t\t\tt.Errorf(\"#%d: keys = %+v, want %+v\", i, keys, tt.wkeys)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(vals, tt.wvals) {",
                "+\t\t\tt.Errorf(\"#%d: vals = %+v, want %+v\", i, vals, tt.wvals)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestBatchTxDelete(t *testing.T) {",
                "+\tb, tmpPath := NewTmpBackend(time.Hour, 10000)",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\ttx := b.batchTx",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\ttx.UnsafeCreateBucket([]byte(\"test\"))",
                "+\ttx.UnsafePut([]byte(\"test\"), []byte(\"foo\"), []byte(\"bar\"))",
                "+",
                "+\ttx.UnsafeDelete([]byte(\"test\"), []byte(\"foo\"))",
                "+",
                "+\t// check put result before and after tx is committed",
                "+\tfor k := 0; k < 2; k++ {",
                "+\t\tks, _ := tx.UnsafeRange([]byte(\"test\"), []byte(\"foo\"), nil, 0)",
                "+\t\tif len(ks) != 0 {",
                "+\t\t\tt.Errorf(\"keys on foo = %v, want nil\", ks)",
                "+\t\t}",
                "+\t\ttx.commit(false)",
                "+\t}",
                "+}",
                "+",
                "+func TestBatchTxCommit(t *testing.T) {",
                "+\tb, tmpPath := NewTmpBackend(time.Hour, 10000)",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\ttx := b.batchTx",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket([]byte(\"test\"))",
                "+\ttx.UnsafePut([]byte(\"test\"), []byte(\"foo\"), []byte(\"bar\"))",
                "+\ttx.Unlock()",
                "+",
                "+\ttx.Commit()",
                "+",
                "+\t// check whether put happens via db view",
                "+\tb.db.View(func(tx *bolt.Tx) error {",
                "+\t\tbucket := tx.Bucket([]byte(\"test\"))",
                "+\t\tif bucket == nil {",
                "+\t\t\tt.Errorf(\"bucket test does not exit\")",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\tv := bucket.Get([]byte(\"foo\"))",
                "+\t\tif v == nil {",
                "+\t\t\tt.Errorf(\"foo key failed to written in backend\")",
                "+\t\t}",
                "+\t\treturn nil",
                "+\t})",
                "+}",
                "+",
                "+func TestBatchTxBatchLimitCommit(t *testing.T) {",
                "+\t// start backend with batch limit 1 so one write can",
                "+\t// trigger a commit",
                "+\tb, tmpPath := NewTmpBackend(time.Hour, 1)",
                "+\tdefer cleanup(b, tmpPath)",
                "+",
                "+\ttx := b.batchTx",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket([]byte(\"test\"))",
                "+\ttx.UnsafePut([]byte(\"test\"), []byte(\"foo\"), []byte(\"bar\"))",
                "+\ttx.Unlock()",
                "+",
                "+\t// batch limit commit should have been triggered",
                "+\t// check whether put happens via db view",
                "+\tb.db.View(func(tx *bolt.Tx) error {",
                "+\t\tbucket := tx.Bucket([]byte(\"test\"))",
                "+\t\tif bucket == nil {",
                "+\t\t\tt.Errorf(\"bucket test does not exit\")",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\tv := bucket.Get([]byte(\"foo\"))",
                "+\t\tif v == nil {",
                "+\t\t\tt.Errorf(\"foo key failed to written in backend\")",
                "+\t\t}",
                "+\t\treturn nil",
                "+\t})",
                "+}",
                "diff --git a/mvcc/backend/config_default.go b/mvcc/backend/config_default.go",
                "new file mode 100644",
                "index 000000000..edfed0025",
                "--- /dev/null",
                "+++ b/mvcc/backend/config_default.go",
                "@@ -0,0 +1,23 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// +build !linux,!windows",
                "+",
                "+package backend",
                "+",
                "+import bolt \"github.com/coreos/bbolt\"",
                "+",
                "+var boltOpenOptions *bolt.Options = nil",
                "+",
                "+func (bcfg *BackendConfig) mmapSize() int { return int(bcfg.MmapSize) }",
                "diff --git a/mvcc/backend/config_linux.go b/mvcc/backend/config_linux.go",
                "new file mode 100644",
                "index 000000000..b01785f3b",
                "--- /dev/null",
                "+++ b/mvcc/backend/config_linux.go",
                "@@ -0,0 +1,34 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package backend",
                "+",
                "+import (",
                "+\t\"syscall\"",
                "+",
                "+\tbolt \"github.com/coreos/bbolt\"",
                "+)",
                "+",
                "+// syscall.MAP_POPULATE on linux 2.6.23+ does sequential read-ahead",
                "+// which can speed up entire-database read with boltdb. We want to",
                "+// enable MAP_POPULATE for faster key-value store recovery in storage",
                "+// package. If your kernel version is lower than 2.6.23",
                "+// (https://github.com/torvalds/linux/releases/tag/v2.6.23), mmap might",
                "+// silently ignore this flag. Please update your kernel to prevent this.",
                "+var boltOpenOptions = &bolt.Options{",
                "+\tMmapFlags:      syscall.MAP_POPULATE,",
                "+\tNoFreelistSync: true,",
                "+}",
                "+",
                "+func (bcfg *BackendConfig) mmapSize() int { return int(bcfg.MmapSize) }",
                "diff --git a/mvcc/backend/config_windows.go b/mvcc/backend/config_windows.go",
                "new file mode 100644",
                "index 000000000..71d02700b",
                "--- /dev/null",
                "+++ b/mvcc/backend/config_windows.go",
                "@@ -0,0 +1,26 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// +build windows",
                "+",
                "+package backend",
                "+",
                "+import bolt \"github.com/coreos/bbolt\"",
                "+",
                "+var boltOpenOptions *bolt.Options = nil",
                "+",
                "+// setting mmap size != 0 on windows will allocate the entire",
                "+// mmap size for the file, instead of growing it. So, force 0.",
                "+",
                "+func (bcfg *BackendConfig) mmapSize() int { return 0 }",
                "diff --git a/mvcc/backend/doc.go b/mvcc/backend/doc.go",
                "new file mode 100644",
                "index 000000000..9cc42fa79",
                "--- /dev/null",
                "+++ b/mvcc/backend/doc.go",
                "@@ -0,0 +1,16 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package backend defines a standard interface for etcd's backend MVCC storage.",
                "+package backend",
                "diff --git a/mvcc/backend/metrics.go b/mvcc/backend/metrics.go",
                "new file mode 100644",
                "index 000000000..30a388014",
                "--- /dev/null",
                "+++ b/mvcc/backend/metrics.go",
                "@@ -0,0 +1,41 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package backend",
                "+",
                "+import \"github.com/prometheus/client_golang/prometheus\"",
                "+",
                "+var (",
                "+\tcommitDurations = prometheus.NewHistogram(prometheus.HistogramOpts{",
                "+\t\tNamespace: \"etcd\",",
                "+\t\tSubsystem: \"disk\",",
                "+\t\tName:      \"backend_commit_duration_seconds\",",
                "+\t\tHelp:      \"The latency distributions of commit called by backend.\",",
                "+\t\tBuckets:   prometheus.ExponentialBuckets(0.001, 2, 14),",
                "+\t})",
                "+",
                "+\tsnapshotDurations = prometheus.NewHistogram(prometheus.HistogramOpts{",
                "+\t\tNamespace: \"etcd\",",
                "+\t\tSubsystem: \"disk\",",
                "+\t\tName:      \"backend_snapshot_duration_seconds\",",
                "+\t\tHelp:      \"The latency distribution of backend snapshots.\",",
                "+\t\t// 10 ms -> 655 seconds",
                "+\t\tBuckets: prometheus.ExponentialBuckets(.01, 2, 17),",
                "+\t})",
                "+)",
                "+",
                "+func init() {",
                "+\tprometheus.MustRegister(commitDurations)",
                "+\tprometheus.MustRegister(snapshotDurations)",
                "+}",
                "diff --git a/mvcc/backend/read_tx.go b/mvcc/backend/read_tx.go",
                "new file mode 100644",
                "index 000000000..0536de70e",
                "--- /dev/null",
                "+++ b/mvcc/backend/read_tx.go",
                "@@ -0,0 +1,120 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package backend",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"math\"",
                "+\t\"sync\"",
                "+",
                "+\tbolt \"github.com/coreos/bbolt\"",
                "+)",
                "+",
                "+// safeRangeBucket is a hack to avoid inadvertently reading duplicate keys;",
                "+// overwrites on a bucket should only fetch with limit=1, but safeRangeBucket",
                "+// is known to never overwrite any key so range is safe.",
                "+var safeRangeBucket = []byte(\"key\")",
                "+",
                "+type ReadTx interface {",
                "+\tLock()",
                "+\tUnlock()",
                "+",
                "+\tUnsafeRange(bucketName []byte, key, endKey []byte, limit int64) (keys [][]byte, vals [][]byte)",
                "+\tUnsafeForEach(bucketName []byte, visitor func(k, v []byte) error) error",
                "+}",
                "+",
                "+type readTx struct {",
                "+\t// mu protects accesses to the txReadBuffer",
                "+\tmu  sync.RWMutex",
                "+\tbuf txReadBuffer",
                "+",
                "+\t// txmu protects accesses to buckets and tx on Range requests.",
                "+\ttxmu    sync.RWMutex",
                "+\ttx      *bolt.Tx",
                "+\tbuckets map[string]*bolt.Bucket",
                "+}",
                "+",
                "+func (rt *readTx) Lock()   { rt.mu.RLock() }",
                "+func (rt *readTx) Unlock() { rt.mu.RUnlock() }",
                "+",
                "+func (rt *readTx) UnsafeRange(bucketName, key, endKey []byte, limit int64) ([][]byte, [][]byte) {",
                "+\tif endKey == nil {",
                "+\t\t// forbid duplicates for single keys",
                "+\t\tlimit = 1",
                "+\t}",
                "+\tif limit <= 0 {",
                "+\t\tlimit = math.MaxInt64",
                "+\t}",
                "+\tif limit > 1 && !bytes.Equal(bucketName, safeRangeBucket) {",
                "+\t\tpanic(\"do not use unsafeRange on non-keys bucket\")",
                "+\t}",
                "+\tkeys, vals := rt.buf.Range(bucketName, key, endKey, limit)",
                "+\tif int64(len(keys)) == limit {",
                "+\t\treturn keys, vals",
                "+\t}",
                "+",
                "+\t// find/cache bucket",
                "+\tbn := string(bucketName)",
                "+\trt.txmu.RLock()",
                "+\tbucket, ok := rt.buckets[bn]",
                "+\trt.txmu.RUnlock()",
                "+\tif !ok {",
                "+\t\trt.txmu.Lock()",
                "+\t\tbucket = rt.tx.Bucket(bucketName)",
                "+\t\trt.buckets[bn] = bucket",
                "+\t\trt.txmu.Unlock()",
                "+\t}",
                "+",
                "+\t// ignore missing bucket since may have been created in this batch",
                "+\tif bucket == nil {",
                "+\t\treturn keys, vals",
                "+\t}",
                "+\trt.txmu.Lock()",
                "+\tc := bucket.Cursor()",
                "+\trt.txmu.Unlock()",
                "+",
                "+\tk2, v2 := unsafeRange(c, key, endKey, limit-int64(len(keys)))",
                "+\treturn append(k2, keys...), append(v2, vals...)",
                "+}",
                "+",
                "+func (rt *readTx) UnsafeForEach(bucketName []byte, visitor func(k, v []byte) error) error {",
                "+\tdups := make(map[string]struct{})",
                "+\tgetDups := func(k, v []byte) error {",
                "+\t\tdups[string(k)] = struct{}{}",
                "+\t\treturn nil",
                "+\t}",
                "+\tvisitNoDup := func(k, v []byte) error {",
                "+\t\tif _, ok := dups[string(k)]; ok {",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\treturn visitor(k, v)",
                "+\t}",
                "+\tif err := rt.buf.ForEach(bucketName, getDups); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\trt.txmu.Lock()",
                "+\terr := unsafeForEach(rt.tx, bucketName, visitNoDup)",
                "+\trt.txmu.Unlock()",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\treturn rt.buf.ForEach(bucketName, visitor)",
                "+}",
                "+",
                "+func (rt *readTx) reset() {",
                "+\trt.buf.reset()",
                "+\trt.buckets = make(map[string]*bolt.Bucket)",
                "+\trt.tx = nil",
                "+}",
                "diff --git a/mvcc/backend/tx_buffer.go b/mvcc/backend/tx_buffer.go",
                "new file mode 100644",
                "index 000000000..56e885dbf",
                "--- /dev/null",
                "+++ b/mvcc/backend/tx_buffer.go",
                "@@ -0,0 +1,181 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package backend",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"sort\"",
                "+)",
                "+",
                "+// txBuffer handles functionality shared between txWriteBuffer and txReadBuffer.",
                "+type txBuffer struct {",
                "+\tbuckets map[string]*bucketBuffer",
                "+}",
                "+",
                "+func (txb *txBuffer) reset() {",
                "+\tfor k, v := range txb.buckets {",
                "+\t\tif v.used == 0 {",
                "+\t\t\t// demote",
                "+\t\t\tdelete(txb.buckets, k)",
                "+\t\t}",
                "+\t\tv.used = 0",
                "+\t}",
                "+}",
                "+",
                "+// txWriteBuffer buffers writes of pending updates that have not yet committed.",
                "+type txWriteBuffer struct {",
                "+\ttxBuffer",
                "+\tseq bool",
                "+}",
                "+",
                "+func (txw *txWriteBuffer) put(bucket, k, v []byte) {",
                "+\ttxw.seq = false",
                "+\ttxw.putSeq(bucket, k, v)",
                "+}",
                "+",
                "+func (txw *txWriteBuffer) putSeq(bucket, k, v []byte) {",
                "+\tb, ok := txw.buckets[string(bucket)]",
                "+\tif !ok {",
                "+\t\tb = newBucketBuffer()",
                "+\t\ttxw.buckets[string(bucket)] = b",
                "+\t}",
                "+\tb.add(k, v)",
                "+}",
                "+",
                "+func (txw *txWriteBuffer) writeback(txr *txReadBuffer) {",
                "+\tfor k, wb := range txw.buckets {",
                "+\t\trb, ok := txr.buckets[k]",
                "+\t\tif !ok {",
                "+\t\t\tdelete(txw.buckets, k)",
                "+\t\t\ttxr.buckets[k] = wb",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tif !txw.seq && wb.used > 1 {",
                "+\t\t\t// assume no duplicate keys",
                "+\t\t\tsort.Sort(wb)",
                "+\t\t}",
                "+\t\trb.merge(wb)",
                "+\t}",
                "+\ttxw.reset()",
                "+}",
                "+",
                "+// txReadBuffer accesses buffered updates.",
                "+type txReadBuffer struct{ txBuffer }",
                "+",
                "+func (txr *txReadBuffer) Range(bucketName, key, endKey []byte, limit int64) ([][]byte, [][]byte) {",
                "+\tif b := txr.buckets[string(bucketName)]; b != nil {",
                "+\t\treturn b.Range(key, endKey, limit)",
                "+\t}",
                "+\treturn nil, nil",
                "+}",
                "+",
                "+func (txr *txReadBuffer) ForEach(bucketName []byte, visitor func(k, v []byte) error) error {",
                "+\tif b := txr.buckets[string(bucketName)]; b != nil {",
                "+\t\treturn b.ForEach(visitor)",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+type kv struct {",
                "+\tkey []byte",
                "+\tval []byte",
                "+}",
                "+",
                "+// bucketBuffer buffers key-value pairs that are pending commit.",
                "+type bucketBuffer struct {",
                "+\tbuf []kv",
                "+\t// used tracks number of elements in use so buf can be reused without reallocation.",
                "+\tused int",
                "+}",
                "+",
                "+func newBucketBuffer() *bucketBuffer {",
                "+\treturn &bucketBuffer{buf: make([]kv, 512), used: 0}",
                "+}",
                "+",
                "+func (bb *bucketBuffer) Range(key, endKey []byte, limit int64) (keys [][]byte, vals [][]byte) {",
                "+\tf := func(i int) bool { return bytes.Compare(bb.buf[i].key, key) >= 0 }",
                "+\tidx := sort.Search(bb.used, f)",
                "+\tif idx < 0 {",
                "+\t\treturn nil, nil",
                "+\t}",
                "+\tif len(endKey) == 0 {",
                "+\t\tif bytes.Equal(key, bb.buf[idx].key) {",
                "+\t\t\tkeys = append(keys, bb.buf[idx].key)",
                "+\t\t\tvals = append(vals, bb.buf[idx].val)",
                "+\t\t}",
                "+\t\treturn keys, vals",
                "+\t}",
                "+\tif bytes.Compare(endKey, bb.buf[idx].key) <= 0 {",
                "+\t\treturn nil, nil",
                "+\t}",
                "+\tfor i := idx; i < bb.used && int64(len(keys)) < limit; i++ {",
                "+\t\tif bytes.Compare(endKey, bb.buf[i].key) <= 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\tkeys = append(keys, bb.buf[i].key)",
                "+\t\tvals = append(vals, bb.buf[i].val)",
                "+\t}",
                "+\treturn keys, vals",
                "+}",
                "+",
                "+func (bb *bucketBuffer) ForEach(visitor func(k, v []byte) error) error {",
                "+\tfor i := 0; i < bb.used; i++ {",
                "+\t\tif err := visitor(bb.buf[i].key, bb.buf[i].val); err != nil {",
                "+\t\t\treturn err",
                "+\t\t}",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+func (bb *bucketBuffer) add(k, v []byte) {",
                "+\tbb.buf[bb.used].key, bb.buf[bb.used].val = k, v",
                "+\tbb.used++",
                "+\tif bb.used == len(bb.buf) {",
                "+\t\tbuf := make([]kv, (3*len(bb.buf))/2)",
                "+\t\tcopy(buf, bb.buf)",
                "+\t\tbb.buf = buf",
                "+\t}",
                "+}",
                "+",
                "+// merge merges data from bb into bbsrc.",
                "+func (bb *bucketBuffer) merge(bbsrc *bucketBuffer) {",
                "+\tfor i := 0; i < bbsrc.used; i++ {",
                "+\t\tbb.add(bbsrc.buf[i].key, bbsrc.buf[i].val)",
                "+\t}",
                "+\tif bb.used == bbsrc.used {",
                "+\t\treturn",
                "+\t}",
                "+\tif bytes.Compare(bb.buf[(bb.used-bbsrc.used)-1].key, bbsrc.buf[0].key) < 0 {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tsort.Stable(bb)",
                "+",
                "+\t// remove duplicates, using only newest update",
                "+\twidx := 0",
                "+\tfor ridx := 1; ridx < bb.used; ridx++ {",
                "+\t\tif !bytes.Equal(bb.buf[ridx].key, bb.buf[widx].key) {",
                "+\t\t\twidx++",
                "+\t\t}",
                "+\t\tbb.buf[widx] = bb.buf[ridx]",
                "+\t}",
                "+\tbb.used = widx + 1",
                "+}",
                "+",
                "+func (bb *bucketBuffer) Len() int { return bb.used }",
                "+func (bb *bucketBuffer) Less(i, j int) bool {",
                "+\treturn bytes.Compare(bb.buf[i].key, bb.buf[j].key) < 0",
                "+}",
                "+func (bb *bucketBuffer) Swap(i, j int) { bb.buf[i], bb.buf[j] = bb.buf[j], bb.buf[i] }",
                "diff --git a/mvcc/doc.go b/mvcc/doc.go",
                "new file mode 100644",
                "index 000000000..ad5be0308",
                "--- /dev/null",
                "+++ b/mvcc/doc.go",
                "@@ -0,0 +1,16 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package mvcc defines etcd's stable MVCC storage.",
                "+package mvcc",
                "diff --git a/mvcc/index.go b/mvcc/index.go",
                "new file mode 100644",
                "index 000000000..b27a9e543",
                "--- /dev/null",
                "+++ b/mvcc/index.go",
                "@@ -0,0 +1,251 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"sort\"",
                "+\t\"sync\"",
                "+",
                "+\t\"github.com/google/btree\"",
                "+)",
                "+",
                "+type index interface {",
                "+\tGet(key []byte, atRev int64) (rev, created revision, ver int64, err error)",
                "+\tRange(key, end []byte, atRev int64) ([][]byte, []revision)",
                "+\tRevisions(key, end []byte, atRev int64) []revision",
                "+\tPut(key []byte, rev revision)",
                "+\tTombstone(key []byte, rev revision) error",
                "+\tRangeSince(key, end []byte, rev int64) []revision",
                "+\tCompact(rev int64) map[revision]struct{}",
                "+\tKeep(rev int64) map[revision]struct{}",
                "+\tEqual(b index) bool",
                "+",
                "+\tInsert(ki *keyIndex)",
                "+\tKeyIndex(ki *keyIndex) *keyIndex",
                "+}",
                "+",
                "+type treeIndex struct {",
                "+\tsync.RWMutex",
                "+\ttree *btree.BTree",
                "+}",
                "+",
                "+func newTreeIndex() index {",
                "+\treturn &treeIndex{",
                "+\t\ttree: btree.New(32),",
                "+\t}",
                "+}",
                "+",
                "+func (ti *treeIndex) Put(key []byte, rev revision) {",
                "+\tkeyi := &keyIndex{key: key}",
                "+",
                "+\tti.Lock()",
                "+\tdefer ti.Unlock()",
                "+\titem := ti.tree.Get(keyi)",
                "+\tif item == nil {",
                "+\t\tkeyi.put(rev.main, rev.sub)",
                "+\t\tti.tree.ReplaceOrInsert(keyi)",
                "+\t\treturn",
                "+\t}",
                "+\tokeyi := item.(*keyIndex)",
                "+\tokeyi.put(rev.main, rev.sub)",
                "+}",
                "+",
                "+func (ti *treeIndex) Get(key []byte, atRev int64) (modified, created revision, ver int64, err error) {",
                "+\tkeyi := &keyIndex{key: key}",
                "+\tti.RLock()",
                "+\tdefer ti.RUnlock()",
                "+\tif keyi = ti.keyIndex(keyi); keyi == nil {",
                "+\t\treturn revision{}, revision{}, 0, ErrRevisionNotFound",
                "+\t}",
                "+\treturn keyi.get(atRev)",
                "+}",
                "+",
                "+func (ti *treeIndex) KeyIndex(keyi *keyIndex) *keyIndex {",
                "+\tti.RLock()",
                "+\tdefer ti.RUnlock()",
                "+\treturn ti.keyIndex(keyi)",
                "+}",
                "+",
                "+func (ti *treeIndex) keyIndex(keyi *keyIndex) *keyIndex {",
                "+\tif item := ti.tree.Get(keyi); item != nil {",
                "+\t\treturn item.(*keyIndex)",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+func (ti *treeIndex) visit(key, end []byte, f func(ki *keyIndex)) {",
                "+\tkeyi, endi := &keyIndex{key: key}, &keyIndex{key: end}",
                "+",
                "+\tti.RLock()",
                "+\tdefer ti.RUnlock()",
                "+",
                "+\tti.tree.AscendGreaterOrEqual(keyi, func(item btree.Item) bool {",
                "+\t\tif len(endi.key) > 0 && !item.Less(endi) {",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t\tf(item.(*keyIndex))",
                "+\t\treturn true",
                "+\t})",
                "+}",
                "+",
                "+func (ti *treeIndex) Revisions(key, end []byte, atRev int64) (revs []revision) {",
                "+\tif end == nil {",
                "+\t\trev, _, _, err := ti.Get(key, atRev)",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\treturn []revision{rev}",
                "+\t}",
                "+\tti.visit(key, end, func(ki *keyIndex) {",
                "+\t\tif rev, _, _, err := ki.get(atRev); err == nil {",
                "+\t\t\trevs = append(revs, rev)",
                "+\t\t}",
                "+\t})",
                "+\treturn revs",
                "+}",
                "+",
                "+func (ti *treeIndex) Range(key, end []byte, atRev int64) (keys [][]byte, revs []revision) {",
                "+\tif end == nil {",
                "+\t\trev, _, _, err := ti.Get(key, atRev)",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, nil",
                "+\t\t}",
                "+\t\treturn [][]byte{key}, []revision{rev}",
                "+\t}",
                "+\tti.visit(key, end, func(ki *keyIndex) {",
                "+\t\tif rev, _, _, err := ki.get(atRev); err == nil {",
                "+\t\t\trevs = append(revs, rev)",
                "+\t\t\tkeys = append(keys, ki.key)",
                "+\t\t}",
                "+\t})",
                "+\treturn keys, revs",
                "+}",
                "+",
                "+func (ti *treeIndex) Tombstone(key []byte, rev revision) error {",
                "+\tkeyi := &keyIndex{key: key}",
                "+",
                "+\tti.Lock()",
                "+\tdefer ti.Unlock()",
                "+\titem := ti.tree.Get(keyi)",
                "+\tif item == nil {",
                "+\t\treturn ErrRevisionNotFound",
                "+\t}",
                "+",
                "+\tki := item.(*keyIndex)",
                "+\treturn ki.tombstone(rev.main, rev.sub)",
                "+}",
                "+",
                "+// RangeSince returns all revisions from key(including) to end(excluding)",
                "+// at or after the given rev. The returned slice is sorted in the order",
                "+// of revision.",
                "+func (ti *treeIndex) RangeSince(key, end []byte, rev int64) []revision {",
                "+\tkeyi := &keyIndex{key: key}",
                "+",
                "+\tti.RLock()",
                "+\tdefer ti.RUnlock()",
                "+",
                "+\tif end == nil {",
                "+\t\titem := ti.tree.Get(keyi)",
                "+\t\tif item == nil {",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\tkeyi = item.(*keyIndex)",
                "+\t\treturn keyi.since(rev)",
                "+\t}",
                "+",
                "+\tendi := &keyIndex{key: end}",
                "+\tvar revs []revision",
                "+\tti.tree.AscendGreaterOrEqual(keyi, func(item btree.Item) bool {",
                "+\t\tif len(endi.key) > 0 && !item.Less(endi) {",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t\tcurKeyi := item.(*keyIndex)",
                "+\t\trevs = append(revs, curKeyi.since(rev)...)",
                "+\t\treturn true",
                "+\t})",
                "+\tsort.Sort(revisions(revs))",
                "+",
                "+\treturn revs",
                "+}",
                "+",
                "+func (ti *treeIndex) Compact(rev int64) map[revision]struct{} {",
                "+\tavailable := make(map[revision]struct{})",
                "+\tvar emptyki []*keyIndex",
                "+\tplog.Printf(\"store.index: compact %d\", rev)",
                "+\t// TODO: do not hold the lock for long time?",
                "+\t// This is probably OK. Compacting 10M keys takes O(10ms).",
                "+\tti.Lock()",
                "+\tdefer ti.Unlock()",
                "+\tti.tree.Ascend(compactIndex(rev, available, &emptyki))",
                "+\tfor _, ki := range emptyki {",
                "+\t\titem := ti.tree.Delete(ki)",
                "+\t\tif item == nil {",
                "+\t\t\tplog.Panic(\"store.index: unexpected delete failure during compaction\")",
                "+\t\t}",
                "+\t}",
                "+\treturn available",
                "+}",
                "+",
                "+// Keep finds all revisions to be kept for a Compaction at the given rev.",
                "+func (ti *treeIndex) Keep(rev int64) map[revision]struct{} {",
                "+\tavailable := make(map[revision]struct{})",
                "+\tti.RLock()",
                "+\tdefer ti.RUnlock()",
                "+\tti.tree.Ascend(func(i btree.Item) bool {",
                "+\t\tkeyi := i.(*keyIndex)",
                "+\t\tkeyi.keep(rev, available)",
                "+\t\treturn true",
                "+\t})",
                "+\treturn available",
                "+}",
                "+",
                "+func compactIndex(rev int64, available map[revision]struct{}, emptyki *[]*keyIndex) func(i btree.Item) bool {",
                "+\treturn func(i btree.Item) bool {",
                "+\t\tkeyi := i.(*keyIndex)",
                "+\t\tkeyi.compact(rev, available)",
                "+\t\tif keyi.isEmpty() {",
                "+\t\t\t*emptyki = append(*emptyki, keyi)",
                "+\t\t}",
                "+\t\treturn true",
                "+\t}",
                "+}",
                "+",
                "+func (ti *treeIndex) Equal(bi index) bool {",
                "+\tb := bi.(*treeIndex)",
                "+",
                "+\tif ti.tree.Len() != b.tree.Len() {",
                "+\t\treturn false",
                "+\t}",
                "+",
                "+\tequal := true",
                "+",
                "+\tti.tree.Ascend(func(item btree.Item) bool {",
                "+\t\taki := item.(*keyIndex)",
                "+\t\tbki := b.tree.Get(item).(*keyIndex)",
                "+\t\tif !aki.equal(bki) {",
                "+\t\t\tequal = false",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t\treturn true",
                "+\t})",
                "+",
                "+\treturn equal",
                "+}",
                "+",
                "+func (ti *treeIndex) Insert(ki *keyIndex) {",
                "+\tti.Lock()",
                "+\tdefer ti.Unlock()",
                "+\tti.tree.ReplaceOrInsert(ki)",
                "+}",
                "diff --git a/mvcc/index_test.go b/mvcc/index_test.go",
                "new file mode 100644",
                "index 000000000..d05315601",
                "--- /dev/null",
                "+++ b/mvcc/index_test.go",
                "@@ -0,0 +1,292 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/google/btree\"",
                "+)",
                "+",
                "+func TestIndexGet(t *testing.T) {",
                "+\tti := newTreeIndex()",
                "+\tti.Put([]byte(\"foo\"), revision{main: 2})",
                "+\tti.Put([]byte(\"foo\"), revision{main: 4})",
                "+\tti.Tombstone([]byte(\"foo\"), revision{main: 6})",
                "+",
                "+\ttests := []struct {",
                "+\t\trev int64",
                "+",
                "+\t\twrev     revision",
                "+\t\twcreated revision",
                "+\t\twver     int64",
                "+\t\twerr     error",
                "+\t}{",
                "+\t\t{0, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t\t{1, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t\t{2, revision{main: 2}, revision{main: 2}, 1, nil},",
                "+\t\t{3, revision{main: 2}, revision{main: 2}, 1, nil},",
                "+\t\t{4, revision{main: 4}, revision{main: 2}, 2, nil},",
                "+\t\t{5, revision{main: 4}, revision{main: 2}, 2, nil},",
                "+\t\t{6, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\trev, created, ver, err := ti.Get([]byte(\"foo\"), tt.rev)",
                "+\t\tif err != tt.werr {",
                "+\t\t\tt.Errorf(\"#%d: err = %v, want %v\", i, err, tt.werr)",
                "+\t\t}",
                "+\t\tif rev != tt.wrev {",
                "+\t\t\tt.Errorf(\"#%d: rev = %+v, want %+v\", i, rev, tt.wrev)",
                "+\t\t}",
                "+\t\tif created != tt.wcreated {",
                "+\t\t\tt.Errorf(\"#%d: created = %+v, want %+v\", i, created, tt.wcreated)",
                "+\t\t}",
                "+\t\tif ver != tt.wver {",
                "+\t\t\tt.Errorf(\"#%d: ver = %d, want %d\", i, ver, tt.wver)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestIndexRange(t *testing.T) {",
                "+\tallKeys := [][]byte{[]byte(\"foo\"), []byte(\"foo1\"), []byte(\"foo2\")}",
                "+\tallRevs := []revision{{main: 1}, {main: 2}, {main: 3}}",
                "+",
                "+\tti := newTreeIndex()",
                "+\tfor i := range allKeys {",
                "+\t\tti.Put(allKeys[i], allRevs[i])",
                "+\t}",
                "+",
                "+\tatRev := int64(3)",
                "+\ttests := []struct {",
                "+\t\tkey, end []byte",
                "+\t\twkeys    [][]byte",
                "+\t\twrevs    []revision",
                "+\t}{",
                "+\t\t// single key that not found",
                "+\t\t{",
                "+\t\t\t[]byte(\"bar\"), nil, nil, nil,",
                "+\t\t},",
                "+\t\t// single key that found",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), nil, allKeys[:1], allRevs[:1],",
                "+\t\t},",
                "+\t\t// range keys, return first member",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo1\"), allKeys[:1], allRevs[:1],",
                "+\t\t},",
                "+\t\t// range keys, return first two members",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo2\"), allKeys[:2], allRevs[:2],",
                "+\t\t},",
                "+\t\t// range keys, return all members",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"fop\"), allKeys, allRevs,",
                "+\t\t},",
                "+\t\t// range keys, return last two members",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo1\"), []byte(\"fop\"), allKeys[1:], allRevs[1:],",
                "+\t\t},",
                "+\t\t// range keys, return last member",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo2\"), []byte(\"fop\"), allKeys[2:], allRevs[2:],",
                "+\t\t},",
                "+\t\t// range keys, return nothing",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo3\"), []byte(\"fop\"), nil, nil,",
                "+\t\t},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tkeys, revs := ti.Range(tt.key, tt.end, atRev)",
                "+\t\tif !reflect.DeepEqual(keys, tt.wkeys) {",
                "+\t\t\tt.Errorf(\"#%d: keys = %+v, want %+v\", i, keys, tt.wkeys)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(revs, tt.wrevs) {",
                "+\t\t\tt.Errorf(\"#%d: revs = %+v, want %+v\", i, revs, tt.wrevs)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestIndexTombstone(t *testing.T) {",
                "+\tti := newTreeIndex()",
                "+\tti.Put([]byte(\"foo\"), revision{main: 1})",
                "+",
                "+\terr := ti.Tombstone([]byte(\"foo\"), revision{main: 2})",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"tombstone error = %v, want nil\", err)",
                "+\t}",
                "+",
                "+\t_, _, _, err = ti.Get([]byte(\"foo\"), 2)",
                "+\tif err != ErrRevisionNotFound {",
                "+\t\tt.Errorf(\"get error = %v, want nil\", err)",
                "+\t}",
                "+\terr = ti.Tombstone([]byte(\"foo\"), revision{main: 3})",
                "+\tif err != ErrRevisionNotFound {",
                "+\t\tt.Errorf(\"tombstone error = %v, want %v\", err, ErrRevisionNotFound)",
                "+\t}",
                "+}",
                "+",
                "+func TestIndexRangeSince(t *testing.T) {",
                "+\tallKeys := [][]byte{[]byte(\"foo\"), []byte(\"foo1\"), []byte(\"foo2\"), []byte(\"foo2\"), []byte(\"foo1\"), []byte(\"foo\")}",
                "+\tallRevs := []revision{{main: 1}, {main: 2}, {main: 3}, {main: 4}, {main: 5}, {main: 6}}",
                "+",
                "+\tti := newTreeIndex()",
                "+\tfor i := range allKeys {",
                "+\t\tti.Put(allKeys[i], allRevs[i])",
                "+\t}",
                "+",
                "+\tatRev := int64(1)",
                "+\ttests := []struct {",
                "+\t\tkey, end []byte",
                "+\t\twrevs    []revision",
                "+\t}{",
                "+\t\t// single key that not found",
                "+\t\t{",
                "+\t\t\t[]byte(\"bar\"), nil, nil,",
                "+\t\t},",
                "+\t\t// single key that found",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), nil, []revision{{main: 1}, {main: 6}},",
                "+\t\t},",
                "+\t\t// range keys, return first member",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo1\"), []revision{{main: 1}, {main: 6}},",
                "+\t\t},",
                "+\t\t// range keys, return first two members",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo2\"), []revision{{main: 1}, {main: 2}, {main: 5}, {main: 6}},",
                "+\t\t},",
                "+\t\t// range keys, return all members",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"fop\"), allRevs,",
                "+\t\t},",
                "+\t\t// range keys, return last two members",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo1\"), []byte(\"fop\"), []revision{{main: 2}, {main: 3}, {main: 4}, {main: 5}},",
                "+\t\t},",
                "+\t\t// range keys, return last member",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo2\"), []byte(\"fop\"), []revision{{main: 3}, {main: 4}},",
                "+\t\t},",
                "+\t\t// range keys, return nothing",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo3\"), []byte(\"fop\"), nil,",
                "+\t\t},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\trevs := ti.RangeSince(tt.key, tt.end, atRev)",
                "+\t\tif !reflect.DeepEqual(revs, tt.wrevs) {",
                "+\t\t\tt.Errorf(\"#%d: revs = %+v, want %+v\", i, revs, tt.wrevs)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestIndexCompactAndKeep(t *testing.T) {",
                "+\tmaxRev := int64(20)",
                "+\ttests := []struct {",
                "+\t\tkey     []byte",
                "+\t\tremove  bool",
                "+\t\trev     revision",
                "+\t\tcreated revision",
                "+\t\tver     int64",
                "+\t}{",
                "+\t\t{[]byte(\"foo\"), false, revision{main: 1}, revision{main: 1}, 1},",
                "+\t\t{[]byte(\"foo1\"), false, revision{main: 2}, revision{main: 2}, 1},",
                "+\t\t{[]byte(\"foo2\"), false, revision{main: 3}, revision{main: 3}, 1},",
                "+\t\t{[]byte(\"foo2\"), false, revision{main: 4}, revision{main: 3}, 2},",
                "+\t\t{[]byte(\"foo\"), false, revision{main: 5}, revision{main: 1}, 2},",
                "+\t\t{[]byte(\"foo1\"), false, revision{main: 6}, revision{main: 2}, 2},",
                "+\t\t{[]byte(\"foo1\"), true, revision{main: 7}, revision{}, 0},",
                "+\t\t{[]byte(\"foo2\"), true, revision{main: 8}, revision{}, 0},",
                "+\t\t{[]byte(\"foo\"), true, revision{main: 9}, revision{}, 0},",
                "+\t\t{[]byte(\"foo\"), false, revision{10, 0}, revision{10, 0}, 1},",
                "+\t\t{[]byte(\"foo1\"), false, revision{10, 1}, revision{10, 1}, 1},",
                "+\t}",
                "+",
                "+\t// Continuous Compact and Keep",
                "+\tti := newTreeIndex()",
                "+\tfor _, tt := range tests {",
                "+\t\tif tt.remove {",
                "+\t\t\tti.Tombstone(tt.key, tt.rev)",
                "+\t\t} else {",
                "+\t\t\tti.Put(tt.key, tt.rev)",
                "+\t\t}",
                "+\t}",
                "+\tfor i := int64(1); i < maxRev; i++ {",
                "+\t\tam := ti.Compact(i)",
                "+\t\tkeep := ti.Keep(i)",
                "+\t\tif !(reflect.DeepEqual(am, keep)) {",
                "+\t\t\tt.Errorf(\"#%d: compact keep %v != Keep keep %v\", i, am, keep)",
                "+\t\t}",
                "+\t\twti := &treeIndex{tree: btree.New(32)}",
                "+\t\tfor _, tt := range tests {",
                "+\t\t\tif _, ok := am[tt.rev]; ok || tt.rev.GreaterThan(revision{main: i}) {",
                "+\t\t\t\tif tt.remove {",
                "+\t\t\t\t\twti.Tombstone(tt.key, tt.rev)",
                "+\t\t\t\t} else {",
                "+\t\t\t\t\trestore(wti, tt.key, tt.created, tt.rev, tt.ver)",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif !ti.Equal(wti) {",
                "+\t\t\tt.Errorf(\"#%d: not equal ti\", i)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// Once Compact and Keep",
                "+\tfor i := int64(1); i < maxRev; i++ {",
                "+\t\tti := newTreeIndex()",
                "+\t\tfor _, tt := range tests {",
                "+\t\t\tif tt.remove {",
                "+\t\t\t\tti.Tombstone(tt.key, tt.rev)",
                "+\t\t\t} else {",
                "+\t\t\t\tti.Put(tt.key, tt.rev)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tam := ti.Compact(i)",
                "+\t\tkeep := ti.Keep(i)",
                "+\t\tif !(reflect.DeepEqual(am, keep)) {",
                "+\t\t\tt.Errorf(\"#%d: compact keep %v != Keep keep %v\", i, am, keep)",
                "+\t\t}",
                "+\t\twti := &treeIndex{tree: btree.New(32)}",
                "+\t\tfor _, tt := range tests {",
                "+\t\t\tif _, ok := am[tt.rev]; ok || tt.rev.GreaterThan(revision{main: i}) {",
                "+\t\t\t\tif tt.remove {",
                "+\t\t\t\t\twti.Tombstone(tt.key, tt.rev)",
                "+\t\t\t\t} else {",
                "+\t\t\t\t\trestore(wti, tt.key, tt.created, tt.rev, tt.ver)",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif !ti.Equal(wti) {",
                "+\t\t\tt.Errorf(\"#%d: not equal ti\", i)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func restore(ti *treeIndex, key []byte, created, modified revision, ver int64) {",
                "+\tkeyi := &keyIndex{key: key}",
                "+",
                "+\tti.Lock()",
                "+\tdefer ti.Unlock()",
                "+\titem := ti.tree.Get(keyi)",
                "+\tif item == nil {",
                "+\t\tkeyi.restore(created, modified, ver)",
                "+\t\tti.tree.ReplaceOrInsert(keyi)",
                "+\t\treturn",
                "+\t}",
                "+\tokeyi := item.(*keyIndex)",
                "+\tokeyi.put(modified.main, modified.sub)",
                "+}",
                "diff --git a/mvcc/key_index.go b/mvcc/key_index.go",
                "new file mode 100644",
                "index 000000000..805922bfc",
                "--- /dev/null",
                "+++ b/mvcc/key_index.go",
                "@@ -0,0 +1,356 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+",
                "+\t\"github.com/google/btree\"",
                "+)",
                "+",
                "+var (",
                "+\tErrRevisionNotFound = errors.New(\"mvcc: revision not found\")",
                "+)",
                "+",
                "+// keyIndex stores the revisions of a key in the backend.",
                "+// Each keyIndex has at least one key generation.",
                "+// Each generation might have several key versions.",
                "+// Tombstone on a key appends an tombstone version at the end",
                "+// of the current generation and creates a new empty generation.",
                "+// Each version of a key has an index pointing to the backend.",
                "+//",
                "+// For example: put(1.0);put(2.0);tombstone(3.0);put(4.0);tombstone(5.0) on key \"foo\"",
                "+// generate a keyIndex:",
                "+// key:     \"foo\"",
                "+// rev: 5",
                "+// generations:",
                "+//    {empty}",
                "+//    {4.0, 5.0(t)}",
                "+//    {1.0, 2.0, 3.0(t)}",
                "+//",
                "+// Compact a keyIndex removes the versions with smaller or equal to",
                "+// rev except the largest one. If the generation becomes empty",
                "+// during compaction, it will be removed. if all the generations get",
                "+// removed, the keyIndex should be removed.",
                "+//",
                "+// For example:",
                "+// compact(2) on the previous example",
                "+// generations:",
                "+//    {empty}",
                "+//    {4.0, 5.0(t)}",
                "+//    {2.0, 3.0(t)}",
                "+//",
                "+// compact(4)",
                "+// generations:",
                "+//    {empty}",
                "+//    {4.0, 5.0(t)}",
                "+//",
                "+// compact(5):",
                "+// generations:",
                "+//    {empty} -> key SHOULD be removed.",
                "+//",
                "+// compact(6):",
                "+// generations:",
                "+//    {empty} -> key SHOULD be removed.",
                "+type keyIndex struct {",
                "+\tkey         []byte",
                "+\tmodified    revision // the main rev of the last modification",
                "+\tgenerations []generation",
                "+}",
                "+",
                "+// put puts a revision to the keyIndex.",
                "+func (ki *keyIndex) put(main int64, sub int64) {",
                "+\trev := revision{main: main, sub: sub}",
                "+",
                "+\tif !rev.GreaterThan(ki.modified) {",
                "+\t\tplog.Panicf(\"store.keyindex: put with unexpected smaller revision [%v / %v]\", rev, ki.modified)",
                "+\t}",
                "+\tif len(ki.generations) == 0 {",
                "+\t\tki.generations = append(ki.generations, generation{})",
                "+\t}",
                "+\tg := &ki.generations[len(ki.generations)-1]",
                "+\tif len(g.revs) == 0 { // create a new key",
                "+\t\tkeysGauge.Inc()",
                "+\t\tg.created = rev",
                "+\t}",
                "+\tg.revs = append(g.revs, rev)",
                "+\tg.ver++",
                "+\tki.modified = rev",
                "+}",
                "+",
                "+func (ki *keyIndex) restore(created, modified revision, ver int64) {",
                "+\tif len(ki.generations) != 0 {",
                "+\t\tplog.Panicf(\"store.keyindex: cannot restore non-empty keyIndex\")",
                "+\t}",
                "+",
                "+\tki.modified = modified",
                "+\tg := generation{created: created, ver: ver, revs: []revision{modified}}",
                "+\tki.generations = append(ki.generations, g)",
                "+\tkeysGauge.Inc()",
                "+}",
                "+",
                "+// tombstone puts a revision, pointing to a tombstone, to the keyIndex.",
                "+// It also creates a new empty generation in the keyIndex.",
                "+// It returns ErrRevisionNotFound when tombstone on an empty generation.",
                "+func (ki *keyIndex) tombstone(main int64, sub int64) error {",
                "+\tif ki.isEmpty() {",
                "+\t\tplog.Panicf(\"store.keyindex: unexpected tombstone on empty keyIndex %s\", string(ki.key))",
                "+\t}",
                "+\tif ki.generations[len(ki.generations)-1].isEmpty() {",
                "+\t\treturn ErrRevisionNotFound",
                "+\t}",
                "+\tki.put(main, sub)",
                "+\tki.generations = append(ki.generations, generation{})",
                "+\tkeysGauge.Dec()",
                "+\treturn nil",
                "+}",
                "+",
                "+// get gets the modified, created revision and version of the key that satisfies the given atRev.",
                "+// Rev must be higher than or equal to the given atRev.",
                "+func (ki *keyIndex) get(atRev int64) (modified, created revision, ver int64, err error) {",
                "+\tif ki.isEmpty() {",
                "+\t\tplog.Panicf(\"store.keyindex: unexpected get on empty keyIndex %s\", string(ki.key))",
                "+\t}",
                "+\tg := ki.findGeneration(atRev)",
                "+\tif g.isEmpty() {",
                "+\t\treturn revision{}, revision{}, 0, ErrRevisionNotFound",
                "+\t}",
                "+",
                "+\tn := g.walk(func(rev revision) bool { return rev.main > atRev })",
                "+\tif n != -1 {",
                "+\t\treturn g.revs[n], g.created, g.ver - int64(len(g.revs)-n-1), nil",
                "+\t}",
                "+",
                "+\treturn revision{}, revision{}, 0, ErrRevisionNotFound",
                "+}",
                "+",
                "+// since returns revisions since the given rev. Only the revision with the",
                "+// largest sub revision will be returned if multiple revisions have the same",
                "+// main revision.",
                "+func (ki *keyIndex) since(rev int64) []revision {",
                "+\tif ki.isEmpty() {",
                "+\t\tplog.Panicf(\"store.keyindex: unexpected get on empty keyIndex %s\", string(ki.key))",
                "+\t}",
                "+\tsince := revision{rev, 0}",
                "+\tvar gi int",
                "+\t// find the generations to start checking",
                "+\tfor gi = len(ki.generations) - 1; gi > 0; gi-- {",
                "+\t\tg := ki.generations[gi]",
                "+\t\tif g.isEmpty() {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tif since.GreaterThan(g.created) {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tvar revs []revision",
                "+\tvar last int64",
                "+\tfor ; gi < len(ki.generations); gi++ {",
                "+\t\tfor _, r := range ki.generations[gi].revs {",
                "+\t\t\tif since.GreaterThan(r) {",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\tif r.main == last {",
                "+\t\t\t\t// replace the revision with a new one that has higher sub value,",
                "+\t\t\t\t// because the original one should not be seen by external",
                "+\t\t\t\trevs[len(revs)-1] = r",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\trevs = append(revs, r)",
                "+\t\t\tlast = r.main",
                "+\t\t}",
                "+\t}",
                "+\treturn revs",
                "+}",
                "+",
                "+// compact compacts a keyIndex by removing the versions with smaller or equal",
                "+// revision than the given atRev except the largest one (If the largest one is",
                "+// a tombstone, it will not be kept).",
                "+// If a generation becomes empty during compaction, it will be removed.",
                "+func (ki *keyIndex) compact(atRev int64, available map[revision]struct{}) {",
                "+\tif ki.isEmpty() {",
                "+\t\tplog.Panicf(\"store.keyindex: unexpected compact on empty keyIndex %s\", string(ki.key))",
                "+\t}",
                "+",
                "+\tgenIdx, revIndex := ki.doCompact(atRev, available)",
                "+",
                "+\tg := &ki.generations[genIdx]",
                "+\tif !g.isEmpty() {",
                "+\t\t// remove the previous contents.",
                "+\t\tif revIndex != -1 {",
                "+\t\t\tg.revs = g.revs[revIndex:]",
                "+\t\t}",
                "+\t\t// remove any tombstone",
                "+\t\tif len(g.revs) == 1 && genIdx != len(ki.generations)-1 {",
                "+\t\t\tdelete(available, g.revs[0])",
                "+\t\t\tgenIdx++",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// remove the previous generations.",
                "+\tki.generations = ki.generations[genIdx:]",
                "+}",
                "+",
                "+// keep finds the revision to be kept if compact is called at given atRev.",
                "+func (ki *keyIndex) keep(atRev int64, available map[revision]struct{}) {",
                "+\tif ki.isEmpty() {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tgenIdx, revIndex := ki.doCompact(atRev, available)",
                "+\tg := &ki.generations[genIdx]",
                "+\tif !g.isEmpty() {",
                "+\t\t// remove any tombstone",
                "+\t\tif revIndex == len(g.revs)-1 && genIdx != len(ki.generations)-1 {",
                "+\t\t\tdelete(available, g.revs[revIndex])",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func (ki *keyIndex) doCompact(atRev int64, available map[revision]struct{}) (genIdx int, revIndex int) {",
                "+\t// walk until reaching the first revision smaller or equal to \"atRev\",",
                "+\t// and add the revision to the available map",
                "+\tf := func(rev revision) bool {",
                "+\t\tif rev.main <= atRev {",
                "+\t\t\tavailable[rev] = struct{}{}",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t\treturn true",
                "+\t}",
                "+",
                "+\tgenIdx, g := 0, &ki.generations[0]",
                "+\t// find first generation includes atRev or created after atRev",
                "+\tfor genIdx < len(ki.generations)-1 {",
                "+\t\tif tomb := g.revs[len(g.revs)-1].main; tomb > atRev {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\tgenIdx++",
                "+\t\tg = &ki.generations[genIdx]",
                "+\t}",
                "+",
                "+\trevIndex = g.walk(f)",
                "+",
                "+\treturn genIdx, revIndex",
                "+}",
                "+",
                "+func (ki *keyIndex) isEmpty() bool {",
                "+\treturn len(ki.generations) == 1 && ki.generations[0].isEmpty()",
                "+}",
                "+",
                "+// findGeneration finds out the generation of the keyIndex that the",
                "+// given rev belongs to. If the given rev is at the gap of two generations,",
                "+// which means that the key does not exist at the given rev, it returns nil.",
                "+func (ki *keyIndex) findGeneration(rev int64) *generation {",
                "+\tlastg := len(ki.generations) - 1",
                "+\tcg := lastg",
                "+",
                "+\tfor cg >= 0 {",
                "+\t\tif len(ki.generations[cg].revs) == 0 {",
                "+\t\t\tcg--",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tg := ki.generations[cg]",
                "+\t\tif cg != lastg {",
                "+\t\t\tif tomb := g.revs[len(g.revs)-1].main; tomb <= rev {",
                "+\t\t\t\treturn nil",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif g.revs[0].main <= rev {",
                "+\t\t\treturn &ki.generations[cg]",
                "+\t\t}",
                "+\t\tcg--",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+",
                "+func (a *keyIndex) Less(b btree.Item) bool {",
                "+\treturn bytes.Compare(a.key, b.(*keyIndex).key) == -1",
                "+}",
                "+",
                "+func (a *keyIndex) equal(b *keyIndex) bool {",
                "+\tif !bytes.Equal(a.key, b.key) {",
                "+\t\treturn false",
                "+\t}",
                "+\tif a.modified != b.modified {",
                "+\t\treturn false",
                "+\t}",
                "+\tif len(a.generations) != len(b.generations) {",
                "+\t\treturn false",
                "+\t}",
                "+\tfor i := range a.generations {",
                "+\t\tag, bg := a.generations[i], b.generations[i]",
                "+\t\tif !ag.equal(bg) {",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t}",
                "+\treturn true",
                "+}",
                "+",
                "+func (ki *keyIndex) String() string {",
                "+\tvar s string",
                "+\tfor _, g := range ki.generations {",
                "+\t\ts += g.String()",
                "+\t}",
                "+\treturn s",
                "+}",
                "+",
                "+// generation contains multiple revisions of a key.",
                "+type generation struct {",
                "+\tver     int64",
                "+\tcreated revision // when the generation is created (put in first revision).",
                "+\trevs    []revision",
                "+}",
                "+",
                "+func (g *generation) isEmpty() bool { return g == nil || len(g.revs) == 0 }",
                "+",
                "+// walk walks through the revisions in the generation in descending order.",
                "+// It passes the revision to the given function.",
                "+// walk returns until: 1. it finishes walking all pairs 2. the function returns false.",
                "+// walk returns the position at where it stopped. If it stopped after",
                "+// finishing walking, -1 will be returned.",
                "+func (g *generation) walk(f func(rev revision) bool) int {",
                "+\tl := len(g.revs)",
                "+\tfor i := range g.revs {",
                "+\t\tok := f(g.revs[l-i-1])",
                "+\t\tif !ok {",
                "+\t\t\treturn l - i - 1",
                "+\t\t}",
                "+\t}",
                "+\treturn -1",
                "+}",
                "+",
                "+func (g *generation) String() string {",
                "+\treturn fmt.Sprintf(\"g: created[%d] ver[%d], revs %#v\\n\", g.created, g.ver, g.revs)",
                "+}",
                "+",
                "+func (a generation) equal(b generation) bool {",
                "+\tif a.ver != b.ver {",
                "+\t\treturn false",
                "+\t}",
                "+\tif len(a.revs) != len(b.revs) {",
                "+\t\treturn false",
                "+\t}",
                "+",
                "+\tfor i := range a.revs {",
                "+\t\tar, br := a.revs[i], b.revs[i]",
                "+\t\tif ar != br {",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t}",
                "+\treturn true",
                "+}",
                "diff --git a/mvcc/key_index_test.go b/mvcc/key_index_test.go",
                "new file mode 100644",
                "index 000000000..57e6a9cd7",
                "--- /dev/null",
                "+++ b/mvcc/key_index_test.go",
                "@@ -0,0 +1,698 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+)",
                "+",
                "+func TestKeyIndexGet(t *testing.T) {",
                "+\t// key: \"foo\"",
                "+\t// rev: 16",
                "+\t// generations:",
                "+\t//    {empty}",
                "+\t//    {{14, 0}[1], {14, 1}[2], {16, 0}(t)[3]}",
                "+\t//    {{8, 0}[1], {10, 0}[2], {12, 0}(t)[3]}",
                "+\t//    {{2, 0}[1], {4, 0}[2], {6, 0}(t)[3]}",
                "+\tki := newTestKeyIndex()",
                "+\tki.compact(4, make(map[revision]struct{}))",
                "+",
                "+\ttests := []struct {",
                "+\t\trev int64",
                "+",
                "+\t\twmod   revision",
                "+\t\twcreat revision",
                "+\t\twver   int64",
                "+\t\twerr   error",
                "+\t}{",
                "+\t\t{17, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t\t{16, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+",
                "+\t\t// get on generation 3",
                "+\t\t{15, revision{14, 1}, revision{14, 0}, 2, nil},",
                "+\t\t{14, revision{14, 1}, revision{14, 0}, 2, nil},",
                "+",
                "+\t\t{13, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t\t{12, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+",
                "+\t\t// get on generation 2",
                "+\t\t{11, revision{10, 0}, revision{8, 0}, 2, nil},",
                "+\t\t{10, revision{10, 0}, revision{8, 0}, 2, nil},",
                "+\t\t{9, revision{8, 0}, revision{8, 0}, 1, nil},",
                "+\t\t{8, revision{8, 0}, revision{8, 0}, 1, nil},",
                "+",
                "+\t\t{7, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t\t{6, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+",
                "+\t\t// get on generation 1",
                "+\t\t{5, revision{4, 0}, revision{2, 0}, 2, nil},",
                "+\t\t{4, revision{4, 0}, revision{2, 0}, 2, nil},",
                "+",
                "+\t\t{3, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t\t{2, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t\t{1, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t\t{0, revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\tmod, creat, ver, err := ki.get(tt.rev)",
                "+\t\tif err != tt.werr {",
                "+\t\t\tt.Errorf(\"#%d: err = %v, want %v\", i, err, tt.werr)",
                "+\t\t}",
                "+\t\tif mod != tt.wmod {",
                "+\t\t\tt.Errorf(\"#%d: modified = %+v, want %+v\", i, mod, tt.wmod)",
                "+\t\t}",
                "+\t\tif creat != tt.wcreat {",
                "+\t\t\tt.Errorf(\"#%d: created = %+v, want %+v\", i, creat, tt.wcreat)",
                "+\t\t}",
                "+\t\tif ver != tt.wver {",
                "+\t\t\tt.Errorf(\"#%d: version = %d, want %d\", i, ver, tt.wver)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKeyIndexSince(t *testing.T) {",
                "+\tki := newTestKeyIndex()",
                "+\tki.compact(4, make(map[revision]struct{}))",
                "+",
                "+\tallRevs := []revision{{4, 0}, {6, 0}, {8, 0}, {10, 0}, {12, 0}, {14, 1}, {16, 0}}",
                "+\ttests := []struct {",
                "+\t\trev int64",
                "+",
                "+\t\twrevs []revision",
                "+\t}{",
                "+\t\t{17, nil},",
                "+\t\t{16, allRevs[6:]},",
                "+\t\t{15, allRevs[6:]},",
                "+\t\t{14, allRevs[5:]},",
                "+\t\t{13, allRevs[5:]},",
                "+\t\t{12, allRevs[4:]},",
                "+\t\t{11, allRevs[4:]},",
                "+\t\t{10, allRevs[3:]},",
                "+\t\t{9, allRevs[3:]},",
                "+\t\t{8, allRevs[2:]},",
                "+\t\t{7, allRevs[2:]},",
                "+\t\t{6, allRevs[1:]},",
                "+\t\t{5, allRevs[1:]},",
                "+\t\t{4, allRevs},",
                "+\t\t{3, allRevs},",
                "+\t\t{2, allRevs},",
                "+\t\t{1, allRevs},",
                "+\t\t{0, allRevs},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\trevs := ki.since(tt.rev)",
                "+\t\tif !reflect.DeepEqual(revs, tt.wrevs) {",
                "+\t\t\tt.Errorf(\"#%d: revs = %+v, want %+v\", i, revs, tt.wrevs)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKeyIndexPut(t *testing.T) {",
                "+\tki := &keyIndex{key: []byte(\"foo\")}",
                "+\tki.put(5, 0)",
                "+",
                "+\twki := &keyIndex{",
                "+\t\tkey:         []byte(\"foo\"),",
                "+\t\tmodified:    revision{5, 0},",
                "+\t\tgenerations: []generation{{created: revision{5, 0}, ver: 1, revs: []revision{{main: 5}}}},",
                "+\t}",
                "+\tif !reflect.DeepEqual(ki, wki) {",
                "+\t\tt.Errorf(\"ki = %+v, want %+v\", ki, wki)",
                "+\t}",
                "+",
                "+\tki.put(7, 0)",
                "+",
                "+\twki = &keyIndex{",
                "+\t\tkey:         []byte(\"foo\"),",
                "+\t\tmodified:    revision{7, 0},",
                "+\t\tgenerations: []generation{{created: revision{5, 0}, ver: 2, revs: []revision{{main: 5}, {main: 7}}}},",
                "+\t}",
                "+\tif !reflect.DeepEqual(ki, wki) {",
                "+\t\tt.Errorf(\"ki = %+v, want %+v\", ki, wki)",
                "+\t}",
                "+}",
                "+",
                "+func TestKeyIndexRestore(t *testing.T) {",
                "+\tki := &keyIndex{key: []byte(\"foo\")}",
                "+\tki.restore(revision{5, 0}, revision{7, 0}, 2)",
                "+",
                "+\twki := &keyIndex{",
                "+\t\tkey:         []byte(\"foo\"),",
                "+\t\tmodified:    revision{7, 0},",
                "+\t\tgenerations: []generation{{created: revision{5, 0}, ver: 2, revs: []revision{{main: 7}}}},",
                "+\t}",
                "+\tif !reflect.DeepEqual(ki, wki) {",
                "+\t\tt.Errorf(\"ki = %+v, want %+v\", ki, wki)",
                "+\t}",
                "+}",
                "+",
                "+func TestKeyIndexTombstone(t *testing.T) {",
                "+\tki := &keyIndex{key: []byte(\"foo\")}",
                "+\tki.put(5, 0)",
                "+",
                "+\terr := ki.tombstone(7, 0)",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"unexpected tombstone error: %v\", err)",
                "+\t}",
                "+",
                "+\twki := &keyIndex{",
                "+\t\tkey:         []byte(\"foo\"),",
                "+\t\tmodified:    revision{7, 0},",
                "+\t\tgenerations: []generation{{created: revision{5, 0}, ver: 2, revs: []revision{{main: 5}, {main: 7}}}, {}},",
                "+\t}",
                "+\tif !reflect.DeepEqual(ki, wki) {",
                "+\t\tt.Errorf(\"ki = %+v, want %+v\", ki, wki)",
                "+\t}",
                "+",
                "+\tki.put(8, 0)",
                "+\tki.put(9, 0)",
                "+\terr = ki.tombstone(15, 0)",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"unexpected tombstone error: %v\", err)",
                "+\t}",
                "+",
                "+\twki = &keyIndex{",
                "+\t\tkey:      []byte(\"foo\"),",
                "+\t\tmodified: revision{15, 0},",
                "+\t\tgenerations: []generation{",
                "+\t\t\t{created: revision{5, 0}, ver: 2, revs: []revision{{main: 5}, {main: 7}}},",
                "+\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 9}, {main: 15}}},",
                "+\t\t\t{},",
                "+\t\t},",
                "+\t}",
                "+\tif !reflect.DeepEqual(ki, wki) {",
                "+\t\tt.Errorf(\"ki = %+v, want %+v\", ki, wki)",
                "+\t}",
                "+",
                "+\terr = ki.tombstone(16, 0)",
                "+\tif err != ErrRevisionNotFound {",
                "+\t\tt.Errorf(\"tombstone error = %v, want %v\", err, ErrRevisionNotFound)",
                "+\t}",
                "+}",
                "+",
                "+func TestKeyIndexCompactAndKeep(t *testing.T) {",
                "+\ttests := []struct {",
                "+\t\tcompact int64",
                "+",
                "+\t\twki *keyIndex",
                "+\t\twam map[revision]struct{}",
                "+\t}{",
                "+\t\t{",
                "+\t\t\t1,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{2, 0}, ver: 3, revs: []revision{{main: 2}, {main: 4}, {main: 6}}},",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t2,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{2, 0}, ver: 3, revs: []revision{{main: 2}, {main: 4}, {main: 6}}},",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 2}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t3,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{2, 0}, ver: 3, revs: []revision{{main: 2}, {main: 4}, {main: 6}}},",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 2}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t4,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{2, 0}, ver: 3, revs: []revision{{main: 4}, {main: 6}}},",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 4}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t5,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{2, 0}, ver: 3, revs: []revision{{main: 4}, {main: 6}}},",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 4}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t6,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t7,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t8,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 8}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t9,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 8}, {main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 8}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t10,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 10}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t11,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{8, 0}, ver: 3, revs: []revision{{main: 10}, {main: 12}}},",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 10}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t12,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t13,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14}, {main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t14,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 14, sub: 1}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t15,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{14, 0}, ver: 3, revs: []revision{{main: 14, sub: 1}, {main: 16}}},",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 14, sub: 1}: {},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t16,",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{16, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tmap[revision]struct{}{},",
                "+\t\t},",
                "+\t}",
                "+",
                "+\t// Continuous Compaction and finding Keep",
                "+\tki := newTestKeyIndex()",
                "+\tfor i, tt := range tests {",
                "+\t\tam := make(map[revision]struct{})",
                "+\t\tkiclone := cloneKeyIndex(ki)",
                "+\t\tki.keep(tt.compact, am)",
                "+\t\tif !reflect.DeepEqual(ki, kiclone) {",
                "+\t\t\tt.Errorf(\"#%d: ki = %+v, want %+v\", i, ki, kiclone)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(am, tt.wam) {",
                "+\t\t\tt.Errorf(\"#%d: am = %+v, want %+v\", i, am, tt.wam)",
                "+\t\t}",
                "+\t\tam = make(map[revision]struct{})",
                "+\t\tki.compact(tt.compact, am)",
                "+\t\tif !reflect.DeepEqual(ki, tt.wki) {",
                "+\t\t\tt.Errorf(\"#%d: ki = %+v, want %+v\", i, ki, tt.wki)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(am, tt.wam) {",
                "+\t\t\tt.Errorf(\"#%d: am = %+v, want %+v\", i, am, tt.wam)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// Jump Compaction and finding Keep",
                "+\tki = newTestKeyIndex()",
                "+\tfor i, tt := range tests {",
                "+\t\tif (i%2 == 0 && i < 6) || (i%2 == 1 && i > 6) {",
                "+\t\t\tam := make(map[revision]struct{})",
                "+\t\t\tkiclone := cloneKeyIndex(ki)",
                "+\t\t\tki.keep(tt.compact, am)",
                "+\t\t\tif !reflect.DeepEqual(ki, kiclone) {",
                "+\t\t\t\tt.Errorf(\"#%d: ki = %+v, want %+v\", i, ki, kiclone)",
                "+\t\t\t}",
                "+\t\t\tif !reflect.DeepEqual(am, tt.wam) {",
                "+\t\t\t\tt.Errorf(\"#%d: am = %+v, want %+v\", i, am, tt.wam)",
                "+\t\t\t}",
                "+\t\t\tam = make(map[revision]struct{})",
                "+\t\t\tki.compact(tt.compact, am)",
                "+\t\t\tif !reflect.DeepEqual(ki, tt.wki) {",
                "+\t\t\t\tt.Errorf(\"#%d: ki = %+v, want %+v\", i, ki, tt.wki)",
                "+\t\t\t}",
                "+\t\t\tif !reflect.DeepEqual(am, tt.wam) {",
                "+\t\t\t\tt.Errorf(\"#%d: am = %+v, want %+v\", i, am, tt.wam)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tkiClone := newTestKeyIndex()",
                "+\t// Once Compaction and finding Keep",
                "+\tfor i, tt := range tests {",
                "+\t\tki := newTestKeyIndex()",
                "+\t\tam := make(map[revision]struct{})",
                "+\t\tki.keep(tt.compact, am)",
                "+\t\tif !reflect.DeepEqual(ki, kiClone) {",
                "+\t\t\tt.Errorf(\"#%d: ki = %+v, want %+v\", i, ki, kiClone)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(am, tt.wam) {",
                "+\t\t\tt.Errorf(\"#%d: am = %+v, want %+v\", i, am, tt.wam)",
                "+\t\t}",
                "+\t\tam = make(map[revision]struct{})",
                "+\t\tki.compact(tt.compact, am)",
                "+\t\tif !reflect.DeepEqual(ki, tt.wki) {",
                "+\t\t\tt.Errorf(\"#%d: ki = %+v, want %+v\", i, ki, tt.wki)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(am, tt.wam) {",
                "+\t\t\tt.Errorf(\"#%d: am = %+v, want %+v\", i, am, tt.wam)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func cloneKeyIndex(ki *keyIndex) *keyIndex {",
                "+\tgenerations := make([]generation, len(ki.generations))",
                "+\tfor i, gen := range ki.generations {",
                "+\t\tgenerations[i] = *cloneGeneration(&gen)",
                "+\t}",
                "+\treturn &keyIndex{ki.key, ki.modified, generations}",
                "+}",
                "+",
                "+func cloneGeneration(g *generation) *generation {",
                "+\tif g.revs == nil {",
                "+\t\treturn &generation{g.ver, g.created, nil}",
                "+\t}",
                "+\ttmp := make([]revision, len(g.revs))",
                "+\tcopy(tmp, g.revs)",
                "+\treturn &generation{g.ver, g.created, tmp}",
                "+}",
                "+",
                "+// test that compact on version that higher than last modified version works well",
                "+func TestKeyIndexCompactOnFurtherRev(t *testing.T) {",
                "+\tki := &keyIndex{key: []byte(\"foo\")}",
                "+\tki.put(1, 0)",
                "+\tki.put(2, 0)",
                "+\tam := make(map[revision]struct{})",
                "+\tki.compact(3, am)",
                "+",
                "+\twki := &keyIndex{",
                "+\t\tkey:      []byte(\"foo\"),",
                "+\t\tmodified: revision{2, 0},",
                "+\t\tgenerations: []generation{",
                "+\t\t\t{created: revision{1, 0}, ver: 2, revs: []revision{{main: 2}}},",
                "+\t\t},",
                "+\t}",
                "+\twam := map[revision]struct{}{",
                "+\t\t{main: 2}: {},",
                "+\t}",
                "+\tif !reflect.DeepEqual(ki, wki) {",
                "+\t\tt.Errorf(\"ki = %+v, want %+v\", ki, wki)",
                "+\t}",
                "+\tif !reflect.DeepEqual(am, wam) {",
                "+\t\tt.Errorf(\"am = %+v, want %+v\", am, wam)",
                "+\t}",
                "+}",
                "+",
                "+func TestKeyIndexIsEmpty(t *testing.T) {",
                "+\ttests := []struct {",
                "+\t\tki *keyIndex",
                "+\t\tw  bool",
                "+\t}{",
                "+\t\t{",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:         []byte(\"foo\"),",
                "+\t\t\t\tgenerations: []generation{{}},",
                "+\t\t\t},",
                "+\t\t\ttrue,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t&keyIndex{",
                "+\t\t\t\tkey:      []byte(\"foo\"),",
                "+\t\t\t\tmodified: revision{2, 0},",
                "+\t\t\t\tgenerations: []generation{",
                "+\t\t\t\t\t{created: revision{1, 0}, ver: 2, revs: []revision{{main: 2}}},",
                "+\t\t\t\t},",
                "+\t\t\t},",
                "+\t\t\tfalse,",
                "+\t\t},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tg := tt.ki.isEmpty()",
                "+\t\tif g != tt.w {",
                "+\t\t\tt.Errorf(\"#%d: isEmpty = %v, want %v\", i, g, tt.w)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKeyIndexFindGeneration(t *testing.T) {",
                "+\tki := newTestKeyIndex()",
                "+",
                "+\ttests := []struct {",
                "+\t\trev int64",
                "+\t\twg  *generation",
                "+\t}{",
                "+\t\t{0, nil},",
                "+\t\t{1, nil},",
                "+\t\t{2, &ki.generations[0]},",
                "+\t\t{3, &ki.generations[0]},",
                "+\t\t{4, &ki.generations[0]},",
                "+\t\t{5, &ki.generations[0]},",
                "+\t\t{6, nil},",
                "+\t\t{7, nil},",
                "+\t\t{8, &ki.generations[1]},",
                "+\t\t{9, &ki.generations[1]},",
                "+\t\t{10, &ki.generations[1]},",
                "+\t\t{11, &ki.generations[1]},",
                "+\t\t{12, nil},",
                "+\t\t{13, nil},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tg := ki.findGeneration(tt.rev)",
                "+\t\tif g != tt.wg {",
                "+\t\t\tt.Errorf(\"#%d: generation = %+v, want %+v\", i, g, tt.wg)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKeyIndexLess(t *testing.T) {",
                "+\tki := &keyIndex{key: []byte(\"foo\")}",
                "+",
                "+\ttests := []struct {",
                "+\t\tki *keyIndex",
                "+\t\tw  bool",
                "+\t}{",
                "+\t\t{&keyIndex{key: []byte(\"doo\")}, false},",
                "+\t\t{&keyIndex{key: []byte(\"foo\")}, false},",
                "+\t\t{&keyIndex{key: []byte(\"goo\")}, true},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tg := ki.Less(tt.ki)",
                "+\t\tif g != tt.w {",
                "+\t\t\tt.Errorf(\"#%d: Less = %v, want %v\", i, g, tt.w)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestGenerationIsEmpty(t *testing.T) {",
                "+\ttests := []struct {",
                "+\t\tg *generation",
                "+\t\tw bool",
                "+\t}{",
                "+\t\t{nil, true},",
                "+\t\t{&generation{}, true},",
                "+\t\t{&generation{revs: []revision{{main: 1}}}, false},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tg := tt.g.isEmpty()",
                "+\t\tif g != tt.w {",
                "+\t\t\tt.Errorf(\"#%d: isEmpty = %v, want %v\", i, g, tt.w)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestGenerationWalk(t *testing.T) {",
                "+\tg := &generation{",
                "+\t\tver:     3,",
                "+\t\tcreated: revision{2, 0},",
                "+\t\trevs:    []revision{{main: 2}, {main: 4}, {main: 6}},",
                "+\t}",
                "+\ttests := []struct {",
                "+\t\tf  func(rev revision) bool",
                "+\t\twi int",
                "+\t}{",
                "+\t\t{func(rev revision) bool { return rev.main >= 7 }, 2},",
                "+\t\t{func(rev revision) bool { return rev.main >= 6 }, 1},",
                "+\t\t{func(rev revision) bool { return rev.main >= 5 }, 1},",
                "+\t\t{func(rev revision) bool { return rev.main >= 4 }, 0},",
                "+\t\t{func(rev revision) bool { return rev.main >= 3 }, 0},",
                "+\t\t{func(rev revision) bool { return rev.main >= 2 }, -1},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tidx := g.walk(tt.f)",
                "+\t\tif idx != tt.wi {",
                "+\t\t\tt.Errorf(\"#%d: index = %d, want %d\", i, idx, tt.wi)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func newTestKeyIndex() *keyIndex {",
                "+\t// key: \"foo\"",
                "+\t// rev: 16",
                "+\t// generations:",
                "+\t//    {empty}",
                "+\t//    {{14, 0}[1], {14, 1}[2], {16, 0}(t)[3]}",
                "+\t//    {{8, 0}[1], {10, 0}[2], {12, 0}(t)[3]}",
                "+\t//    {{2, 0}[1], {4, 0}[2], {6, 0}(t)[3]}",
                "+",
                "+\tki := &keyIndex{key: []byte(\"foo\")}",
                "+\tki.put(2, 0)",
                "+\tki.put(4, 0)",
                "+\tki.tombstone(6, 0)",
                "+\tki.put(8, 0)",
                "+\tki.put(10, 0)",
                "+\tki.tombstone(12, 0)",
                "+\tki.put(14, 0)",
                "+\tki.put(14, 1)",
                "+\tki.tombstone(16, 0)",
                "+\treturn ki",
                "+}",
                "diff --git a/mvcc/kv.go b/mvcc/kv.go",
                "new file mode 100644",
                "index 000000000..2dad3ad8e",
                "--- /dev/null",
                "+++ b/mvcc/kv.go",
                "@@ -0,0 +1,149 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+)",
                "+",
                "+type RangeOptions struct {",
                "+\tLimit int64",
                "+\tRev   int64",
                "+\tCount bool",
                "+}",
                "+",
                "+type RangeResult struct {",
                "+\tKVs   []mvccpb.KeyValue",
                "+\tRev   int64",
                "+\tCount int",
                "+}",
                "+",
                "+type ReadView interface {",
                "+\t// FirstRev returns the first KV revision at the time of opening the txn.",
                "+\t// After a compaction, the first revision increases to the compaction",
                "+\t// revision.",
                "+\tFirstRev() int64",
                "+",
                "+\t// Rev returns the revision of the KV at the time of opening the txn.",
                "+\tRev() int64",
                "+",
                "+\t// Range gets the keys in the range at rangeRev.",
                "+\t// The returned rev is the current revision of the KV when the operation is executed.",
                "+\t// If rangeRev <=0, range gets the keys at currentRev.",
                "+\t// If `end` is nil, the request returns the key.",
                "+\t// If `end` is not nil and not empty, it gets the keys in range [key, range_end).",
                "+\t// If `end` is not nil and empty, it gets the keys greater than or equal to key.",
                "+\t// Limit limits the number of keys returned.",
                "+\t// If the required rev is compacted, ErrCompacted will be returned.",
                "+\tRange(key, end []byte, ro RangeOptions) (r *RangeResult, err error)",
                "+}",
                "+",
                "+// TxnRead represents a read-only transaction with operations that will not",
                "+// block other read transactions.",
                "+type TxnRead interface {",
                "+\tReadView",
                "+\t// End marks the transaction is complete and ready to commit.",
                "+\tEnd()",
                "+}",
                "+",
                "+type WriteView interface {",
                "+\t// DeleteRange deletes the given range from the store.",
                "+\t// A deleteRange increases the rev of the store if any key in the range exists.",
                "+\t// The number of key deleted will be returned.",
                "+\t// The returned rev is the current revision of the KV when the operation is executed.",
                "+\t// It also generates one event for each key delete in the event history.",
                "+\t// if the `end` is nil, deleteRange deletes the key.",
                "+\t// if the `end` is not nil, deleteRange deletes the keys in range [key, range_end).",
                "+\tDeleteRange(key, end []byte) (n, rev int64)",
                "+",
                "+\t// Put puts the given key, value into the store. Put also takes additional argument lease to",
                "+\t// attach a lease to a key-value pair as meta-data. KV implementation does not validate the lease",
                "+\t// id.",
                "+\t// A put also increases the rev of the store, and generates one event in the event history.",
                "+\t// The returned rev is the current revision of the KV when the operation is executed.",
                "+\tPut(key, value []byte, lease lease.LeaseID) (rev int64)",
                "+}",
                "+",
                "+// TxnWrite represents a transaction that can modify the store.",
                "+type TxnWrite interface {",
                "+\tTxnRead",
                "+\tWriteView",
                "+\t// Changes gets the changes made since opening the write txn.",
                "+\tChanges() []mvccpb.KeyValue",
                "+}",
                "+",
                "+// txnReadWrite coerces a read txn to a write, panicking on any write operation.",
                "+type txnReadWrite struct{ TxnRead }",
                "+",
                "+func (trw *txnReadWrite) DeleteRange(key, end []byte) (n, rev int64) { panic(\"unexpected DeleteRange\") }",
                "+func (trw *txnReadWrite) Put(key, value []byte, lease lease.LeaseID) (rev int64) {",
                "+\tpanic(\"unexpected Put\")",
                "+}",
                "+func (trw *txnReadWrite) Changes() []mvccpb.KeyValue { return nil }",
                "+",
                "+func NewReadOnlyTxnWrite(txn TxnRead) TxnWrite { return &txnReadWrite{txn} }",
                "+",
                "+type KV interface {",
                "+\tReadView",
                "+\tWriteView",
                "+",
                "+\t// Read creates a read transaction.",
                "+\tRead() TxnRead",
                "+",
                "+\t// Write creates a write transaction.",
                "+\tWrite() TxnWrite",
                "+",
                "+\t// Hash computes the hash of the KV's backend.",
                "+\tHash() (hash uint32, revision int64, err error)",
                "+",
                "+\t// HashByRev computes the hash of all MVCC revisions up to a given revision.",
                "+\tHashByRev(rev int64) (hash uint32, revision int64, compactRev int64, err error)",
                "+",
                "+\t// Compact frees all superseded keys with revisions less than rev.",
                "+\tCompact(rev int64) (<-chan struct{}, error)",
                "+",
                "+\t// Commit commits outstanding txns into the underlying backend.",
                "+\tCommit()",
                "+",
                "+\t// Restore restores the KV store from a backend.",
                "+\tRestore(b backend.Backend) error",
                "+\tClose() error",
                "+}",
                "+",
                "+// WatchableKV is a KV that can be watched.",
                "+type WatchableKV interface {",
                "+\tKV",
                "+\tWatchable",
                "+}",
                "+",
                "+// Watchable is the interface that wraps the NewWatchStream function.",
                "+type Watchable interface {",
                "+\t// NewWatchStream returns a WatchStream that can be used to",
                "+\t// watch events happened or happening on the KV.",
                "+\tNewWatchStream() WatchStream",
                "+}",
                "+",
                "+// ConsistentWatchableKV is a WatchableKV that understands the consistency",
                "+// algorithm and consistent index.",
                "+// If the consistent index of executing entry is not larger than the",
                "+// consistent index of ConsistentWatchableKV, all operations in",
                "+// this entry are skipped and return empty response.",
                "+type ConsistentWatchableKV interface {",
                "+\tWatchableKV",
                "+\t// ConsistentIndex returns the current consistent index of the KV.",
                "+\tConsistentIndex() uint64",
                "+}",
                "diff --git a/mvcc/kv_test.go b/mvcc/kv_test.go",
                "new file mode 100644",
                "index 000000000..2d7dc01ff",
                "--- /dev/null",
                "+++ b/mvcc/kv_test.go",
                "@@ -0,0 +1,831 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"os\"",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+",
                "+\t\"github.com/prometheus/client_golang/prometheus\"",
                "+\tdto \"github.com/prometheus/client_model/go\"",
                "+)",
                "+",
                "+// Functional tests for features implemented in v3 store. It treats v3 store",
                "+// as a black box, and tests it by feeding the input and validating the output.",
                "+",
                "+// TODO: add similar tests on operations in one txn/rev",
                "+",
                "+type (",
                "+\trangeFunc       func(kv KV, key, end []byte, ro RangeOptions) (*RangeResult, error)",
                "+\tputFunc         func(kv KV, key, value []byte, lease lease.LeaseID) int64",
                "+\tdeleteRangeFunc func(kv KV, key, end []byte) (n, rev int64)",
                "+)",
                "+",
                "+var (",
                "+\tnormalRangeFunc = func(kv KV, key, end []byte, ro RangeOptions) (*RangeResult, error) {",
                "+\t\treturn kv.Range(key, end, ro)",
                "+\t}",
                "+\ttxnRangeFunc = func(kv KV, key, end []byte, ro RangeOptions) (*RangeResult, error) {",
                "+\t\ttxn := kv.Read()",
                "+\t\tdefer txn.End()",
                "+\t\treturn txn.Range(key, end, ro)",
                "+\t}",
                "+",
                "+\tnormalPutFunc = func(kv KV, key, value []byte, lease lease.LeaseID) int64 {",
                "+\t\treturn kv.Put(key, value, lease)",
                "+\t}",
                "+\ttxnPutFunc = func(kv KV, key, value []byte, lease lease.LeaseID) int64 {",
                "+\t\ttxn := kv.Write()",
                "+\t\tdefer txn.End()",
                "+\t\treturn txn.Put(key, value, lease)",
                "+\t}",
                "+",
                "+\tnormalDeleteRangeFunc = func(kv KV, key, end []byte) (n, rev int64) {",
                "+\t\treturn kv.DeleteRange(key, end)",
                "+\t}",
                "+\ttxnDeleteRangeFunc = func(kv KV, key, end []byte) (n, rev int64) {",
                "+\t\ttxn := kv.Write()",
                "+\t\tdefer txn.End()",
                "+\t\treturn txn.DeleteRange(key, end)",
                "+\t}",
                "+)",
                "+",
                "+func TestKVRange(t *testing.T)    { testKVRange(t, normalRangeFunc) }",
                "+func TestKVTxnRange(t *testing.T) { testKVRange(t, txnRangeFunc) }",
                "+",
                "+func testKVRange(t *testing.T, f rangeFunc) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tkvs := put3TestKVs(s)",
                "+",
                "+\twrev := int64(4)",
                "+\ttests := []struct {",
                "+\t\tkey, end []byte",
                "+\t\twkvs     []mvccpb.KeyValue",
                "+\t}{",
                "+\t\t// get no keys",
                "+\t\t{",
                "+\t\t\t[]byte(\"doo\"), []byte(\"foo\"),",
                "+\t\t\tnil,",
                "+\t\t},",
                "+\t\t// get no keys when key == end",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo\"),",
                "+\t\t\tnil,",
                "+\t\t},",
                "+\t\t// get no keys when ranging single key",
                "+\t\t{",
                "+\t\t\t[]byte(\"doo\"), nil,",
                "+\t\t\tnil,",
                "+\t\t},",
                "+\t\t// get all keys",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo3\"),",
                "+\t\t\tkvs,",
                "+\t\t},",
                "+\t\t// get partial keys",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo1\"),",
                "+\t\t\tkvs[:1],",
                "+\t\t},",
                "+\t\t// get single key",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), nil,",
                "+\t\t\tkvs[:1],",
                "+\t\t},",
                "+\t\t// get entire keyspace",
                "+\t\t{",
                "+\t\t\t[]byte(\"\"), []byte(\"\"),",
                "+\t\t\tkvs,",
                "+\t\t},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\tr, err := f(s, tt.key, tt.end, RangeOptions{})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\tif r.Rev != wrev {",
                "+\t\t\tt.Errorf(\"#%d: rev = %d, want %d\", i, r.Rev, wrev)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(r.KVs, tt.wkvs) {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, r.KVs, tt.wkvs)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKVRangeRev(t *testing.T)    { testKVRangeRev(t, normalRangeFunc) }",
                "+func TestKVTxnRangeRev(t *testing.T) { testKVRangeRev(t, txnRangeFunc) }",
                "+",
                "+func testKVRangeRev(t *testing.T, f rangeFunc) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tkvs := put3TestKVs(s)",
                "+",
                "+\ttests := []struct {",
                "+\t\trev  int64",
                "+\t\twrev int64",
                "+\t\twkvs []mvccpb.KeyValue",
                "+\t}{",
                "+\t\t{-1, 4, kvs},",
                "+\t\t{0, 4, kvs},",
                "+\t\t{2, 4, kvs[:1]},",
                "+\t\t{3, 4, kvs[:2]},",
                "+\t\t{4, 4, kvs},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\tr, err := f(s, []byte(\"foo\"), []byte(\"foo3\"), RangeOptions{Rev: tt.rev})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\tif r.Rev != tt.wrev {",
                "+\t\t\tt.Errorf(\"#%d: rev = %d, want %d\", i, r.Rev, tt.wrev)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(r.KVs, tt.wkvs) {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, r.KVs, tt.wkvs)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKVRangeBadRev(t *testing.T)    { testKVRangeBadRev(t, normalRangeFunc) }",
                "+func TestKVTxnRangeBadRev(t *testing.T) { testKVRangeBadRev(t, txnRangeFunc) }",
                "+",
                "+func testKVRangeBadRev(t *testing.T, f rangeFunc) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tput3TestKVs(s)",
                "+\tif _, err := s.Compact(4); err != nil {",
                "+\t\tt.Fatalf(\"compact error (%v)\", err)",
                "+\t}",
                "+",
                "+\ttests := []struct {",
                "+\t\trev  int64",
                "+\t\twerr error",
                "+\t}{",
                "+\t\t{-1, nil}, // <= 0 is most recent store",
                "+\t\t{0, nil},",
                "+\t\t{1, ErrCompacted},",
                "+\t\t{2, ErrCompacted},",
                "+\t\t{4, nil},",
                "+\t\t{5, ErrFutureRev},",
                "+\t\t{100, ErrFutureRev},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\t_, err := f(s, []byte(\"foo\"), []byte(\"foo3\"), RangeOptions{Rev: tt.rev})",
                "+\t\tif err != tt.werr {",
                "+\t\t\tt.Errorf(\"#%d: error = %v, want %v\", i, err, tt.werr)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKVRangeLimit(t *testing.T)    { testKVRangeLimit(t, normalRangeFunc) }",
                "+func TestKVTxnRangeLimit(t *testing.T) { testKVRangeLimit(t, txnRangeFunc) }",
                "+",
                "+func testKVRangeLimit(t *testing.T, f rangeFunc) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tkvs := put3TestKVs(s)",
                "+",
                "+\twrev := int64(4)",
                "+\ttests := []struct {",
                "+\t\tlimit int64",
                "+\t\twkvs  []mvccpb.KeyValue",
                "+\t}{",
                "+\t\t// no limit",
                "+\t\t{-1, kvs},",
                "+\t\t// no limit",
                "+\t\t{0, kvs},",
                "+\t\t{1, kvs[:1]},",
                "+\t\t{2, kvs[:2]},",
                "+\t\t{3, kvs},",
                "+\t\t{100, kvs},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tr, err := f(s, []byte(\"foo\"), []byte(\"foo3\"), RangeOptions{Limit: tt.limit})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatalf(\"#%d: range error (%v)\", i, err)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(r.KVs, tt.wkvs) {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, r.KVs, tt.wkvs)",
                "+\t\t}",
                "+\t\tif r.Rev != wrev {",
                "+\t\t\tt.Errorf(\"#%d: rev = %d, want %d\", i, r.Rev, wrev)",
                "+\t\t}",
                "+\t\tif r.Count != len(kvs) {",
                "+\t\t\tt.Errorf(\"#%d: count = %d, want %d\", i, r.Count, len(kvs))",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKVPutMultipleTimes(t *testing.T)    { testKVPutMultipleTimes(t, normalPutFunc) }",
                "+func TestKVTxnPutMultipleTimes(t *testing.T) { testKVPutMultipleTimes(t, txnPutFunc) }",
                "+",
                "+func testKVPutMultipleTimes(t *testing.T, f putFunc) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tbase := int64(i + 1)",
                "+",
                "+\t\trev := f(s, []byte(\"foo\"), []byte(\"bar\"), lease.LeaseID(base))",
                "+\t\tif rev != base+1 {",
                "+\t\t\tt.Errorf(\"#%d: rev = %d, want %d\", i, rev, base+1)",
                "+\t\t}",
                "+",
                "+\t\tr, err := s.Range([]byte(\"foo\"), nil, RangeOptions{})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\twkvs := []mvccpb.KeyValue{",
                "+\t\t\t{Key: []byte(\"foo\"), Value: []byte(\"bar\"), CreateRevision: 2, ModRevision: base + 1, Version: base, Lease: base},",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(r.KVs, wkvs) {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, r.KVs, wkvs)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKVDeleteRange(t *testing.T)    { testKVDeleteRange(t, normalDeleteRangeFunc) }",
                "+func TestKVTxnDeleteRange(t *testing.T) { testKVDeleteRange(t, txnDeleteRangeFunc) }",
                "+",
                "+func testKVDeleteRange(t *testing.T, f deleteRangeFunc) {",
                "+\ttests := []struct {",
                "+\t\tkey, end []byte",
                "+",
                "+\t\twrev int64",
                "+\t\twN   int64",
                "+\t}{",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), nil,",
                "+\t\t\t5, 1,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo1\"),",
                "+\t\t\t5, 1,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo2\"),",
                "+\t\t\t5, 2,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo\"), []byte(\"foo3\"),",
                "+\t\t\t5, 3,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo3\"), []byte(\"foo8\"),",
                "+\t\t\t4, 0,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]byte(\"foo3\"), nil,",
                "+\t\t\t4, 0,",
                "+\t\t},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\t\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\t\ts.Put([]byte(\"foo\"), []byte(\"bar\"), lease.NoLease)",
                "+\t\ts.Put([]byte(\"foo1\"), []byte(\"bar1\"), lease.NoLease)",
                "+\t\ts.Put([]byte(\"foo2\"), []byte(\"bar2\"), lease.NoLease)",
                "+",
                "+\t\tn, rev := f(s, tt.key, tt.end)",
                "+\t\tif n != tt.wN || rev != tt.wrev {",
                "+\t\t\tt.Errorf(\"#%d: n = %d, rev = %d, want (%d, %d)\", i, n, rev, tt.wN, tt.wrev)",
                "+\t\t}",
                "+",
                "+\t\tcleanup(s, b, tmpPath)",
                "+\t}",
                "+}",
                "+",
                "+func TestKVDeleteMultipleTimes(t *testing.T)    { testKVDeleteMultipleTimes(t, normalDeleteRangeFunc) }",
                "+func TestKVTxnDeleteMultipleTimes(t *testing.T) { testKVDeleteMultipleTimes(t, txnDeleteRangeFunc) }",
                "+",
                "+func testKVDeleteMultipleTimes(t *testing.T, f deleteRangeFunc) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar\"), lease.NoLease)",
                "+",
                "+\tn, rev := f(s, []byte(\"foo\"), nil)",
                "+\tif n != 1 || rev != 3 {",
                "+\t\tt.Fatalf(\"n = %d, rev = %d, want (%d, %d)\", n, rev, 1, 3)",
                "+\t}",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tn, rev := f(s, []byte(\"foo\"), nil)",
                "+\t\tif n != 0 || rev != 3 {",
                "+\t\t\tt.Fatalf(\"#%d: n = %d, rev = %d, want (%d, %d)\", i, n, rev, 0, 3)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// test that range, put, delete on single key in sequence repeatedly works correctly.",
                "+func TestKVOperationInSequence(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tbase := int64(i*2 + 1)",
                "+",
                "+\t\t// put foo",
                "+\t\trev := s.Put([]byte(\"foo\"), []byte(\"bar\"), lease.NoLease)",
                "+\t\tif rev != base+1 {",
                "+\t\t\tt.Errorf(\"#%d: put rev = %d, want %d\", i, rev, base+1)",
                "+\t\t}",
                "+",
                "+\t\tr, err := s.Range([]byte(\"foo\"), nil, RangeOptions{Rev: base + 1})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\twkvs := []mvccpb.KeyValue{",
                "+\t\t\t{Key: []byte(\"foo\"), Value: []byte(\"bar\"), CreateRevision: base + 1, ModRevision: base + 1, Version: 1, Lease: int64(lease.NoLease)},",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(r.KVs, wkvs) {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, r.KVs, wkvs)",
                "+\t\t}",
                "+\t\tif r.Rev != base+1 {",
                "+\t\t\tt.Errorf(\"#%d: range rev = %d, want %d\", i, rev, base+1)",
                "+\t\t}",
                "+",
                "+\t\t// delete foo",
                "+\t\tn, rev := s.DeleteRange([]byte(\"foo\"), nil)",
                "+\t\tif n != 1 || rev != base+2 {",
                "+\t\t\tt.Errorf(\"#%d: n = %d, rev = %d, want (%d, %d)\", i, n, rev, 1, base+2)",
                "+\t\t}",
                "+",
                "+\t\tr, err = s.Range([]byte(\"foo\"), nil, RangeOptions{Rev: base + 2})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\tif r.KVs != nil {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, r.KVs, nil)",
                "+\t\t}",
                "+\t\tif r.Rev != base+2 {",
                "+\t\t\tt.Errorf(\"#%d: range rev = %d, want %d\", i, r.Rev, base+2)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKVTxnBlockWriteOperations(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\ttests := []func(){",
                "+\t\tfunc() { s.Put([]byte(\"foo\"), nil, lease.NoLease) },",
                "+\t\tfunc() { s.DeleteRange([]byte(\"foo\"), nil) },",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\ttxn := s.Write()",
                "+\t\tdone := make(chan struct{}, 1)",
                "+\t\tgo func() {",
                "+\t\t\ttt()",
                "+\t\t\tdone <- struct{}{}",
                "+\t\t}()",
                "+\t\tselect {",
                "+\t\tcase <-done:",
                "+\t\t\tt.Fatalf(\"#%d: operation failed to be blocked\", i)",
                "+\t\tcase <-time.After(10 * time.Millisecond):",
                "+\t\t}",
                "+",
                "+\t\ttxn.End()",
                "+\t\tselect {",
                "+\t\tcase <-done:",
                "+\t\tcase <-time.After(10 * time.Second):",
                "+\t\t\ttestutil.FatalStack(t, fmt.Sprintf(\"#%d: operation failed to be unblocked\", i))",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// only close backend when we know all the tx are finished",
                "+\tcleanup(s, b, tmpPath)",
                "+}",
                "+",
                "+func TestKVTxnNonBlockRange(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\ttxn := s.Write()",
                "+\tdefer txn.End()",
                "+",
                "+\tdonec := make(chan struct{})",
                "+\tgo func() {",
                "+\t\tdefer close(donec)",
                "+\t\ts.Range([]byte(\"foo\"), nil, RangeOptions{})",
                "+\t}()",
                "+\tselect {",
                "+\tcase <-donec:",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t\tt.Fatalf(\"range operation blocked on write txn\")",
                "+\t}",
                "+}",
                "+",
                "+// test that txn range, put, delete on single key in sequence repeatedly works correctly.",
                "+func TestKVTxnOperationInSequence(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\ttxn := s.Write()",
                "+\t\tbase := int64(i + 1)",
                "+",
                "+\t\t// put foo",
                "+\t\trev := txn.Put([]byte(\"foo\"), []byte(\"bar\"), lease.NoLease)",
                "+\t\tif rev != base+1 {",
                "+\t\t\tt.Errorf(\"#%d: put rev = %d, want %d\", i, rev, base+1)",
                "+\t\t}",
                "+",
                "+\t\tr, err := txn.Range([]byte(\"foo\"), nil, RangeOptions{Rev: base + 1})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\twkvs := []mvccpb.KeyValue{",
                "+\t\t\t{Key: []byte(\"foo\"), Value: []byte(\"bar\"), CreateRevision: base + 1, ModRevision: base + 1, Version: 1, Lease: int64(lease.NoLease)},",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(r.KVs, wkvs) {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, r.KVs, wkvs)",
                "+\t\t}",
                "+\t\tif r.Rev != base+1 {",
                "+\t\t\tt.Errorf(\"#%d: range rev = %d, want %d\", i, r.Rev, base+1)",
                "+\t\t}",
                "+",
                "+\t\t// delete foo",
                "+\t\tn, rev := txn.DeleteRange([]byte(\"foo\"), nil)",
                "+\t\tif n != 1 || rev != base+1 {",
                "+\t\t\tt.Errorf(\"#%d: n = %d, rev = %d, want (%d, %d)\", i, n, rev, 1, base+1)",
                "+\t\t}",
                "+",
                "+\t\tr, err = txn.Range([]byte(\"foo\"), nil, RangeOptions{Rev: base + 1})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Errorf(\"#%d: range error (%v)\", i, err)",
                "+\t\t}",
                "+\t\tif r.KVs != nil {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, r.KVs, nil)",
                "+\t\t}",
                "+\t\tif r.Rev != base+1 {",
                "+\t\t\tt.Errorf(\"#%d: range rev = %d, want %d\", i, r.Rev, base+1)",
                "+\t\t}",
                "+",
                "+\t\ttxn.End()",
                "+\t}",
                "+}",
                "+",
                "+func TestKVCompactReserveLastValue(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar0\"), 1)",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar1\"), 2)",
                "+\ts.DeleteRange([]byte(\"foo\"), nil)",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar2\"), 3)",
                "+",
                "+\t// rev in tests will be called in Compact() one by one on the same store",
                "+\ttests := []struct {",
                "+\t\trev int64",
                "+\t\t// wanted kvs right after the compacted rev",
                "+\t\twkvs []mvccpb.KeyValue",
                "+\t}{",
                "+\t\t{",
                "+\t\t\t1,",
                "+\t\t\t[]mvccpb.KeyValue{",
                "+\t\t\t\t{Key: []byte(\"foo\"), Value: []byte(\"bar0\"), CreateRevision: 2, ModRevision: 2, Version: 1, Lease: 1},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t2,",
                "+\t\t\t[]mvccpb.KeyValue{",
                "+\t\t\t\t{Key: []byte(\"foo\"), Value: []byte(\"bar1\"), CreateRevision: 2, ModRevision: 3, Version: 2, Lease: 2},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t3,",
                "+\t\t\tnil,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t4,",
                "+\t\t\t[]mvccpb.KeyValue{",
                "+\t\t\t\t{Key: []byte(\"foo\"), Value: []byte(\"bar2\"), CreateRevision: 5, ModRevision: 5, Version: 1, Lease: 3},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\t_, err := s.Compact(tt.rev)",
                "+\t\tif err != nil {",
                "+\t\t\tt.Errorf(\"#%d: unexpect compact error %v\", i, err)",
                "+\t\t}",
                "+\t\tr, err := s.Range([]byte(\"foo\"), nil, RangeOptions{Rev: tt.rev + 1})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Errorf(\"#%d: unexpect range error %v\", i, err)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(r.KVs, tt.wkvs) {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, r.KVs, tt.wkvs)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKVCompactBad(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar0\"), lease.NoLease)",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar1\"), lease.NoLease)",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar2\"), lease.NoLease)",
                "+",
                "+\t// rev in tests will be called in Compact() one by one on the same store",
                "+\ttests := []struct {",
                "+\t\trev  int64",
                "+\t\twerr error",
                "+\t}{",
                "+\t\t{0, nil},",
                "+\t\t{1, nil},",
                "+\t\t{1, ErrCompacted},",
                "+\t\t{4, nil},",
                "+\t\t{5, ErrFutureRev},",
                "+\t\t{100, ErrFutureRev},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\t_, err := s.Compact(tt.rev)",
                "+\t\tif err != tt.werr {",
                "+\t\t\tt.Errorf(\"#%d: compact error = %v, want %v\", i, err, tt.werr)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKVHash(t *testing.T) {",
                "+\thashes := make([]uint32, 3)",
                "+",
                "+\tfor i := 0; i < len(hashes); i++ {",
                "+\t\tvar err error",
                "+\t\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\t\tkv := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\t\tkv.Put([]byte(\"foo0\"), []byte(\"bar0\"), lease.NoLease)",
                "+\t\tkv.Put([]byte(\"foo1\"), []byte(\"bar0\"), lease.NoLease)",
                "+\t\thashes[i], _, err = kv.Hash()",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatalf(\"failed to get hash: %v\", err)",
                "+\t\t}",
                "+\t\tcleanup(kv, b, tmpPath)",
                "+\t}",
                "+",
                "+\tfor i := 1; i < len(hashes); i++ {",
                "+\t\tif hashes[i-1] != hashes[i] {",
                "+\t\t\tt.Errorf(\"hash[%d](%d) != hash[%d](%d)\", i-1, hashes[i-1], i, hashes[i])",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestKVRestore(t *testing.T) {",
                "+\ttests := []func(kv KV){",
                "+\t\tfunc(kv KV) {",
                "+\t\t\tkv.Put([]byte(\"foo\"), []byte(\"bar0\"), 1)",
                "+\t\t\tkv.Put([]byte(\"foo\"), []byte(\"bar1\"), 2)",
                "+\t\t\tkv.Put([]byte(\"foo\"), []byte(\"bar2\"), 3)",
                "+\t\t\tkv.Put([]byte(\"foo2\"), []byte(\"bar0\"), 1)",
                "+\t\t},",
                "+\t\tfunc(kv KV) {",
                "+\t\t\tkv.Put([]byte(\"foo\"), []byte(\"bar0\"), 1)",
                "+\t\t\tkv.DeleteRange([]byte(\"foo\"), nil)",
                "+\t\t\tkv.Put([]byte(\"foo\"), []byte(\"bar1\"), 2)",
                "+\t\t},",
                "+\t\tfunc(kv KV) {",
                "+\t\t\tkv.Put([]byte(\"foo\"), []byte(\"bar0\"), 1)",
                "+\t\t\tkv.Put([]byte(\"foo\"), []byte(\"bar1\"), 2)",
                "+\t\t\tkv.Compact(1)",
                "+\t\t},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\t\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\t\ttt(s)",
                "+\t\tvar kvss [][]mvccpb.KeyValue",
                "+\t\tfor k := int64(0); k < 10; k++ {",
                "+\t\t\tr, _ := s.Range([]byte(\"a\"), []byte(\"z\"), RangeOptions{Rev: k})",
                "+\t\t\tkvss = append(kvss, r.KVs)",
                "+\t\t}",
                "+",
                "+\t\tkeysBefore := readGaugeInt(&keysGauge)",
                "+\t\ts.Close()",
                "+",
                "+\t\t// ns should recover the the previous state from backend.",
                "+\t\tns := NewStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\t\tif keysRestore := readGaugeInt(&keysGauge); keysBefore != keysRestore {",
                "+\t\t\tt.Errorf(\"#%d: got %d key count, expected %d\", i, keysRestore, keysBefore)",
                "+\t\t}",
                "+",
                "+\t\t// wait for possible compaction to finish",
                "+\t\ttestutil.WaitSchedule()",
                "+\t\tvar nkvss [][]mvccpb.KeyValue",
                "+\t\tfor k := int64(0); k < 10; k++ {",
                "+\t\t\tr, _ := ns.Range([]byte(\"a\"), []byte(\"z\"), RangeOptions{Rev: k})",
                "+\t\t\tnkvss = append(nkvss, r.KVs)",
                "+\t\t}",
                "+\t\tcleanup(ns, b, tmpPath)",
                "+",
                "+\t\tif !reflect.DeepEqual(nkvss, kvss) {",
                "+\t\t\tt.Errorf(\"#%d: kvs history = %+v, want %+v\", i, nkvss, kvss)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func readGaugeInt(g *prometheus.Gauge) int {",
                "+\tch := make(chan prometheus.Metric, 1)",
                "+\tkeysGauge.Collect(ch)",
                "+\tm := <-ch",
                "+\tmm := &dto.Metric{}",
                "+\tm.Write(mm)",
                "+\treturn int(mm.GetGauge().GetValue())",
                "+}",
                "+",
                "+func TestKVSnapshot(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\twkvs := put3TestKVs(s)",
                "+",
                "+\tnewPath := \"new_test\"",
                "+\tf, err := os.Create(newPath)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdefer os.Remove(newPath)",
                "+",
                "+\tsnap := s.b.Snapshot()",
                "+\tdefer snap.Close()",
                "+\t_, err = snap.WriteTo(f)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tf.Close()",
                "+",
                "+\tns := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer ns.Close()",
                "+\tr, err := ns.Range([]byte(\"a\"), []byte(\"z\"), RangeOptions{})",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"unexpect range error (%v)\", err)",
                "+\t}",
                "+\tif !reflect.DeepEqual(r.KVs, wkvs) {",
                "+\t\tt.Errorf(\"kvs = %+v, want %+v\", r.KVs, wkvs)",
                "+\t}",
                "+\tif r.Rev != 4 {",
                "+\t\tt.Errorf(\"rev = %d, want %d\", r.Rev, 4)",
                "+\t}",
                "+}",
                "+",
                "+func TestWatchableKVWatch(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := WatchableKV(newWatchableStore(b, &lease.FakeLessor{}, nil))",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tdefer w.Close()",
                "+",
                "+\twid, _ := w.Watch(0, []byte(\"foo\"), []byte(\"fop\"), 0)",
                "+",
                "+\twev := []mvccpb.Event{",
                "+\t\t{Type: mvccpb.PUT,",
                "+\t\t\tKv: &mvccpb.KeyValue{",
                "+\t\t\t\tKey:            []byte(\"foo\"),",
                "+\t\t\t\tValue:          []byte(\"bar\"),",
                "+\t\t\t\tCreateRevision: 2,",
                "+\t\t\t\tModRevision:    2,",
                "+\t\t\t\tVersion:        1,",
                "+\t\t\t\tLease:          1,",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tType: mvccpb.PUT,",
                "+\t\t\tKv: &mvccpb.KeyValue{",
                "+\t\t\t\tKey:            []byte(\"foo1\"),",
                "+\t\t\t\tValue:          []byte(\"bar1\"),",
                "+\t\t\t\tCreateRevision: 3,",
                "+\t\t\t\tModRevision:    3,",
                "+\t\t\t\tVersion:        1,",
                "+\t\t\t\tLease:          2,",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tType: mvccpb.PUT,",
                "+\t\t\tKv: &mvccpb.KeyValue{",
                "+\t\t\t\tKey:            []byte(\"foo1\"),",
                "+\t\t\t\tValue:          []byte(\"bar11\"),",
                "+\t\t\t\tCreateRevision: 3,",
                "+\t\t\t\tModRevision:    4,",
                "+\t\t\t\tVersion:        2,",
                "+\t\t\t\tLease:          3,",
                "+\t\t\t},",
                "+\t\t},",
                "+\t}",
                "+",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar\"), 1)",
                "+\tselect {",
                "+\tcase resp := <-w.Chan():",
                "+\t\tif resp.WatchID != wid {",
                "+\t\t\tt.Errorf(\"resp.WatchID got = %d, want = %d\", resp.WatchID, wid)",
                "+\t\t}",
                "+\t\tev := resp.Events[0]",
                "+\t\tif !reflect.DeepEqual(ev, wev[0]) {",
                "+\t\t\tt.Errorf(\"watched event = %+v, want %+v\", ev, wev[0])",
                "+\t\t}",
                "+\tcase <-time.After(5 * time.Second):",
                "+\t\t// CPU might be too slow, and the routine is not able to switch around",
                "+\t\ttestutil.FatalStack(t, \"failed to watch the event\")",
                "+\t}",
                "+",
                "+\ts.Put([]byte(\"foo1\"), []byte(\"bar1\"), 2)",
                "+\tselect {",
                "+\tcase resp := <-w.Chan():",
                "+\t\tif resp.WatchID != wid {",
                "+\t\t\tt.Errorf(\"resp.WatchID got = %d, want = %d\", resp.WatchID, wid)",
                "+\t\t}",
                "+\t\tev := resp.Events[0]",
                "+\t\tif !reflect.DeepEqual(ev, wev[1]) {",
                "+\t\t\tt.Errorf(\"watched event = %+v, want %+v\", ev, wev[1])",
                "+\t\t}",
                "+\tcase <-time.After(5 * time.Second):",
                "+\t\ttestutil.FatalStack(t, \"failed to watch the event\")",
                "+\t}",
                "+",
                "+\tw = s.NewWatchStream()",
                "+\twid, _ = w.Watch(0, []byte(\"foo1\"), []byte(\"foo2\"), 3)",
                "+",
                "+\tselect {",
                "+\tcase resp := <-w.Chan():",
                "+\t\tif resp.WatchID != wid {",
                "+\t\t\tt.Errorf(\"resp.WatchID got = %d, want = %d\", resp.WatchID, wid)",
                "+\t\t}",
                "+\t\tev := resp.Events[0]",
                "+\t\tif !reflect.DeepEqual(ev, wev[1]) {",
                "+\t\t\tt.Errorf(\"watched event = %+v, want %+v\", ev, wev[1])",
                "+\t\t}",
                "+\tcase <-time.After(5 * time.Second):",
                "+\t\ttestutil.FatalStack(t, \"failed to watch the event\")",
                "+\t}",
                "+",
                "+\ts.Put([]byte(\"foo1\"), []byte(\"bar11\"), 3)",
                "+\tselect {",
                "+\tcase resp := <-w.Chan():",
                "+\t\tif resp.WatchID != wid {",
                "+\t\t\tt.Errorf(\"resp.WatchID got = %d, want = %d\", resp.WatchID, wid)",
                "+\t\t}",
                "+\t\tev := resp.Events[0]",
                "+\t\tif !reflect.DeepEqual(ev, wev[2]) {",
                "+\t\t\tt.Errorf(\"watched event = %+v, want %+v\", ev, wev[2])",
                "+\t\t}",
                "+\tcase <-time.After(5 * time.Second):",
                "+\t\ttestutil.FatalStack(t, \"failed to watch the event\")",
                "+\t}",
                "+}",
                "+",
                "+func cleanup(s KV, b backend.Backend, path string) {",
                "+\ts.Close()",
                "+\tb.Close()",
                "+\tos.Remove(path)",
                "+}",
                "+",
                "+func put3TestKVs(s KV) []mvccpb.KeyValue {",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar\"), 1)",
                "+\ts.Put([]byte(\"foo1\"), []byte(\"bar1\"), 2)",
                "+\ts.Put([]byte(\"foo2\"), []byte(\"bar2\"), 3)",
                "+\treturn []mvccpb.KeyValue{",
                "+\t\t{Key: []byte(\"foo\"), Value: []byte(\"bar\"), CreateRevision: 2, ModRevision: 2, Version: 1, Lease: 1},",
                "+\t\t{Key: []byte(\"foo1\"), Value: []byte(\"bar1\"), CreateRevision: 3, ModRevision: 3, Version: 1, Lease: 2},",
                "+\t\t{Key: []byte(\"foo2\"), Value: []byte(\"bar2\"), CreateRevision: 4, ModRevision: 4, Version: 1, Lease: 3},",
                "+\t}",
                "+}",
                "diff --git a/mvcc/kv_view.go b/mvcc/kv_view.go",
                "new file mode 100644",
                "index 000000000..1e869c25b",
                "--- /dev/null",
                "+++ b/mvcc/kv_view.go",
                "@@ -0,0 +1,51 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import \"github.com/coreos/etcd/lease\"",
                "+",
                "+type readView struct{ kv KV }",
                "+",
                "+func (rv *readView) FirstRev() int64 {",
                "+\ttr := rv.kv.Read()",
                "+\tdefer tr.End()",
                "+\treturn tr.FirstRev()",
                "+}",
                "+",
                "+func (rv *readView) Rev() int64 {",
                "+\ttr := rv.kv.Read()",
                "+\tdefer tr.End()",
                "+\treturn tr.Rev()",
                "+}",
                "+",
                "+func (rv *readView) Range(key, end []byte, ro RangeOptions) (r *RangeResult, err error) {",
                "+\ttr := rv.kv.Read()",
                "+\tdefer tr.End()",
                "+\treturn tr.Range(key, end, ro)",
                "+}",
                "+",
                "+type writeView struct{ kv KV }",
                "+",
                "+func (wv *writeView) DeleteRange(key, end []byte) (n, rev int64) {",
                "+\ttw := wv.kv.Write()",
                "+\tdefer tw.End()",
                "+\treturn tw.DeleteRange(key, end)",
                "+}",
                "+",
                "+func (wv *writeView) Put(key, value []byte, lease lease.LeaseID) (rev int64) {",
                "+\ttw := wv.kv.Write()",
                "+\tdefer tw.End()",
                "+\treturn tw.Put(key, value, lease)",
                "+}",
                "diff --git a/mvcc/kvstore.go b/mvcc/kvstore.go",
                "new file mode 100644",
                "index 000000000..73f3c4c83",
                "--- /dev/null",
                "+++ b/mvcc/kvstore.go",
                "@@ -0,0 +1,501 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"encoding/binary\"",
                "+\t\"errors\"",
                "+\t\"hash/crc32\"",
                "+\t\"math\"",
                "+\t\"sync\"",
                "+\t\"sync/atomic\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/pkg/schedule\"",
                "+",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+)",
                "+",
                "+var (",
                "+\tkeyBucketName  = []byte(\"key\")",
                "+\tmetaBucketName = []byte(\"meta\")",
                "+",
                "+\tconsistentIndexKeyName  = []byte(\"consistent_index\")",
                "+\tscheduledCompactKeyName = []byte(\"scheduledCompactRev\")",
                "+\tfinishedCompactKeyName  = []byte(\"finishedCompactRev\")",
                "+",
                "+\tErrCompacted = errors.New(\"mvcc: required revision has been compacted\")",
                "+\tErrFutureRev = errors.New(\"mvcc: required revision is a future revision\")",
                "+\tErrCanceled  = errors.New(\"mvcc: watcher is canceled\")",
                "+\tErrClosed    = errors.New(\"mvcc: closed\")",
                "+",
                "+\tplog = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"mvcc\")",
                "+)",
                "+",
                "+const (",
                "+\t// markedRevBytesLen is the byte length of marked revision.",
                "+\t// The first `revBytesLen` bytes represents a normal revision. The last",
                "+\t// one byte is the mark.",
                "+\tmarkedRevBytesLen      = revBytesLen + 1",
                "+\tmarkBytePosition       = markedRevBytesLen - 1",
                "+\tmarkTombstone     byte = 't'",
                "+)",
                "+",
                "+var restoreChunkKeys = 10000 // non-const for testing",
                "+",
                "+// ConsistentIndexGetter is an interface that wraps the Get method.",
                "+// Consistent index is the offset of an entry in a consistent replicated log.",
                "+type ConsistentIndexGetter interface {",
                "+\t// ConsistentIndex returns the consistent index of current executing entry.",
                "+\tConsistentIndex() uint64",
                "+}",
                "+",
                "+type store struct {",
                "+\tReadView",
                "+\tWriteView",
                "+",
                "+\t// consistentIndex caches the \"consistent_index\" key's value. Accessed",
                "+\t// through atomics so must be 64-bit aligned.",
                "+\tconsistentIndex uint64",
                "+",
                "+\t// mu read locks for txns and write locks for non-txn store changes.",
                "+\tmu sync.RWMutex",
                "+",
                "+\tig ConsistentIndexGetter",
                "+",
                "+\tb       backend.Backend",
                "+\tkvindex index",
                "+",
                "+\tle lease.Lessor",
                "+",
                "+\t// revMuLock protects currentRev and compactMainRev.",
                "+\t// Locked at end of write txn and released after write txn unlock lock.",
                "+\t// Locked before locking read txn and released after locking.",
                "+\trevMu sync.RWMutex",
                "+\t// currentRev is the revision of the last completed transaction.",
                "+\tcurrentRev int64",
                "+\t// compactMainRev is the main revision of the last compaction.",
                "+\tcompactMainRev int64",
                "+",
                "+\t// bytesBuf8 is a byte slice of length 8",
                "+\t// to avoid a repetitive allocation in saveIndex.",
                "+\tbytesBuf8 []byte",
                "+",
                "+\tfifoSched schedule.Scheduler",
                "+",
                "+\tstopc chan struct{}",
                "+}",
                "+",
                "+// NewStore returns a new store. It is useful to create a store inside",
                "+// mvcc pkg. It should only be used for testing externally.",
                "+func NewStore(b backend.Backend, le lease.Lessor, ig ConsistentIndexGetter) *store {",
                "+\ts := &store{",
                "+\t\tb:       b,",
                "+\t\tig:      ig,",
                "+\t\tkvindex: newTreeIndex(),",
                "+",
                "+\t\tle: le,",
                "+",
                "+\t\tcurrentRev:     1,",
                "+\t\tcompactMainRev: -1,",
                "+",
                "+\t\tbytesBuf8: make([]byte, 8),",
                "+\t\tfifoSched: schedule.NewFIFOScheduler(),",
                "+",
                "+\t\tstopc: make(chan struct{}),",
                "+\t}",
                "+\ts.ReadView = &readView{s}",
                "+\ts.WriteView = &writeView{s}",
                "+\tif s.le != nil {",
                "+\t\ts.le.SetRangeDeleter(func() lease.TxnDelete { return s.Write() })",
                "+\t}",
                "+",
                "+\ttx := s.b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafeCreateBucket(keyBucketName)",
                "+\ttx.UnsafeCreateBucket(metaBucketName)",
                "+\ttx.Unlock()",
                "+\ts.b.ForceCommit()",
                "+",
                "+\tif err := s.restore(); err != nil {",
                "+\t\t// TODO: return the error instead of panic here?",
                "+\t\tpanic(\"failed to recover store from backend\")",
                "+\t}",
                "+",
                "+\treturn s",
                "+}",
                "+",
                "+func (s *store) compactBarrier(ctx context.Context, ch chan struct{}) {",
                "+\tif ctx == nil || ctx.Err() != nil {",
                "+\t\ts.mu.Lock()",
                "+\t\tselect {",
                "+\t\tcase <-s.stopc:",
                "+\t\tdefault:",
                "+\t\t\tf := func(ctx context.Context) { s.compactBarrier(ctx, ch) }",
                "+\t\t\ts.fifoSched.Schedule(f)",
                "+\t\t}",
                "+\t\ts.mu.Unlock()",
                "+\t\treturn",
                "+\t}",
                "+\tclose(ch)",
                "+}",
                "+",
                "+func (s *store) Hash() (hash uint32, revision int64, err error) {",
                "+\ts.b.ForceCommit()",
                "+\th, err := s.b.Hash(DefaultIgnores)",
                "+\treturn h, s.currentRev, err",
                "+}",
                "+",
                "+func (s *store) HashByRev(rev int64) (hash uint32, currentRev int64, compactRev int64, err error) {",
                "+\ts.mu.RLock()",
                "+\ts.revMu.RLock()",
                "+\tcompactRev, currentRev = s.compactMainRev, s.currentRev",
                "+\ts.revMu.RUnlock()",
                "+",
                "+\tif rev > 0 && rev <= compactRev {",
                "+\t\ts.mu.RUnlock()",
                "+\t\treturn 0, 0, compactRev, ErrCompacted",
                "+\t} else if rev > 0 && rev > currentRev {",
                "+\t\ts.mu.RUnlock()",
                "+\t\treturn 0, currentRev, 0, ErrFutureRev",
                "+\t}",
                "+",
                "+\tif rev == 0 {",
                "+\t\trev = currentRev",
                "+\t}",
                "+\tkeep := s.kvindex.Keep(rev)",
                "+",
                "+\ttx := s.b.ReadTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+\ts.mu.RUnlock()",
                "+",
                "+\tupper := revision{main: rev + 1}",
                "+\tlower := revision{main: compactRev + 1}",
                "+\th := crc32.New(crc32.MakeTable(crc32.Castagnoli))",
                "+",
                "+\th.Write(keyBucketName)",
                "+\terr = tx.UnsafeForEach(keyBucketName, func(k, v []byte) error {",
                "+\t\tkr := bytesToRev(k)",
                "+\t\tif !upper.GreaterThan(kr) {",
                "+\t\t\treturn nil",
                "+\t\t}",
                "+\t\t// skip revisions that are scheduled for deletion",
                "+\t\t// due to compacting; don't skip if there isn't one.",
                "+\t\tif lower.GreaterThan(kr) && len(keep) > 0 {",
                "+\t\t\tif _, ok := keep[kr]; !ok {",
                "+\t\t\t\treturn nil",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\th.Write(k)",
                "+\t\th.Write(v)",
                "+\t\treturn nil",
                "+\t})",
                "+\treturn h.Sum32(), currentRev, compactRev, err",
                "+}",
                "+",
                "+func (s *store) Compact(rev int64) (<-chan struct{}, error) {",
                "+\ts.mu.Lock()",
                "+\tdefer s.mu.Unlock()",
                "+\ts.revMu.Lock()",
                "+\tdefer s.revMu.Unlock()",
                "+",
                "+\tif rev <= s.compactMainRev {",
                "+\t\tch := make(chan struct{})",
                "+\t\tf := func(ctx context.Context) { s.compactBarrier(ctx, ch) }",
                "+\t\ts.fifoSched.Schedule(f)",
                "+\t\treturn ch, ErrCompacted",
                "+\t}",
                "+\tif rev > s.currentRev {",
                "+\t\treturn nil, ErrFutureRev",
                "+\t}",
                "+",
                "+\tstart := time.Now()",
                "+",
                "+\ts.compactMainRev = rev",
                "+",
                "+\trbytes := newRevBytes()",
                "+\trevToBytes(revision{main: rev}, rbytes)",
                "+",
                "+\ttx := s.b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafePut(metaBucketName, scheduledCompactKeyName, rbytes)",
                "+\ttx.Unlock()",
                "+\t// ensure that desired compaction is persisted",
                "+\ts.b.ForceCommit()",
                "+",
                "+\tkeep := s.kvindex.Compact(rev)",
                "+\tch := make(chan struct{})",
                "+\tvar j = func(ctx context.Context) {",
                "+\t\tif ctx.Err() != nil {",
                "+\t\t\ts.compactBarrier(ctx, ch)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tif !s.scheduleCompaction(rev, keep) {",
                "+\t\t\ts.compactBarrier(nil, ch)",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t\tclose(ch)",
                "+\t}",
                "+",
                "+\ts.fifoSched.Schedule(j)",
                "+",
                "+\tindexCompactionPauseDurations.Observe(float64(time.Since(start) / time.Millisecond))",
                "+\treturn ch, nil",
                "+}",
                "+",
                "+// DefaultIgnores is a map of keys to ignore in hash checking.",
                "+var DefaultIgnores map[backend.IgnoreKey]struct{}",
                "+",
                "+func init() {",
                "+\tDefaultIgnores = map[backend.IgnoreKey]struct{}{",
                "+\t\t// consistent index might be changed due to v2 internal sync, which",
                "+\t\t// is not controllable by the user.",
                "+\t\t{Bucket: string(metaBucketName), Key: string(consistentIndexKeyName)}: {},",
                "+\t}",
                "+}",
                "+",
                "+func (s *store) Commit() {",
                "+\ts.mu.Lock()",
                "+\tdefer s.mu.Unlock()",
                "+",
                "+\ttx := s.b.BatchTx()",
                "+\ttx.Lock()",
                "+\ts.saveIndex(tx)",
                "+\ttx.Unlock()",
                "+\ts.b.ForceCommit()",
                "+}",
                "+",
                "+func (s *store) Restore(b backend.Backend) error {",
                "+\ts.mu.Lock()",
                "+\tdefer s.mu.Unlock()",
                "+",
                "+\tclose(s.stopc)",
                "+\ts.fifoSched.Stop()",
                "+",
                "+\tatomic.StoreUint64(&s.consistentIndex, 0)",
                "+\ts.b = b",
                "+\ts.kvindex = newTreeIndex()",
                "+\ts.currentRev = 1",
                "+\ts.compactMainRev = -1",
                "+\ts.fifoSched = schedule.NewFIFOScheduler()",
                "+\ts.stopc = make(chan struct{})",
                "+",
                "+\treturn s.restore()",
                "+}",
                "+",
                "+func (s *store) restore() error {",
                "+\tb := s.b",
                "+\treportDbTotalSizeInBytesMu.Lock()",
                "+\treportDbTotalSizeInBytes = func() float64 { return float64(b.Size()) }",
                "+\treportDbTotalSizeInBytesMu.Unlock()",
                "+\treportDbTotalSizeInUseInBytesMu.Lock()",
                "+\treportDbTotalSizeInUseInBytes = func() float64 { return float64(b.SizeInUse()) }",
                "+\treportDbTotalSizeInUseInBytesMu.Unlock()",
                "+",
                "+\tmin, max := newRevBytes(), newRevBytes()",
                "+\trevToBytes(revision{main: 1}, min)",
                "+\trevToBytes(revision{main: math.MaxInt64, sub: math.MaxInt64}, max)",
                "+",
                "+\tkeyToLease := make(map[string]lease.LeaseID)",
                "+",
                "+\t// restore index",
                "+\ttx := s.b.BatchTx()",
                "+\ttx.Lock()",
                "+",
                "+\t_, finishedCompactBytes := tx.UnsafeRange(metaBucketName, finishedCompactKeyName, nil, 0)",
                "+\tif len(finishedCompactBytes) != 0 {",
                "+\t\ts.compactMainRev = bytesToRev(finishedCompactBytes[0]).main",
                "+\t\tplog.Printf(\"restore compact to %d\", s.compactMainRev)",
                "+\t}",
                "+\t_, scheduledCompactBytes := tx.UnsafeRange(metaBucketName, scheduledCompactKeyName, nil, 0)",
                "+\tscheduledCompact := int64(0)",
                "+\tif len(scheduledCompactBytes) != 0 {",
                "+\t\tscheduledCompact = bytesToRev(scheduledCompactBytes[0]).main",
                "+\t}",
                "+",
                "+\t// index keys concurrently as they're loaded in from tx",
                "+\tkeysGauge.Set(0)",
                "+\trkvc, revc := restoreIntoIndex(s.kvindex)",
                "+\tfor {",
                "+\t\tkeys, vals := tx.UnsafeRange(keyBucketName, min, max, int64(restoreChunkKeys))",
                "+\t\tif len(keys) == 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\t// rkvc blocks if the total pending keys exceeds the restore",
                "+\t\t// chunk size to keep keys from consuming too much memory.",
                "+\t\trestoreChunk(rkvc, keys, vals, keyToLease)",
                "+\t\tif len(keys) < restoreChunkKeys {",
                "+\t\t\t// partial set implies final set",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\t// next set begins after where this one ended",
                "+\t\tnewMin := bytesToRev(keys[len(keys)-1][:revBytesLen])",
                "+\t\tnewMin.sub++",
                "+\t\trevToBytes(newMin, min)",
                "+\t}",
                "+\tclose(rkvc)",
                "+\ts.currentRev = <-revc",
                "+",
                "+\t// keys in the range [compacted revision -N, compaction] might all be deleted due to compaction.",
                "+\t// the correct revision should be set to compaction revision in the case, not the largest revision",
                "+\t// we have seen.",
                "+\tif s.currentRev < s.compactMainRev {",
                "+\t\ts.currentRev = s.compactMainRev",
                "+\t}",
                "+\tif scheduledCompact <= s.compactMainRev {",
                "+\t\tscheduledCompact = 0",
                "+\t}",
                "+",
                "+\tfor key, lid := range keyToLease {",
                "+\t\tif s.le == nil {",
                "+\t\t\tpanic(\"no lessor to attach lease\")",
                "+\t\t}",
                "+\t\terr := s.le.Attach(lid, []lease.LeaseItem{{Key: key}})",
                "+\t\tif err != nil {",
                "+\t\t\tplog.Errorf(\"unexpected Attach error: %v\", err)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\ttx.Unlock()",
                "+",
                "+\tif scheduledCompact != 0 {",
                "+\t\ts.Compact(scheduledCompact)",
                "+\t\tplog.Printf(\"resume scheduled compaction at %d\", scheduledCompact)",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+type revKeyValue struct {",
                "+\tkey  []byte",
                "+\tkv   mvccpb.KeyValue",
                "+\tkstr string",
                "+}",
                "+",
                "+func restoreIntoIndex(idx index) (chan<- revKeyValue, <-chan int64) {",
                "+\trkvc, revc := make(chan revKeyValue, restoreChunkKeys), make(chan int64, 1)",
                "+\tgo func() {",
                "+\t\tcurrentRev := int64(1)",
                "+\t\tdefer func() { revc <- currentRev }()",
                "+\t\t// restore the tree index from streaming the unordered index.",
                "+\t\tkiCache := make(map[string]*keyIndex, restoreChunkKeys)",
                "+\t\tfor rkv := range rkvc {",
                "+\t\t\tki, ok := kiCache[rkv.kstr]",
                "+\t\t\t// purge kiCache if many keys but still missing in the cache",
                "+\t\t\tif !ok && len(kiCache) >= restoreChunkKeys {",
                "+\t\t\t\ti := 10",
                "+\t\t\t\tfor k := range kiCache {",
                "+\t\t\t\t\tdelete(kiCache, k)",
                "+\t\t\t\t\tif i--; i == 0 {",
                "+\t\t\t\t\t\tbreak",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\t// cache miss, fetch from tree index if there",
                "+\t\t\tif !ok {",
                "+\t\t\t\tki = &keyIndex{key: rkv.kv.Key}",
                "+\t\t\t\tif idxKey := idx.KeyIndex(ki); idxKey != nil {",
                "+\t\t\t\t\tkiCache[rkv.kstr], ki = idxKey, idxKey",
                "+\t\t\t\t\tok = true",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\trev := bytesToRev(rkv.key)",
                "+\t\t\tcurrentRev = rev.main",
                "+\t\t\tif ok {",
                "+\t\t\t\tif isTombstone(rkv.key) {",
                "+\t\t\t\t\tki.tombstone(rev.main, rev.sub)",
                "+\t\t\t\t\tcontinue",
                "+\t\t\t\t}",
                "+\t\t\t\tki.put(rev.main, rev.sub)",
                "+\t\t\t} else if !isTombstone(rkv.key) {",
                "+\t\t\t\tki.restore(revision{rkv.kv.CreateRevision, 0}, rev, rkv.kv.Version)",
                "+\t\t\t\tidx.Insert(ki)",
                "+\t\t\t\tkiCache[rkv.kstr] = ki",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}()",
                "+\treturn rkvc, revc",
                "+}",
                "+",
                "+func restoreChunk(kvc chan<- revKeyValue, keys, vals [][]byte, keyToLease map[string]lease.LeaseID) {",
                "+\tfor i, key := range keys {",
                "+\t\trkv := revKeyValue{key: key}",
                "+\t\tif err := rkv.kv.Unmarshal(vals[i]); err != nil {",
                "+\t\t\tplog.Fatalf(\"cannot unmarshal event: %v\", err)",
                "+\t\t}",
                "+\t\trkv.kstr = string(rkv.kv.Key)",
                "+\t\tif isTombstone(key) {",
                "+\t\t\tdelete(keyToLease, rkv.kstr)",
                "+\t\t} else if lid := lease.LeaseID(rkv.kv.Lease); lid != lease.NoLease {",
                "+\t\t\tkeyToLease[rkv.kstr] = lid",
                "+\t\t} else {",
                "+\t\t\tdelete(keyToLease, rkv.kstr)",
                "+\t\t}",
                "+\t\tkvc <- rkv",
                "+\t}",
                "+}",
                "+",
                "+func (s *store) Close() error {",
                "+\tclose(s.stopc)",
                "+\ts.fifoSched.Stop()",
                "+\treturn nil",
                "+}",
                "+",
                "+func (s *store) saveIndex(tx backend.BatchTx) {",
                "+\tif s.ig == nil {",
                "+\t\treturn",
                "+\t}",
                "+\tbs := s.bytesBuf8",
                "+\tci := s.ig.ConsistentIndex()",
                "+\tbinary.BigEndian.PutUint64(bs, ci)",
                "+\t// put the index into the underlying backend",
                "+\t// tx has been locked in TxnBegin, so there is no need to lock it again",
                "+\ttx.UnsafePut(metaBucketName, consistentIndexKeyName, bs)",
                "+\tatomic.StoreUint64(&s.consistentIndex, ci)",
                "+}",
                "+",
                "+func (s *store) ConsistentIndex() uint64 {",
                "+\tif ci := atomic.LoadUint64(&s.consistentIndex); ci > 0 {",
                "+\t\treturn ci",
                "+\t}",
                "+\ttx := s.b.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+\t_, vs := tx.UnsafeRange(metaBucketName, consistentIndexKeyName, nil, 0)",
                "+\tif len(vs) == 0 {",
                "+\t\treturn 0",
                "+\t}",
                "+\tv := binary.BigEndian.Uint64(vs[0])",
                "+\tatomic.StoreUint64(&s.consistentIndex, v)",
                "+\treturn v",
                "+}",
                "+",
                "+// appendMarkTombstone appends tombstone mark to normal revision bytes.",
                "+func appendMarkTombstone(b []byte) []byte {",
                "+\tif len(b) != revBytesLen {",
                "+\t\tplog.Panicf(\"cannot append mark to non normal revision bytes\")",
                "+\t}",
                "+\treturn append(b, markTombstone)",
                "+}",
                "+",
                "+// isTombstone checks whether the revision bytes is a tombstone.",
                "+func isTombstone(b []byte) bool {",
                "+\treturn len(b) == markedRevBytesLen && b[markBytePosition] == markTombstone",
                "+}",
                "diff --git a/mvcc/kvstore_bench_test.go b/mvcc/kvstore_bench_test.go",
                "new file mode 100644",
                "index 000000000..a64a3c5a5",
                "--- /dev/null",
                "+++ b/mvcc/kvstore_bench_test.go",
                "@@ -0,0 +1,174 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"sync/atomic\"",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+)",
                "+",
                "+type fakeConsistentIndex uint64",
                "+",
                "+func (i *fakeConsistentIndex) ConsistentIndex() uint64 {",
                "+\treturn atomic.LoadUint64((*uint64)(i))",
                "+}",
                "+",
                "+func BenchmarkStorePut(b *testing.B) {",
                "+\tvar i fakeConsistentIndex",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(be, &lease.FakeLessor{}, &i)",
                "+\tdefer cleanup(s, be, tmpPath)",
                "+",
                "+\t// arbitrary number of bytes",
                "+\tbytesN := 64",
                "+\tkeys := createBytesSlice(bytesN, b.N)",
                "+\tvals := createBytesSlice(bytesN, b.N)",
                "+",
                "+\tb.ResetTimer()",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\ts.Put(keys[i], vals[i], lease.NoLease)",
                "+\t}",
                "+}",
                "+",
                "+func BenchmarkStoreRangeKey1(b *testing.B)   { benchmarkStoreRange(b, 1) }",
                "+func BenchmarkStoreRangeKey100(b *testing.B) { benchmarkStoreRange(b, 100) }",
                "+",
                "+func benchmarkStoreRange(b *testing.B, n int) {",
                "+\tvar i fakeConsistentIndex",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(be, &lease.FakeLessor{}, &i)",
                "+\tdefer cleanup(s, be, tmpPath)",
                "+",
                "+\t// 64 byte key/val",
                "+\tkeys, val := createBytesSlice(64, n), createBytesSlice(64, 1)",
                "+\tfor i := range keys {",
                "+\t\ts.Put(keys[i], val[0], lease.NoLease)",
                "+\t}",
                "+\t// Force into boltdb tx instead of backend read tx.",
                "+\ts.Commit()",
                "+",
                "+\tvar begin, end []byte",
                "+\tif n == 1 {",
                "+\t\tbegin, end = keys[0], nil",
                "+\t} else {",
                "+\t\tbegin, end = []byte{}, []byte{}",
                "+\t}",
                "+",
                "+\tb.ReportAllocs()",
                "+\tb.ResetTimer()",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\ts.Range(begin, end, RangeOptions{})",
                "+\t}",
                "+}",
                "+",
                "+func BenchmarkConsistentIndex(b *testing.B) {",
                "+\tfci := fakeConsistentIndex(10)",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(be, &lease.FakeLessor{}, &fci)",
                "+\tdefer cleanup(s, be, tmpPath)",
                "+",
                "+\ttx := s.b.BatchTx()",
                "+\ttx.Lock()",
                "+\ts.saveIndex(tx)",
                "+\ttx.Unlock()",
                "+",
                "+\tb.ReportAllocs()",
                "+\tb.ResetTimer()",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\ts.ConsistentIndex()",
                "+\t}",
                "+}",
                "+",
                "+// BenchmarkStoreTxnPutUpdate is same as above, but instead updates single key",
                "+func BenchmarkStorePutUpdate(b *testing.B) {",
                "+\tvar i fakeConsistentIndex",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(be, &lease.FakeLessor{}, &i)",
                "+\tdefer cleanup(s, be, tmpPath)",
                "+",
                "+\t// arbitrary number of bytes",
                "+\tkeys := createBytesSlice(64, 1)",
                "+\tvals := createBytesSlice(1024, 1)",
                "+",
                "+\tb.ResetTimer()",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\ts.Put(keys[0], vals[0], lease.NoLease)",
                "+\t}",
                "+}",
                "+",
                "+// BenchmarkStoreTxnPut benchmarks the Put operation",
                "+// with transaction begin and end, where transaction involves",
                "+// some synchronization operations, such as mutex locking.",
                "+func BenchmarkStoreTxnPut(b *testing.B) {",
                "+\tvar i fakeConsistentIndex",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(be, &lease.FakeLessor{}, &i)",
                "+\tdefer cleanup(s, be, tmpPath)",
                "+",
                "+\t// arbitrary number of bytes",
                "+\tbytesN := 64",
                "+\tkeys := createBytesSlice(bytesN, b.N)",
                "+\tvals := createBytesSlice(bytesN, b.N)",
                "+",
                "+\tb.ResetTimer()",
                "+\tb.ReportAllocs()",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\ttxn := s.Write()",
                "+\t\ttxn.Put(keys[i], vals[i], lease.NoLease)",
                "+\t\ttxn.End()",
                "+\t}",
                "+}",
                "+",
                "+// benchmarkStoreRestore benchmarks the restore operation",
                "+func benchmarkStoreRestore(revsPerKey int, b *testing.B) {",
                "+\tvar i fakeConsistentIndex",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(be, &lease.FakeLessor{}, &i)",
                "+\t// use closure to capture 's' to pick up the reassignment",
                "+\tdefer func() { cleanup(s, be, tmpPath) }()",
                "+",
                "+\t// arbitrary number of bytes",
                "+\tbytesN := 64",
                "+\tkeys := createBytesSlice(bytesN, b.N)",
                "+\tvals := createBytesSlice(bytesN, b.N)",
                "+",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\tfor j := 0; j < revsPerKey; j++ {",
                "+\t\t\ttxn := s.Write()",
                "+\t\t\ttxn.Put(keys[i], vals[i], lease.NoLease)",
                "+\t\t\ttxn.End()",
                "+\t\t}",
                "+\t}",
                "+\ts.Close()",
                "+",
                "+\tb.ReportAllocs()",
                "+\tb.ResetTimer()",
                "+\ts = NewStore(be, &lease.FakeLessor{}, &i)",
                "+}",
                "+",
                "+func BenchmarkStoreRestoreRevs1(b *testing.B) {",
                "+\tbenchmarkStoreRestore(1, b)",
                "+}",
                "+",
                "+func BenchmarkStoreRestoreRevs10(b *testing.B) {",
                "+\tbenchmarkStoreRestore(10, b)",
                "+}",
                "+",
                "+func BenchmarkStoreRestoreRevs20(b *testing.B) {",
                "+\tbenchmarkStoreRestore(20, b)",
                "+}",
                "diff --git a/mvcc/kvstore_compaction.go b/mvcc/kvstore_compaction.go",
                "new file mode 100644",
                "index 000000000..1726490c1",
                "--- /dev/null",
                "+++ b/mvcc/kvstore_compaction.go",
                "@@ -0,0 +1,69 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"encoding/binary\"",
                "+\t\"time\"",
                "+)",
                "+",
                "+func (s *store) scheduleCompaction(compactMainRev int64, keep map[revision]struct{}) bool {",
                "+\ttotalStart := time.Now()",
                "+\tdefer dbCompactionTotalDurations.Observe(float64(time.Since(totalStart) / time.Millisecond))",
                "+\tkeyCompactions := 0",
                "+\tdefer func() { dbCompactionKeysCounter.Add(float64(keyCompactions)) }()",
                "+",
                "+\tend := make([]byte, 8)",
                "+\tbinary.BigEndian.PutUint64(end, uint64(compactMainRev+1))",
                "+",
                "+\tbatchsize := int64(10000)",
                "+\tlast := make([]byte, 8+1+8)",
                "+\tfor {",
                "+\t\tvar rev revision",
                "+",
                "+\t\tstart := time.Now()",
                "+\t\ttx := s.b.BatchTx()",
                "+\t\ttx.Lock()",
                "+",
                "+\t\tkeys, _ := tx.UnsafeRange(keyBucketName, last, end, batchsize)",
                "+\t\tfor _, key := range keys {",
                "+\t\t\trev = bytesToRev(key)",
                "+\t\t\tif _, ok := keep[rev]; !ok {",
                "+\t\t\t\ttx.UnsafeDelete(keyBucketName, key)",
                "+\t\t\t\tkeyCompactions++",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tif len(keys) < int(batchsize) {",
                "+\t\t\trbytes := make([]byte, 8+1+8)",
                "+\t\t\trevToBytes(revision{main: compactMainRev}, rbytes)",
                "+\t\t\ttx.UnsafePut(metaBucketName, finishedCompactKeyName, rbytes)",
                "+\t\t\ttx.Unlock()",
                "+\t\t\tplog.Printf(\"finished scheduled compaction at %d (took %v)\", compactMainRev, time.Since(totalStart))",
                "+\t\t\treturn true",
                "+\t\t}",
                "+",
                "+\t\t// update last",
                "+\t\trevToBytes(revision{main: rev.main, sub: rev.sub + 1}, last)",
                "+\t\ttx.Unlock()",
                "+\t\tdbCompactionPauseDurations.Observe(float64(time.Since(start) / time.Millisecond))",
                "+",
                "+\t\tselect {",
                "+\t\tcase <-time.After(100 * time.Millisecond):",
                "+\t\tcase <-s.stopc:",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/mvcc/kvstore_compaction_test.go b/mvcc/kvstore_compaction_test.go",
                "new file mode 100644",
                "index 000000000..b2ee570f9",
                "--- /dev/null",
                "+++ b/mvcc/kvstore_compaction_test.go",
                "@@ -0,0 +1,135 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"os\"",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+)",
                "+",
                "+func TestScheduleCompaction(t *testing.T) {",
                "+\trevs := []revision{{1, 0}, {2, 0}, {3, 0}}",
                "+",
                "+\ttests := []struct {",
                "+\t\trev   int64",
                "+\t\tkeep  map[revision]struct{}",
                "+\t\twrevs []revision",
                "+\t}{",
                "+\t\t// compact at 1 and discard all history",
                "+\t\t{",
                "+\t\t\t1,",
                "+\t\t\tnil,",
                "+\t\t\trevs[1:],",
                "+\t\t},",
                "+\t\t// compact at 3 and discard all history",
                "+\t\t{",
                "+\t\t\t3,",
                "+\t\t\tnil,",
                "+\t\t\tnil,",
                "+\t\t},",
                "+\t\t// compact at 1 and keeps history one step earlier",
                "+\t\t{",
                "+\t\t\t1,",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 1}: {},",
                "+\t\t\t},",
                "+\t\t\trevs,",
                "+\t\t},",
                "+\t\t// compact at 1 and keeps history two steps earlier",
                "+\t\t{",
                "+\t\t\t3,",
                "+\t\t\tmap[revision]struct{}{",
                "+\t\t\t\t{main: 2}: {},",
                "+\t\t\t\t{main: 3}: {},",
                "+\t\t\t},",
                "+\t\t\trevs[1:],",
                "+\t\t},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\t\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\t\ttx := s.b.BatchTx()",
                "+",
                "+\t\ttx.Lock()",
                "+\t\tibytes := newRevBytes()",
                "+\t\tfor _, rev := range revs {",
                "+\t\t\trevToBytes(rev, ibytes)",
                "+\t\t\ttx.UnsafePut(keyBucketName, ibytes, []byte(\"bar\"))",
                "+\t\t}",
                "+\t\ttx.Unlock()",
                "+",
                "+\t\ts.scheduleCompaction(tt.rev, tt.keep)",
                "+",
                "+\t\ttx.Lock()",
                "+\t\tfor _, rev := range tt.wrevs {",
                "+\t\t\trevToBytes(rev, ibytes)",
                "+\t\t\tkeys, _ := tx.UnsafeRange(keyBucketName, ibytes, nil, 0)",
                "+\t\t\tif len(keys) != 1 {",
                "+\t\t\t\tt.Errorf(\"#%d: range on %v = %d, want 1\", i, rev, len(keys))",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\t_, vals := tx.UnsafeRange(metaBucketName, finishedCompactKeyName, nil, 0)",
                "+\t\trevToBytes(revision{main: tt.rev}, ibytes)",
                "+\t\tif w := [][]byte{ibytes}; !reflect.DeepEqual(vals, w) {",
                "+\t\t\tt.Errorf(\"#%d: vals on %v = %+v, want %+v\", i, finishedCompactKeyName, vals, w)",
                "+\t\t}",
                "+\t\ttx.Unlock()",
                "+",
                "+\t\tcleanup(s, b, tmpPath)",
                "+\t}",
                "+}",
                "+",
                "+func TestCompactAllAndRestore(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts0 := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer os.Remove(tmpPath)",
                "+",
                "+\ts0.Put([]byte(\"foo\"), []byte(\"bar\"), lease.NoLease)",
                "+\ts0.Put([]byte(\"foo\"), []byte(\"bar1\"), lease.NoLease)",
                "+\ts0.Put([]byte(\"foo\"), []byte(\"bar2\"), lease.NoLease)",
                "+\ts0.DeleteRange([]byte(\"foo\"), nil)",
                "+",
                "+\trev := s0.Rev()",
                "+\t// compact all keys",
                "+\tdone, err := s0.Compact(rev)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tselect {",
                "+\tcase <-done:",
                "+\tcase <-time.After(10 * time.Second):",
                "+\t\tt.Fatal(\"timeout waiting for compaction to finish\")",
                "+\t}",
                "+",
                "+\terr = s0.Close()",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\ts1 := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tif s1.Rev() != rev {",
                "+\t\tt.Errorf(\"rev = %v, want %v\", s1.Rev(), rev)",
                "+\t}",
                "+\t_, err = s1.Range([]byte(\"foo\"), nil, RangeOptions{})",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"unexpect range error %v\", err)",
                "+\t}",
                "+}",
                "diff --git a/mvcc/kvstore_test.go b/mvcc/kvstore_test.go",
                "new file mode 100644",
                "index 000000000..923a4d5b6",
                "--- /dev/null",
                "+++ b/mvcc/kvstore_test.go",
                "@@ -0,0 +1,830 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"crypto/rand\"",
                "+\t\"encoding/binary\"",
                "+\t\"fmt\"",
                "+\t\"math\"",
                "+\tmrand \"math/rand\"",
                "+\t\"os\"",
                "+\t\"reflect\"",
                "+\t\"sync\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/pkg/schedule\"",
                "+\t\"github.com/coreos/etcd/pkg/testutil\"",
                "+)",
                "+",
                "+func TestStoreRev(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer s.Close()",
                "+\tdefer os.Remove(tmpPath)",
                "+",
                "+\tfor i := 1; i <= 3; i++ {",
                "+\t\ts.Put([]byte(\"foo\"), []byte(\"bar\"), lease.NoLease)",
                "+\t\tif r := s.Rev(); r != int64(i+1) {",
                "+\t\t\tt.Errorf(\"#%d: rev = %d, want %d\", i, r, i+1)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestStorePut(t *testing.T) {",
                "+\tkv := mvccpb.KeyValue{",
                "+\t\tKey:            []byte(\"foo\"),",
                "+\t\tValue:          []byte(\"bar\"),",
                "+\t\tCreateRevision: 1,",
                "+\t\tModRevision:    2,",
                "+\t\tVersion:        1,",
                "+\t}",
                "+\tkvb, err := kv.Marshal()",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\ttests := []struct {",
                "+\t\trev revision",
                "+\t\tr   indexGetResp",
                "+\t\trr  *rangeResp",
                "+",
                "+\t\twrev    revision",
                "+\t\twkey    []byte",
                "+\t\twkv     mvccpb.KeyValue",
                "+\t\twputrev revision",
                "+\t}{",
                "+\t\t{",
                "+\t\t\trevision{1, 0},",
                "+\t\t\tindexGetResp{revision{}, revision{}, 0, ErrRevisionNotFound},",
                "+\t\t\tnil,",
                "+",
                "+\t\t\trevision{2, 0},",
                "+\t\t\tnewTestKeyBytes(revision{2, 0}, false),",
                "+\t\t\tmvccpb.KeyValue{",
                "+\t\t\t\tKey:            []byte(\"foo\"),",
                "+\t\t\t\tValue:          []byte(\"bar\"),",
                "+\t\t\t\tCreateRevision: 2,",
                "+\t\t\t\tModRevision:    2,",
                "+\t\t\t\tVersion:        1,",
                "+\t\t\t\tLease:          1,",
                "+\t\t\t},",
                "+\t\t\trevision{2, 0},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\trevision{1, 1},",
                "+\t\t\tindexGetResp{revision{2, 0}, revision{2, 0}, 1, nil},",
                "+\t\t\t&rangeResp{[][]byte{newTestKeyBytes(revision{2, 1}, false)}, [][]byte{kvb}},",
                "+",
                "+\t\t\trevision{2, 0},",
                "+\t\t\tnewTestKeyBytes(revision{2, 0}, false),",
                "+\t\t\tmvccpb.KeyValue{",
                "+\t\t\t\tKey:            []byte(\"foo\"),",
                "+\t\t\t\tValue:          []byte(\"bar\"),",
                "+\t\t\t\tCreateRevision: 2,",
                "+\t\t\t\tModRevision:    2,",
                "+\t\t\t\tVersion:        2,",
                "+\t\t\t\tLease:          2,",
                "+\t\t\t},",
                "+\t\t\trevision{2, 0},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\trevision{2, 0},",
                "+\t\t\tindexGetResp{revision{2, 1}, revision{2, 0}, 2, nil},",
                "+\t\t\t&rangeResp{[][]byte{newTestKeyBytes(revision{2, 1}, false)}, [][]byte{kvb}},",
                "+",
                "+\t\t\trevision{3, 0},",
                "+\t\t\tnewTestKeyBytes(revision{3, 0}, false),",
                "+\t\t\tmvccpb.KeyValue{",
                "+\t\t\t\tKey:            []byte(\"foo\"),",
                "+\t\t\t\tValue:          []byte(\"bar\"),",
                "+\t\t\t\tCreateRevision: 2,",
                "+\t\t\t\tModRevision:    3,",
                "+\t\t\t\tVersion:        3,",
                "+\t\t\t\tLease:          3,",
                "+\t\t\t},",
                "+\t\t\trevision{3, 0},",
                "+\t\t},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\ts := newFakeStore()",
                "+\t\tb := s.b.(*fakeBackend)",
                "+\t\tfi := s.kvindex.(*fakeIndex)",
                "+",
                "+\t\ts.currentRev = tt.rev.main",
                "+\t\tfi.indexGetRespc <- tt.r",
                "+\t\tif tt.rr != nil {",
                "+\t\t\tb.tx.rangeRespc <- *tt.rr",
                "+\t\t}",
                "+",
                "+\t\ts.Put([]byte(\"foo\"), []byte(\"bar\"), lease.LeaseID(i+1))",
                "+",
                "+\t\tdata, err := tt.wkv.Marshal()",
                "+\t\tif err != nil {",
                "+\t\t\tt.Errorf(\"#%d: marshal err = %v, want nil\", i, err)",
                "+\t\t}",
                "+",
                "+\t\twact := []testutil.Action{",
                "+\t\t\t{Name: \"seqput\", Params: []interface{}{keyBucketName, tt.wkey, data}},",
                "+\t\t}",
                "+",
                "+\t\tif tt.rr != nil {",
                "+\t\t\twact = []testutil.Action{",
                "+\t\t\t\t{Name: \"seqput\", Params: []interface{}{keyBucketName, tt.wkey, data}},",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tif g := b.tx.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\t\tt.Errorf(\"#%d: tx action = %+v, want %+v\", i, g, wact)",
                "+\t\t}",
                "+\t\twact = []testutil.Action{",
                "+\t\t\t{Name: \"get\", Params: []interface{}{[]byte(\"foo\"), tt.wputrev.main}},",
                "+\t\t\t{Name: \"put\", Params: []interface{}{[]byte(\"foo\"), tt.wputrev}},",
                "+\t\t}",
                "+\t\tif g := fi.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\t\tt.Errorf(\"#%d: index action = %+v, want %+v\", i, g, wact)",
                "+\t\t}",
                "+\t\tif s.currentRev != tt.wrev.main {",
                "+\t\t\tt.Errorf(\"#%d: rev = %+v, want %+v\", i, s.currentRev, tt.wrev)",
                "+\t\t}",
                "+",
                "+\t\ts.Close()",
                "+\t}",
                "+}",
                "+",
                "+func TestStoreRange(t *testing.T) {",
                "+\tkey := newTestKeyBytes(revision{2, 0}, false)",
                "+\tkv := mvccpb.KeyValue{",
                "+\t\tKey:            []byte(\"foo\"),",
                "+\t\tValue:          []byte(\"bar\"),",
                "+\t\tCreateRevision: 1,",
                "+\t\tModRevision:    2,",
                "+\t\tVersion:        1,",
                "+\t}",
                "+\tkvb, err := kv.Marshal()",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\twrev := int64(2)",
                "+",
                "+\ttests := []struct {",
                "+\t\tidxr indexRangeResp",
                "+\t\tr    rangeResp",
                "+\t}{",
                "+\t\t{",
                "+\t\t\tindexRangeResp{[][]byte{[]byte(\"foo\")}, []revision{{2, 0}}},",
                "+\t\t\trangeResp{[][]byte{key}, [][]byte{kvb}},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tindexRangeResp{[][]byte{[]byte(\"foo\"), []byte(\"foo1\")}, []revision{{2, 0}, {3, 0}}},",
                "+\t\t\trangeResp{[][]byte{key}, [][]byte{kvb}},",
                "+\t\t},",
                "+\t}",
                "+",
                "+\tro := RangeOptions{Limit: 1, Rev: 0, Count: false}",
                "+\tfor i, tt := range tests {",
                "+\t\ts := newFakeStore()",
                "+\t\tb := s.b.(*fakeBackend)",
                "+\t\tfi := s.kvindex.(*fakeIndex)",
                "+",
                "+\t\ts.currentRev = 2",
                "+\t\tb.tx.rangeRespc <- tt.r",
                "+\t\tfi.indexRangeRespc <- tt.idxr",
                "+",
                "+\t\tret, err := s.Range([]byte(\"foo\"), []byte(\"goo\"), ro)",
                "+\t\tif err != nil {",
                "+\t\t\tt.Errorf(\"#%d: err = %v, want nil\", i, err)",
                "+\t\t}",
                "+\t\tif w := []mvccpb.KeyValue{kv}; !reflect.DeepEqual(ret.KVs, w) {",
                "+\t\t\tt.Errorf(\"#%d: kvs = %+v, want %+v\", i, ret.KVs, w)",
                "+\t\t}",
                "+\t\tif ret.Rev != wrev {",
                "+\t\t\tt.Errorf(\"#%d: rev = %d, want %d\", i, ret.Rev, wrev)",
                "+\t\t}",
                "+",
                "+\t\twstart := newRevBytes()",
                "+\t\trevToBytes(tt.idxr.revs[0], wstart)",
                "+\t\twact := []testutil.Action{",
                "+\t\t\t{Name: \"range\", Params: []interface{}{keyBucketName, wstart, []byte(nil), int64(0)}},",
                "+\t\t}",
                "+\t\tif g := b.tx.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\t\tt.Errorf(\"#%d: tx action = %+v, want %+v\", i, g, wact)",
                "+\t\t}",
                "+\t\twact = []testutil.Action{",
                "+\t\t\t{Name: \"range\", Params: []interface{}{[]byte(\"foo\"), []byte(\"goo\"), wrev}},",
                "+\t\t}",
                "+\t\tif g := fi.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\t\tt.Errorf(\"#%d: index action = %+v, want %+v\", i, g, wact)",
                "+\t\t}",
                "+\t\tif s.currentRev != 2 {",
                "+\t\t\tt.Errorf(\"#%d: current rev = %+v, want %+v\", i, s.currentRev, 2)",
                "+\t\t}",
                "+",
                "+\t\ts.Close()",
                "+\t}",
                "+}",
                "+",
                "+func TestStoreDeleteRange(t *testing.T) {",
                "+\tkey := newTestKeyBytes(revision{2, 0}, false)",
                "+\tkv := mvccpb.KeyValue{",
                "+\t\tKey:            []byte(\"foo\"),",
                "+\t\tValue:          []byte(\"bar\"),",
                "+\t\tCreateRevision: 1,",
                "+\t\tModRevision:    2,",
                "+\t\tVersion:        1,",
                "+\t}",
                "+\tkvb, err := kv.Marshal()",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\ttests := []struct {",
                "+\t\trev revision",
                "+\t\tr   indexRangeResp",
                "+\t\trr  rangeResp",
                "+",
                "+\t\twkey    []byte",
                "+\t\twrev    revision",
                "+\t\twrrev   int64",
                "+\t\twdelrev revision",
                "+\t}{",
                "+\t\t{",
                "+\t\t\trevision{2, 0},",
                "+\t\t\tindexRangeResp{[][]byte{[]byte(\"foo\")}, []revision{{2, 0}}},",
                "+\t\t\trangeResp{[][]byte{key}, [][]byte{kvb}},",
                "+",
                "+\t\t\tnewTestKeyBytes(revision{3, 0}, true),",
                "+\t\t\trevision{3, 0},",
                "+\t\t\t2,",
                "+\t\t\trevision{3, 0},",
                "+\t\t},",
                "+\t}",
                "+\tfor i, tt := range tests {",
                "+\t\ts := newFakeStore()",
                "+\t\tb := s.b.(*fakeBackend)",
                "+\t\tfi := s.kvindex.(*fakeIndex)",
                "+",
                "+\t\ts.currentRev = tt.rev.main",
                "+\t\tfi.indexRangeRespc <- tt.r",
                "+\t\tb.tx.rangeRespc <- tt.rr",
                "+",
                "+\t\tn, _ := s.DeleteRange([]byte(\"foo\"), []byte(\"goo\"))",
                "+\t\tif n != 1 {",
                "+\t\t\tt.Errorf(\"#%d: n = %d, want 1\", i, n)",
                "+\t\t}",
                "+",
                "+\t\tdata, err := (&mvccpb.KeyValue{",
                "+\t\t\tKey: []byte(\"foo\"),",
                "+\t\t}).Marshal()",
                "+\t\tif err != nil {",
                "+\t\t\tt.Errorf(\"#%d: marshal err = %v, want nil\", i, err)",
                "+\t\t}",
                "+\t\twact := []testutil.Action{",
                "+\t\t\t{Name: \"seqput\", Params: []interface{}{keyBucketName, tt.wkey, data}},",
                "+\t\t}",
                "+\t\tif g := b.tx.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\t\tt.Errorf(\"#%d: tx action = %+v, want %+v\", i, g, wact)",
                "+\t\t}",
                "+\t\twact = []testutil.Action{",
                "+\t\t\t{Name: \"range\", Params: []interface{}{[]byte(\"foo\"), []byte(\"goo\"), tt.wrrev}},",
                "+\t\t\t{Name: \"tombstone\", Params: []interface{}{[]byte(\"foo\"), tt.wdelrev}},",
                "+\t\t}",
                "+\t\tif g := fi.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\t\tt.Errorf(\"#%d: index action = %+v, want %+v\", i, g, wact)",
                "+\t\t}",
                "+\t\tif s.currentRev != tt.wrev.main {",
                "+\t\t\tt.Errorf(\"#%d: rev = %+v, want %+v\", i, s.currentRev, tt.wrev)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestStoreCompact(t *testing.T) {",
                "+\ts := newFakeStore()",
                "+\tdefer s.Close()",
                "+\tb := s.b.(*fakeBackend)",
                "+\tfi := s.kvindex.(*fakeIndex)",
                "+",
                "+\ts.currentRev = 3",
                "+\tfi.indexCompactRespc <- map[revision]struct{}{{1, 0}: {}}",
                "+\tkey1 := newTestKeyBytes(revision{1, 0}, false)",
                "+\tkey2 := newTestKeyBytes(revision{2, 0}, false)",
                "+\tb.tx.rangeRespc <- rangeResp{[][]byte{key1, key2}, nil}",
                "+",
                "+\ts.Compact(3)",
                "+\ts.fifoSched.WaitFinish(1)",
                "+",
                "+\tif s.compactMainRev != 3 {",
                "+\t\tt.Errorf(\"compact main rev = %d, want 3\", s.compactMainRev)",
                "+\t}",
                "+\tend := make([]byte, 8)",
                "+\tbinary.BigEndian.PutUint64(end, uint64(4))",
                "+\twact := []testutil.Action{",
                "+\t\t{Name: \"put\", Params: []interface{}{metaBucketName, scheduledCompactKeyName, newTestRevBytes(revision{3, 0})}},",
                "+\t\t{Name: \"range\", Params: []interface{}{keyBucketName, make([]byte, 17), end, int64(10000)}},",
                "+\t\t{Name: \"delete\", Params: []interface{}{keyBucketName, key2}},",
                "+\t\t{Name: \"put\", Params: []interface{}{metaBucketName, finishedCompactKeyName, newTestRevBytes(revision{3, 0})}},",
                "+\t}",
                "+\tif g := b.tx.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\tt.Errorf(\"tx actions = %+v, want %+v\", g, wact)",
                "+\t}",
                "+\twact = []testutil.Action{",
                "+\t\t{Name: \"compact\", Params: []interface{}{int64(3)}},",
                "+\t}",
                "+\tif g := fi.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\tt.Errorf(\"index action = %+v, want %+v\", g, wact)",
                "+\t}",
                "+}",
                "+",
                "+func TestStoreRestore(t *testing.T) {",
                "+\ts := newFakeStore()",
                "+\tb := s.b.(*fakeBackend)",
                "+\tfi := s.kvindex.(*fakeIndex)",
                "+",
                "+\tputkey := newTestKeyBytes(revision{3, 0}, false)",
                "+\tputkv := mvccpb.KeyValue{",
                "+\t\tKey:            []byte(\"foo\"),",
                "+\t\tValue:          []byte(\"bar\"),",
                "+\t\tCreateRevision: 4,",
                "+\t\tModRevision:    4,",
                "+\t\tVersion:        1,",
                "+\t}",
                "+\tputkvb, err := putkv.Marshal()",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tdelkey := newTestKeyBytes(revision{5, 0}, true)",
                "+\tdelkv := mvccpb.KeyValue{",
                "+\t\tKey: []byte(\"foo\"),",
                "+\t}",
                "+\tdelkvb, err := delkv.Marshal()",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tb.tx.rangeRespc <- rangeResp{[][]byte{finishedCompactKeyName}, [][]byte{newTestRevBytes(revision{3, 0})}}",
                "+\tb.tx.rangeRespc <- rangeResp{[][]byte{scheduledCompactKeyName}, [][]byte{newTestRevBytes(revision{3, 0})}}",
                "+",
                "+\tb.tx.rangeRespc <- rangeResp{[][]byte{putkey, delkey}, [][]byte{putkvb, delkvb}}",
                "+\tb.tx.rangeRespc <- rangeResp{nil, nil}",
                "+",
                "+\ts.restore()",
                "+",
                "+\tif s.compactMainRev != 3 {",
                "+\t\tt.Errorf(\"compact rev = %d, want 5\", s.compactMainRev)",
                "+\t}",
                "+\tif s.currentRev != 5 {",
                "+\t\tt.Errorf(\"current rev = %v, want 5\", s.currentRev)",
                "+\t}",
                "+\twact := []testutil.Action{",
                "+\t\t{Name: \"range\", Params: []interface{}{metaBucketName, finishedCompactKeyName, []byte(nil), int64(0)}},",
                "+\t\t{Name: \"range\", Params: []interface{}{metaBucketName, scheduledCompactKeyName, []byte(nil), int64(0)}},",
                "+\t\t{Name: \"range\", Params: []interface{}{keyBucketName, newTestRevBytes(revision{1, 0}), newTestRevBytes(revision{math.MaxInt64, math.MaxInt64}), int64(restoreChunkKeys)}},",
                "+\t}",
                "+\tif g := b.tx.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\tt.Errorf(\"tx actions = %+v, want %+v\", g, wact)",
                "+\t}",
                "+",
                "+\tgens := []generation{",
                "+\t\t{created: revision{4, 0}, ver: 2, revs: []revision{{3, 0}, {5, 0}}},",
                "+\t\t{created: revision{0, 0}, ver: 0, revs: nil},",
                "+\t}",
                "+\tki := &keyIndex{key: []byte(\"foo\"), modified: revision{5, 0}, generations: gens}",
                "+\twact = []testutil.Action{",
                "+\t\t{Name: \"keyIndex\", Params: []interface{}{ki}},",
                "+\t\t{Name: \"insert\", Params: []interface{}{ki}},",
                "+\t}",
                "+\tif g := fi.Action(); !reflect.DeepEqual(g, wact) {",
                "+\t\tt.Errorf(\"index action = %+v, want %+v\", g, wact)",
                "+\t}",
                "+}",
                "+",
                "+func TestRestoreDelete(t *testing.T) {",
                "+\toldChunk := restoreChunkKeys",
                "+\trestoreChunkKeys = mrand.Intn(3) + 2",
                "+\tdefer func() { restoreChunkKeys = oldChunk }()",
                "+",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer os.Remove(tmpPath)",
                "+",
                "+\tkeys := make(map[string]struct{})",
                "+\tfor i := 0; i < 20; i++ {",
                "+\t\tks := fmt.Sprintf(\"foo-%d\", i)",
                "+\t\tk := []byte(ks)",
                "+\t\ts.Put(k, []byte(\"bar\"), lease.NoLease)",
                "+\t\tkeys[ks] = struct{}{}",
                "+\t\tswitch mrand.Intn(3) {",
                "+\t\tcase 0:",
                "+\t\t\t// put random key from past via random range on map",
                "+\t\t\tks = fmt.Sprintf(\"foo-%d\", mrand.Intn(i+1))",
                "+\t\t\ts.Put([]byte(ks), []byte(\"baz\"), lease.NoLease)",
                "+\t\t\tkeys[ks] = struct{}{}",
                "+\t\tcase 1:",
                "+\t\t\t// delete random key via random range on map",
                "+\t\t\tfor k := range keys {",
                "+\t\t\t\ts.DeleteRange([]byte(k), nil)",
                "+\t\t\t\tdelete(keys, k)",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+\ts.Close()",
                "+",
                "+\ts = NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer s.Close()",
                "+\tfor i := 0; i < 20; i++ {",
                "+\t\tks := fmt.Sprintf(\"foo-%d\", i)",
                "+\t\tr, err := s.Range([]byte(ks), nil, RangeOptions{})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\tif _, ok := keys[ks]; ok {",
                "+\t\t\tif len(r.KVs) == 0 {",
                "+\t\t\t\tt.Errorf(\"#%d: expected %q, got deleted\", i, ks)",
                "+\t\t\t}",
                "+\t\t} else if len(r.KVs) != 0 {",
                "+\t\t\tt.Errorf(\"#%d: expected deleted, got %q\", i, ks)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestRestoreContinueUnfinishedCompaction(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts0 := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer os.Remove(tmpPath)",
                "+",
                "+\ts0.Put([]byte(\"foo\"), []byte(\"bar\"), lease.NoLease)",
                "+\ts0.Put([]byte(\"foo\"), []byte(\"bar1\"), lease.NoLease)",
                "+\ts0.Put([]byte(\"foo\"), []byte(\"bar2\"), lease.NoLease)",
                "+",
                "+\t// write scheduled compaction, but not do compaction",
                "+\trbytes := newRevBytes()",
                "+\trevToBytes(revision{main: 2}, rbytes)",
                "+\ttx := s0.b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafePut(metaBucketName, scheduledCompactKeyName, rbytes)",
                "+\ttx.Unlock()",
                "+",
                "+\ts0.Close()",
                "+",
                "+\ts1 := NewStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\t// wait for scheduled compaction to be finished",
                "+\ttime.Sleep(100 * time.Millisecond)",
                "+",
                "+\tif _, err := s1.Range([]byte(\"foo\"), nil, RangeOptions{Rev: 1}); err != ErrCompacted {",
                "+\t\tt.Errorf(\"range on compacted rev error = %v, want %v\", err, ErrCompacted)",
                "+\t}",
                "+\t// check the key in backend is deleted",
                "+\trevbytes := newRevBytes()",
                "+\trevToBytes(revision{main: 1}, revbytes)",
                "+",
                "+\t// The disk compaction is done asynchronously and requires more time on slow disk.",
                "+\t// try 5 times for CI with slow IO.",
                "+\tfor i := 0; i < 5; i++ {",
                "+\t\ttx = s1.b.BatchTx()",
                "+\t\ttx.Lock()",
                "+\t\tks, _ := tx.UnsafeRange(keyBucketName, revbytes, nil, 0)",
                "+\t\ttx.Unlock()",
                "+\t\tif len(ks) != 0 {",
                "+\t\t\ttime.Sleep(100 * time.Millisecond)",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tt.Errorf(\"key for rev %+v still exists, want deleted\", bytesToRev(revbytes))",
                "+}",
                "+",
                "+type hashKVResult struct {",
                "+\thash       uint32",
                "+\tcompactRev int64",
                "+}",
                "+",
                "+// TestHashKVWhenCompacting ensures that HashKV returns correct hash when compacting.",
                "+func TestHashKVWhenCompacting(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer os.Remove(tmpPath)",
                "+",
                "+\trev := 10000",
                "+\tfor i := 2; i <= rev; i++ {",
                "+\t\ts.Put([]byte(\"foo\"), []byte(fmt.Sprintf(\"bar%d\", i)), lease.NoLease)",
                "+\t}",
                "+",
                "+\thashCompactc := make(chan hashKVResult, 1)",
                "+",
                "+\tdonec := make(chan struct{})",
                "+\tvar wg sync.WaitGroup",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\twg.Add(1)",
                "+\t\tgo func() {",
                "+\t\t\tdefer wg.Done()",
                "+\t\t\tfor {",
                "+\t\t\t\thash, _, compactRev, err := s.HashByRev(int64(rev))",
                "+\t\t\t\tif err != nil {",
                "+\t\t\t\t\tt.Fatal(err)",
                "+\t\t\t\t}",
                "+\t\t\t\tselect {",
                "+\t\t\t\tcase <-donec:",
                "+\t\t\t\t\treturn",
                "+\t\t\t\tcase hashCompactc <- hashKVResult{hash, compactRev}:",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}()",
                "+\t}",
                "+",
                "+\tgo func() {",
                "+\t\tdefer close(donec)",
                "+\t\trevHash := make(map[int64]uint32)",
                "+\t\tfor round := 0; round < 1000; round++ {",
                "+\t\t\tr := <-hashCompactc",
                "+\t\t\tif revHash[r.compactRev] == 0 {",
                "+\t\t\t\trevHash[r.compactRev] = r.hash",
                "+\t\t\t}",
                "+\t\t\tif r.hash != revHash[r.compactRev] {",
                "+\t\t\t\tt.Fatalf(\"Hashes differ (current %v) != (saved %v)\", r.hash, revHash[r.compactRev])",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}()",
                "+",
                "+\twg.Add(1)",
                "+\tgo func() {",
                "+\t\tdefer wg.Done()",
                "+\t\tfor i := 100; i >= 0; i-- {",
                "+\t\t\t_, err := s.Compact(int64(rev - 1 - i))",
                "+\t\t\tif err != nil {",
                "+\t\t\t\tt.Fatal(err)",
                "+\t\t\t}",
                "+\t\t\ttime.Sleep(10 * time.Millisecond)",
                "+\t\t}",
                "+\t}()",
                "+",
                "+\tselect {",
                "+\tcase <-donec:",
                "+\t\twg.Wait()",
                "+\tcase <-time.After(10 * time.Second):",
                "+\t\ttestutil.FatalStack(t, \"timeout\")",
                "+\t}",
                "+}",
                "+",
                "+// TestHashKVZeroRevision ensures that \"HashByRev(0)\" computes",
                "+// correct hash value with latest revision.",
                "+func TestHashKVZeroRevision(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer os.Remove(tmpPath)",
                "+",
                "+\trev := 1000",
                "+\tfor i := 2; i <= rev; i++ {",
                "+\t\ts.Put([]byte(\"foo\"), []byte(fmt.Sprintf(\"bar%d\", i)), lease.NoLease)",
                "+\t}",
                "+\tif _, err := s.Compact(int64(rev / 2)); err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\thash1, _, _, err := s.HashByRev(int64(rev))",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tvar hash2 uint32",
                "+\thash2, _, _, err = s.HashByRev(0)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif hash1 != hash2 {",
                "+\t\tt.Errorf(\"hash %d (rev %d) != hash %d (rev 0)\", hash1, rev, hash2)",
                "+\t}",
                "+}",
                "+",
                "+func TestTxnPut(t *testing.T) {",
                "+\t// assign arbitrary size",
                "+\tbytesN := 30",
                "+\tsliceN := 100",
                "+\tkeys := createBytesSlice(bytesN, sliceN)",
                "+\tvals := createBytesSlice(bytesN, sliceN)",
                "+",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tfor i := 0; i < sliceN; i++ {",
                "+\t\ttxn := s.Write()",
                "+\t\tbase := int64(i + 2)",
                "+\t\tif rev := txn.Put(keys[i], vals[i], lease.NoLease); rev != base {",
                "+\t\t\tt.Errorf(\"#%d: rev = %d, want %d\", i, rev, base)",
                "+\t\t}",
                "+\t\ttxn.End()",
                "+\t}",
                "+}",
                "+",
                "+func TestTxnBlockBackendForceCommit(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(b, &lease.FakeLessor{}, nil)",
                "+\tdefer os.Remove(tmpPath)",
                "+",
                "+\ttxn := s.Read()",
                "+",
                "+\tdone := make(chan struct{})",
                "+\tgo func() {",
                "+\t\ts.b.ForceCommit()",
                "+\t\tdone <- struct{}{}",
                "+\t}()",
                "+\tselect {",
                "+\tcase <-done:",
                "+\t\tt.Fatalf(\"failed to block ForceCommit\")",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t}",
                "+",
                "+\ttxn.End()",
                "+\tselect {",
                "+\tcase <-done:",
                "+\tcase <-time.After(5 * time.Second): // wait 5 seconds for CI with slow IO",
                "+\t\ttestutil.FatalStack(t, \"failed to execute ForceCommit\")",
                "+\t}",
                "+}",
                "+",
                "+// TODO: test attach key to lessor",
                "+",
                "+func newTestRevBytes(rev revision) []byte {",
                "+\tbytes := newRevBytes()",
                "+\trevToBytes(rev, bytes)",
                "+\treturn bytes",
                "+}",
                "+",
                "+func newTestKeyBytes(rev revision, tombstone bool) []byte {",
                "+\tbytes := newRevBytes()",
                "+\trevToBytes(rev, bytes)",
                "+\tif tombstone {",
                "+\t\tbytes = appendMarkTombstone(bytes)",
                "+\t}",
                "+\treturn bytes",
                "+}",
                "+",
                "+func newFakeStore() *store {",
                "+\tb := &fakeBackend{&fakeBatchTx{",
                "+\t\tRecorder:   &testutil.RecorderBuffered{},",
                "+\t\trangeRespc: make(chan rangeResp, 5)}}",
                "+\tfi := &fakeIndex{",
                "+\t\tRecorder:              &testutil.RecorderBuffered{},",
                "+\t\tindexGetRespc:         make(chan indexGetResp, 1),",
                "+\t\tindexRangeRespc:       make(chan indexRangeResp, 1),",
                "+\t\tindexRangeEventsRespc: make(chan indexRangeEventsResp, 1),",
                "+\t\tindexCompactRespc:     make(chan map[revision]struct{}, 1),",
                "+\t}",
                "+\ts := &store{",
                "+\t\tb:              b,",
                "+\t\tle:             &lease.FakeLessor{},",
                "+\t\tkvindex:        fi,",
                "+\t\tcurrentRev:     0,",
                "+\t\tcompactMainRev: -1,",
                "+\t\tfifoSched:      schedule.NewFIFOScheduler(),",
                "+\t\tstopc:          make(chan struct{}),",
                "+\t}",
                "+\ts.ReadView, s.WriteView = &readView{s}, &writeView{s}",
                "+\treturn s",
                "+}",
                "+",
                "+type rangeResp struct {",
                "+\tkeys [][]byte",
                "+\tvals [][]byte",
                "+}",
                "+",
                "+type fakeBatchTx struct {",
                "+\ttestutil.Recorder",
                "+\trangeRespc chan rangeResp",
                "+}",
                "+",
                "+func (b *fakeBatchTx) Lock()                          {}",
                "+func (b *fakeBatchTx) Unlock()                        {}",
                "+func (b *fakeBatchTx) UnsafeCreateBucket(name []byte) {}",
                "+func (b *fakeBatchTx) UnsafePut(bucketName []byte, key []byte, value []byte) {",
                "+\tb.Recorder.Record(testutil.Action{Name: \"put\", Params: []interface{}{bucketName, key, value}})",
                "+}",
                "+func (b *fakeBatchTx) UnsafeSeqPut(bucketName []byte, key []byte, value []byte) {",
                "+\tb.Recorder.Record(testutil.Action{Name: \"seqput\", Params: []interface{}{bucketName, key, value}})",
                "+}",
                "+func (b *fakeBatchTx) UnsafeRange(bucketName []byte, key, endKey []byte, limit int64) (keys [][]byte, vals [][]byte) {",
                "+\tb.Recorder.Record(testutil.Action{Name: \"range\", Params: []interface{}{bucketName, key, endKey, limit}})",
                "+\tr := <-b.rangeRespc",
                "+\treturn r.keys, r.vals",
                "+}",
                "+func (b *fakeBatchTx) UnsafeDelete(bucketName []byte, key []byte) {",
                "+\tb.Recorder.Record(testutil.Action{Name: \"delete\", Params: []interface{}{bucketName, key}})",
                "+}",
                "+func (b *fakeBatchTx) UnsafeForEach(bucketName []byte, visitor func(k, v []byte) error) error {",
                "+\treturn nil",
                "+}",
                "+func (b *fakeBatchTx) Commit()        {}",
                "+func (b *fakeBatchTx) CommitAndStop() {}",
                "+",
                "+type fakeBackend struct {",
                "+\ttx *fakeBatchTx",
                "+}",
                "+",
                "+func (b *fakeBackend) BatchTx() backend.BatchTx                                    { return b.tx }",
                "+func (b *fakeBackend) ReadTx() backend.ReadTx                                      { return b.tx }",
                "+func (b *fakeBackend) Hash(ignores map[backend.IgnoreKey]struct{}) (uint32, error) { return 0, nil }",
                "+func (b *fakeBackend) Size() int64                                                 { return 0 }",
                "+func (b *fakeBackend) SizeInUse() int64                                            { return 0 }",
                "+func (b *fakeBackend) Snapshot() backend.Snapshot                                  { return nil }",
                "+func (b *fakeBackend) ForceCommit()                                                {}",
                "+func (b *fakeBackend) Defrag() error                                               { return nil }",
                "+func (b *fakeBackend) Close() error                                                { return nil }",
                "+",
                "+type indexGetResp struct {",
                "+\trev     revision",
                "+\tcreated revision",
                "+\tver     int64",
                "+\terr     error",
                "+}",
                "+",
                "+type indexRangeResp struct {",
                "+\tkeys [][]byte",
                "+\trevs []revision",
                "+}",
                "+",
                "+type indexRangeEventsResp struct {",
                "+\trevs []revision",
                "+}",
                "+",
                "+type fakeIndex struct {",
                "+\ttestutil.Recorder",
                "+\tindexGetRespc         chan indexGetResp",
                "+\tindexRangeRespc       chan indexRangeResp",
                "+\tindexRangeEventsRespc chan indexRangeEventsResp",
                "+\tindexCompactRespc     chan map[revision]struct{}",
                "+}",
                "+",
                "+func (i *fakeIndex) Revisions(key, end []byte, atRev int64) []revision {",
                "+\t_, rev := i.Range(key, end, atRev)",
                "+\treturn rev",
                "+}",
                "+",
                "+func (i *fakeIndex) Get(key []byte, atRev int64) (rev, created revision, ver int64, err error) {",
                "+\ti.Recorder.Record(testutil.Action{Name: \"get\", Params: []interface{}{key, atRev}})",
                "+\tr := <-i.indexGetRespc",
                "+\treturn r.rev, r.created, r.ver, r.err",
                "+}",
                "+func (i *fakeIndex) Range(key, end []byte, atRev int64) ([][]byte, []revision) {",
                "+\ti.Recorder.Record(testutil.Action{Name: \"range\", Params: []interface{}{key, end, atRev}})",
                "+\tr := <-i.indexRangeRespc",
                "+\treturn r.keys, r.revs",
                "+}",
                "+func (i *fakeIndex) Put(key []byte, rev revision) {",
                "+\ti.Recorder.Record(testutil.Action{Name: \"put\", Params: []interface{}{key, rev}})",
                "+}",
                "+func (i *fakeIndex) Tombstone(key []byte, rev revision) error {",
                "+\ti.Recorder.Record(testutil.Action{Name: \"tombstone\", Params: []interface{}{key, rev}})",
                "+\treturn nil",
                "+}",
                "+func (i *fakeIndex) RangeSince(key, end []byte, rev int64) []revision {",
                "+\ti.Recorder.Record(testutil.Action{Name: \"rangeEvents\", Params: []interface{}{key, end, rev}})",
                "+\tr := <-i.indexRangeEventsRespc",
                "+\treturn r.revs",
                "+}",
                "+func (i *fakeIndex) Compact(rev int64) map[revision]struct{} {",
                "+\ti.Recorder.Record(testutil.Action{Name: \"compact\", Params: []interface{}{rev}})",
                "+\treturn <-i.indexCompactRespc",
                "+}",
                "+func (i *fakeIndex) Keep(rev int64) map[revision]struct{} {",
                "+\ti.Recorder.Record(testutil.Action{Name: \"keep\", Params: []interface{}{rev}})",
                "+\treturn <-i.indexCompactRespc",
                "+}",
                "+func (i *fakeIndex) Equal(b index) bool { return false }",
                "+",
                "+func (i *fakeIndex) Insert(ki *keyIndex) {",
                "+\ti.Recorder.Record(testutil.Action{Name: \"insert\", Params: []interface{}{ki}})",
                "+}",
                "+",
                "+func (i *fakeIndex) KeyIndex(ki *keyIndex) *keyIndex {",
                "+\ti.Recorder.Record(testutil.Action{Name: \"keyIndex\", Params: []interface{}{ki}})",
                "+\treturn nil",
                "+}",
                "+",
                "+func createBytesSlice(bytesN, sliceN int) [][]byte {",
                "+\trs := [][]byte{}",
                "+\tfor len(rs) != sliceN {",
                "+\t\tv := make([]byte, bytesN)",
                "+\t\tif _, err := rand.Read(v); err != nil {",
                "+\t\t\tpanic(err)",
                "+\t\t}",
                "+\t\trs = append(rs, v)",
                "+\t}",
                "+\treturn rs",
                "+}",
                "diff --git a/mvcc/kvstore_txn.go b/mvcc/kvstore_txn.go",
                "new file mode 100644",
                "index 000000000..8896fb86d",
                "--- /dev/null",
                "+++ b/mvcc/kvstore_txn.go",
                "@@ -0,0 +1,253 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+)",
                "+",
                "+type storeTxnRead struct {",
                "+\ts  *store",
                "+\ttx backend.ReadTx",
                "+",
                "+\tfirstRev int64",
                "+\trev      int64",
                "+}",
                "+",
                "+func (s *store) Read() TxnRead {",
                "+\ts.mu.RLock()",
                "+\ttx := s.b.ReadTx()",
                "+\ts.revMu.RLock()",
                "+\ttx.Lock()",
                "+\tfirstRev, rev := s.compactMainRev, s.currentRev",
                "+\ts.revMu.RUnlock()",
                "+\treturn newMetricsTxnRead(&storeTxnRead{s, tx, firstRev, rev})",
                "+}",
                "+",
                "+func (tr *storeTxnRead) FirstRev() int64 { return tr.firstRev }",
                "+func (tr *storeTxnRead) Rev() int64      { return tr.rev }",
                "+",
                "+func (tr *storeTxnRead) Range(key, end []byte, ro RangeOptions) (r *RangeResult, err error) {",
                "+\treturn tr.rangeKeys(key, end, tr.Rev(), ro)",
                "+}",
                "+",
                "+func (tr *storeTxnRead) End() {",
                "+\ttr.tx.Unlock()",
                "+\ttr.s.mu.RUnlock()",
                "+}",
                "+",
                "+type storeTxnWrite struct {",
                "+\tstoreTxnRead",
                "+\ttx backend.BatchTx",
                "+\t// beginRev is the revision where the txn begins; it will write to the next revision.",
                "+\tbeginRev int64",
                "+\tchanges  []mvccpb.KeyValue",
                "+}",
                "+",
                "+func (s *store) Write() TxnWrite {",
                "+\ts.mu.RLock()",
                "+\ttx := s.b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttw := &storeTxnWrite{",
                "+\t\tstoreTxnRead: storeTxnRead{s, tx, 0, 0},",
                "+\t\ttx:           tx,",
                "+\t\tbeginRev:     s.currentRev,",
                "+\t\tchanges:      make([]mvccpb.KeyValue, 0, 4),",
                "+\t}",
                "+\treturn newMetricsTxnWrite(tw)",
                "+}",
                "+",
                "+func (tw *storeTxnWrite) Rev() int64 { return tw.beginRev }",
                "+",
                "+func (tw *storeTxnWrite) Range(key, end []byte, ro RangeOptions) (r *RangeResult, err error) {",
                "+\trev := tw.beginRev",
                "+\tif len(tw.changes) > 0 {",
                "+\t\trev++",
                "+\t}",
                "+\treturn tw.rangeKeys(key, end, rev, ro)",
                "+}",
                "+",
                "+func (tw *storeTxnWrite) DeleteRange(key, end []byte) (int64, int64) {",
                "+\tif n := tw.deleteRange(key, end); n != 0 || len(tw.changes) > 0 {",
                "+\t\treturn n, int64(tw.beginRev + 1)",
                "+\t}",
                "+\treturn 0, int64(tw.beginRev)",
                "+}",
                "+",
                "+func (tw *storeTxnWrite) Put(key, value []byte, lease lease.LeaseID) int64 {",
                "+\ttw.put(key, value, lease)",
                "+\treturn int64(tw.beginRev + 1)",
                "+}",
                "+",
                "+func (tw *storeTxnWrite) End() {",
                "+\t// only update index if the txn modifies the mvcc state.",
                "+\tif len(tw.changes) != 0 {",
                "+\t\ttw.s.saveIndex(tw.tx)",
                "+\t\t// hold revMu lock to prevent new read txns from opening until writeback.",
                "+\t\ttw.s.revMu.Lock()",
                "+\t\ttw.s.currentRev++",
                "+\t}",
                "+\ttw.tx.Unlock()",
                "+\tif len(tw.changes) != 0 {",
                "+\t\ttw.s.revMu.Unlock()",
                "+\t}",
                "+\ttw.s.mu.RUnlock()",
                "+}",
                "+",
                "+func (tr *storeTxnRead) rangeKeys(key, end []byte, curRev int64, ro RangeOptions) (*RangeResult, error) {",
                "+\trev := ro.Rev",
                "+\tif rev > curRev {",
                "+\t\treturn &RangeResult{KVs: nil, Count: -1, Rev: curRev}, ErrFutureRev",
                "+\t}",
                "+\tif rev <= 0 {",
                "+\t\trev = curRev",
                "+\t}",
                "+\tif rev < tr.s.compactMainRev {",
                "+\t\treturn &RangeResult{KVs: nil, Count: -1, Rev: 0}, ErrCompacted",
                "+\t}",
                "+",
                "+\trevpairs := tr.s.kvindex.Revisions(key, end, int64(rev))",
                "+\tif len(revpairs) == 0 {",
                "+\t\treturn &RangeResult{KVs: nil, Count: 0, Rev: curRev}, nil",
                "+\t}",
                "+\tif ro.Count {",
                "+\t\treturn &RangeResult{KVs: nil, Count: len(revpairs), Rev: curRev}, nil",
                "+\t}",
                "+",
                "+\tlimit := int(ro.Limit)",
                "+\tif limit <= 0 || limit > len(revpairs) {",
                "+\t\tlimit = len(revpairs)",
                "+\t}",
                "+",
                "+\tkvs := make([]mvccpb.KeyValue, limit)",
                "+\trevBytes := newRevBytes()",
                "+\tfor i, revpair := range revpairs[:len(kvs)] {",
                "+\t\trevToBytes(revpair, revBytes)",
                "+\t\t_, vs := tr.tx.UnsafeRange(keyBucketName, revBytes, nil, 0)",
                "+\t\tif len(vs) != 1 {",
                "+\t\t\tplog.Fatalf(\"range cannot find rev (%d,%d)\", revpair.main, revpair.sub)",
                "+\t\t}",
                "+\t\tif err := kvs[i].Unmarshal(vs[0]); err != nil {",
                "+\t\t\tplog.Fatalf(\"cannot unmarshal event: %v\", err)",
                "+\t\t}",
                "+\t}",
                "+\treturn &RangeResult{KVs: kvs, Count: len(revpairs), Rev: curRev}, nil",
                "+}",
                "+",
                "+func (tw *storeTxnWrite) put(key, value []byte, leaseID lease.LeaseID) {",
                "+\trev := tw.beginRev + 1",
                "+\tc := rev",
                "+\toldLease := lease.NoLease",
                "+",
                "+\t// if the key exists before, use its previous created and",
                "+\t// get its previous leaseID",
                "+\t_, created, ver, err := tw.s.kvindex.Get(key, rev)",
                "+\tif err == nil {",
                "+\t\tc = created.main",
                "+\t\toldLease = tw.s.le.GetLease(lease.LeaseItem{Key: string(key)})",
                "+\t}",
                "+",
                "+\tibytes := newRevBytes()",
                "+\tidxRev := revision{main: rev, sub: int64(len(tw.changes))}",
                "+\trevToBytes(idxRev, ibytes)",
                "+",
                "+\tver = ver + 1",
                "+\tkv := mvccpb.KeyValue{",
                "+\t\tKey:            key,",
                "+\t\tValue:          value,",
                "+\t\tCreateRevision: c,",
                "+\t\tModRevision:    rev,",
                "+\t\tVersion:        ver,",
                "+\t\tLease:          int64(leaseID),",
                "+\t}",
                "+",
                "+\td, err := kv.Marshal()",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot marshal event: %v\", err)",
                "+\t}",
                "+",
                "+\ttw.tx.UnsafeSeqPut(keyBucketName, ibytes, d)",
                "+\ttw.s.kvindex.Put(key, idxRev)",
                "+\ttw.changes = append(tw.changes, kv)",
                "+",
                "+\tif oldLease != lease.NoLease {",
                "+\t\tif tw.s.le == nil {",
                "+\t\t\tpanic(\"no lessor to detach lease\")",
                "+\t\t}",
                "+\t\terr = tw.s.le.Detach(oldLease, []lease.LeaseItem{{Key: string(key)}})",
                "+\t\tif err != nil {",
                "+\t\t\tplog.Errorf(\"unexpected error from lease detach: %v\", err)",
                "+\t\t}",
                "+\t}",
                "+\tif leaseID != lease.NoLease {",
                "+\t\tif tw.s.le == nil {",
                "+\t\t\tpanic(\"no lessor to attach lease\")",
                "+\t\t}",
                "+\t\terr = tw.s.le.Attach(leaseID, []lease.LeaseItem{{Key: string(key)}})",
                "+\t\tif err != nil {",
                "+\t\t\tpanic(\"unexpected error from lease Attach\")",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func (tw *storeTxnWrite) deleteRange(key, end []byte) int64 {",
                "+\trrev := tw.beginRev",
                "+\tif len(tw.changes) > 0 {",
                "+\t\trrev += 1",
                "+\t}",
                "+\tkeys, revs := tw.s.kvindex.Range(key, end, rrev)",
                "+\tif len(keys) == 0 {",
                "+\t\treturn 0",
                "+\t}",
                "+\tfor i, key := range keys {",
                "+\t\ttw.delete(key, revs[i])",
                "+\t}",
                "+\treturn int64(len(keys))",
                "+}",
                "+",
                "+func (tw *storeTxnWrite) delete(key []byte, rev revision) {",
                "+\tibytes := newRevBytes()",
                "+\tidxRev := revision{main: tw.beginRev + 1, sub: int64(len(tw.changes))}",
                "+\trevToBytes(idxRev, ibytes)",
                "+\tibytes = appendMarkTombstone(ibytes)",
                "+",
                "+\tkv := mvccpb.KeyValue{Key: key}",
                "+",
                "+\td, err := kv.Marshal()",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot marshal event: %v\", err)",
                "+\t}",
                "+",
                "+\ttw.tx.UnsafeSeqPut(keyBucketName, ibytes, d)",
                "+\terr = tw.s.kvindex.Tombstone(key, idxRev)",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot tombstone an existing key (%s): %v\", string(key), err)",
                "+\t}",
                "+\ttw.changes = append(tw.changes, kv)",
                "+",
                "+\titem := lease.LeaseItem{Key: string(key)}",
                "+\tleaseID := tw.s.le.GetLease(item)",
                "+",
                "+\tif leaseID != lease.NoLease {",
                "+\t\terr = tw.s.le.Detach(leaseID, []lease.LeaseItem{item})",
                "+\t\tif err != nil {",
                "+\t\t\tplog.Errorf(\"cannot detach %v\", err)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func (tw *storeTxnWrite) Changes() []mvccpb.KeyValue { return tw.changes }",
                "diff --git a/mvcc/metrics.go b/mvcc/metrics.go",
                "new file mode 100644",
                "index 000000000..4f43ed650",
                "--- /dev/null",
                "+++ b/mvcc/metrics.go",
                "@@ -0,0 +1,200 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"sync\"",
                "+",
                "+\t\"github.com/prometheus/client_golang/prometheus\"",
                "+)",
                "+",
                "+var (",
                "+\trangeCounter = prometheus.NewCounter(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"range_total\",",
                "+\t\t\tHelp:      \"Total number of ranges seen by this member.\",",
                "+\t\t})",
                "+",
                "+\tputCounter = prometheus.NewCounter(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"put_total\",",
                "+\t\t\tHelp:      \"Total number of puts seen by this member.\",",
                "+\t\t})",
                "+",
                "+\tdeleteCounter = prometheus.NewCounter(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"delete_total\",",
                "+\t\t\tHelp:      \"Total number of deletes seen by this member.\",",
                "+\t\t})",
                "+",
                "+\ttxnCounter = prometheus.NewCounter(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"txn_total\",",
                "+\t\t\tHelp:      \"Total number of txns seen by this member.\",",
                "+\t\t})",
                "+",
                "+\tkeysGauge = prometheus.NewGauge(",
                "+\t\tprometheus.GaugeOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"keys_total\",",
                "+\t\t\tHelp:      \"Total number of keys.\",",
                "+\t\t})",
                "+",
                "+\twatchStreamGauge = prometheus.NewGauge(",
                "+\t\tprometheus.GaugeOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"watch_stream_total\",",
                "+\t\t\tHelp:      \"Total number of watch streams.\",",
                "+\t\t})",
                "+",
                "+\twatcherGauge = prometheus.NewGauge(",
                "+\t\tprometheus.GaugeOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"watcher_total\",",
                "+\t\t\tHelp:      \"Total number of watchers.\",",
                "+\t\t})",
                "+",
                "+\tslowWatcherGauge = prometheus.NewGauge(",
                "+\t\tprometheus.GaugeOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"slow_watcher_total\",",
                "+\t\t\tHelp:      \"Total number of unsynced slow watchers.\",",
                "+\t\t})",
                "+",
                "+\ttotalEventsCounter = prometheus.NewCounter(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"events_total\",",
                "+\t\t\tHelp:      \"Total number of events sent by this member.\",",
                "+\t\t})",
                "+",
                "+\tpendingEventsGauge = prometheus.NewGauge(",
                "+\t\tprometheus.GaugeOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"pending_events_total\",",
                "+\t\t\tHelp:      \"Total number of pending events to be sent.\",",
                "+\t\t})",
                "+",
                "+\tindexCompactionPauseDurations = prometheus.NewHistogram(",
                "+\t\tprometheus.HistogramOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"index_compaction_pause_duration_milliseconds\",",
                "+\t\t\tHelp:      \"Bucketed histogram of index compaction pause duration.\",",
                "+\t\t\t// 0.5ms -> 1second",
                "+\t\t\tBuckets: prometheus.ExponentialBuckets(0.5, 2, 12),",
                "+\t\t})",
                "+",
                "+\tdbCompactionPauseDurations = prometheus.NewHistogram(",
                "+\t\tprometheus.HistogramOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"db_compaction_pause_duration_milliseconds\",",
                "+\t\t\tHelp:      \"Bucketed histogram of db compaction pause duration.\",",
                "+\t\t\t// 1ms -> 4second",
                "+\t\t\tBuckets: prometheus.ExponentialBuckets(1, 2, 13),",
                "+\t\t})",
                "+",
                "+\tdbCompactionTotalDurations = prometheus.NewHistogram(",
                "+\t\tprometheus.HistogramOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"db_compaction_total_duration_milliseconds\",",
                "+\t\t\tHelp:      \"Bucketed histogram of db compaction total duration.\",",
                "+\t\t\t// 100ms -> 800second",
                "+\t\t\tBuckets: prometheus.ExponentialBuckets(100, 2, 14),",
                "+\t\t})",
                "+",
                "+\tdbCompactionKeysCounter = prometheus.NewCounter(",
                "+\t\tprometheus.CounterOpts{",
                "+\t\t\tNamespace: \"etcd_debugging\",",
                "+\t\t\tSubsystem: \"mvcc\",",
                "+\t\t\tName:      \"db_compaction_keys_total\",",
                "+\t\t\tHelp:      \"Total number of db keys compacted.\",",
                "+\t\t})",
                "+",
                "+\tdbTotalSize = prometheus.NewGaugeFunc(prometheus.GaugeOpts{",
                "+\t\tNamespace: \"etcd_debugging\",",
                "+\t\tSubsystem: \"mvcc\",",
                "+\t\tName:      \"db_total_size_in_bytes\",",
                "+\t\tHelp:      \"Total size of the underlying database physically allocated in bytes.\",",
                "+\t},",
                "+\t\tfunc() float64 {",
                "+\t\t\treportDbTotalSizeInBytesMu.RLock()",
                "+\t\t\tdefer reportDbTotalSizeInBytesMu.RUnlock()",
                "+\t\t\treturn reportDbTotalSizeInBytes()",
                "+\t\t},",
                "+\t)",
                "+\t// overridden by mvcc initialization",
                "+\treportDbTotalSizeInBytesMu sync.RWMutex",
                "+\treportDbTotalSizeInBytes   func() float64 = func() float64 { return 0 }",
                "+",
                "+\tdbTotalSizeInUse = prometheus.NewGaugeFunc(prometheus.GaugeOpts{",
                "+\t\tNamespace: \"etcd_debugging\",",
                "+\t\tSubsystem: \"mvcc\",",
                "+\t\tName:      \"db_total_size_in_use_in_bytes\",",
                "+\t\tHelp:      \"Total size of the underlying database logically in use in bytes.\",",
                "+\t},",
                "+\t\tfunc() float64 {",
                "+\t\t\treportDbTotalSizeInUseInBytesMu.RLock()",
                "+\t\t\tdefer reportDbTotalSizeInUseInBytesMu.RUnlock()",
                "+\t\t\treturn reportDbTotalSizeInUseInBytes()",
                "+\t\t},",
                "+\t)",
                "+\t// overridden by mvcc initialization",
                "+\treportDbTotalSizeInUseInBytesMu sync.RWMutex",
                "+\treportDbTotalSizeInUseInBytes   func() float64 = func() float64 { return 0 }",
                "+)",
                "+",
                "+func init() {",
                "+\tprometheus.MustRegister(rangeCounter)",
                "+\tprometheus.MustRegister(putCounter)",
                "+\tprometheus.MustRegister(deleteCounter)",
                "+\tprometheus.MustRegister(txnCounter)",
                "+\tprometheus.MustRegister(keysGauge)",
                "+\tprometheus.MustRegister(watchStreamGauge)",
                "+\tprometheus.MustRegister(watcherGauge)",
                "+\tprometheus.MustRegister(slowWatcherGauge)",
                "+\tprometheus.MustRegister(totalEventsCounter)",
                "+\tprometheus.MustRegister(pendingEventsGauge)",
                "+\tprometheus.MustRegister(indexCompactionPauseDurations)",
                "+\tprometheus.MustRegister(dbCompactionPauseDurations)",
                "+\tprometheus.MustRegister(dbCompactionTotalDurations)",
                "+\tprometheus.MustRegister(dbCompactionKeysCounter)",
                "+\tprometheus.MustRegister(dbTotalSize)",
                "+\tprometheus.MustRegister(dbTotalSizeInUse)",
                "+}",
                "+",
                "+// ReportEventReceived reports that an event is received.",
                "+// This function should be called when the external systems received an",
                "+// event from mvcc.Watcher.",
                "+func ReportEventReceived(n int) {",
                "+\tpendingEventsGauge.Sub(float64(n))",
                "+\ttotalEventsCounter.Add(float64(n))",
                "+}",
                "diff --git a/mvcc/metrics_txn.go b/mvcc/metrics_txn.go",
                "new file mode 100644",
                "index 000000000..6a96be764",
                "--- /dev/null",
                "+++ b/mvcc/metrics_txn.go",
                "@@ -0,0 +1,57 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import \"github.com/coreos/etcd/lease\"",
                "+",
                "+type metricsTxnWrite struct {",
                "+\tTxnWrite",
                "+\tranges  uint",
                "+\tputs    uint",
                "+\tdeletes uint",
                "+}",
                "+",
                "+func newMetricsTxnRead(tr TxnRead) TxnRead {",
                "+\treturn &metricsTxnWrite{&txnReadWrite{tr}, 0, 0, 0}",
                "+}",
                "+",
                "+func newMetricsTxnWrite(tw TxnWrite) TxnWrite {",
                "+\treturn &metricsTxnWrite{tw, 0, 0, 0}",
                "+}",
                "+",
                "+func (tw *metricsTxnWrite) Range(key, end []byte, ro RangeOptions) (*RangeResult, error) {",
                "+\ttw.ranges++",
                "+\treturn tw.TxnWrite.Range(key, end, ro)",
                "+}",
                "+",
                "+func (tw *metricsTxnWrite) DeleteRange(key, end []byte) (n, rev int64) {",
                "+\ttw.deletes++",
                "+\treturn tw.TxnWrite.DeleteRange(key, end)",
                "+}",
                "+",
                "+func (tw *metricsTxnWrite) Put(key, value []byte, lease lease.LeaseID) (rev int64) {",
                "+\ttw.puts++",
                "+\treturn tw.TxnWrite.Put(key, value, lease)",
                "+}",
                "+",
                "+func (tw *metricsTxnWrite) End() {",
                "+\tdefer tw.TxnWrite.End()",
                "+\tif sum := tw.ranges + tw.puts + tw.deletes; sum > 1 {",
                "+\t\ttxnCounter.Inc()",
                "+\t}",
                "+\trangeCounter.Add(float64(tw.ranges))",
                "+\tputCounter.Add(float64(tw.puts))",
                "+\tdeleteCounter.Add(float64(tw.deletes))",
                "+}",
                "diff --git a/mvcc/mvccpb/kv.pb.go b/mvcc/mvccpb/kv.pb.go",
                "new file mode 100644",
                "index 000000000..23fe337a5",
                "--- /dev/null",
                "+++ b/mvcc/mvccpb/kv.pb.go",
                "@@ -0,0 +1,718 @@",
                "+// Code generated by protoc-gen-gogo. DO NOT EDIT.",
                "+// source: kv.proto",
                "+",
                "+/*",
                "+\tPackage mvccpb is a generated protocol buffer package.",
                "+",
                "+\tIt is generated from these files:",
                "+\t\tkv.proto",
                "+",
                "+\tIt has these top-level messages:",
                "+\t\tKeyValue",
                "+\t\tEvent",
                "+*/",
                "+package mvccpb",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+",
                "+\tproto \"github.com/golang/protobuf/proto\"",
                "+",
                "+\tmath \"math\"",
                "+",
                "+\t_ \"github.com/gogo/protobuf/gogoproto\"",
                "+",
                "+\tio \"io\"",
                "+)",
                "+",
                "+// Reference imports to suppress errors if they are not otherwise used.",
                "+var _ = proto.Marshal",
                "+var _ = fmt.Errorf",
                "+var _ = math.Inf",
                "+",
                "+// This is a compile-time assertion to ensure that this generated file",
                "+// is compatible with the proto package it is being compiled against.",
                "+// A compilation error at this line likely means your copy of the",
                "+// proto package needs to be updated.",
                "+const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package",
                "+",
                "+type Event_EventType int32",
                "+",
                "+const (",
                "+\tPUT    Event_EventType = 0",
                "+\tDELETE Event_EventType = 1",
                "+)",
                "+",
                "+var Event_EventType_name = map[int32]string{",
                "+\t0: \"PUT\",",
                "+\t1: \"DELETE\",",
                "+}",
                "+var Event_EventType_value = map[string]int32{",
                "+\t\"PUT\":    0,",
                "+\t\"DELETE\": 1,",
                "+}",
                "+",
                "+func (x Event_EventType) String() string {",
                "+\treturn proto.EnumName(Event_EventType_name, int32(x))",
                "+}",
                "+func (Event_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptorKv, []int{1, 0} }",
                "+",
                "+type KeyValue struct {",
                "+\t// key is the key in bytes. An empty key is not allowed.",
                "+\tKey []byte `protobuf:\"bytes,1,opt,name=key,proto3\" json:\"key,omitempty\"`",
                "+\t// create_revision is the revision of last creation on this key.",
                "+\tCreateRevision int64 `protobuf:\"varint,2,opt,name=create_revision,json=createRevision,proto3\" json:\"create_revision,omitempty\"`",
                "+\t// mod_revision is the revision of last modification on this key.",
                "+\tModRevision int64 `protobuf:\"varint,3,opt,name=mod_revision,json=modRevision,proto3\" json:\"mod_revision,omitempty\"`",
                "+\t// version is the version of the key. A deletion resets",
                "+\t// the version to zero and any modification of the key",
                "+\t// increases its version.",
                "+\tVersion int64 `protobuf:\"varint,4,opt,name=version,proto3\" json:\"version,omitempty\"`",
                "+\t// value is the value held by the key, in bytes.",
                "+\tValue []byte `protobuf:\"bytes,5,opt,name=value,proto3\" json:\"value,omitempty\"`",
                "+\t// lease is the ID of the lease that attached to key.",
                "+\t// When the attached lease expires, the key will be deleted.",
                "+\t// If lease is 0, then no lease is attached to the key.",
                "+\tLease int64 `protobuf:\"varint,6,opt,name=lease,proto3\" json:\"lease,omitempty\"`",
                "+}",
                "+",
                "+func (m *KeyValue) Reset()                    { *m = KeyValue{} }",
                "+func (m *KeyValue) String() string            { return proto.CompactTextString(m) }",
                "+func (*KeyValue) ProtoMessage()               {}",
                "+func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorKv, []int{0} }",
                "+",
                "+type Event struct {",
                "+\t// type is the kind of event. If type is a PUT, it indicates",
                "+\t// new data has been stored to the key. If type is a DELETE,",
                "+\t// it indicates the key was deleted.",
                "+\tType Event_EventType `protobuf:\"varint,1,opt,name=type,proto3,enum=mvccpb.Event_EventType\" json:\"type,omitempty\"`",
                "+\t// kv holds the KeyValue for the event.",
                "+\t// A PUT event contains current kv pair.",
                "+\t// A PUT event with kv.Version=1 indicates the creation of a key.",
                "+\t// A DELETE/EXPIRE event contains the deleted key with",
                "+\t// its modification revision set to the revision of deletion.",
                "+\tKv *KeyValue `protobuf:\"bytes,2,opt,name=kv\" json:\"kv,omitempty\"`",
                "+\t// prev_kv holds the key-value pair before the event happens.",
                "+\tPrevKv *KeyValue `protobuf:\"bytes,3,opt,name=prev_kv,json=prevKv\" json:\"prev_kv,omitempty\"`",
                "+}",
                "+",
                "+func (m *Event) Reset()                    { *m = Event{} }",
                "+func (m *Event) String() string            { return proto.CompactTextString(m) }",
                "+func (*Event) ProtoMessage()               {}",
                "+func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorKv, []int{1} }",
                "+",
                "+func init() {",
                "+\tproto.RegisterType((*KeyValue)(nil), \"mvccpb.KeyValue\")",
                "+\tproto.RegisterType((*Event)(nil), \"mvccpb.Event\")",
                "+\tproto.RegisterEnum(\"mvccpb.Event_EventType\", Event_EventType_name, Event_EventType_value)",
                "+}",
                "+func (m *KeyValue) Marshal() (dAtA []byte, err error) {",
                "+\tsize := m.Size()",
                "+\tdAtA = make([]byte, size)",
                "+\tn, err := m.MarshalTo(dAtA)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn dAtA[:n], nil",
                "+}",
                "+",
                "+func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {",
                "+\tvar i int",
                "+\t_ = i",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif len(m.Key) > 0 {",
                "+\t\tdAtA[i] = 0xa",
                "+\t\ti++",
                "+\t\ti = encodeVarintKv(dAtA, i, uint64(len(m.Key)))",
                "+\t\ti += copy(dAtA[i:], m.Key)",
                "+\t}",
                "+\tif m.CreateRevision != 0 {",
                "+\t\tdAtA[i] = 0x10",
                "+\t\ti++",
                "+\t\ti = encodeVarintKv(dAtA, i, uint64(m.CreateRevision))",
                "+\t}",
                "+\tif m.ModRevision != 0 {",
                "+\t\tdAtA[i] = 0x18",
                "+\t\ti++",
                "+\t\ti = encodeVarintKv(dAtA, i, uint64(m.ModRevision))",
                "+\t}",
                "+\tif m.Version != 0 {",
                "+\t\tdAtA[i] = 0x20",
                "+\t\ti++",
                "+\t\ti = encodeVarintKv(dAtA, i, uint64(m.Version))",
                "+\t}",
                "+\tif len(m.Value) > 0 {",
                "+\t\tdAtA[i] = 0x2a",
                "+\t\ti++",
                "+\t\ti = encodeVarintKv(dAtA, i, uint64(len(m.Value)))",
                "+\t\ti += copy(dAtA[i:], m.Value)",
                "+\t}",
                "+\tif m.Lease != 0 {",
                "+\t\tdAtA[i] = 0x30",
                "+\t\ti++",
                "+\t\ti = encodeVarintKv(dAtA, i, uint64(m.Lease))",
                "+\t}",
                "+\treturn i, nil",
                "+}",
                "+",
                "+func (m *Event) Marshal() (dAtA []byte, err error) {",
                "+\tsize := m.Size()",
                "+\tdAtA = make([]byte, size)",
                "+\tn, err := m.MarshalTo(dAtA)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn dAtA[:n], nil",
                "+}",
                "+",
                "+func (m *Event) MarshalTo(dAtA []byte) (int, error) {",
                "+\tvar i int",
                "+\t_ = i",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.Type != 0 {",
                "+\t\tdAtA[i] = 0x8",
                "+\t\ti++",
                "+\t\ti = encodeVarintKv(dAtA, i, uint64(m.Type))",
                "+\t}",
                "+\tif m.Kv != nil {",
                "+\t\tdAtA[i] = 0x12",
                "+\t\ti++",
                "+\t\ti = encodeVarintKv(dAtA, i, uint64(m.Kv.Size()))",
                "+\t\tn1, err := m.Kv.MarshalTo(dAtA[i:])",
                "+\t\tif err != nil {",
                "+\t\t\treturn 0, err",
                "+\t\t}",
                "+\t\ti += n1",
                "+\t}",
                "+\tif m.PrevKv != nil {",
                "+\t\tdAtA[i] = 0x1a",
                "+\t\ti++",
                "+\t\ti = encodeVarintKv(dAtA, i, uint64(m.PrevKv.Size()))",
                "+\t\tn2, err := m.PrevKv.MarshalTo(dAtA[i:])",
                "+\t\tif err != nil {",
                "+\t\t\treturn 0, err",
                "+\t\t}",
                "+\t\ti += n2",
                "+\t}",
                "+\treturn i, nil",
                "+}",
                "+",
                "+func encodeVarintKv(dAtA []byte, offset int, v uint64) int {",
                "+\tfor v >= 1<<7 {",
                "+\t\tdAtA[offset] = uint8(v&0x7f | 0x80)",
                "+\t\tv >>= 7",
                "+\t\toffset++",
                "+\t}",
                "+\tdAtA[offset] = uint8(v)",
                "+\treturn offset + 1",
                "+}",
                "+func (m *KeyValue) Size() (n int) {",
                "+\tvar l int",
                "+\t_ = l",
                "+\tl = len(m.Key)",
                "+\tif l > 0 {",
                "+\t\tn += 1 + l + sovKv(uint64(l))",
                "+\t}",
                "+\tif m.CreateRevision != 0 {",
                "+\t\tn += 1 + sovKv(uint64(m.CreateRevision))",
                "+\t}",
                "+\tif m.ModRevision != 0 {",
                "+\t\tn += 1 + sovKv(uint64(m.ModRevision))",
                "+\t}",
                "+\tif m.Version != 0 {",
                "+\t\tn += 1 + sovKv(uint64(m.Version))",
                "+\t}",
                "+\tl = len(m.Value)",
                "+\tif l > 0 {",
                "+\t\tn += 1 + l + sovKv(uint64(l))",
                "+\t}",
                "+\tif m.Lease != 0 {",
                "+\t\tn += 1 + sovKv(uint64(m.Lease))",
                "+\t}",
                "+\treturn n",
                "+}",
                "+",
                "+func (m *Event) Size() (n int) {",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.Type != 0 {",
                "+\t\tn += 1 + sovKv(uint64(m.Type))",
                "+\t}",
                "+\tif m.Kv != nil {",
                "+\t\tl = m.Kv.Size()",
                "+\t\tn += 1 + l + sovKv(uint64(l))",
                "+\t}",
                "+\tif m.PrevKv != nil {",
                "+\t\tl = m.PrevKv.Size()",
                "+\t\tn += 1 + l + sovKv(uint64(l))",
                "+\t}",
                "+\treturn n",
                "+}",
                "+",
                "+func sovKv(x uint64) (n int) {",
                "+\tfor {",
                "+\t\tn++",
                "+\t\tx >>= 7",
                "+\t\tif x == 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+\treturn n",
                "+}",
                "+func sozKv(x uint64) (n int) {",
                "+\treturn sovKv(uint64((x << 1) ^ uint64((int64(x) >> 63))))",
                "+}",
                "+func (m *KeyValue) Unmarshal(dAtA []byte) error {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tpreIndex := iNdEx",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfieldNum := int32(wire >> 3)",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tif wireType == 4 {",
                "+\t\t\treturn fmt.Errorf(\"proto: KeyValue: wiretype end group for non-group\")",
                "+\t\t}",
                "+\t\tif fieldNum <= 0 {",
                "+\t\t\treturn fmt.Errorf(\"proto: KeyValue: illegal tag %d (wire type %d)\", fieldNum, wire)",
                "+\t\t}",
                "+\t\tswitch fieldNum {",
                "+\t\tcase 1:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Key\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar byteLen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tbyteLen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif byteLen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthKv",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + byteLen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)",
                "+\t\t\tif m.Key == nil {",
                "+\t\t\t\tm.Key = []byte{}",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tcase 2:",
                "+\t\t\tif wireType != 0 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field CreateRevision\", wireType)",
                "+\t\t\t}",
                "+\t\t\tm.CreateRevision = 0",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tm.CreateRevision |= (int64(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\tcase 3:",
                "+\t\t\tif wireType != 0 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field ModRevision\", wireType)",
                "+\t\t\t}",
                "+\t\t\tm.ModRevision = 0",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tm.ModRevision |= (int64(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\tcase 4:",
                "+\t\t\tif wireType != 0 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Version\", wireType)",
                "+\t\t\t}",
                "+\t\t\tm.Version = 0",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tm.Version |= (int64(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\tcase 5:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Value\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar byteLen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tbyteLen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif byteLen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthKv",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + byteLen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)",
                "+\t\t\tif m.Value == nil {",
                "+\t\t\t\tm.Value = []byte{}",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tcase 6:",
                "+\t\t\tif wireType != 0 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Lease\", wireType)",
                "+\t\t\t}",
                "+\t\t\tm.Lease = 0",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tm.Lease |= (int64(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\tdefault:",
                "+\t\t\tiNdEx = preIndex",
                "+\t\t\tskippy, err := skipKv(dAtA[iNdEx:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tif skippy < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthKv",
                "+\t\t\t}",
                "+\t\t\tif (iNdEx + skippy) > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tiNdEx += skippy",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif iNdEx > l {",
                "+\t\treturn io.ErrUnexpectedEOF",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+func (m *Event) Unmarshal(dAtA []byte) error {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tpreIndex := iNdEx",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfieldNum := int32(wire >> 3)",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tif wireType == 4 {",
                "+\t\t\treturn fmt.Errorf(\"proto: Event: wiretype end group for non-group\")",
                "+\t\t}",
                "+\t\tif fieldNum <= 0 {",
                "+\t\t\treturn fmt.Errorf(\"proto: Event: illegal tag %d (wire type %d)\", fieldNum, wire)",
                "+\t\t}",
                "+\t\tswitch fieldNum {",
                "+\t\tcase 1:",
                "+\t\t\tif wireType != 0 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Type\", wireType)",
                "+\t\t\t}",
                "+\t\t\tm.Type = 0",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tm.Type |= (Event_EventType(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\tcase 2:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Kv\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar msglen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tmsglen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif msglen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthKv",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + msglen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tif m.Kv == nil {",
                "+\t\t\t\tm.Kv = &KeyValue{}",
                "+\t\t\t}",
                "+\t\t\tif err := m.Kv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tcase 3:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field PrevKv\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar msglen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tmsglen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif msglen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthKv",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + msglen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tif m.PrevKv == nil {",
                "+\t\t\t\tm.PrevKv = &KeyValue{}",
                "+\t\t\t}",
                "+\t\t\tif err := m.PrevKv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tdefault:",
                "+\t\t\tiNdEx = preIndex",
                "+\t\t\tskippy, err := skipKv(dAtA[iNdEx:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tif skippy < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthKv",
                "+\t\t\t}",
                "+\t\t\tif (iNdEx + skippy) > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tiNdEx += skippy",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif iNdEx > l {",
                "+\t\treturn io.ErrUnexpectedEOF",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+func skipKv(dAtA []byte) (n int, err error) {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn 0, ErrIntOverflowKv",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tswitch wireType {",
                "+\t\tcase 0:",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn 0, ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tif dAtA[iNdEx-1] < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 1:",
                "+\t\t\tiNdEx += 8",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 2:",
                "+\t\t\tvar length int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn 0, ErrIntOverflowKv",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tlength |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tiNdEx += length",
                "+\t\t\tif length < 0 {",
                "+\t\t\t\treturn 0, ErrInvalidLengthKv",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 3:",
                "+\t\t\tfor {",
                "+\t\t\t\tvar innerWire uint64",
                "+\t\t\t\tvar start int = iNdEx",
                "+\t\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\t\treturn 0, ErrIntOverflowKv",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\t\tiNdEx++",
                "+\t\t\t\t\tinnerWire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\t\tbreak",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\tinnerWireType := int(innerWire & 0x7)",
                "+\t\t\t\tif innerWireType == 4 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t\tnext, err := skipKv(dAtA[start:])",
                "+\t\t\t\tif err != nil {",
                "+\t\t\t\t\treturn 0, err",
                "+\t\t\t\t}",
                "+\t\t\t\tiNdEx = start + next",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 4:",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 5:",
                "+\t\t\tiNdEx += 4",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tdefault:",
                "+\t\t\treturn 0, fmt.Errorf(\"proto: illegal wireType %d\", wireType)",
                "+\t\t}",
                "+\t}",
                "+\tpanic(\"unreachable\")",
                "+}",
                "+",
                "+var (",
                "+\tErrInvalidLengthKv = fmt.Errorf(\"proto: negative length found during unmarshaling\")",
                "+\tErrIntOverflowKv   = fmt.Errorf(\"proto: integer overflow\")",
                "+)",
                "+",
                "+func init() { proto.RegisterFile(\"kv.proto\", fileDescriptorKv) }",
                "+",
                "+var fileDescriptorKv = []byte{",
                "+\t// 303 bytes of a gzipped FileDescriptorProto",
                "+\t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4e, 0xc2, 0x40,",
                "+\t0x14, 0x86, 0x3b, 0x14, 0x0a, 0x3e, 0x08, 0x36, 0x13, 0x12, 0x27, 0x2e, 0x26, 0x95, 0x8d, 0x18,",
                "+\t0x13, 0x4c, 0xf0, 0x06, 0xc6, 0xae, 0x70, 0x61, 0x1a, 0x74, 0x4b, 0x4a, 0x79, 0x21, 0xa4, 0x94,",
                "+\t0x69, 0x4a, 0x9d, 0xa4, 0x37, 0x71, 0xef, 0xde, 0x73, 0xb0, 0xe4, 0x08, 0x52, 0x2f, 0x62, 0xfa,",
                "+\t0xc6, 0xe2, 0xc6, 0xcd, 0xe4, 0xfd, 0xff, 0xff, 0x65, 0xe6, 0x7f, 0x03, 0x9d, 0x58, 0x8f, 0xd3,",
                "+\t0x4c, 0xe5, 0x8a, 0x3b, 0x89, 0x8e, 0xa2, 0x74, 0x71, 0x39, 0x58, 0xa9, 0x95, 0x22, 0xeb, 0xae,",
                "+\t0x9a, 0x4c, 0x3a, 0xfc, 0x64, 0xd0, 0x99, 0x62, 0xf1, 0x1a, 0x6e, 0xde, 0x90, 0xbb, 0x60, 0xc7,",
                "+\t0x58, 0x08, 0xe6, 0xb1, 0x51, 0x2f, 0xa8, 0x46, 0x7e, 0x0d, 0xe7, 0x51, 0x86, 0x61, 0x8e, 0xf3,",
                "+\t0x0c, 0xf5, 0x7a, 0xb7, 0x56, 0x5b, 0xd1, 0xf0, 0xd8, 0xc8, 0x0e, 0xfa, 0xc6, 0x0e, 0x7e, 0x5d,",
                "+\t0x7e, 0x05, 0xbd, 0x44, 0x2d, 0xff, 0x28, 0x9b, 0xa8, 0x6e, 0xa2, 0x96, 0x27, 0x44, 0x40, 0x5b,",
                "+\t0x63, 0x46, 0x69, 0x93, 0xd2, 0x5a, 0xf2, 0x01, 0xb4, 0x74, 0x55, 0x40, 0xb4, 0xe8, 0x65, 0x23,",
                "+\t0x2a, 0x77, 0x83, 0xe1, 0x0e, 0x85, 0x43, 0xb4, 0x11, 0xc3, 0x0f, 0x06, 0x2d, 0x5f, 0xe3, 0x36,",
                "+\t0xe7, 0xb7, 0xd0, 0xcc, 0x8b, 0x14, 0xa9, 0x6e, 0x7f, 0x72, 0x31, 0x36, 0x7b, 0x8e, 0x29, 0x34,",
                "+\t0xe7, 0xac, 0x48, 0x31, 0x20, 0x88, 0x7b, 0xd0, 0x88, 0x35, 0x75, 0xef, 0x4e, 0xdc, 0x1a, 0xad,",
                "+\t0x17, 0x0f, 0x1a, 0xb1, 0xe6, 0x37, 0xd0, 0x4e, 0x33, 0xd4, 0xf3, 0x58, 0x53, 0xf9, 0xff, 0x30,",
                "+\t0xa7, 0x02, 0xa6, 0x7a, 0xe8, 0xc1, 0xd9, 0xe9, 0x7e, 0xde, 0x06, 0xfb, 0xf9, 0x65, 0xe6, 0x5a,",
                "+\t0x1c, 0xc0, 0x79, 0xf4, 0x9f, 0xfc, 0x99, 0xef, 0xb2, 0x07, 0xb1, 0x3f, 0x4a, 0xeb, 0x70, 0x94,",
                "+\t0xd6, 0xbe, 0x94, 0xec, 0x50, 0x4a, 0xf6, 0x55, 0x4a, 0xf6, 0xfe, 0x2d, 0xad, 0x85, 0x43, 0xff,",
                "+\t0x7e, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x45, 0x92, 0x5d, 0xa1, 0x01, 0x00, 0x00,",
                "+}",
                "diff --git a/mvcc/mvccpb/kv.proto b/mvcc/mvccpb/kv.proto",
                "new file mode 100644",
                "index 000000000..23c911b7d",
                "--- /dev/null",
                "+++ b/mvcc/mvccpb/kv.proto",
                "@@ -0,0 +1,49 @@",
                "+syntax = \"proto3\";",
                "+package mvccpb;",
                "+",
                "+import \"gogoproto/gogo.proto\";",
                "+",
                "+option (gogoproto.marshaler_all) = true;",
                "+option (gogoproto.sizer_all) = true;",
                "+option (gogoproto.unmarshaler_all) = true;",
                "+option (gogoproto.goproto_getters_all) = false;",
                "+option (gogoproto.goproto_enum_prefix_all) = false;",
                "+",
                "+message KeyValue {",
                "+  // key is the key in bytes. An empty key is not allowed.",
                "+  bytes key = 1;",
                "+  // create_revision is the revision of last creation on this key.",
                "+  int64 create_revision = 2;",
                "+  // mod_revision is the revision of last modification on this key.",
                "+  int64 mod_revision = 3;",
                "+  // version is the version of the key. A deletion resets",
                "+  // the version to zero and any modification of the key",
                "+  // increases its version.",
                "+  int64 version = 4;",
                "+  // value is the value held by the key, in bytes.",
                "+  bytes value = 5;",
                "+  // lease is the ID of the lease that attached to key.",
                "+  // When the attached lease expires, the key will be deleted.",
                "+  // If lease is 0, then no lease is attached to the key.",
                "+  int64 lease = 6;",
                "+}",
                "+",
                "+message Event {",
                "+  enum EventType {",
                "+    PUT = 0;",
                "+    DELETE = 1;",
                "+  }",
                "+  // type is the kind of event. If type is a PUT, it indicates",
                "+  // new data has been stored to the key. If type is a DELETE,",
                "+  // it indicates the key was deleted.",
                "+  EventType type = 1;",
                "+  // kv holds the KeyValue for the event.",
                "+  // A PUT event contains current kv pair.",
                "+  // A PUT event with kv.Version=1 indicates the creation of a key.",
                "+  // A DELETE/EXPIRE event contains the deleted key with",
                "+  // its modification revision set to the revision of deletion.",
                "+  KeyValue kv = 2;",
                "+",
                "+  // prev_kv holds the key-value pair before the event happens.",
                "+  KeyValue prev_kv = 3;",
                "+}",
                "diff --git a/mvcc/revision.go b/mvcc/revision.go",
                "new file mode 100644",
                "index 000000000..5fa35a1c2",
                "--- /dev/null",
                "+++ b/mvcc/revision.go",
                "@@ -0,0 +1,67 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import \"encoding/binary\"",
                "+",
                "+// revBytesLen is the byte length of a normal revision.",
                "+// First 8 bytes is the revision.main in big-endian format. The 9th byte",
                "+// is a '_'. The last 8 bytes is the revision.sub in big-endian format.",
                "+const revBytesLen = 8 + 1 + 8",
                "+",
                "+// A revision indicates modification of the key-value space.",
                "+// The set of changes that share same main revision changes the key-value space atomically.",
                "+type revision struct {",
                "+\t// main is the main revision of a set of changes that happen atomically.",
                "+\tmain int64",
                "+",
                "+\t// sub is the the sub revision of a change in a set of changes that happen",
                "+\t// atomically. Each change has different increasing sub revision in that",
                "+\t// set.",
                "+\tsub int64",
                "+}",
                "+",
                "+func (a revision) GreaterThan(b revision) bool {",
                "+\tif a.main > b.main {",
                "+\t\treturn true",
                "+\t}",
                "+\tif a.main < b.main {",
                "+\t\treturn false",
                "+\t}",
                "+\treturn a.sub > b.sub",
                "+}",
                "+",
                "+func newRevBytes() []byte {",
                "+\treturn make([]byte, revBytesLen, markedRevBytesLen)",
                "+}",
                "+",
                "+func revToBytes(rev revision, bytes []byte) {",
                "+\tbinary.BigEndian.PutUint64(bytes, uint64(rev.main))",
                "+\tbytes[8] = '_'",
                "+\tbinary.BigEndian.PutUint64(bytes[9:], uint64(rev.sub))",
                "+}",
                "+",
                "+func bytesToRev(bytes []byte) revision {",
                "+\treturn revision{",
                "+\t\tmain: int64(binary.BigEndian.Uint64(bytes[0:8])),",
                "+\t\tsub:  int64(binary.BigEndian.Uint64(bytes[9:])),",
                "+\t}",
                "+}",
                "+",
                "+type revisions []revision",
                "+",
                "+func (a revisions) Len() int           { return len(a) }",
                "+func (a revisions) Less(i, j int) bool { return a[j].GreaterThan(a[i]) }",
                "+func (a revisions) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }",
                "diff --git a/mvcc/revision_test.go b/mvcc/revision_test.go",
                "new file mode 100644",
                "index 000000000..46fcb483c",
                "--- /dev/null",
                "+++ b/mvcc/revision_test.go",
                "@@ -0,0 +1,53 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"math\"",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+)",
                "+",
                "+// TestRevision tests that revision could be encoded to and decoded from",
                "+// bytes slice. Moreover, the lexicographical order of its byte slice representation",
                "+// follows the order of (main, sub).",
                "+func TestRevision(t *testing.T) {",
                "+\ttests := []revision{",
                "+\t\t// order in (main, sub)",
                "+\t\t{},",
                "+\t\t{main: 1, sub: 0},",
                "+\t\t{main: 1, sub: 1},",
                "+\t\t{main: 2, sub: 0},",
                "+\t\t{main: math.MaxInt64, sub: math.MaxInt64},",
                "+\t}",
                "+",
                "+\tbs := make([][]byte, len(tests))",
                "+\tfor i, tt := range tests {",
                "+\t\tb := newRevBytes()",
                "+\t\trevToBytes(tt, b)",
                "+\t\tbs[i] = b",
                "+",
                "+\t\tif grev := bytesToRev(b); !reflect.DeepEqual(grev, tt) {",
                "+\t\t\tt.Errorf(\"#%d: revision = %+v, want %+v\", i, grev, tt)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tfor i := 0; i < len(tests)-1; i++ {",
                "+\t\tif bytes.Compare(bs[i], bs[i+1]) >= 0 {",
                "+\t\t\tt.Errorf(\"#%d: %v (%+v) should be smaller than %v (%+v)\", i, bs[i], tests[i], bs[i+1], tests[i+1])",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/mvcc/util.go b/mvcc/util.go",
                "new file mode 100644",
                "index 000000000..8a0df0bfc",
                "--- /dev/null",
                "+++ b/mvcc/util.go",
                "@@ -0,0 +1,56 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"encoding/binary\"",
                "+",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+)",
                "+",
                "+func UpdateConsistentIndex(be backend.Backend, index uint64) {",
                "+\ttx := be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tvar oldi uint64",
                "+\t_, vs := tx.UnsafeRange(metaBucketName, consistentIndexKeyName, nil, 0)",
                "+\tif len(vs) != 0 {",
                "+\t\toldi = binary.BigEndian.Uint64(vs[0])",
                "+\t}",
                "+",
                "+\tif index <= oldi {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tbs := make([]byte, 8)",
                "+\tbinary.BigEndian.PutUint64(bs, index)",
                "+\ttx.UnsafePut(metaBucketName, consistentIndexKeyName, bs)",
                "+}",
                "+",
                "+func WriteKV(be backend.Backend, kv mvccpb.KeyValue) {",
                "+\tibytes := newRevBytes()",
                "+\trevToBytes(revision{main: kv.ModRevision}, ibytes)",
                "+",
                "+\td, err := kv.Marshal()",
                "+\tif err != nil {",
                "+\t\tplog.Fatalf(\"cannot marshal event: %v\", err)",
                "+\t}",
                "+",
                "+\tbe.BatchTx().Lock()",
                "+\tbe.BatchTx().UnsafePut(keyBucketName, ibytes, d)",
                "+\tbe.BatchTx().Unlock()",
                "+}",
                "diff --git a/mvcc/watchable_store.go b/mvcc/watchable_store.go",
                "new file mode 100644",
                "index 000000000..14bb14ce2",
                "--- /dev/null",
                "+++ b/mvcc/watchable_store.go",
                "@@ -0,0 +1,525 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"sync\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+)",
                "+",
                "+// non-const so modifiable by tests",
                "+var (",
                "+\t// chanBufLen is the length of the buffered chan",
                "+\t// for sending out watched events.",
                "+\t// TODO: find a good buf value. 1024 is just a random one that",
                "+\t// seems to be reasonable.",
                "+\tchanBufLen = 1024",
                "+",
                "+\t// maxWatchersPerSync is the number of watchers to sync in a single batch",
                "+\tmaxWatchersPerSync = 512",
                "+)",
                "+",
                "+type watchable interface {",
                "+\twatch(key, end []byte, startRev int64, id WatchID, ch chan<- WatchResponse, fcs ...FilterFunc) (*watcher, cancelFunc)",
                "+\tprogress(w *watcher)",
                "+\trev() int64",
                "+}",
                "+",
                "+type watchableStore struct {",
                "+\t*store",
                "+",
                "+\t// mu protects watcher groups and batches. It should never be locked",
                "+\t// before locking store.mu to avoid deadlock.",
                "+\tmu sync.RWMutex",
                "+",
                "+\t// victims are watcher batches that were blocked on the watch channel",
                "+\tvictims []watcherBatch",
                "+\tvictimc chan struct{}",
                "+",
                "+\t// contains all unsynced watchers that needs to sync with events that have happened",
                "+\tunsynced watcherGroup",
                "+",
                "+\t// contains all synced watchers that are in sync with the progress of the store.",
                "+\t// The key of the map is the key that the watcher watches on.",
                "+\tsynced watcherGroup",
                "+",
                "+\tstopc chan struct{}",
                "+\twg    sync.WaitGroup",
                "+}",
                "+",
                "+// cancelFunc updates unsynced and synced maps when running",
                "+// cancel operations.",
                "+type cancelFunc func()",
                "+",
                "+func New(b backend.Backend, le lease.Lessor, ig ConsistentIndexGetter) ConsistentWatchableKV {",
                "+\treturn newWatchableStore(b, le, ig)",
                "+}",
                "+",
                "+func newWatchableStore(b backend.Backend, le lease.Lessor, ig ConsistentIndexGetter) *watchableStore {",
                "+\ts := &watchableStore{",
                "+\t\tstore:    NewStore(b, le, ig),",
                "+\t\tvictimc:  make(chan struct{}, 1),",
                "+\t\tunsynced: newWatcherGroup(),",
                "+\t\tsynced:   newWatcherGroup(),",
                "+\t\tstopc:    make(chan struct{}),",
                "+\t}",
                "+\ts.store.ReadView = &readView{s}",
                "+\ts.store.WriteView = &writeView{s}",
                "+\tif s.le != nil {",
                "+\t\t// use this store as the deleter so revokes trigger watch events",
                "+\t\ts.le.SetRangeDeleter(func() lease.TxnDelete { return s.Write() })",
                "+\t}",
                "+\ts.wg.Add(2)",
                "+\tgo s.syncWatchersLoop()",
                "+\tgo s.syncVictimsLoop()",
                "+\treturn s",
                "+}",
                "+",
                "+func (s *watchableStore) Close() error {",
                "+\tclose(s.stopc)",
                "+\ts.wg.Wait()",
                "+\treturn s.store.Close()",
                "+}",
                "+",
                "+func (s *watchableStore) NewWatchStream() WatchStream {",
                "+\twatchStreamGauge.Inc()",
                "+\treturn &watchStream{",
                "+\t\twatchable: s,",
                "+\t\tch:        make(chan WatchResponse, chanBufLen),",
                "+\t\tcancels:   make(map[WatchID]cancelFunc),",
                "+\t\twatchers:  make(map[WatchID]*watcher),",
                "+\t}",
                "+}",
                "+",
                "+func (s *watchableStore) watch(key, end []byte, startRev int64, id WatchID, ch chan<- WatchResponse, fcs ...FilterFunc) (*watcher, cancelFunc) {",
                "+\twa := &watcher{",
                "+\t\tkey:    key,",
                "+\t\tend:    end,",
                "+\t\tminRev: startRev,",
                "+\t\tid:     id,",
                "+\t\tch:     ch,",
                "+\t\tfcs:    fcs,",
                "+\t}",
                "+",
                "+\ts.mu.Lock()",
                "+\ts.revMu.RLock()",
                "+\tsynced := startRev > s.store.currentRev || startRev == 0",
                "+\tif synced {",
                "+\t\twa.minRev = s.store.currentRev + 1",
                "+\t\tif startRev > wa.minRev {",
                "+\t\t\twa.minRev = startRev",
                "+\t\t}",
                "+\t}",
                "+\tif synced {",
                "+\t\ts.synced.add(wa)",
                "+\t} else {",
                "+\t\tslowWatcherGauge.Inc()",
                "+\t\ts.unsynced.add(wa)",
                "+\t}",
                "+\ts.revMu.RUnlock()",
                "+\ts.mu.Unlock()",
                "+",
                "+\twatcherGauge.Inc()",
                "+",
                "+\treturn wa, func() { s.cancelWatcher(wa) }",
                "+}",
                "+",
                "+// cancelWatcher removes references of the watcher from the watchableStore",
                "+func (s *watchableStore) cancelWatcher(wa *watcher) {",
                "+\tfor {",
                "+\t\ts.mu.Lock()",
                "+\t\tif s.unsynced.delete(wa) {",
                "+\t\t\tslowWatcherGauge.Dec()",
                "+\t\t\tbreak",
                "+\t\t} else if s.synced.delete(wa) {",
                "+\t\t\tbreak",
                "+\t\t} else if wa.compacted {",
                "+\t\t\tbreak",
                "+\t\t} else if wa.ch == nil {",
                "+\t\t\t// already canceled (e.g., cancel/close race)",
                "+\t\t\tbreak",
                "+\t\t}",
                "+",
                "+\t\tif !wa.victim {",
                "+\t\t\tpanic(\"watcher not victim but not in watch groups\")",
                "+\t\t}",
                "+",
                "+\t\tvar victimBatch watcherBatch",
                "+\t\tfor _, wb := range s.victims {",
                "+\t\t\tif wb[wa] != nil {",
                "+\t\t\t\tvictimBatch = wb",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tif victimBatch != nil {",
                "+\t\t\tslowWatcherGauge.Dec()",
                "+\t\t\tdelete(victimBatch, wa)",
                "+\t\t\tbreak",
                "+\t\t}",
                "+",
                "+\t\t// victim being processed so not accessible; retry",
                "+\t\ts.mu.Unlock()",
                "+\t\ttime.Sleep(time.Millisecond)",
                "+\t}",
                "+",
                "+\twatcherGauge.Dec()",
                "+\twa.ch = nil",
                "+\ts.mu.Unlock()",
                "+}",
                "+",
                "+func (s *watchableStore) Restore(b backend.Backend) error {",
                "+\ts.mu.Lock()",
                "+\tdefer s.mu.Unlock()",
                "+\terr := s.store.Restore(b)",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tfor wa := range s.synced.watchers {",
                "+\t\ts.unsynced.add(wa)",
                "+\t}",
                "+\ts.synced = newWatcherGroup()",
                "+\treturn nil",
                "+}",
                "+",
                "+// syncWatchersLoop syncs the watcher in the unsynced map every 100ms.",
                "+func (s *watchableStore) syncWatchersLoop() {",
                "+\tdefer s.wg.Done()",
                "+",
                "+\tfor {",
                "+\t\ts.mu.RLock()",
                "+\t\tst := time.Now()",
                "+\t\tlastUnsyncedWatchers := s.unsynced.size()",
                "+\t\ts.mu.RUnlock()",
                "+",
                "+\t\tunsyncedWatchers := 0",
                "+\t\tif lastUnsyncedWatchers > 0 {",
                "+\t\t\tunsyncedWatchers = s.syncWatchers()",
                "+\t\t}",
                "+\t\tsyncDuration := time.Since(st)",
                "+",
                "+\t\twaitDuration := 100 * time.Millisecond",
                "+\t\t// more work pending?",
                "+\t\tif unsyncedWatchers != 0 && lastUnsyncedWatchers > unsyncedWatchers {",
                "+\t\t\t// be fair to other store operations by yielding time taken",
                "+\t\t\twaitDuration = syncDuration",
                "+\t\t}",
                "+",
                "+\t\tselect {",
                "+\t\tcase <-time.After(waitDuration):",
                "+\t\tcase <-s.stopc:",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// syncVictimsLoop tries to write precomputed watcher responses to",
                "+// watchers that had a blocked watcher channel",
                "+func (s *watchableStore) syncVictimsLoop() {",
                "+\tdefer s.wg.Done()",
                "+",
                "+\tfor {",
                "+\t\tfor s.moveVictims() != 0 {",
                "+\t\t\t// try to update all victim watchers",
                "+\t\t}",
                "+\t\ts.mu.RLock()",
                "+\t\tisEmpty := len(s.victims) == 0",
                "+\t\ts.mu.RUnlock()",
                "+",
                "+\t\tvar tickc <-chan time.Time",
                "+\t\tif !isEmpty {",
                "+\t\t\ttickc = time.After(10 * time.Millisecond)",
                "+\t\t}",
                "+",
                "+\t\tselect {",
                "+\t\tcase <-tickc:",
                "+\t\tcase <-s.victimc:",
                "+\t\tcase <-s.stopc:",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// moveVictims tries to update watches with already pending event data",
                "+func (s *watchableStore) moveVictims() (moved int) {",
                "+\ts.mu.Lock()",
                "+\tvictims := s.victims",
                "+\ts.victims = nil",
                "+\ts.mu.Unlock()",
                "+",
                "+\tvar newVictim watcherBatch",
                "+\tfor _, wb := range victims {",
                "+\t\t// try to send responses again",
                "+\t\tfor w, eb := range wb {",
                "+\t\t\t// watcher has observed the store up to, but not including, w.minRev",
                "+\t\t\trev := w.minRev - 1",
                "+\t\t\tif w.send(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: rev}) {",
                "+\t\t\t\tpendingEventsGauge.Add(float64(len(eb.evs)))",
                "+\t\t\t} else {",
                "+\t\t\t\tif newVictim == nil {",
                "+\t\t\t\t\tnewVictim = make(watcherBatch)",
                "+\t\t\t\t}",
                "+\t\t\t\tnewVictim[w] = eb",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\tmoved++",
                "+\t\t}",
                "+",
                "+\t\t// assign completed victim watchers to unsync/sync",
                "+\t\ts.mu.Lock()",
                "+\t\ts.store.revMu.RLock()",
                "+\t\tcurRev := s.store.currentRev",
                "+\t\tfor w, eb := range wb {",
                "+\t\t\tif newVictim != nil && newVictim[w] != nil {",
                "+\t\t\t\t// couldn't send watch response; stays victim",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\tw.victim = false",
                "+\t\t\tif eb.moreRev != 0 {",
                "+\t\t\t\tw.minRev = eb.moreRev",
                "+\t\t\t}",
                "+\t\t\tif w.minRev <= curRev {",
                "+\t\t\t\ts.unsynced.add(w)",
                "+\t\t\t} else {",
                "+\t\t\t\tslowWatcherGauge.Dec()",
                "+\t\t\t\ts.synced.add(w)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\ts.store.revMu.RUnlock()",
                "+\t\ts.mu.Unlock()",
                "+\t}",
                "+",
                "+\tif len(newVictim) > 0 {",
                "+\t\ts.mu.Lock()",
                "+\t\ts.victims = append(s.victims, newVictim)",
                "+\t\ts.mu.Unlock()",
                "+\t}",
                "+",
                "+\treturn moved",
                "+}",
                "+",
                "+// syncWatchers syncs unsynced watchers by:",
                "+//\t1. choose a set of watchers from the unsynced watcher group",
                "+//\t2. iterate over the set to get the minimum revision and remove compacted watchers",
                "+//\t3. use minimum revision to get all key-value pairs and send those events to watchers",
                "+//\t4. remove synced watchers in set from unsynced group and move to synced group",
                "+func (s *watchableStore) syncWatchers() int {",
                "+\ts.mu.Lock()",
                "+\tdefer s.mu.Unlock()",
                "+",
                "+\tif s.unsynced.size() == 0 {",
                "+\t\treturn 0",
                "+\t}",
                "+",
                "+\ts.store.revMu.RLock()",
                "+\tdefer s.store.revMu.RUnlock()",
                "+",
                "+\t// in order to find key-value pairs from unsynced watchers, we need to",
                "+\t// find min revision index, and these revisions can be used to",
                "+\t// query the backend store of key-value pairs",
                "+\tcurRev := s.store.currentRev",
                "+\tcompactionRev := s.store.compactMainRev",
                "+",
                "+\twg, minRev := s.unsynced.choose(maxWatchersPerSync, curRev, compactionRev)",
                "+\tminBytes, maxBytes := newRevBytes(), newRevBytes()",
                "+\trevToBytes(revision{main: minRev}, minBytes)",
                "+\trevToBytes(revision{main: curRev + 1}, maxBytes)",
                "+",
                "+\t// UnsafeRange returns keys and values. And in boltdb, keys are revisions.",
                "+\t// values are actual key-value pairs in backend.",
                "+\ttx := s.store.b.ReadTx()",
                "+\ttx.Lock()",
                "+\trevs, vs := tx.UnsafeRange(keyBucketName, minBytes, maxBytes, 0)",
                "+\tevs := kvsToEvents(wg, revs, vs)",
                "+\ttx.Unlock()",
                "+",
                "+\tvar victims watcherBatch",
                "+\twb := newWatcherBatch(wg, evs)",
                "+\tfor w := range wg.watchers {",
                "+\t\tw.minRev = curRev + 1",
                "+",
                "+\t\teb, ok := wb[w]",
                "+\t\tif !ok {",
                "+\t\t\t// bring un-notified watcher to synced",
                "+\t\t\ts.synced.add(w)",
                "+\t\t\ts.unsynced.delete(w)",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\tif eb.moreRev != 0 {",
                "+\t\t\tw.minRev = eb.moreRev",
                "+\t\t}",
                "+",
                "+\t\tif w.send(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: curRev}) {",
                "+\t\t\tpendingEventsGauge.Add(float64(len(eb.evs)))",
                "+\t\t} else {",
                "+\t\t\tif victims == nil {",
                "+\t\t\t\tvictims = make(watcherBatch)",
                "+\t\t\t}",
                "+\t\t\tw.victim = true",
                "+\t\t}",
                "+",
                "+\t\tif w.victim {",
                "+\t\t\tvictims[w] = eb",
                "+\t\t} else {",
                "+\t\t\tif eb.moreRev != 0 {",
                "+\t\t\t\t// stay unsynced; more to read",
                "+\t\t\t\tcontinue",
                "+\t\t\t}",
                "+\t\t\ts.synced.add(w)",
                "+\t\t}",
                "+\t\ts.unsynced.delete(w)",
                "+\t}",
                "+\ts.addVictim(victims)",
                "+",
                "+\tvsz := 0",
                "+\tfor _, v := range s.victims {",
                "+\t\tvsz += len(v)",
                "+\t}",
                "+\tslowWatcherGauge.Set(float64(s.unsynced.size() + vsz))",
                "+",
                "+\treturn s.unsynced.size()",
                "+}",
                "+",
                "+// kvsToEvents gets all events for the watchers from all key-value pairs",
                "+func kvsToEvents(wg *watcherGroup, revs, vals [][]byte) (evs []mvccpb.Event) {",
                "+\tfor i, v := range vals {",
                "+\t\tvar kv mvccpb.KeyValue",
                "+\t\tif err := kv.Unmarshal(v); err != nil {",
                "+\t\t\tplog.Panicf(\"cannot unmarshal event: %v\", err)",
                "+\t\t}",
                "+",
                "+\t\tif !wg.contains(string(kv.Key)) {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\tty := mvccpb.PUT",
                "+\t\tif isTombstone(revs[i]) {",
                "+\t\t\tty = mvccpb.DELETE",
                "+\t\t\t// patch in mod revision so watchers won't skip",
                "+\t\t\tkv.ModRevision = bytesToRev(revs[i]).main",
                "+\t\t}",
                "+\t\tevs = append(evs, mvccpb.Event{Kv: &kv, Type: ty})",
                "+\t}",
                "+\treturn evs",
                "+}",
                "+",
                "+// notify notifies the fact that given event at the given rev just happened to",
                "+// watchers that watch on the key of the event.",
                "+func (s *watchableStore) notify(rev int64, evs []mvccpb.Event) {",
                "+\tvar victim watcherBatch",
                "+\tfor w, eb := range newWatcherBatch(&s.synced, evs) {",
                "+\t\tif eb.revs != 1 {",
                "+\t\t\tplog.Panicf(\"unexpected multiple revisions in notification\")",
                "+\t\t}",
                "+\t\tif w.send(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: rev}) {",
                "+\t\t\tpendingEventsGauge.Add(float64(len(eb.evs)))",
                "+\t\t} else {",
                "+\t\t\t// move slow watcher to victims",
                "+\t\t\tw.minRev = rev + 1",
                "+\t\t\tif victim == nil {",
                "+\t\t\t\tvictim = make(watcherBatch)",
                "+\t\t\t}",
                "+\t\t\tw.victim = true",
                "+\t\t\tvictim[w] = eb",
                "+\t\t\ts.synced.delete(w)",
                "+\t\t\tslowWatcherGauge.Inc()",
                "+\t\t}",
                "+\t}",
                "+\ts.addVictim(victim)",
                "+}",
                "+",
                "+func (s *watchableStore) addVictim(victim watcherBatch) {",
                "+\tif victim == nil {",
                "+\t\treturn",
                "+\t}",
                "+\ts.victims = append(s.victims, victim)",
                "+\tselect {",
                "+\tcase s.victimc <- struct{}{}:",
                "+\tdefault:",
                "+\t}",
                "+}",
                "+",
                "+func (s *watchableStore) rev() int64 { return s.store.Rev() }",
                "+",
                "+func (s *watchableStore) progress(w *watcher) {",
                "+\ts.mu.RLock()",
                "+\tdefer s.mu.RUnlock()",
                "+",
                "+\tif _, ok := s.synced.watchers[w]; ok {",
                "+\t\tw.send(WatchResponse{WatchID: w.id, Revision: s.rev()})",
                "+\t\t// If the ch is full, this watcher is receiving events.",
                "+\t\t// We do not need to send progress at all.",
                "+\t}",
                "+}",
                "+",
                "+type watcher struct {",
                "+\t// the watcher key",
                "+\tkey []byte",
                "+\t// end indicates the end of the range to watch.",
                "+\t// If end is set, the watcher is on a range.",
                "+\tend []byte",
                "+",
                "+\t// victim is set when ch is blocked and undergoing victim processing",
                "+\tvictim bool",
                "+",
                "+\t// compacted is set when the watcher is removed because of compaction",
                "+\tcompacted bool",
                "+",
                "+\t// minRev is the minimum revision update the watcher will accept",
                "+\tminRev int64",
                "+\tid     WatchID",
                "+",
                "+\tfcs []FilterFunc",
                "+\t// a chan to send out the watch response.",
                "+\t// The chan might be shared with other watchers.",
                "+\tch chan<- WatchResponse",
                "+}",
                "+",
                "+func (w *watcher) send(wr WatchResponse) bool {",
                "+\tprogressEvent := len(wr.Events) == 0",
                "+",
                "+\tif len(w.fcs) != 0 {",
                "+\t\tne := make([]mvccpb.Event, 0, len(wr.Events))",
                "+\t\tfor i := range wr.Events {",
                "+\t\t\tfiltered := false",
                "+\t\t\tfor _, filter := range w.fcs {",
                "+\t\t\t\tif filter(wr.Events[i]) {",
                "+\t\t\t\t\tfiltered = true",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif !filtered {",
                "+\t\t\t\tne = append(ne, wr.Events[i])",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\twr.Events = ne",
                "+\t}",
                "+",
                "+\t// if all events are filtered out, we should send nothing.",
                "+\tif !progressEvent && len(wr.Events) == 0 {",
                "+\t\treturn true",
                "+\t}",
                "+\tselect {",
                "+\tcase w.ch <- wr:",
                "+\t\treturn true",
                "+\tdefault:",
                "+\t\treturn false",
                "+\t}",
                "+}",
                "diff --git a/mvcc/watchable_store_bench_test.go b/mvcc/watchable_store_bench_test.go",
                "new file mode 100644",
                "index 000000000..198fea6bb",
                "--- /dev/null",
                "+++ b/mvcc/watchable_store_bench_test.go",
                "@@ -0,0 +1,200 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"math/rand\"",
                "+\t\"os\"",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+)",
                "+",
                "+func BenchmarkWatchableStorePut(b *testing.B) {",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := New(be, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, be, tmpPath)",
                "+",
                "+\t// arbitrary number of bytes",
                "+\tbytesN := 64",
                "+\tkeys := createBytesSlice(bytesN, b.N)",
                "+\tvals := createBytesSlice(bytesN, b.N)",
                "+",
                "+\tb.ResetTimer()",
                "+\tb.ReportAllocs()",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\ts.Put(keys[i], vals[i], lease.NoLease)",
                "+\t}",
                "+}",
                "+",
                "+// BenchmarkWatchableStoreTxnPut benchmarks the Put operation",
                "+// with transaction begin and end, where transaction involves",
                "+// some synchronization operations, such as mutex locking.",
                "+func BenchmarkWatchableStoreTxnPut(b *testing.B) {",
                "+\tvar i fakeConsistentIndex",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := New(be, &lease.FakeLessor{}, &i)",
                "+\tdefer cleanup(s, be, tmpPath)",
                "+",
                "+\t// arbitrary number of bytes",
                "+\tbytesN := 64",
                "+\tkeys := createBytesSlice(bytesN, b.N)",
                "+\tvals := createBytesSlice(bytesN, b.N)",
                "+",
                "+\tb.ResetTimer()",
                "+\tb.ReportAllocs()",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\ttxn := s.Write()",
                "+\t\ttxn.Put(keys[i], vals[i], lease.NoLease)",
                "+\t\ttxn.End()",
                "+\t}",
                "+}",
                "+",
                "+// BenchmarkWatchableStoreWatchSyncPut benchmarks the case of",
                "+// many synced watchers receiving a Put notification.",
                "+func BenchmarkWatchableStoreWatchSyncPut(b *testing.B) {",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(be, &lease.FakeLessor{}, nil)",
                "+\tdefer cleanup(s, be, tmpPath)",
                "+",
                "+\tk := []byte(\"testkey\")",
                "+\tv := []byte(\"testval\")",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tdefer w.Close()",
                "+\twatchIDs := make([]WatchID, b.N)",
                "+\tfor i := range watchIDs {",
                "+\t\t// non-0 value to keep watchers in unsynced",
                "+\t\twatchIDs[i], _ = w.Watch(0, k, nil, 1)",
                "+\t}",
                "+",
                "+\tb.ResetTimer()",
                "+\tb.ReportAllocs()",
                "+",
                "+\t// trigger watchers",
                "+\ts.Put(k, v, lease.NoLease)",
                "+\tfor range watchIDs {",
                "+\t\t<-w.Chan()",
                "+\t}",
                "+\tselect {",
                "+\tcase wc := <-w.Chan():",
                "+\t\tb.Fatalf(\"unexpected data %v\", wc)",
                "+\tdefault:",
                "+\t}",
                "+}",
                "+",
                "+// Benchmarks on cancel function performance for unsynced watchers",
                "+// in a WatchableStore. It creates k*N watchers to populate unsynced",
                "+// with a reasonably large number of watchers. And measures the time it",
                "+// takes to cancel N watchers out of k*N watchers. The performance is",
                "+// expected to differ depending on the unsynced member implementation.",
                "+// TODO: k is an arbitrary constant. We need to figure out what factor",
                "+// we should put to simulate the real-world use cases.",
                "+func BenchmarkWatchableStoreUnsyncedCancel(b *testing.B) {",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := NewStore(be, &lease.FakeLessor{}, nil)",
                "+",
                "+\t// manually create watchableStore instead of newWatchableStore",
                "+\t// because newWatchableStore periodically calls syncWatchersLoop",
                "+\t// method to sync watchers in unsynced map. We want to keep watchers",
                "+\t// in unsynced for this benchmark.",
                "+\tws := &watchableStore{",
                "+\t\tstore:    s,",
                "+\t\tunsynced: newWatcherGroup(),",
                "+",
                "+\t\t// to make the test not crash from assigning to nil map.",
                "+\t\t// 'synced' doesn't get populated in this test.",
                "+\t\tsynced: newWatcherGroup(),",
                "+\t}",
                "+",
                "+\tdefer func() {",
                "+\t\tws.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+",
                "+\t// Put a key so that we can spawn watchers on that key",
                "+\t// (testKey in this test). This increases the rev to 1,",
                "+\t// and later we can we set the watcher's startRev to 1,",
                "+\t// and force watchers to be in unsynced.",
                "+\ttestKey := []byte(\"foo\")",
                "+\ttestValue := []byte(\"bar\")",
                "+\ts.Put(testKey, testValue, lease.NoLease)",
                "+",
                "+\tw := ws.NewWatchStream()",
                "+",
                "+\tconst k int = 2",
                "+\tbenchSampleN := b.N",
                "+\twatcherN := k * benchSampleN",
                "+",
                "+\twatchIDs := make([]WatchID, watcherN)",
                "+\tfor i := 0; i < watcherN; i++ {",
                "+\t\t// non-0 value to keep watchers in unsynced",
                "+\t\twatchIDs[i], _ = w.Watch(0, testKey, nil, 1)",
                "+\t}",
                "+",
                "+\t// random-cancel N watchers to make it not biased towards",
                "+\t// data structures with an order, such as slice.",
                "+\tix := rand.Perm(watcherN)",
                "+",
                "+\tb.ResetTimer()",
                "+\tb.ReportAllocs()",
                "+",
                "+\t// cancel N watchers",
                "+\tfor _, idx := range ix[:benchSampleN] {",
                "+\t\tif err := w.Cancel(watchIDs[idx]); err != nil {",
                "+\t\t\tb.Error(err)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func BenchmarkWatchableStoreSyncedCancel(b *testing.B) {",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(be, &lease.FakeLessor{}, nil)",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+",
                "+\t// Put a key so that we can spawn watchers on that key",
                "+\ttestKey := []byte(\"foo\")",
                "+\ttestValue := []byte(\"bar\")",
                "+\ts.Put(testKey, testValue, lease.NoLease)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+",
                "+\t// put 1 million watchers on the same key",
                "+\tconst watcherN = 1000000",
                "+",
                "+\twatchIDs := make([]WatchID, watcherN)",
                "+\tfor i := 0; i < watcherN; i++ {",
                "+\t\t// 0 for startRev to keep watchers in synced",
                "+\t\twatchIDs[i], _ = w.Watch(0, testKey, nil, 0)",
                "+\t}",
                "+",
                "+\t// randomly cancel watchers to make it not biased towards",
                "+\t// data structures with an order, such as slice.",
                "+\tix := rand.Perm(watcherN)",
                "+",
                "+\tb.ResetTimer()",
                "+\tb.ReportAllocs()",
                "+",
                "+\tfor _, idx := range ix {",
                "+\t\tif err := w.Cancel(watchIDs[idx]); err != nil {",
                "+\t\t\tb.Error(err)",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/mvcc/watchable_store_test.go b/mvcc/watchable_store_test.go",
                "new file mode 100644",
                "index 000000000..28762fad4",
                "--- /dev/null",
                "+++ b/mvcc/watchable_store_test.go",
                "@@ -0,0 +1,596 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"fmt\"",
                "+\t\"os\"",
                "+\t\"reflect\"",
                "+\t\"sync\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+)",
                "+",
                "+func TestWatch(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+",
                "+\ttestKey := []byte(\"foo\")",
                "+\ttestValue := []byte(\"bar\")",
                "+\ts.Put(testKey, testValue, lease.NoLease)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tw.Watch(0, testKey, nil, 0)",
                "+",
                "+\tif !s.synced.contains(string(testKey)) {",
                "+\t\t// the key must have had an entry in synced",
                "+\t\tt.Errorf(\"existence = false, want true\")",
                "+\t}",
                "+}",
                "+",
                "+func TestNewWatcherCancel(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+\ttestKey := []byte(\"foo\")",
                "+\ttestValue := []byte(\"bar\")",
                "+\ts.Put(testKey, testValue, lease.NoLease)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\twt, _ := w.Watch(0, testKey, nil, 0)",
                "+",
                "+\tif err := w.Cancel(wt); err != nil {",
                "+\t\tt.Error(err)",
                "+\t}",
                "+",
                "+\tif s.synced.contains(string(testKey)) {",
                "+\t\t// the key shoud have been deleted",
                "+\t\tt.Errorf(\"existence = true, want false\")",
                "+\t}",
                "+}",
                "+",
                "+// TestCancelUnsynced tests if running CancelFunc removes watchers from unsynced.",
                "+func TestCancelUnsynced(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+",
                "+\t// manually create watchableStore instead of newWatchableStore",
                "+\t// because newWatchableStore automatically calls syncWatchers",
                "+\t// method to sync watchers in unsynced map. We want to keep watchers",
                "+\t// in unsynced to test if syncWatchers works as expected.",
                "+\ts := &watchableStore{",
                "+\t\tstore:    NewStore(b, &lease.FakeLessor{}, nil),",
                "+\t\tunsynced: newWatcherGroup(),",
                "+",
                "+\t\t// to make the test not crash from assigning to nil map.",
                "+\t\t// 'synced' doesn't get populated in this test.",
                "+\t\tsynced: newWatcherGroup(),",
                "+\t}",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+",
                "+\t// Put a key so that we can spawn watchers on that key.",
                "+\t// (testKey in this test). This increases the rev to 1,",
                "+\t// and later we can we set the watcher's startRev to 1,",
                "+\t// and force watchers to be in unsynced.",
                "+\ttestKey := []byte(\"foo\")",
                "+\ttestValue := []byte(\"bar\")",
                "+\ts.Put(testKey, testValue, lease.NoLease)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+",
                "+\t// arbitrary number for watchers",
                "+\twatcherN := 100",
                "+",
                "+\t// create watcherN of watch ids to cancel",
                "+\twatchIDs := make([]WatchID, watcherN)",
                "+\tfor i := 0; i < watcherN; i++ {",
                "+\t\t// use 1 to keep watchers in unsynced",
                "+\t\twatchIDs[i], _ = w.Watch(0, testKey, nil, 1)",
                "+\t}",
                "+",
                "+\tfor _, idx := range watchIDs {",
                "+\t\tif err := w.Cancel(idx); err != nil {",
                "+\t\t\tt.Error(err)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// After running CancelFunc",
                "+\t//",
                "+\t// unsynced should be empty",
                "+\t// because cancel removes watcher from unsynced",
                "+\tif size := s.unsynced.size(); size != 0 {",
                "+\t\tt.Errorf(\"unsynced size = %d, want 0\", size)",
                "+\t}",
                "+}",
                "+",
                "+// TestSyncWatchers populates unsynced watcher map and tests syncWatchers",
                "+// method to see if it correctly sends events to channel of unsynced watchers",
                "+// and moves these watchers to synced.",
                "+func TestSyncWatchers(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+",
                "+\ts := &watchableStore{",
                "+\t\tstore:    NewStore(b, &lease.FakeLessor{}, nil),",
                "+\t\tunsynced: newWatcherGroup(),",
                "+\t\tsynced:   newWatcherGroup(),",
                "+\t}",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+",
                "+\ttestKey := []byte(\"foo\")",
                "+\ttestValue := []byte(\"bar\")",
                "+\ts.Put(testKey, testValue, lease.NoLease)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+",
                "+\t// arbitrary number for watchers",
                "+\twatcherN := 100",
                "+",
                "+\tfor i := 0; i < watcherN; i++ {",
                "+\t\t// specify rev as 1 to keep watchers in unsynced",
                "+\t\tw.Watch(0, testKey, nil, 1)",
                "+\t}",
                "+",
                "+\t// Before running s.syncWatchers() synced should be empty because we manually",
                "+\t// populate unsynced only",
                "+\tsws := s.synced.watcherSetByKey(string(testKey))",
                "+\tuws := s.unsynced.watcherSetByKey(string(testKey))",
                "+",
                "+\tif len(sws) != 0 {",
                "+\t\tt.Fatalf(\"synced[string(testKey)] size = %d, want 0\", len(sws))",
                "+\t}",
                "+\t// unsynced should not be empty because we manually populated unsynced only",
                "+\tif len(uws) != watcherN {",
                "+\t\tt.Errorf(\"unsynced size = %d, want %d\", len(uws), watcherN)",
                "+\t}",
                "+",
                "+\t// this should move all unsynced watchers to synced ones",
                "+\ts.syncWatchers()",
                "+",
                "+\tsws = s.synced.watcherSetByKey(string(testKey))",
                "+\tuws = s.unsynced.watcherSetByKey(string(testKey))",
                "+",
                "+\t// After running s.syncWatchers(), synced should not be empty because syncwatchers",
                "+\t// populates synced in this test case",
                "+\tif len(sws) != watcherN {",
                "+\t\tt.Errorf(\"synced[string(testKey)] size = %d, want %d\", len(sws), watcherN)",
                "+\t}",
                "+",
                "+\t// unsynced should be empty because syncwatchers is expected to move all watchers",
                "+\t// from unsynced to synced in this test case",
                "+\tif len(uws) != 0 {",
                "+\t\tt.Errorf(\"unsynced size = %d, want 0\", len(uws))",
                "+\t}",
                "+",
                "+\tfor w := range sws {",
                "+\t\tif w.minRev != s.Rev()+1 {",
                "+\t\t\tt.Errorf(\"w.minRev = %d, want %d\", w.minRev, s.Rev()+1)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif len(w.(*watchStream).ch) != watcherN {",
                "+\t\tt.Errorf(\"watched event size = %d, want %d\", len(w.(*watchStream).ch), watcherN)",
                "+\t}",
                "+",
                "+\tevs := (<-w.(*watchStream).ch).Events",
                "+\tif len(evs) != 1 {",
                "+\t\tt.Errorf(\"len(evs) got = %d, want = 1\", len(evs))",
                "+\t}",
                "+\tif evs[0].Type != mvccpb.PUT {",
                "+\t\tt.Errorf(\"got = %v, want = %v\", evs[0].Type, mvccpb.PUT)",
                "+\t}",
                "+\tif !bytes.Equal(evs[0].Kv.Key, testKey) {",
                "+\t\tt.Errorf(\"got = %s, want = %s\", evs[0].Kv.Key, testKey)",
                "+\t}",
                "+\tif !bytes.Equal(evs[0].Kv.Value, testValue) {",
                "+\t\tt.Errorf(\"got = %s, want = %s\", evs[0].Kv.Value, testValue)",
                "+\t}",
                "+}",
                "+",
                "+// TestWatchCompacted tests a watcher that watches on a compacted revision.",
                "+func TestWatchCompacted(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+\ttestKey := []byte(\"foo\")",
                "+\ttestValue := []byte(\"bar\")",
                "+",
                "+\tmaxRev := 10",
                "+\tcompactRev := int64(5)",
                "+\tfor i := 0; i < maxRev; i++ {",
                "+\t\ts.Put(testKey, testValue, lease.NoLease)",
                "+\t}",
                "+\t_, err := s.Compact(compactRev)",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"failed to compact kv (%v)\", err)",
                "+\t}",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\twt, _ := w.Watch(0, testKey, nil, compactRev-1)",
                "+",
                "+\tselect {",
                "+\tcase resp := <-w.Chan():",
                "+\t\tif resp.WatchID != wt {",
                "+\t\t\tt.Errorf(\"resp.WatchID = %x, want %x\", resp.WatchID, wt)",
                "+\t\t}",
                "+\t\tif resp.CompactRevision == 0 {",
                "+\t\t\tt.Errorf(\"resp.Compacted = %v, want %v\", resp.CompactRevision, compactRev)",
                "+\t\t}",
                "+\tcase <-time.After(1 * time.Second):",
                "+\t\tt.Fatalf(\"failed to receive response (timeout)\")",
                "+\t}",
                "+}",
                "+",
                "+func TestWatchFutureRev(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+",
                "+\ttestKey := []byte(\"foo\")",
                "+\ttestValue := []byte(\"bar\")",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\twrev := int64(10)",
                "+\tw.Watch(0, testKey, nil, wrev)",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\trev := s.Put(testKey, testValue, lease.NoLease)",
                "+\t\tif rev >= wrev {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tselect {",
                "+\tcase resp := <-w.Chan():",
                "+\t\tif resp.Revision != wrev {",
                "+\t\t\tt.Fatalf(\"rev = %d, want %d\", resp.Revision, wrev)",
                "+\t\t}",
                "+\t\tif len(resp.Events) != 1 {",
                "+\t\t\tt.Fatalf(\"failed to get events from the response\")",
                "+\t\t}",
                "+\t\tif resp.Events[0].Kv.ModRevision != wrev {",
                "+\t\t\tt.Fatalf(\"kv.rev = %d, want %d\", resp.Events[0].Kv.ModRevision, wrev)",
                "+\t\t}",
                "+\tcase <-time.After(time.Second):",
                "+\t\tt.Fatal(\"failed to receive event in 1 second.\")",
                "+\t}",
                "+}",
                "+",
                "+func TestWatchRestore(t *testing.T) {",
                "+\ttest := func(delay time.Duration) func(t *testing.T) {",
                "+\t\treturn func(t *testing.T) {",
                "+\t\t\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\t\t\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+\t\t\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\t\t\ttestKey := []byte(\"foo\")",
                "+\t\t\ttestValue := []byte(\"bar\")",
                "+\t\t\trev := s.Put(testKey, testValue, lease.NoLease)",
                "+",
                "+\t\t\tnewBackend, newPath := backend.NewDefaultTmpBackend()",
                "+\t\t\tnewStore := newWatchableStore(newBackend, &lease.FakeLessor{}, nil)",
                "+\t\t\tdefer cleanup(newStore, newBackend, newPath)",
                "+",
                "+\t\t\tw := newStore.NewWatchStream()",
                "+\t\t\tw.Watch(0, testKey, nil, rev-1)",
                "+",
                "+\t\t\ttime.Sleep(delay)",
                "+",
                "+\t\t\tnewStore.Restore(b)",
                "+\t\t\tselect {",
                "+\t\t\tcase resp := <-w.Chan():",
                "+\t\t\t\tif resp.Revision != rev {",
                "+\t\t\t\t\tt.Fatalf(\"rev = %d, want %d\", resp.Revision, rev)",
                "+\t\t\t\t}",
                "+\t\t\t\tif len(resp.Events) != 1 {",
                "+\t\t\t\t\tt.Fatalf(\"failed to get events from the response\")",
                "+\t\t\t\t}",
                "+\t\t\t\tif resp.Events[0].Kv.ModRevision != rev {",
                "+\t\t\t\t\tt.Fatalf(\"kv.rev = %d, want %d\", resp.Events[0].Kv.ModRevision, rev)",
                "+\t\t\t\t}",
                "+\t\t\tcase <-time.After(time.Second):",
                "+\t\t\t\tt.Fatal(\"failed to receive event in 1 second.\")",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tt.Run(\"Normal\", test(0))",
                "+\tt.Run(\"RunSyncWatchLoopBeforeRestore\", test(time.Millisecond*120)) // longer than default waitDuration",
                "+}",
                "+",
                "+// TestWatchBatchUnsynced tests batching on unsynced watchers",
                "+func TestWatchBatchUnsynced(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\toldMaxRevs := watchBatchMaxRevs",
                "+\tdefer func() {",
                "+\t\twatchBatchMaxRevs = oldMaxRevs",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+\tbatches := 3",
                "+\twatchBatchMaxRevs = 4",
                "+",
                "+\tv := []byte(\"foo\")",
                "+\tfor i := 0; i < watchBatchMaxRevs*batches; i++ {",
                "+\t\ts.Put(v, v, lease.NoLease)",
                "+\t}",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tw.Watch(0, v, nil, 1)",
                "+\tfor i := 0; i < batches; i++ {",
                "+\t\tif resp := <-w.Chan(); len(resp.Events) != watchBatchMaxRevs {",
                "+\t\t\tt.Fatalf(\"len(events) = %d, want %d\", len(resp.Events), watchBatchMaxRevs)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\ts.store.revMu.Lock()",
                "+\tdefer s.store.revMu.Unlock()",
                "+\tif size := s.synced.size(); size != 1 {",
                "+\t\tt.Errorf(\"synced size = %d, want 1\", size)",
                "+\t}",
                "+}",
                "+",
                "+func TestNewMapwatcherToEventMap(t *testing.T) {",
                "+\tk0, k1, k2 := []byte(\"foo0\"), []byte(\"foo1\"), []byte(\"foo2\")",
                "+\tv0, v1, v2 := []byte(\"bar0\"), []byte(\"bar1\"), []byte(\"bar2\")",
                "+",
                "+\tws := []*watcher{{key: k0}, {key: k1}, {key: k2}}",
                "+",
                "+\tevs := []mvccpb.Event{",
                "+\t\t{",
                "+\t\t\tType: mvccpb.PUT,",
                "+\t\t\tKv:   &mvccpb.KeyValue{Key: k0, Value: v0},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tType: mvccpb.PUT,",
                "+\t\t\tKv:   &mvccpb.KeyValue{Key: k1, Value: v1},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tType: mvccpb.PUT,",
                "+\t\t\tKv:   &mvccpb.KeyValue{Key: k2, Value: v2},",
                "+\t\t},",
                "+\t}",
                "+",
                "+\ttests := []struct {",
                "+\t\tsync []*watcher",
                "+\t\tevs  []mvccpb.Event",
                "+",
                "+\t\twwe map[*watcher][]mvccpb.Event",
                "+\t}{",
                "+\t\t// no watcher in sync, some events should return empty wwe",
                "+\t\t{",
                "+\t\t\tnil,",
                "+\t\t\tevs,",
                "+\t\t\tmap[*watcher][]mvccpb.Event{},",
                "+\t\t},",
                "+",
                "+\t\t// one watcher in sync, one event that does not match the key of that",
                "+\t\t// watcher should return empty wwe",
                "+\t\t{",
                "+\t\t\t[]*watcher{ws[2]},",
                "+\t\t\tevs[:1],",
                "+\t\t\tmap[*watcher][]mvccpb.Event{},",
                "+\t\t},",
                "+",
                "+\t\t// one watcher in sync, one event that matches the key of that",
                "+\t\t// watcher should return wwe with that matching watcher",
                "+\t\t{",
                "+\t\t\t[]*watcher{ws[1]},",
                "+\t\t\tevs[1:2],",
                "+\t\t\tmap[*watcher][]mvccpb.Event{",
                "+\t\t\t\tws[1]: evs[1:2],",
                "+\t\t\t},",
                "+\t\t},",
                "+",
                "+\t\t// two watchers in sync that watches two different keys, one event",
                "+\t\t// that matches the key of only one of the watcher should return wwe",
                "+\t\t// with the matching watcher",
                "+\t\t{",
                "+\t\t\t[]*watcher{ws[0], ws[2]},",
                "+\t\t\tevs[2:],",
                "+\t\t\tmap[*watcher][]mvccpb.Event{",
                "+\t\t\t\tws[2]: evs[2:],",
                "+\t\t\t},",
                "+\t\t},",
                "+",
                "+\t\t// two watchers in sync that watches the same key, two events that",
                "+\t\t// match the keys should return wwe with those two watchers",
                "+\t\t{",
                "+\t\t\t[]*watcher{ws[0], ws[1]},",
                "+\t\t\tevs[:2],",
                "+\t\t\tmap[*watcher][]mvccpb.Event{",
                "+\t\t\t\tws[0]: evs[:1],",
                "+\t\t\t\tws[1]: evs[1:2],",
                "+\t\t\t},",
                "+\t\t},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\twg := newWatcherGroup()",
                "+\t\tfor _, w := range tt.sync {",
                "+\t\t\twg.add(w)",
                "+\t\t}",
                "+",
                "+\t\tgwe := newWatcherBatch(&wg, tt.evs)",
                "+\t\tif len(gwe) != len(tt.wwe) {",
                "+\t\t\tt.Errorf(\"#%d: len(gwe) got = %d, want = %d\", i, len(gwe), len(tt.wwe))",
                "+\t\t}",
                "+\t\t// compare gwe and tt.wwe",
                "+\t\tfor w, eb := range gwe {",
                "+\t\t\tif len(eb.evs) != len(tt.wwe[w]) {",
                "+\t\t\t\tt.Errorf(\"#%d: len(eb.evs) got = %d, want = %d\", i, len(eb.evs), len(tt.wwe[w]))",
                "+\t\t\t}",
                "+\t\t\tif !reflect.DeepEqual(eb.evs, tt.wwe[w]) {",
                "+\t\t\t\tt.Errorf(\"#%d: reflect.DeepEqual events got = %v, want = true\", i, false)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// TestWatchVictims tests that watchable store delivers watch events",
                "+// when the watch channel is temporarily clogged with too many events.",
                "+func TestWatchVictims(t *testing.T) {",
                "+\toldChanBufLen, oldMaxWatchersPerSync := chanBufLen, maxWatchersPerSync",
                "+",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t\tchanBufLen, maxWatchersPerSync = oldChanBufLen, oldMaxWatchersPerSync",
                "+\t}()",
                "+",
                "+\tchanBufLen, maxWatchersPerSync = 1, 2",
                "+\tnumPuts := chanBufLen * 64",
                "+\ttestKey, testValue := []byte(\"foo\"), []byte(\"bar\")",
                "+",
                "+\tvar wg sync.WaitGroup",
                "+\tnumWatches := maxWatchersPerSync * 128",
                "+\terrc := make(chan error, numWatches)",
                "+\twg.Add(numWatches)",
                "+\tfor i := 0; i < numWatches; i++ {",
                "+\t\tgo func() {",
                "+\t\t\tw := s.NewWatchStream()",
                "+\t\t\tw.Watch(0, testKey, nil, 1)",
                "+\t\t\tdefer func() {",
                "+\t\t\t\tw.Close()",
                "+\t\t\t\twg.Done()",
                "+\t\t\t}()",
                "+\t\t\ttc := time.After(10 * time.Second)",
                "+\t\t\tevs, nextRev := 0, int64(2)",
                "+\t\t\tfor evs < numPuts {",
                "+\t\t\t\tselect {",
                "+\t\t\t\tcase <-tc:",
                "+\t\t\t\t\terrc <- fmt.Errorf(\"time out\")",
                "+\t\t\t\t\treturn",
                "+\t\t\t\tcase wr := <-w.Chan():",
                "+\t\t\t\t\tevs += len(wr.Events)",
                "+\t\t\t\t\tfor _, ev := range wr.Events {",
                "+\t\t\t\t\t\tif ev.Kv.ModRevision != nextRev {",
                "+\t\t\t\t\t\t\terrc <- fmt.Errorf(\"expected rev=%d, got %d\", nextRev, ev.Kv.ModRevision)",
                "+\t\t\t\t\t\t\treturn",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t\tnextRev++",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\ttime.Sleep(time.Millisecond)",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif evs != numPuts {",
                "+\t\t\t\terrc <- fmt.Errorf(\"expected %d events, got %d\", numPuts, evs)",
                "+\t\t\t\treturn",
                "+\t\t\t}",
                "+\t\t\tselect {",
                "+\t\t\tcase <-w.Chan():",
                "+\t\t\t\terrc <- fmt.Errorf(\"unexpected response\")",
                "+\t\t\tdefault:",
                "+\t\t\t}",
                "+\t\t}()",
                "+\t\ttime.Sleep(time.Millisecond)",
                "+\t}",
                "+",
                "+\tvar wgPut sync.WaitGroup",
                "+\twgPut.Add(numPuts)",
                "+\tfor i := 0; i < numPuts; i++ {",
                "+\t\tgo func() {",
                "+\t\t\tdefer wgPut.Done()",
                "+\t\t\ts.Put(testKey, testValue, lease.NoLease)",
                "+\t\t}()",
                "+\t}",
                "+\twgPut.Wait()",
                "+",
                "+\twg.Wait()",
                "+\tselect {",
                "+\tcase err := <-errc:",
                "+\t\tt.Fatal(err)",
                "+\tdefault:",
                "+\t}",
                "+}",
                "+",
                "+// TestStressWatchCancelClose tests closing a watch stream while",
                "+// canceling its watches.",
                "+func TestStressWatchCancelClose(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+",
                "+\ttestKey, testValue := []byte(\"foo\"), []byte(\"bar\")",
                "+\tvar wg sync.WaitGroup",
                "+\treadyc := make(chan struct{})",
                "+\twg.Add(100)",
                "+\tfor i := 0; i < 100; i++ {",
                "+\t\tgo func() {",
                "+\t\t\tdefer wg.Done()",
                "+\t\t\tw := s.NewWatchStream()",
                "+\t\t\tids := make([]WatchID, 10)",
                "+\t\t\tfor i := range ids {",
                "+\t\t\t\tids[i], _ = w.Watch(0, testKey, nil, 0)",
                "+\t\t\t}",
                "+\t\t\t<-readyc",
                "+\t\t\twg.Add(1 + len(ids)/2)",
                "+\t\t\tfor i := range ids[:len(ids)/2] {",
                "+\t\t\t\tgo func(n int) {",
                "+\t\t\t\t\tdefer wg.Done()",
                "+\t\t\t\t\tw.Cancel(ids[n])",
                "+\t\t\t\t}(i)",
                "+\t\t\t}",
                "+\t\t\tgo func() {",
                "+\t\t\t\tdefer wg.Done()",
                "+\t\t\t\tw.Close()",
                "+\t\t\t}()",
                "+\t\t}()",
                "+\t}",
                "+",
                "+\tclose(readyc)",
                "+\tfor i := 0; i < 100; i++ {",
                "+\t\ts.Put(testKey, testValue, lease.NoLease)",
                "+\t}",
                "+",
                "+\twg.Wait()",
                "+}",
                "diff --git a/mvcc/watchable_store_txn.go b/mvcc/watchable_store_txn.go",
                "new file mode 100644",
                "index 000000000..bc8eb645a",
                "--- /dev/null",
                "+++ b/mvcc/watchable_store_txn.go",
                "@@ -0,0 +1,51 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import \"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+",
                "+func (tw *watchableStoreTxnWrite) End() {",
                "+\tchanges := tw.Changes()",
                "+\tif len(changes) == 0 {",
                "+\t\ttw.TxnWrite.End()",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\trev := tw.Rev() + 1",
                "+\tevs := make([]mvccpb.Event, len(changes))",
                "+\tfor i, change := range changes {",
                "+\t\tevs[i].Kv = &changes[i]",
                "+\t\tif change.CreateRevision == 0 {",
                "+\t\t\tevs[i].Type = mvccpb.DELETE",
                "+\t\t\tevs[i].Kv.ModRevision = rev",
                "+\t\t} else {",
                "+\t\t\tevs[i].Type = mvccpb.PUT",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// end write txn under watchable store lock so the updates are visible",
                "+\t// when asynchronous event posting checks the current store revision",
                "+\ttw.s.mu.Lock()",
                "+\ttw.s.notify(rev, evs)",
                "+\ttw.TxnWrite.End()",
                "+\ttw.s.mu.Unlock()",
                "+}",
                "+",
                "+type watchableStoreTxnWrite struct {",
                "+\tTxnWrite",
                "+\ts *watchableStore",
                "+}",
                "+",
                "+func (s *watchableStore) Write() TxnWrite { return &watchableStoreTxnWrite{s.store.Write(), s} }",
                "diff --git a/mvcc/watcher.go b/mvcc/watcher.go",
                "new file mode 100644",
                "index 000000000..886b87d5a",
                "--- /dev/null",
                "+++ b/mvcc/watcher.go",
                "@@ -0,0 +1,193 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"errors\"",
                "+\t\"sync\"",
                "+",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+)",
                "+",
                "+// AutoWatchID is the watcher ID passed in WatchStream.Watch when no",
                "+// user-provided ID is available. If pass, an ID will automatically be assigned.",
                "+const AutoWatchID WatchID = 0",
                "+",
                "+var (",
                "+\tErrWatcherNotExist    = errors.New(\"mvcc: watcher does not exist\")",
                "+\tErrEmptyWatcherRange  = errors.New(\"mvcc: watcher range is empty\")",
                "+\tErrWatcherDuplicateID = errors.New(\"mvcc: duplicate watch ID provided on the WatchStream\")",
                "+)",
                "+",
                "+type WatchID int64",
                "+",
                "+// FilterFunc returns true if the given event should be filtered out.",
                "+type FilterFunc func(e mvccpb.Event) bool",
                "+",
                "+type WatchStream interface {",
                "+\t// Watch creates a watcher. The watcher watches the events happening or",
                "+\t// happened on the given key or range [key, end) from the given startRev.",
                "+\t//",
                "+\t// The whole event history can be watched unless compacted.",
                "+\t// If \"startRev\" <=0, watch observes events after currentRev.",
                "+\t//",
                "+\t// The returned \"id\" is the ID of this watcher. It appears as WatchID",
                "+\t// in events that are sent to the created watcher through stream channel.",
                "+\t// The watch ID is used when it's not equal to AutoWatchID. Otherwise,",
                "+\t// an auto-generated watch ID is returned.",
                "+\tWatch(id WatchID, key, end []byte, startRev int64, fcs ...FilterFunc) (WatchID, error)",
                "+",
                "+\t// Chan returns a chan. All watch response will be sent to the returned chan.",
                "+\tChan() <-chan WatchResponse",
                "+",
                "+\t// RequestProgress requests the progress of the watcher with given ID. The response",
                "+\t// will only be sent if the watcher is currently synced.",
                "+\t// The responses will be sent through the WatchRespone Chan attached",
                "+\t// with this stream to ensure correct ordering.",
                "+\t// The responses contains no events. The revision in the response is the progress",
                "+\t// of the watchers since the watcher is currently synced.",
                "+\tRequestProgress(id WatchID)",
                "+",
                "+\t// Cancel cancels a watcher by giving its ID. If watcher does not exist, an error will be",
                "+\t// returned.",
                "+\tCancel(id WatchID) error",
                "+",
                "+\t// Close closes Chan and release all related resources.",
                "+\tClose()",
                "+",
                "+\t// Rev returns the current revision of the KV the stream watches on.",
                "+\tRev() int64",
                "+}",
                "+",
                "+type WatchResponse struct {",
                "+\t// WatchID is the WatchID of the watcher this response sent to.",
                "+\tWatchID WatchID",
                "+",
                "+\t// Events contains all the events that needs to send.",
                "+\tEvents []mvccpb.Event",
                "+",
                "+\t// Revision is the revision of the KV when the watchResponse is created.",
                "+\t// For a normal response, the revision should be the same as the last",
                "+\t// modified revision inside Events. For a delayed response to a unsynced",
                "+\t// watcher, the revision is greater than the last modified revision",
                "+\t// inside Events.",
                "+\tRevision int64",
                "+",
                "+\t// CompactRevision is set when the watcher is cancelled due to compaction.",
                "+\tCompactRevision int64",
                "+}",
                "+",
                "+// watchStream contains a collection of watchers that share",
                "+// one streaming chan to send out watched events and other control events.",
                "+type watchStream struct {",
                "+\twatchable watchable",
                "+\tch        chan WatchResponse",
                "+",
                "+\tmu sync.Mutex // guards fields below it",
                "+\t// nextID is the ID pre-allocated for next new watcher in this stream",
                "+\tnextID   WatchID",
                "+\tclosed   bool",
                "+\tcancels  map[WatchID]cancelFunc",
                "+\twatchers map[WatchID]*watcher",
                "+}",
                "+",
                "+// Watch creates a new watcher in the stream and returns its WatchID.",
                "+func (ws *watchStream) Watch(id WatchID, key, end []byte, startRev int64, fcs ...FilterFunc) (WatchID, error) {",
                "+\t// prevent wrong range where key >= end lexicographically",
                "+\t// watch request with 'WithFromKey' has empty-byte range end",
                "+\tif len(end) != 0 && bytes.Compare(key, end) != -1 {",
                "+\t\treturn -1, ErrEmptyWatcherRange",
                "+\t}",
                "+",
                "+\tws.mu.Lock()",
                "+\tdefer ws.mu.Unlock()",
                "+\tif ws.closed {",
                "+\t\treturn -1, ErrEmptyWatcherRange",
                "+\t}",
                "+",
                "+\tif id == AutoWatchID {",
                "+\t\tfor ws.watchers[ws.nextID] != nil {",
                "+\t\t\tws.nextID++",
                "+\t\t}",
                "+\t\tid = ws.nextID",
                "+\t\tws.nextID++",
                "+\t} else if _, ok := ws.watchers[id]; ok {",
                "+\t\treturn -1, ErrWatcherDuplicateID",
                "+\t}",
                "+",
                "+\tw, c := ws.watchable.watch(key, end, startRev, id, ws.ch, fcs...)",
                "+",
                "+\tws.cancels[id] = c",
                "+\tws.watchers[id] = w",
                "+\treturn id, nil",
                "+}",
                "+",
                "+func (ws *watchStream) Chan() <-chan WatchResponse {",
                "+\treturn ws.ch",
                "+}",
                "+",
                "+func (ws *watchStream) Cancel(id WatchID) error {",
                "+\tws.mu.Lock()",
                "+\tcancel, ok := ws.cancels[id]",
                "+\tw := ws.watchers[id]",
                "+\tok = ok && !ws.closed",
                "+\tws.mu.Unlock()",
                "+",
                "+\tif !ok {",
                "+\t\treturn ErrWatcherNotExist",
                "+\t}",
                "+\tcancel()",
                "+",
                "+\tws.mu.Lock()",
                "+\t// The watch isn't removed until cancel so that if Close() is called,",
                "+\t// it will wait for the cancel. Otherwise, Close() could close the",
                "+\t// watch channel while the store is still posting events.",
                "+\tif ww := ws.watchers[id]; ww == w {",
                "+\t\tdelete(ws.cancels, id)",
                "+\t\tdelete(ws.watchers, id)",
                "+\t}",
                "+\tws.mu.Unlock()",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (ws *watchStream) Close() {",
                "+\tws.mu.Lock()",
                "+\tdefer ws.mu.Unlock()",
                "+",
                "+\tfor _, cancel := range ws.cancels {",
                "+\t\tcancel()",
                "+\t}",
                "+\tws.closed = true",
                "+\tclose(ws.ch)",
                "+\twatchStreamGauge.Dec()",
                "+}",
                "+",
                "+func (ws *watchStream) Rev() int64 {",
                "+\tws.mu.Lock()",
                "+\tdefer ws.mu.Unlock()",
                "+\treturn ws.watchable.rev()",
                "+}",
                "+",
                "+func (ws *watchStream) RequestProgress(id WatchID) {",
                "+\tws.mu.Lock()",
                "+\tw, ok := ws.watchers[id]",
                "+\tws.mu.Unlock()",
                "+\tif !ok {",
                "+\t\treturn",
                "+\t}",
                "+\tws.watchable.progress(w)",
                "+}",
                "diff --git a/mvcc/watcher_bench_test.go b/mvcc/watcher_bench_test.go",
                "new file mode 100644",
                "index 000000000..86cbea7df",
                "--- /dev/null",
                "+++ b/mvcc/watcher_bench_test.go",
                "@@ -0,0 +1,38 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+)",
                "+",
                "+func BenchmarkKVWatcherMemoryUsage(b *testing.B) {",
                "+\tbe, tmpPath := backend.NewDefaultTmpBackend()",
                "+\twatchable := newWatchableStore(be, &lease.FakeLessor{}, nil)",
                "+",
                "+\tdefer cleanup(watchable, be, tmpPath)",
                "+",
                "+\tw := watchable.NewWatchStream()",
                "+",
                "+\tb.ReportAllocs()",
                "+\tb.StartTimer()",
                "+\tfor i := 0; i < b.N; i++ {",
                "+\t\tw.Watch(0, []byte(fmt.Sprint(\"foo\", i)), nil, 0)",
                "+\t}",
                "+}",
                "diff --git a/mvcc/watcher_group.go b/mvcc/watcher_group.go",
                "new file mode 100644",
                "index 000000000..6ef1d0ce8",
                "--- /dev/null",
                "+++ b/mvcc/watcher_group.go",
                "@@ -0,0 +1,283 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"math\"",
                "+",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/pkg/adt\"",
                "+)",
                "+",
                "+var (",
                "+\t// watchBatchMaxRevs is the maximum distinct revisions that",
                "+\t// may be sent to an unsynced watcher at a time. Declared as",
                "+\t// var instead of const for testing purposes.",
                "+\twatchBatchMaxRevs = 1000",
                "+)",
                "+",
                "+type eventBatch struct {",
                "+\t// evs is a batch of revision-ordered events",
                "+\tevs []mvccpb.Event",
                "+\t// revs is the minimum unique revisions observed for this batch",
                "+\trevs int",
                "+\t// moreRev is first revision with more events following this batch",
                "+\tmoreRev int64",
                "+}",
                "+",
                "+func (eb *eventBatch) add(ev mvccpb.Event) {",
                "+\tif eb.revs > watchBatchMaxRevs {",
                "+\t\t// maxed out batch size",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\tif len(eb.evs) == 0 {",
                "+\t\t// base case",
                "+\t\teb.revs = 1",
                "+\t\teb.evs = append(eb.evs, ev)",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\t// revision accounting",
                "+\tebRev := eb.evs[len(eb.evs)-1].Kv.ModRevision",
                "+\tevRev := ev.Kv.ModRevision",
                "+\tif evRev > ebRev {",
                "+\t\teb.revs++",
                "+\t\tif eb.revs > watchBatchMaxRevs {",
                "+\t\t\teb.moreRev = evRev",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t}",
                "+",
                "+\teb.evs = append(eb.evs, ev)",
                "+}",
                "+",
                "+type watcherBatch map[*watcher]*eventBatch",
                "+",
                "+func (wb watcherBatch) add(w *watcher, ev mvccpb.Event) {",
                "+\teb := wb[w]",
                "+\tif eb == nil {",
                "+\t\teb = &eventBatch{}",
                "+\t\twb[w] = eb",
                "+\t}",
                "+\teb.add(ev)",
                "+}",
                "+",
                "+// newWatcherBatch maps watchers to their matched events. It enables quick",
                "+// events look up by watcher.",
                "+func newWatcherBatch(wg *watcherGroup, evs []mvccpb.Event) watcherBatch {",
                "+\tif len(wg.watchers) == 0 {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\twb := make(watcherBatch)",
                "+\tfor _, ev := range evs {",
                "+\t\tfor w := range wg.watcherSetByKey(string(ev.Kv.Key)) {",
                "+\t\t\tif ev.Kv.ModRevision >= w.minRev {",
                "+\t\t\t\t// don't double notify",
                "+\t\t\t\twb.add(w, ev)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+\treturn wb",
                "+}",
                "+",
                "+type watcherSet map[*watcher]struct{}",
                "+",
                "+func (w watcherSet) add(wa *watcher) {",
                "+\tif _, ok := w[wa]; ok {",
                "+\t\tpanic(\"add watcher twice!\")",
                "+\t}",
                "+\tw[wa] = struct{}{}",
                "+}",
                "+",
                "+func (w watcherSet) union(ws watcherSet) {",
                "+\tfor wa := range ws {",
                "+\t\tw.add(wa)",
                "+\t}",
                "+}",
                "+",
                "+func (w watcherSet) delete(wa *watcher) {",
                "+\tif _, ok := w[wa]; !ok {",
                "+\t\tpanic(\"removing missing watcher!\")",
                "+\t}",
                "+\tdelete(w, wa)",
                "+}",
                "+",
                "+type watcherSetByKey map[string]watcherSet",
                "+",
                "+func (w watcherSetByKey) add(wa *watcher) {",
                "+\tset := w[string(wa.key)]",
                "+\tif set == nil {",
                "+\t\tset = make(watcherSet)",
                "+\t\tw[string(wa.key)] = set",
                "+\t}",
                "+\tset.add(wa)",
                "+}",
                "+",
                "+func (w watcherSetByKey) delete(wa *watcher) bool {",
                "+\tk := string(wa.key)",
                "+\tif v, ok := w[k]; ok {",
                "+\t\tif _, ok := v[wa]; ok {",
                "+\t\t\tdelete(v, wa)",
                "+\t\t\tif len(v) == 0 {",
                "+\t\t\t\t// remove the set; nothing left",
                "+\t\t\t\tdelete(w, k)",
                "+\t\t\t}",
                "+\t\t\treturn true",
                "+\t\t}",
                "+\t}",
                "+\treturn false",
                "+}",
                "+",
                "+// watcherGroup is a collection of watchers organized by their ranges",
                "+type watcherGroup struct {",
                "+\t// keyWatchers has the watchers that watch on a single key",
                "+\tkeyWatchers watcherSetByKey",
                "+\t// ranges has the watchers that watch a range; it is sorted by interval",
                "+\tranges adt.IntervalTree",
                "+\t// watchers is the set of all watchers",
                "+\twatchers watcherSet",
                "+}",
                "+",
                "+func newWatcherGroup() watcherGroup {",
                "+\treturn watcherGroup{",
                "+\t\tkeyWatchers: make(watcherSetByKey),",
                "+\t\twatchers:    make(watcherSet),",
                "+\t}",
                "+}",
                "+",
                "+// add puts a watcher in the group.",
                "+func (wg *watcherGroup) add(wa *watcher) {",
                "+\twg.watchers.add(wa)",
                "+\tif wa.end == nil {",
                "+\t\twg.keyWatchers.add(wa)",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\t// interval already registered?",
                "+\tivl := adt.NewStringAffineInterval(string(wa.key), string(wa.end))",
                "+\tif iv := wg.ranges.Find(ivl); iv != nil {",
                "+\t\tiv.Val.(watcherSet).add(wa)",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\t// not registered, put in interval tree",
                "+\tws := make(watcherSet)",
                "+\tws.add(wa)",
                "+\twg.ranges.Insert(ivl, ws)",
                "+}",
                "+",
                "+// contains is whether the given key has a watcher in the group.",
                "+func (wg *watcherGroup) contains(key string) bool {",
                "+\t_, ok := wg.keyWatchers[key]",
                "+\treturn ok || wg.ranges.Intersects(adt.NewStringAffinePoint(key))",
                "+}",
                "+",
                "+// size gives the number of unique watchers in the group.",
                "+func (wg *watcherGroup) size() int { return len(wg.watchers) }",
                "+",
                "+// delete removes a watcher from the group.",
                "+func (wg *watcherGroup) delete(wa *watcher) bool {",
                "+\tif _, ok := wg.watchers[wa]; !ok {",
                "+\t\treturn false",
                "+\t}",
                "+\twg.watchers.delete(wa)",
                "+\tif wa.end == nil {",
                "+\t\twg.keyWatchers.delete(wa)",
                "+\t\treturn true",
                "+\t}",
                "+",
                "+\tivl := adt.NewStringAffineInterval(string(wa.key), string(wa.end))",
                "+\tiv := wg.ranges.Find(ivl)",
                "+\tif iv == nil {",
                "+\t\treturn false",
                "+\t}",
                "+",
                "+\tws := iv.Val.(watcherSet)",
                "+\tdelete(ws, wa)",
                "+\tif len(ws) == 0 {",
                "+\t\t// remove interval missing watchers",
                "+\t\tif ok := wg.ranges.Delete(ivl); !ok {",
                "+\t\t\tpanic(\"could not remove watcher from interval tree\")",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn true",
                "+}",
                "+",
                "+// choose selects watchers from the watcher group to update",
                "+func (wg *watcherGroup) choose(maxWatchers int, curRev, compactRev int64) (*watcherGroup, int64) {",
                "+\tif len(wg.watchers) < maxWatchers {",
                "+\t\treturn wg, wg.chooseAll(curRev, compactRev)",
                "+\t}",
                "+\tret := newWatcherGroup()",
                "+\tfor w := range wg.watchers {",
                "+\t\tif maxWatchers <= 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\tmaxWatchers--",
                "+\t\tret.add(w)",
                "+\t}",
                "+\treturn &ret, ret.chooseAll(curRev, compactRev)",
                "+}",
                "+",
                "+func (wg *watcherGroup) chooseAll(curRev, compactRev int64) int64 {",
                "+\tminRev := int64(math.MaxInt64)",
                "+\tfor w := range wg.watchers {",
                "+\t\tif w.minRev > curRev {",
                "+\t\t\tpanic(\"watcher current revision should not exceed current revision\")",
                "+\t\t}",
                "+\t\tif w.minRev < compactRev {",
                "+\t\t\tselect {",
                "+\t\t\tcase w.ch <- WatchResponse{WatchID: w.id, CompactRevision: compactRev}:",
                "+\t\t\t\tw.compacted = true",
                "+\t\t\t\twg.delete(w)",
                "+\t\t\tdefault:",
                "+\t\t\t\t// retry next time",
                "+\t\t\t}",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tif minRev > w.minRev {",
                "+\t\t\tminRev = w.minRev",
                "+\t\t}",
                "+\t}",
                "+\treturn minRev",
                "+}",
                "+",
                "+// watcherSetByKey gets the set of watchers that receive events on the given key.",
                "+func (wg *watcherGroup) watcherSetByKey(key string) watcherSet {",
                "+\twkeys := wg.keyWatchers[key]",
                "+\twranges := wg.ranges.Stab(adt.NewStringAffinePoint(key))",
                "+",
                "+\t// zero-copy cases",
                "+\tswitch {",
                "+\tcase len(wranges) == 0:",
                "+\t\t// no need to merge ranges or copy; reuse single-key set",
                "+\t\treturn wkeys",
                "+\tcase len(wranges) == 0 && len(wkeys) == 0:",
                "+\t\treturn nil",
                "+\tcase len(wranges) == 1 && len(wkeys) == 0:",
                "+\t\treturn wranges[0].Val.(watcherSet)",
                "+\t}",
                "+",
                "+\t// copy case",
                "+\tret := make(watcherSet)",
                "+\tret.union(wg.keyWatchers[key])",
                "+\tfor _, item := range wranges {",
                "+\t\tret.union(item.Val.(watcherSet))",
                "+\t}",
                "+\treturn ret",
                "+}",
                "diff --git a/mvcc/watcher_test.go b/mvcc/watcher_test.go",
                "new file mode 100644",
                "index 000000000..ad5b54d7a",
                "--- /dev/null",
                "+++ b/mvcc/watcher_test.go",
                "@@ -0,0 +1,379 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package mvcc",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"fmt\"",
                "+\t\"os\"",
                "+\t\"reflect\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                "+)",
                "+",
                "+// TestWatcherWatchID tests that each watcher provides unique watchID,",
                "+// and the watched event attaches the correct watchID.",
                "+func TestWatcherWatchID(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := WatchableKV(newWatchableStore(b, &lease.FakeLessor{}, nil))",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tdefer w.Close()",
                "+",
                "+\tidm := make(map[WatchID]struct{})",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tid, _ := w.Watch(0, []byte(\"foo\"), nil, 0)",
                "+\t\tif _, ok := idm[id]; ok {",
                "+\t\t\tt.Errorf(\"#%d: id %d exists\", i, id)",
                "+\t\t}",
                "+\t\tidm[id] = struct{}{}",
                "+",
                "+\t\ts.Put([]byte(\"foo\"), []byte(\"bar\"), lease.NoLease)",
                "+",
                "+\t\tresp := <-w.Chan()",
                "+\t\tif resp.WatchID != id {",
                "+\t\t\tt.Errorf(\"#%d: watch id in event = %d, want %d\", i, resp.WatchID, id)",
                "+\t\t}",
                "+",
                "+\t\tif err := w.Cancel(id); err != nil {",
                "+\t\t\tt.Error(err)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\ts.Put([]byte(\"foo2\"), []byte(\"bar\"), lease.NoLease)",
                "+",
                "+\t// unsynced watchers",
                "+\tfor i := 10; i < 20; i++ {",
                "+\t\tid, _ := w.Watch(0, []byte(\"foo2\"), nil, 1)",
                "+\t\tif _, ok := idm[id]; ok {",
                "+\t\t\tt.Errorf(\"#%d: id %d exists\", i, id)",
                "+\t\t}",
                "+\t\tidm[id] = struct{}{}",
                "+",
                "+\t\tresp := <-w.Chan()",
                "+\t\tif resp.WatchID != id {",
                "+\t\t\tt.Errorf(\"#%d: watch id in event = %d, want %d\", i, resp.WatchID, id)",
                "+\t\t}",
                "+",
                "+\t\tif err := w.Cancel(id); err != nil {",
                "+\t\t\tt.Error(err)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestWatcherRequestsCustomID(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := WatchableKV(newWatchableStore(b, &lease.FakeLessor{}, nil))",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tdefer w.Close()",
                "+",
                "+\t// - Request specifically ID #1",
                "+\t// - Try to duplicate it, get an error",
                "+\t// - Make sure the auto-assignment skips over things we manually assigned",
                "+",
                "+\ttt := []struct {",
                "+\t\tgivenID     WatchID",
                "+\t\texpectedID  WatchID",
                "+\t\texpectedErr error",
                "+\t}{",
                "+\t\t{1, 1, nil},",
                "+\t\t{1, 0, ErrWatcherDuplicateID},",
                "+\t\t{0, 0, nil},",
                "+\t\t{0, 2, nil},",
                "+\t}",
                "+",
                "+\tfor i, tcase := range tt {",
                "+\t\tid, err := w.Watch(tcase.givenID, []byte(\"foo\"), nil, 0)",
                "+\t\tif tcase.expectedErr != nil || err != nil {",
                "+\t\t\tif err != tcase.expectedErr {",
                "+\t\t\t\tt.Errorf(\"expected get error %q in test case %q, got %q\", tcase.expectedErr, i, err)",
                "+\t\t\t}",
                "+\t\t} else if tcase.expectedID != id {",
                "+\t\t\tt.Errorf(\"expected to create ID %d, got %d in test case %d\", tcase.expectedID, id, i)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// TestWatcherWatchPrefix tests if Watch operation correctly watches",
                "+// and returns events with matching prefixes.",
                "+func TestWatcherWatchPrefix(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := WatchableKV(newWatchableStore(b, &lease.FakeLessor{}, nil))",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tdefer w.Close()",
                "+",
                "+\tidm := make(map[WatchID]struct{})",
                "+",
                "+\tval := []byte(\"bar\")",
                "+\tkeyWatch, keyEnd, keyPut := []byte(\"foo\"), []byte(\"fop\"), []byte(\"foobar\")",
                "+",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tid, _ := w.Watch(0, keyWatch, keyEnd, 0)",
                "+\t\tif _, ok := idm[id]; ok {",
                "+\t\t\tt.Errorf(\"#%d: unexpected duplicated id %x\", i, id)",
                "+\t\t}",
                "+\t\tidm[id] = struct{}{}",
                "+",
                "+\t\ts.Put(keyPut, val, lease.NoLease)",
                "+",
                "+\t\tresp := <-w.Chan()",
                "+\t\tif resp.WatchID != id {",
                "+\t\t\tt.Errorf(\"#%d: watch id in event = %d, want %d\", i, resp.WatchID, id)",
                "+\t\t}",
                "+",
                "+\t\tif err := w.Cancel(id); err != nil {",
                "+\t\t\tt.Errorf(\"#%d: unexpected cancel error %v\", i, err)",
                "+\t\t}",
                "+",
                "+\t\tif len(resp.Events) != 1 {",
                "+\t\t\tt.Errorf(\"#%d: len(resp.Events) got = %d, want = 1\", i, len(resp.Events))",
                "+\t\t}",
                "+\t\tif len(resp.Events) == 1 {",
                "+\t\t\tif !bytes.Equal(resp.Events[0].Kv.Key, keyPut) {",
                "+\t\t\t\tt.Errorf(\"#%d: resp.Events got = %s, want = %s\", i, resp.Events[0].Kv.Key, keyPut)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tkeyWatch1, keyEnd1, keyPut1 := []byte(\"foo1\"), []byte(\"foo2\"), []byte(\"foo1bar\")",
                "+\ts.Put(keyPut1, val, lease.NoLease)",
                "+",
                "+\t// unsynced watchers",
                "+\tfor i := 10; i < 15; i++ {",
                "+\t\tid, _ := w.Watch(0, keyWatch1, keyEnd1, 1)",
                "+\t\tif _, ok := idm[id]; ok {",
                "+\t\t\tt.Errorf(\"#%d: id %d exists\", i, id)",
                "+\t\t}",
                "+\t\tidm[id] = struct{}{}",
                "+",
                "+\t\tresp := <-w.Chan()",
                "+\t\tif resp.WatchID != id {",
                "+\t\t\tt.Errorf(\"#%d: watch id in event = %d, want %d\", i, resp.WatchID, id)",
                "+\t\t}",
                "+",
                "+\t\tif err := w.Cancel(id); err != nil {",
                "+\t\t\tt.Error(err)",
                "+\t\t}",
                "+",
                "+\t\tif len(resp.Events) != 1 {",
                "+\t\t\tt.Errorf(\"#%d: len(resp.Events) got = %d, want = 1\", i, len(resp.Events))",
                "+\t\t}",
                "+\t\tif len(resp.Events) == 1 {",
                "+\t\t\tif !bytes.Equal(resp.Events[0].Kv.Key, keyPut1) {",
                "+\t\t\t\tt.Errorf(\"#%d: resp.Events got = %s, want = %s\", i, resp.Events[0].Kv.Key, keyPut1)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// TestWatcherWatchWrongRange ensures that watcher with wrong 'end' range",
                "+// does not create watcher, which panics when canceling in range tree.",
                "+func TestWatcherWatchWrongRange(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := WatchableKV(newWatchableStore(b, &lease.FakeLessor{}, nil))",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tdefer w.Close()",
                "+",
                "+\tif _, err := w.Watch(0, []byte(\"foa\"), []byte(\"foa\"), 1); err != ErrEmptyWatcherRange {",
                "+\t\tt.Fatalf(\"key == end range given; expected ErrEmptyWatcherRange, got %+v\", err)",
                "+\t}",
                "+\tif _, err := w.Watch(0, []byte(\"fob\"), []byte(\"foa\"), 1); err != ErrEmptyWatcherRange {",
                "+\t\tt.Fatalf(\"key > end range given; expected ErrEmptyWatcherRange, got %+v\", err)",
                "+\t}",
                "+\t// watch request with 'WithFromKey' has empty-byte range end",
                "+\tif id, _ := w.Watch(0, []byte(\"foo\"), []byte{}, 1); id != 0 {",
                "+\t\tt.Fatalf(\"\\x00 is range given; id expected 0, got %d\", id)",
                "+\t}",
                "+}",
                "+",
                "+func TestWatchDeleteRange(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := newWatchableStore(b, &lease.FakeLessor{}, nil)",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+",
                "+\ttestKeyPrefix := []byte(\"foo\")",
                "+",
                "+\tfor i := 0; i < 3; i++ {",
                "+\t\ts.Put([]byte(fmt.Sprintf(\"%s_%d\", testKeyPrefix, i)), []byte(\"bar\"), lease.NoLease)",
                "+\t}",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tfrom, to := []byte(testKeyPrefix), []byte(fmt.Sprintf(\"%s_%d\", testKeyPrefix, 99))",
                "+\tw.Watch(0, from, to, 0)",
                "+",
                "+\ts.DeleteRange(from, to)",
                "+",
                "+\twe := []mvccpb.Event{",
                "+\t\t{Type: mvccpb.DELETE, Kv: &mvccpb.KeyValue{Key: []byte(\"foo_0\"), ModRevision: 5}},",
                "+\t\t{Type: mvccpb.DELETE, Kv: &mvccpb.KeyValue{Key: []byte(\"foo_1\"), ModRevision: 5}},",
                "+\t\t{Type: mvccpb.DELETE, Kv: &mvccpb.KeyValue{Key: []byte(\"foo_2\"), ModRevision: 5}},",
                "+\t}",
                "+",
                "+\tselect {",
                "+\tcase r := <-w.Chan():",
                "+\t\tif !reflect.DeepEqual(r.Events, we) {",
                "+\t\t\tt.Errorf(\"event = %v, want %v\", r.Events, we)",
                "+\t\t}",
                "+\tcase <-time.After(10 * time.Second):",
                "+\t\tt.Fatal(\"failed to receive event after 10 seconds!\")",
                "+\t}",
                "+}",
                "+",
                "+// TestWatchStreamCancelWatcherByID ensures cancel calls the cancel func of the watcher",
                "+// with given id inside watchStream.",
                "+func TestWatchStreamCancelWatcherByID(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := WatchableKV(newWatchableStore(b, &lease.FakeLessor{}, nil))",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tdefer w.Close()",
                "+",
                "+\tid, _ := w.Watch(0, []byte(\"foo\"), nil, 0)",
                "+",
                "+\ttests := []struct {",
                "+\t\tcancelID WatchID",
                "+\t\twerr     error",
                "+\t}{",
                "+\t\t// no error should be returned when cancel the created watcher.",
                "+\t\t{id, nil},",
                "+\t\t// not exist error should be returned when cancel again.",
                "+\t\t{id, ErrWatcherNotExist},",
                "+\t\t// not exist error should be returned when cancel a bad id.",
                "+\t\t{id + 1, ErrWatcherNotExist},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\tgerr := w.Cancel(tt.cancelID)",
                "+",
                "+\t\tif gerr != tt.werr {",
                "+\t\t\tt.Errorf(\"#%d: err = %v, want %v\", i, gerr, tt.werr)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif l := len(w.(*watchStream).cancels); l != 0 {",
                "+\t\tt.Errorf(\"cancels = %d, want 0\", l)",
                "+\t}",
                "+}",
                "+",
                "+// TestWatcherRequestProgress ensures synced watcher can correctly",
                "+// report its correct progress.",
                "+func TestWatcherRequestProgress(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+",
                "+\t// manually create watchableStore instead of newWatchableStore",
                "+\t// because newWatchableStore automatically calls syncWatchers",
                "+\t// method to sync watchers in unsynced map. We want to keep watchers",
                "+\t// in unsynced to test if syncWatchers works as expected.",
                "+\ts := &watchableStore{",
                "+\t\tstore:    NewStore(b, &lease.FakeLessor{}, nil),",
                "+\t\tunsynced: newWatcherGroup(),",
                "+\t\tsynced:   newWatcherGroup(),",
                "+\t}",
                "+",
                "+\tdefer func() {",
                "+\t\ts.store.Close()",
                "+\t\tos.Remove(tmpPath)",
                "+\t}()",
                "+",
                "+\ttestKey := []byte(\"foo\")",
                "+\tnotTestKey := []byte(\"bad\")",
                "+\ttestValue := []byte(\"bar\")",
                "+\ts.Put(testKey, testValue, lease.NoLease)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+",
                "+\tbadID := WatchID(1000)",
                "+\tw.RequestProgress(badID)",
                "+\tselect {",
                "+\tcase resp := <-w.Chan():",
                "+\t\tt.Fatalf(\"unexpected %+v\", resp)",
                "+\tdefault:",
                "+\t}",
                "+",
                "+\tid, _ := w.Watch(0, notTestKey, nil, 1)",
                "+\tw.RequestProgress(id)",
                "+\tselect {",
                "+\tcase resp := <-w.Chan():",
                "+\t\tt.Fatalf(\"unexpected %+v\", resp)",
                "+\tdefault:",
                "+\t}",
                "+",
                "+\ts.syncWatchers()",
                "+",
                "+\tw.RequestProgress(id)",
                "+\twrs := WatchResponse{WatchID: id, Revision: 2}",
                "+\tselect {",
                "+\tcase resp := <-w.Chan():",
                "+\t\tif !reflect.DeepEqual(resp, wrs) {",
                "+\t\t\tt.Fatalf(\"got %+v, expect %+v\", resp, wrs)",
                "+\t\t}",
                "+\tcase <-time.After(time.Second):",
                "+\t\tt.Fatal(\"failed to receive progress\")",
                "+\t}",
                "+}",
                "+",
                "+func TestWatcherWatchWithFilter(t *testing.T) {",
                "+\tb, tmpPath := backend.NewDefaultTmpBackend()",
                "+\ts := WatchableKV(newWatchableStore(b, &lease.FakeLessor{}, nil))",
                "+\tdefer cleanup(s, b, tmpPath)",
                "+",
                "+\tw := s.NewWatchStream()",
                "+\tdefer w.Close()",
                "+",
                "+\tfilterPut := func(e mvccpb.Event) bool {",
                "+\t\treturn e.Type == mvccpb.PUT",
                "+\t}",
                "+",
                "+\tw.Watch(0, []byte(\"foo\"), nil, 0, filterPut)",
                "+\tdone := make(chan struct{})",
                "+",
                "+\tgo func() {",
                "+\t\t<-w.Chan()",
                "+\t\tdone <- struct{}{}",
                "+\t}()",
                "+",
                "+\ts.Put([]byte(\"foo\"), []byte(\"bar\"), 0)",
                "+",
                "+\tselect {",
                "+\tcase <-done:",
                "+\t\tt.Fatal(\"failed to filter put request\")",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t}",
                "+",
                "+\ts.DeleteRange([]byte(\"foo\"), nil)",
                "+",
                "+\tselect {",
                "+\tcase <-done:",
                "+\tcase <-time.After(100 * time.Millisecond):",
                "+\t\tt.Fatal(\"failed to receive delete request\")",
                "+\t}",
                "+}",
                "diff --git a/proxy/grpcproxy/watcher.go b/proxy/grpcproxy/watcher.go",
                "index 0c56e56f6..1a497462f 100644",
                "--- a/proxy/grpcproxy/watcher.go",
                "+++ b/proxy/grpcproxy/watcher.go",
                "@@ -21,4 +21,4 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\"",
                " )",
                "diff --git a/snapshot/v3_snapshot.go b/snapshot/v3_snapshot.go",
                "index 417d855e1..a410a4453 100644",
                "--- a/snapshot/v3_snapshot.go",
                "+++ b/snapshot/v3_snapshot.go",
                "@@ -33,5 +33,5 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/v2store\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "diff --git a/tools/benchmark/cmd/mvcc.go b/tools/benchmark/cmd/mvcc.go",
                "index fc666dc32..3da8679b1 100644",
                "--- a/tools/benchmark/cmd/mvcc.go",
                "+++ b/tools/benchmark/cmd/mvcc.go",
                "@@ -20,5 +20,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                " \t\"github.com/coreos/etcd/lease\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "diff --git a/tools/etcd-dump-db/backend.go b/tools/etcd-dump-db/backend.go",
                "index e03caa6c9..3b3eb1e54 100644",
                "--- a/tools/etcd-dump-db/backend.go",
                "+++ b/tools/etcd-dump-db/backend.go",
                "@@ -21,6 +21,6 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/mvcc\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                " \t\"github.com/coreos/etcd/lease/leasepb\"",
                "+\t\"github.com/coreos/etcd/mvcc\"",
                "+\t\"github.com/coreos/etcd/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/mvcc/mvccpb\""
            ],
            "changed_files": [
                "alarm/alarms.go",
                "auth/range_perm_cache.go",
                "auth/store.go",
                "auth/store_test.go",
                "clientv3/concurrency/election.go",
                "clientv3/concurrency/key.go",
                "clientv3/integration/kv_test.go",
                "clientv3/integration/maintenance_test.go",
                "clientv3/integration/mirror_test.go",
                "clientv3/integration/namespace_test.go",
                "clientv3/integration/watch_test.go",
                "clientv3/leasing/cache.go",
                "clientv3/leasing/kv.go",
                "clientv3/watch.go",
                "clientv3/watch_test.go",
                "compactor/periodic.go",
                "compactor/revision.go",
                "contrib/recipes/barrier.go",
                "contrib/recipes/client.go",
                "contrib/recipes/double_barrier.go",
                "contrib/recipes/priority_queue.go",
                "contrib/recipes/queue.go",
                "contrib/recipes/rwmutex.go",
                "contrib/recipes/watch.go",
                "e2e/etcd_corrupt_test.go",
                "etcdctl/ctlv3/command/defrag_command.go",
                "etcdctl/ctlv3/command/make_mirror_command.go",
                "etcdctl/ctlv3/command/migrate_command.go",
                "etcdctl/ctlv3/command/printer_fields.go",
                "etcdctl/ctlv3/command/printer_protobuf.go",
                "etcdctl/ctlv3/command/util.go",
                "etcdserver/api/v2v3/store.go",
                "etcdserver/api/v3election/v3electionpb/v3election.pb.go",
                "etcdserver/api/v3rpc/maintenance.go",
                "etcdserver/api/v3rpc/util.go",
                "etcdserver/api/v3rpc/util_test.go",
                "etcdserver/api/v3rpc/watch.go",
                "etcdserver/apply.go",
                "etcdserver/apply_auth.go",
                "etcdserver/backend.go",
                "etcdserver/corrupt.go",
                "etcdserver/etcdserverpb/rpc.pb.go",
                "etcdserver/membership/cluster.go",
                "etcdserver/membership/store.go",
                "etcdserver/server.go",
                "etcdserver/server_test.go",
                "etcdserver/snapshot_merge.go",
                "etcdserver/v3_server.go",
                "integration/v3_alarm_test.go",
                "integration/v3_lease_test.go",
                "integration/v3_lock_test.go",
                "integration/v3_watch_test.go",
                "lease/leasehttp/http_test.go",
                "lease/lessor.go",
                "lease/lessor_test.go",
                "mvcc/backend/backend.go",
                "mvcc/backend/backend_bench_test.go",
                "mvcc/backend/backend_test.go",
                "mvcc/backend/batch_tx.go",
                "mvcc/backend/batch_tx_test.go",
                "mvcc/backend/config_default.go",
                "mvcc/backend/config_linux.go",
                "mvcc/backend/config_windows.go",
                "mvcc/backend/doc.go",
                "mvcc/backend/metrics.go",
                "mvcc/backend/read_tx.go",
                "mvcc/backend/tx_buffer.go",
                "mvcc/doc.go",
                "mvcc/index.go",
                "mvcc/index_test.go",
                "mvcc/key_index.go",
                "mvcc/key_index_test.go",
                "mvcc/kv.go",
                "mvcc/kv_test.go",
                "mvcc/kv_view.go",
                "mvcc/kvstore.go",
                "mvcc/kvstore_bench_test.go",
                "mvcc/kvstore_compaction.go",
                "mvcc/kvstore_compaction_test.go",
                "mvcc/kvstore_test.go",
                "mvcc/kvstore_txn.go",
                "mvcc/metrics.go",
                "mvcc/metrics_txn.go",
                "mvcc/mvccpb/kv.pb.go",
                "mvcc/mvccpb/kv.proto",
                "mvcc/revision.go",
                "mvcc/revision_test.go",
                "mvcc/util.go",
                "mvcc/watchable_store.go",
                "mvcc/watchable_store_bench_test.go",
                "mvcc/watchable_store_test.go",
                "mvcc/watchable_store_txn.go",
                "mvcc/watcher.go",
                "mvcc/watcher_bench_test.go",
                "mvcc/watcher_group.go",
                "mvcc/watcher_test.go",
                "proxy/grpcproxy/watcher.go",
                "snapshot/v3_snapshot.go",
                "tools/benchmark/cmd/mvcc.go",
                "tools/etcd-dump-db/backend.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d493cd3bbd90787e1ad8e44410deed5860594f4b",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519683297,
            "hunks": 2,
            "message": "etcdserver: fix proto import paths Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/api/v3election/v3electionpb/v3election.proto b/etcdserver/api/v3election/v3electionpb/v3election.proto",
                "index 647e6bbce..918f39fa8 100644",
                "--- a/etcdserver/api/v3election/v3electionpb/v3election.proto",
                "+++ b/etcdserver/api/v3election/v3electionpb/v3election.proto",
                "@@ -5,3 +5,3 @@ import \"gogoproto/gogo.proto\";",
                " import \"etcd/etcdserver/etcdserverpb/rpc.proto\";",
                "-import \"etcd/internal/mvcc/mvccpb/kv.proto\";",
                "+import \"etcd/mvcc/mvccpb/kv.proto\";",
                "diff --git a/etcdserver/etcdserverpb/rpc.proto b/etcdserver/etcdserverpb/rpc.proto",
                "index c6ed85976..ad52cd641 100644",
                "--- a/etcdserver/etcdserverpb/rpc.proto",
                "+++ b/etcdserver/etcdserverpb/rpc.proto",
                "@@ -4,4 +4,4 @@ package etcdserverpb;",
                " import \"gogoproto/gogo.proto\";",
                "-import \"etcd/internal/mvcc/mvccpb/kv.proto\";",
                "-import \"etcd/internal/auth/authpb/auth.proto\";",
                "+import \"etcd/mvcc/mvccpb/kv.proto\";",
                "+import \"etcd/auth/authpb/auth.proto\";"
            ],
            "changed_files": [
                "etcdserver/api/v3election/v3electionpb/v3election.proto",
                "etcdserver/etcdserverpb/rpc.proto"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bab0223f0441433470b9c4d10bc69998db288fca",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519668223,
            "hunks": 1,
            "message": "ctlv3: fix typo in check command Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdctl/ctlv3/command/check.go b/etcdctl/ctlv3/command/check.go",
                "index 204721f66..e347af295 100644",
                "--- a/etcdctl/ctlv3/command/check.go",
                "+++ b/etcdctl/ctlv3/command/check.go",
                "@@ -271,3 +271,3 @@ func NewCheckDatascaleCommand() *cobra.Command {",
                " \t\tUse:   \"datascale [options]\",",
                "-\t\tShort: \"Check the memory usage of holding data for diferent workloads on a given server endpoint.\",",
                "+\t\tShort: \"Check the memory usage of holding data for different workloads on a given server endpoint.\",",
                " \t\tLong:  \"If no endpoint is provided, localhost will be used. If multiple endpoints are provided, first endpoint will be used.\","
            ],
            "changed_files": [
                "etcdctl/ctlv3/command/check.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "41830ca523f7c740c338f53fcae0088e7954b794",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519759667,
            "hunks": 2,
            "message": "semaphore: update Go, release test version",
            "diff": [
                "diff --git a/.semaphore.sh b/.semaphore.sh",
                "index 1a6c85a62..45d4bc9e8 100755",
                "--- a/.semaphore.sh",
                "+++ b/.semaphore.sh",
                "@@ -4,3 +4,3 @@ TEST_SUFFIX=$(date +%s | base64 | head -c 15)",
                "-TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.2.11\"",
                "+TEST_OPTS=\"RELEASE_TEST=y INTEGRATION=y PASSES='build unit release integration_e2e functional' MANUAL_VER=v3.2.16\"",
                " if [ \"$TEST_ARCH\" == \"386\" ]; then",
                "@@ -12,3 +12,3 @@ docker run \\",
                " \t--volume=`pwd`:/go/src/github.com/coreos/etcd \\",
                "-\tgcr.io/etcd-development/etcd-test:go1.8.5 \\",
                "+\tgcr.io/etcd-development/etcd-test:go1.8.7 \\",
                " \t/bin/bash -c \"${TEST_OPTS} ./test 2>&1 | tee test-${TEST_SUFFIX}.log\""
            ],
            "changed_files": [
                ".semaphore.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9c9d846959ba1e4a0f17221806261ffbc1cdb4f1",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519668324,
            "hunks": 2,
            "message": "clientv3util: fix govet warning Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/clientv3/clientv3util/example_key_test.go b/clientv3/clientv3util/example_key_test.go",
                "index 8b30ae5c8..48b20c732 100644",
                "--- a/clientv3/clientv3util/example_key_test.go",
                "+++ b/clientv3/clientv3util/example_key_test.go",
                "@@ -24,3 +24,3 @@ import (",
                "-func ExampleKeyExists_put() {",
                "+func ExampleKeyMissing() {",
                " \tcli, err := clientv3.New(clientv3.Config{",
                "@@ -47,3 +47,3 @@ func ExampleKeyExists_put() {",
                "-func ExampleKeyExists_delete() {",
                "+func ExampleKeyExists() {",
                " \tcli, err := clientv3.New(clientv3.Config{"
            ],
            "changed_files": [
                "clientv3/clientv3util/example_key_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e42c2b7bd2382b7ebc435e1586abebac243b7791",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519694997,
            "hunks": 1,
            "message": "tools/etcd-test-proxy: godoc Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/tools/etcd-test-proxy/main.go b/tools/etcd-test-proxy/main.go",
                "index 18b8cdcde..bc0023a9a 100644",
                "--- a/tools/etcd-test-proxy/main.go",
                "+++ b/tools/etcd-test-proxy/main.go",
                "@@ -14,2 +14,3 @@",
                "+// etcd-test-proxy is a proxy layer that simulates various network conditions.",
                " package main"
            ],
            "changed_files": [
                "tools/etcd-test-proxy/main.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fb828d103714802cfec22ea49d2427481f0ceca0",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519773722,
            "hunks": 1,
            "message": "hack/scripts-dev: add \"clean-docker\" to Makefile Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/Makefile b/hack/scripts-dev/Makefile",
                "index 12f2729b1..2df1c35f4 100644",
                "--- a/hack/scripts-dev/Makefile",
                "+++ b/hack/scripts-dev/Makefile",
                "@@ -27,2 +27,6 @@ clean:",
                "+clean-docker:",
                "+\tdocker images",
                "+\tdocker image prune --force",
                "+"
            ],
            "changed_files": [
                "hack/scripts-dev/Makefile"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bb95d190c1ec481011004c3a581e2fea062de5d9",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519670310,
            "hunks": 33,
            "message": "*: revert \"internal/auth\" change Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/auth/authpb/auth.pb.go b/auth/authpb/auth.pb.go",
                "new file mode 100644",
                "index 000000000..1a940c39b",
                "--- /dev/null",
                "+++ b/auth/authpb/auth.pb.go",
                "@@ -0,0 +1,807 @@",
                "+// Code generated by protoc-gen-gogo. DO NOT EDIT.",
                "+// source: auth.proto",
                "+",
                "+/*",
                "+\tPackage authpb is a generated protocol buffer package.",
                "+",
                "+\tIt is generated from these files:",
                "+\t\tauth.proto",
                "+",
                "+\tIt has these top-level messages:",
                "+\t\tUser",
                "+\t\tPermission",
                "+\t\tRole",
                "+*/",
                "+package authpb",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+",
                "+\tproto \"github.com/golang/protobuf/proto\"",
                "+",
                "+\tmath \"math\"",
                "+",
                "+\t_ \"github.com/gogo/protobuf/gogoproto\"",
                "+",
                "+\tio \"io\"",
                "+)",
                "+",
                "+// Reference imports to suppress errors if they are not otherwise used.",
                "+var _ = proto.Marshal",
                "+var _ = fmt.Errorf",
                "+var _ = math.Inf",
                "+",
                "+// This is a compile-time assertion to ensure that this generated file",
                "+// is compatible with the proto package it is being compiled against.",
                "+// A compilation error at this line likely means your copy of the",
                "+// proto package needs to be updated.",
                "+const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package",
                "+",
                "+type Permission_Type int32",
                "+",
                "+const (",
                "+\tREAD      Permission_Type = 0",
                "+\tWRITE     Permission_Type = 1",
                "+\tREADWRITE Permission_Type = 2",
                "+)",
                "+",
                "+var Permission_Type_name = map[int32]string{",
                "+\t0: \"READ\",",
                "+\t1: \"WRITE\",",
                "+\t2: \"READWRITE\",",
                "+}",
                "+var Permission_Type_value = map[string]int32{",
                "+\t\"READ\":      0,",
                "+\t\"WRITE\":     1,",
                "+\t\"READWRITE\": 2,",
                "+}",
                "+",
                "+func (x Permission_Type) String() string {",
                "+\treturn proto.EnumName(Permission_Type_name, int32(x))",
                "+}",
                "+func (Permission_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorAuth, []int{1, 0} }",
                "+",
                "+// User is a single entry in the bucket authUsers",
                "+type User struct {",
                "+\tName     []byte   `protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\"`",
                "+\tPassword []byte   `protobuf:\"bytes,2,opt,name=password,proto3\" json:\"password,omitempty\"`",
                "+\tRoles    []string `protobuf:\"bytes,3,rep,name=roles\" json:\"roles,omitempty\"`",
                "+}",
                "+",
                "+func (m *User) Reset()                    { *m = User{} }",
                "+func (m *User) String() string            { return proto.CompactTextString(m) }",
                "+func (*User) ProtoMessage()               {}",
                "+func (*User) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0} }",
                "+",
                "+// Permission is a single entity",
                "+type Permission struct {",
                "+\tPermType Permission_Type `protobuf:\"varint,1,opt,name=permType,proto3,enum=authpb.Permission_Type\" json:\"permType,omitempty\"`",
                "+\tKey      []byte          `protobuf:\"bytes,2,opt,name=key,proto3\" json:\"key,omitempty\"`",
                "+\tRangeEnd []byte          `protobuf:\"bytes,3,opt,name=range_end,json=rangeEnd,proto3\" json:\"range_end,omitempty\"`",
                "+}",
                "+",
                "+func (m *Permission) Reset()                    { *m = Permission{} }",
                "+func (m *Permission) String() string            { return proto.CompactTextString(m) }",
                "+func (*Permission) ProtoMessage()               {}",
                "+func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{1} }",
                "+",
                "+// Role is a single entry in the bucket authRoles",
                "+type Role struct {",
                "+\tName          []byte        `protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\"`",
                "+\tKeyPermission []*Permission `protobuf:\"bytes,2,rep,name=keyPermission\" json:\"keyPermission,omitempty\"`",
                "+}",
                "+",
                "+func (m *Role) Reset()                    { *m = Role{} }",
                "+func (m *Role) String() string            { return proto.CompactTextString(m) }",
                "+func (*Role) ProtoMessage()               {}",
                "+func (*Role) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{2} }",
                "+",
                "+func init() {",
                "+\tproto.RegisterType((*User)(nil), \"authpb.User\")",
                "+\tproto.RegisterType((*Permission)(nil), \"authpb.Permission\")",
                "+\tproto.RegisterType((*Role)(nil), \"authpb.Role\")",
                "+\tproto.RegisterEnum(\"authpb.Permission_Type\", Permission_Type_name, Permission_Type_value)",
                "+}",
                "+func (m *User) Marshal() (dAtA []byte, err error) {",
                "+\tsize := m.Size()",
                "+\tdAtA = make([]byte, size)",
                "+\tn, err := m.MarshalTo(dAtA)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn dAtA[:n], nil",
                "+}",
                "+",
                "+func (m *User) MarshalTo(dAtA []byte) (int, error) {",
                "+\tvar i int",
                "+\t_ = i",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif len(m.Name) > 0 {",
                "+\t\tdAtA[i] = 0xa",
                "+\t\ti++",
                "+\t\ti = encodeVarintAuth(dAtA, i, uint64(len(m.Name)))",
                "+\t\ti += copy(dAtA[i:], m.Name)",
                "+\t}",
                "+\tif len(m.Password) > 0 {",
                "+\t\tdAtA[i] = 0x12",
                "+\t\ti++",
                "+\t\ti = encodeVarintAuth(dAtA, i, uint64(len(m.Password)))",
                "+\t\ti += copy(dAtA[i:], m.Password)",
                "+\t}",
                "+\tif len(m.Roles) > 0 {",
                "+\t\tfor _, s := range m.Roles {",
                "+\t\t\tdAtA[i] = 0x1a",
                "+\t\t\ti++",
                "+\t\t\tl = len(s)",
                "+\t\t\tfor l >= 1<<7 {",
                "+\t\t\t\tdAtA[i] = uint8(uint64(l)&0x7f | 0x80)",
                "+\t\t\t\tl >>= 7",
                "+\t\t\t\ti++",
                "+\t\t\t}",
                "+\t\t\tdAtA[i] = uint8(l)",
                "+\t\t\ti++",
                "+\t\t\ti += copy(dAtA[i:], s)",
                "+\t\t}",
                "+\t}",
                "+\treturn i, nil",
                "+}",
                "+",
                "+func (m *Permission) Marshal() (dAtA []byte, err error) {",
                "+\tsize := m.Size()",
                "+\tdAtA = make([]byte, size)",
                "+\tn, err := m.MarshalTo(dAtA)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn dAtA[:n], nil",
                "+}",
                "+",
                "+func (m *Permission) MarshalTo(dAtA []byte) (int, error) {",
                "+\tvar i int",
                "+\t_ = i",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.PermType != 0 {",
                "+\t\tdAtA[i] = 0x8",
                "+\t\ti++",
                "+\t\ti = encodeVarintAuth(dAtA, i, uint64(m.PermType))",
                "+\t}",
                "+\tif len(m.Key) > 0 {",
                "+\t\tdAtA[i] = 0x12",
                "+\t\ti++",
                "+\t\ti = encodeVarintAuth(dAtA, i, uint64(len(m.Key)))",
                "+\t\ti += copy(dAtA[i:], m.Key)",
                "+\t}",
                "+\tif len(m.RangeEnd) > 0 {",
                "+\t\tdAtA[i] = 0x1a",
                "+\t\ti++",
                "+\t\ti = encodeVarintAuth(dAtA, i, uint64(len(m.RangeEnd)))",
                "+\t\ti += copy(dAtA[i:], m.RangeEnd)",
                "+\t}",
                "+\treturn i, nil",
                "+}",
                "+",
                "+func (m *Role) Marshal() (dAtA []byte, err error) {",
                "+\tsize := m.Size()",
                "+\tdAtA = make([]byte, size)",
                "+\tn, err := m.MarshalTo(dAtA)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\treturn dAtA[:n], nil",
                "+}",
                "+",
                "+func (m *Role) MarshalTo(dAtA []byte) (int, error) {",
                "+\tvar i int",
                "+\t_ = i",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif len(m.Name) > 0 {",
                "+\t\tdAtA[i] = 0xa",
                "+\t\ti++",
                "+\t\ti = encodeVarintAuth(dAtA, i, uint64(len(m.Name)))",
                "+\t\ti += copy(dAtA[i:], m.Name)",
                "+\t}",
                "+\tif len(m.KeyPermission) > 0 {",
                "+\t\tfor _, msg := range m.KeyPermission {",
                "+\t\t\tdAtA[i] = 0x12",
                "+\t\t\ti++",
                "+\t\t\ti = encodeVarintAuth(dAtA, i, uint64(msg.Size()))",
                "+\t\t\tn, err := msg.MarshalTo(dAtA[i:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn 0, err",
                "+\t\t\t}",
                "+\t\t\ti += n",
                "+\t\t}",
                "+\t}",
                "+\treturn i, nil",
                "+}",
                "+",
                "+func encodeVarintAuth(dAtA []byte, offset int, v uint64) int {",
                "+\tfor v >= 1<<7 {",
                "+\t\tdAtA[offset] = uint8(v&0x7f | 0x80)",
                "+\t\tv >>= 7",
                "+\t\toffset++",
                "+\t}",
                "+\tdAtA[offset] = uint8(v)",
                "+\treturn offset + 1",
                "+}",
                "+func (m *User) Size() (n int) {",
                "+\tvar l int",
                "+\t_ = l",
                "+\tl = len(m.Name)",
                "+\tif l > 0 {",
                "+\t\tn += 1 + l + sovAuth(uint64(l))",
                "+\t}",
                "+\tl = len(m.Password)",
                "+\tif l > 0 {",
                "+\t\tn += 1 + l + sovAuth(uint64(l))",
                "+\t}",
                "+\tif len(m.Roles) > 0 {",
                "+\t\tfor _, s := range m.Roles {",
                "+\t\t\tl = len(s)",
                "+\t\t\tn += 1 + l + sovAuth(uint64(l))",
                "+\t\t}",
                "+\t}",
                "+\treturn n",
                "+}",
                "+",
                "+func (m *Permission) Size() (n int) {",
                "+\tvar l int",
                "+\t_ = l",
                "+\tif m.PermType != 0 {",
                "+\t\tn += 1 + sovAuth(uint64(m.PermType))",
                "+\t}",
                "+\tl = len(m.Key)",
                "+\tif l > 0 {",
                "+\t\tn += 1 + l + sovAuth(uint64(l))",
                "+\t}",
                "+\tl = len(m.RangeEnd)",
                "+\tif l > 0 {",
                "+\t\tn += 1 + l + sovAuth(uint64(l))",
                "+\t}",
                "+\treturn n",
                "+}",
                "+",
                "+func (m *Role) Size() (n int) {",
                "+\tvar l int",
                "+\t_ = l",
                "+\tl = len(m.Name)",
                "+\tif l > 0 {",
                "+\t\tn += 1 + l + sovAuth(uint64(l))",
                "+\t}",
                "+\tif len(m.KeyPermission) > 0 {",
                "+\t\tfor _, e := range m.KeyPermission {",
                "+\t\t\tl = e.Size()",
                "+\t\t\tn += 1 + l + sovAuth(uint64(l))",
                "+\t\t}",
                "+\t}",
                "+\treturn n",
                "+}",
                "+",
                "+func sovAuth(x uint64) (n int) {",
                "+\tfor {",
                "+\t\tn++",
                "+\t\tx >>= 7",
                "+\t\tif x == 0 {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t}",
                "+\treturn n",
                "+}",
                "+func sozAuth(x uint64) (n int) {",
                "+\treturn sovAuth(uint64((x << 1) ^ uint64((int64(x) >> 63))))",
                "+}",
                "+func (m *User) Unmarshal(dAtA []byte) error {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tpreIndex := iNdEx",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfieldNum := int32(wire >> 3)",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tif wireType == 4 {",
                "+\t\t\treturn fmt.Errorf(\"proto: User: wiretype end group for non-group\")",
                "+\t\t}",
                "+\t\tif fieldNum <= 0 {",
                "+\t\t\treturn fmt.Errorf(\"proto: User: illegal tag %d (wire type %d)\", fieldNum, wire)",
                "+\t\t}",
                "+\t\tswitch fieldNum {",
                "+\t\tcase 1:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar byteLen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tbyteLen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif byteLen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + byteLen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)",
                "+\t\t\tif m.Name == nil {",
                "+\t\t\t\tm.Name = []byte{}",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tcase 2:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Password\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar byteLen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tbyteLen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif byteLen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + byteLen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.Password = append(m.Password[:0], dAtA[iNdEx:postIndex]...)",
                "+\t\t\tif m.Password == nil {",
                "+\t\t\t\tm.Password = []byte{}",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tcase 3:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Roles\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar stringLen uint64",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tstringLen |= (uint64(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tintStringLen := int(stringLen)",
                "+\t\t\tif intStringLen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + intStringLen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tdefault:",
                "+\t\t\tiNdEx = preIndex",
                "+\t\t\tskippy, err := skipAuth(dAtA[iNdEx:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tif skippy < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tif (iNdEx + skippy) > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tiNdEx += skippy",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif iNdEx > l {",
                "+\t\treturn io.ErrUnexpectedEOF",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+func (m *Permission) Unmarshal(dAtA []byte) error {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tpreIndex := iNdEx",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfieldNum := int32(wire >> 3)",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tif wireType == 4 {",
                "+\t\t\treturn fmt.Errorf(\"proto: Permission: wiretype end group for non-group\")",
                "+\t\t}",
                "+\t\tif fieldNum <= 0 {",
                "+\t\t\treturn fmt.Errorf(\"proto: Permission: illegal tag %d (wire type %d)\", fieldNum, wire)",
                "+\t\t}",
                "+\t\tswitch fieldNum {",
                "+\t\tcase 1:",
                "+\t\t\tif wireType != 0 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field PermType\", wireType)",
                "+\t\t\t}",
                "+\t\t\tm.PermType = 0",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tm.PermType |= (Permission_Type(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\tcase 2:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Key\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar byteLen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tbyteLen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif byteLen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + byteLen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)",
                "+\t\t\tif m.Key == nil {",
                "+\t\t\t\tm.Key = []byte{}",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tcase 3:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field RangeEnd\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar byteLen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tbyteLen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif byteLen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + byteLen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.RangeEnd = append(m.RangeEnd[:0], dAtA[iNdEx:postIndex]...)",
                "+\t\t\tif m.RangeEnd == nil {",
                "+\t\t\t\tm.RangeEnd = []byte{}",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tdefault:",
                "+\t\t\tiNdEx = preIndex",
                "+\t\t\tskippy, err := skipAuth(dAtA[iNdEx:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tif skippy < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tif (iNdEx + skippy) > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tiNdEx += skippy",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif iNdEx > l {",
                "+\t\treturn io.ErrUnexpectedEOF",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+func (m *Role) Unmarshal(dAtA []byte) error {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tpreIndex := iNdEx",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\tfieldNum := int32(wire >> 3)",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tif wireType == 4 {",
                "+\t\t\treturn fmt.Errorf(\"proto: Role: wiretype end group for non-group\")",
                "+\t\t}",
                "+\t\tif fieldNum <= 0 {",
                "+\t\t\treturn fmt.Errorf(\"proto: Role: illegal tag %d (wire type %d)\", fieldNum, wire)",
                "+\t\t}",
                "+\t\tswitch fieldNum {",
                "+\t\tcase 1:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar byteLen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tbyteLen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif byteLen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + byteLen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)",
                "+\t\t\tif m.Name == nil {",
                "+\t\t\t\tm.Name = []byte{}",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tcase 2:",
                "+\t\t\tif wireType != 2 {",
                "+\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field KeyPermission\", wireType)",
                "+\t\t\t}",
                "+\t\t\tvar msglen int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tmsglen |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tif msglen < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tpostIndex := iNdEx + msglen",
                "+\t\t\tif postIndex > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tm.KeyPermission = append(m.KeyPermission, &Permission{})",
                "+\t\t\tif err := m.KeyPermission[len(m.KeyPermission)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tiNdEx = postIndex",
                "+\t\tdefault:",
                "+\t\t\tiNdEx = preIndex",
                "+\t\t\tskippy, err := skipAuth(dAtA[iNdEx:])",
                "+\t\t\tif err != nil {",
                "+\t\t\t\treturn err",
                "+\t\t\t}",
                "+\t\t\tif skippy < 0 {",
                "+\t\t\t\treturn ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\tif (iNdEx + skippy) > l {",
                "+\t\t\t\treturn io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tiNdEx += skippy",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif iNdEx > l {",
                "+\t\treturn io.ErrUnexpectedEOF",
                "+\t}",
                "+\treturn nil",
                "+}",
                "+func skipAuth(dAtA []byte) (n int, err error) {",
                "+\tl := len(dAtA)",
                "+\tiNdEx := 0",
                "+\tfor iNdEx < l {",
                "+\t\tvar wire uint64",
                "+\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\tif shift >= 64 {",
                "+\t\t\t\treturn 0, ErrIntOverflowAuth",
                "+\t\t\t}",
                "+\t\t\tif iNdEx >= l {",
                "+\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t}",
                "+\t\t\tb := dAtA[iNdEx]",
                "+\t\t\tiNdEx++",
                "+\t\t\twire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\tif b < 0x80 {",
                "+\t\t\t\tbreak",
                "+\t\t\t}",
                "+\t\t}",
                "+\t\twireType := int(wire & 0x7)",
                "+\t\tswitch wireType {",
                "+\t\tcase 0:",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn 0, ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tif dAtA[iNdEx-1] < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 1:",
                "+\t\t\tiNdEx += 8",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 2:",
                "+\t\t\tvar length int",
                "+\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\treturn 0, ErrIntOverflowAuth",
                "+\t\t\t\t}",
                "+\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t}",
                "+\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\tiNdEx++",
                "+\t\t\t\tlength |= (int(b) & 0x7F) << shift",
                "+\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tiNdEx += length",
                "+\t\t\tif length < 0 {",
                "+\t\t\t\treturn 0, ErrInvalidLengthAuth",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 3:",
                "+\t\t\tfor {",
                "+\t\t\t\tvar innerWire uint64",
                "+\t\t\t\tvar start int = iNdEx",
                "+\t\t\t\tfor shift := uint(0); ; shift += 7 {",
                "+\t\t\t\t\tif shift >= 64 {",
                "+\t\t\t\t\t\treturn 0, ErrIntOverflowAuth",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tif iNdEx >= l {",
                "+\t\t\t\t\t\treturn 0, io.ErrUnexpectedEOF",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tb := dAtA[iNdEx]",
                "+\t\t\t\t\tiNdEx++",
                "+\t\t\t\t\tinnerWire |= (uint64(b) & 0x7F) << shift",
                "+\t\t\t\t\tif b < 0x80 {",
                "+\t\t\t\t\t\tbreak",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\tinnerWireType := int(innerWire & 0x7)",
                "+\t\t\t\tif innerWireType == 4 {",
                "+\t\t\t\t\tbreak",
                "+\t\t\t\t}",
                "+\t\t\t\tnext, err := skipAuth(dAtA[start:])",
                "+\t\t\t\tif err != nil {",
                "+\t\t\t\t\treturn 0, err",
                "+\t\t\t\t}",
                "+\t\t\t\tiNdEx = start + next",
                "+\t\t\t}",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 4:",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tcase 5:",
                "+\t\t\tiNdEx += 4",
                "+\t\t\treturn iNdEx, nil",
                "+\t\tdefault:",
                "+\t\t\treturn 0, fmt.Errorf(\"proto: illegal wireType %d\", wireType)",
                "+\t\t}",
                "+\t}",
                "+\tpanic(\"unreachable\")",
                "+}",
                "+",
                "+var (",
                "+\tErrInvalidLengthAuth = fmt.Errorf(\"proto: negative length found during unmarshaling\")",
                "+\tErrIntOverflowAuth   = fmt.Errorf(\"proto: integer overflow\")",
                "+)",
                "+",
                "+func init() { proto.RegisterFile(\"auth.proto\", fileDescriptorAuth) }",
                "+",
                "+var fileDescriptorAuth = []byte{",
                "+\t// 288 bytes of a gzipped FileDescriptorProto",
                "+\t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,",
                "+\t0x1c, 0xc6, 0x9b, 0xb6, 0x1b, 0xed, 0x5f, 0x27, 0x25, 0x0c, 0x0c, 0x13, 0x42, 0xe9, 0xa9, 0x78,",
                "+\t0xa8, 0xb0, 0x5d, 0xbc, 0x2a, 0xf6, 0x20, 0x78, 0x90, 0x50, 0xf1, 0x28, 0x1d, 0x0d, 0x75, 0x6c,",
                "+\t0x6d, 0x4a, 0x32, 0x91, 0xbe, 0x89, 0x07, 0x1f, 0x68, 0xc7, 0x3d, 0x82, 0xab, 0x2f, 0x22, 0x4d,",
                "+\t0x64, 0x43, 0xdc, 0xed, 0xfb, 0xbe, 0xff, 0x97, 0xe4, 0x97, 0x3f, 0x40, 0xfe, 0xb6, 0x7e, 0x4d,",
                "+\t0x1a, 0x29, 0xd6, 0x02, 0x0f, 0x7b, 0xdd, 0xcc, 0x27, 0xe3, 0x52, 0x94, 0x42, 0x47, 0x57, 0xbd,",
                "+\t0x32, 0xd3, 0xe8, 0x01, 0xdc, 0x27, 0xc5, 0x25, 0xc6, 0xe0, 0xd6, 0x79, 0xc5, 0x09, 0x0a, 0x51,",
                "+\t0x7c, 0xca, 0xb4, 0xc6, 0x13, 0xf0, 0x9a, 0x5c, 0xa9, 0x77, 0x21, 0x0b, 0x62, 0xeb, 0x7c, 0xef,",
                "+\t0xf1, 0x18, 0x06, 0x52, 0xac, 0xb8, 0x22, 0x4e, 0xe8, 0xc4, 0x3e, 0x33, 0x26, 0xfa, 0x44, 0x00,",
                "+\t0x8f, 0x5c, 0x56, 0x0b, 0xa5, 0x16, 0xa2, 0xc6, 0x33, 0xf0, 0x1a, 0x2e, 0xab, 0xac, 0x6d, 0xcc,",
                "+\t0xc5, 0x67, 0xd3, 0xf3, 0xc4, 0xd0, 0x24, 0x87, 0x56, 0xd2, 0x8f, 0xd9, 0xbe, 0x88, 0x03, 0x70,",
                "+\t0x96, 0xbc, 0xfd, 0x7d, 0xb0, 0x97, 0xf8, 0x02, 0x7c, 0x99, 0xd7, 0x25, 0x7f, 0xe1, 0x75, 0x41,",
                "+\t0x1c, 0x03, 0xa2, 0x83, 0xb4, 0x2e, 0xa2, 0x4b, 0x70, 0xf5, 0x31, 0x0f, 0x5c, 0x96, 0xde, 0xdc,",
                "+\t0x05, 0x16, 0xf6, 0x61, 0xf0, 0xcc, 0xee, 0xb3, 0x34, 0x40, 0x78, 0x04, 0x7e, 0x1f, 0x1a, 0x6b,",
                "+\t0x47, 0x19, 0xb8, 0x4c, 0xac, 0xf8, 0xd1, 0xcf, 0x5e, 0xc3, 0x68, 0xc9, 0xdb, 0x03, 0x16, 0xb1,",
                "+\t0x43, 0x27, 0x3e, 0x99, 0xe2, 0xff, 0xc0, 0xec, 0x6f, 0xf1, 0x96, 0x6c, 0x76, 0xd4, 0xda, 0xee,",
                "+\t0xa8, 0xb5, 0xe9, 0x28, 0xda, 0x76, 0x14, 0x7d, 0x75, 0x14, 0x7d, 0x7c, 0x53, 0x6b, 0x3e, 0xd4,",
                "+\t0x3b, 0x9e, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x76, 0x8d, 0x4f, 0x8f, 0x01, 0x00, 0x00,",
                "+}",
                "diff --git a/auth/authpb/auth.proto b/auth/authpb/auth.proto",
                "new file mode 100644",
                "index 000000000..001d33435",
                "--- /dev/null",
                "+++ b/auth/authpb/auth.proto",
                "@@ -0,0 +1,37 @@",
                "+syntax = \"proto3\";",
                "+package authpb;",
                "+",
                "+import \"gogoproto/gogo.proto\";",
                "+",
                "+option (gogoproto.marshaler_all) = true;",
                "+option (gogoproto.sizer_all) = true;",
                "+option (gogoproto.unmarshaler_all) = true;",
                "+option (gogoproto.goproto_getters_all) = false;",
                "+option (gogoproto.goproto_enum_prefix_all) = false;",
                "+",
                "+// User is a single entry in the bucket authUsers",
                "+message User {",
                "+  bytes name = 1;",
                "+  bytes password = 2;",
                "+  repeated string roles = 3;",
                "+}",
                "+",
                "+// Permission is a single entity",
                "+message Permission {",
                "+  enum Type {",
                "+    READ = 0;",
                "+    WRITE = 1;",
                "+    READWRITE = 2;",
                "+  }",
                "+  Type permType = 1;",
                "+",
                "+  bytes key = 2;",
                "+  bytes range_end = 3;",
                "+}",
                "+",
                "+// Role is a single entry in the bucket authRoles",
                "+message Role {",
                "+  bytes name = 1;",
                "+",
                "+  repeated Permission keyPermission = 2;",
                "+}",
                "diff --git a/auth/doc.go b/auth/doc.go",
                "new file mode 100644",
                "index 000000000..72741a107",
                "--- /dev/null",
                "+++ b/auth/doc.go",
                "@@ -0,0 +1,16 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package auth provides client role authentication for accessing keys in etcd.",
                "+package auth",
                "diff --git a/auth/jwt.go b/auth/jwt.go",
                "new file mode 100644",
                "index 000000000..99b2d6b5c",
                "--- /dev/null",
                "+++ b/auth/jwt.go",
                "@@ -0,0 +1,139 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package auth",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"crypto/rsa\"",
                "+\t\"io/ioutil\"",
                "+",
                "+\tjwt \"github.com/dgrijalva/jwt-go\"",
                "+)",
                "+",
                "+type tokenJWT struct {",
                "+\tsignMethod string",
                "+\tsignKey    *rsa.PrivateKey",
                "+\tverifyKey  *rsa.PublicKey",
                "+}",
                "+",
                "+func (t *tokenJWT) enable()                         {}",
                "+func (t *tokenJWT) disable()                        {}",
                "+func (t *tokenJWT) invalidateUser(string)           {}",
                "+func (t *tokenJWT) genTokenPrefix() (string, error) { return \"\", nil }",
                "+",
                "+func (t *tokenJWT) info(ctx context.Context, token string, rev uint64) (*AuthInfo, bool) {",
                "+\t// rev isn't used in JWT, it is only used in simple token",
                "+\tvar (",
                "+\t\tusername string",
                "+\t\trevision uint64",
                "+\t)",
                "+",
                "+\tparsed, err := jwt.Parse(token, func(token *jwt.Token) (interface{}, error) {",
                "+\t\treturn t.verifyKey, nil",
                "+\t})",
                "+",
                "+\tswitch err.(type) {",
                "+\tcase nil:",
                "+\t\tif !parsed.Valid {",
                "+\t\t\tplog.Warningf(\"invalid jwt token: %s\", token)",
                "+\t\t\treturn nil, false",
                "+\t\t}",
                "+",
                "+\t\tclaims := parsed.Claims.(jwt.MapClaims)",
                "+",
                "+\t\tusername = claims[\"username\"].(string)",
                "+\t\trevision = uint64(claims[\"revision\"].(float64))",
                "+\tdefault:",
                "+\t\tplog.Warningf(\"failed to parse jwt token: %s\", err)",
                "+\t\treturn nil, false",
                "+\t}",
                "+",
                "+\treturn &AuthInfo{Username: username, Revision: revision}, true",
                "+}",
                "+",
                "+func (t *tokenJWT) assign(ctx context.Context, username string, revision uint64) (string, error) {",
                "+\t// Future work: let a jwt token include permission information would be useful for",
                "+\t// permission checking in proxy side.",
                "+\ttk := jwt.NewWithClaims(jwt.GetSigningMethod(t.signMethod),",
                "+\t\tjwt.MapClaims{",
                "+\t\t\t\"username\": username,",
                "+\t\t\t\"revision\": revision,",
                "+\t\t})",
                "+",
                "+\ttoken, err := tk.SignedString(t.signKey)",
                "+\tif err != nil {",
                "+\t\tplog.Debugf(\"failed to sign jwt token: %s\", err)",
                "+\t\treturn \"\", err",
                "+\t}",
                "+",
                "+\tplog.Debugf(\"jwt token: %s\", token)",
                "+",
                "+\treturn token, err",
                "+}",
                "+",
                "+func prepareOpts(opts map[string]string) (jwtSignMethod, jwtPubKeyPath, jwtPrivKeyPath string, err error) {",
                "+\tfor k, v := range opts {",
                "+\t\tswitch k {",
                "+\t\tcase \"sign-method\":",
                "+\t\t\tjwtSignMethod = v",
                "+\t\tcase \"pub-key\":",
                "+\t\t\tjwtPubKeyPath = v",
                "+\t\tcase \"priv-key\":",
                "+\t\t\tjwtPrivKeyPath = v",
                "+\t\tdefault:",
                "+\t\t\tplog.Errorf(\"unknown token specific option: %s\", k)",
                "+\t\t\treturn \"\", \"\", \"\", ErrInvalidAuthOpts",
                "+\t\t}",
                "+\t}",
                "+\tif len(jwtSignMethod) == 0 {",
                "+\t\treturn \"\", \"\", \"\", ErrInvalidAuthOpts",
                "+\t}",
                "+\treturn jwtSignMethod, jwtPubKeyPath, jwtPrivKeyPath, nil",
                "+}",
                "+",
                "+func newTokenProviderJWT(opts map[string]string) (*tokenJWT, error) {",
                "+\tjwtSignMethod, jwtPubKeyPath, jwtPrivKeyPath, err := prepareOpts(opts)",
                "+\tif err != nil {",
                "+\t\treturn nil, ErrInvalidAuthOpts",
                "+\t}",
                "+",
                "+\tt := &tokenJWT{}",
                "+",
                "+\tt.signMethod = jwtSignMethod",
                "+",
                "+\tverifyBytes, err := ioutil.ReadFile(jwtPubKeyPath)",
                "+\tif err != nil {",
                "+\t\tplog.Errorf(\"failed to read public key (%s) for jwt: %s\", jwtPubKeyPath, err)",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tt.verifyKey, err = jwt.ParseRSAPublicKeyFromPEM(verifyBytes)",
                "+\tif err != nil {",
                "+\t\tplog.Errorf(\"failed to parse public key (%s): %s\", jwtPubKeyPath, err)",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tsignBytes, err := ioutil.ReadFile(jwtPrivKeyPath)",
                "+\tif err != nil {",
                "+\t\tplog.Errorf(\"failed to read private key (%s) for jwt: %s\", jwtPrivKeyPath, err)",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tt.signKey, err = jwt.ParseRSAPrivateKeyFromPEM(signBytes)",
                "+\tif err != nil {",
                "+\t\tplog.Errorf(\"failed to parse private key (%s): %s\", jwtPrivKeyPath, err)",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\treturn t, nil",
                "+}",
                "diff --git a/auth/jwt_test.go b/auth/jwt_test.go",
                "new file mode 100644",
                "index 000000000..35e11dee2",
                "--- /dev/null",
                "+++ b/auth/jwt_test.go",
                "@@ -0,0 +1,94 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package auth",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"testing\"",
                "+)",
                "+",
                "+const (",
                "+\tjwtPubKey  = \"../integration/fixtures/server.crt\"",
                "+\tjwtPrivKey = \"../integration/fixtures/server.key.insecure\"",
                "+)",
                "+",
                "+func TestJWTInfo(t *testing.T) {",
                "+\topts := map[string]string{",
                "+\t\t\"pub-key\":     jwtPubKey,",
                "+\t\t\"priv-key\":    jwtPrivKey,",
                "+\t\t\"sign-method\": \"RS256\",",
                "+\t}",
                "+\tjwt, err := newTokenProviderJWT(opts)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\ttoken, aerr := jwt.assign(context.TODO(), \"abc\", 123)",
                "+\tif aerr != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tai, ok := jwt.info(context.TODO(), token, 123)",
                "+\tif !ok {",
                "+\t\tt.Fatalf(\"failed to authenticate with token %s\", token)",
                "+\t}",
                "+\tif ai.Revision != 123 {",
                "+\t\tt.Fatalf(\"expected revision 123, got %d\", ai.Revision)",
                "+\t}",
                "+\tai, ok = jwt.info(context.TODO(), \"aaa\", 120)",
                "+\tif ok || ai != nil {",
                "+\t\tt.Fatalf(\"expected aaa to fail to authenticate, got %+v\", ai)",
                "+\t}",
                "+}",
                "+",
                "+func TestJWTBad(t *testing.T) {",
                "+\topts := map[string]string{",
                "+\t\t\"pub-key\":     jwtPubKey,",
                "+\t\t\"priv-key\":    jwtPrivKey,",
                "+\t\t\"sign-method\": \"RS256\",",
                "+\t}",
                "+\t// private key instead of public key",
                "+\topts[\"pub-key\"] = jwtPrivKey",
                "+\tif _, err := newTokenProviderJWT(opts); err == nil {",
                "+\t\tt.Fatalf(\"expected failure on missing public key\")",
                "+\t}",
                "+\topts[\"pub-key\"] = jwtPubKey",
                "+",
                "+\t// public key instead of private key",
                "+\topts[\"priv-key\"] = jwtPubKey",
                "+\tif _, err := newTokenProviderJWT(opts); err == nil {",
                "+\t\tt.Fatalf(\"expected failure on missing public key\")",
                "+\t}",
                "+\topts[\"priv-key\"] = jwtPrivKey",
                "+",
                "+\t// missing signing option",
                "+\tdelete(opts, \"sign-method\")",
                "+\tif _, err := newTokenProviderJWT(opts); err == nil {",
                "+\t\tt.Fatal(\"expected error on missing option\")",
                "+\t}",
                "+\topts[\"sign-method\"] = \"RS256\"",
                "+",
                "+\t// bad file for pubkey",
                "+\topts[\"pub-key\"] = \"whatever\"",
                "+\tif _, err := newTokenProviderJWT(opts); err == nil {",
                "+\t\tt.Fatalf(\"expected failure on missing public key\")",
                "+\t}",
                "+\topts[\"pub-key\"] = jwtPubKey",
                "+",
                "+\t// bad file for private key",
                "+\topts[\"priv-key\"] = \"whatever\"",
                "+\tif _, err := newTokenProviderJWT(opts); err == nil {",
                "+\t\tt.Fatalf(\"expeceted failure on missing private key\")",
                "+\t}",
                "+\topts[\"priv-key\"] = jwtPrivKey",
                "+}",
                "diff --git a/auth/range_perm_cache.go b/auth/range_perm_cache.go",
                "new file mode 100644",
                "index 000000000..62acdf26d",
                "--- /dev/null",
                "+++ b/auth/range_perm_cache.go",
                "@@ -0,0 +1,133 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package auth",
                "+",
                "+import (",
                "+\t\"github.com/coreos/etcd/auth/authpb\"",
                "+\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+\t\"github.com/coreos/etcd/pkg/adt\"",
                "+)",
                "+",
                "+func getMergedPerms(tx backend.BatchTx, userName string) *unifiedRangePermissions {",
                "+\tuser := getUser(tx, userName)",
                "+\tif user == nil {",
                "+\t\tplog.Errorf(\"invalid user name %s\", userName)",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\treadPerms := &adt.IntervalTree{}",
                "+\twritePerms := &adt.IntervalTree{}",
                "+",
                "+\tfor _, roleName := range user.Roles {",
                "+\t\trole := getRole(tx, roleName)",
                "+\t\tif role == nil {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\tfor _, perm := range role.KeyPermission {",
                "+\t\t\tvar ivl adt.Interval",
                "+\t\t\tvar rangeEnd []byte",
                "+",
                "+\t\t\tif len(perm.RangeEnd) != 1 || perm.RangeEnd[0] != 0 {",
                "+\t\t\t\trangeEnd = perm.RangeEnd",
                "+\t\t\t}",
                "+",
                "+\t\t\tif len(perm.RangeEnd) != 0 {",
                "+\t\t\t\tivl = adt.NewBytesAffineInterval(perm.Key, rangeEnd)",
                "+\t\t\t} else {",
                "+\t\t\t\tivl = adt.NewBytesAffinePoint(perm.Key)",
                "+\t\t\t}",
                "+",
                "+\t\t\tswitch perm.PermType {",
                "+\t\t\tcase authpb.READWRITE:",
                "+\t\t\t\treadPerms.Insert(ivl, struct{}{})",
                "+\t\t\t\twritePerms.Insert(ivl, struct{}{})",
                "+",
                "+\t\t\tcase authpb.READ:",
                "+\t\t\t\treadPerms.Insert(ivl, struct{}{})",
                "+",
                "+\t\t\tcase authpb.WRITE:",
                "+\t\t\t\twritePerms.Insert(ivl, struct{}{})",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn &unifiedRangePermissions{",
                "+\t\treadPerms:  readPerms,",
                "+\t\twritePerms: writePerms,",
                "+\t}",
                "+}",
                "+",
                "+func checkKeyInterval(cachedPerms *unifiedRangePermissions, key, rangeEnd []byte, permtyp authpb.Permission_Type) bool {",
                "+\tif len(rangeEnd) == 1 && rangeEnd[0] == 0 {",
                "+\t\trangeEnd = nil",
                "+\t}",
                "+",
                "+\tivl := adt.NewBytesAffineInterval(key, rangeEnd)",
                "+\tswitch permtyp {",
                "+\tcase authpb.READ:",
                "+\t\treturn cachedPerms.readPerms.Contains(ivl)",
                "+\tcase authpb.WRITE:",
                "+\t\treturn cachedPerms.writePerms.Contains(ivl)",
                "+\tdefault:",
                "+\t\tplog.Panicf(\"unknown auth type: %v\", permtyp)",
                "+\t}",
                "+\treturn false",
                "+}",
                "+",
                "+func checkKeyPoint(cachedPerms *unifiedRangePermissions, key []byte, permtyp authpb.Permission_Type) bool {",
                "+\tpt := adt.NewBytesAffinePoint(key)",
                "+\tswitch permtyp {",
                "+\tcase authpb.READ:",
                "+\t\treturn cachedPerms.readPerms.Intersects(pt)",
                "+\tcase authpb.WRITE:",
                "+\t\treturn cachedPerms.writePerms.Intersects(pt)",
                "+\tdefault:",
                "+\t\tplog.Panicf(\"unknown auth type: %v\", permtyp)",
                "+\t}",
                "+\treturn false",
                "+}",
                "+",
                "+func (as *authStore) isRangeOpPermitted(tx backend.BatchTx, userName string, key, rangeEnd []byte, permtyp authpb.Permission_Type) bool {",
                "+\t// assumption: tx is Lock()ed",
                "+\t_, ok := as.rangePermCache[userName]",
                "+\tif !ok {",
                "+\t\tperms := getMergedPerms(tx, userName)",
                "+\t\tif perms == nil {",
                "+\t\t\tplog.Errorf(\"failed to create a unified permission of user %s\", userName)",
                "+\t\t\treturn false",
                "+\t\t}",
                "+\t\tas.rangePermCache[userName] = perms",
                "+\t}",
                "+",
                "+\tif len(rangeEnd) == 0 {",
                "+\t\treturn checkKeyPoint(as.rangePermCache[userName], key, permtyp)",
                "+\t}",
                "+",
                "+\treturn checkKeyInterval(as.rangePermCache[userName], key, rangeEnd, permtyp)",
                "+}",
                "+",
                "+func (as *authStore) clearCachedPerm() {",
                "+\tas.rangePermCache = make(map[string]*unifiedRangePermissions)",
                "+}",
                "+",
                "+func (as *authStore) invalidateCachedPerm(userName string) {",
                "+\tdelete(as.rangePermCache, userName)",
                "+}",
                "+",
                "+type unifiedRangePermissions struct {",
                "+\treadPerms  *adt.IntervalTree",
                "+\twritePerms *adt.IntervalTree",
                "+}",
                "diff --git a/auth/range_perm_cache_test.go b/auth/range_perm_cache_test.go",
                "new file mode 100644",
                "index 000000000..fd8df6a9e",
                "--- /dev/null",
                "+++ b/auth/range_perm_cache_test.go",
                "@@ -0,0 +1,59 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package auth",
                "+",
                "+import (",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/coreos/etcd/auth/authpb\"",
                "+\t\"github.com/coreos/etcd/pkg/adt\"",
                "+)",
                "+",
                "+func TestRangePermission(t *testing.T) {",
                "+\ttests := []struct {",
                "+\t\tperms []adt.Interval",
                "+\t\tbegin []byte",
                "+\t\tend   []byte",
                "+\t\twant  bool",
                "+\t}{",
                "+\t\t{",
                "+\t\t\t[]adt.Interval{adt.NewBytesAffineInterval([]byte(\"a\"), []byte(\"c\")), adt.NewBytesAffineInterval([]byte(\"x\"), []byte(\"z\"))},",
                "+\t\t\t[]byte(\"a\"), []byte(\"z\"),",
                "+\t\t\tfalse,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]adt.Interval{adt.NewBytesAffineInterval([]byte(\"a\"), []byte(\"f\")), adt.NewBytesAffineInterval([]byte(\"c\"), []byte(\"d\")), adt.NewBytesAffineInterval([]byte(\"f\"), []byte(\"z\"))},",
                "+\t\t\t[]byte(\"a\"), []byte(\"z\"),",
                "+\t\t\ttrue,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]adt.Interval{adt.NewBytesAffineInterval([]byte(\"a\"), []byte(\"d\")), adt.NewBytesAffineInterval([]byte(\"a\"), []byte(\"b\")), adt.NewBytesAffineInterval([]byte(\"c\"), []byte(\"f\"))},",
                "+\t\t\t[]byte(\"a\"), []byte(\"f\"),",
                "+\t\t\ttrue,",
                "+\t\t},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\treadPerms := &adt.IntervalTree{}",
                "+\t\tfor _, p := range tt.perms {",
                "+\t\t\treadPerms.Insert(p, struct{}{})",
                "+\t\t}",
                "+",
                "+\t\tresult := checkKeyInterval(&unifiedRangePermissions{readPerms: readPerms}, tt.begin, tt.end, authpb.READ)",
                "+\t\tif result != tt.want {",
                "+\t\t\tt.Errorf(\"#%d: result=%t, want=%t\", i, result, tt.want)",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/auth/simple_token.go b/auth/simple_token.go",
                "new file mode 100644",
                "index 000000000..ac55ad7f1",
                "--- /dev/null",
                "+++ b/auth/simple_token.go",
                "@@ -0,0 +1,223 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package auth",
                "+",
                "+// CAUTION: This randum number based token mechanism is only for testing purpose.",
                "+// JWT based mechanism will be added in the near future.",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"crypto/rand\"",
                "+\t\"fmt\"",
                "+\t\"math/big\"",
                "+\t\"strconv\"",
                "+\t\"strings\"",
                "+\t\"sync\"",
                "+\t\"time\"",
                "+)",
                "+",
                "+const (",
                "+\tletters                  = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
                "+\tdefaultSimpleTokenLength = 16",
                "+)",
                "+",
                "+// var for testing purposes",
                "+var (",
                "+\tsimpleTokenTTL           = 5 * time.Minute",
                "+\tsimpleTokenTTLResolution = 1 * time.Second",
                "+)",
                "+",
                "+type simpleTokenTTLKeeper struct {",
                "+\ttokens          map[string]time.Time",
                "+\tdonec           chan struct{}",
                "+\tstopc           chan struct{}",
                "+\tdeleteTokenFunc func(string)",
                "+\tmu              *sync.Mutex",
                "+}",
                "+",
                "+func (tm *simpleTokenTTLKeeper) stop() {",
                "+\tselect {",
                "+\tcase tm.stopc <- struct{}{}:",
                "+\tcase <-tm.donec:",
                "+\t}",
                "+\t<-tm.donec",
                "+}",
                "+",
                "+func (tm *simpleTokenTTLKeeper) addSimpleToken(token string) {",
                "+\ttm.tokens[token] = time.Now().Add(simpleTokenTTL)",
                "+}",
                "+",
                "+func (tm *simpleTokenTTLKeeper) resetSimpleToken(token string) {",
                "+\tif _, ok := tm.tokens[token]; ok {",
                "+\t\ttm.tokens[token] = time.Now().Add(simpleTokenTTL)",
                "+\t}",
                "+}",
                "+",
                "+func (tm *simpleTokenTTLKeeper) deleteSimpleToken(token string) {",
                "+\tdelete(tm.tokens, token)",
                "+}",
                "+",
                "+func (tm *simpleTokenTTLKeeper) run() {",
                "+\ttokenTicker := time.NewTicker(simpleTokenTTLResolution)",
                "+\tdefer func() {",
                "+\t\ttokenTicker.Stop()",
                "+\t\tclose(tm.donec)",
                "+\t}()",
                "+\tfor {",
                "+\t\tselect {",
                "+\t\tcase <-tokenTicker.C:",
                "+\t\t\tnowtime := time.Now()",
                "+\t\t\ttm.mu.Lock()",
                "+\t\t\tfor t, tokenendtime := range tm.tokens {",
                "+\t\t\t\tif nowtime.After(tokenendtime) {",
                "+\t\t\t\t\ttm.deleteTokenFunc(t)",
                "+\t\t\t\t\tdelete(tm.tokens, t)",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\ttm.mu.Unlock()",
                "+\t\tcase <-tm.stopc:",
                "+\t\t\treturn",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+type tokenSimple struct {",
                "+\tindexWaiter       func(uint64) <-chan struct{}",
                "+\tsimpleTokenKeeper *simpleTokenTTLKeeper",
                "+\tsimpleTokensMu    sync.Mutex",
                "+\tsimpleTokens      map[string]string // token -> username",
                "+}",
                "+",
                "+func (t *tokenSimple) genTokenPrefix() (string, error) {",
                "+\tret := make([]byte, defaultSimpleTokenLength)",
                "+",
                "+\tfor i := 0; i < defaultSimpleTokenLength; i++ {",
                "+\t\tbInt, err := rand.Int(rand.Reader, big.NewInt(int64(len(letters))))",
                "+\t\tif err != nil {",
                "+\t\t\treturn \"\", err",
                "+\t\t}",
                "+",
                "+\t\tret[i] = letters[bInt.Int64()]",
                "+\t}",
                "+",
                "+\treturn string(ret), nil",
                "+}",
                "+",
                "+func (t *tokenSimple) assignSimpleTokenToUser(username, token string) {",
                "+\tt.simpleTokensMu.Lock()",
                "+\tdefer t.simpleTokensMu.Unlock()",
                "+\tif t.simpleTokenKeeper == nil {",
                "+\t\treturn",
                "+\t}",
                "+",
                "+\t_, ok := t.simpleTokens[token]",
                "+\tif ok {",
                "+\t\tplog.Panicf(\"token %s is alredy used\", token)",
                "+\t}",
                "+",
                "+\tt.simpleTokens[token] = username",
                "+\tt.simpleTokenKeeper.addSimpleToken(token)",
                "+}",
                "+",
                "+func (t *tokenSimple) invalidateUser(username string) {",
                "+\tif t.simpleTokenKeeper == nil {",
                "+\t\treturn",
                "+\t}",
                "+\tt.simpleTokensMu.Lock()",
                "+\tfor token, name := range t.simpleTokens {",
                "+\t\tif strings.Compare(name, username) == 0 {",
                "+\t\t\tdelete(t.simpleTokens, token)",
                "+\t\t\tt.simpleTokenKeeper.deleteSimpleToken(token)",
                "+\t\t}",
                "+\t}",
                "+\tt.simpleTokensMu.Unlock()",
                "+}",
                "+",
                "+func (t *tokenSimple) enable() {",
                "+\tdelf := func(tk string) {",
                "+\t\tif username, ok := t.simpleTokens[tk]; ok {",
                "+\t\t\tplog.Infof(\"deleting token %s for user %s\", tk, username)",
                "+\t\t\tdelete(t.simpleTokens, tk)",
                "+\t\t}",
                "+\t}",
                "+\tt.simpleTokenKeeper = &simpleTokenTTLKeeper{",
                "+\t\ttokens:          make(map[string]time.Time),",
                "+\t\tdonec:           make(chan struct{}),",
                "+\t\tstopc:           make(chan struct{}),",
                "+\t\tdeleteTokenFunc: delf,",
                "+\t\tmu:              &t.simpleTokensMu,",
                "+\t}",
                "+\tgo t.simpleTokenKeeper.run()",
                "+}",
                "+",
                "+func (t *tokenSimple) disable() {",
                "+\tt.simpleTokensMu.Lock()",
                "+\ttk := t.simpleTokenKeeper",
                "+\tt.simpleTokenKeeper = nil",
                "+\tt.simpleTokens = make(map[string]string) // invalidate all tokens",
                "+\tt.simpleTokensMu.Unlock()",
                "+\tif tk != nil {",
                "+\t\ttk.stop()",
                "+\t}",
                "+}",
                "+",
                "+func (t *tokenSimple) info(ctx context.Context, token string, revision uint64) (*AuthInfo, bool) {",
                "+\tif !t.isValidSimpleToken(ctx, token) {",
                "+\t\treturn nil, false",
                "+\t}",
                "+\tt.simpleTokensMu.Lock()",
                "+\tusername, ok := t.simpleTokens[token]",
                "+\tif ok && t.simpleTokenKeeper != nil {",
                "+\t\tt.simpleTokenKeeper.resetSimpleToken(token)",
                "+\t}",
                "+\tt.simpleTokensMu.Unlock()",
                "+\treturn &AuthInfo{Username: username, Revision: revision}, ok",
                "+}",
                "+",
                "+func (t *tokenSimple) assign(ctx context.Context, username string, rev uint64) (string, error) {",
                "+\t// rev isn't used in simple token, it is only used in JWT",
                "+\tindex := ctx.Value(AuthenticateParamIndex{}).(uint64)",
                "+\tsimpleTokenPrefix := ctx.Value(AuthenticateParamSimpleTokenPrefix{}).(string)",
                "+\ttoken := fmt.Sprintf(\"%s.%d\", simpleTokenPrefix, index)",
                "+\tt.assignSimpleTokenToUser(username, token)",
                "+",
                "+\treturn token, nil",
                "+}",
                "+",
                "+func (t *tokenSimple) isValidSimpleToken(ctx context.Context, token string) bool {",
                "+\tsplitted := strings.Split(token, \".\")",
                "+\tif len(splitted) != 2 {",
                "+\t\treturn false",
                "+\t}",
                "+\tindex, err := strconv.Atoi(splitted[1])",
                "+\tif err != nil {",
                "+\t\treturn false",
                "+\t}",
                "+",
                "+\tselect {",
                "+\tcase <-t.indexWaiter(uint64(index)):",
                "+\t\treturn true",
                "+\tcase <-ctx.Done():",
                "+\t}",
                "+",
                "+\treturn false",
                "+}",
                "+",
                "+func newTokenProviderSimple(indexWaiter func(uint64) <-chan struct{}) *tokenSimple {",
                "+\treturn &tokenSimple{",
                "+\t\tsimpleTokens: make(map[string]string),",
                "+\t\tindexWaiter:  indexWaiter,",
                "+\t}",
                "+}",
                "diff --git a/auth/simple_token_test.go b/auth/simple_token_test.go",
                "new file mode 100644",
                "index 000000000..1890521d4",
                "--- /dev/null",
                "+++ b/auth/simple_token_test.go",
                "@@ -0,0 +1,67 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package auth",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"testing\"",
                "+)",
                "+",
                "+// TestSimpleTokenDisabled ensures that TokenProviderSimple behaves correctly when",
                "+// disabled.",
                "+func TestSimpleTokenDisabled(t *testing.T) {",
                "+\tinitialState := newTokenProviderSimple(dummyIndexWaiter)",
                "+",
                "+\texplicitlyDisabled := newTokenProviderSimple(dummyIndexWaiter)",
                "+\texplicitlyDisabled.enable()",
                "+\texplicitlyDisabled.disable()",
                "+",
                "+\tfor _, tp := range []*tokenSimple{initialState, explicitlyDisabled} {",
                "+\t\tctx := context.WithValue(context.WithValue(context.TODO(), AuthenticateParamIndex{}, uint64(1)), AuthenticateParamSimpleTokenPrefix{}, \"dummy\")",
                "+\t\ttoken, err := tp.assign(ctx, \"user1\", 0)",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\tauthInfo, ok := tp.info(ctx, token, 0)",
                "+\t\tif ok {",
                "+\t\t\tt.Errorf(\"expected (true, \\\"user1\\\") got (%t, %s)\", ok, authInfo.Username)",
                "+\t\t}",
                "+",
                "+\t\ttp.invalidateUser(\"user1\") // should be no-op",
                "+\t}",
                "+}",
                "+",
                "+// TestSimpleTokenAssign ensures that TokenProviderSimple can correctly assign a",
                "+// token, look it up with info, and invalidate it by user.",
                "+func TestSimpleTokenAssign(t *testing.T) {",
                "+\ttp := newTokenProviderSimple(dummyIndexWaiter)",
                "+\ttp.enable()",
                "+\tctx := context.WithValue(context.WithValue(context.TODO(), AuthenticateParamIndex{}, uint64(1)), AuthenticateParamSimpleTokenPrefix{}, \"dummy\")",
                "+\ttoken, err := tp.assign(ctx, \"user1\", 0)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tauthInfo, ok := tp.info(ctx, token, 0)",
                "+\tif !ok || authInfo.Username != \"user1\" {",
                "+\t\tt.Errorf(\"expected (true, \\\"token2\\\") got (%t, %s)\", ok, authInfo.Username)",
                "+\t}",
                "+",
                "+\ttp.invalidateUser(\"user1\")",
                "+",
                "+\t_, ok = tp.info(context.TODO(), token, 0)",
                "+\tif ok {",
                "+\t\tt.Errorf(\"expected ok == false after user is invalidated\")",
                "+\t}",
                "+}",
                "diff --git a/auth/store.go b/auth/store.go",
                "new file mode 100644",
                "index 000000000..e93560896",
                "--- /dev/null",
                "+++ b/auth/store.go",
                "@@ -0,0 +1,1116 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package auth",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"context\"",
                "+\t\"encoding/binary\"",
                "+\t\"errors\"",
                "+\t\"sort\"",
                "+\t\"strings\"",
                "+\t\"sync\"",
                "+\t\"sync/atomic\"",
                "+",
                "+\t\"github.com/coreos/etcd/auth/authpb\"",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+\t\"golang.org/x/crypto/bcrypt\"",
                "+\t\"google.golang.org/grpc/credentials\"",
                "+\t\"google.golang.org/grpc/metadata\"",
                "+\t\"google.golang.org/grpc/peer\"",
                "+)",
                "+",
                "+var (",
                "+\tenableFlagKey = []byte(\"authEnabled\")",
                "+\tauthEnabled   = []byte{1}",
                "+\tauthDisabled  = []byte{0}",
                "+",
                "+\trevisionKey = []byte(\"authRevision\")",
                "+",
                "+\tauthBucketName      = []byte(\"auth\")",
                "+\tauthUsersBucketName = []byte(\"authUsers\")",
                "+\tauthRolesBucketName = []byte(\"authRoles\")",
                "+",
                "+\tplog = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"auth\")",
                "+",
                "+\tErrRootUserNotExist     = errors.New(\"auth: root user does not exist\")",
                "+\tErrRootRoleNotExist     = errors.New(\"auth: root user does not have root role\")",
                "+\tErrUserAlreadyExist     = errors.New(\"auth: user already exists\")",
                "+\tErrUserEmpty            = errors.New(\"auth: user name is empty\")",
                "+\tErrUserNotFound         = errors.New(\"auth: user not found\")",
                "+\tErrRoleAlreadyExist     = errors.New(\"auth: role already exists\")",
                "+\tErrRoleNotFound         = errors.New(\"auth: role not found\")",
                "+\tErrAuthFailed           = errors.New(\"auth: authentication failed, invalid user ID or password\")",
                "+\tErrPermissionDenied     = errors.New(\"auth: permission denied\")",
                "+\tErrRoleNotGranted       = errors.New(\"auth: role is not granted to the user\")",
                "+\tErrPermissionNotGranted = errors.New(\"auth: permission is not granted to the role\")",
                "+\tErrAuthNotEnabled       = errors.New(\"auth: authentication is not enabled\")",
                "+\tErrAuthOldRevision      = errors.New(\"auth: revision in header is old\")",
                "+\tErrInvalidAuthToken     = errors.New(\"auth: invalid auth token\")",
                "+\tErrInvalidAuthOpts      = errors.New(\"auth: invalid auth options\")",
                "+\tErrInvalidAuthMgmt      = errors.New(\"auth: invalid auth management\")",
                "+",
                "+\t// BcryptCost is the algorithm cost / strength for hashing auth passwords",
                "+\tBcryptCost = bcrypt.DefaultCost",
                "+)",
                "+",
                "+const (",
                "+\trootUser = \"root\"",
                "+\trootRole = \"root\"",
                "+",
                "+\trevBytesLen = 8",
                "+)",
                "+",
                "+type AuthInfo struct {",
                "+\tUsername string",
                "+\tRevision uint64",
                "+}",
                "+",
                "+// AuthenticateParamIndex is used for a key of context in the parameters of Authenticate()",
                "+type AuthenticateParamIndex struct{}",
                "+",
                "+// AuthenticateParamSimpleTokenPrefix is used for a key of context in the parameters of Authenticate()",
                "+type AuthenticateParamSimpleTokenPrefix struct{}",
                "+",
                "+type AuthStore interface {",
                "+\t// AuthEnable turns on the authentication feature",
                "+\tAuthEnable() error",
                "+",
                "+\t// AuthDisable turns off the authentication feature",
                "+\tAuthDisable()",
                "+",
                "+\t// Authenticate does authentication based on given user name and password",
                "+\tAuthenticate(ctx context.Context, username, password string) (*pb.AuthenticateResponse, error)",
                "+",
                "+\t// Recover recovers the state of auth store from the given backend",
                "+\tRecover(b backend.Backend)",
                "+",
                "+\t// UserAdd adds a new user",
                "+\tUserAdd(r *pb.AuthUserAddRequest) (*pb.AuthUserAddResponse, error)",
                "+",
                "+\t// UserDelete deletes a user",
                "+\tUserDelete(r *pb.AuthUserDeleteRequest) (*pb.AuthUserDeleteResponse, error)",
                "+",
                "+\t// UserChangePassword changes a password of a user",
                "+\tUserChangePassword(r *pb.AuthUserChangePasswordRequest) (*pb.AuthUserChangePasswordResponse, error)",
                "+",
                "+\t// UserGrantRole grants a role to the user",
                "+\tUserGrantRole(r *pb.AuthUserGrantRoleRequest) (*pb.AuthUserGrantRoleResponse, error)",
                "+",
                "+\t// UserGet gets the detailed information of a users",
                "+\tUserGet(r *pb.AuthUserGetRequest) (*pb.AuthUserGetResponse, error)",
                "+",
                "+\t// UserRevokeRole revokes a role of a user",
                "+\tUserRevokeRole(r *pb.AuthUserRevokeRoleRequest) (*pb.AuthUserRevokeRoleResponse, error)",
                "+",
                "+\t// RoleAdd adds a new role",
                "+\tRoleAdd(r *pb.AuthRoleAddRequest) (*pb.AuthRoleAddResponse, error)",
                "+",
                "+\t// RoleGrantPermission grants a permission to a role",
                "+\tRoleGrantPermission(r *pb.AuthRoleGrantPermissionRequest) (*pb.AuthRoleGrantPermissionResponse, error)",
                "+",
                "+\t// RoleGet gets the detailed information of a role",
                "+\tRoleGet(r *pb.AuthRoleGetRequest) (*pb.AuthRoleGetResponse, error)",
                "+",
                "+\t// RoleRevokePermission gets the detailed information of a role",
                "+\tRoleRevokePermission(r *pb.AuthRoleRevokePermissionRequest) (*pb.AuthRoleRevokePermissionResponse, error)",
                "+",
                "+\t// RoleDelete gets the detailed information of a role",
                "+\tRoleDelete(r *pb.AuthRoleDeleteRequest) (*pb.AuthRoleDeleteResponse, error)",
                "+",
                "+\t// UserList gets a list of all users",
                "+\tUserList(r *pb.AuthUserListRequest) (*pb.AuthUserListResponse, error)",
                "+",
                "+\t// RoleList gets a list of all roles",
                "+\tRoleList(r *pb.AuthRoleListRequest) (*pb.AuthRoleListResponse, error)",
                "+",
                "+\t// IsPutPermitted checks put permission of the user",
                "+\tIsPutPermitted(authInfo *AuthInfo, key []byte) error",
                "+",
                "+\t// IsRangePermitted checks range permission of the user",
                "+\tIsRangePermitted(authInfo *AuthInfo, key, rangeEnd []byte) error",
                "+",
                "+\t// IsDeleteRangePermitted checks delete-range permission of the user",
                "+\tIsDeleteRangePermitted(authInfo *AuthInfo, key, rangeEnd []byte) error",
                "+",
                "+\t// IsAdminPermitted checks admin permission of the user",
                "+\tIsAdminPermitted(authInfo *AuthInfo) error",
                "+",
                "+\t// GenTokenPrefix produces a random string in a case of simple token",
                "+\t// in a case of JWT, it produces an empty string",
                "+\tGenTokenPrefix() (string, error)",
                "+",
                "+\t// Revision gets current revision of authStore",
                "+\tRevision() uint64",
                "+",
                "+\t// CheckPassword checks a given pair of username and password is correct",
                "+\tCheckPassword(username, password string) (uint64, error)",
                "+",
                "+\t// Close does cleanup of AuthStore",
                "+\tClose() error",
                "+",
                "+\t// AuthInfoFromCtx gets AuthInfo from gRPC's context",
                "+\tAuthInfoFromCtx(ctx context.Context) (*AuthInfo, error)",
                "+",
                "+\t// AuthInfoFromTLS gets AuthInfo from TLS info of gRPC's context",
                "+\tAuthInfoFromTLS(ctx context.Context) *AuthInfo",
                "+",
                "+\t// WithRoot generates and installs a token that can be used as a root credential",
                "+\tWithRoot(ctx context.Context) context.Context",
                "+",
                "+\t// HasRole checks that user has role",
                "+\tHasRole(user, role string) bool",
                "+}",
                "+",
                "+type TokenProvider interface {",
                "+\tinfo(ctx context.Context, token string, revision uint64) (*AuthInfo, bool)",
                "+\tassign(ctx context.Context, username string, revision uint64) (string, error)",
                "+\tenable()",
                "+\tdisable()",
                "+",
                "+\tinvalidateUser(string)",
                "+\tgenTokenPrefix() (string, error)",
                "+}",
                "+",
                "+type authStore struct {",
                "+\t// atomic operations; need 64-bit align, or 32-bit tests will crash",
                "+\trevision uint64",
                "+",
                "+\tbe        backend.Backend",
                "+\tenabled   bool",
                "+\tenabledMu sync.RWMutex",
                "+",
                "+\trangePermCache map[string]*unifiedRangePermissions // username -> unifiedRangePermissions",
                "+",
                "+\ttokenProvider TokenProvider",
                "+}",
                "+",
                "+func (as *authStore) AuthEnable() error {",
                "+\tas.enabledMu.Lock()",
                "+\tdefer as.enabledMu.Unlock()",
                "+\tif as.enabled {",
                "+\t\tplog.Noticef(\"Authentication already enabled\")",
                "+\t\treturn nil",
                "+\t}",
                "+\tb := as.be",
                "+\ttx := b.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer func() {",
                "+\t\ttx.Unlock()",
                "+\t\tb.ForceCommit()",
                "+\t}()",
                "+",
                "+\tu := getUser(tx, rootUser)",
                "+\tif u == nil {",
                "+\t\treturn ErrRootUserNotExist",
                "+\t}",
                "+",
                "+\tif !hasRootRole(u) {",
                "+\t\treturn ErrRootRoleNotExist",
                "+\t}",
                "+",
                "+\ttx.UnsafePut(authBucketName, enableFlagKey, authEnabled)",
                "+",
                "+\tas.enabled = true",
                "+\tas.tokenProvider.enable()",
                "+",
                "+\tas.rangePermCache = make(map[string]*unifiedRangePermissions)",
                "+",
                "+\tas.setRevision(getRevision(tx))",
                "+",
                "+\tplog.Noticef(\"Authentication enabled\")",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (as *authStore) AuthDisable() {",
                "+\tas.enabledMu.Lock()",
                "+\tdefer as.enabledMu.Unlock()",
                "+\tif !as.enabled {",
                "+\t\treturn",
                "+\t}",
                "+\tb := as.be",
                "+\ttx := b.BatchTx()",
                "+\ttx.Lock()",
                "+\ttx.UnsafePut(authBucketName, enableFlagKey, authDisabled)",
                "+\tas.commitRevision(tx)",
                "+\ttx.Unlock()",
                "+\tb.ForceCommit()",
                "+",
                "+\tas.enabled = false",
                "+\tas.tokenProvider.disable()",
                "+",
                "+\tplog.Noticef(\"Authentication disabled\")",
                "+}",
                "+",
                "+func (as *authStore) Close() error {",
                "+\tas.enabledMu.Lock()",
                "+\tdefer as.enabledMu.Unlock()",
                "+\tif !as.enabled {",
                "+\t\treturn nil",
                "+\t}",
                "+\tas.tokenProvider.disable()",
                "+\treturn nil",
                "+}",
                "+",
                "+func (as *authStore) Authenticate(ctx context.Context, username, password string) (*pb.AuthenticateResponse, error) {",
                "+\tif !as.isAuthEnabled() {",
                "+\t\treturn nil, ErrAuthNotEnabled",
                "+\t}",
                "+",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tuser := getUser(tx, username)",
                "+\tif user == nil {",
                "+\t\treturn nil, ErrAuthFailed",
                "+\t}",
                "+",
                "+\t// Password checking is already performed in the API layer, so we don't need to check for now.",
                "+\t// Staleness of password can be detected with OCC in the API layer, too.",
                "+",
                "+\ttoken, err := as.tokenProvider.assign(ctx, username, as.Revision())",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\tplog.Debugf(\"authorized %s, token is %s\", username, token)",
                "+\treturn &pb.AuthenticateResponse{Token: token}, nil",
                "+}",
                "+",
                "+func (as *authStore) CheckPassword(username, password string) (uint64, error) {",
                "+\tif !as.isAuthEnabled() {",
                "+\t\treturn 0, ErrAuthNotEnabled",
                "+\t}",
                "+",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tuser := getUser(tx, username)",
                "+\tif user == nil {",
                "+\t\treturn 0, ErrAuthFailed",
                "+\t}",
                "+",
                "+\tif bcrypt.CompareHashAndPassword(user.Password, []byte(password)) != nil {",
                "+\t\tplog.Noticef(\"authentication failed, invalid password for user %s\", username)",
                "+\t\treturn 0, ErrAuthFailed",
                "+\t}",
                "+",
                "+\treturn getRevision(tx), nil",
                "+}",
                "+",
                "+func (as *authStore) Recover(be backend.Backend) {",
                "+\tenabled := false",
                "+\tas.be = be",
                "+\ttx := be.BatchTx()",
                "+\ttx.Lock()",
                "+\t_, vs := tx.UnsafeRange(authBucketName, enableFlagKey, nil, 0)",
                "+\tif len(vs) == 1 {",
                "+\t\tif bytes.Equal(vs[0], authEnabled) {",
                "+\t\t\tenabled = true",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tas.setRevision(getRevision(tx))",
                "+",
                "+\ttx.Unlock()",
                "+",
                "+\tas.enabledMu.Lock()",
                "+\tas.enabled = enabled",
                "+\tas.enabledMu.Unlock()",
                "+}",
                "+",
                "+func (as *authStore) UserAdd(r *pb.AuthUserAddRequest) (*pb.AuthUserAddResponse, error) {",
                "+\tif len(r.Name) == 0 {",
                "+\t\treturn nil, ErrUserEmpty",
                "+\t}",
                "+",
                "+\thashed, err := bcrypt.GenerateFromPassword([]byte(r.Password), BcryptCost)",
                "+\tif err != nil {",
                "+\t\tplog.Errorf(\"failed to hash password: %s\", err)",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tuser := getUser(tx, r.Name)",
                "+\tif user != nil {",
                "+\t\treturn nil, ErrUserAlreadyExist",
                "+\t}",
                "+",
                "+\tnewUser := &authpb.User{",
                "+\t\tName:     []byte(r.Name),",
                "+\t\tPassword: hashed,",
                "+\t}",
                "+",
                "+\tputUser(tx, newUser)",
                "+",
                "+\tas.commitRevision(tx)",
                "+",
                "+\tplog.Noticef(\"added a new user: %s\", r.Name)",
                "+",
                "+\treturn &pb.AuthUserAddResponse{}, nil",
                "+}",
                "+",
                "+func (as *authStore) UserDelete(r *pb.AuthUserDeleteRequest) (*pb.AuthUserDeleteResponse, error) {",
                "+\tif as.enabled && strings.Compare(r.Name, rootUser) == 0 {",
                "+\t\tplog.Errorf(\"the user root must not be deleted\")",
                "+\t\treturn nil, ErrInvalidAuthMgmt",
                "+\t}",
                "+",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tuser := getUser(tx, r.Name)",
                "+\tif user == nil {",
                "+\t\treturn nil, ErrUserNotFound",
                "+\t}",
                "+",
                "+\tdelUser(tx, r.Name)",
                "+",
                "+\tas.commitRevision(tx)",
                "+",
                "+\tas.invalidateCachedPerm(r.Name)",
                "+\tas.tokenProvider.invalidateUser(r.Name)",
                "+",
                "+\tplog.Noticef(\"deleted a user: %s\", r.Name)",
                "+",
                "+\treturn &pb.AuthUserDeleteResponse{}, nil",
                "+}",
                "+",
                "+func (as *authStore) UserChangePassword(r *pb.AuthUserChangePasswordRequest) (*pb.AuthUserChangePasswordResponse, error) {",
                "+\t// TODO(mitake): measure the cost of bcrypt.GenerateFromPassword()",
                "+\t// If the cost is too high, we should move the encryption to outside of the raft",
                "+\thashed, err := bcrypt.GenerateFromPassword([]byte(r.Password), BcryptCost)",
                "+\tif err != nil {",
                "+\t\tplog.Errorf(\"failed to hash password: %s\", err)",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tuser := getUser(tx, r.Name)",
                "+\tif user == nil {",
                "+\t\treturn nil, ErrUserNotFound",
                "+\t}",
                "+",
                "+\tupdatedUser := &authpb.User{",
                "+\t\tName:     []byte(r.Name),",
                "+\t\tRoles:    user.Roles,",
                "+\t\tPassword: hashed,",
                "+\t}",
                "+",
                "+\tputUser(tx, updatedUser)",
                "+",
                "+\tas.commitRevision(tx)",
                "+",
                "+\tas.invalidateCachedPerm(r.Name)",
                "+\tas.tokenProvider.invalidateUser(r.Name)",
                "+",
                "+\tplog.Noticef(\"changed a password of a user: %s\", r.Name)",
                "+",
                "+\treturn &pb.AuthUserChangePasswordResponse{}, nil",
                "+}",
                "+",
                "+func (as *authStore) UserGrantRole(r *pb.AuthUserGrantRoleRequest) (*pb.AuthUserGrantRoleResponse, error) {",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tuser := getUser(tx, r.User)",
                "+\tif user == nil {",
                "+\t\treturn nil, ErrUserNotFound",
                "+\t}",
                "+",
                "+\tif r.Role != rootRole {",
                "+\t\trole := getRole(tx, r.Role)",
                "+\t\tif role == nil {",
                "+\t\t\treturn nil, ErrRoleNotFound",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tidx := sort.SearchStrings(user.Roles, r.Role)",
                "+\tif idx < len(user.Roles) && strings.Compare(user.Roles[idx], r.Role) == 0 {",
                "+\t\tplog.Warningf(\"user %s is already granted role %s\", r.User, r.Role)",
                "+\t\treturn &pb.AuthUserGrantRoleResponse{}, nil",
                "+\t}",
                "+",
                "+\tuser.Roles = append(user.Roles, r.Role)",
                "+\tsort.Strings(user.Roles)",
                "+",
                "+\tputUser(tx, user)",
                "+",
                "+\tas.invalidateCachedPerm(r.User)",
                "+",
                "+\tas.commitRevision(tx)",
                "+",
                "+\tplog.Noticef(\"granted role %s to user %s\", r.Role, r.User)",
                "+\treturn &pb.AuthUserGrantRoleResponse{}, nil",
                "+}",
                "+",
                "+func (as *authStore) UserGet(r *pb.AuthUserGetRequest) (*pb.AuthUserGetResponse, error) {",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tuser := getUser(tx, r.Name)",
                "+\ttx.Unlock()",
                "+",
                "+\tif user == nil {",
                "+\t\treturn nil, ErrUserNotFound",
                "+\t}",
                "+",
                "+\tvar resp pb.AuthUserGetResponse",
                "+\tresp.Roles = append(resp.Roles, user.Roles...)",
                "+\treturn &resp, nil",
                "+}",
                "+",
                "+func (as *authStore) UserList(r *pb.AuthUserListRequest) (*pb.AuthUserListResponse, error) {",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tusers := getAllUsers(tx)",
                "+\ttx.Unlock()",
                "+",
                "+\tresp := &pb.AuthUserListResponse{Users: make([]string, len(users))}",
                "+\tfor i := range users {",
                "+\t\tresp.Users[i] = string(users[i].Name)",
                "+\t}",
                "+\treturn resp, nil",
                "+}",
                "+",
                "+func (as *authStore) UserRevokeRole(r *pb.AuthUserRevokeRoleRequest) (*pb.AuthUserRevokeRoleResponse, error) {",
                "+\tif as.enabled && strings.Compare(r.Name, rootUser) == 0 && strings.Compare(r.Role, rootRole) == 0 {",
                "+\t\tplog.Errorf(\"the role root must not be revoked from the user root\")",
                "+\t\treturn nil, ErrInvalidAuthMgmt",
                "+\t}",
                "+",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tuser := getUser(tx, r.Name)",
                "+\tif user == nil {",
                "+\t\treturn nil, ErrUserNotFound",
                "+\t}",
                "+",
                "+\tupdatedUser := &authpb.User{",
                "+\t\tName:     user.Name,",
                "+\t\tPassword: user.Password,",
                "+\t}",
                "+",
                "+\tfor _, role := range user.Roles {",
                "+\t\tif strings.Compare(role, r.Role) != 0 {",
                "+\t\t\tupdatedUser.Roles = append(updatedUser.Roles, role)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif len(updatedUser.Roles) == len(user.Roles) {",
                "+\t\treturn nil, ErrRoleNotGranted",
                "+\t}",
                "+",
                "+\tputUser(tx, updatedUser)",
                "+",
                "+\tas.invalidateCachedPerm(r.Name)",
                "+",
                "+\tas.commitRevision(tx)",
                "+",
                "+\tplog.Noticef(\"revoked role %s from user %s\", r.Role, r.Name)",
                "+\treturn &pb.AuthUserRevokeRoleResponse{}, nil",
                "+}",
                "+",
                "+func (as *authStore) RoleGet(r *pb.AuthRoleGetRequest) (*pb.AuthRoleGetResponse, error) {",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tvar resp pb.AuthRoleGetResponse",
                "+",
                "+\trole := getRole(tx, r.Role)",
                "+\tif role == nil {",
                "+\t\treturn nil, ErrRoleNotFound",
                "+\t}",
                "+\tresp.Perm = append(resp.Perm, role.KeyPermission...)",
                "+\treturn &resp, nil",
                "+}",
                "+",
                "+func (as *authStore) RoleList(r *pb.AuthRoleListRequest) (*pb.AuthRoleListResponse, error) {",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\troles := getAllRoles(tx)",
                "+\ttx.Unlock()",
                "+",
                "+\tresp := &pb.AuthRoleListResponse{Roles: make([]string, len(roles))}",
                "+\tfor i := range roles {",
                "+\t\tresp.Roles[i] = string(roles[i].Name)",
                "+\t}",
                "+\treturn resp, nil",
                "+}",
                "+",
                "+func (as *authStore) RoleRevokePermission(r *pb.AuthRoleRevokePermissionRequest) (*pb.AuthRoleRevokePermissionResponse, error) {",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\trole := getRole(tx, r.Role)",
                "+\tif role == nil {",
                "+\t\treturn nil, ErrRoleNotFound",
                "+\t}",
                "+",
                "+\tupdatedRole := &authpb.Role{",
                "+\t\tName: role.Name,",
                "+\t}",
                "+",
                "+\tfor _, perm := range role.KeyPermission {",
                "+\t\tif !bytes.Equal(perm.Key, []byte(r.Key)) || !bytes.Equal(perm.RangeEnd, []byte(r.RangeEnd)) {",
                "+\t\t\tupdatedRole.KeyPermission = append(updatedRole.KeyPermission, perm)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tif len(role.KeyPermission) == len(updatedRole.KeyPermission) {",
                "+\t\treturn nil, ErrPermissionNotGranted",
                "+\t}",
                "+",
                "+\tputRole(tx, updatedRole)",
                "+",
                "+\t// TODO(mitake): currently single role update invalidates every cache",
                "+\t// It should be optimized.",
                "+\tas.clearCachedPerm()",
                "+",
                "+\tas.commitRevision(tx)",
                "+",
                "+\tplog.Noticef(\"revoked key %s from role %s\", r.Key, r.Role)",
                "+\treturn &pb.AuthRoleRevokePermissionResponse{}, nil",
                "+}",
                "+",
                "+func (as *authStore) RoleDelete(r *pb.AuthRoleDeleteRequest) (*pb.AuthRoleDeleteResponse, error) {",
                "+\tif as.enabled && strings.Compare(r.Role, rootRole) == 0 {",
                "+\t\tplog.Errorf(\"the role root must not be deleted\")",
                "+\t\treturn nil, ErrInvalidAuthMgmt",
                "+\t}",
                "+",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\trole := getRole(tx, r.Role)",
                "+\tif role == nil {",
                "+\t\treturn nil, ErrRoleNotFound",
                "+\t}",
                "+",
                "+\tdelRole(tx, r.Role)",
                "+",
                "+\tusers := getAllUsers(tx)",
                "+\tfor _, user := range users {",
                "+\t\tupdatedUser := &authpb.User{",
                "+\t\t\tName:     user.Name,",
                "+\t\t\tPassword: user.Password,",
                "+\t\t}",
                "+",
                "+\t\tfor _, role := range user.Roles {",
                "+\t\t\tif strings.Compare(role, r.Role) != 0 {",
                "+\t\t\t\tupdatedUser.Roles = append(updatedUser.Roles, role)",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tif len(updatedUser.Roles) == len(user.Roles) {",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+",
                "+\t\tputUser(tx, updatedUser)",
                "+",
                "+\t\tas.invalidateCachedPerm(string(user.Name))",
                "+\t}",
                "+",
                "+\tas.commitRevision(tx)",
                "+",
                "+\tplog.Noticef(\"deleted role %s\", r.Role)",
                "+\treturn &pb.AuthRoleDeleteResponse{}, nil",
                "+}",
                "+",
                "+func (as *authStore) RoleAdd(r *pb.AuthRoleAddRequest) (*pb.AuthRoleAddResponse, error) {",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\trole := getRole(tx, r.Name)",
                "+\tif role != nil {",
                "+\t\treturn nil, ErrRoleAlreadyExist",
                "+\t}",
                "+",
                "+\tnewRole := &authpb.Role{",
                "+\t\tName: []byte(r.Name),",
                "+\t}",
                "+",
                "+\tputRole(tx, newRole)",
                "+",
                "+\tas.commitRevision(tx)",
                "+",
                "+\tplog.Noticef(\"Role %s is created\", r.Name)",
                "+",
                "+\treturn &pb.AuthRoleAddResponse{}, nil",
                "+}",
                "+",
                "+func (as *authStore) authInfoFromToken(ctx context.Context, token string) (*AuthInfo, bool) {",
                "+\treturn as.tokenProvider.info(ctx, token, as.Revision())",
                "+}",
                "+",
                "+type permSlice []*authpb.Permission",
                "+",
                "+func (perms permSlice) Len() int {",
                "+\treturn len(perms)",
                "+}",
                "+",
                "+func (perms permSlice) Less(i, j int) bool {",
                "+\treturn bytes.Compare(perms[i].Key, perms[j].Key) < 0",
                "+}",
                "+",
                "+func (perms permSlice) Swap(i, j int) {",
                "+\tperms[i], perms[j] = perms[j], perms[i]",
                "+}",
                "+",
                "+func (as *authStore) RoleGrantPermission(r *pb.AuthRoleGrantPermissionRequest) (*pb.AuthRoleGrantPermissionResponse, error) {",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\trole := getRole(tx, r.Name)",
                "+\tif role == nil {",
                "+\t\treturn nil, ErrRoleNotFound",
                "+\t}",
                "+",
                "+\tidx := sort.Search(len(role.KeyPermission), func(i int) bool {",
                "+\t\treturn bytes.Compare(role.KeyPermission[i].Key, []byte(r.Perm.Key)) >= 0",
                "+\t})",
                "+",
                "+\tif idx < len(role.KeyPermission) && bytes.Equal(role.KeyPermission[idx].Key, r.Perm.Key) && bytes.Equal(role.KeyPermission[idx].RangeEnd, r.Perm.RangeEnd) {",
                "+\t\t// update existing permission",
                "+\t\trole.KeyPermission[idx].PermType = r.Perm.PermType",
                "+\t} else {",
                "+\t\t// append new permission to the role",
                "+\t\tnewPerm := &authpb.Permission{",
                "+\t\t\tKey:      []byte(r.Perm.Key),",
                "+\t\t\tRangeEnd: []byte(r.Perm.RangeEnd),",
                "+\t\t\tPermType: r.Perm.PermType,",
                "+\t\t}",
                "+",
                "+\t\trole.KeyPermission = append(role.KeyPermission, newPerm)",
                "+\t\tsort.Sort(permSlice(role.KeyPermission))",
                "+\t}",
                "+",
                "+\tputRole(tx, role)",
                "+",
                "+\t// TODO(mitake): currently single role update invalidates every cache",
                "+\t// It should be optimized.",
                "+\tas.clearCachedPerm()",
                "+",
                "+\tas.commitRevision(tx)",
                "+",
                "+\tplog.Noticef(\"role %s's permission of key %s is updated as %s\", r.Name, r.Perm.Key, authpb.Permission_Type_name[int32(r.Perm.PermType)])",
                "+",
                "+\treturn &pb.AuthRoleGrantPermissionResponse{}, nil",
                "+}",
                "+",
                "+func (as *authStore) isOpPermitted(userName string, revision uint64, key, rangeEnd []byte, permTyp authpb.Permission_Type) error {",
                "+\t// TODO(mitake): this function would be costly so we need a caching mechanism",
                "+\tif !as.isAuthEnabled() {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\t// only gets rev == 0 when passed AuthInfo{}; no user given",
                "+\tif revision == 0 {",
                "+\t\treturn ErrUserEmpty",
                "+\t}",
                "+",
                "+\tif revision < as.Revision() {",
                "+\t\treturn ErrAuthOldRevision",
                "+\t}",
                "+",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tdefer tx.Unlock()",
                "+",
                "+\tuser := getUser(tx, userName)",
                "+\tif user == nil {",
                "+\t\tplog.Errorf(\"invalid user name %s for permission checking\", userName)",
                "+\t\treturn ErrPermissionDenied",
                "+\t}",
                "+",
                "+\t// root role should have permission on all ranges",
                "+\tif hasRootRole(user) {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tif as.isRangeOpPermitted(tx, userName, key, rangeEnd, permTyp) {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\treturn ErrPermissionDenied",
                "+}",
                "+",
                "+func (as *authStore) IsPutPermitted(authInfo *AuthInfo, key []byte) error {",
                "+\treturn as.isOpPermitted(authInfo.Username, authInfo.Revision, key, nil, authpb.WRITE)",
                "+}",
                "+",
                "+func (as *authStore) IsRangePermitted(authInfo *AuthInfo, key, rangeEnd []byte) error {",
                "+\treturn as.isOpPermitted(authInfo.Username, authInfo.Revision, key, rangeEnd, authpb.READ)",
                "+}",
                "+",
                "+func (as *authStore) IsDeleteRangePermitted(authInfo *AuthInfo, key, rangeEnd []byte) error {",
                "+\treturn as.isOpPermitted(authInfo.Username, authInfo.Revision, key, rangeEnd, authpb.WRITE)",
                "+}",
                "+",
                "+func (as *authStore) IsAdminPermitted(authInfo *AuthInfo) error {",
                "+\tif !as.isAuthEnabled() {",
                "+\t\treturn nil",
                "+\t}",
                "+\tif authInfo == nil {",
                "+\t\treturn ErrUserEmpty",
                "+\t}",
                "+",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tu := getUser(tx, authInfo.Username)",
                "+\ttx.Unlock()",
                "+",
                "+\tif u == nil {",
                "+\t\treturn ErrUserNotFound",
                "+\t}",
                "+",
                "+\tif !hasRootRole(u) {",
                "+\t\treturn ErrPermissionDenied",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func getUser(tx backend.BatchTx, username string) *authpb.User {",
                "+\t_, vs := tx.UnsafeRange(authUsersBucketName, []byte(username), nil, 0)",
                "+\tif len(vs) == 0 {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tuser := &authpb.User{}",
                "+\terr := user.Unmarshal(vs[0])",
                "+\tif err != nil {",
                "+\t\tplog.Panicf(\"failed to unmarshal user struct (name: %s): %s\", username, err)",
                "+\t}",
                "+\treturn user",
                "+}",
                "+",
                "+func getAllUsers(tx backend.BatchTx) []*authpb.User {",
                "+\t_, vs := tx.UnsafeRange(authUsersBucketName, []byte{0}, []byte{0xff}, -1)",
                "+\tif len(vs) == 0 {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\tusers := make([]*authpb.User, len(vs))",
                "+\tfor i := range vs {",
                "+\t\tuser := &authpb.User{}",
                "+\t\terr := user.Unmarshal(vs[i])",
                "+\t\tif err != nil {",
                "+\t\t\tplog.Panicf(\"failed to unmarshal user struct: %s\", err)",
                "+\t\t}",
                "+\t\tusers[i] = user",
                "+\t}",
                "+\treturn users",
                "+}",
                "+",
                "+func putUser(tx backend.BatchTx, user *authpb.User) {",
                "+\tb, err := user.Marshal()",
                "+\tif err != nil {",
                "+\t\tplog.Panicf(\"failed to marshal user struct (name: %s): %s\", user.Name, err)",
                "+\t}",
                "+\ttx.UnsafePut(authUsersBucketName, user.Name, b)",
                "+}",
                "+",
                "+func delUser(tx backend.BatchTx, username string) {",
                "+\ttx.UnsafeDelete(authUsersBucketName, []byte(username))",
                "+}",
                "+",
                "+func getRole(tx backend.BatchTx, rolename string) *authpb.Role {",
                "+\t_, vs := tx.UnsafeRange(authRolesBucketName, []byte(rolename), nil, 0)",
                "+\tif len(vs) == 0 {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\trole := &authpb.Role{}",
                "+\terr := role.Unmarshal(vs[0])",
                "+\tif err != nil {",
                "+\t\tplog.Panicf(\"failed to unmarshal role struct (name: %s): %s\", rolename, err)",
                "+\t}",
                "+\treturn role",
                "+}",
                "+",
                "+func getAllRoles(tx backend.BatchTx) []*authpb.Role {",
                "+\t_, vs := tx.UnsafeRange(authRolesBucketName, []byte{0}, []byte{0xff}, -1)",
                "+\tif len(vs) == 0 {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\troles := make([]*authpb.Role, len(vs))",
                "+\tfor i := range vs {",
                "+\t\trole := &authpb.Role{}",
                "+\t\terr := role.Unmarshal(vs[i])",
                "+\t\tif err != nil {",
                "+\t\t\tplog.Panicf(\"failed to unmarshal role struct: %s\", err)",
                "+\t\t}",
                "+\t\troles[i] = role",
                "+\t}",
                "+\treturn roles",
                "+}",
                "+",
                "+func putRole(tx backend.BatchTx, role *authpb.Role) {",
                "+\tb, err := role.Marshal()",
                "+\tif err != nil {",
                "+\t\tplog.Panicf(\"failed to marshal role struct (name: %s): %s\", role.Name, err)",
                "+\t}",
                "+",
                "+\ttx.UnsafePut(authRolesBucketName, []byte(role.Name), b)",
                "+}",
                "+",
                "+func delRole(tx backend.BatchTx, rolename string) {",
                "+\ttx.UnsafeDelete(authRolesBucketName, []byte(rolename))",
                "+}",
                "+",
                "+func (as *authStore) isAuthEnabled() bool {",
                "+\tas.enabledMu.RLock()",
                "+\tdefer as.enabledMu.RUnlock()",
                "+\treturn as.enabled",
                "+}",
                "+",
                "+func NewAuthStore(be backend.Backend, tp TokenProvider) *authStore {",
                "+\ttx := be.BatchTx()",
                "+\ttx.Lock()",
                "+",
                "+\ttx.UnsafeCreateBucket(authBucketName)",
                "+\ttx.UnsafeCreateBucket(authUsersBucketName)",
                "+\ttx.UnsafeCreateBucket(authRolesBucketName)",
                "+",
                "+\tenabled := false",
                "+\t_, vs := tx.UnsafeRange(authBucketName, enableFlagKey, nil, 0)",
                "+\tif len(vs) == 1 {",
                "+\t\tif bytes.Equal(vs[0], authEnabled) {",
                "+\t\t\tenabled = true",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tas := &authStore{",
                "+\t\tbe:             be,",
                "+\t\trevision:       getRevision(tx),",
                "+\t\tenabled:        enabled,",
                "+\t\trangePermCache: make(map[string]*unifiedRangePermissions),",
                "+\t\ttokenProvider:  tp,",
                "+\t}",
                "+",
                "+\tif enabled {",
                "+\t\tas.tokenProvider.enable()",
                "+\t}",
                "+",
                "+\tif as.Revision() == 0 {",
                "+\t\tas.commitRevision(tx)",
                "+\t}",
                "+",
                "+\ttx.Unlock()",
                "+\tbe.ForceCommit()",
                "+",
                "+\treturn as",
                "+}",
                "+",
                "+func hasRootRole(u *authpb.User) bool {",
                "+\t// u.Roles is sorted in UserGrantRole(), so we can use binary search.",
                "+\tidx := sort.SearchStrings(u.Roles, rootRole)",
                "+\treturn idx != len(u.Roles) && u.Roles[idx] == rootRole",
                "+}",
                "+",
                "+func (as *authStore) commitRevision(tx backend.BatchTx) {",
                "+\tatomic.AddUint64(&as.revision, 1)",
                "+\trevBytes := make([]byte, revBytesLen)",
                "+\tbinary.BigEndian.PutUint64(revBytes, as.Revision())",
                "+\ttx.UnsafePut(authBucketName, revisionKey, revBytes)",
                "+}",
                "+",
                "+func getRevision(tx backend.BatchTx) uint64 {",
                "+\t_, vs := tx.UnsafeRange(authBucketName, []byte(revisionKey), nil, 0)",
                "+\tif len(vs) != 1 {",
                "+\t\t// this can happen in the initialization phase",
                "+\t\treturn 0",
                "+\t}",
                "+",
                "+\treturn binary.BigEndian.Uint64(vs[0])",
                "+}",
                "+",
                "+func (as *authStore) setRevision(rev uint64) {",
                "+\tatomic.StoreUint64(&as.revision, rev)",
                "+}",
                "+",
                "+func (as *authStore) Revision() uint64 {",
                "+\treturn atomic.LoadUint64(&as.revision)",
                "+}",
                "+",
                "+func (as *authStore) AuthInfoFromTLS(ctx context.Context) *AuthInfo {",
                "+\tpeer, ok := peer.FromContext(ctx)",
                "+\tif !ok || peer == nil || peer.AuthInfo == nil {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\ttlsInfo := peer.AuthInfo.(credentials.TLSInfo)",
                "+\tfor _, chains := range tlsInfo.State.VerifiedChains {",
                "+\t\tfor _, chain := range chains {",
                "+\t\t\tcn := chain.Subject.CommonName",
                "+\t\t\tplog.Debugf(\"found common name %s\", cn)",
                "+",
                "+\t\t\treturn &AuthInfo{",
                "+\t\t\t\tUsername: cn,",
                "+\t\t\t\tRevision: as.Revision(),",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn nil",
                "+}",
                "+",
                "+func (as *authStore) AuthInfoFromCtx(ctx context.Context) (*AuthInfo, error) {",
                "+\tmd, ok := metadata.FromIncomingContext(ctx)",
                "+\tif !ok {",
                "+\t\treturn nil, nil",
                "+\t}",
                "+",
                "+\t//TODO(mitake|hexfusion) review unifying key names",
                "+\tts, ok := md[\"token\"]",
                "+\tif !ok {",
                "+\t\tts, ok = md[\"authorization\"]",
                "+\t}",
                "+\tif !ok {",
                "+\t\treturn nil, nil",
                "+\t}",
                "+",
                "+\ttoken := ts[0]",
                "+\tauthInfo, uok := as.authInfoFromToken(ctx, token)",
                "+\tif !uok {",
                "+\t\tplog.Warningf(\"invalid auth token: %s\", token)",
                "+\t\treturn nil, ErrInvalidAuthToken",
                "+\t}",
                "+",
                "+\treturn authInfo, nil",
                "+}",
                "+",
                "+func (as *authStore) GenTokenPrefix() (string, error) {",
                "+\treturn as.tokenProvider.genTokenPrefix()",
                "+}",
                "+",
                "+func decomposeOpts(optstr string) (string, map[string]string, error) {",
                "+\topts := strings.Split(optstr, \",\")",
                "+\ttokenType := opts[0]",
                "+",
                "+\ttypeSpecificOpts := make(map[string]string)",
                "+\tfor i := 1; i < len(opts); i++ {",
                "+\t\tpair := strings.Split(opts[i], \"=\")",
                "+",
                "+\t\tif len(pair) != 2 {",
                "+\t\t\tplog.Errorf(\"invalid token specific option: %s\", optstr)",
                "+\t\t\treturn \"\", nil, ErrInvalidAuthOpts",
                "+\t\t}",
                "+",
                "+\t\tif _, ok := typeSpecificOpts[pair[0]]; ok {",
                "+\t\t\tplog.Errorf(\"invalid token specific option, duplicated parameters (%s): %s\", pair[0], optstr)",
                "+\t\t\treturn \"\", nil, ErrInvalidAuthOpts",
                "+\t\t}",
                "+",
                "+\t\ttypeSpecificOpts[pair[0]] = pair[1]",
                "+\t}",
                "+",
                "+\treturn tokenType, typeSpecificOpts, nil",
                "+",
                "+}",
                "+",
                "+func NewTokenProvider(tokenOpts string, indexWaiter func(uint64) <-chan struct{}) (TokenProvider, error) {",
                "+\ttokenType, typeSpecificOpts, err := decomposeOpts(tokenOpts)",
                "+\tif err != nil {",
                "+\t\treturn nil, ErrInvalidAuthOpts",
                "+\t}",
                "+",
                "+\tswitch tokenType {",
                "+\tcase \"simple\":",
                "+\t\tplog.Warningf(\"simple token is not cryptographically signed\")",
                "+\t\treturn newTokenProviderSimple(indexWaiter), nil",
                "+\tcase \"jwt\":",
                "+\t\treturn newTokenProviderJWT(typeSpecificOpts)",
                "+\tdefault:",
                "+\t\tplog.Errorf(\"unknown token type: %s\", tokenType)",
                "+\t\treturn nil, ErrInvalidAuthOpts",
                "+\t}",
                "+}",
                "+",
                "+func (as *authStore) WithRoot(ctx context.Context) context.Context {",
                "+\tif !as.isAuthEnabled() {",
                "+\t\treturn ctx",
                "+\t}",
                "+",
                "+\tvar ctxForAssign context.Context",
                "+\tif ts := as.tokenProvider.(*tokenSimple); ts != nil {",
                "+\t\tctx1 := context.WithValue(ctx, AuthenticateParamIndex{}, uint64(0))",
                "+\t\tprefix, err := ts.genTokenPrefix()",
                "+\t\tif err != nil {",
                "+\t\t\tplog.Errorf(\"failed to generate prefix of internally used token\")",
                "+\t\t\treturn ctx",
                "+\t\t}",
                "+\t\tctxForAssign = context.WithValue(ctx1, AuthenticateParamSimpleTokenPrefix{}, prefix)",
                "+\t} else {",
                "+\t\tctxForAssign = ctx",
                "+\t}",
                "+",
                "+\ttoken, err := as.tokenProvider.assign(ctxForAssign, \"root\", as.Revision())",
                "+\tif err != nil {",
                "+\t\t// this must not happen",
                "+\t\tplog.Errorf(\"failed to assign token for lease revoking: %s\", err)",
                "+\t\treturn ctx",
                "+\t}",
                "+",
                "+\tmdMap := map[string]string{",
                "+\t\t\"token\": token,",
                "+\t}",
                "+\ttokenMD := metadata.New(mdMap)",
                "+",
                "+\t// use \"mdIncomingKey{}\" since it's called from local etcdserver",
                "+\treturn metadata.NewIncomingContext(ctx, tokenMD)",
                "+}",
                "+",
                "+func (as *authStore) HasRole(user, role string) bool {",
                "+\ttx := as.be.BatchTx()",
                "+\ttx.Lock()",
                "+\tu := getUser(tx, user)",
                "+\ttx.Unlock()",
                "+",
                "+\tif u == nil {",
                "+\t\tplog.Warningf(\"tried to check user %s has role %s, but user %s doesn't exist\", user, role, user)",
                "+\t\treturn false",
                "+\t}",
                "+",
                "+\tfor _, r := range u.Roles {",
                "+\t\tif role == r {",
                "+\t\t\treturn true",
                "+\t\t}",
                "+\t}",
                "+",
                "+\treturn false",
                "+}",
                "diff --git a/auth/store_test.go b/auth/store_test.go",
                "new file mode 100644",
                "index 000000000..739d8fcde",
                "--- /dev/null",
                "+++ b/auth/store_test.go",
                "@@ -0,0 +1,734 @@",
                "+// Copyright 2016 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package auth",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"fmt\"",
                "+\t\"os\"",
                "+\t\"reflect\"",
                "+\t\"strings\"",
                "+\t\"sync\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/auth/authpb\"",
                "+\tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "+\t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "+",
                "+\t\"golang.org/x/crypto/bcrypt\"",
                "+\t\"google.golang.org/grpc/metadata\"",
                "+)",
                "+",
                "+func init() { BcryptCost = bcrypt.MinCost }",
                "+",
                "+func dummyIndexWaiter(index uint64) <-chan struct{} {",
                "+\tch := make(chan struct{})",
                "+\tgo func() {",
                "+\t\tch <- struct{}{}",
                "+\t}()",
                "+\treturn ch",
                "+}",
                "+",
                "+// TestNewAuthStoreRevision ensures newly auth store",
                "+// keeps the old revision when there are no changes.",
                "+func TestNewAuthStoreRevision(t *testing.T) {",
                "+\tb, tPath := backend.NewDefaultTmpBackend()",
                "+\tdefer os.Remove(tPath)",
                "+",
                "+\ttp, err := NewTokenProvider(\"simple\", dummyIndexWaiter)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tas := NewAuthStore(b, tp)",
                "+\terr = enableAuthAndCreateRoot(as)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\told := as.Revision()",
                "+\tb.Close()",
                "+\tas.Close()",
                "+",
                "+\t// no changes to commit",
                "+\tb2 := backend.NewDefaultBackend(tPath)",
                "+\tas = NewAuthStore(b2, tp)",
                "+\tnew := as.Revision()",
                "+\tb2.Close()",
                "+\tas.Close()",
                "+",
                "+\tif old != new {",
                "+\t\tt.Fatalf(\"expected revision %d, got %d\", old, new)",
                "+\t}",
                "+}",
                "+",
                "+func setupAuthStore(t *testing.T) (store *authStore, teardownfunc func(t *testing.T)) {",
                "+\tb, tPath := backend.NewDefaultTmpBackend()",
                "+",
                "+\ttp, err := NewTokenProvider(\"simple\", dummyIndexWaiter)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tas := NewAuthStore(b, tp)",
                "+\terr = enableAuthAndCreateRoot(as)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t// adds a new role",
                "+\t_, err = as.RoleAdd(&pb.AuthRoleAddRequest{Name: \"role-test\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tua := &pb.AuthUserAddRequest{Name: \"foo\", Password: \"bar\"}",
                "+\t_, err = as.UserAdd(ua) // add a non-existing user",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\ttearDown := func(t *testing.T) {",
                "+\t\tb.Close()",
                "+\t\tos.Remove(tPath)",
                "+\t\tas.Close()",
                "+\t}",
                "+\treturn as, tearDown",
                "+}",
                "+",
                "+func enableAuthAndCreateRoot(as *authStore) error {",
                "+\t_, err := as.UserAdd(&pb.AuthUserAddRequest{Name: \"root\", Password: \"root\"})",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\t_, err = as.RoleAdd(&pb.AuthRoleAddRequest{Name: \"root\"})",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\t_, err = as.UserGrantRole(&pb.AuthUserGrantRoleRequest{User: \"root\", Role: \"root\"})",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\treturn as.AuthEnable()",
                "+}",
                "+",
                "+func TestUserAdd(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\tua := &pb.AuthUserAddRequest{Name: \"foo\"}",
                "+\t_, err := as.UserAdd(ua) // add an existing user",
                "+\tif err == nil {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrUserAlreadyExist, err)",
                "+\t}",
                "+\tif err != ErrUserAlreadyExist {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrUserAlreadyExist, err)",
                "+\t}",
                "+",
                "+\tua = &pb.AuthUserAddRequest{Name: \"\"}",
                "+\t_, err = as.UserAdd(ua) // add a user with empty name",
                "+\tif err != ErrUserEmpty {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+}",
                "+",
                "+func TestCheckPassword(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t// auth a non-existing user",
                "+\t_, err := as.CheckPassword(\"foo-test\", \"bar\")",
                "+\tif err == nil {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrAuthFailed, err)",
                "+\t}",
                "+\tif err != ErrAuthFailed {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrAuthFailed, err)",
                "+\t}",
                "+",
                "+\t// auth an existing user with correct password",
                "+\t_, err = as.CheckPassword(\"foo\", \"bar\")",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t// auth an existing user but with wrong password",
                "+\t_, err = as.CheckPassword(\"foo\", \"\")",
                "+\tif err == nil {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrAuthFailed, err)",
                "+\t}",
                "+\tif err != ErrAuthFailed {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrAuthFailed, err)",
                "+\t}",
                "+}",
                "+",
                "+func TestUserDelete(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t// delete an existing user",
                "+\tud := &pb.AuthUserDeleteRequest{Name: \"foo\"}",
                "+\t_, err := as.UserDelete(ud)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t// delete a non-existing user",
                "+\t_, err = as.UserDelete(ud)",
                "+\tif err == nil {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrUserNotFound, err)",
                "+\t}",
                "+\tif err != ErrUserNotFound {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrUserNotFound, err)",
                "+\t}",
                "+}",
                "+",
                "+func TestUserChangePassword(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\tctx1 := context.WithValue(context.WithValue(context.TODO(), AuthenticateParamIndex{}, uint64(1)), AuthenticateParamSimpleTokenPrefix{}, \"dummy\")",
                "+\t_, err := as.Authenticate(ctx1, \"foo\", \"bar\")",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t_, err = as.UserChangePassword(&pb.AuthUserChangePasswordRequest{Name: \"foo\", Password: \"baz\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tctx2 := context.WithValue(context.WithValue(context.TODO(), AuthenticateParamIndex{}, uint64(2)), AuthenticateParamSimpleTokenPrefix{}, \"dummy\")",
                "+\t_, err = as.Authenticate(ctx2, \"foo\", \"baz\")",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t// change a non-existing user",
                "+\t_, err = as.UserChangePassword(&pb.AuthUserChangePasswordRequest{Name: \"foo-test\", Password: \"bar\"})",
                "+\tif err == nil {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrUserNotFound, err)",
                "+\t}",
                "+\tif err != ErrUserNotFound {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrUserNotFound, err)",
                "+\t}",
                "+}",
                "+",
                "+func TestRoleAdd(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t// adds a new role",
                "+\t_, err := as.RoleAdd(&pb.AuthRoleAddRequest{Name: \"role-test-1\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+}",
                "+",
                "+func TestUserGrant(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t// grants a role to the user",
                "+\t_, err := as.UserGrantRole(&pb.AuthUserGrantRoleRequest{User: \"foo\", Role: \"role-test\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t// grants a role to a non-existing user",
                "+\t_, err = as.UserGrantRole(&pb.AuthUserGrantRoleRequest{User: \"foo-test\", Role: \"role-test\"})",
                "+\tif err == nil {",
                "+\t\tt.Errorf(\"expected %v, got %v\", ErrUserNotFound, err)",
                "+\t}",
                "+\tif err != ErrUserNotFound {",
                "+\t\tt.Errorf(\"expected %v, got %v\", ErrUserNotFound, err)",
                "+\t}",
                "+}",
                "+",
                "+func TestGetUser(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t_, err := as.UserGrantRole(&pb.AuthUserGrantRoleRequest{User: \"foo\", Role: \"role-test\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tu, err := as.UserGet(&pb.AuthUserGetRequest{Name: \"foo\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif u == nil {",
                "+\t\tt.Fatal(\"expect user not nil, got nil\")",
                "+\t}",
                "+\texpected := []string{\"role-test\"}",
                "+\tif !reflect.DeepEqual(expected, u.Roles) {",
                "+\t\tt.Errorf(\"expected %v, got %v\", expected, u.Roles)",
                "+\t}",
                "+}",
                "+",
                "+func TestListUsers(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\tua := &pb.AuthUserAddRequest{Name: \"user1\", Password: \"pwd1\"}",
                "+\t_, err := as.UserAdd(ua) // add a non-existing user",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tul, err := as.UserList(&pb.AuthUserListRequest{})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif !contains(ul.Users, \"root\") {",
                "+\t\tt.Errorf(\"expected %v in %v\", \"root\", ul.Users)",
                "+\t}",
                "+\tif !contains(ul.Users, \"user1\") {",
                "+\t\tt.Errorf(\"expected %v in %v\", \"user1\", ul.Users)",
                "+\t}",
                "+}",
                "+",
                "+func TestRoleGrantPermission(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t_, err := as.RoleAdd(&pb.AuthRoleAddRequest{Name: \"role-test-1\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tperm := &authpb.Permission{",
                "+\t\tPermType: authpb.WRITE,",
                "+\t\tKey:      []byte(\"Keys\"),",
                "+\t\tRangeEnd: []byte(\"RangeEnd\"),",
                "+\t}",
                "+\t_, err = as.RoleGrantPermission(&pb.AuthRoleGrantPermissionRequest{",
                "+\t\tName: \"role-test-1\",",
                "+\t\tPerm: perm,",
                "+\t})",
                "+",
                "+\tif err != nil {",
                "+\t\tt.Error(err)",
                "+\t}",
                "+",
                "+\tr, err := as.RoleGet(&pb.AuthRoleGetRequest{Role: \"role-test-1\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tif !reflect.DeepEqual(perm, r.Perm[0]) {",
                "+\t\tt.Errorf(\"expected %v, got %v\", perm, r.Perm[0])",
                "+\t}",
                "+}",
                "+",
                "+func TestRoleRevokePermission(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t_, err := as.RoleAdd(&pb.AuthRoleAddRequest{Name: \"role-test-1\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tperm := &authpb.Permission{",
                "+\t\tPermType: authpb.WRITE,",
                "+\t\tKey:      []byte(\"Keys\"),",
                "+\t\tRangeEnd: []byte(\"RangeEnd\"),",
                "+\t}",
                "+\t_, err = as.RoleGrantPermission(&pb.AuthRoleGrantPermissionRequest{",
                "+\t\tName: \"role-test-1\",",
                "+\t\tPerm: perm,",
                "+\t})",
                "+",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t_, err = as.RoleGet(&pb.AuthRoleGetRequest{Role: \"role-test-1\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t_, err = as.RoleRevokePermission(&pb.AuthRoleRevokePermissionRequest{",
                "+\t\tRole:     \"role-test-1\",",
                "+\t\tKey:      \"Keys\",",
                "+\t\tRangeEnd: \"RangeEnd\",",
                "+\t})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tvar r *pb.AuthRoleGetResponse",
                "+\tr, err = as.RoleGet(&pb.AuthRoleGetRequest{Role: \"role-test-1\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif len(r.Perm) != 0 {",
                "+\t\tt.Errorf(\"expected %v, got %v\", 0, len(r.Perm))",
                "+\t}",
                "+}",
                "+",
                "+func TestUserRevokePermission(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t_, err := as.RoleAdd(&pb.AuthRoleAddRequest{Name: \"role-test-1\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t_, err = as.UserGrantRole(&pb.AuthUserGrantRoleRequest{User: \"foo\", Role: \"role-test\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\t_, err = as.UserGrantRole(&pb.AuthUserGrantRoleRequest{User: \"foo\", Role: \"role-test-1\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tu, err := as.UserGet(&pb.AuthUserGetRequest{Name: \"foo\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\texpected := []string{\"role-test\", \"role-test-1\"}",
                "+\tif !reflect.DeepEqual(expected, u.Roles) {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", expected, u.Roles)",
                "+\t}",
                "+",
                "+\t_, err = as.UserRevokeRole(&pb.AuthUserRevokeRoleRequest{Name: \"foo\", Role: \"role-test-1\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tu, err = as.UserGet(&pb.AuthUserGetRequest{Name: \"foo\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\texpected = []string{\"role-test\"}",
                "+\tif !reflect.DeepEqual(expected, u.Roles) {",
                "+\t\tt.Errorf(\"expected %v, got %v\", expected, u.Roles)",
                "+\t}",
                "+}",
                "+",
                "+func TestRoleDelete(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t_, err := as.RoleDelete(&pb.AuthRoleDeleteRequest{Role: \"role-test\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\trl, err := as.RoleList(&pb.AuthRoleListRequest{})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\texpected := []string{\"root\"}",
                "+\tif !reflect.DeepEqual(expected, rl.Roles) {",
                "+\t\tt.Errorf(\"expected %v, got %v\", expected, rl.Roles)",
                "+\t}",
                "+}",
                "+",
                "+func TestAuthInfoFromCtx(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\tctx := context.Background()",
                "+\tai, err := as.AuthInfoFromCtx(ctx)",
                "+\tif err != nil && ai != nil {",
                "+\t\tt.Errorf(\"expected (nil, nil), got (%v, %v)\", ai, err)",
                "+\t}",
                "+",
                "+\t// as if it came from RPC",
                "+\tctx = metadata.NewIncomingContext(context.Background(), metadata.New(map[string]string{\"tokens\": \"dummy\"}))",
                "+\tai, err = as.AuthInfoFromCtx(ctx)",
                "+\tif err != nil && ai != nil {",
                "+\t\tt.Errorf(\"expected (nil, nil), got (%v, %v)\", ai, err)",
                "+\t}",
                "+",
                "+\tctx = context.WithValue(context.WithValue(context.TODO(), AuthenticateParamIndex{}, uint64(1)), AuthenticateParamSimpleTokenPrefix{}, \"dummy\")",
                "+\tresp, err := as.Authenticate(ctx, \"foo\", \"bar\")",
                "+\tif err != nil {",
                "+\t\tt.Error(err)",
                "+\t}",
                "+",
                "+\tctx = metadata.NewIncomingContext(context.Background(), metadata.New(map[string]string{\"token\": \"Invalid Token\"}))",
                "+\t_, err = as.AuthInfoFromCtx(ctx)",
                "+\tif err != ErrInvalidAuthToken {",
                "+\t\tt.Errorf(\"expected %v, got %v\", ErrInvalidAuthToken, err)",
                "+\t}",
                "+",
                "+\tctx = metadata.NewIncomingContext(context.Background(), metadata.New(map[string]string{\"token\": \"Invalid.Token\"}))",
                "+\t_, err = as.AuthInfoFromCtx(ctx)",
                "+\tif err != ErrInvalidAuthToken {",
                "+\t\tt.Errorf(\"expected %v, got %v\", ErrInvalidAuthToken, err)",
                "+\t}",
                "+",
                "+\tctx = metadata.NewIncomingContext(context.Background(), metadata.New(map[string]string{\"token\": resp.Token}))",
                "+\tai, err = as.AuthInfoFromCtx(ctx)",
                "+\tif err != nil {",
                "+\t\tt.Error(err)",
                "+\t}",
                "+\tif ai.Username != \"foo\" {",
                "+\t\tt.Errorf(\"expected %v, got %v\", \"foo\", ai.Username)",
                "+\t}",
                "+}",
                "+",
                "+func TestAuthDisable(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\tas.AuthDisable()",
                "+\tctx := context.WithValue(context.WithValue(context.TODO(), AuthenticateParamIndex{}, uint64(2)), AuthenticateParamSimpleTokenPrefix{}, \"dummy\")",
                "+\t_, err := as.Authenticate(ctx, \"foo\", \"bar\")",
                "+\tif err != ErrAuthNotEnabled {",
                "+\t\tt.Errorf(\"expected %v, got %v\", ErrAuthNotEnabled, err)",
                "+\t}",
                "+",
                "+\t// Disabling disabled auth to make sure it can return safely if store is already disabled.",
                "+\tas.AuthDisable()",
                "+\t_, err = as.Authenticate(ctx, \"foo\", \"bar\")",
                "+\tif err != ErrAuthNotEnabled {",
                "+\t\tt.Errorf(\"expected %v, got %v\", ErrAuthNotEnabled, err)",
                "+\t}",
                "+}",
                "+",
                "+// TestAuthRevisionRace ensures that access to authStore.revision is thread-safe.",
                "+func TestAuthInfoFromCtxRace(t *testing.T) {",
                "+\tb, tPath := backend.NewDefaultTmpBackend()",
                "+\tdefer os.Remove(tPath)",
                "+",
                "+\ttp, err := NewTokenProvider(\"simple\", dummyIndexWaiter)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tas := NewAuthStore(b, tp)",
                "+\tdefer as.Close()",
                "+",
                "+\tdonec := make(chan struct{})",
                "+\tgo func() {",
                "+\t\tdefer close(donec)",
                "+\t\tctx := metadata.NewIncomingContext(context.Background(), metadata.New(map[string]string{\"token\": \"test\"}))",
                "+\t\tas.AuthInfoFromCtx(ctx)",
                "+\t}()",
                "+\tas.UserAdd(&pb.AuthUserAddRequest{Name: \"test\"})",
                "+\t<-donec",
                "+}",
                "+",
                "+func TestIsAdminPermitted(t *testing.T) {",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\terr := as.IsAdminPermitted(&AuthInfo{Username: \"root\", Revision: 1})",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"expected nil, got %v\", err)",
                "+\t}",
                "+",
                "+\t// invalid user",
                "+\terr = as.IsAdminPermitted(&AuthInfo{Username: \"rooti\", Revision: 1})",
                "+\tif err != ErrUserNotFound {",
                "+\t\tt.Errorf(\"expected %v, got %v\", ErrUserNotFound, err)",
                "+\t}",
                "+",
                "+\t// non-admin user",
                "+\terr = as.IsAdminPermitted(&AuthInfo{Username: \"foo\", Revision: 1})",
                "+\tif err != ErrPermissionDenied {",
                "+\t\tt.Errorf(\"expected %v, got %v\", ErrPermissionDenied, err)",
                "+\t}",
                "+",
                "+\t// disabled auth should return nil",
                "+\tas.AuthDisable()",
                "+\terr = as.IsAdminPermitted(&AuthInfo{Username: \"root\", Revision: 1})",
                "+\tif err != nil {",
                "+\t\tt.Errorf(\"expected nil, got %v\", err)",
                "+\t}",
                "+}",
                "+",
                "+func TestRecoverFromSnapshot(t *testing.T) {",
                "+\tas, _ := setupAuthStore(t)",
                "+",
                "+\tua := &pb.AuthUserAddRequest{Name: \"foo\"}",
                "+\t_, err := as.UserAdd(ua) // add an existing user",
                "+\tif err == nil {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrUserAlreadyExist, err)",
                "+\t}",
                "+\tif err != ErrUserAlreadyExist {",
                "+\t\tt.Fatalf(\"expected %v, got %v\", ErrUserAlreadyExist, err)",
                "+\t}",
                "+",
                "+\tua = &pb.AuthUserAddRequest{Name: \"\"}",
                "+\t_, err = as.UserAdd(ua) // add a user with empty name",
                "+\tif err != ErrUserEmpty {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tas.Close()",
                "+",
                "+\ttp, err := NewTokenProvider(\"simple\", dummyIndexWaiter)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tas2 := NewAuthStore(as.be, tp)",
                "+\tdefer func(a *authStore) {",
                "+\t\ta.Close()",
                "+\t}(as2)",
                "+",
                "+\tif !as2.isAuthEnabled() {",
                "+\t\tt.Fatal(\"recovering authStore from existing backend failed\")",
                "+\t}",
                "+",
                "+\tul, err := as.UserList(&pb.AuthUserListRequest{})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tif !contains(ul.Users, \"root\") {",
                "+\t\tt.Errorf(\"expected %v in %v\", \"root\", ul.Users)",
                "+\t}",
                "+}",
                "+",
                "+func contains(array []string, str string) bool {",
                "+\tfor _, s := range array {",
                "+\t\tif s == str {",
                "+\t\t\treturn true",
                "+\t\t}",
                "+\t}",
                "+\treturn false",
                "+}",
                "+",
                "+func TestHammerSimpleAuthenticate(t *testing.T) {",
                "+\t// set TTL values low to try to trigger races",
                "+\toldTTL, oldTTLRes := simpleTokenTTL, simpleTokenTTLResolution",
                "+\tdefer func() {",
                "+\t\tsimpleTokenTTL = oldTTL",
                "+\t\tsimpleTokenTTLResolution = oldTTLRes",
                "+\t}()",
                "+\tsimpleTokenTTL = 10 * time.Millisecond",
                "+\tsimpleTokenTTLResolution = simpleTokenTTL",
                "+\tusers := make(map[string]struct{})",
                "+",
                "+\tas, tearDown := setupAuthStore(t)",
                "+\tdefer tearDown(t)",
                "+",
                "+\t// create lots of users",
                "+\tfor i := 0; i < 50; i++ {",
                "+\t\tu := fmt.Sprintf(\"user-%d\", i)",
                "+\t\tua := &pb.AuthUserAddRequest{Name: u, Password: \"123\"}",
                "+\t\tif _, err := as.UserAdd(ua); err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t\tusers[u] = struct{}{}",
                "+\t}",
                "+",
                "+\t// hammer on authenticate with lots of users",
                "+\tfor i := 0; i < 10; i++ {",
                "+\t\tvar wg sync.WaitGroup",
                "+\t\twg.Add(len(users))",
                "+\t\tfor u := range users {",
                "+\t\t\tgo func(user string) {",
                "+\t\t\t\tdefer wg.Done()",
                "+\t\t\t\ttoken := fmt.Sprintf(\"%s(%d)\", user, i)",
                "+\t\t\t\tctx := context.WithValue(context.WithValue(context.TODO(), AuthenticateParamIndex{}, uint64(1)), AuthenticateParamSimpleTokenPrefix{}, token)",
                "+\t\t\t\tif _, err := as.Authenticate(ctx, user, \"123\"); err != nil {",
                "+\t\t\t\t\tt.Fatal(err)",
                "+\t\t\t\t}",
                "+\t\t\t\tif _, err := as.AuthInfoFromCtx(ctx); err != nil {",
                "+\t\t\t\t\tt.Fatal(err)",
                "+\t\t\t\t}",
                "+\t\t\t}(u)",
                "+\t\t}",
                "+\t\ttime.Sleep(time.Millisecond)",
                "+\t\twg.Wait()",
                "+\t}",
                "+}",
                "+",
                "+// TestRolesOrder tests authpb.User.Roles is sorted",
                "+func TestRolesOrder(t *testing.T) {",
                "+\tb, tPath := backend.NewDefaultTmpBackend()",
                "+\tdefer os.Remove(tPath)",
                "+",
                "+\ttp, err := NewTokenProvider(\"simple\", dummyIndexWaiter)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tas := NewAuthStore(b, tp)",
                "+\terr = enableAuthAndCreateRoot(as)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tusername := \"user\"",
                "+\t_, err = as.UserAdd(&pb.AuthUserAddRequest{Name: username, Password: \"pass\"})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\troles := []string{\"role1\", \"role2\", \"abc\", \"xyz\", \"role3\"}",
                "+\tfor _, role := range roles {",
                "+\t\t_, err = as.RoleAdd(&pb.AuthRoleAddRequest{Name: role})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+",
                "+\t\t_, err = as.UserGrantRole(&pb.AuthUserGrantRoleRequest{User: username, Role: role})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Fatal(err)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tuser, err := as.UserGet(&pb.AuthUserGetRequest{Name: username})",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tfor i := 1; i < len(user.Roles); i++ {",
                "+\t\tif strings.Compare(user.Roles[i-1], user.Roles[i]) != -1 {",
                "+\t\t\tt.Errorf(\"User.Roles isn't sorted (%s vs %s)\", user.Roles[i-1], user.Roles[i])",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+// TestAuthInfoFromCtxWithRoot ensures \"WithRoot\" properly embeds token in the context.",
                "+func TestAuthInfoFromCtxWithRoot(t *testing.T) {",
                "+\tb, tPath := backend.NewDefaultTmpBackend()",
                "+\tdefer os.Remove(tPath)",
                "+",
                "+\ttp, err := NewTokenProvider(\"simple\", dummyIndexWaiter)",
                "+\tif err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+\tas := NewAuthStore(b, tp)",
                "+\tdefer as.Close()",
                "+",
                "+\tif err = enableAuthAndCreateRoot(as); err != nil {",
                "+\t\tt.Fatal(err)",
                "+\t}",
                "+",
                "+\tctx := context.Background()",
                "+\tctx = as.WithRoot(ctx)",
                "+",
                "+\tai, aerr := as.AuthInfoFromCtx(ctx)",
                "+\tif aerr != nil {",
                "+\t\tt.Error(err)",
                "+\t}",
                "+\tif ai == nil {",
                "+\t\tt.Error(\"expected non-nil *AuthInfo\")",
                "+\t}",
                "+\tif ai.Username != \"root\" {",
                "+\t\tt.Errorf(\"expected user name 'root', got %+v\", ai)",
                "+\t}",
                "+}",
                "diff --git a/clientv3/auth.go b/clientv3/auth.go",
                "index 6ffe48b0c..7545bb6ca 100644",
                "--- a/clientv3/auth.go",
                "+++ b/clientv3/auth.go",
                "@@ -21,4 +21,4 @@ import (",
                "+\t\"github.com/coreos/etcd/auth/authpb\"",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/auth/authpb\"",
                "diff --git a/clientv3/main_test.go b/clientv3/main_test.go",
                "index cf5e6d697..3c525241d 100644",
                "--- a/clientv3/main_test.go",
                "+++ b/clientv3/main_test.go",
                "@@ -24,5 +24,6 @@ import (",
                "+\t\"github.com/coreos/etcd/auth\"",
                " \t\"github.com/coreos/etcd/integration\"",
                "-\t\"github.com/coreos/etcd/internal/auth\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "+",
                " \t\"golang.org/x/crypto/bcrypt\"",
                "diff --git a/embed/serve_test.go b/embed/serve_test.go",
                "index 55274d988..d46631fcf 100644",
                "--- a/embed/serve_test.go",
                "+++ b/embed/serve_test.go",
                "@@ -21,3 +21,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/auth\"",
                "+\t\"github.com/coreos/etcd/auth\"",
                " )",
                "diff --git a/etcdserver/api/v3rpc/maintenance.go b/etcdserver/api/v3rpc/maintenance.go",
                "index 5d724c3f6..dc40bedca 100644",
                "--- a/etcdserver/api/v3rpc/maintenance.go",
                "+++ b/etcdserver/api/v3rpc/maintenance.go",
                "@@ -21,2 +21,3 @@ import (",
                "+\t\"github.com/coreos/etcd/auth\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -24,3 +25,2 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/auth\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "diff --git a/etcdserver/api/v3rpc/util.go b/etcdserver/api/v3rpc/util.go",
                "index 5ad962a6a..bd092b3a1 100644",
                "--- a/etcdserver/api/v3rpc/util.go",
                "+++ b/etcdserver/api/v3rpc/util.go",
                "@@ -20,2 +20,3 @@ import (",
                "+\t\"github.com/coreos/etcd/auth\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -23,3 +24,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/auth\"",
                " \t\"github.com/coreos/etcd/internal/lease\"",
                "diff --git a/etcdserver/api/v3rpc/watch.go b/etcdserver/api/v3rpc/watch.go",
                "index 646d70f9f..45ce6bff0 100644",
                "--- a/etcdserver/api/v3rpc/watch.go",
                "+++ b/etcdserver/api/v3rpc/watch.go",
                "@@ -23,2 +23,3 @@ import (",
                "+\t\"github.com/coreos/etcd/auth\"",
                " \t\"github.com/coreos/etcd/etcdserver\"",
                "@@ -26,3 +27,2 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/auth\"",
                " \t\"github.com/coreos/etcd/internal/mvcc\"",
                "diff --git a/etcdserver/apply.go b/etcdserver/apply.go",
                "index 8b9bbb687..791750d8e 100644",
                "--- a/etcdserver/apply.go",
                "+++ b/etcdserver/apply.go",
                "@@ -22,4 +22,4 @@ import (",
                "+\t\"github.com/coreos/etcd/auth\"",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/auth\"",
                " \t\"github.com/coreos/etcd/internal/lease\"",
                "diff --git a/etcdserver/apply_auth.go b/etcdserver/apply_auth.go",
                "index 9f3516ee1..d95385af3 100644",
                "--- a/etcdserver/apply_auth.go",
                "+++ b/etcdserver/apply_auth.go",
                "@@ -19,4 +19,4 @@ import (",
                "+\t\"github.com/coreos/etcd/auth\"",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/auth\"",
                " \t\"github.com/coreos/etcd/internal/lease\"",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 6a4bcf9ca..4bfcdfd49 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -32,2 +32,3 @@ import (",
                " \t\"github.com/coreos/etcd/alarm\"",
                "+\t\"github.com/coreos/etcd/auth\"",
                " \t\"github.com/coreos/etcd/compactor\"",
                "@@ -39,3 +40,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "-\t\"github.com/coreos/etcd/internal/auth\"",
                " \t\"github.com/coreos/etcd/internal/lease\"",
                "diff --git a/etcdserver/v3_server.go b/etcdserver/v3_server.go",
                "index dd68eb5e9..eeabb10eb 100644",
                "--- a/etcdserver/v3_server.go",
                "+++ b/etcdserver/v3_server.go",
                "@@ -22,5 +22,5 @@ import (",
                "+\t\"github.com/coreos/etcd/auth\"",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/auth\"",
                " \t\"github.com/coreos/etcd/internal/lease\"",
                "diff --git a/integration/v3_auth_test.go b/integration/v3_auth_test.go",
                "index 2c80c743b..97017a07f 100644",
                "--- a/integration/v3_auth_test.go",
                "+++ b/integration/v3_auth_test.go",
                "@@ -23,2 +23,3 @@ import (",
                "+\t\"github.com/coreos/etcd/auth/authpb\"",
                " \t\"github.com/coreos/etcd/clientv3\"",
                "@@ -26,3 +27,2 @@ import (",
                " \tpb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",
                "-\t\"github.com/coreos/etcd/internal/auth/authpb\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\""
            ],
            "changed_files": [
                "auth/authpb/auth.pb.go",
                "auth/authpb/auth.proto",
                "auth/doc.go",
                "auth/jwt.go",
                "auth/jwt_test.go",
                "auth/range_perm_cache.go",
                "auth/range_perm_cache_test.go",
                "auth/simple_token.go",
                "auth/simple_token_test.go",
                "auth/store.go",
                "auth/store_test.go",
                "clientv3/auth.go",
                "clientv3/main_test.go",
                "embed/serve_test.go",
                "etcdserver/api/v3rpc/maintenance.go",
                "etcdserver/api/v3rpc/util.go",
                "etcdserver/api/v3rpc/watch.go",
                "etcdserver/apply.go",
                "etcdserver/apply_auth.go",
                "etcdserver/server.go",
                "etcdserver/v3_server.go",
                "integration/v3_auth_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0e65660548c4430be71d45988129f26e45fa6892",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519670055,
            "hunks": 6,
            "message": "*: revert \"internal/discovery\" change Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/discovery/discovery.go b/discovery/discovery.go",
                "new file mode 100644",
                "index 000000000..7d1fa0d05",
                "--- /dev/null",
                "+++ b/discovery/discovery.go",
                "@@ -0,0 +1,363 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package discovery provides an implementation of the cluster discovery that",
                "+// is used by etcd.",
                "+package discovery",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"errors\"",
                "+\t\"fmt\"",
                "+\t\"math\"",
                "+\t\"net/http\"",
                "+\t\"net/url\"",
                "+\t\"path\"",
                "+\t\"sort\"",
                "+\t\"strconv\"",
                "+\t\"strings\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/client\"",
                "+\t\"github.com/coreos/etcd/pkg/transport\"",
                "+\t\"github.com/coreos/etcd/pkg/types\"",
                "+",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+var (",
                "+\tplog = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"discovery\")",
                "+",
                "+\tErrInvalidURL           = errors.New(\"discovery: invalid URL\")",
                "+\tErrBadSizeKey           = errors.New(\"discovery: size key is bad\")",
                "+\tErrSizeNotFound         = errors.New(\"discovery: size key not found\")",
                "+\tErrTokenNotFound        = errors.New(\"discovery: token not found\")",
                "+\tErrDuplicateID          = errors.New(\"discovery: found duplicate id\")",
                "+\tErrDuplicateName        = errors.New(\"discovery: found duplicate name\")",
                "+\tErrFullCluster          = errors.New(\"discovery: cluster is full\")",
                "+\tErrTooManyRetries       = errors.New(\"discovery: too many retries\")",
                "+\tErrBadDiscoveryEndpoint = errors.New(\"discovery: bad discovery endpoint\")",
                "+)",
                "+",
                "+var (",
                "+\t// Number of retries discovery will attempt before giving up and erroring out.",
                "+\tnRetries             = uint(math.MaxUint32)",
                "+\tmaxExpoentialRetries = uint(8)",
                "+)",
                "+",
                "+// JoinCluster will connect to the discovery service at the given url, and",
                "+// register the server represented by the given id and config to the cluster",
                "+func JoinCluster(durl, dproxyurl string, id types.ID, config string) (string, error) {",
                "+\td, err := newDiscovery(durl, dproxyurl, id)",
                "+\tif err != nil {",
                "+\t\treturn \"\", err",
                "+\t}",
                "+\treturn d.joinCluster(config)",
                "+}",
                "+",
                "+// GetCluster will connect to the discovery service at the given url and",
                "+// retrieve a string describing the cluster",
                "+func GetCluster(durl, dproxyurl string) (string, error) {",
                "+\td, err := newDiscovery(durl, dproxyurl, 0)",
                "+\tif err != nil {",
                "+\t\treturn \"\", err",
                "+\t}",
                "+\treturn d.getCluster()",
                "+}",
                "+",
                "+type discovery struct {",
                "+\tcluster string",
                "+\tid      types.ID",
                "+\tc       client.KeysAPI",
                "+\tretries uint",
                "+\turl     *url.URL",
                "+",
                "+\tclock clockwork.Clock",
                "+}",
                "+",
                "+// newProxyFunc builds a proxy function from the given string, which should",
                "+// represent a URL that can be used as a proxy. It performs basic",
                "+// sanitization of the URL and returns any error encountered.",
                "+func newProxyFunc(proxy string) (func(*http.Request) (*url.URL, error), error) {",
                "+\tif proxy == \"\" {",
                "+\t\treturn nil, nil",
                "+\t}",
                "+\t// Do a small amount of URL sanitization to help the user",
                "+\t// Derived from net/http.ProxyFromEnvironment",
                "+\tproxyURL, err := url.Parse(proxy)",
                "+\tif err != nil || !strings.HasPrefix(proxyURL.Scheme, \"http\") {",
                "+\t\t// proxy was bogus. Try prepending \"http://\" to it and",
                "+\t\t// see if that parses correctly. If not, we ignore the",
                "+\t\t// error and complain about the original one",
                "+\t\tvar err2 error",
                "+\t\tproxyURL, err2 = url.Parse(\"http://\" + proxy)",
                "+\t\tif err2 == nil {",
                "+\t\t\terr = nil",
                "+\t\t}",
                "+\t}",
                "+\tif err != nil {",
                "+\t\treturn nil, fmt.Errorf(\"invalid proxy address %q: %v\", proxy, err)",
                "+\t}",
                "+",
                "+\tplog.Infof(\"using proxy %q\", proxyURL.String())",
                "+\treturn http.ProxyURL(proxyURL), nil",
                "+}",
                "+",
                "+func newDiscovery(durl, dproxyurl string, id types.ID) (*discovery, error) {",
                "+\tu, err := url.Parse(durl)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\ttoken := u.Path",
                "+\tu.Path = \"\"",
                "+\tpf, err := newProxyFunc(dproxyurl)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+",
                "+\t// TODO: add ResponseHeaderTimeout back when watch on discovery service writes header early",
                "+\ttr, err := transport.NewTransport(transport.TLSInfo{}, 30*time.Second)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\ttr.Proxy = pf",
                "+\tcfg := client.Config{",
                "+\t\tTransport: tr,",
                "+\t\tEndpoints: []string{u.String()},",
                "+\t}",
                "+\tc, err := client.New(cfg)",
                "+\tif err != nil {",
                "+\t\treturn nil, err",
                "+\t}",
                "+\tdc := client.NewKeysAPIWithPrefix(c, \"\")",
                "+\treturn &discovery{",
                "+\t\tcluster: token,",
                "+\t\tc:       dc,",
                "+\t\tid:      id,",
                "+\t\turl:     u,",
                "+\t\tclock:   clockwork.NewRealClock(),",
                "+\t}, nil",
                "+}",
                "+",
                "+func (d *discovery) joinCluster(config string) (string, error) {",
                "+\t// fast path: if the cluster is full, return the error",
                "+\t// do not need to register to the cluster in this case.",
                "+\tif _, _, _, err := d.checkCluster(); err != nil {",
                "+\t\treturn \"\", err",
                "+\t}",
                "+",
                "+\tif err := d.createSelf(config); err != nil {",
                "+\t\t// Fails, even on a timeout, if createSelf times out.",
                "+\t\t// TODO(barakmich): Retrying the same node might want to succeed here",
                "+\t\t// (ie, createSelf should be idempotent for discovery).",
                "+\t\treturn \"\", err",
                "+\t}",
                "+",
                "+\tnodes, size, index, err := d.checkCluster()",
                "+\tif err != nil {",
                "+\t\treturn \"\", err",
                "+\t}",
                "+",
                "+\tall, err := d.waitNodes(nodes, size, index)",
                "+\tif err != nil {",
                "+\t\treturn \"\", err",
                "+\t}",
                "+",
                "+\treturn nodesToCluster(all, size)",
                "+}",
                "+",
                "+func (d *discovery) getCluster() (string, error) {",
                "+\tnodes, size, index, err := d.checkCluster()",
                "+\tif err != nil {",
                "+\t\tif err == ErrFullCluster {",
                "+\t\t\treturn nodesToCluster(nodes, size)",
                "+\t\t}",
                "+\t\treturn \"\", err",
                "+\t}",
                "+",
                "+\tall, err := d.waitNodes(nodes, size, index)",
                "+\tif err != nil {",
                "+\t\treturn \"\", err",
                "+\t}",
                "+\treturn nodesToCluster(all, size)",
                "+}",
                "+",
                "+func (d *discovery) createSelf(contents string) error {",
                "+\tctx, cancel := context.WithTimeout(context.Background(), client.DefaultRequestTimeout)",
                "+\tresp, err := d.c.Create(ctx, d.selfKey(), contents)",
                "+\tcancel()",
                "+\tif err != nil {",
                "+\t\tif eerr, ok := err.(client.Error); ok && eerr.Code == client.ErrorCodeNodeExist {",
                "+\t\t\treturn ErrDuplicateID",
                "+\t\t}",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\t// ensure self appears on the server we connected to",
                "+\tw := d.c.Watcher(d.selfKey(), &client.WatcherOptions{AfterIndex: resp.Node.CreatedIndex - 1})",
                "+\t_, err = w.Next(context.Background())",
                "+\treturn err",
                "+}",
                "+",
                "+func (d *discovery) checkCluster() ([]*client.Node, int, uint64, error) {",
                "+\tconfigKey := path.Join(\"/\", d.cluster, \"_config\")",
                "+\tctx, cancel := context.WithTimeout(context.Background(), client.DefaultRequestTimeout)",
                "+\t// find cluster size",
                "+\tresp, err := d.c.Get(ctx, path.Join(configKey, \"size\"), nil)",
                "+\tcancel()",
                "+\tif err != nil {",
                "+\t\tif eerr, ok := err.(*client.Error); ok && eerr.Code == client.ErrorCodeKeyNotFound {",
                "+\t\t\treturn nil, 0, 0, ErrSizeNotFound",
                "+\t\t}",
                "+\t\tif err == client.ErrInvalidJSON {",
                "+\t\t\treturn nil, 0, 0, ErrBadDiscoveryEndpoint",
                "+\t\t}",
                "+\t\tif ce, ok := err.(*client.ClusterError); ok {",
                "+\t\t\tplog.Error(ce.Detail())",
                "+\t\t\treturn d.checkClusterRetry()",
                "+\t\t}",
                "+\t\treturn nil, 0, 0, err",
                "+\t}",
                "+\tsize, err := strconv.Atoi(resp.Node.Value)",
                "+\tif err != nil {",
                "+\t\treturn nil, 0, 0, ErrBadSizeKey",
                "+\t}",
                "+",
                "+\tctx, cancel = context.WithTimeout(context.Background(), client.DefaultRequestTimeout)",
                "+\tresp, err = d.c.Get(ctx, d.cluster, nil)",
                "+\tcancel()",
                "+\tif err != nil {",
                "+\t\tif ce, ok := err.(*client.ClusterError); ok {",
                "+\t\t\tplog.Error(ce.Detail())",
                "+\t\t\treturn d.checkClusterRetry()",
                "+\t\t}",
                "+\t\treturn nil, 0, 0, err",
                "+\t}",
                "+\tvar nodes []*client.Node",
                "+\t// append non-config keys to nodes",
                "+\tfor _, n := range resp.Node.Nodes {",
                "+\t\tif !(path.Base(n.Key) == path.Base(configKey)) {",
                "+\t\t\tnodes = append(nodes, n)",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tsnodes := sortableNodes{nodes}",
                "+\tsort.Sort(snodes)",
                "+",
                "+\t// find self position",
                "+\tfor i := range nodes {",
                "+\t\tif path.Base(nodes[i].Key) == path.Base(d.selfKey()) {",
                "+\t\t\tbreak",
                "+\t\t}",
                "+\t\tif i >= size-1 {",
                "+\t\t\treturn nodes[:size], size, resp.Index, ErrFullCluster",
                "+\t\t}",
                "+\t}",
                "+\treturn nodes, size, resp.Index, nil",
                "+}",
                "+",
                "+func (d *discovery) logAndBackoffForRetry(step string) {",
                "+\td.retries++",
                "+\t// logAndBackoffForRetry stops exponential backoff when the retries are more than maxExpoentialRetries and is set to a constant backoff afterward.",
                "+\tretries := d.retries",
                "+\tif retries > maxExpoentialRetries {",
                "+\t\tretries = maxExpoentialRetries",
                "+\t}",
                "+\tretryTimeInSecond := time.Duration(0x1<<retries) * time.Second",
                "+\tplog.Infof(\"%s: error connecting to %s, retrying in %s\", step, d.url, retryTimeInSecond)",
                "+\td.clock.Sleep(retryTimeInSecond)",
                "+}",
                "+",
                "+func (d *discovery) checkClusterRetry() ([]*client.Node, int, uint64, error) {",
                "+\tif d.retries < nRetries {",
                "+\t\td.logAndBackoffForRetry(\"cluster status check\")",
                "+\t\treturn d.checkCluster()",
                "+\t}",
                "+\treturn nil, 0, 0, ErrTooManyRetries",
                "+}",
                "+",
                "+func (d *discovery) waitNodesRetry() ([]*client.Node, error) {",
                "+\tif d.retries < nRetries {",
                "+\t\td.logAndBackoffForRetry(\"waiting for other nodes\")",
                "+\t\tnodes, n, index, err := d.checkCluster()",
                "+\t\tif err != nil {",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\treturn d.waitNodes(nodes, n, index)",
                "+\t}",
                "+\treturn nil, ErrTooManyRetries",
                "+}",
                "+",
                "+func (d *discovery) waitNodes(nodes []*client.Node, size int, index uint64) ([]*client.Node, error) {",
                "+\tif len(nodes) > size {",
                "+\t\tnodes = nodes[:size]",
                "+\t}",
                "+\t// watch from the next index",
                "+\tw := d.c.Watcher(d.cluster, &client.WatcherOptions{AfterIndex: index, Recursive: true})",
                "+\tall := make([]*client.Node, len(nodes))",
                "+\tcopy(all, nodes)",
                "+\tfor _, n := range all {",
                "+\t\tif path.Base(n.Key) == path.Base(d.selfKey()) {",
                "+\t\t\tplog.Noticef(\"found self %s in the cluster\", path.Base(d.selfKey()))",
                "+\t\t} else {",
                "+\t\t\tplog.Noticef(\"found peer %s in the cluster\", path.Base(n.Key))",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t// wait for others",
                "+\tfor len(all) < size {",
                "+\t\tplog.Noticef(\"found %d peer(s), waiting for %d more\", len(all), size-len(all))",
                "+\t\tresp, err := w.Next(context.Background())",
                "+\t\tif err != nil {",
                "+\t\t\tif ce, ok := err.(*client.ClusterError); ok {",
                "+\t\t\t\tplog.Error(ce.Detail())",
                "+\t\t\t\treturn d.waitNodesRetry()",
                "+\t\t\t}",
                "+\t\t\treturn nil, err",
                "+\t\t}",
                "+\t\tplog.Noticef(\"found peer %s in the cluster\", path.Base(resp.Node.Key))",
                "+\t\tall = append(all, resp.Node)",
                "+\t}",
                "+\tplog.Noticef(\"found %d needed peer(s)\", len(all))",
                "+\treturn all, nil",
                "+}",
                "+",
                "+func (d *discovery) selfKey() string {",
                "+\treturn path.Join(\"/\", d.cluster, d.id.String())",
                "+}",
                "+",
                "+func nodesToCluster(ns []*client.Node, size int) (string, error) {",
                "+\ts := make([]string, len(ns))",
                "+\tfor i, n := range ns {",
                "+\t\ts[i] = n.Value",
                "+\t}",
                "+\tus := strings.Join(s, \",\")",
                "+\tm, err := types.NewURLsMap(us)",
                "+\tif err != nil {",
                "+\t\treturn us, ErrInvalidURL",
                "+\t}",
                "+\tif m.Len() != size {",
                "+\t\treturn us, ErrDuplicateName",
                "+\t}",
                "+\treturn us, nil",
                "+}",
                "+",
                "+type sortableNodes struct{ Nodes []*client.Node }",
                "+",
                "+func (ns sortableNodes) Len() int { return len(ns.Nodes) }",
                "+func (ns sortableNodes) Less(i, j int) bool {",
                "+\treturn ns.Nodes[i].CreatedIndex < ns.Nodes[j].CreatedIndex",
                "+}",
                "+func (ns sortableNodes) Swap(i, j int) { ns.Nodes[i], ns.Nodes[j] = ns.Nodes[j], ns.Nodes[i] }",
                "diff --git a/discovery/discovery_test.go b/discovery/discovery_test.go",
                "new file mode 100644",
                "index 000000000..89897266f",
                "--- /dev/null",
                "+++ b/discovery/discovery_test.go",
                "@@ -0,0 +1,558 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package discovery",
                "+",
                "+import (",
                "+\t\"context\"",
                "+\t\"errors\"",
                "+\t\"math\"",
                "+\t\"math/rand\"",
                "+\t\"net/http\"",
                "+\t\"reflect\"",
                "+\t\"sort\"",
                "+\t\"strconv\"",
                "+\t\"testing\"",
                "+\t\"time\"",
                "+",
                "+\t\"github.com/coreos/etcd/client\"",
                "+",
                "+\t\"github.com/jonboulle/clockwork\"",
                "+)",
                "+",
                "+const (",
                "+\tmaxRetryInTest = 3",
                "+)",
                "+",
                "+func TestNewProxyFuncUnset(t *testing.T) {",
                "+\tpf, err := newProxyFunc(\"\")",
                "+\tif pf != nil {",
                "+\t\tt.Fatal(\"unexpected non-nil proxyFunc\")",
                "+\t}",
                "+\tif err != nil {",
                "+\t\tt.Fatalf(\"unexpected non-nil err: %v\", err)",
                "+\t}",
                "+}",
                "+",
                "+func TestNewProxyFuncBad(t *testing.T) {",
                "+\ttests := []string{",
                "+\t\t\"%%\",",
                "+\t\t\"http://foo.com/%1\",",
                "+\t}",
                "+\tfor i, in := range tests {",
                "+\t\tpf, err := newProxyFunc(in)",
                "+\t\tif pf != nil {",
                "+\t\t\tt.Errorf(\"#%d: unexpected non-nil proxyFunc\", i)",
                "+\t\t}",
                "+\t\tif err == nil {",
                "+\t\t\tt.Errorf(\"#%d: unexpected nil err\", i)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestNewProxyFunc(t *testing.T) {",
                "+\ttests := map[string]string{",
                "+\t\t\"bar.com\":              \"http://bar.com\",",
                "+\t\t\"http://disco.foo.bar\": \"http://disco.foo.bar\",",
                "+\t}",
                "+\tfor in, w := range tests {",
                "+\t\tpf, err := newProxyFunc(in)",
                "+\t\tif pf == nil {",
                "+\t\t\tt.Errorf(\"%s: unexpected nil proxyFunc\", in)",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tif err != nil {",
                "+\t\t\tt.Errorf(\"%s: unexpected non-nil err: %v\", in, err)",
                "+\t\t\tcontinue",
                "+\t\t}",
                "+\t\tg, err := pf(&http.Request{})",
                "+\t\tif err != nil {",
                "+\t\t\tt.Errorf(\"%s: unexpected non-nil err: %v\", in, err)",
                "+\t\t}",
                "+\t\tif g.String() != w {",
                "+\t\t\tt.Errorf(\"%s: proxyURL=%q, want %q\", in, g, w)",
                "+\t\t}",
                "+",
                "+\t}",
                "+}",
                "+",
                "+func TestCheckCluster(t *testing.T) {",
                "+\tcluster := \"/prefix/1000\"",
                "+\tself := \"/1000/1\"",
                "+",
                "+\ttests := []struct {",
                "+\t\tnodes []*client.Node",
                "+\t\tindex uint64",
                "+\t\twerr  error",
                "+\t\twsize int",
                "+\t}{",
                "+\t\t{",
                "+\t\t\t// self is in the size range",
                "+\t\t\t[]*client.Node{",
                "+\t\t\t\t{Key: \"/1000/_config/size\", Value: \"3\", CreatedIndex: 1},",
                "+\t\t\t\t{Key: \"/1000/_config/\"},",
                "+\t\t\t\t{Key: self, CreatedIndex: 2},",
                "+\t\t\t\t{Key: \"/1000/2\", CreatedIndex: 3},",
                "+\t\t\t\t{Key: \"/1000/3\", CreatedIndex: 4},",
                "+\t\t\t\t{Key: \"/1000/4\", CreatedIndex: 5},",
                "+\t\t\t},",
                "+\t\t\t5,",
                "+\t\t\tnil,",
                "+\t\t\t3,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t// self is in the size range",
                "+\t\t\t[]*client.Node{",
                "+\t\t\t\t{Key: \"/1000/_config/size\", Value: \"3\", CreatedIndex: 1},",
                "+\t\t\t\t{Key: \"/1000/_config/\"},",
                "+\t\t\t\t{Key: \"/1000/2\", CreatedIndex: 2},",
                "+\t\t\t\t{Key: \"/1000/3\", CreatedIndex: 3},",
                "+\t\t\t\t{Key: self, CreatedIndex: 4},",
                "+\t\t\t\t{Key: \"/1000/4\", CreatedIndex: 5},",
                "+\t\t\t},",
                "+\t\t\t5,",
                "+\t\t\tnil,",
                "+\t\t\t3,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t// self is out of the size range",
                "+\t\t\t[]*client.Node{",
                "+\t\t\t\t{Key: \"/1000/_config/size\", Value: \"3\", CreatedIndex: 1},",
                "+\t\t\t\t{Key: \"/1000/_config/\"},",
                "+\t\t\t\t{Key: \"/1000/2\", CreatedIndex: 2},",
                "+\t\t\t\t{Key: \"/1000/3\", CreatedIndex: 3},",
                "+\t\t\t\t{Key: \"/1000/4\", CreatedIndex: 4},",
                "+\t\t\t\t{Key: self, CreatedIndex: 5},",
                "+\t\t\t},",
                "+\t\t\t5,",
                "+\t\t\tErrFullCluster,",
                "+\t\t\t3,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t// self is not in the cluster",
                "+\t\t\t[]*client.Node{",
                "+\t\t\t\t{Key: \"/1000/_config/size\", Value: \"3\", CreatedIndex: 1},",
                "+\t\t\t\t{Key: \"/1000/_config/\"},",
                "+\t\t\t\t{Key: \"/1000/2\", CreatedIndex: 2},",
                "+\t\t\t\t{Key: \"/1000/3\", CreatedIndex: 3},",
                "+\t\t\t},",
                "+\t\t\t3,",
                "+\t\t\tnil,",
                "+\t\t\t3,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]*client.Node{",
                "+\t\t\t\t{Key: \"/1000/_config/size\", Value: \"3\", CreatedIndex: 1},",
                "+\t\t\t\t{Key: \"/1000/_config/\"},",
                "+\t\t\t\t{Key: \"/1000/2\", CreatedIndex: 2},",
                "+\t\t\t\t{Key: \"/1000/3\", CreatedIndex: 3},",
                "+\t\t\t\t{Key: \"/1000/4\", CreatedIndex: 4},",
                "+\t\t\t},",
                "+\t\t\t3,",
                "+\t\t\tErrFullCluster,",
                "+\t\t\t3,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t// bad size key",
                "+\t\t\t[]*client.Node{",
                "+\t\t\t\t{Key: \"/1000/_config/size\", Value: \"bad\", CreatedIndex: 1},",
                "+\t\t\t},",
                "+\t\t\t0,",
                "+\t\t\tErrBadSizeKey,",
                "+\t\t\t0,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t// no size key",
                "+\t\t\t[]*client.Node{},",
                "+\t\t\t0,",
                "+\t\t\tErrSizeNotFound,",
                "+\t\t\t0,",
                "+\t\t},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\tvar rs []*client.Response",
                "+\t\tif len(tt.nodes) > 0 {",
                "+\t\t\trs = append(rs, &client.Response{Node: tt.nodes[0], Index: tt.index})",
                "+\t\t\trs = append(rs, &client.Response{",
                "+\t\t\t\tNode: &client.Node{",
                "+\t\t\t\t\tKey:   cluster,",
                "+\t\t\t\t\tNodes: tt.nodes[1:],",
                "+\t\t\t\t},",
                "+\t\t\t\tIndex: tt.index,",
                "+\t\t\t})",
                "+\t\t}",
                "+\t\tc := &clientWithResp{rs: rs}",
                "+\t\tdBase := discovery{cluster: cluster, id: 1, c: c}",
                "+",
                "+\t\tcRetry := &clientWithRetry{failTimes: 3}",
                "+\t\tcRetry.rs = rs",
                "+\t\tfc := clockwork.NewFakeClock()",
                "+\t\tdRetry := discovery{cluster: cluster, id: 1, c: cRetry, clock: fc}",
                "+",
                "+\t\tfor _, d := range []discovery{dBase, dRetry} {",
                "+\t\t\tgo func() {",
                "+\t\t\t\tfor i := uint(1); i <= maxRetryInTest; i++ {",
                "+\t\t\t\t\tfc.BlockUntil(1)",
                "+\t\t\t\t\tfc.Advance(time.Second * (0x1 << i))",
                "+\t\t\t\t}",
                "+\t\t\t}()",
                "+\t\t\tns, size, index, err := d.checkCluster()",
                "+\t\t\tif err != tt.werr {",
                "+\t\t\t\tt.Errorf(\"#%d: err = %v, want %v\", i, err, tt.werr)",
                "+\t\t\t}",
                "+\t\t\tif reflect.DeepEqual(ns, tt.nodes) {",
                "+\t\t\t\tt.Errorf(\"#%d: nodes = %v, want %v\", i, ns, tt.nodes)",
                "+\t\t\t}",
                "+\t\t\tif size != tt.wsize {",
                "+\t\t\t\tt.Errorf(\"#%d: size = %v, want %d\", i, size, tt.wsize)",
                "+\t\t\t}",
                "+\t\t\tif index != tt.index {",
                "+\t\t\t\tt.Errorf(\"#%d: index = %v, want %d\", i, index, tt.index)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestWaitNodes(t *testing.T) {",
                "+\tall := []*client.Node{",
                "+\t\t0: {Key: \"/1000/1\", CreatedIndex: 2},",
                "+\t\t1: {Key: \"/1000/2\", CreatedIndex: 3},",
                "+\t\t2: {Key: \"/1000/3\", CreatedIndex: 4},",
                "+\t}",
                "+",
                "+\ttests := []struct {",
                "+\t\tnodes []*client.Node",
                "+\t\trs    []*client.Response",
                "+\t}{",
                "+\t\t{",
                "+\t\t\tall,",
                "+\t\t\t[]*client.Response{},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tall[:1],",
                "+\t\t\t[]*client.Response{",
                "+\t\t\t\t{Node: &client.Node{Key: \"/1000/2\", CreatedIndex: 3}},",
                "+\t\t\t\t{Node: &client.Node{Key: \"/1000/3\", CreatedIndex: 4}},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tall[:2],",
                "+\t\t\t[]*client.Response{",
                "+\t\t\t\t{Node: &client.Node{Key: \"/1000/3\", CreatedIndex: 4}},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\tappend(all, &client.Node{Key: \"/1000/4\", CreatedIndex: 5}),",
                "+\t\t\t[]*client.Response{",
                "+\t\t\t\t{Node: &client.Node{Key: \"/1000/3\", CreatedIndex: 4}},",
                "+\t\t\t},",
                "+\t\t},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\t// Basic case",
                "+\t\tc := &clientWithResp{rs: nil, w: &watcherWithResp{rs: tt.rs}}",
                "+\t\tdBase := &discovery{cluster: \"1000\", c: c}",
                "+",
                "+\t\t// Retry case",
                "+\t\tvar retryScanResp []*client.Response",
                "+\t\tif len(tt.nodes) > 0 {",
                "+\t\t\tretryScanResp = append(retryScanResp, &client.Response{",
                "+\t\t\t\tNode: &client.Node{",
                "+\t\t\t\t\tKey:   \"1000\",",
                "+\t\t\t\t\tValue: strconv.Itoa(3),",
                "+\t\t\t\t},",
                "+\t\t\t})",
                "+\t\t\tretryScanResp = append(retryScanResp, &client.Response{",
                "+\t\t\t\tNode: &client.Node{",
                "+\t\t\t\t\tNodes: tt.nodes,",
                "+\t\t\t\t},",
                "+\t\t\t})",
                "+\t\t}",
                "+\t\tcRetry := &clientWithResp{",
                "+\t\t\trs: retryScanResp,",
                "+\t\t\tw:  &watcherWithRetry{rs: tt.rs, failTimes: 2},",
                "+\t\t}",
                "+\t\tfc := clockwork.NewFakeClock()",
                "+\t\tdRetry := &discovery{",
                "+\t\t\tcluster: \"1000\",",
                "+\t\t\tc:       cRetry,",
                "+\t\t\tclock:   fc,",
                "+\t\t}",
                "+",
                "+\t\tfor _, d := range []*discovery{dBase, dRetry} {",
                "+\t\t\tgo func() {",
                "+\t\t\t\tfor i := uint(1); i <= maxRetryInTest; i++ {",
                "+\t\t\t\t\tfc.BlockUntil(1)",
                "+\t\t\t\t\tfc.Advance(time.Second * (0x1 << i))",
                "+\t\t\t\t}",
                "+\t\t\t}()",
                "+\t\t\tg, err := d.waitNodes(tt.nodes, 3, 0) // we do not care about index in this test",
                "+\t\t\tif err != nil {",
                "+\t\t\t\tt.Errorf(\"#%d: err = %v, want %v\", i, err, nil)",
                "+\t\t\t}",
                "+\t\t\tif !reflect.DeepEqual(g, all) {",
                "+\t\t\t\tt.Errorf(\"#%d: all = %v, want %v\", i, g, all)",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestCreateSelf(t *testing.T) {",
                "+\trs := []*client.Response{{Node: &client.Node{Key: \"1000/1\", CreatedIndex: 2}}}",
                "+",
                "+\tw := &watcherWithResp{rs: rs}",
                "+\terrw := &watcherWithErr{err: errors.New(\"watch err\")}",
                "+",
                "+\tc := &clientWithResp{rs: rs, w: w}",
                "+\terrc := &clientWithErr{err: errors.New(\"create err\"), w: w}",
                "+\terrdupc := &clientWithErr{err: client.Error{Code: client.ErrorCodeNodeExist}}",
                "+\terrwc := &clientWithResp{rs: rs, w: errw}",
                "+",
                "+\ttests := []struct {",
                "+\t\tc    client.KeysAPI",
                "+\t\twerr error",
                "+\t}{",
                "+\t\t// no error",
                "+\t\t{c, nil},",
                "+\t\t// client.create returns an error",
                "+\t\t{errc, errc.err},",
                "+\t\t// watcher.next returns an error",
                "+\t\t{errwc, errw.err},",
                "+\t\t// parse key exist error to duplicate ID error",
                "+\t\t{errdupc, ErrDuplicateID},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\td := discovery{cluster: \"1000\", c: tt.c}",
                "+\t\tif err := d.createSelf(\"\"); err != tt.werr {",
                "+\t\t\tt.Errorf(\"#%d: err = %v, want %v\", i, err, nil)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestNodesToCluster(t *testing.T) {",
                "+\ttests := []struct {",
                "+\t\tnodes    []*client.Node",
                "+\t\tsize     int",
                "+\t\twcluster string",
                "+\t\twerr     error",
                "+\t}{",
                "+\t\t{",
                "+\t\t\t[]*client.Node{",
                "+\t\t\t\t0: {Key: \"/1000/1\", Value: \"1=http://1.1.1.1:2380\", CreatedIndex: 1},",
                "+\t\t\t\t1: {Key: \"/1000/2\", Value: \"2=http://2.2.2.2:2380\", CreatedIndex: 2},",
                "+\t\t\t\t2: {Key: \"/1000/3\", Value: \"3=http://3.3.3.3:2380\", CreatedIndex: 3},",
                "+\t\t\t},",
                "+\t\t\t3,",
                "+\t\t\t\"1=http://1.1.1.1:2380,2=http://2.2.2.2:2380,3=http://3.3.3.3:2380\",",
                "+\t\t\tnil,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]*client.Node{",
                "+\t\t\t\t0: {Key: \"/1000/1\", Value: \"1=http://1.1.1.1:2380\", CreatedIndex: 1},",
                "+\t\t\t\t1: {Key: \"/1000/2\", Value: \"2=http://2.2.2.2:2380\", CreatedIndex: 2},",
                "+\t\t\t\t2: {Key: \"/1000/3\", Value: \"2=http://3.3.3.3:2380\", CreatedIndex: 3},",
                "+\t\t\t},",
                "+\t\t\t3,",
                "+\t\t\t\"1=http://1.1.1.1:2380,2=http://2.2.2.2:2380,2=http://3.3.3.3:2380\",",
                "+\t\t\tErrDuplicateName,",
                "+\t\t},",
                "+\t\t{",
                "+\t\t\t[]*client.Node{",
                "+\t\t\t\t0: {Key: \"/1000/1\", Value: \"1=1.1.1.1:2380\", CreatedIndex: 1},",
                "+\t\t\t\t1: {Key: \"/1000/2\", Value: \"2=http://2.2.2.2:2380\", CreatedIndex: 2},",
                "+\t\t\t\t2: {Key: \"/1000/3\", Value: \"2=http://3.3.3.3:2380\", CreatedIndex: 3},",
                "+\t\t\t},",
                "+\t\t\t3,",
                "+\t\t\t\"1=1.1.1.1:2380,2=http://2.2.2.2:2380,2=http://3.3.3.3:2380\",",
                "+\t\t\tErrInvalidURL,",
                "+\t\t},",
                "+\t}",
                "+",
                "+\tfor i, tt := range tests {",
                "+\t\tcluster, err := nodesToCluster(tt.nodes, tt.size)",
                "+\t\tif err != tt.werr {",
                "+\t\t\tt.Errorf(\"#%d: err = %v, want %v\", i, err, tt.werr)",
                "+\t\t}",
                "+\t\tif !reflect.DeepEqual(cluster, tt.wcluster) {",
                "+\t\t\tt.Errorf(\"#%d: cluster = %v, want %v\", i, cluster, tt.wcluster)",
                "+\t\t}",
                "+\t}",
                "+}",
                "+",
                "+func TestSortableNodes(t *testing.T) {",
                "+\tns := []*client.Node{",
                "+\t\t0: {CreatedIndex: 5},",
                "+\t\t1: {CreatedIndex: 1},",
                "+\t\t2: {CreatedIndex: 3},",
                "+\t\t3: {CreatedIndex: 4},",
                "+\t}",
                "+\t// add some randomness",
                "+\tfor i := 0; i < 10000; i++ {",
                "+\t\tns = append(ns, &client.Node{CreatedIndex: uint64(rand.Int31())})",
                "+\t}",
                "+\tsns := sortableNodes{ns}",
                "+\tsort.Sort(sns)",
                "+\tvar cis []int",
                "+\tfor _, n := range sns.Nodes {",
                "+\t\tcis = append(cis, int(n.CreatedIndex))",
                "+\t}",
                "+\tif !sort.IntsAreSorted(cis) {",
                "+\t\tt.Errorf(\"isSorted = %v, want %v\", sort.IntsAreSorted(cis), true)",
                "+\t}",
                "+\tcis = make([]int, 0)",
                "+\tfor _, n := range ns {",
                "+\t\tcis = append(cis, int(n.CreatedIndex))",
                "+\t}",
                "+\tif !sort.IntsAreSorted(cis) {",
                "+\t\tt.Errorf(\"isSorted = %v, want %v\", sort.IntsAreSorted(cis), true)",
                "+\t}",
                "+}",
                "+",
                "+func TestRetryFailure(t *testing.T) {",
                "+\tnRetries = maxRetryInTest",
                "+\tdefer func() { nRetries = math.MaxUint32 }()",
                "+",
                "+\tcluster := \"1000\"",
                "+\tc := &clientWithRetry{failTimes: 4}",
                "+\tfc := clockwork.NewFakeClock()",
                "+\td := discovery{",
                "+\t\tcluster: cluster,",
                "+\t\tid:      1,",
                "+\t\tc:       c,",
                "+\t\tclock:   fc,",
                "+\t}",
                "+\tgo func() {",
                "+\t\tfor i := uint(1); i <= maxRetryInTest; i++ {",
                "+\t\t\tfc.BlockUntil(1)",
                "+\t\t\tfc.Advance(time.Second * (0x1 << i))",
                "+\t\t}",
                "+\t}()",
                "+\tif _, _, _, err := d.checkCluster(); err != ErrTooManyRetries {",
                "+\t\tt.Errorf(\"err = %v, want %v\", err, ErrTooManyRetries)",
                "+\t}",
                "+}",
                "+",
                "+type clientWithResp struct {",
                "+\trs []*client.Response",
                "+\tw  client.Watcher",
                "+\tclient.KeysAPI",
                "+}",
                "+",
                "+func (c *clientWithResp) Create(ctx context.Context, key string, value string) (*client.Response, error) {",
                "+\tif len(c.rs) == 0 {",
                "+\t\treturn &client.Response{}, nil",
                "+\t}",
                "+\tr := c.rs[0]",
                "+\tc.rs = c.rs[1:]",
                "+\treturn r, nil",
                "+}",
                "+",
                "+func (c *clientWithResp) Get(ctx context.Context, key string, opts *client.GetOptions) (*client.Response, error) {",
                "+\tif len(c.rs) == 0 {",
                "+\t\treturn &client.Response{}, &client.Error{Code: client.ErrorCodeKeyNotFound}",
                "+\t}",
                "+\tr := c.rs[0]",
                "+\tc.rs = append(c.rs[1:], r)",
                "+\treturn r, nil",
                "+}",
                "+",
                "+func (c *clientWithResp) Watcher(key string, opts *client.WatcherOptions) client.Watcher {",
                "+\treturn c.w",
                "+}",
                "+",
                "+type clientWithErr struct {",
                "+\terr error",
                "+\tw   client.Watcher",
                "+\tclient.KeysAPI",
                "+}",
                "+",
                "+func (c *clientWithErr) Create(ctx context.Context, key string, value string) (*client.Response, error) {",
                "+\treturn &client.Response{}, c.err",
                "+}",
                "+",
                "+func (c *clientWithErr) Get(ctx context.Context, key string, opts *client.GetOptions) (*client.Response, error) {",
                "+\treturn &client.Response{}, c.err",
                "+}",
                "+",
                "+func (c *clientWithErr) Watcher(key string, opts *client.WatcherOptions) client.Watcher {",
                "+\treturn c.w",
                "+}",
                "+",
                "+type watcherWithResp struct {",
                "+\tclient.KeysAPI",
                "+\trs []*client.Response",
                "+}",
                "+",
                "+func (w *watcherWithResp) Next(context.Context) (*client.Response, error) {",
                "+\tif len(w.rs) == 0 {",
                "+\t\treturn &client.Response{}, nil",
                "+\t}",
                "+\tr := w.rs[0]",
                "+\tw.rs = w.rs[1:]",
                "+\treturn r, nil",
                "+}",
                "+",
                "+type watcherWithErr struct {",
                "+\terr error",
                "+}",
                "+",
                "+func (w *watcherWithErr) Next(context.Context) (*client.Response, error) {",
                "+\treturn &client.Response{}, w.err",
                "+}",
                "+",
                "+// clientWithRetry will timeout all requests up to failTimes",
                "+type clientWithRetry struct {",
                "+\tclientWithResp",
                "+\tfailCount int",
                "+\tfailTimes int",
                "+}",
                "+",
                "+func (c *clientWithRetry) Create(ctx context.Context, key string, value string) (*client.Response, error) {",
                "+\tif c.failCount < c.failTimes {",
                "+\t\tc.failCount++",
                "+\t\treturn nil, &client.ClusterError{Errors: []error{context.DeadlineExceeded}}",
                "+\t}",
                "+\treturn c.clientWithResp.Create(ctx, key, value)",
                "+}",
                "+",
                "+func (c *clientWithRetry) Get(ctx context.Context, key string, opts *client.GetOptions) (*client.Response, error) {",
                "+\tif c.failCount < c.failTimes {",
                "+\t\tc.failCount++",
                "+\t\treturn nil, &client.ClusterError{Errors: []error{context.DeadlineExceeded}}",
                "+\t}",
                "+\treturn c.clientWithResp.Get(ctx, key, opts)",
                "+}",
                "+",
                "+// watcherWithRetry will timeout all requests up to failTimes",
                "+type watcherWithRetry struct {",
                "+\trs        []*client.Response",
                "+\tfailCount int",
                "+\tfailTimes int",
                "+}",
                "+",
                "+func (w *watcherWithRetry) Next(context.Context) (*client.Response, error) {",
                "+\tif w.failCount < w.failTimes {",
                "+\t\tw.failCount++",
                "+\t\treturn nil, &client.ClusterError{Errors: []error{context.DeadlineExceeded}}",
                "+\t}",
                "+\tif len(w.rs) == 0 {",
                "+\t\treturn &client.Response{}, nil",
                "+\t}",
                "+\tr := w.rs[0]",
                "+\tw.rs = w.rs[1:]",
                "+\treturn r, nil",
                "+}",
                "diff --git a/etcdmain/etcd.go b/etcdmain/etcd.go",
                "index e5906f0be..409844923 100644",
                "--- a/etcdmain/etcd.go",
                "+++ b/etcdmain/etcd.go",
                "@@ -28,2 +28,3 @@ import (",
                "+\t\"github.com/coreos/etcd/discovery\"",
                " \t\"github.com/coreos/etcd/embed\"",
                "@@ -31,3 +32,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/api/etcdhttp\"",
                "-\t\"github.com/coreos/etcd/internal/discovery\"",
                " \t\"github.com/coreos/etcd/internal/version\"",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 5c8478073..25e929445 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -33,2 +33,3 @@ import (",
                " \t\"github.com/coreos/etcd/compactor\"",
                "+\t\"github.com/coreos/etcd/discovery\"",
                " \t\"github.com/coreos/etcd/etcdserver/api\"",
                "@@ -39,3 +40,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/auth\"",
                "-\t\"github.com/coreos/etcd/internal/discovery\"",
                " \t\"github.com/coreos/etcd/internal/lease\""
            ],
            "changed_files": [
                "discovery/discovery.go",
                "discovery/discovery_test.go",
                "etcdmain/etcd.go",
                "etcdserver/server.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3648649277309902e5414db5ad00c18150e82fe2",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519855383,
            "hunks": 4,
            "message": "etcdserver: add \"HostWhitelist\" to \"ServerConfig\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/config.go b/etcdserver/config.go",
                "index 056af745d..4626ab85d 100644",
                "--- a/etcdserver/config.go",
                "+++ b/etcdserver/config.go",
                "@@ -49,2 +49,7 @@ type ServerConfig struct {",
                "+\t// HostWhitelist lists acceptable hostnames from client requests.",
                "+\t// If server is insecure (no TLS), server only accepts requests",
                "+\t// whose Host header value exists in this white list.",
                "+\tHostWhitelist map[string]struct{}",
                "+",
                " \tTickMs           uint",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 473594a81..5bd489c12 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -253,2 +253,4 @@ type EtcdServer struct {",
                " \tleadElectedTime time.Time",
                "+",
                "+\thostWhitelist map[string]struct{}",
                " }",
                "@@ -436,2 +438,3 @@ func NewServer(cfg ServerConfig) (srv *EtcdServer, err error) {",
                " \t\tforceVersionC: make(chan struct{}),",
                "+\t\thostWhitelist: cfg.HostWhitelist,",
                " \t}",
                "@@ -628,2 +631,12 @@ func (s *EtcdServer) ReportSnapshot(id uint64, status raft.SnapshotStatus) {",
                "+// IsHostWhitelisted returns true if the host is whitelisted.",
                "+// If whitelist is empty, allow all.",
                "+func (s *EtcdServer) IsHostWhitelisted(host string) bool {",
                "+\tif len(s.hostWhitelist) == 0 { // allow all",
                "+\t\treturn true",
                "+\t}",
                "+\t_, ok := s.hostWhitelist[host]",
                "+\treturn ok",
                "+}",
                "+",
                " type etcdProgress struct {"
            ],
            "changed_files": [
                "etcdserver/config.go",
                "etcdserver/server.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "82ee796aa466b779703ff43c2bd72033db49147f",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520448329,
            "hunks": 9,
            "message": "pkg/logutil: move \"pkg/logger\" to \"logutil\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/pkg/logutil/discard_logger.go b/pkg/logutil/discard_logger.go",
                "new file mode 100644",
                "index 000000000..81b0a9d03",
                "--- /dev/null",
                "+++ b/pkg/logutil/discard_logger.go",
                "@@ -0,0 +1,46 @@",
                "+// Copyright 2018 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package logutil",
                "+",
                "+import (",
                "+\t\"log\"",
                "+",
                "+\t\"google.golang.org/grpc/grpclog\"",
                "+)",
                "+",
                "+// assert that \"discardLogger\" satisfy \"Logger\" interface",
                "+var _ Logger = &discardLogger{}",
                "+",
                "+// NewDiscardLogger returns a new Logger that discards everything except \"fatal\".",
                "+func NewDiscardLogger() Logger { return &discardLogger{} }",
                "+",
                "+type discardLogger struct{}",
                "+",
                "+func (l *discardLogger) Info(args ...interface{})                    {}",
                "+func (l *discardLogger) Infoln(args ...interface{})                  {}",
                "+func (l *discardLogger) Infof(format string, args ...interface{})    {}",
                "+func (l *discardLogger) Warning(args ...interface{})                 {}",
                "+func (l *discardLogger) Warningln(args ...interface{})               {}",
                "+func (l *discardLogger) Warningf(format string, args ...interface{}) {}",
                "+func (l *discardLogger) Error(args ...interface{})                   {}",
                "+func (l *discardLogger) Errorln(args ...interface{})                 {}",
                "+func (l *discardLogger) Errorf(format string, args ...interface{})   {}",
                "+func (l *discardLogger) Fatal(args ...interface{})                   { log.Fatal(args...) }",
                "+func (l *discardLogger) Fatalln(args ...interface{})                 { log.Fatalln(args...) }",
                "+func (l *discardLogger) Fatalf(format string, args ...interface{})   { log.Fatalf(format, args...) }",
                "+func (l *discardLogger) V(lvl int) bool {",
                "+\treturn false",
                "+}",
                "+func (l *discardLogger) Lvl(lvl int) grpclog.LoggerV2 { return l }",
                "diff --git a/pkg/logutil/doc.go b/pkg/logutil/doc.go",
                "new file mode 100644",
                "index 000000000..e919f2499",
                "--- /dev/null",
                "+++ b/pkg/logutil/doc.go",
                "@@ -0,0 +1,16 @@",
                "+// Copyright 2018 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package logutil includes utilities to facilitate logging.",
                "+package logutil",
                "diff --git a/pkg/logutil/logger.go b/pkg/logutil/logger.go",
                "new file mode 100644",
                "index 000000000..cd1de5f7f",
                "--- /dev/null",
                "+++ b/pkg/logutil/logger.go",
                "@@ -0,0 +1,63 @@",
                "+// Copyright 2018 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package logutil",
                "+",
                "+import \"google.golang.org/grpc/grpclog\"",
                "+",
                "+// Logger defines logging interface.",
                "+type Logger interface {",
                "+\tgrpclog.LoggerV2",
                "+",
                "+\t// Lvl returns logger if logger's verbosity level >= \"lvl\".",
                "+\t// Otherwise, logger that discards everything.",
                "+\tLvl(lvl int) grpclog.LoggerV2",
                "+}",
                "+",
                "+// assert that \"defaultLogger\" satisfy \"Logger\" interface",
                "+var _ Logger = &defaultLogger{}",
                "+",
                "+// NewLogger wraps \"grpclog.LoggerV2\" that implements \"Logger\" interface.",
                "+//",
                "+// For example:",
                "+//",
                "+//  var defaultLogger Logger",
                "+//  g := grpclog.NewLoggerV2WithVerbosity(os.Stderr, os.Stderr, os.Stderr, 4)",
                "+//  defaultLogger = New(g)",
                "+//",
                "+func NewLogger(g grpclog.LoggerV2) Logger { return &defaultLogger{g: g} }",
                "+",
                "+type defaultLogger struct {",
                "+\tg grpclog.LoggerV2",
                "+}",
                "+",
                "+func (l *defaultLogger) Info(args ...interface{})                    { l.g.Info(args...) }",
                "+func (l *defaultLogger) Infoln(args ...interface{})                  { l.g.Info(args...) }",
                "+func (l *defaultLogger) Infof(format string, args ...interface{})    { l.g.Infof(format, args...) }",
                "+func (l *defaultLogger) Warning(args ...interface{})                 { l.g.Warning(args...) }",
                "+func (l *defaultLogger) Warningln(args ...interface{})               { l.g.Warning(args...) }",
                "+func (l *defaultLogger) Warningf(format string, args ...interface{}) { l.g.Warningf(format, args...) }",
                "+func (l *defaultLogger) Error(args ...interface{})                   { l.g.Error(args...) }",
                "+func (l *defaultLogger) Errorln(args ...interface{})                 { l.g.Error(args...) }",
                "+func (l *defaultLogger) Errorf(format string, args ...interface{})   { l.g.Errorf(format, args...) }",
                "+func (l *defaultLogger) Fatal(args ...interface{})                   { l.g.Fatal(args...) }",
                "+func (l *defaultLogger) Fatalln(args ...interface{})                 { l.g.Fatal(args...) }",
                "+func (l *defaultLogger) Fatalf(format string, args ...interface{})   { l.g.Fatalf(format, args...) }",
                "+func (l *defaultLogger) V(lvl int) bool                              { return l.g.V(lvl) }",
                "+func (l *defaultLogger) Lvl(lvl int) grpclog.LoggerV2 {",
                "+\tif l.g.V(lvl) {",
                "+\t\treturn l",
                "+\t}",
                "+\treturn &discardLogger{}",
                "+}",
                "diff --git a/pkg/logutil/logger_test.go b/pkg/logutil/logger_test.go",
                "new file mode 100644",
                "index 000000000..1f2ef9b68",
                "--- /dev/null",
                "+++ b/pkg/logutil/logger_test.go",
                "@@ -0,0 +1,53 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package logutil_test",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"io/ioutil\"",
                "+\t\"strings\"",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/coreos/etcd/pkg/logutil\"",
                "+",
                "+\t\"google.golang.org/grpc/grpclog\"",
                "+)",
                "+",
                "+func TestLogger(t *testing.T) {",
                "+\tbuf := new(bytes.Buffer)",
                "+",
                "+\tl := logutil.NewLogger(grpclog.NewLoggerV2WithVerbosity(buf, buf, buf, 10))",
                "+\tl.Infof(\"hello world!\")",
                "+\tif !strings.Contains(buf.String(), \"hello world!\") {",
                "+\t\tt.Fatalf(\"expected 'hello world!', got %q\", buf.String())",
                "+\t}",
                "+\tbuf.Reset()",
                "+",
                "+\tl.Lvl(10).Infof(\"Level 10\")",
                "+\tl.Lvl(30).Infof(\"Level 30\")",
                "+\tif !strings.Contains(buf.String(), \"Level 10\") {",
                "+\t\tt.Fatalf(\"expected 'Level 10', got %q\", buf.String())",
                "+\t}",
                "+\tif strings.Contains(buf.String(), \"Level 30\") {",
                "+\t\tt.Fatalf(\"unexpected 'Level 30', got %q\", buf.String())",
                "+\t}",
                "+\tbuf.Reset()",
                "+",
                "+\tl = logutil.NewLogger(grpclog.NewLoggerV2(ioutil.Discard, ioutil.Discard, ioutil.Discard))",
                "+\tl.Infof(\"ignore this\")",
                "+\tif len(buf.Bytes()) > 0 {",
                "+\t\tt.Fatalf(\"unexpected logs %q\", buf.String())",
                "+\t}",
                "+}",
                "diff --git a/pkg/logutil/merge_logger.go b/pkg/logutil/merge_logger.go",
                "index cc750f4d3..866b6f7a8 100644",
                "--- a/pkg/logutil/merge_logger.go",
                "+++ b/pkg/logutil/merge_logger.go",
                "@@ -14,3 +14,2 @@",
                "-// Package logutil includes utilities to facilitate logging.",
                " package logutil",
                "diff --git a/pkg/logutil/merge_logger_test.go b/pkg/logutil/merge_logger_test.go",
                "index 99e422d9d..10d0e4372 100644",
                "--- a/pkg/logutil/merge_logger_test.go",
                "+++ b/pkg/logutil/merge_logger_test.go",
                "@@ -25,6 +25,2 @@ import (",
                "-var (",
                "-\ttestLogger = capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"pkg/logutil\")",
                "-)",
                "-",
                " func TestMergeLogger(t *testing.T) {",
                "@@ -34,3 +30,3 @@ func TestMergeLogger(t *testing.T) {",
                " \t\tduration = 2049843762 * time.Nanosecond",
                "-\t\tmg       = NewMergeLogger(testLogger)",
                "+\t\tmg       = NewMergeLogger(capnslog.NewPackageLogger(\"github.com/coreos/etcd\", \"pkg/logutil\"))",
                " \t)",
                "diff --git a/pkg/logutil/package_logger.go b/pkg/logutil/package_logger.go",
                "new file mode 100644",
                "index 000000000..378bee0e3",
                "--- /dev/null",
                "+++ b/pkg/logutil/package_logger.go",
                "@@ -0,0 +1,60 @@",
                "+// Copyright 2018 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package logutil",
                "+",
                "+import (",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+\t\"google.golang.org/grpc/grpclog\"",
                "+)",
                "+",
                "+// assert that \"packageLogger\" satisfy \"Logger\" interface",
                "+var _ Logger = &packageLogger{}",
                "+",
                "+// NewPackageLogger wraps \"*capnslog.PackageLogger\" that implements \"Logger\" interface.",
                "+//",
                "+// For example:",
                "+//",
                "+//  var defaultLogger Logger",
                "+//  defaultLogger = NewPackageLogger(\"github.com/coreos/etcd\", \"snapshot\")",
                "+//",
                "+func NewPackageLogger(repo, pkg string) Logger {",
                "+\treturn &packageLogger{p: capnslog.NewPackageLogger(repo, pkg)}",
                "+}",
                "+",
                "+type packageLogger struct {",
                "+\tp *capnslog.PackageLogger",
                "+}",
                "+",
                "+func (l *packageLogger) Info(args ...interface{})                    { l.p.Info(args...) }",
                "+func (l *packageLogger) Infoln(args ...interface{})                  { l.p.Info(args...) }",
                "+func (l *packageLogger) Infof(format string, args ...interface{})    { l.p.Infof(format, args...) }",
                "+func (l *packageLogger) Warning(args ...interface{})                 { l.p.Warning(args...) }",
                "+func (l *packageLogger) Warningln(args ...interface{})               { l.p.Warning(args...) }",
                "+func (l *packageLogger) Warningf(format string, args ...interface{}) { l.p.Warningf(format, args...) }",
                "+func (l *packageLogger) Error(args ...interface{})                   { l.p.Error(args...) }",
                "+func (l *packageLogger) Errorln(args ...interface{})                 { l.p.Error(args...) }",
                "+func (l *packageLogger) Errorf(format string, args ...interface{})   { l.p.Errorf(format, args...) }",
                "+func (l *packageLogger) Fatal(args ...interface{})                   { l.p.Fatal(args...) }",
                "+func (l *packageLogger) Fatalln(args ...interface{})                 { l.p.Fatal(args...) }",
                "+func (l *packageLogger) Fatalf(format string, args ...interface{})   { l.p.Fatalf(format, args...) }",
                "+func (l *packageLogger) V(lvl int) bool {",
                "+\treturn l.p.LevelAt(capnslog.LogLevel(lvl))",
                "+}",
                "+func (l *packageLogger) Lvl(lvl int) grpclog.LoggerV2 {",
                "+\tif l.p.LevelAt(capnslog.LogLevel(lvl)) {",
                "+\t\treturn l",
                "+\t}",
                "+\treturn &discardLogger{}",
                "+}",
                "diff --git a/pkg/logutil/package_logger_test.go b/pkg/logutil/package_logger_test.go",
                "new file mode 100644",
                "index 000000000..b6ab0052b",
                "--- /dev/null",
                "+++ b/pkg/logutil/package_logger_test.go",
                "@@ -0,0 +1,59 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package logutil_test",
                "+",
                "+import (",
                "+\t\"bytes\"",
                "+\t\"io/ioutil\"",
                "+\t\"strings\"",
                "+\t\"testing\"",
                "+",
                "+\t\"github.com/coreos/etcd/pkg/logutil\"",
                "+",
                "+\t\"github.com/coreos/pkg/capnslog\"",
                "+)",
                "+",
                "+func TestPackageLogger(t *testing.T) {",
                "+\tbuf := new(bytes.Buffer)",
                "+\tcapnslog.SetFormatter(capnslog.NewDefaultFormatter(buf))",
                "+",
                "+\tl := logutil.NewPackageLogger(\"github.com/coreos/etcd\", \"logger\")",
                "+",
                "+\tr := capnslog.MustRepoLogger(\"github.com/coreos/etcd\")",
                "+\tr.SetLogLevel(map[string]capnslog.LogLevel{\"logger\": capnslog.INFO})",
                "+",
                "+\tl.Infof(\"hello world!\")",
                "+\tif !strings.Contains(buf.String(), \"hello world!\") {",
                "+\t\tt.Fatalf(\"expected 'hello world!', got %q\", buf.String())",
                "+\t}",
                "+\tbuf.Reset()",
                "+",
                "+\t// capnslog.INFO is 3",
                "+\tl.Lvl(2).Infof(\"Level 2\")",
                "+\tl.Lvl(5).Infof(\"Level 5\")",
                "+\tif !strings.Contains(buf.String(), \"Level 2\") {",
                "+\t\tt.Fatalf(\"expected 'Level 2', got %q\", buf.String())",
                "+\t}",
                "+\tif strings.Contains(buf.String(), \"Level 5\") {",
                "+\t\tt.Fatalf(\"unexpected 'Level 5', got %q\", buf.String())",
                "+\t}",
                "+\tbuf.Reset()",
                "+",
                "+\tcapnslog.SetFormatter(capnslog.NewDefaultFormatter(ioutil.Discard))",
                "+\tl.Infof(\"ignore this\")",
                "+\tif len(buf.Bytes()) > 0 {",
                "+\t\tt.Fatalf(\"unexpected logs %q\", buf.String())",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "pkg/logutil/discard_logger.go",
                "pkg/logutil/doc.go",
                "pkg/logutil/logger.go",
                "pkg/logutil/logger_test.go",
                "pkg/logutil/merge_logger.go",
                "pkg/logutil/merge_logger_test.go",
                "pkg/logutil/package_logger.go",
                "pkg/logutil/package_logger_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "28c47bb2f8d4a0b60bd41dc5ff61016cff1cfb84",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520545531,
            "hunks": 1,
            "message": "version: bump up to 3.2.17",
            "diff": [
                "diff --git a/version/version.go b/version/version.go",
                "index 9fcd048dd..ac56f632a 100644",
                "--- a/version/version.go",
                "+++ b/version/version.go",
                "@@ -28,3 +28,3 @@ var (",
                " \tMinClusterVersion = \"3.0.0\"",
                "-\tVersion           = \"3.2.16+git\"",
                "+\tVersion           = \"3.2.17\"",
                " \tAPIVersion        = \"unknown\""
            ],
            "changed_files": [
                "version/version.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.2.17",
                "v3.2.18",
                "v3.2.19",
                "v3.2.20",
                "v3.2.21",
                "v3.2.22",
                "v3.2.23",
                "v3.2.24",
                "v3.2.25",
                "v3.2.26",
                "v3.2.27",
                "v3.2.28",
                "v3.2.29",
                "v3.2.30",
                "v3.2.31",
                "v3.2.32"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3092d3bf7f731018ee6744fed9f0b15cd59ececc",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519411809,
            "hunks": 3,
            "message": "embed: add \"ExperimentalPreVote\" for Raft Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/embed/config.go b/embed/config.go",
                "index 2f4e9189c..b5ffbb13d 100644",
                "--- a/embed/config.go",
                "+++ b/embed/config.go",
                "@@ -236,2 +236,9 @@ type Config struct {",
                " \tExperimentalEnableV2V3          string        `json:\"experimental-enable-v2v3\"`",
                "+",
                "+\t// ExperimentalPreVote is true to enable Raft Pre-Vote.",
                "+\t// If enabled, Raft runs an additional election phase",
                "+\t// to check whether it would get enough votes to win",
                "+\t// an election, thus minimizing disruptions.",
                "+\t// TODO: change to \"pre-vote\" and enable by default in 3.5.",
                "+\tExperimentalPreVote bool `json:\"experimental-pre-vote\"`",
                " }",
                "@@ -295,2 +302,3 @@ func NewConfig() *Config {",
                " \t\tAuthToken:             \"simple\",",
                "+\t\tExperimentalPreVote:   false, // TODO: enable by default in v3.5",
                " \t}",
                "diff --git a/embed/etcd.go b/embed/etcd.go",
                "index a034e04cc..78fbca461 100644",
                "--- a/embed/etcd.go",
                "+++ b/embed/etcd.go",
                "@@ -173,2 +173,3 @@ func StartEtcd(inCfg *Config) (e *Etcd, err error) {",
                " \t\tCorruptCheckTime:        cfg.ExperimentalCorruptCheckTime,",
                "+\t\tPreVote:                 cfg.ExperimentalPreVote,",
                " \t\tDebug:                   cfg.Debug,"
            ],
            "changed_files": [
                "embed/config.go",
                "embed/etcd.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "adf4e05079f1ffeb040d53e158ab527918f660cb",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519626113,
            "hunks": 4,
            "message": "test, build: Fix gopath creation",
            "diff": [
                "diff --git a/build b/build",
                "index 2a73e0114..c8b6ce06a 100755",
                "--- a/build",
                "+++ b/build",
                "@@ -25,2 +25,22 @@ toggle_failpoints() {",
                "+etcd_setup_gopath() {",
                "+\techo \"Setting GOPATH from vendor directory at 'gopath'\"",
                "+\td=$(dirname \"$0\")",
                "+\tCDIR=$(cd \"$d\" && pwd)",
                "+\tcd \"$CDIR\"",
                "+\tetcdGOPATH=\"${CDIR}/gopath\"",
                "+\t# preserve old gopath to support building with unvendored tooling deps (e.g., gofail)",
                "+\tif [ -n \"$GOPATH\" ]; then",
                "+\t\tGOPATH=\"$GOPATH\"",
                "+\tfi",
                "+\trm -rf \"${etcdGOPATH:?}/\"",
                "+\tmkdir -p \"${etcdGOPATH}/vendor\" \"${etcdGOPATH}/etcd_src/src/github.com/coreos\"",
                "+\texport GOPATH=${etcdGOPATH}/vendor:${etcdGOPATH}/etcd_src:$GOPATH",
                "+\tln -s \"${CDIR}/vendor\" \"${etcdGOPATH}/vendor/src\"",
                "+\tln -s \"${CDIR}\" \"${etcdGOPATH}/etcd_src/src/github.com/coreos/etcd\"",
                "+",
                "+\t#ln -s \"${CDIR}/vendor\" \"${etcdGOPATH}/src\"",
                "+\t#ln -s \"${CDIR}\" \"${etcdGOPATH}/src/github.com/coreos\"",
                "+}",
                "+",
                " toggle_failpoints_default() {",
                "@@ -43,2 +63,23 @@ etcd_build() {",
                "+tools_build() {",
                "+\tout=\"bin\"",
                "+\tif [ -n \"${BINDIR}\" ]; then out=\"${BINDIR}\"; fi",
                "+\t# shellcheck disable=SC2039",
                "+\ttools=(",
                "+\t\tbenchmark",
                "+\t\tetcd-dump-db",
                "+\t\tetcd-dump-logs",
                "+\t\tfunctional-tester/etcd-agent",
                "+\t\tfunctional-tester/etcd-tester",
                "+\t\tfunctional-tester/etcd-runner",
                "+\t\tlocal-tester/bridge",
                "+\t)",
                "+\t# shellcheck disable=SC2039",
                "+\tfor tool in \"${tools[@]}\"",
                "+\tdo",
                "+\t\t# shellcheck disable=SC2086",
                "+\t\tCGO_ENABLED=0 go build $GO_BUILD_FLAGS -installsuffix cgo -ldflags \"$GO_LDFLAGS\" -o \"${out}/${tool}\" \"${REPO_PATH}/tools/${tool}\" || return",
                "+\tdone",
                "+}",
                "+",
                " toggle_failpoints_default",
                "diff --git a/test b/test",
                "index 04ed92ec8..3dd6e9914 100755",
                "--- a/test",
                "+++ b/test",
                "@@ -18,2 +18,6 @@ source ./build",
                "+if [[ \"${ETCD_SETUP_GOPATH}\" == \"1\" ]]; then",
                "+\tetcd_setup_gopath",
                "+fi",
                "+",
                " # build before setting up test GOPATH",
                "@@ -542,3 +546,3 @@ function compile_pass {",
                " \techo \"Checking build...\"",
                "-\tgo build -v ./tools/...",
                "+\tGO_BUILD_FLAGS=\"-a -v\" tools_build",
                " }"
            ],
            "changed_files": [
                "build",
                "test"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "27f0aa9cf0fcb8961ed6f7114a3ecbc6396dbf3a",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520455663,
            "hunks": 1,
            "message": "scripts: document \"updatedep.sh\" script Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/scripts/updatedep.sh b/scripts/updatedep.sh",
                "index f09c3f5f3..e4d723354 100755",
                "--- a/scripts/updatedep.sh",
                "+++ b/scripts/updatedep.sh",
                "@@ -9,3 +9,12 @@ fi",
                " go get -v -u github.com/golang/dep/cmd/dep",
                "-dep ensure -v",
                "+",
                "+if [[ -z \"$1\" ]]; then",
                "+  echo \"dep ensure on all packages\"",
                "+  dep ensure -v",
                "+else",
                "+  echo \"dep update on\" \"$1\"",
                "+  # shellcheck disable=SC2086",
                "+  dep ensure -v -update $1",
                "+fi",
                "+",
                " dep prune"
            ],
            "changed_files": [
                "scripts/updatedep.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "290fa0c1be6ca5886386f443b8674e8654f5946e",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520499450,
            "hunks": 74,
            "message": "*: sync \"functional-tester\" from 3.2 branch Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/pkg/debugutil/doc.go b/pkg/debugutil/doc.go",
                "new file mode 100644",
                "index 000000000..74499eb27",
                "--- /dev/null",
                "+++ b/pkg/debugutil/doc.go",
                "@@ -0,0 +1,16 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package debugutil includes utility functions for debugging.",
                "+package debugutil",
                "diff --git a/pkg/debugutil/pprof.go b/pkg/debugutil/pprof.go",
                "new file mode 100644",
                "index 000000000..8d5544a3d",
                "--- /dev/null",
                "+++ b/pkg/debugutil/pprof.go",
                "@@ -0,0 +1,47 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package debugutil",
                "+",
                "+import (",
                "+\t\"net/http\"",
                "+\t\"net/http/pprof\"",
                "+\t\"runtime\"",
                "+)",
                "+",
                "+const HTTPPrefixPProf = \"/debug/pprof\"",
                "+",
                "+// PProfHandlers returns a map of pprof handlers keyed by the HTTP path.",
                "+func PProfHandlers() map[string]http.Handler {",
                "+\t// set only when there's no existing setting",
                "+\tif runtime.SetMutexProfileFraction(-1) == 0 {",
                "+\t\t// 1 out of 5 mutex events are reported, on average",
                "+\t\truntime.SetMutexProfileFraction(5)",
                "+\t}",
                "+",
                "+\tm := make(map[string]http.Handler)",
                "+",
                "+\tm[HTTPPrefixPProf+\"/\"] = http.HandlerFunc(pprof.Index)",
                "+\tm[HTTPPrefixPProf+\"/profile\"] = http.HandlerFunc(pprof.Profile)",
                "+\tm[HTTPPrefixPProf+\"/symbol\"] = http.HandlerFunc(pprof.Symbol)",
                "+\tm[HTTPPrefixPProf+\"/cmdline\"] = http.HandlerFunc(pprof.Cmdline)",
                "+\tm[HTTPPrefixPProf+\"/trace \"] = http.HandlerFunc(pprof.Trace)",
                "+\tm[HTTPPrefixPProf+\"/heap\"] = pprof.Handler(\"heap\")",
                "+\tm[HTTPPrefixPProf+\"/goroutine\"] = pprof.Handler(\"goroutine\")",
                "+\tm[HTTPPrefixPProf+\"/threadcreate\"] = pprof.Handler(\"threadcreate\")",
                "+\tm[HTTPPrefixPProf+\"/block\"] = pprof.Handler(\"block\")",
                "+\tm[HTTPPrefixPProf+\"/mutex\"] = pprof.Handler(\"mutex\")",
                "+",
                "+\treturn m",
                "+}",
                "diff --git a/tools/functional-tester/etcd-agent/agent.go b/tools/functional-tester/etcd-agent/agent.go",
                "index faa067f45..b7be29096 100644",
                "--- a/tools/functional-tester/etcd-agent/agent.go",
                "+++ b/tools/functional-tester/etcd-agent/agent.go",
                "@@ -17,3 +17,2 @@ package main",
                " import (",
                "-\t\"fmt\"",
                " \t\"os\"",
                "@@ -77,2 +76,3 @@ func newAgent(cfg AgentConfig) (*Agent, error) {",
                " func (a *Agent) start(args ...string) error {",
                "+\targs = append(args, \"--data-dir\", a.dataDir())",
                " \ta.cmd = exec.Command(a.cmd.Path, args...)",
                "@@ -208,12 +208,3 @@ func (a *Agent) status() client.Status {",
                " func (a *Agent) dataDir() string {",
                "-\tdatadir := filepath.Join(a.cmd.Path, \"*.etcd\")",
                "-\targs := a.cmd.Args",
                "-\t// only parse the simple case like \"--data-dir /var/lib/etcd\"",
                "-\tfor i, arg := range args {",
                "-\t\tif arg == \"--data-dir\" {",
                "-\t\t\tdatadir = args[i+1]",
                "-\t\t\tbreak",
                "-\t\t}",
                "-\t}",
                "-\treturn datadir",
                "+\treturn filepath.Join(a.cfg.LogDir, \"etcd.data\")",
                " }",
                "@@ -233,5 +224,5 @@ func existDir(fpath string) bool {",
                " func archiveLogAndDataDir(logDir string, datadir string) error {",
                "-\tdir := filepath.Join(\"failure_archive\", fmt.Sprint(time.Now().Format(time.RFC3339)))",
                "+\tdir := filepath.Join(logDir, \"failure_archive\", time.Now().Format(time.RFC3339))",
                " \tif existDir(dir) {",
                "-\t\tdir = filepath.Join(\"failure_archive\", fmt.Sprint(time.Now().Add(time.Second).Format(time.RFC3339)))",
                "+\t\tdir = filepath.Join(logDir, \"failure_archive\", time.Now().Add(time.Second).Format(time.RFC3339))",
                " \t}",
                "@@ -240,3 +231,3 @@ func archiveLogAndDataDir(logDir string, datadir string) error {",
                " \t}",
                "-\tif err := os.Rename(logDir, filepath.Join(dir, filepath.Base(logDir))); err != nil {",
                "+\tif err := os.Rename(filepath.Join(logDir, \"etcd.log\"), filepath.Join(dir, \"etcd.log\")); err != nil {",
                " \t\tif !os.IsNotExist(err) {",
                "diff --git a/tools/functional-tester/etcd-agent/main.go b/tools/functional-tester/etcd-agent/main.go",
                "index 004b959b3..901750d8d 100644",
                "--- a/tools/functional-tester/etcd-agent/main.go",
                "+++ b/tools/functional-tester/etcd-agent/main.go",
                "@@ -29,3 +29,3 @@ func main() {",
                " \tetcdPath := flag.String(\"etcd-path\", filepath.Join(os.Getenv(\"GOPATH\"), \"bin/etcd\"), \"the path to etcd binary\")",
                "-\tetcdLogDir := flag.String(\"etcd-log-dir\", \"etcd-log\", \"directory to store etcd logs\")",
                "+\tetcdLogDir := flag.String(\"etcd-log-dir\", \"etcd-log\", \"directory to store etcd logs, data directories, failure archive\")",
                " \tport := flag.String(\"port\", \":9027\", \"port to serve agent server\")",
                "diff --git a/tools/functional-tester/etcd-runner/command/election_command.go b/tools/functional-tester/etcd-runner/command/election_command.go",
                "deleted file mode 100644",
                "index 2b133a6b2..000000000",
                "--- a/tools/functional-tester/etcd-runner/command/election_command.go",
                "+++ /dev/null",
                "@@ -1,126 +0,0 @@",
                "-// Copyright 2016 The etcd Authors",
                "-//",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-//",
                "-//     http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.",
                "-",
                "-package command",
                "-",
                "-import (",
                "-\t\"context\"",
                "-\t\"errors\"",
                "-\t\"fmt\"",
                "-",
                "-\t\"github.com/coreos/etcd/clientv3/concurrency\"",
                "-\t\"github.com/spf13/cobra\"",
                "-)",
                "-",
                "-// NewElectionCommand returns the cobra command for \"election runner\".",
                "-func NewElectionCommand() *cobra.Command {",
                "-\tcmd := &cobra.Command{",
                "-\t\tUse:   \"election\",",
                "-\t\tShort: \"Performs election operation\",",
                "-\t\tRun:   runElectionFunc,",
                "-\t}",
                "-\tcmd.Flags().IntVar(&rounds, \"rounds\", 100, \"number of rounds to run\")",
                "-\tcmd.Flags().IntVar(&totalClientConnections, \"total-client-connections\", 10, \"total number of client connections\")",
                "-\treturn cmd",
                "-}",
                "-",
                "-func runElectionFunc(cmd *cobra.Command, args []string) {",
                "-\tif len(args) > 0 {",
                "-\t\tExitWithError(ExitBadArgs, errors.New(\"election does not take any argument\"))",
                "-\t}",
                "-",
                "-\trcs := make([]roundClient, totalClientConnections)",
                "-\tvalidatec, releasec := make(chan struct{}, len(rcs)), make(chan struct{}, len(rcs))",
                "-\tfor range rcs {",
                "-\t\treleasec <- struct{}{}",
                "-\t}",
                "-",
                "-\teps := endpointsFromFlag(cmd)",
                "-\tdialTimeout := dialTimeoutFromCmd(cmd)",
                "-",
                "-\tfor i := range rcs {",
                "-\t\tv := fmt.Sprintf(\"%d\", i)",
                "-\t\tobservedLeader := \"\"",
                "-\t\tvalidateWaiters := 0",
                "-",
                "-\t\trcs[i].c = newClient(eps, dialTimeout)",
                "-\t\tvar (",
                "-\t\t\ts   *concurrency.Session",
                "-\t\t\terr error",
                "-\t\t)",
                "-\t\tfor {",
                "-\t\t\ts, err = concurrency.NewSession(rcs[i].c)",
                "-\t\t\tif err == nil {",
                "-\t\t\t\tbreak",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\te := concurrency.NewElection(s, \"electors\")",
                "-",
                "-\t\trcs[i].acquire = func() error {",
                "-\t\t\t<-releasec",
                "-\t\t\tctx, cancel := context.WithCancel(context.Background())",
                "-\t\t\tgo func() {",
                "-\t\t\t\tif ol, ok := <-e.Observe(ctx); ok {",
                "-\t\t\t\t\tobservedLeader = string(ol.Kvs[0].Value)",
                "-\t\t\t\t\tif observedLeader != v {",
                "-\t\t\t\t\t\tcancel()",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t}()",
                "-\t\t\terr = e.Campaign(ctx, v)",
                "-\t\t\tif err == nil {",
                "-\t\t\t\tobservedLeader = v",
                "-\t\t\t}",
                "-\t\t\tif observedLeader == v {",
                "-\t\t\t\tvalidateWaiters = len(rcs)",
                "-\t\t\t}",
                "-\t\t\tselect {",
                "-\t\t\tcase <-ctx.Done():",
                "-\t\t\t\treturn nil",
                "-\t\t\tdefault:",
                "-\t\t\t\tcancel()",
                "-\t\t\t\treturn err",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\trcs[i].validate = func() error {",
                "-\t\t\tif l, err := e.Leader(context.TODO()); err == nil && l != observedLeader {",
                "-\t\t\t\treturn fmt.Errorf(\"expected leader %q, got %q\", observedLeader, l)",
                "-\t\t\t}",
                "-\t\t\tvalidatec <- struct{}{}",
                "-\t\t\treturn nil",
                "-\t\t}",
                "-\t\trcs[i].release = func() error {",
                "-\t\t\tfor validateWaiters > 0 {",
                "-\t\t\t\tselect {",
                "-\t\t\t\tcase <-validatec:",
                "-\t\t\t\t\tvalidateWaiters--",
                "-\t\t\t\tdefault:",
                "-\t\t\t\t\treturn fmt.Errorf(\"waiting on followers\")",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tif err := e.Resign(context.TODO()); err != nil {",
                "-\t\t\t\treturn err",
                "-\t\t\t}",
                "-\t\t\tif observedLeader == v {",
                "-\t\t\t\tfor range rcs {",
                "-\t\t\t\t\treleasec <- struct{}{}",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t\tobservedLeader = \"\"",
                "-\t\t\treturn nil",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tdoRounds(rcs, rounds)",
                "-}",
                "diff --git a/tools/functional-tester/etcd-runner/command/error.go b/tools/functional-tester/etcd-runner/command/error.go",
                "deleted file mode 100644",
                "index 3188cd5e4..000000000",
                "--- a/tools/functional-tester/etcd-runner/command/error.go",
                "+++ /dev/null",
                "@@ -1,42 +0,0 @@",
                "-// Copyright 2015 The etcd Authors",
                "-//",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-//",
                "-//     http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.",
                "-",
                "-package command",
                "-",
                "-import (",
                "-\t\"fmt\"",
                "-\t\"os\"",
                "-",
                "-\t\"github.com/coreos/etcd/client\"",
                "-)",
                "-",
                "-const (",
                "-\t// http://tldp.org/LDP/abs/html/exitcodes.html",
                "-\tExitSuccess = iota",
                "-\tExitError",
                "-\tExitBadConnection",
                "-\tExitInvalidInput // for txn, watch command",
                "-\tExitBadFeature   // provided a valid flag with an unsupported value",
                "-\tExitInterrupted",
                "-\tExitIO",
                "-\tExitBadArgs = 128",
                "-)",
                "-",
                "-func ExitWithError(code int, err error) {",
                "-\tfmt.Fprintln(os.Stderr, \"Error: \", err)",
                "-\tif cerr, ok := err.(*client.ClusterError); ok {",
                "-\t\tfmt.Fprintln(os.Stderr, cerr.Detail())",
                "-\t}",
                "-\tos.Exit(code)",
                "-}",
                "diff --git a/tools/functional-tester/etcd-runner/command/global.go b/tools/functional-tester/etcd-runner/command/global.go",
                "deleted file mode 100644",
                "index 80b941f7e..000000000",
                "--- a/tools/functional-tester/etcd-runner/command/global.go",
                "+++ /dev/null",
                "@@ -1,130 +0,0 @@",
                "-// Copyright 2016 The etcd Authors",
                "-//",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-//",
                "-//     http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.",
                "-",
                "-package command",
                "-",
                "-import (",
                "-\t\"fmt\"",
                "-\t\"log\"",
                "-\t\"sync\"",
                "-\t\"time\"",
                "-",
                "-\t\"github.com/coreos/etcd/clientv3\"",
                "-",
                "-\t\"github.com/spf13/cobra\"",
                "-)",
                "-",
                "-var (",
                "-\trounds                 int           // total number of rounds the operation needs to be performed",
                "-\ttotalClientConnections int           // total number of client connections to be made with server",
                "-\tnoOfPrefixes           int           // total number of prefixes which will be watched upon",
                "-\twatchPerPrefix         int           // number of watchers per prefix",
                "-\treqRate                int           // put request per second",
                "-\ttotalKeys              int           // total number of keys for operation",
                "-\trunningTime            time.Duration // time for which operation should be performed",
                "-)",
                "-",
                "-// GlobalFlags are flags that defined globally",
                "-// and are inherited to all sub-commands.",
                "-type GlobalFlags struct {",
                "-\tEndpoints   []string",
                "-\tDialTimeout time.Duration",
                "-}",
                "-",
                "-type roundClient struct {",
                "-\tc        *clientv3.Client",
                "-\tprogress int",
                "-\tacquire  func() error",
                "-\tvalidate func() error",
                "-\trelease  func() error",
                "-}",
                "-",
                "-func newClient(eps []string, timeout time.Duration) *clientv3.Client {",
                "-\tc, err := clientv3.New(clientv3.Config{",
                "-\t\tEndpoints:   eps,",
                "-\t\tDialTimeout: time.Duration(timeout) * time.Second,",
                "-\t})",
                "-\tif err != nil {",
                "-\t\tlog.Fatal(err)",
                "-\t}",
                "-\treturn c",
                "-}",
                "-",
                "-func doRounds(rcs []roundClient, rounds int) {",
                "-\tvar mu sync.Mutex",
                "-\tvar wg sync.WaitGroup",
                "-",
                "-\twg.Add(len(rcs))",
                "-\tfinished := make(chan struct{}, 0)",
                "-\tfor i := range rcs {",
                "-\t\tgo func(rc *roundClient) {",
                "-\t\t\tdefer wg.Done()",
                "-\t\t\tfor rc.progress < rounds {",
                "-\t\t\t\tfor rc.acquire() != nil { /* spin */",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\tmu.Lock()",
                "-\t\t\t\tif err := rc.validate(); err != nil {",
                "-\t\t\t\t\tlog.Fatal(err)",
                "-\t\t\t\t}",
                "-\t\t\t\tmu.Unlock()",
                "-",
                "-\t\t\t\ttime.Sleep(10 * time.Millisecond)",
                "-\t\t\t\trc.progress++",
                "-\t\t\t\tfinished <- struct{}{}",
                "-",
                "-\t\t\t\tmu.Lock()",
                "-\t\t\t\tfor rc.release() != nil {",
                "-\t\t\t\t\tmu.Unlock()",
                "-\t\t\t\t\tmu.Lock()",
                "-\t\t\t\t}",
                "-\t\t\t\tmu.Unlock()",
                "-\t\t\t}",
                "-\t\t}(&rcs[i])",
                "-\t}",
                "-",
                "-\tstart := time.Now()",
                "-\tfor i := 1; i < len(rcs)*rounds+1; i++ {",
                "-\t\tselect {",
                "-\t\tcase <-finished:",
                "-\t\t\tif i%100 == 0 {",
                "-\t\t\t\tfmt.Printf(\"finished %d, took %v\\n\", i, time.Since(start))",
                "-\t\t\t\tstart = time.Now()",
                "-\t\t\t}",
                "-\t\tcase <-time.After(time.Minute):",
                "-\t\t\tlog.Panic(\"no progress after 1 minute!\")",
                "-\t\t}",
                "-\t}",
                "-\twg.Wait()",
                "-",
                "-\tfor _, rc := range rcs {",
                "-\t\trc.c.Close()",
                "-\t}",
                "-}",
                "-",
                "-func endpointsFromFlag(cmd *cobra.Command) []string {",
                "-\tendpoints, err := cmd.Flags().GetStringSlice(\"endpoints\")",
                "-\tif err != nil {",
                "-\t\tExitWithError(ExitError, err)",
                "-\t}",
                "-\treturn endpoints",
                "-}",
                "-",
                "-func dialTimeoutFromCmd(cmd *cobra.Command) time.Duration {",
                "-\tdialTimeout, err := cmd.Flags().GetDuration(\"dial-timeout\")",
                "-\tif err != nil {",
                "-\t\tExitWithError(ExitError, err)",
                "-\t}",
                "-\treturn dialTimeout",
                "-}",
                "diff --git a/tools/functional-tester/etcd-runner/command/lease_renewer_command.go b/tools/functional-tester/etcd-runner/command/lease_renewer_command.go",
                "deleted file mode 100644",
                "index e5257d430..000000000",
                "--- a/tools/functional-tester/etcd-runner/command/lease_renewer_command.go",
                "+++ /dev/null",
                "@@ -1,86 +0,0 @@",
                "-// Copyright 2016 The etcd Authors",
                "-//",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-//",
                "-//     http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.",
                "-",
                "-package command",
                "-",
                "-import (",
                "-\t\"context\"",
                "-\t\"errors\"",
                "-\t\"fmt\"",
                "-\t\"log\"",
                "-\t\"time\"",
                "-",
                "-\t\"github.com/coreos/etcd/clientv3\"",
                "-\t\"github.com/spf13/cobra\"",
                "-\t\"google.golang.org/grpc\"",
                "-\t\"google.golang.org/grpc/codes\"",
                "-)",
                "-",
                "-// NewLeaseRenewerCommand returns the cobra command for \"lease-renewer runner\".",
                "-func NewLeaseRenewerCommand() *cobra.Command {",
                "-\tcmd := &cobra.Command{",
                "-\t\tUse:   \"lease-renewer\",",
                "-\t\tShort: \"Performs lease renew operation\",",
                "-\t\tRun:   runLeaseRenewerFunc,",
                "-\t}",
                "-\treturn cmd",
                "-}",
                "-",
                "-func runLeaseRenewerFunc(cmd *cobra.Command, args []string) {",
                "-\tif len(args) > 0 {",
                "-\t\tExitWithError(ExitBadArgs, errors.New(\"lease-renewer does not take any argument\"))",
                "-\t}",
                "-",
                "-\teps := endpointsFromFlag(cmd)",
                "-\tdialTimeout := dialTimeoutFromCmd(cmd)",
                "-\tc := newClient(eps, dialTimeout)",
                "-\tctx := context.Background()",
                "-",
                "-\tfor {",
                "-\t\tvar (",
                "-\t\t\tl   *clientv3.LeaseGrantResponse",
                "-\t\t\tlk  *clientv3.LeaseKeepAliveResponse",
                "-\t\t\terr error",
                "-\t\t)",
                "-\t\tfor {",
                "-\t\t\tl, err = c.Lease.Grant(ctx, 5)",
                "-\t\t\tif err == nil {",
                "-\t\t\t\tbreak",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\texpire := time.Now().Add(time.Duration(l.TTL-1) * time.Second)",
                "-",
                "-\t\tfor {",
                "-\t\t\tlk, err = c.Lease.KeepAliveOnce(ctx, l.ID)",
                "-\t\t\tif grpc.Code(err) == codes.NotFound {",
                "-\t\t\t\tif time.Since(expire) < 0 {",
                "-\t\t\t\t\tlog.Printf(\"bad renew! exceeded: %v\", time.Since(expire))",
                "-\t\t\t\t\tfor {",
                "-\t\t\t\t\t\tlk, err = c.Lease.KeepAliveOnce(ctx, l.ID)",
                "-\t\t\t\t\t\tfmt.Println(lk, err)",
                "-\t\t\t\t\t\ttime.Sleep(time.Second)",
                "-\t\t\t\t\t}",
                "-\t\t\t\t}",
                "-\t\t\t\tlog.Printf(\"lost lease %d, expire: %v\\n\", l.ID, expire)",
                "-\t\t\t\tbreak",
                "-\t\t\t}",
                "-\t\t\tif err != nil {",
                "-\t\t\t\tcontinue",
                "-\t\t\t}",
                "-\t\t\texpire = time.Now().Add(time.Duration(lk.TTL-1) * time.Second)",
                "-\t\t\tlog.Printf(\"renewed lease %d, expire: %v\\n\", lk.ID, expire)",
                "-\t\t\ttime.Sleep(time.Duration(lk.TTL-2) * time.Second)",
                "-\t\t}",
                "-\t}",
                "-}",
                "diff --git a/tools/functional-tester/etcd-runner/command/lock_racer_command.go b/tools/functional-tester/etcd-runner/command/lock_racer_command.go",
                "deleted file mode 100644",
                "index d9544263a..000000000",
                "--- a/tools/functional-tester/etcd-runner/command/lock_racer_command.go",
                "+++ /dev/null",
                "@@ -1,81 +0,0 @@",
                "-// Copyright 2016 The etcd Authors",
                "-//",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-//",
                "-//     http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.",
                "-",
                "-package command",
                "-",
                "-import (",
                "-\t\"context\"",
                "-\t\"errors\"",
                "-\t\"fmt\"",
                "-",
                "-\t\"github.com/coreos/etcd/clientv3/concurrency\"",
                "-\t\"github.com/spf13/cobra\"",
                "-)",
                "-",
                "-// NewLockRacerCommand returns the cobra command for \"lock-racer runner\".",
                "-func NewLockRacerCommand() *cobra.Command {",
                "-\tcmd := &cobra.Command{",
                "-\t\tUse:   \"lock-racer\",",
                "-\t\tShort: \"Performs lock race operation\",",
                "-\t\tRun:   runRacerFunc,",
                "-\t}",
                "-\tcmd.Flags().IntVar(&rounds, \"rounds\", 100, \"number of rounds to run\")",
                "-\tcmd.Flags().IntVar(&totalClientConnections, \"total-client-connections\", 10, \"total number of client connections\")",
                "-\treturn cmd",
                "-}",
                "-",
                "-func runRacerFunc(cmd *cobra.Command, args []string) {",
                "-\tif len(args) > 0 {",
                "-\t\tExitWithError(ExitBadArgs, errors.New(\"lock-racer does not take any argument\"))",
                "-\t}",
                "-",
                "-\trcs := make([]roundClient, totalClientConnections)",
                "-\tctx := context.Background()",
                "-\tcnt := 0",
                "-",
                "-\teps := endpointsFromFlag(cmd)",
                "-\tdialTimeout := dialTimeoutFromCmd(cmd)",
                "-",
                "-\tfor i := range rcs {",
                "-\t\tvar (",
                "-\t\t\ts   *concurrency.Session",
                "-\t\t\terr error",
                "-\t\t)",
                "-",
                "-\t\trcs[i].c = newClient(eps, dialTimeout)",
                "-",
                "-\t\tfor {",
                "-\t\t\ts, err = concurrency.NewSession(rcs[i].c)",
                "-\t\t\tif err == nil {",
                "-\t\t\t\tbreak",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\tm := concurrency.NewMutex(s, \"racers\")",
                "-\t\trcs[i].acquire = func() error { return m.Lock(ctx) }",
                "-\t\trcs[i].validate = func() error {",
                "-\t\t\tif cnt++; cnt != 1 {",
                "-\t\t\t\treturn fmt.Errorf(\"bad lock; count: %d\", cnt)",
                "-\t\t\t}",
                "-\t\t\treturn nil",
                "-\t\t}",
                "-\t\trcs[i].release = func() error {",
                "-\t\t\tif err := m.Unlock(ctx); err != nil {",
                "-\t\t\t\treturn err",
                "-\t\t\t}",
                "-\t\t\tcnt = 0",
                "-\t\t\treturn nil",
                "-\t\t}",
                "-\t}",
                "-\tdoRounds(rcs, rounds)",
                "-}",
                "diff --git a/tools/functional-tester/etcd-runner/command/watch_command.go b/tools/functional-tester/etcd-runner/command/watch_command.go",
                "deleted file mode 100644",
                "index fe9ab279b..000000000",
                "--- a/tools/functional-tester/etcd-runner/command/watch_command.go",
                "+++ /dev/null",
                "@@ -1,202 +0,0 @@",
                "-// Copyright 2016 The etcd Authors",
                "-//",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-//",
                "-//     http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.",
                "-",
                "-package command",
                "-",
                "-import (",
                "-\t\"context\"",
                "-\t\"errors\"",
                "-\t\"fmt\"",
                "-\t\"log\"",
                "-\t\"sync\"",
                "-\t\"time\"",
                "-",
                "-\t\"github.com/coreos/etcd/clientv3\"",
                "-\t\"github.com/coreos/etcd/pkg/stringutil\"",
                "-\t\"github.com/spf13/cobra\"",
                "-\t\"golang.org/x/time/rate\"",
                "-)",
                "-",
                "-// NewWatchCommand returns the cobra command for \"watcher runner\".",
                "-func NewWatchCommand() *cobra.Command {",
                "-\tcmd := &cobra.Command{",
                "-\t\tUse:   \"watcher\",",
                "-\t\tShort: \"Performs watch operation\",",
                "-\t\tRun:   runWatcherFunc,",
                "-\t}",
                "-\tcmd.Flags().IntVar(&rounds, \"rounds\", 100, \"number of rounds to run\")",
                "-\tcmd.Flags().DurationVar(&runningTime, \"running-time\", 60, \"number of seconds to run\")",
                "-\tcmd.Flags().IntVar(&noOfPrefixes, \"total-prefixes\", 10, \"total no of prefixes to use\")",
                "-\tcmd.Flags().IntVar(&watchPerPrefix, \"watch-per-prefix\", 10, \"number of watchers per prefix\")",
                "-\tcmd.Flags().IntVar(&reqRate, \"req-rate\", 30, \"rate at which put request will be performed\")",
                "-\tcmd.Flags().IntVar(&totalKeys, \"total-keys\", 1000, \"total number of keys to watch\")",
                "-\treturn cmd",
                "-}",
                "-",
                "-func runWatcherFunc(cmd *cobra.Command, args []string) {",
                "-\tif len(args) > 0 {",
                "-\t\tExitWithError(ExitBadArgs, errors.New(\"watcher does not take any argument\"))",
                "-\t}",
                "-",
                "-\tctx := context.Background()",
                "-\tfor round := 0; round < rounds; round++ {",
                "-\t\tfmt.Println(\"round\", round)",
                "-\t\tperformWatchOnPrefixes(ctx, cmd, round)",
                "-\t}",
                "-}",
                "-",
                "-func performWatchOnPrefixes(ctx context.Context, cmd *cobra.Command, round int) {",
                "-\tkeyPerPrefix := totalKeys / noOfPrefixes",
                "-\tprefixes := stringutil.UniqueStrings(5, noOfPrefixes)",
                "-\tkeys := stringutil.RandomStrings(10, keyPerPrefix)",
                "-",
                "-\troundPrefix := fmt.Sprintf(\"%16x\", round)",
                "-",
                "-\teps := endpointsFromFlag(cmd)",
                "-\tdialTimeout := dialTimeoutFromCmd(cmd)",
                "-",
                "-\tvar (",
                "-\t\trevision int64",
                "-\t\twg       sync.WaitGroup",
                "-\t\tgr       *clientv3.GetResponse",
                "-\t\terr      error",
                "-\t)",
                "-",
                "-\tclient := newClient(eps, dialTimeout)",
                "-\tdefer client.Close()",
                "-",
                "-\tgr, err = getKey(ctx, client, \"non-existent\")",
                "-\tif err != nil {",
                "-\t\tlog.Fatalf(\"failed to get the initial revision: %v\", err)",
                "-\t}",
                "-\trevision = gr.Header.Revision",
                "-",
                "-\tctxt, cancel := context.WithDeadline(ctx, time.Now().Add(runningTime*time.Second))",
                "-\tdefer cancel()",
                "-",
                "-\t// generate and put keys in cluster",
                "-\tlimiter := rate.NewLimiter(rate.Limit(reqRate), reqRate)",
                "-",
                "-\tgo func() {",
                "-\t\tfor _, key := range keys {",
                "-\t\t\tfor _, prefix := range prefixes {",
                "-\t\t\t\tif err = limiter.Wait(ctxt); err != nil {",
                "-\t\t\t\t\treturn",
                "-\t\t\t\t}",
                "-\t\t\t\tif err = putKeyAtMostOnce(ctxt, client, roundPrefix+\"-\"+prefix+\"-\"+key); err != nil {",
                "-\t\t\t\t\tlog.Fatalf(\"failed to put key: %v\", err)",
                "-\t\t\t\t\treturn",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                "-\t}()",
                "-",
                "-\tctxc, cancelc := context.WithCancel(ctx)",
                "-",
                "-\twcs := make([]clientv3.WatchChan, 0)",
                "-\trcs := make([]*clientv3.Client, 0)",
                "-",
                "-\tfor _, prefix := range prefixes {",
                "-\t\tfor j := 0; j < watchPerPrefix; j++ {",
                "-\t\t\trc := newClient(eps, dialTimeout)",
                "-\t\t\trcs = append(rcs, rc)",
                "-",
                "-\t\t\twatchPrefix := roundPrefix + \"-\" + prefix",
                "-",
                "-\t\t\twc := rc.Watch(ctxc, watchPrefix, clientv3.WithPrefix(), clientv3.WithRev(revision))",
                "-\t\t\twcs = append(wcs, wc)",
                "-",
                "-\t\t\twg.Add(1)",
                "-\t\t\tgo func() {",
                "-\t\t\t\tdefer wg.Done()",
                "-\t\t\t\tcheckWatchResponse(wc, watchPrefix, keys)",
                "-\t\t\t}()",
                "-\t\t}",
                "-\t}",
                "-\twg.Wait()",
                "-",
                "-\tcancelc()",
                "-",
                "-\t// verify all watch channels are closed",
                "-\tfor e, wc := range wcs {",
                "-\t\tif _, ok := <-wc; ok {",
                "-\t\t\tlog.Fatalf(\"expected wc to be closed, but received %v\", e)",
                "-\t\t}",
                "-\t}",
                "-",
                "-\tfor _, rc := range rcs {",
                "-\t\trc.Close()",
                "-\t}",
                "-",
                "-\tif err = deletePrefix(ctx, client, roundPrefix); err != nil {",
                "-\t\tlog.Fatalf(\"failed to clean up keys after test: %v\", err)",
                "-\t}",
                "-}",
                "-",
                "-func checkWatchResponse(wc clientv3.WatchChan, prefix string, keys []string) {",
                "-\tfor n := 0; n < len(keys); {",
                "-\t\twr, more := <-wc",
                "-\t\tif !more {",
                "-\t\t\tlog.Fatalf(\"expect more keys (received %d/%d) for %s\", len(keys), n, prefix)",
                "-\t\t}",
                "-\t\tfor _, event := range wr.Events {",
                "-\t\t\texpectedKey := prefix + \"-\" + keys[n]",
                "-\t\t\treceivedKey := string(event.Kv.Key)",
                "-\t\t\tif expectedKey != receivedKey {",
                "-\t\t\t\tlog.Fatalf(\"expected key %q, got %q for prefix : %q\\n\", expectedKey, receivedKey, prefix)",
                "-\t\t\t}",
                "-\t\t\tn++",
                "-\t\t}",
                "-\t}",
                "-}",
                "-",
                "-func putKeyAtMostOnce(ctx context.Context, client *clientv3.Client, key string) error {",
                "-\tgr, err := getKey(ctx, client, key)",
                "-\tif err != nil {",
                "-\t\treturn err",
                "-\t}",
                "-",
                "-\tvar modrev int64",
                "-\tif len(gr.Kvs) > 0 {",
                "-\t\tmodrev = gr.Kvs[0].ModRevision",
                "-\t}",
                "-",
                "-\tfor ctx.Err() == nil {",
                "-\t\t_, err := client.Txn(ctx).If(clientv3.Compare(clientv3.ModRevision(key), \"=\", modrev)).Then(clientv3.OpPut(key, key)).Commit()",
                "-",
                "-\t\tif err == nil {",
                "-\t\t\treturn nil",
                "-\t\t}",
                "-\t}",
                "-",
                "-\treturn ctx.Err()",
                "-}",
                "-",
                "-func deletePrefix(ctx context.Context, client *clientv3.Client, key string) error {",
                "-\tfor ctx.Err() == nil {",
                "-\t\tif _, err := client.Delete(ctx, key, clientv3.WithPrefix()); err == nil {",
                "-\t\t\treturn nil",
                "-\t\t}",
                "-\t}",
                "-\treturn ctx.Err()",
                "-}",
                "-",
                "-func getKey(ctx context.Context, client *clientv3.Client, key string) (*clientv3.GetResponse, error) {",
                "-\tfor ctx.Err() == nil {",
                "-\t\tif gr, err := client.Get(ctx, key); err == nil {",
                "-\t\t\treturn gr, nil",
                "-\t\t}",
                "-\t}",
                "-\treturn nil, ctx.Err()",
                "-}",
                "diff --git a/tools/functional-tester/etcd-runner/help.go b/tools/functional-tester/etcd-runner/help.go",
                "deleted file mode 100644",
                "index 18eec4582..000000000",
                "--- a/tools/functional-tester/etcd-runner/help.go",
                "+++ /dev/null",
                "@@ -1,174 +0,0 @@",
                "-// Copyright 2015 The etcd Authors",
                "-//",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-//",
                "-//     http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.",
                "-",
                "-// copied from https://github.com/coreos/rkt/blob/master/rkt/help.go",
                "-",
                "-package main",
                "-",
                "-import (",
                "-\t\"bytes\"",
                "-\t\"fmt\"",
                "-\t\"io\"",
                "-\t\"os\"",
                "-\t\"strings\"",
                "-\t\"text/tabwriter\"",
                "-\t\"text/template\"",
                "-",
                "-\t\"github.com/coreos/etcd/version\"",
                "-\t\"github.com/spf13/cobra\"",
                "-\t\"github.com/spf13/pflag\"",
                "-)",
                "-",
                "-var (",
                "-\tcommandUsageTemplate *template.Template",
                "-\ttemplFuncs           = template.FuncMap{",
                "-\t\t\"descToLines\": func(s string) []string {",
                "-\t\t\t// trim leading/trailing whitespace and split into slice of lines",
                "-\t\t\treturn strings.Split(strings.Trim(s, \"\\n\\t \"), \"\\n\")",
                "-\t\t},",
                "-\t\t\"cmdName\": func(cmd *cobra.Command, startCmd *cobra.Command) string {",
                "-\t\t\tparts := []string{cmd.Name()}",
                "-\t\t\tfor cmd.HasParent() && cmd.Parent().Name() != startCmd.Name() {",
                "-\t\t\t\tcmd = cmd.Parent()",
                "-\t\t\t\tparts = append([]string{cmd.Name()}, parts...)",
                "-\t\t\t}",
                "-\t\t\treturn strings.Join(parts, \" \")",
                "-\t\t},",
                "-\t}",
                "-)",
                "-",
                "-func init() {",
                "-\tcommandUsage := `",
                "-{{ $cmd := .Cmd }}\\",
                "-{{ $cmdname := cmdName .Cmd .Cmd.Root }}\\",
                "-NAME:",
                "-{{ if not .Cmd.HasParent }}\\",
                "-{{printf \"\\t%s - %s\" .Cmd.Name .Cmd.Short}}",
                "-{{else}}\\",
                "-{{printf \"\\t%s - %s\" $cmdname .Cmd.Short}}",
                "-{{end}}\\",
                "-",
                "-USAGE:",
                "-{{printf \"\\t%s\" .Cmd.UseLine}}",
                "-{{ if not .Cmd.HasParent }}\\",
                "-",
                "-VERSION:",
                "-{{printf \"\\t%s\" .Version}}",
                "-{{end}}\\",
                "-{{if .Cmd.HasSubCommands}}\\",
                "-",
                "-API VERSION:",
                "-{{printf \"\\t%s\" .APIVersion}}",
                "-{{end}}\\",
                "-{{if .Cmd.HasSubCommands}}\\",
                "-",
                "-",
                "-COMMANDS:",
                "-{{range .SubCommands}}\\",
                "-{{ $cmdname := cmdName . $cmd }}\\",
                "-{{ if .Runnable }}\\",
                "-{{printf \"\\t%s\\t%s\" $cmdname .Short}}",
                "-{{end}}\\",
                "-{{end}}\\",
                "-{{end}}\\",
                "-{{ if .Cmd.Long }}\\",
                "-",
                "-DESCRIPTION:",
                "-{{range $line := descToLines .Cmd.Long}}{{printf \"\\t%s\" $line}}",
                "-{{end}}\\",
                "-{{end}}\\",
                "-{{if .Cmd.HasLocalFlags}}\\",
                "-",
                "-OPTIONS:",
                "-{{.LocalFlags}}\\",
                "-{{end}}\\",
                "-{{if .Cmd.HasInheritedFlags}}\\",
                "-",
                "-GLOBAL OPTIONS:",
                "-{{.GlobalFlags}}\\",
                "-{{end}}",
                "-`[1:]",
                "-",
                "-\tcommandUsageTemplate = template.Must(template.New(\"command_usage\").Funcs(templFuncs).Parse(strings.Replace(commandUsage, \"\\\\\\n\", \"\", -1)))",
                "-}",
                "-",
                "-func etcdFlagUsages(flagSet *pflag.FlagSet) string {",
                "-\tx := new(bytes.Buffer)",
                "-",
                "-\tflagSet.VisitAll(func(flag *pflag.Flag) {",
                "-\t\tif len(flag.Deprecated) > 0 {",
                "-\t\t\treturn",
                "-\t\t}",
                "-\t\tformat := \"\"",
                "-\t\tif len(flag.Shorthand) > 0 {",
                "-\t\t\tformat = \"  -%s, --%s\"",
                "-\t\t} else {",
                "-\t\t\tformat = \"   %s   --%s\"",
                "-\t\t}",
                "-\t\tif len(flag.NoOptDefVal) > 0 {",
                "-\t\t\tformat = format + \"[\"",
                "-\t\t}",
                "-\t\tif flag.Value.Type() == \"string\" {",
                "-\t\t\t// put quotes on the value",
                "-\t\t\tformat = format + \"=%q\"",
                "-\t\t} else {",
                "-\t\t\tformat = format + \"=%s\"",
                "-\t\t}",
                "-\t\tif len(flag.NoOptDefVal) > 0 {",
                "-\t\t\tformat = format + \"]\"",
                "-\t\t}",
                "-\t\tformat = format + \"\\t%s\\n\"",
                "-\t\tshorthand := flag.Shorthand",
                "-\t\tfmt.Fprintf(x, format, shorthand, flag.Name, flag.DefValue, flag.Usage)",
                "-\t})",
                "-",
                "-\treturn x.String()",
                "-}",
                "-",
                "-func getSubCommands(cmd *cobra.Command) []*cobra.Command {",
                "-\tvar subCommands []*cobra.Command",
                "-\tfor _, subCmd := range cmd.Commands() {",
                "-\t\tsubCommands = append(subCommands, subCmd)",
                "-\t\tsubCommands = append(subCommands, getSubCommands(subCmd)...)",
                "-\t}",
                "-\treturn subCommands",
                "-}",
                "-",
                "-func usageFunc(cmd *cobra.Command) error {",
                "-\tsubCommands := getSubCommands(cmd)",
                "-\ttabOut := getTabOutWithWriter(os.Stdout)",
                "-\tcommandUsageTemplate.Execute(tabOut, struct {",
                "-\t\tCmd         *cobra.Command",
                "-\t\tLocalFlags  string",
                "-\t\tGlobalFlags string",
                "-\t\tSubCommands []*cobra.Command",
                "-\t\tVersion     string",
                "-\t\tAPIVersion  string",
                "-\t}{",
                "-\t\tcmd,",
                "-\t\tetcdFlagUsages(cmd.LocalFlags()),",
                "-\t\tetcdFlagUsages(cmd.InheritedFlags()),",
                "-\t\tsubCommands,",
                "-\t\tversion.Version,",
                "-\t\tversion.APIVersion,",
                "-\t})",
                "-\ttabOut.Flush()",
                "-\treturn nil",
                "-}",
                "-",
                "-func getTabOutWithWriter(writer io.Writer) *tabwriter.Writer {",
                "-\taTabOut := new(tabwriter.Writer)",
                "-\taTabOut.Init(writer, 0, 8, 1, '\\t', 0)",
                "-\treturn aTabOut",
                "-}",
                "diff --git a/tools/functional-tester/etcd-runner/main.go b/tools/functional-tester/etcd-runner/main.go",
                "deleted file mode 100644",
                "index 82dbc309f..000000000",
                "--- a/tools/functional-tester/etcd-runner/main.go",
                "+++ /dev/null",
                "@@ -1,75 +0,0 @@",
                "-// Copyright 2016 The etcd Authors",
                "-//",
                "-// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-// you may not use this file except in compliance with the License.",
                "-// You may obtain a copy of the License at",
                "-//",
                "-//     http://www.apache.org/licenses/LICENSE-2.0",
                "-//",
                "-// Unless required by applicable law or agreed to in writing, software",
                "-// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-// See the License for the specific language governing permissions and",
                "-// limitations under the License.",
                "-",
                "-// etcd-runner is a command line application that performs tests on etcd.",
                "-package main",
                "-",
                "-import (",
                "-\t\"log\"",
                "-\t\"time\"",
                "-",
                "-\t\"github.com/coreos/etcd/tools/functional-tester/etcd-runner/command\"",
                "-\t\"github.com/spf13/cobra\"",
                "-)",
                "-",
                "-const (",
                "-\tcliName        = \"etcd-runner\"",
                "-\tcliDescription = \"Stress tests using clientv3 functionality..\"",
                "-",
                "-\tdefaultDialTimeout = 2 * time.Second",
                "-)",
                "-",
                "-var (",
                "-\tglobalFlags = command.GlobalFlags{}",
                "-)",
                "-",
                "-var (",
                "-\trootCmd = &cobra.Command{",
                "-\t\tUse:        cliName,",
                "-\t\tShort:      cliDescription,",
                "-\t\tSuggestFor: []string{\"etcd-runner\"},",
                "-\t}",
                "-)",
                "-",
                "-func init() {",
                "-\tlog.SetFlags(log.Lmicroseconds)",
                "-\trootCmd.PersistentFlags().StringSliceVar(&globalFlags.Endpoints, \"endpoints\", []string{\"127.0.0.1:2379\"}, \"gRPC endpoints\")",
                "-\trootCmd.PersistentFlags().DurationVar(&globalFlags.DialTimeout, \"dial-timeout\", defaultDialTimeout, \"dial timeout for client connections\")",
                "-",
                "-\trootCmd.AddCommand(",
                "-\t\tcommand.NewElectionCommand(),",
                "-\t\tcommand.NewLeaseRenewerCommand(),",
                "-\t\tcommand.NewLockRacerCommand(),",
                "-\t\tcommand.NewWatchCommand(),",
                "-\t)",
                "-}",
                "-",
                "-func init() {",
                "-\tcobra.EnablePrefixMatching = true",
                "-}",
                "-",
                "-func Start() {",
                "-\trootCmd.SetUsageFunc(usageFunc)",
                "-",
                "-\t// Make help just show the usage",
                "-\trootCmd.SetHelpTemplate(`{{.UsageString}}`)",
                "-",
                "-\tif err := rootCmd.Execute(); err != nil {",
                "-\t\tcommand.ExitWithError(command.ExitError, err)",
                "-\t}",
                "-}",
                "-",
                "-func main() {",
                "-\tStart()",
                "-}",
                "diff --git a/tools/functional-tester/etcd-tester/checks.go b/tools/functional-tester/etcd-tester/checks.go",
                "index ac82aca23..f3c5de9b4 100644",
                "--- a/tools/functional-tester/etcd-tester/checks.go",
                "+++ b/tools/functional-tester/etcd-tester/checks.go",
                "@@ -135,3 +135,4 @@ func (lc *leaseChecker) checkShortLivedLease(ctx context.Context, leaseID int64)",
                " \t\tresp, err = lc.getLeaseByID(ctx, leaseID)",
                "-\t\tif rpctypes.Error(err) == rpctypes.ErrLeaseNotFound {",
                "+\t\t// lease not found, for ~v3.1 compatibilities, check ErrLeaseNotFound",
                "+\t\tif (err == nil && resp.TTL == -1) || (err != nil && rpctypes.Error(err) == rpctypes.ErrLeaseNotFound) {",
                " \t\t\treturn nil",
                "@@ -197,7 +198,9 @@ func (lc *leaseChecker) hasLeaseExpired(ctx context.Context, leaseID int64) (boo",
                " \t\tresp, err := lc.getLeaseByID(ctx, leaseID)",
                "-\t\tif err == nil {",
                "-\t\t\treturn false, nil",
                "-\t\t}",
                "-\t\tif rpctypes.Error(err) == rpctypes.ErrLeaseNotFound {",
                "-\t\t\treturn true, nil",
                "+\t\tif err != nil {",
                "+\t\t\t// for ~v3.1 compatibilities",
                "+\t\t\tif rpctypes.Error(err) == rpctypes.ErrLeaseNotFound {",
                "+\t\t\t\treturn true, nil",
                "+\t\t\t}",
                "+\t\t} else {",
                "+\t\t\treturn resp.TTL == -1, nil",
                " \t\t}",
                "@@ -244,2 +247,15 @@ func (cchecker *compositeChecker) Check() error {",
                "+type runnerChecker struct {",
                "+\terrc chan error",
                "+}",
                "+",
                "+func (rc *runnerChecker) Check() error {",
                "+\tselect {",
                "+\tcase err := <-rc.errc:",
                "+\t\treturn err",
                "+\tdefault:",
                "+\t\treturn nil",
                "+\t}",
                "+}",
                "+",
                " type noChecker struct{}",
                "diff --git a/tools/functional-tester/etcd-tester/cluster.go b/tools/functional-tester/etcd-tester/cluster.go",
                "index 0cfe679d1..61f36f0c9 100644",
                "--- a/tools/functional-tester/etcd-tester/cluster.go",
                "+++ b/tools/functional-tester/etcd-tester/cluster.go",
                "@@ -36,4 +36,2 @@ type agentConfig struct {",
                " \tfailpointPort int",
                "-",
                "-\tdatadir string",
                " }",
                "@@ -80,5 +78,5 @@ func (c *cluster) bootstrap() error {",
                " \t\t\tm.Flags(),",
                "-\t\t\t\"--data-dir\", c.agents[i].datadir,",
                " \t\t\t\"--initial-cluster-token\", token,",
                "-\t\t\t\"--initial-cluster\", clusterStr)",
                "+\t\t\t\"--initial-cluster\", clusterStr,",
                "+\t\t\t\"--snapshot-count\", \"10000\")",
                "diff --git a/tools/functional-tester/etcd-tester/etcd_runner_stresser.go b/tools/functional-tester/etcd-tester/etcd_runner_stresser.go",
                "new file mode 100644",
                "index 000000000..23636bf5a",
                "--- /dev/null",
                "+++ b/tools/functional-tester/etcd-tester/etcd_runner_stresser.go",
                "@@ -0,0 +1,97 @@",
                "+// Copyright 2017 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+package main",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"io/ioutil\"",
                "+\t\"os/exec\"",
                "+\t\"syscall\"",
                "+",
                "+\t\"golang.org/x/time/rate\"",
                "+)",
                "+",
                "+type runnerStresser struct {",
                "+\tcmd     *exec.Cmd",
                "+\tcmdStr  string",
                "+\targs    []string",
                "+\trl      *rate.Limiter",
                "+\treqRate int",
                "+",
                "+\terrc  chan error",
                "+\tdonec chan struct{}",
                "+}",
                "+",
                "+func newRunnerStresser(cmdStr string, args []string, rl *rate.Limiter, reqRate int) *runnerStresser {",
                "+\trl.SetLimit(rl.Limit() - rate.Limit(reqRate))",
                "+\treturn &runnerStresser{",
                "+\t\tcmdStr:  cmdStr,",
                "+\t\targs:    args,",
                "+\t\trl:      rl,",
                "+\t\treqRate: reqRate,",
                "+\t\terrc:    make(chan error, 1),",
                "+\t\tdonec:   make(chan struct{}),",
                "+\t}",
                "+}",
                "+",
                "+func (rs *runnerStresser) setupOnce() (err error) {",
                "+\tif rs.cmd != nil {",
                "+\t\treturn nil",
                "+\t}",
                "+",
                "+\trs.cmd = exec.Command(rs.cmdStr, rs.args...)",
                "+\tstderr, err := rs.cmd.StderrPipe()",
                "+\tif err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+",
                "+\tgo func() {",
                "+\t\tdefer close(rs.donec)",
                "+\t\tout, err := ioutil.ReadAll(stderr)",
                "+\t\tif err != nil {",
                "+\t\t\trs.errc <- err",
                "+\t\t} else {",
                "+\t\t\trs.errc <- fmt.Errorf(\"(%v %v) stderr %v\", rs.cmdStr, rs.args, string(out))",
                "+\t\t}",
                "+\t}()",
                "+",
                "+\treturn rs.cmd.Start()",
                "+}",
                "+",
                "+func (rs *runnerStresser) Stress() (err error) {",
                "+\tif err = rs.setupOnce(); err != nil {",
                "+\t\treturn err",
                "+\t}",
                "+\treturn syscall.Kill(rs.cmd.Process.Pid, syscall.SIGCONT)",
                "+}",
                "+",
                "+func (rs *runnerStresser) Pause() {",
                "+\tsyscall.Kill(rs.cmd.Process.Pid, syscall.SIGSTOP)",
                "+}",
                "+",
                "+func (rs *runnerStresser) Close() {",
                "+\tsyscall.Kill(rs.cmd.Process.Pid, syscall.SIGINT)",
                "+\trs.cmd.Wait()",
                "+\t<-rs.donec",
                "+\trs.rl.SetLimit(rs.rl.Limit() + rate.Limit(rs.reqRate))",
                "+}",
                "+",
                "+func (rs *runnerStresser) ModifiedKeys() int64 {",
                "+\treturn 1",
                "+}",
                "+",
                "+func (rs *runnerStresser) Checker() Checker {",
                "+\treturn &runnerChecker{rs.errc}",
                "+}",
                "diff --git a/tools/functional-tester/etcd-tester/failpoint.go b/tools/functional-tester/etcd-tester/failpoint.go",
                "index 1080dbece..bfb937436 100644",
                "--- a/tools/functional-tester/etcd-tester/failpoint.go",
                "+++ b/tools/functional-tester/etcd-tester/failpoint.go",
                "@@ -34,3 +34,3 @@ var fpStats failpointStats",
                "-func failpointFailures(c *cluster) (ret []failure, err error) {",
                "+func failpointFailures(c *cluster, failpoints []string) (ret []failure, err error) {",
                " \tvar fps []string",
                "@@ -45,3 +45,3 @@ func failpointFailures(c *cluster) (ret []failure, err error) {",
                " \t\t}",
                "-\t\tfpFails := failuresFromFailpoint(fp)",
                "+\t\tfpFails := failuresFromFailpoint(fp, failpoints)",
                " \t\t// wrap in delays so failpoint has time to trigger",
                "@@ -79,24 +79,11 @@ func failpointPaths(endpoint string) ([]string, error) {",
                "-func failuresFromFailpoint(fp string) []failure {",
                "-\tinject := makeInjectFailpoint(fp, `panic(\"etcd-tester\")`)",
                "+// failpoints follows FreeBSD KFAIL_POINT syntax.",
                "+// e.g. panic(\"etcd-tester\"),1*sleep(1000)->panic(\"etcd-tester\")",
                "+func failuresFromFailpoint(fp string, failpoints []string) (fs []failure) {",
                " \trecov := makeRecoverFailpoint(fp)",
                "-\treturn []failure{",
                "-\t\t&failureOne{",
                "-\t\t\tdescription:   description(\"failpoint \" + fp + \" panic one\"),",
                "-\t\t\tinjectMember:  inject,",
                "-\t\t\trecoverMember: recov,",
                "-\t\t},",
                "-\t\t&failureAll{",
                "-\t\t\tdescription:   description(\"failpoint \" + fp + \" panic all\"),",
                "-\t\t\tinjectMember:  inject,",
                "-\t\t\trecoverMember: recov,",
                "-\t\t},",
                "-\t\t&failureMajority{",
                "-\t\t\tdescription:   description(\"failpoint \" + fp + \" panic majority\"),",
                "-\t\t\tinjectMember:  inject,",
                "-\t\t\trecoverMember: recov,",
                "-\t\t},",
                "-\t\t&failureLeader{",
                "-\t\t\tfailureByFunc{",
                "-\t\t\t\tdescription:   description(\"failpoint \" + fp + \" panic leader\"),",
                "+\tfor _, failpoint := range failpoints {",
                "+\t\tinject := makeInjectFailpoint(fp, failpoint)",
                "+\t\tfs = append(fs, []failure{",
                "+\t\t\t&failureOne{",
                "+\t\t\t\tdescription:   description(fmt.Sprintf(\"failpoint %s (one: %s)\", fp, failpoint)),",
                " \t\t\t\tinjectMember:  inject,",
                "@@ -104,5 +91,23 @@ func failuresFromFailpoint(fp string) []failure {",
                " \t\t\t},",
                "-\t\t\t0,",
                "-\t\t},",
                "+\t\t\t&failureAll{",
                "+\t\t\t\tdescription:   description(fmt.Sprintf(\"failpoint %s (all: %s)\", fp, failpoint)),",
                "+\t\t\t\tinjectMember:  inject,",
                "+\t\t\t\trecoverMember: recov,",
                "+\t\t\t},",
                "+\t\t\t&failureMajority{",
                "+\t\t\t\tdescription:   description(fmt.Sprintf(\"failpoint %s (majority: %s)\", fp, failpoint)),",
                "+\t\t\t\tinjectMember:  inject,",
                "+\t\t\t\trecoverMember: recov,",
                "+\t\t\t},",
                "+\t\t\t&failureLeader{",
                "+\t\t\t\tfailureByFunc{",
                "+\t\t\t\t\tdescription:   description(fmt.Sprintf(\"failpoint %s (leader: %s)\", fp, failpoint)),",
                "+\t\t\t\t\tinjectMember:  inject,",
                "+\t\t\t\t\trecoverMember: recov,",
                "+\t\t\t\t},",
                "+\t\t\t\t0,",
                "+\t\t\t},",
                "+\t\t}...)",
                " \t}",
                "+\treturn fs",
                " }",
                "diff --git a/tools/functional-tester/etcd-tester/key_stresser.go b/tools/functional-tester/etcd-tester/key_stresser.go",
                "index e049a62c9..1e351b7e1 100644",
                "--- a/tools/functional-tester/etcd-tester/key_stresser.go",
                "+++ b/tools/functional-tester/etcd-tester/key_stresser.go",
                "@@ -142,3 +142,7 @@ func (s *keyStresser) run(ctx context.Context) {",
                "-func (s *keyStresser) Cancel() {",
                "+func (s *keyStresser) Pause() {",
                "+\ts.Close()",
                "+}",
                "+",
                "+func (s *keyStresser) Close() {",
                " \ts.cancel()",
                "@@ -146,3 +150,4 @@ func (s *keyStresser) Cancel() {",
                " \ts.wg.Wait()",
                "-\tplog.Infof(\"keyStresser %q is canceled\", s.Endpoint)",
                "+\tplog.Infof(\"keyStresser %q is closed\", s.Endpoint)",
                "+",
                " }",
                "diff --git a/tools/functional-tester/etcd-tester/lease_stresser.go b/tools/functional-tester/etcd-tester/lease_stresser.go",
                "index fe334952d..0767ccc2b 100644",
                "--- a/tools/functional-tester/etcd-tester/lease_stresser.go",
                "+++ b/tools/functional-tester/etcd-tester/lease_stresser.go",
                "@@ -363,4 +363,8 @@ func (ls *leaseStresser) randomlyDropLease(leaseID int64) (bool, error) {",
                "-func (ls *leaseStresser) Cancel() {",
                "-\tplog.Debugf(\"lease stresser %q is canceling...\", ls.endpoint)",
                "+func (ls *leaseStresser) Pause() {",
                "+\tls.Close()",
                "+}",
                "+",
                "+func (ls *leaseStresser) Close() {",
                "+\tplog.Debugf(\"lease stresser %q is closing...\", ls.endpoint)",
                " \tls.cancel()",
                "@@ -369,3 +373,3 @@ func (ls *leaseStresser) Cancel() {",
                " \tls.conn.Close()",
                "-\tplog.Infof(\"lease stresser %q is canceled\", ls.endpoint)",
                "+\tplog.Infof(\"lease stresser %q is closed\", ls.endpoint)",
                " }",
                "diff --git a/tools/functional-tester/etcd-tester/main.go b/tools/functional-tester/etcd-tester/main.go",
                "index 265157c72..16d55bbfb 100644",
                "--- a/tools/functional-tester/etcd-tester/main.go",
                "+++ b/tools/functional-tester/etcd-tester/main.go",
                "@@ -20,3 +20,2 @@ import (",
                " \t\"net/http\"",
                "-\t\"net/http/pprof\"",
                " \t\"os\"",
                "@@ -24,2 +23,4 @@ import (",
                "+\t\"github.com/coreos/etcd/pkg/debugutil\"",
                "+",
                " \t\"github.com/coreos/pkg/capnslog\"",
                "@@ -37,4 +38,2 @@ const (",
                "-const pprofPrefix = \"/debug/pprof-tester\"",
                "-",
                " func main() {",
                "@@ -45,3 +44,2 @@ func main() {",
                "-\tdatadir := flag.String(\"data-dir\", \"agent.etcd\", \"etcd data directory location on agent machine.\")",
                " \tstressKeyLargeSize := flag.Uint(\"stress-key-large-size\", 32*1024+1, \"the size of each large key written into etcd.\")",
                "@@ -50,2 +48,3 @@ func main() {",
                " \tlimit := flag.Int(\"limit\", -1, \"the limit of rounds to run failure set (-1 to run without limits).\")",
                "+\texitOnFailure := flag.Bool(\"exit-on-failure\", false, \"exit tester on first failure\")",
                " \tstressQPS := flag.Int(\"stress-qps\", 10000, \"maximum number of stresser requests per second.\")",
                "@@ -53,4 +52,6 @@ func main() {",
                " \tconsistencyCheck := flag.Bool(\"consistency-check\", true, \"true to check consistency (revision, hash)\")",
                "-\tstresserType := flag.String(\"stresser\", \"keys,lease\", \"comma separated list of stressers (keys, lease, v2keys, nop).\")",
                "+\tstresserType := flag.String(\"stresser\", \"keys,lease\", \"comma separated list of stressers (keys, lease, v2keys, nop, election-runner, watch-runner, lock-racer-runner, lease-runner).\")",
                "+\tetcdRunnerPath := flag.String(\"etcd-runner\", \"\", \"specify a path of etcd runner binary\")",
                " \tfailureTypes := flag.String(\"failures\", \"default,failpoints\", \"specify failures (concat of \\\"default\\\" and \\\"failpoints\\\").\")",
                "+\tfailpoints := flag.String(\"failpoints\", `panic(\"etcd-tester\")`, `comma separated list of failpoint terms to inject (e.g. 'panic(\"etcd-tester\"),1*sleep(1000)')`)",
                " \texternalFailures := flag.String(\"external-failures\", \"\", \"specify a path of script for enabling/disabling an external fault injector\")",
                "@@ -70,3 +71,2 @@ func main() {",
                " \t\tagents[i].failpointPort = fports[i]",
                "-\t\tagents[i].datadir = *datadir",
                " \t}",
                "@@ -85,3 +85,4 @@ func main() {",
                " \tif failureTypes != nil && *failureTypes != \"\" {",
                "-\t\tfailures = makeFailures(*failureTypes, c)",
                "+\t\ttypes, failpoints := strings.Split(*failureTypes, \",\"), strings.Split(*failpoints, \",\")",
                "+\t\tfailures = makeFailures(types, failpoints, c)",
                " \t}",
                "@@ -122,2 +123,4 @@ func main() {",
                " \t\tkeysPerLease:   10,",
                "+",
                "+\t\tetcdRunnerPath: *etcdRunnerPath,",
                " \t}",
                "@@ -125,5 +128,6 @@ func main() {",
                " \tt := &tester{",
                "-\t\tfailures: schedule,",
                "-\t\tcluster:  c,",
                "-\t\tlimit:    *limit,",
                "+\t\tfailures:      schedule,",
                "+\t\tcluster:       c,",
                "+\t\tlimit:         *limit,",
                "+\t\texitOnFailure: *exitOnFailure,",
                "@@ -139,11 +143,5 @@ func main() {",
                " \tif *enablePprof {",
                "-\t\thttp.Handle(pprofPrefix+\"/\", http.HandlerFunc(pprof.Index))",
                "-\t\thttp.Handle(pprofPrefix+\"/profile\", http.HandlerFunc(pprof.Profile))",
                "-\t\thttp.Handle(pprofPrefix+\"/symbol\", http.HandlerFunc(pprof.Symbol))",
                "-\t\thttp.Handle(pprofPrefix+\"/cmdline\", http.HandlerFunc(pprof.Cmdline))",
                "-\t\thttp.Handle(pprofPrefix+\"/trace\", http.HandlerFunc(pprof.Trace))",
                "-\t\thttp.Handle(pprofPrefix+\"/heap\", pprof.Handler(\"heap\"))",
                "-\t\thttp.Handle(pprofPrefix+\"/goroutine\", pprof.Handler(\"goroutine\"))",
                "-\t\thttp.Handle(pprofPrefix+\"/threadcreate\", pprof.Handler(\"threadcreate\"))",
                "-\t\thttp.Handle(pprofPrefix+\"/block\", pprof.Handler(\"block\"))",
                "+\t\tfor p, h := range debugutil.PProfHandlers() {",
                "+\t\t\thttp.Handle(p, h)",
                "+\t\t}",
                " \t}",
                "@@ -178,8 +176,6 @@ func portsFromArg(arg string, n, defaultPort int) []int {",
                "-func makeFailures(types string, c *cluster) []failure {",
                "+func makeFailures(types, failpoints []string, c *cluster) []failure {",
                " \tvar failures []failure",
                "-",
                "-\tfails := strings.Split(types, \",\")",
                "-\tfor i := range fails {",
                "-\t\tswitch fails[i] {",
                "+\tfor i := range types {",
                "+\t\tswitch types[i] {",
                " \t\tcase \"default\":",
                "@@ -201,3 +197,3 @@ func makeFailures(types string, c *cluster) []failure {",
                " \t\tcase \"failpoints\":",
                "-\t\t\tfpFailures, fperr := failpointFailures(c)",
                "+\t\t\tfpFailures, fperr := failpointFailures(c, failpoints)",
                " \t\t\tif len(fpFailures) == 0 {",
                "@@ -208,3 +204,3 @@ func makeFailures(types string, c *cluster) []failure {",
                " \t\tdefault:",
                "-\t\t\tplog.Errorf(\"unknown failure: %s\\n\", fails[i])",
                "+\t\t\tplog.Errorf(\"unknown failure: %s\\n\", types[i])",
                " \t\t\tos.Exit(1)",
                "diff --git a/tools/functional-tester/etcd-tester/member.go b/tools/functional-tester/etcd-tester/member.go",
                "index 38033b800..7954e534c 100644",
                "--- a/tools/functional-tester/etcd-tester/member.go",
                "+++ b/tools/functional-tester/etcd-tester/member.go",
                "@@ -81,3 +81,6 @@ func (m *member) Defrag() error {",
                " \tdefer cli.Close()",
                "-\tif _, err = cli.Defragment(context.Background(), m.ClientURL); err != nil {",
                "+\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)",
                "+\t_, err = cli.Defragment(ctx, m.ClientURL)",
                "+\tcancel()",
                "+\tif err != nil {",
                " \t\treturn err",
                "diff --git a/tools/functional-tester/etcd-tester/stresser.go b/tools/functional-tester/etcd-tester/stresser.go",
                "index ea8968d58..f9ab3f9fb 100644",
                "--- a/tools/functional-tester/etcd-tester/stresser.go",
                "+++ b/tools/functional-tester/etcd-tester/stresser.go",
                "@@ -17,2 +17,3 @@ package main",
                " import (",
                "+\t\"fmt\"",
                " \t\"strings\"",
                "@@ -22,7 +23,4 @@ import (",
                " \t\"golang.org/x/time/rate\"",
                "-\t\"google.golang.org/grpc/grpclog\"",
                " )",
                "-func init() { grpclog.SetLogger(plog) }",
                "-",
                " type Stresser interface {",
                "@@ -30,4 +28,6 @@ type Stresser interface {",
                " \tStress() error",
                "-\t// Cancel cancels the stress test on the etcd cluster",
                "-\tCancel()",
                "+\t// Pause stops the stresser from sending requests to etcd. Resume by calling Stress.",
                "+\tPause()",
                "+\t// Close releases all of the Stresser's resources.",
                "+\tClose()",
                " \t// ModifiedKeys reports the number of keys created and deleted by stresser",
                "@@ -45,3 +45,4 @@ type nopStresser struct {",
                " func (s *nopStresser) Stress() error { return nil }",
                "-func (s *nopStresser) Cancel()       {}",
                "+func (s *nopStresser) Pause()        {}",
                "+func (s *nopStresser) Close()        {}",
                " func (s *nopStresser) ModifiedKeys() int64 {",
                "@@ -61,3 +62,3 @@ func (cs *compositeStresser) Stress() error {",
                " \t\t\tfor j := 0; j < i; j++ {",
                "-\t\t\t\tcs.stressers[i].Cancel()",
                "+\t\t\t\tcs.stressers[i].Close()",
                " \t\t\t}",
                "@@ -69,3 +70,15 @@ func (cs *compositeStresser) Stress() error {",
                "-func (cs *compositeStresser) Cancel() {",
                "+func (cs *compositeStresser) Pause() {",
                "+\tvar wg sync.WaitGroup",
                "+\twg.Add(len(cs.stressers))",
                "+\tfor i := range cs.stressers {",
                "+\t\tgo func(s Stresser) {",
                "+\t\t\tdefer wg.Done()",
                "+\t\t\ts.Pause()",
                "+\t\t}(cs.stressers[i])",
                "+\t}",
                "+\twg.Wait()",
                "+}",
                "+",
                "+func (cs *compositeStresser) Close() {",
                " \tvar wg sync.WaitGroup",
                "@@ -75,3 +88,3 @@ func (cs *compositeStresser) Cancel() {",
                " \t\t\tdefer wg.Done()",
                "-\t\t\ts.Cancel()",
                "+\t\t\ts.Close()",
                " \t\t}(cs.stressers[i])",
                "@@ -110,2 +123,4 @@ type stressConfig struct {",
                " \trateLimiter *rate.Limiter",
                "+",
                "+\tetcdRunnerPath string",
                " }",
                "@@ -151,2 +166,45 @@ func NewStresser(s string, sc *stressConfig, m *member) Stresser {",
                " \t\t}",
                "+\tcase \"election-runner\":",
                "+\t\treqRate := 100",
                "+\t\targs := []string{",
                "+\t\t\t\"election\",",
                "+\t\t\tfmt.Sprintf(\"%v\", time.Now().UnixNano()), // election name as current nano time",
                "+\t\t\t\"--dial-timeout=10s\",",
                "+\t\t\t\"--endpoints\", m.grpcAddr(),",
                "+\t\t\t\"--total-client-connections=10\",",
                "+\t\t\t\"--rounds=0\", // runs forever",
                "+\t\t\t\"--req-rate\", fmt.Sprintf(\"%v\", reqRate),",
                "+\t\t}",
                "+\t\treturn newRunnerStresser(sc.etcdRunnerPath, args, sc.rateLimiter, reqRate)",
                "+\tcase \"watch-runner\":",
                "+\t\treqRate := 100",
                "+\t\targs := []string{",
                "+\t\t\t\"watcher\",",
                "+\t\t\t\"--prefix\", fmt.Sprintf(\"%v\", time.Now().UnixNano()), // prefix all keys with nano time",
                "+\t\t\t\"--total-keys=1\",",
                "+\t\t\t\"--total-prefixes=1\",",
                "+\t\t\t\"--watch-per-prefix=1\",",
                "+\t\t\t\"--endpoints\", m.grpcAddr(),",
                "+\t\t\t\"--rounds=0\", // runs forever",
                "+\t\t\t\"--req-rate\", fmt.Sprintf(\"%v\", reqRate),",
                "+\t\t}",
                "+\t\treturn newRunnerStresser(sc.etcdRunnerPath, args, sc.rateLimiter, reqRate)",
                "+\tcase \"lock-racer-runner\":",
                "+\t\treqRate := 100",
                "+\t\targs := []string{",
                "+\t\t\t\"lock-racer\",",
                "+\t\t\tfmt.Sprintf(\"%v\", time.Now().UnixNano()), // locker name as current nano time",
                "+\t\t\t\"--endpoints\", m.grpcAddr(),",
                "+\t\t\t\"--total-client-connections=10\",",
                "+\t\t\t\"--rounds=0\", // runs forever",
                "+\t\t\t\"--req-rate\", fmt.Sprintf(\"%v\", reqRate),",
                "+\t\t}",
                "+\t\treturn newRunnerStresser(sc.etcdRunnerPath, args, sc.rateLimiter, reqRate)",
                "+\tcase \"lease-runner\":",
                "+\t\targs := []string{",
                "+\t\t\t\"lease-renewer\",",
                "+\t\t\t\"--ttl=30\",",
                "+\t\t\t\"--endpoints\", m.grpcAddr(),",
                "+\t\t}",
                "+\t\treturn newRunnerStresser(sc.etcdRunnerPath, args, sc.rateLimiter, 0)",
                " \tdefault:",
                "diff --git a/tools/functional-tester/etcd-tester/tester.go b/tools/functional-tester/etcd-tester/tester.go",
                "index 5eecf292d..6a0c72af5 100644",
                "--- a/tools/functional-tester/etcd-tester/tester.go",
                "+++ b/tools/functional-tester/etcd-tester/tester.go",
                "@@ -18,2 +18,3 @@ import (",
                " \t\"fmt\"",
                "+\t\"os\"",
                " \t\"time\"",
                "@@ -22,4 +23,5 @@ import (",
                " type tester struct {",
                "-\tcluster *cluster",
                "-\tlimit   int",
                "+\tcluster       *cluster",
                "+\tlimit         int",
                "+\texitOnFailure bool",
                "@@ -51,2 +53,3 @@ func (tt *tester) runLoop() {",
                " \t\tplog.Errorf(\"%s failed to start stresser (%v)\", tt.logPrefix(), err)",
                "+\t\ttt.failed()",
                " \t\treturn",
                "@@ -89,2 +92,3 @@ func (tt *tester) runLoop() {",
                " \t\t\t\tplog.Warningf(\"%s functional-tester returning with error (%v)\", tt.logPrefix(), err)",
                "+\t\t\t\ttt.failed()",
                " \t\t\t\treturn",
                "@@ -116,3 +120,3 @@ func (tt *tester) doRound(round int) error {",
                " \t\tplog.Infof(\"%s recovered failure\", tt.logPrefix())",
                "-\t\ttt.cancelStresser()",
                "+\t\ttt.pauseStresser()",
                " \t\tplog.Infof(\"%s wait until cluster is healthy\", tt.logPrefix())",
                "@@ -163,3 +167,3 @@ func (tt *tester) checkConsistency() (err error) {",
                " func (tt *tester) compact(rev int64, timeout time.Duration) (err error) {",
                "-\ttt.cancelStresser()",
                "+\ttt.pauseStresser()",
                " \tdefer func() {",
                "@@ -211,3 +215,14 @@ func (tt *tester) logPrefix() string {",
                "+func (tt *tester) failed() {",
                "+\tif !tt.exitOnFailure {",
                "+\t\treturn",
                "+\t}",
                "+\tplog.Warningf(\"%s exiting on failure\", tt.logPrefix())",
                "+\ttt.cluster.Terminate()",
                "+\tos.Exit(2)",
                "+}",
                "+",
                " func (tt *tester) cleanup() error {",
                "+\tdefer tt.failed()",
                "+",
                " \troundFailedTotalCounter.Inc()",
                "@@ -219,3 +234,3 @@ func (tt *tester) cleanup() error {",
                "-\ttt.cancelStresser()",
                "+\ttt.closeStresser()",
                " \tif err := tt.cluster.Cleanup(); err != nil {",
                "@@ -231,6 +246,6 @@ func (tt *tester) cleanup() error {",
                "-func (tt *tester) cancelStresser() {",
                "-\tplog.Infof(\"%s canceling the stressers...\", tt.logPrefix())",
                "-\ttt.stresser.Cancel()",
                "-\tplog.Infof(\"%s canceled stressers\", tt.logPrefix())",
                "+func (tt *tester) pauseStresser() {",
                "+\tplog.Infof(\"%s pausing the stressers...\", tt.logPrefix())",
                "+\ttt.stresser.Pause()",
                "+\tplog.Infof(\"%s paused stressers\", tt.logPrefix())",
                " }",
                "@@ -244,2 +259,8 @@ func (tt *tester) startStresser() (err error) {",
                "+func (tt *tester) closeStresser() {",
                "+\tplog.Infof(\"%s closing the stressers...\", tt.logPrefix())",
                "+\ttt.stresser.Close()",
                "+\tplog.Infof(\"%s closed stressers\", tt.logPrefix())",
                "+}",
                "+",
                " func (tt *tester) resetStressCheck() error {",
                "diff --git a/tools/functional-tester/etcd-tester/v2_stresser.go b/tools/functional-tester/etcd-tester/v2_stresser.go",
                "index 39fbd722c..620532e0c 100644",
                "--- a/tools/functional-tester/etcd-tester/v2_stresser.go",
                "+++ b/tools/functional-tester/etcd-tester/v2_stresser.go",
                "@@ -95,3 +95,3 @@ func (s *v2Stresser) run(ctx context.Context, kv clientV2.KeysAPI) {",
                "-func (s *v2Stresser) Cancel() {",
                "+func (s *v2Stresser) Pause() {",
                " \ts.cancel()",
                "@@ -100,2 +100,6 @@ func (s *v2Stresser) Cancel() {",
                "+func (s *v2Stresser) Close() {",
                "+\ts.Pause()",
                "+}",
                "+",
                " func (s *v2Stresser) ModifiedKeys() int64 {"
            ],
            "changed_files": [
                "pkg/debugutil/doc.go",
                "pkg/debugutil/pprof.go",
                "tools/functional-tester/etcd-agent/agent.go",
                "tools/functional-tester/etcd-agent/main.go",
                "tools/functional-tester/etcd-runner/command/election_command.go",
                "tools/functional-tester/etcd-runner/command/error.go",
                "tools/functional-tester/etcd-runner/command/global.go",
                "tools/functional-tester/etcd-runner/command/lease_renewer_command.go",
                "tools/functional-tester/etcd-runner/command/lock_racer_command.go",
                "tools/functional-tester/etcd-runner/command/watch_command.go",
                "tools/functional-tester/etcd-runner/help.go",
                "tools/functional-tester/etcd-runner/main.go",
                "tools/functional-tester/etcd-tester/checks.go",
                "tools/functional-tester/etcd-tester/cluster.go",
                "tools/functional-tester/etcd-tester/etcd_runner_stresser.go",
                "tools/functional-tester/etcd-tester/failpoint.go",
                "tools/functional-tester/etcd-tester/key_stresser.go",
                "tools/functional-tester/etcd-tester/lease_stresser.go",
                "tools/functional-tester/etcd-tester/main.go",
                "tools/functional-tester/etcd-tester/member.go",
                "tools/functional-tester/etcd-tester/stresser.go",
                "tools/functional-tester/etcd-tester/tester.go",
                "tools/functional-tester/etcd-tester/v2_stresser.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9f0027dfb26f2a290fdb513b907fc1d17c9a9a7f",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519874410,
            "hunks": 2,
            "message": "*: do not whitelist empty hosts Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/embed/etcd.go b/embed/etcd.go",
                "index 9c9ef7383..a034e04cc 100644",
                "--- a/embed/etcd.go",
                "+++ b/embed/etcd.go",
                "@@ -178,3 +178,5 @@ func StartEtcd(inCfg *Config) (e *Etcd, err error) {",
                " \tfor _, h := range cfg.HostWhitelist {",
                "-\t\tsrvcfg.HostWhitelist[h] = struct{}{}",
                "+\t\tif h != \"\" {",
                "+\t\t\tsrvcfg.HostWhitelist[h] = struct{}{}",
                "+\t\t}",
                " \t}",
                "diff --git a/etcdmain/config.go b/etcdmain/config.go",
                "index 80ca6cb61..a78338b63 100644",
                "--- a/etcdmain/config.go",
                "+++ b/etcdmain/config.go",
                "@@ -279,5 +279,8 @@ func (cfg *config) configFromCmdLine() error {",
                "-\thosts := strings.Split(cfg.cf.hostWhitelist, \",\")",
                "-\tfor i := range hosts {",
                "-\t\thosts[i] = strings.TrimSpace(hosts[i])",
                "+\thosts := []string{}",
                "+\tfor _, h := range strings.Split(cfg.cf.hostWhitelist, \",\") {",
                "+\t\th = strings.TrimSpace(h)",
                "+\t\tif h != \"\" {",
                "+\t\t\thosts = append(hosts, h)",
                "+\t\t}",
                " \t}"
            ],
            "changed_files": [
                "embed/etcd.go",
                "etcdmain/config.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "33d8126c6b3d5c7b15fd12caacad27c5d5062ef1",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519683352,
            "hunks": 5,
            "message": "*: regenerate proto Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdserver/api/v3election/v3electionpb/v3election.pb.go b/etcdserver/api/v3election/v3electionpb/v3election.pb.go",
                "index bddd73137..7822a9e3a 100644",
                "--- a/etcdserver/api/v3election/v3electionpb/v3election.pb.go",
                "+++ b/etcdserver/api/v3election/v3electionpb/v3election.pb.go",
                "@@ -2043,37 +2043,37 @@ func init() { proto.RegisterFile(\"v3election.proto\", fileDescriptorV3Election) }",
                " var fileDescriptorV3Election = []byte{",
                "-\t// 541 bytes of a gzipped FileDescriptorProto",
                "+\t// 535 bytes of a gzipped FileDescriptorProto",
                " \t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0x6e, 0xd3, 0x40,",
                "-\t0x10, 0xc6, 0x59, 0xa7, 0x84, 0x32, 0xa4, 0xad, 0x65, 0x82, 0x08, 0x21, 0x98, 0x68, 0x91, 0x50,",
                "-\t0x95, 0x83, 0x17, 0x35, 0x9c, 0x72, 0x42, 0x20, 0x50, 0xa5, 0x22, 0x01, 0x3e, 0x20, 0x38, 0x6e,",
                "-\t0xdc, 0x91, 0x1b, 0xd9, 0xf1, 0x1a, 0xdb, 0xb5, 0x94, 0x2b, 0xaf, 0xc0, 0x01, 0x1e, 0x89, 0x23,",
                "-\t0x12, 0x2f, 0x80, 0x02, 0x0f, 0x82, 0x76, 0xd7, 0xc6, 0x7f, 0x94, 0x20, 0x44, 0x2e, 0xd6, 0x78,",
                "-\t0xe7, 0xf3, 0xfc, 0xe6, 0x9b, 0x9d, 0x04, 0xcc, 0x7c, 0x8a, 0x21, 0x7a, 0xd9, 0x42, 0x44, 0x4e,",
                "-\t0x9c, 0x88, 0x4c, 0x58, 0xbd, 0xea, 0x24, 0x9e, 0x0f, 0xfb, 0xbe, 0xf0, 0x85, 0x4a, 0x30, 0x19,",
                "-\t0x69, 0xcd, 0xf0, 0x21, 0x66, 0xde, 0x39, 0x93, 0x8f, 0x14, 0x93, 0x1c, 0x93, 0x5a, 0x18, 0xcf,",
                "-\t0x59, 0x12, 0x7b, 0x85, 0x8e, 0x2a, 0xdd, 0x22, 0xca, 0x30, 0x89, 0x78, 0xc8, 0x96, 0xb9, 0xe7,",
                "-\t0xa9, 0x47, 0x3c, 0x67, 0x41, 0x5e, 0x68, 0x46, 0xbe, 0x10, 0x7e, 0x88, 0x8c, 0xc7, 0x0b, 0xc6,",
                "-\t0xa3, 0x48, 0x64, 0x5c, 0xa2, 0x53, 0x9d, 0xa5, 0x6f, 0xe0, 0xe8, 0x19, 0x5f, 0xc6, 0x7c, 0xe1,",
                "-\t0x47, 0x2e, 0x7e, 0xb8, 0xc4, 0x34, 0xb3, 0x2c, 0xd8, 0x8b, 0xf8, 0x12, 0x07, 0x64, 0x4c, 0x8e,",
                "-\t0x7b, 0xae, 0x8a, 0xad, 0x3e, 0x5c, 0x0d, 0x91, 0xa7, 0x38, 0x30, 0xc6, 0xe4, 0xb8, 0xe3, 0xea,",
                "-\t0x17, 0x79, 0x9a, 0xf3, 0xf0, 0x12, 0x07, 0x1d, 0x25, 0xd5, 0x2f, 0x74, 0x05, 0x66, 0x55, 0x32,",
                "-\t0x8d, 0x45, 0x94, 0xa2, 0xf5, 0x18, 0xba, 0x17, 0xc8, 0xcf, 0x31, 0x51, 0x55, 0x6f, 0x9c, 0x8c,",
                "-\t0x9c, 0xba, 0x23, 0xa7, 0xd4, 0x9d, 0x2a, 0x8d, 0x5b, 0x68, 0x2d, 0x06, 0xdd, 0x50, 0x7f, 0x65,",
                "-\t0xa8, 0xaf, 0x6e, 0x3b, 0xf5, 0xd9, 0x39, 0x2f, 0x55, 0xee, 0x0c, 0x57, 0x6e, 0x21, 0xa3, 0xef,",
                "-\t0xe1, 0xfa, 0x9f, 0xc3, 0x8d, 0x3e, 0x4c, 0xe8, 0x04, 0xb8, 0x52, 0xe5, 0x7a, 0xae, 0x0c, 0xe5,",
                "-\t0x49, 0x82, 0xb9, 0x72, 0xd0, 0x71, 0x65, 0x58, 0x79, 0xdd, 0xab, 0x79, 0xa5, 0x0f, 0xe0, 0x40,",
                "-\t0x97, 0xfe, 0xcb, 0x98, 0xe8, 0x05, 0x1c, 0x96, 0xa2, 0x9d, 0x8c, 0x8f, 0xc1, 0x08, 0xf2, 0xc2,",
                "-\t0xb4, 0xe9, 0xe8, 0x1b, 0x75, 0xce, 0x70, 0xf5, 0x56, 0x0e, 0xd8, 0x35, 0x82, 0x9c, 0x3e, 0x81,",
                "-\t0x03, 0x17, 0xd3, 0xda, 0xad, 0x55, 0xb3, 0x22, 0xff, 0x36, 0xab, 0x17, 0x70, 0x58, 0x56, 0xd8,",
                "-\t0xa5, 0x57, 0xfa, 0x0e, 0x8e, 0x5e, 0x27, 0xc2, 0x0b, 0xf9, 0x62, 0xf9, 0xbf, 0xbd, 0x54, 0x8b,",
                "-\t0x64, 0xd4, 0x17, 0xe9, 0x14, 0xcc, 0xaa, 0xf2, 0x2e, 0x3d, 0x9e, 0x7c, 0xde, 0x83, 0xfd, 0xe7,",
                "-\t0x45, 0x03, 0x56, 0x00, 0xfb, 0xe5, 0x7e, 0x5a, 0xf7, 0x9a, 0x9d, 0xb5, 0x7e, 0x0a, 0x43, 0x7b,",
                "-\t0x5b, 0x5a, 0x53, 0xe8, 0xf8, 0xe3, 0xf7, 0x5f, 0x9f, 0x8c, 0x21, 0xbd, 0xc5, 0xf2, 0x29, 0x2b,",
                "-\t0x85, 0xcc, 0x2b, 0x64, 0x33, 0x32, 0x91, 0xb0, 0xd2, 0x43, 0x1b, 0xd6, 0x9a, 0x5a, 0x1b, 0xd6,",
                "-\t0xb6, 0xbe, 0x05, 0x16, 0x17, 0x32, 0x09, 0xf3, 0xa0, 0xab, 0x67, 0x6b, 0xdd, 0xdd, 0x34, 0xf1,",
                "-\t0x12, 0x34, 0xda, 0x9c, 0x2c, 0x30, 0xb6, 0xc2, 0x0c, 0xe8, 0xcd, 0x06, 0x46, 0x5f, 0x94, 0x84,",
                "-\t0xf8, 0x70, 0xed, 0xd5, 0x5c, 0x0d, 0x7c, 0x17, 0xca, 0x7d, 0x45, 0xb9, 0x43, 0xfb, 0x0d, 0x8a,",
                "-\t0xd0, 0x85, 0x67, 0x64, 0xf2, 0x88, 0x48, 0x37, 0x7a, 0x41, 0xdb, 0x9c, 0xc6, 0xe2, 0xb7, 0x39,",
                "-\t0xcd, 0x9d, 0xde, 0xe2, 0x26, 0x51, 0xa2, 0x19, 0x99, 0x3c, 0x35, 0xbf, 0xae, 0x6d, 0xf2, 0x6d,",
                "-\t0x6d, 0x93, 0x1f, 0x6b, 0x9b, 0x7c, 0xf9, 0x69, 0x5f, 0x99, 0x77, 0xd5, 0x1f, 0xe3, 0xf4, 0x77,",
                "-\t0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x60, 0xb0, 0x9f, 0xba, 0x05, 0x00, 0x00,",
                "+\t0x10, 0xc6, 0x59, 0x27, 0x84, 0x32, 0xa4, 0xad, 0x65, 0x82, 0x48, 0x43, 0x30, 0xd1, 0x22, 0xa1,",
                "+\t0x2a, 0x07, 0x2f, 0x6a, 0x38, 0xe5, 0x84, 0x40, 0xa0, 0x4a, 0x45, 0x02, 0x7c, 0x40, 0x70, 0xdc,",
                "+\t0xb8, 0x23, 0x37, 0x8a, 0xe3, 0x35, 0xb6, 0x6b, 0x29, 0x57, 0x5e, 0x81, 0x03, 0x3c, 0x12, 0x47,",
                "+\t0x24, 0x5e, 0x00, 0x05, 0x1e, 0x04, 0xed, 0xae, 0x8d, 0xff, 0x28, 0x41, 0xa8, 0xb9, 0x58, 0xe3,",
                "+\t0x9d, 0xcf, 0xf3, 0x9b, 0x6f, 0x76, 0x12, 0x30, 0xb3, 0x09, 0x06, 0xe8, 0xa5, 0x73, 0x11, 0x3a,",
                "+\t0x51, 0x2c, 0x52, 0x61, 0x75, 0xcb, 0x93, 0x68, 0x36, 0xe8, 0xf9, 0xc2, 0x17, 0x2a, 0xc1, 0x64,",
                "+\t0xa4, 0x35, 0x83, 0x47, 0x98, 0x7a, 0xe7, 0x4c, 0x3e, 0x12, 0x8c, 0x33, 0x8c, 0x2b, 0x61, 0x34,",
                "+\t0x63, 0x71, 0xe4, 0xe5, 0xba, 0x23, 0xa5, 0x5b, 0x66, 0x9e, 0xa7, 0x1e, 0xd1, 0x8c, 0x2d, 0xb2,",
                "+\t0x3c, 0x35, 0xf4, 0x85, 0xf0, 0x03, 0x64, 0x3c, 0x9a, 0x33, 0x1e, 0x86, 0x22, 0xe5, 0x92, 0x98,",
                "+\t0xe8, 0x2c, 0x7d, 0x0b, 0x87, 0xcf, 0xf9, 0x32, 0xe2, 0x73, 0x3f, 0x74, 0xf1, 0xe3, 0x25, 0x26,",
                "+\t0xa9, 0x65, 0x41, 0x3b, 0xe4, 0x4b, 0xec, 0x93, 0x11, 0x39, 0xee, 0xba, 0x2a, 0xb6, 0x7a, 0x70,",
                "+\t0x3d, 0x40, 0x9e, 0x60, 0xdf, 0x18, 0x91, 0xe3, 0x96, 0xab, 0x5f, 0xe4, 0x69, 0xc6, 0x83, 0x4b,",
                "+\t0xec, 0xb7, 0x94, 0x54, 0xbf, 0xd0, 0x15, 0x98, 0x65, 0xc9, 0x24, 0x12, 0x61, 0x82, 0xd6, 0x13,",
                "+\t0xe8, 0x5c, 0x20, 0x3f, 0xc7, 0x58, 0x55, 0xbd, 0x75, 0x32, 0x74, 0xaa, 0x46, 0x9c, 0x42, 0x77,",
                "+\t0xaa, 0x34, 0x6e, 0xae, 0xb5, 0x18, 0x74, 0x02, 0xfd, 0x95, 0xa1, 0xbe, 0xba, 0xeb, 0x54, 0x47,",
                "+\t0xe6, 0xbc, 0x52, 0xb9, 0x33, 0x5c, 0xb9, 0xb9, 0x8c, 0x7e, 0x80, 0x9b, 0x7f, 0x0f, 0x37, 0xfa,",
                "+\t0x30, 0xa1, 0xb5, 0xc0, 0x95, 0x2a, 0xd7, 0x75, 0x65, 0x28, 0x4f, 0x62, 0xcc, 0x94, 0x83, 0x96,",
                "+\t0x2b, 0xc3, 0xd2, 0x6b, 0xbb, 0xe2, 0x95, 0x3e, 0x84, 0x7d, 0x5d, 0xfa, 0x1f, 0x63, 0xa2, 0x17,",
                "+\t0x70, 0x50, 0x88, 0x76, 0x32, 0x3e, 0x02, 0x63, 0x91, 0xe5, 0xa6, 0x4d, 0x47, 0xdf, 0xa8, 0x73,",
                "+\t0x86, 0xab, 0x77, 0x72, 0xc0, 0xae, 0xb1, 0xc8, 0xe8, 0x53, 0xd8, 0x77, 0x31, 0xa9, 0xdc, 0x5a,",
                "+\t0x39, 0x2b, 0xf2, 0x7f, 0xb3, 0x7a, 0x09, 0x07, 0x45, 0x85, 0x5d, 0x7a, 0xa5, 0xef, 0xe1, 0xf0,",
                "+\t0x4d, 0x2c, 0xbc, 0x80, 0xcf, 0x97, 0x57, 0xed, 0xa5, 0x5c, 0x24, 0xa3, 0xba, 0x48, 0xa7, 0x60,",
                "+\t0x96, 0x95, 0x77, 0xe9, 0xf1, 0xe4, 0x4b, 0x1b, 0xf6, 0x5e, 0xe4, 0x0d, 0x58, 0x0b, 0xd8, 0x2b,",
                "+\t0xf6, 0xd3, 0xba, 0x5f, 0xef, 0xac, 0xf1, 0x53, 0x18, 0xd8, 0xdb, 0xd2, 0x9a, 0x42, 0x47, 0x9f,",
                "+\t0x7e, 0xfc, 0xfe, 0x6c, 0x0c, 0xe8, 0x1d, 0x96, 0x4d, 0x58, 0x21, 0x64, 0x5e, 0x2e, 0x9b, 0x92,",
                "+\t0xb1, 0x84, 0x15, 0x1e, 0x9a, 0xb0, 0xc6, 0xd4, 0x9a, 0xb0, 0xa6, 0xf5, 0x2d, 0xb0, 0x28, 0x97,",
                "+\t0x49, 0x98, 0x07, 0x1d, 0x3d, 0x5b, 0xeb, 0xde, 0xa6, 0x89, 0x17, 0xa0, 0xe1, 0xe6, 0x64, 0x8e,",
                "+\t0xb1, 0x15, 0xa6, 0x4f, 0x6f, 0xd7, 0x30, 0xfa, 0xa2, 0x24, 0xc4, 0x87, 0x1b, 0xaf, 0x67, 0x6a,",
                "+\t0xe0, 0xbb, 0x50, 0x1e, 0x28, 0xca, 0x11, 0xed, 0xd5, 0x28, 0x42, 0x17, 0x9e, 0x92, 0xf1, 0x63,",
                "+\t0x22, 0xdd, 0xe8, 0x05, 0x6d, 0x72, 0x6a, 0x8b, 0xdf, 0xe4, 0xd4, 0x77, 0x7a, 0x8b, 0x9b, 0x58,",
                "+\t0x89, 0xa6, 0x64, 0xfc, 0xcc, 0xfc, 0xb6, 0xb6, 0xc9, 0xf7, 0xb5, 0x4d, 0x7e, 0xae, 0x6d, 0xf2,",
                "+\t0xf5, 0x97, 0x7d, 0x6d, 0xd6, 0x51, 0x7f, 0x8c, 0x93, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2f,",
                "+\t0x1d, 0xfa, 0x11, 0xb1, 0x05, 0x00, 0x00,",
                " }",
                "diff --git a/etcdserver/etcdserverpb/rpc.pb.go b/etcdserver/etcdserverpb/rpc.pb.go",
                "index f25e9a561..e0f947970 100644",
                "--- a/etcdserver/etcdserverpb/rpc.pb.go",
                "+++ b/etcdserver/etcdserverpb/rpc.pb.go",
                "@@ -16,3 +16,3 @@ import (",
                "-\tauthpb \"github.com/coreos/etcd/internal/auth/authpb\"",
                "+\tauthpb \"github.com/coreos/etcd/auth/authpb\"",
                "@@ -18604,3 +18604,3 @@ func init() { proto.RegisterFile(\"rpc.proto\", fileDescriptorRpc) }",
                " var fileDescriptorRpc = []byte{",
                "-\t// 3712 bytes of a gzipped FileDescriptorProto",
                "+\t// 3705 bytes of a gzipped FileDescriptorProto",
                " \t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5b, 0xdd, 0x6f, 0x1b, 0xc7,",
                "@@ -18614,225 +18614,225 @@ var fileDescriptorRpc = []byte{",
                " \t0x36, 0xaa, 0x10, 0xaf, 0xdb, 0x73, 0x89, 0x33, 0x26, 0xce, 0xf0, 0xb8, 0x39, 0x7f, 0x6a, 0x9f,",
                "-\t0xda, 0xac, 0xa3, 0x45, 0xbf, 0x38, 0x4f, 0x13, 0x53, 0x9e, 0x96, 0x69, 0x79, 0xc4, 0xb1, 0x8c,",
                "-\t0x7e, 0x6b, 0x30, 0xee, 0x76, 0xd9, 0x9f, 0xe1, 0x71, 0xeb, 0x7c, 0x2c, 0x78, 0x1e, 0x86, 0x79,",
                "-\t0x8c, 0x91, 0x77, 0xc6, 0xfe, 0x0c, 0x8f, 0xd9, 0x3f, 0x82, 0xeb, 0xce, 0xa9, 0x6d, 0x9f, 0xf6,",
                "-\t0x49, 0xcb, 0x18, 0x9a, 0x2d, 0xc3, 0xb2, 0x6c, 0xcf, 0xf0, 0x4c, 0xdb, 0x72, 0x79, 0x2f, 0xfe,",
                "-\t0x5b, 0x0d, 0x6a, 0x3a, 0x71, 0x87, 0xb6, 0xe5, 0x92, 0x4d, 0x62, 0xf4, 0x88, 0x83, 0xee, 0x02,",
                "-\t0x74, 0xfb, 0x23, 0xd7, 0x23, 0xce, 0x91, 0xd9, 0x6b, 0x68, 0x4b, 0xda, 0xf2, 0xb4, 0x5e, 0x12,",
                "-\t0x94, 0xad, 0x1e, 0xba, 0x0d, 0xa5, 0x01, 0x19, 0x1c, 0xf3, 0xde, 0x0c, 0xeb, 0x2d, 0x72, 0xc2,",
                "-\t0x56, 0x0f, 0x35, 0xa1, 0xe8, 0x90, 0xb1, 0xe9, 0x9a, 0xb6, 0xd5, 0xc8, 0x2e, 0x69, 0xcb, 0x59,",
                "-\t0xdd, 0x6f, 0xd3, 0x81, 0x8e, 0x71, 0xe2, 0x1d, 0x79, 0xc4, 0x19, 0x34, 0xa6, 0xf9, 0x40, 0x4a,",
                "-\t0xe8, 0x10, 0x67, 0x80, 0xbf, 0xcc, 0x41, 0x45, 0x37, 0xac, 0x53, 0xa2, 0x93, 0x4f, 0x47, 0xc4,",
                "-\t0xf5, 0x50, 0x1d, 0xb2, 0xe7, 0xe4, 0x92, 0xc1, 0x57, 0x74, 0xfa, 0xc9, 0xc7, 0x5b, 0xa7, 0xe4,",
                "-\t0x88, 0x58, 0x1c, 0xb8, 0x42, 0xc7, 0x5b, 0xa7, 0xa4, 0x6d, 0xf5, 0xd0, 0x3c, 0xe4, 0xfa, 0xe6,",
                "-\t0xc0, 0xf4, 0x04, 0x2a, 0x6f, 0x84, 0xd4, 0x99, 0x8e, 0xa8, 0xb3, 0x0e, 0xe0, 0xda, 0x8e, 0x77,",
                "-\t0x64, 0x3b, 0x3d, 0xe2, 0x34, 0x72, 0x4b, 0xda, 0x72, 0x6d, 0xf5, 0xe1, 0x8a, 0xba, 0x34, 0x2b,",
                "-\t0xaa, 0x42, 0x2b, 0x07, 0xb6, 0xe3, 0xed, 0x51, 0x5e, 0xbd, 0xe4, 0xca, 0x4f, 0xf4, 0x3b, 0x28,",
                "-\t0x33, 0x21, 0x9e, 0xe1, 0x9c, 0x12, 0xaf, 0x91, 0x67, 0x52, 0x1e, 0x5d, 0x23, 0xa5, 0xc3, 0x98,",
                "-\t0x75, 0x06, 0xcf, 0xbf, 0x11, 0x86, 0x8a, 0x4b, 0x1c, 0xd3, 0xe8, 0x9b, 0x9f, 0x19, 0xc7, 0x7d,",
                "-\t0xd2, 0x28, 0x2c, 0x69, 0xcb, 0x45, 0x3d, 0x44, 0xa3, 0xf3, 0x3f, 0x27, 0x97, 0xee, 0x91, 0x6d,",
                "-\t0xf5, 0x2f, 0x1b, 0x45, 0xc6, 0x50, 0xa4, 0x84, 0x3d, 0xab, 0x7f, 0xc9, 0x16, 0xcd, 0x1e, 0x59,",
                "-\t0x1e, 0xef, 0x2d, 0xb1, 0xde, 0x12, 0xa3, 0xb0, 0xee, 0x65, 0xa8, 0x0f, 0x4c, 0xeb, 0x68, 0x60,",
                "-\t0xf7, 0x8e, 0x7c, 0x83, 0x00, 0x33, 0x48, 0x6d, 0x60, 0x5a, 0x2f, 0xed, 0x9e, 0x2e, 0xcd, 0x42,",
                "-\t0x39, 0x8d, 0x8b, 0x30, 0x67, 0x59, 0x70, 0x1a, 0x17, 0x2a, 0xe7, 0x0a, 0xcc, 0x51, 0x99, 0x5d,",
                "-\t0x87, 0x18, 0x1e, 0x09, 0x98, 0x2b, 0x8c, 0x79, 0x76, 0x60, 0x5a, 0xeb, 0xac, 0x27, 0xc4, 0x6f,",
                "-\t0x5c, 0xc4, 0xf8, 0xab, 0x82, 0xdf, 0xb8, 0x08, 0xf3, 0xe3, 0x15, 0x28, 0xf9, 0x36, 0x47, 0x45,",
                "-\t0x98, 0xde, 0xdd, 0xdb, 0x6d, 0xd7, 0xa7, 0x10, 0x40, 0x7e, 0xed, 0x60, 0xbd, 0xbd, 0xbb, 0x51,",
                "-\t0xd7, 0x50, 0x19, 0x0a, 0x1b, 0x6d, 0xde, 0xc8, 0xe0, 0xe7, 0x00, 0x81, 0x75, 0x51, 0x01, 0xb2,",
                "-\t0xdb, 0xed, 0x8f, 0xeb, 0x53, 0x94, 0xe7, 0x55, 0x5b, 0x3f, 0xd8, 0xda, 0xdb, 0xad, 0x6b, 0x74,",
                "-\t0xf0, 0xba, 0xde, 0x5e, 0xeb, 0xb4, 0xeb, 0x19, 0xca, 0xf1, 0x72, 0x6f, 0xa3, 0x9e, 0x45, 0x25,",
                "-\t0xc8, 0xbd, 0x5a, 0xdb, 0x39, 0x6c, 0xd7, 0xa7, 0xf1, 0xd7, 0x1a, 0x54, 0xc5, 0x7a, 0xf1, 0x33,",
                "-\t0x81, 0x7e, 0x0d, 0xf9, 0x33, 0x76, 0x2e, 0xd8, 0x56, 0x2c, 0xaf, 0xde, 0x89, 0x2c, 0x6e, 0xe8,",
                "-\t0xec, 0xe8, 0x82, 0x17, 0x61, 0xc8, 0x9e, 0x8f, 0xdd, 0x46, 0x66, 0x29, 0xbb, 0x5c, 0x5e, 0xad,",
                "-\t0xaf, 0xf0, 0x93, 0xbb, 0xb2, 0x4d, 0x2e, 0x5f, 0x19, 0xfd, 0x11, 0xd1, 0x69, 0x27, 0x42, 0x30,",
                "-\t0x3d, 0xb0, 0x1d, 0xc2, 0x76, 0x6c, 0x51, 0x67, 0xdf, 0x74, 0x1b, 0xb3, 0x45, 0x13, 0xbb, 0x95,",
                "-\t0x37, 0xf0, 0x37, 0x1a, 0xc0, 0xfe, 0xc8, 0x4b, 0x3f, 0x1a, 0xf3, 0x90, 0x1b, 0x53, 0xc1, 0xe2,",
                "-\t0x58, 0xf0, 0x06, 0x3b, 0x13, 0xc4, 0x70, 0x89, 0x7f, 0x26, 0x68, 0x03, 0xdd, 0x84, 0xc2, 0xd0,",
                "-\t0x21, 0xe3, 0xa3, 0xf3, 0x31, 0x03, 0x29, 0xea, 0x79, 0xda, 0xdc, 0x1e, 0xa3, 0xfb, 0x50, 0x31,",
                "-\t0x4f, 0x2d, 0xdb, 0x21, 0x47, 0x5c, 0x56, 0x8e, 0xf5, 0x96, 0x39, 0x8d, 0xe9, 0xad, 0xb0, 0x70,",
                "-\t0xc1, 0x79, 0x95, 0x65, 0x87, 0x92, 0xb0, 0x05, 0x65, 0xa6, 0xea, 0x44, 0xe6, 0x7b, 0x37, 0xd0,",
                "-\t0x31, 0xc3, 0x86, 0xc5, 0x4d, 0x28, 0xb4, 0xc6, 0x9f, 0x00, 0xda, 0x20, 0x7d, 0xe2, 0x91, 0x49,",
                "-\t0xbc, 0x87, 0x62, 0x93, 0xac, 0x6a, 0x13, 0xfc, 0x95, 0x06, 0x73, 0x21, 0xf1, 0x13, 0x4d, 0xab,",
                "-\t0x01, 0x85, 0x1e, 0x13, 0xc6, 0x35, 0xc8, 0xea, 0xb2, 0x89, 0x9e, 0x42, 0x51, 0x28, 0xe0, 0x36,",
                "-\t0xb2, 0x29, 0x9b, 0xa6, 0xc0, 0x75, 0x72, 0xf1, 0x37, 0x19, 0x28, 0x89, 0x89, 0xee, 0x0d, 0xd1,",
                "-\t0x1a, 0x54, 0x1d, 0xde, 0x38, 0x62, 0xf3, 0x11, 0x1a, 0x35, 0xd3, 0x9d, 0xd0, 0xe6, 0x94, 0x5e,",
                "-\t0x11, 0x43, 0x18, 0x19, 0xfd, 0x09, 0x94, 0xa5, 0x88, 0xe1, 0xc8, 0x13, 0x26, 0x6f, 0x84, 0x05,",
                "-\t0x04, 0xfb, 0x6f, 0x73, 0x4a, 0x07, 0xc1, 0xbe, 0x3f, 0xf2, 0x50, 0x07, 0xe6, 0xe5, 0x60, 0x3e,",
                "-\t0x1b, 0xa1, 0x46, 0x96, 0x49, 0x59, 0x0a, 0x4b, 0x89, 0x2f, 0xd5, 0xe6, 0x94, 0x8e, 0xc4, 0x78,",
                "-\t0xa5, 0x53, 0x55, 0xc9, 0xbb, 0xe0, 0xce, 0x3b, 0xa6, 0x52, 0xe7, 0xc2, 0x8a, 0xab, 0xd4, 0xb9,",
                "-\t0xb0, 0x9e, 0x97, 0xa0, 0x20, 0x5a, 0xf8, 0xdf, 0x33, 0x00, 0x72, 0x35, 0xf6, 0x86, 0x68, 0x03,",
                "-\t0x6a, 0x8e, 0x68, 0x85, 0xac, 0x75, 0x3b, 0xd1, 0x5a, 0x62, 0x11, 0xa7, 0xf4, 0xaa, 0x1c, 0xc4,",
                "-\t0x95, 0xfb, 0x0d, 0x54, 0x7c, 0x29, 0x81, 0xc1, 0x6e, 0x25, 0x18, 0xcc, 0x97, 0x50, 0x96, 0x03,",
                "-\t0xa8, 0xc9, 0x3e, 0x84, 0x05, 0x7f, 0x7c, 0x82, 0xcd, 0xee, 0x5f, 0x61, 0x33, 0x5f, 0xe0, 0x9c,",
                "-\t0x94, 0xa0, 0x5a, 0x4d, 0x55, 0x2c, 0x30, 0xdb, 0xad, 0x04, 0xb3, 0xc5, 0x15, 0xa3, 0x86, 0x03,",
                "-\t0x1a, 0x2f, 0x79, 0x13, 0xff, 0x7f, 0x16, 0x0a, 0xeb, 0xf6, 0x60, 0x68, 0x38, 0x74, 0x35, 0xf2,",
                "-\t0x0e, 0x71, 0x47, 0x7d, 0x8f, 0x99, 0xab, 0xb6, 0xfa, 0x20, 0x2c, 0x51, 0xb0, 0xc9, 0x7f, 0x75,",
                "-\t0xc6, 0xaa, 0x8b, 0x21, 0x74, 0xb0, 0x08, 0x8f, 0x99, 0xb7, 0x18, 0x2c, 0x82, 0xa3, 0x18, 0x22,",
                "-\t0x0f, 0x72, 0x36, 0x38, 0xc8, 0x4d, 0x28, 0x8c, 0x89, 0x13, 0x84, 0xf4, 0xcd, 0x29, 0x5d, 0x12,",
                "-\t0xd0, 0xbb, 0x30, 0x13, 0x0d, 0x2f, 0x39, 0xc1, 0x53, 0xeb, 0x86, 0xa3, 0xd1, 0x03, 0xa8, 0x84,",
                "-\t0x62, 0x5c, 0x5e, 0xf0, 0x95, 0x07, 0x4a, 0x88, 0xbb, 0x21, 0xfd, 0x2a, 0x8d, 0xc7, 0x95, 0xcd,",
                "-\t0x29, 0xe9, 0x59, 0x6f, 0x48, 0xcf, 0x5a, 0x14, 0xa3, 0x84, 0x6f, 0x0d, 0x39, 0x99, 0xdf, 0x86,",
                "-\t0x9d, 0x0c, 0xfe, 0x2d, 0x54, 0x43, 0x06, 0xa2, 0x71, 0xa7, 0xfd, 0xc1, 0xe1, 0xda, 0x0e, 0x0f,",
                "-\t0x52, 0x2f, 0x58, 0x5c, 0xd2, 0xeb, 0x1a, 0x8d, 0x75, 0x3b, 0xed, 0x83, 0x83, 0x7a, 0x06, 0x55,",
                "-\t0xa1, 0xb4, 0xbb, 0xd7, 0x39, 0xe2, 0x5c, 0x59, 0xfc, 0xc2, 0x97, 0x20, 0x82, 0x9c, 0x12, 0xdb,",
                "-\t0xa6, 0x94, 0xd8, 0xa6, 0xc9, 0xd8, 0x96, 0x09, 0x62, 0x1b, 0x0b, 0x73, 0x3b, 0xed, 0xb5, 0x83,",
                "-\t0x76, 0x7d, 0xfa, 0x79, 0x0d, 0x2a, 0xdc, 0xbe, 0x47, 0x23, 0x8b, 0x86, 0xda, 0x7f, 0xd6, 0x00,",
                "-\t0x82, 0xd3, 0x84, 0x5a, 0x50, 0xe8, 0x72, 0x9c, 0x86, 0xc6, 0x9c, 0xd1, 0x42, 0xe2, 0x92, 0xe9,",
                "-\t0x92, 0x0b, 0xfd, 0x12, 0x0a, 0xee, 0xa8, 0xdb, 0x25, 0xae, 0x0c, 0x79, 0x37, 0xa3, 0xfe, 0x50,",
                "-\t0x78, 0x2b, 0x5d, 0xf2, 0xd1, 0x21, 0x27, 0x86, 0xd9, 0x1f, 0xb1, 0x00, 0x78, 0xf5, 0x10, 0xc1,",
                "-\t0x87, 0xff, 0x49, 0x83, 0xb2, 0xb2, 0x79, 0x7f, 0xa0, 0x13, 0xbe, 0x03, 0x25, 0xa6, 0x03, 0xe9,",
                "-\t0x09, 0x37, 0x5c, 0xd4, 0x03, 0x02, 0xfa, 0x63, 0x28, 0xc9, 0x13, 0x20, 0x3d, 0x71, 0x23, 0x59,",
                "-\t0xec, 0xde, 0x50, 0x0f, 0x58, 0xf1, 0x36, 0xcc, 0x32, 0xab, 0x74, 0x69, 0x72, 0x2d, 0xed, 0xa8,",
                "-\t0xa6, 0x9f, 0x5a, 0x24, 0xfd, 0x6c, 0x42, 0x71, 0x78, 0x76, 0xe9, 0x9a, 0x5d, 0xa3, 0x2f, 0xb4,",
                "-\t0xf0, 0xdb, 0xf8, 0xf7, 0x80, 0x54, 0x61, 0x93, 0x4c, 0x17, 0x57, 0xa1, 0xbc, 0x69, 0xb8, 0x67,",
                "-\t0x42, 0x25, 0xfc, 0x14, 0xaa, 0xb4, 0xb9, 0xfd, 0xea, 0x2d, 0x74, 0x64, 0x97, 0x03, 0xc9, 0x3d,",
                "-\t0x91, 0xcd, 0x11, 0x4c, 0x9f, 0x19, 0xee, 0x19, 0x9b, 0x68, 0x55, 0x67, 0xdf, 0xe8, 0x5d, 0xa8,",
                "-\t0x77, 0xf9, 0x24, 0x8f, 0x22, 0x57, 0x86, 0x19, 0x41, 0xf7, 0x33, 0xc1, 0x8f, 0xa0, 0xc2, 0xe7,",
                "-\t0xf0, 0x63, 0x2b, 0x81, 0x67, 0x61, 0xe6, 0xc0, 0x32, 0x86, 0xee, 0x99, 0x2d, 0xa3, 0x1b, 0x9d,",
                "-\t0x74, 0x3d, 0xa0, 0x4d, 0x84, 0xf8, 0x18, 0x66, 0x1c, 0x32, 0x30, 0x4c, 0xcb, 0xb4, 0x4e, 0x8f,",
                "-\t0x8e, 0x2f, 0x3d, 0xe2, 0x8a, 0x0b, 0x53, 0xcd, 0x27, 0x3f, 0xa7, 0x54, 0xaa, 0xda, 0x71, 0xdf,",
                "-\t0x3e, 0x16, 0x6e, 0x8e, 0x7d, 0xe3, 0x6f, 0x35, 0xa8, 0x7c, 0x68, 0x78, 0x5d, 0xb9, 0x74, 0x68,",
                "-\t0x0b, 0x6a, 0xbe, 0x73, 0x63, 0x14, 0xa1, 0x4b, 0x24, 0xc4, 0xb2, 0x31, 0x32, 0x95, 0x96, 0xd1,",
                "-\t0xb1, 0xda, 0x55, 0x09, 0x4c, 0x94, 0x61, 0x75, 0x49, 0xdf, 0x17, 0x95, 0x49, 0x17, 0xc5, 0x18,",
                "-\t0x55, 0x51, 0x2a, 0xe1, 0xf9, 0x4c, 0x90, 0x7e, 0x70, 0x5f, 0xf2, 0x6d, 0x06, 0x50, 0x5c, 0x87,",
                "-\t0xef, 0x9b, 0x91, 0x3d, 0x82, 0x9a, 0xeb, 0x19, 0x4e, 0x6c, 0x6f, 0x54, 0x19, 0xd5, 0x77, 0xd0,",
                "-\t0x8f, 0x61, 0x66, 0xe8, 0xd8, 0xa7, 0x0e, 0x71, 0xdd, 0x23, 0xcb, 0xf6, 0xcc, 0x93, 0x4b, 0x91,",
                "-\t0xd4, 0xd6, 0x24, 0x79, 0x97, 0x51, 0x51, 0x1b, 0x0a, 0x27, 0x66, 0xdf, 0x23, 0x8e, 0xdb, 0xc8,",
                "-\t0x2d, 0x65, 0x97, 0x6b, 0xab, 0x4f, 0xaf, 0xb3, 0xda, 0xca, 0xef, 0x18, 0x7f, 0xe7, 0x72, 0x48,",
                "-\t0x74, 0x39, 0x56, 0x4d, 0x14, 0xf3, 0xa1, 0xe4, 0xf9, 0x16, 0x14, 0x5f, 0x53, 0x11, 0xf4, 0x52,",
                "-\t0x5c, 0xe0, 0xb9, 0x1d, 0x6b, 0x6f, 0xf5, 0xf0, 0x23, 0x80, 0x40, 0x14, 0xf5, 0xc2, 0xbb, 0x7b,",
                "-\t0xfb, 0x87, 0x9d, 0xfa, 0x14, 0xaa, 0x40, 0x71, 0x77, 0x6f, 0xa3, 0xbd, 0xd3, 0xa6, 0x2e, 0x1b,",
                "-\t0xb7, 0xa4, 0xd9, 0x54, 0xf3, 0x86, 0xe4, 0x6a, 0x61, 0xb9, 0x7f, 0x9f, 0x81, 0xaa, 0xd8, 0x20,",
                "-\t0x13, 0xed, 0x52, 0x15, 0x22, 0x13, 0x82, 0xa0, 0x09, 0x2b, 0xdf, 0x38, 0x3d, 0x91, 0x17, 0xcb,",
                "-\t0x26, 0x75, 0x1b, 0x7c, 0x1f, 0x90, 0x9e, 0xb0, 0xb8, 0xdf, 0x4e, 0x3c, 0xd9, 0xb9, 0xc4, 0x93,",
                "-\t0x8d, 0x1e, 0x40, 0xd5, 0xdf, 0x88, 0x86, 0x2b, 0xc2, 0x70, 0x49, 0xaf, 0xc8, 0x3d, 0x46, 0x69,",
                "-\t0xe8, 0x11, 0xe4, 0xc9, 0x98, 0x58, 0x9e, 0xdb, 0x28, 0x33, 0x87, 0x5c, 0x95, 0xa9, 0x71, 0x9b,",
                "-\t0x52, 0x75, 0xd1, 0x89, 0xff, 0x08, 0x66, 0xd9, 0x15, 0xe4, 0x85, 0x63, 0x58, 0xea, 0x5d, 0xa9,",
                "-\t0xd3, 0xd9, 0x11, 0xa6, 0xa3, 0x9f, 0xa8, 0x06, 0x99, 0xad, 0x0d, 0x31, 0xd1, 0xcc, 0xd6, 0x06,",
                "-\t0xfe, 0x42, 0x03, 0xa4, 0x8e, 0x9b, 0xc8, 0x96, 0x11, 0xe1, 0x12, 0x3e, 0x1b, 0xc0, 0xcf, 0x43,",
                "-\t0x8e, 0x38, 0x8e, 0xed, 0x30, 0xab, 0x95, 0x74, 0xde, 0xc0, 0x0f, 0x85, 0x0e, 0x3a, 0x19, 0xdb,",
                "-\t0xe7, 0xfe, 0x99, 0xe1, 0xd2, 0x34, 0x5f, 0xd5, 0x6d, 0x98, 0x0b, 0x71, 0x4d, 0x14, 0x18, 0x1e,",
                "-\t0xc3, 0x02, 0x13, 0xb6, 0x4d, 0xc8, 0x70, 0xad, 0x6f, 0x8e, 0x53, 0x51, 0x87, 0x70, 0x23, 0xca,",
                "-\t0xf8, 0xd3, 0xda, 0x08, 0xff, 0xa9, 0x40, 0xec, 0x98, 0x03, 0xd2, 0xb1, 0x77, 0xd2, 0x75, 0xa3,",
                "-\t0x8e, 0xf3, 0x9c, 0x5c, 0xba, 0x22, 0x82, 0xb2, 0x6f, 0xfc, 0x2f, 0x1a, 0xdc, 0x8c, 0x0d, 0xff,",
                "-\t0x89, 0x57, 0x75, 0x11, 0xe0, 0x94, 0x6e, 0x1f, 0xd2, 0xa3, 0x1d, 0xfc, 0xf2, 0xae, 0x50, 0x7c,",
                "-\t0x3d, 0xa9, 0xef, 0xa9, 0x08, 0x3d, 0xe7, 0xc5, 0x9a, 0xb3, 0x3f, 0xae, 0x0c, 0x3f, 0x77, 0xa1,",
                "-\t0xcc, 0x08, 0x07, 0x9e, 0xe1, 0x8d, 0xdc, 0xd8, 0x62, 0xfc, 0xb5, 0xd8, 0x02, 0x72, 0xd0, 0x44,",
                "-\t0xf3, 0xfa, 0x25, 0xe4, 0x59, 0xde, 0x2a, 0xb3, 0xb6, 0xc8, 0x45, 0x41, 0xd1, 0x43, 0x17, 0x8c,",
                "-\t0xf8, 0x0c, 0xf2, 0x2f, 0x59, 0xb1, 0x4f, 0xd1, 0x6c, 0x5a, 0x2e, 0x85, 0x65, 0x0c, 0x78, 0x09,",
                "-\t0xa2, 0xa4, 0xb3, 0x6f, 0x96, 0xe4, 0x10, 0xe2, 0x1c, 0xea, 0x3b, 0x3c, 0x99, 0x2a, 0xe9, 0x7e,",
                "-\t0x9b, 0x9a, 0xac, 0xdb, 0x37, 0x89, 0xe5, 0xb1, 0xde, 0x69, 0xd6, 0xab, 0x50, 0xf0, 0x0a, 0xd4,",
                "-\t0x39, 0xd2, 0x5a, 0xaf, 0xa7, 0x24, 0x2b, 0xbe, 0x3c, 0x2d, 0x2c, 0x0f, 0xff, 0xab, 0x06, 0xb3,",
                "-\t0xca, 0x80, 0x89, 0x0c, 0xf3, 0x1e, 0xe4, 0x79, 0x49, 0x53, 0xc4, 0xc5, 0xf9, 0xf0, 0x28, 0x0e,",
                "-\t0xa3, 0x0b, 0x1e, 0xb4, 0x02, 0x05, 0xfe, 0x25, 0x33, 0xc6, 0x64, 0x76, 0xc9, 0x84, 0x1f, 0xc1,",
                "-\t0x9c, 0x20, 0x91, 0x81, 0x9d, 0xb4, 0xb7, 0x99, 0x41, 0xf1, 0x5f, 0xc1, 0x7c, 0x98, 0x6d, 0xa2,",
                "-\t0x29, 0x29, 0x4a, 0x66, 0xde, 0x46, 0xc9, 0x35, 0xa9, 0xe4, 0xe1, 0xb0, 0xa7, 0x84, 0xf1, 0xe8,",
                "-\t0xaa, 0xab, 0x2b, 0x92, 0x89, 0xac, 0x88, 0x3f, 0x01, 0x29, 0xe2, 0x67, 0x9d, 0xc0, 0x9c, 0xdc,",
                "-\t0x0e, 0x3b, 0xa6, 0xeb, 0x27, 0x77, 0x9f, 0x01, 0x52, 0x89, 0x3f, 0xb7, 0x42, 0x1b, 0xe4, 0xc4,",
                "-\t0x31, 0x4e, 0x07, 0xc4, 0x8f, 0x4f, 0x34, 0xd5, 0x57, 0x89, 0x13, 0x79, 0xf4, 0x16, 0xcc, 0xbe,",
                "-\t0xb4, 0xc7, 0xd4, 0x35, 0x50, 0x6a, 0x70, 0x64, 0xf8, 0x55, 0xcf, 0x5f, 0x36, 0xbf, 0x4d, 0xc1,",
                "-\t0xd5, 0x01, 0x13, 0x81, 0xff, 0x97, 0x06, 0x95, 0xb5, 0xbe, 0xe1, 0x0c, 0x24, 0xf0, 0x6f, 0x20,",
                "-\t0xcf, 0x2f, 0x30, 0xa2, 0x66, 0xf0, 0x4e, 0x58, 0x8c, 0xca, 0xcb, 0x1b, 0x6b, 0xfc, 0xba, 0x23,",
                "-\t0x46, 0x51, 0xc5, 0xc5, 0xb3, 0xc2, 0x46, 0xe4, 0x99, 0x61, 0x03, 0xbd, 0x0f, 0x39, 0x83, 0x0e,",
                "-\t0x61, 0x2e, 0xb8, 0x16, 0xbd, 0x3a, 0x32, 0x69, 0x2c, 0x6f, 0xe3, 0x5c, 0xf8, 0xd7, 0x50, 0x56,",
                "-\t0x10, 0xe8, 0xe5, 0xf8, 0x45, 0x5b, 0x24, 0x60, 0x6b, 0xeb, 0x9d, 0xad, 0x57, 0xfc, 0xce, 0x5c,",
                "-\t0x03, 0xd8, 0x68, 0xfb, 0xed, 0x0c, 0xfe, 0x48, 0x8c, 0x12, 0xfe, 0x4e, 0xd5, 0x47, 0x4b, 0xd3,",
                "-\t0x27, 0xf3, 0x56, 0xfa, 0x5c, 0x40, 0x55, 0x4c, 0x7f, 0x52, 0xf7, 0xcd, 0xe4, 0xa5, 0xb8, 0x6f,",
                "-\t0x45, 0x79, 0x5d, 0x30, 0xe2, 0x19, 0xa8, 0x0a, 0x87, 0x2e, 0xf6, 0xdf, 0xbf, 0x65, 0xa0, 0x26,",
                "-\t0x29, 0x93, 0xd6, 0x36, 0x65, 0x59, 0x86, 0x47, 0x00, 0xbf, 0x28, 0x73, 0x03, 0xf2, 0xbd, 0xe3,",
                "-\t0x03, 0xf3, 0x33, 0x59, 0x87, 0x16, 0x2d, 0x4a, 0xef, 0x73, 0x1c, 0xfe, 0x18, 0x24, 0x5a, 0xf4,",
                "-\t0x82, 0xee, 0x18, 0x27, 0xde, 0x96, 0xd5, 0x23, 0x17, 0x2c, 0x6f, 0x9c, 0xd6, 0x03, 0x02, 0xbb,",
                "-\t0xaf, 0x8a, 0x47, 0x23, 0x96, 0x2c, 0x2a, 0x8f, 0x48, 0xe8, 0x09, 0xd4, 0xe9, 0xf7, 0xda, 0x70,",
                "-\t0xd8, 0x37, 0x49, 0x8f, 0x0b, 0x28, 0x30, 0x9e, 0x18, 0x9d, 0xa2, 0xb3, 0xd4, 0xcb, 0x6d, 0x14,",
                "-\t0x99, 0xdb, 0x12, 0x2d, 0xb4, 0x04, 0x65, 0xae, 0xdf, 0x96, 0x75, 0xe8, 0x12, 0xf6, 0x92, 0x92,",
                "-\t0xd5, 0x55, 0x12, 0x3d, 0xc7, 0x6b, 0x23, 0xef, 0xac, 0x6d, 0x19, 0xc7, 0x7d, 0xe9, 0x17, 0x69,",
                "-\t0x30, 0xa7, 0xc4, 0x0d, 0xd3, 0x55, 0xa9, 0x6d, 0x98, 0xa3, 0x54, 0x62, 0x79, 0x66, 0x57, 0x71,",
                "-\t0xa2, 0x32, 0x54, 0x6a, 0x91, 0x50, 0x69, 0xb8, 0xee, 0x6b, 0xdb, 0xe9, 0x09, 0x03, 0xfa, 0x6d,",
                "-\t0xbc, 0xc1, 0x85, 0x1f, 0xba, 0xa1, 0x60, 0xf8, 0x7d, 0xa5, 0x2c, 0x07, 0x52, 0x5e, 0x10, 0xef,",
                "-\t0x0a, 0x29, 0xf8, 0x29, 0x2c, 0x48, 0x4e, 0x51, 0x5d, 0xbc, 0x82, 0x79, 0x0f, 0xee, 0x4a, 0xe6,",
                "-\t0xf5, 0x33, 0x7a, 0x7d, 0xdb, 0x17, 0x80, 0x3f, 0x54, 0xcf, 0xe7, 0xd0, 0xf0, 0xf5, 0x64, 0x29,",
                "-\t0xb9, 0xdd, 0x57, 0x15, 0x18, 0xb9, 0x62, 0x67, 0x96, 0x74, 0xf6, 0x4d, 0x69, 0x8e, 0xdd, 0xf7,",
                "-\t0x13, 0x0f, 0xfa, 0x8d, 0xd7, 0xe1, 0x96, 0x94, 0x21, 0x92, 0xe5, 0xb0, 0x90, 0x98, 0x42, 0x49,",
                "-\t0x42, 0x84, 0xc1, 0xe8, 0xd0, 0xab, 0xcd, 0xae, 0x72, 0x86, 0x4d, 0xcb, 0x64, 0x6a, 0x8a, 0xcc,",
                "-\t0x05, 0xbe, 0x23, 0xa8, 0x62, 0x6a, 0x5c, 0x12, 0x64, 0x2a, 0x40, 0x25, 0x8b, 0x85, 0xa0, 0xe4,",
                "-\t0xd8, 0x42, 0xc4, 0x44, 0x7f, 0x02, 0x8b, 0xbe, 0x12, 0xd4, 0x6e, 0xfb, 0xc4, 0x19, 0x98, 0xae,",
                "-\t0xab, 0xd4, 0xa3, 0x92, 0x26, 0xfe, 0x0e, 0x4c, 0x0f, 0x89, 0xf0, 0x5c, 0xe5, 0x55, 0xb4, 0xc2,",
                "-\t0x1f, 0x90, 0x57, 0x94, 0xc1, 0xac, 0x1f, 0xf7, 0xe0, 0x9e, 0x94, 0xce, 0x2d, 0x9a, 0x28, 0x3e,",
                "-\t0xaa, 0x94, 0xbc, 0xf6, 0x73, 0xb3, 0xc6, 0xaf, 0xfd, 0x59, 0xbe, 0xf6, 0x7e, 0x8d, 0xf4, 0xf7,",
                "-\t0xdc, 0x90, 0xf2, 0x6c, 0x4d, 0x14, 0x91, 0xb6, 0xb9, 0x4d, 0xfd, 0x23, 0x39, 0x91, 0xb0, 0x63,",
                "-\t0x98, 0x0f, 0x9f, 0xe4, 0x89, 0x9c, 0xe5, 0x3c, 0xe4, 0x3c, 0xfb, 0x9c, 0x48, 0x57, 0xc9, 0x1b,",
                "-\t0x52, 0x61, 0xff, 0x98, 0x4f, 0xa4, 0xb0, 0x11, 0x08, 0x63, 0x5b, 0x72, 0x52, 0x7d, 0xe9, 0x6a,",
                "-\t0xca, 0x14, 0x8f, 0x37, 0xf0, 0x2e, 0xdc, 0x88, 0xba, 0x89, 0x89, 0x54, 0x7e, 0xc5, 0x37, 0x70,",
                "-\t0x92, 0x27, 0x99, 0x48, 0xee, 0x07, 0x81, 0x33, 0x50, 0x1c, 0xca, 0x44, 0x22, 0x75, 0x68, 0x26,",
                "-\t0xf9, 0x97, 0x1f, 0x63, 0xbf, 0xfa, 0xee, 0x66, 0x22, 0x61, 0x6e, 0x20, 0x6c, 0xf2, 0xe5, 0x0f,",
                "-\t0x7c, 0x44, 0xf6, 0x4a, 0x1f, 0x21, 0x0e, 0x49, 0xe0, 0xc5, 0x7e, 0x82, 0x4d, 0x27, 0x30, 0x02,",
                "-\t0x07, 0x3a, 0x29, 0x06, 0x8d, 0x21, 0x3e, 0x06, 0x6b, 0xc8, 0x8d, 0xad, 0xba, 0xdd, 0x89, 0x16,",
                "-\t0xe3, 0xc3, 0xc0, 0x77, 0xc6, 0x3c, 0xf3, 0x44, 0x82, 0x3f, 0x82, 0xa5, 0x74, 0xa7, 0x3c, 0x89,",
                "-\t0xe4, 0x27, 0x2d, 0x28, 0xf9, 0x69, 0xab, 0xf2, 0xe3, 0x8b, 0x32, 0x14, 0x76, 0xf7, 0x0e, 0xf6,",
                "-\t0xd7, 0xd6, 0xdb, 0xfc, 0xd7, 0x17, 0xeb, 0x7b, 0xba, 0x7e, 0xb8, 0xdf, 0xa9, 0x67, 0x56, 0xbf,",
                "-\t0xcb, 0x42, 0x66, 0xfb, 0x15, 0xfa, 0x18, 0x72, 0xfc, 0x29, 0xf2, 0x8a, 0xf7, 0xe7, 0xe6, 0x55,",
                "-\t0xaf, 0xad, 0xf8, 0xe6, 0x17, 0xff, 0xf3, 0xdd, 0xd7, 0x99, 0x59, 0x5c, 0x69, 0x8d, 0x7f, 0xd5,",
                "-\t0x3a, 0x1f, 0xb7, 0x58, 0x6c, 0x78, 0xa6, 0x3d, 0x41, 0x1f, 0x40, 0x76, 0x7f, 0xe4, 0xa1, 0xd4,",
                "-\t0x77, 0xe9, 0x66, 0xfa, 0x03, 0x2c, 0x5e, 0x60, 0x42, 0x67, 0x30, 0x08, 0xa1, 0xc3, 0x91, 0x47,",
                "-\t0x45, 0x7e, 0x0a, 0x65, 0xf5, 0xf9, 0xf4, 0xda, 0xc7, 0xea, 0xe6, 0xf5, 0x4f, 0xb3, 0xf8, 0x2e,",
                "-\t0x83, 0xba, 0x89, 0x91, 0x80, 0xe2, 0x0f, 0xbc, 0xea, 0x2c, 0x3a, 0x17, 0x16, 0x4a, 0x7d, 0xca,",
                "-\t0x6e, 0xa6, 0xbf, 0xd6, 0xc6, 0x66, 0xe1, 0x5d, 0x58, 0x54, 0xe4, 0x5f, 0x88, 0x87, 0xda, 0xae,",
                "-\t0x87, 0xee, 0x25, 0x3c, 0xd4, 0xa9, 0x4f, 0x52, 0xcd, 0xa5, 0x74, 0x06, 0x01, 0x72, 0x87, 0x81,",
                "-\t0xdc, 0xc0, 0xb3, 0x02, 0xa4, 0xeb, 0xb3, 0x3c, 0xd3, 0x9e, 0xac, 0x76, 0x21, 0xc7, 0x6a, 0xce,",
                "-\t0xe8, 0xcf, 0xe4, 0x47, 0x33, 0xa1, 0x90, 0x9e, 0xb2, 0xd0, 0xa1, 0x6a, 0x35, 0x9e, 0x67, 0x40,",
                "-\t0x35, 0x5c, 0xa2, 0x40, 0xac, 0xe2, 0xfc, 0x4c, 0x7b, 0xb2, 0xac, 0xfd, 0x42, 0x5b, 0x7d, 0x33,",
                "-\t0x0d, 0x39, 0x56, 0x7c, 0x42, 0xe7, 0x00, 0x41, 0x6d, 0x36, 0x3a, 0xbb, 0x58, 0xb5, 0x37, 0x3a,",
                "-\t0xbb, 0x78, 0x59, 0x17, 0x37, 0x19, 0xe8, 0x3c, 0x9e, 0xa1, 0xa0, 0xac, 0xa6, 0xd5, 0x62, 0x65,",
                "-\t0x3a, 0x6a, 0x47, 0x47, 0x94, 0xde, 0xf8, 0x51, 0x42, 0x49, 0xc2, 0x42, 0xf5, 0xd9, 0xe8, 0x6e,",
                "-\t0x48, 0xa8, 0xcd, 0xe2, 0x45, 0x86, 0xd7, 0xc0, 0x73, 0xc2, 0x9a, 0x1c, 0xd2, 0x61, 0x4c, 0x14,",
                "-\t0xf3, 0x73, 0xa8, 0x85, 0x8b, 0xab, 0xe8, 0x41, 0x82, 0xd0, 0x68, 0x8d, 0xb6, 0xf9, 0xf0, 0x6a,",
                "-\t0xa6, 0x24, 0x70, 0x8e, 0x7c, 0x4e, 0xc8, 0xd0, 0xa0, 0x4c, 0xc2, 0xd6, 0xe8, 0x0b, 0x0d, 0x66,",
                "-\t0x22, 0xd5, 0x52, 0x94, 0x24, 0x3d, 0x56, 0x8b, 0x6d, 0x3e, 0xba, 0x86, 0x4b, 0x28, 0x81, 0x99,",
                "-\t0x12, 0x77, 0xf0, 0xcd, 0x90, 0x05, 0x3c, 0x73, 0x40, 0x3c, 0x5b, 0x28, 0xe2, 0x5b, 0x9e, 0x57,",
                "-\t0x35, 0x13, 0x2d, 0x1f, 0xaa, 0x92, 0x26, 0x5a, 0x3e, 0x5c, 0x12, 0x4d, 0xb1, 0x3c, 0x2f, 0x63,",
                "-\t0xd2, 0x9d, 0xcc, 0x7e, 0xdf, 0xc0, 0x7f, 0xd5, 0x88, 0x6c, 0x28, 0xf9, 0xa5, 0x43, 0xb4, 0x98,",
                "-\t0x54, 0xc6, 0x09, 0x2e, 0x00, 0xcd, 0x7b, 0xa9, 0xfd, 0x02, 0xf9, 0x3e, 0x43, 0xbe, 0x8d, 0x6f,",
                "-\t0x50, 0x64, 0xf1, 0xc3, 0xc9, 0x16, 0xaf, 0x15, 0xb4, 0x8c, 0x5e, 0x8f, 0x4e, 0xf8, 0x2f, 0xa1,",
                "-\t0xa2, 0xd6, 0xf6, 0xd0, 0xfd, 0xc4, 0xd2, 0x91, 0x5a, 0x1e, 0x6c, 0xe2, 0xab, 0x58, 0x04, 0xf2,",
                "-\t0x43, 0x86, 0xbc, 0x88, 0x6f, 0x25, 0x20, 0x3b, 0x8c, 0x35, 0x04, 0xce, 0xeb, 0x72, 0xc9, 0xe0,",
                "-\t0xa1, 0xb2, 0x5f, 0x32, 0x78, 0xb8, 0xac, 0x77, 0x25, 0xf8, 0x88, 0xb1, 0x52, 0x70, 0x17, 0x20,",
                "-\t0xa8, 0xc0, 0xa1, 0x44, 0x5b, 0x2a, 0x37, 0xa0, 0xe8, 0x89, 0x8e, 0x17, 0xef, 0xc2, 0xfb, 0x2b,",
                "-\t0x02, 0xdb, 0x37, 0x5d, 0x7a, 0xb2, 0x57, 0xff, 0x2e, 0x0f, 0xe5, 0x97, 0x86, 0x69, 0x79, 0xc4,",
                "-\t0x32, 0xac, 0x2e, 0x41, 0xc7, 0x90, 0x63, 0xd1, 0x2d, 0xea, 0xbc, 0xd4, 0xa2, 0x54, 0xd4, 0x79,",
                "-\t0x85, 0x2a, 0x36, 0x78, 0x89, 0xa1, 0x36, 0xf1, 0x02, 0x45, 0x1d, 0x04, 0xa2, 0x5b, 0xac, 0xd0,",
                "-\t0x42, 0x27, 0x7a, 0x02, 0x79, 0x51, 0xc3, 0x8f, 0x08, 0x0a, 0x15, 0x60, 0x9a, 0x77, 0x92, 0x3b,",
                "-\t0x93, 0xb6, 0x92, 0x0a, 0xe3, 0x32, 0x3e, 0x8a, 0x33, 0x06, 0x08, 0x2a, 0x88, 0x51, 0x83, 0xc6,",
                "-\t0x0a, 0x8e, 0xcd, 0xa5, 0x74, 0x06, 0x81, 0xf9, 0x88, 0x61, 0xde, 0xc3, 0xcd, 0x28, 0x66, 0xcf,",
                "-\t0xe7, 0xa5, 0xb8, 0x7f, 0x0e, 0xd3, 0x9b, 0x86, 0x7b, 0x86, 0x22, 0xf1, 0x4a, 0xf9, 0xb1, 0x41,",
                "-\t0xb3, 0x99, 0xd4, 0x25, 0x50, 0xee, 0x31, 0x94, 0x5b, 0x78, 0x3e, 0x8a, 0x72, 0x66, 0xb8, 0x34,",
                "-\t0x10, 0xa0, 0x1e, 0xe4, 0xf9, 0x6f, 0x0f, 0xa2, 0xf6, 0x0b, 0xfd, 0x7e, 0x21, 0x6a, 0xbf, 0xf0,",
                "-\t0xcf, 0x15, 0xae, 0x47, 0x19, 0x42, 0x51, 0x3e, 0xf6, 0xa3, 0xbb, 0x91, 0xa5, 0x08, 0xff, 0x30,",
                "-\t0xa0, 0xb9, 0x98, 0xd6, 0x2d, 0xb0, 0x1e, 0x30, 0xac, 0xbb, 0xb8, 0x11, 0x5b, 0x2b, 0xc1, 0xf9,",
                "-\t0x4c, 0x7b, 0xf2, 0x0b, 0x0d, 0x7d, 0x0e, 0x10, 0x14, 0x5d, 0x63, 0x07, 0x20, 0x5a, 0xbf, 0x8d,",
                "-\t0x1d, 0x80, 0x58, 0xbd, 0x16, 0xaf, 0x30, 0xdc, 0x65, 0xfc, 0x20, 0x8a, 0xeb, 0x39, 0x86, 0xe5,",
                "-\t0x9e, 0x10, 0xe7, 0x7d, 0x5e, 0x58, 0x73, 0xcf, 0xcc, 0x21, 0x3d, 0x0c, 0xff, 0x31, 0x03, 0xd3,",
                "-\t0x34, 0x6b, 0xa4, 0xc1, 0x35, 0xb8, 0x6c, 0x47, 0x35, 0x89, 0x95, 0xb8, 0xa2, 0x9a, 0xc4, 0xef,",
                "-\t0xe9, 0xe1, 0xe0, 0xca, 0x7e, 0x8e, 0x4e, 0x18, 0x03, 0x35, 0xb4, 0x0d, 0x65, 0xe5, 0x36, 0x8e,",
                "-\t0x12, 0x84, 0x85, 0x6b, 0x67, 0x51, 0x17, 0x9f, 0x70, 0x95, 0xc7, 0xb7, 0x19, 0xde, 0x02, 0xae,",
                "-\t0xfb, 0x78, 0x3d, 0xce, 0x41, 0x01, 0x5f, 0x43, 0x45, 0xbd, 0xb1, 0xa3, 0x04, 0x79, 0x91, 0xba,",
                "-\t0x5c, 0xd4, 0xcb, 0x25, 0x5d, 0xf8, 0xc3, 0x07, 0xdf, 0xff, 0xc9, 0xbd, 0x64, 0xa3, 0xc0, 0x7d,",
                "-\t0x28, 0x88, 0x2b, 0x7c, 0xd2, 0x2c, 0xc3, 0x45, 0xbc, 0xa4, 0x59, 0x46, 0xee, 0xff, 0xe1, 0x84,",
                "-\t0x8c, 0x21, 0xd2, 0x5b, 0x8a, 0x8c, 0x24, 0x02, 0xed, 0x05, 0xf1, 0xd2, 0xd0, 0x82, 0x8a, 0x54,",
                "-\t0x1a, 0x9a, 0x72, 0x43, 0x4c, 0x43, 0x3b, 0x25, 0x9e, 0x38, 0x2e, 0xf2, 0xe6, 0x85, 0x52, 0x84,",
                "-\t0xa9, 0xde, 0x1b, 0x5f, 0xc5, 0x92, 0x94, 0x2f, 0x07, 0x80, 0xc2, 0x75, 0xa3, 0x0b, 0x80, 0xa0,",
                "-\t0xc0, 0x10, 0x4d, 0x8e, 0x12, 0xab, 0x94, 0xd1, 0xe4, 0x28, 0xb9, 0x46, 0x11, 0x76, 0x0d, 0x01,",
                "-\t0x2e, 0x4f, 0xd7, 0x29, 0xf2, 0x57, 0x1a, 0xa0, 0x78, 0x2d, 0x02, 0x3d, 0x4d, 0x96, 0x9e, 0x58,",
                "-\t0xfb, 0x6c, 0xbe, 0xf7, 0x76, 0xcc, 0x49, 0xde, 0x3e, 0x50, 0xa9, 0xcb, 0xb8, 0x87, 0xaf, 0xa9,",
                "-\t0x52, 0x7f, 0xa3, 0x41, 0x35, 0x54, 0xc8, 0x40, 0xef, 0xa4, 0xac, 0x69, 0xa4, 0x74, 0xda, 0x7c,",
                "-\t0x7c, 0x2d, 0x5f, 0x52, 0xe2, 0xa4, 0xec, 0x00, 0x99, 0x26, 0x7f, 0xa9, 0x41, 0x2d, 0x5c, 0xf8,",
                "-\t0x40, 0x29, 0xb2, 0x63, 0xa5, 0xd7, 0xe6, 0xf2, 0xf5, 0x8c, 0x57, 0x2f, 0x4f, 0x90, 0x39, 0xf7,",
                "-\t0xa1, 0x20, 0x4a, 0x25, 0x49, 0x1b, 0x3f, 0x5c, 0xb4, 0x4d, 0xda, 0xf8, 0x91, 0x3a, 0x4b, 0xc2,",
                "-\t0xc6, 0x77, 0xec, 0x3e, 0x51, 0x8e, 0x99, 0xa8, 0xa5, 0xa4, 0xa1, 0x5d, 0x7d, 0xcc, 0x22, 0x85,",
                "-\t0x98, 0x34, 0xb4, 0xe0, 0x98, 0xc9, 0x22, 0x0a, 0x4a, 0x11, 0x76, 0xcd, 0x31, 0x8b, 0xd6, 0x60,",
                "-\t0x12, 0x8e, 0x19, 0x03, 0x54, 0x8e, 0x59, 0x50, 0xee, 0x48, 0x3a, 0x66, 0xb1, 0x1a, 0x74, 0xd2,",
                "-\t0x31, 0x8b, 0x57, 0x4c, 0x12, 0xd6, 0x91, 0xe1, 0x86, 0x8e, 0xd9, 0x5c, 0x42, 0x65, 0x04, 0xbd,",
                "-\t0x97, 0x62, 0xc4, 0xc4, 0xd2, 0x76, 0xf3, 0xfd, 0xb7, 0xe4, 0x4e, 0xdd, 0xe3, 0xdc, 0xfc, 0x72,",
                "-\t0x8f, 0xff, 0x83, 0x06, 0xf3, 0x49, 0x55, 0x15, 0x94, 0x82, 0x93, 0x52, 0x12, 0x6f, 0xae, 0xbc,",
                "-\t0x2d, 0xfb, 0xd5, 0xd6, 0xf2, 0x77, 0xfd, 0xf3, 0xfa, 0x7f, 0xbe, 0x59, 0xd4, 0xfe, 0xfb, 0xcd,",
                "-\t0xa2, 0xf6, 0xbf, 0x6f, 0x16, 0xb5, 0x7f, 0xfc, 0xbf, 0xc5, 0xa9, 0xe3, 0x3c, 0xfb, 0x8f, 0x5c,",
                "-\t0xbf, 0xfa, 0x43, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x35, 0xa7, 0xba, 0x61, 0x36, 0x00, 0x00,",
                "+\t0xda, 0xac, 0xa3, 0x45, 0xbf, 0x38, 0x4f, 0xf3, 0x16, 0xe5, 0x69, 0x0d, 0xc6, 0xdd, 0x2e, 0xfb,",
                "+\t0x33, 0x3c, 0x6e, 0x9d, 0x8f, 0x45, 0xd7, 0x6d, 0xd6, 0x65, 0x8c, 0xbc, 0x33, 0xf6, 0x67, 0x78,",
                "+\t0xcc, 0xfe, 0x11, 0x9d, 0x77, 0x4e, 0x6d, 0xfb, 0xb4, 0x4f, 0x5a, 0xc6, 0xd0, 0x6c, 0x19, 0x96,",
                "+\t0x65, 0x7b, 0x86, 0x67, 0xda, 0x96, 0xcb, 0x7b, 0xf1, 0xdf, 0x6a, 0x50, 0xd3, 0x89, 0x3b, 0xb4,",
                "+\t0x2d, 0x97, 0x6c, 0x12, 0xa3, 0x47, 0x1c, 0x74, 0x17, 0xa0, 0xdb, 0x1f, 0xb9, 0x1e, 0x71, 0x8e,",
                "+\t0xcc, 0x5e, 0x43, 0x5b, 0xd2, 0x96, 0xa7, 0xf5, 0x92, 0xa0, 0x6c, 0xf5, 0xd0, 0x6d, 0x28, 0x0d,",
                "+\t0xc8, 0xe0, 0x98, 0xf7, 0x66, 0x58, 0x6f, 0x91, 0x13, 0xb6, 0x7a, 0xa8, 0x09, 0x45, 0x87, 0x8c,",
                "+\t0x4d, 0xd7, 0xb4, 0xad, 0x46, 0x76, 0x49, 0x5b, 0xce, 0xea, 0x7e, 0x9b, 0x0e, 0x74, 0x8c, 0x13,",
                "+\t0xef, 0xc8, 0x23, 0xce, 0xa0, 0x31, 0xcd, 0x07, 0x52, 0x42, 0x87, 0x38, 0x03, 0xfc, 0x65, 0x0e,",
                "+\t0x2a, 0xba, 0x61, 0x9d, 0x12, 0x9d, 0x7c, 0x3a, 0x22, 0xae, 0x87, 0xea, 0x90, 0x3d, 0x27, 0x97,",
                "+\t0x0c, 0xbe, 0xa2, 0xd3, 0x4f, 0x3e, 0xde, 0x3a, 0x25, 0x47, 0xc4, 0xe2, 0xc0, 0x15, 0x3a, 0xde,",
                "+\t0x3a, 0x25, 0x6d, 0xab, 0x87, 0xe6, 0x21, 0xd7, 0x37, 0x07, 0xa6, 0x27, 0x50, 0x79, 0x23, 0xa4,",
                "+\t0xce, 0x74, 0x44, 0x9d, 0x75, 0x00, 0xd7, 0x76, 0xbc, 0x23, 0xdb, 0xe9, 0x11, 0xa7, 0x91, 0x5b,",
                "+\t0xd2, 0x96, 0x6b, 0xab, 0x0f, 0x57, 0xd4, 0x85, 0x58, 0x51, 0x15, 0x5a, 0x39, 0xb0, 0x1d, 0x6f,",
                "+\t0x8f, 0xf2, 0xea, 0x25, 0x57, 0x7e, 0xa2, 0xdf, 0x41, 0x99, 0x09, 0xf1, 0x0c, 0xe7, 0x94, 0x78,",
                "+\t0x8d, 0x3c, 0x93, 0xf2, 0xe8, 0x1a, 0x29, 0x1d, 0xc6, 0xac, 0x33, 0x78, 0xfe, 0x8d, 0x30, 0x54,",
                "+\t0x5c, 0xe2, 0x98, 0x46, 0xdf, 0xfc, 0xcc, 0x38, 0xee, 0x93, 0x46, 0x61, 0x49, 0x5b, 0x2e, 0xea,",
                "+\t0x21, 0x1a, 0x9d, 0xff, 0x39, 0xb9, 0x74, 0x8f, 0x6c, 0xab, 0x7f, 0xd9, 0x28, 0x32, 0x86, 0x22,",
                "+\t0x25, 0xec, 0x59, 0xfd, 0x4b, 0xb6, 0x68, 0xf6, 0xc8, 0xf2, 0x78, 0x6f, 0x89, 0xf5, 0x96, 0x18,",
                "+\t0x85, 0x75, 0x2f, 0x43, 0x7d, 0x60, 0x5a, 0x47, 0x03, 0xbb, 0x77, 0xe4, 0x1b, 0x04, 0x98, 0x41,",
                "+\t0x6a, 0x03, 0xd3, 0x7a, 0x69, 0xf7, 0x74, 0x69, 0x16, 0xca, 0x69, 0x5c, 0x84, 0x39, 0xcb, 0x82,",
                "+\t0xd3, 0xb8, 0x50, 0x39, 0x57, 0x60, 0x8e, 0xca, 0xec, 0x3a, 0xc4, 0xf0, 0x48, 0xc0, 0x5c, 0x61,",
                "+\t0xcc, 0xb3, 0x03, 0xd3, 0x5a, 0x67, 0x3d, 0x21, 0x7e, 0xe3, 0x22, 0xc6, 0x5f, 0x15, 0xfc, 0xc6,",
                "+\t0x45, 0x98, 0x1f, 0xaf, 0x40, 0xc9, 0xb7, 0x39, 0x2a, 0xc2, 0xf4, 0xee, 0xde, 0x6e, 0xbb, 0x3e,",
                "+\t0x85, 0x00, 0xf2, 0x6b, 0x07, 0xeb, 0xed, 0xdd, 0x8d, 0xba, 0x86, 0xca, 0x50, 0xd8, 0x68, 0xf3,",
                "+\t0x46, 0x06, 0x3f, 0x07, 0x08, 0xac, 0x8b, 0x0a, 0x90, 0xdd, 0x6e, 0x7f, 0x5c, 0x9f, 0xa2, 0x3c,",
                "+\t0xaf, 0xda, 0xfa, 0xc1, 0xd6, 0xde, 0x6e, 0x5d, 0xa3, 0x83, 0xd7, 0xf5, 0xf6, 0x5a, 0xa7, 0x5d,",
                "+\t0xcf, 0x50, 0x8e, 0x97, 0x7b, 0x1b, 0xf5, 0x2c, 0x2a, 0x41, 0xee, 0xd5, 0xda, 0xce, 0x61, 0xbb,",
                "+\t0x3e, 0x8d, 0xbf, 0xd6, 0xa0, 0x2a, 0xd6, 0x8b, 0x9f, 0x09, 0xf4, 0x6b, 0xc8, 0x9f, 0xb1, 0x73,",
                "+\t0xc1, 0xb6, 0x62, 0x79, 0xf5, 0x4e, 0x64, 0x71, 0x43, 0x67, 0x47, 0x17, 0xbc, 0x08, 0x43, 0xf6,",
                "+\t0x7c, 0xec, 0x36, 0x32, 0x4b, 0xd9, 0xe5, 0xf2, 0x6a, 0x7d, 0x85, 0x1f, 0xd8, 0x95, 0x6d, 0x72,",
                "+\t0xf9, 0xca, 0xe8, 0x8f, 0x88, 0x4e, 0x3b, 0x11, 0x82, 0xe9, 0x81, 0xed, 0x10, 0xb6, 0x63, 0x8b,",
                "+\t0x3a, 0xfb, 0xa6, 0xdb, 0x98, 0x2d, 0x9a, 0xd8, 0xad, 0xbc, 0x81, 0xbf, 0xd1, 0x00, 0xf6, 0x47,",
                "+\t0x5e, 0xfa, 0xd1, 0x98, 0x87, 0xdc, 0x98, 0x0a, 0x16, 0xc7, 0x82, 0x37, 0xd8, 0x99, 0x20, 0x86,",
                "+\t0x4b, 0xfc, 0x33, 0x41, 0x1b, 0xe8, 0x26, 0x14, 0x86, 0x0e, 0x19, 0x1f, 0x9d, 0x8f, 0x19, 0x48,",
                "+\t0x51, 0xcf, 0xd3, 0xe6, 0xf6, 0x18, 0xdd, 0x87, 0x8a, 0x79, 0x6a, 0xd9, 0x0e, 0x39, 0xe2, 0xb2,",
                "+\t0x72, 0xac, 0xb7, 0xcc, 0x69, 0x4c, 0x6f, 0x85, 0x85, 0x0b, 0xce, 0xab, 0x2c, 0x3b, 0x94, 0x84,",
                "+\t0x2d, 0x28, 0x33, 0x55, 0x27, 0x32, 0xdf, 0xbb, 0x81, 0x8e, 0x19, 0x36, 0x2c, 0x6e, 0x42, 0xa1,",
                "+\t0x35, 0xfe, 0x04, 0xd0, 0x06, 0xe9, 0x13, 0x8f, 0x4c, 0xe2, 0x3d, 0x14, 0x9b, 0x64, 0x55, 0x9b,",
                "+\t0xe0, 0xaf, 0x34, 0x98, 0x0b, 0x89, 0x9f, 0x68, 0x5a, 0x0d, 0x28, 0xf4, 0x98, 0x30, 0xae, 0x41,",
                "+\t0x56, 0x97, 0x4d, 0xf4, 0x14, 0x8a, 0x42, 0x01, 0xb7, 0x91, 0x4d, 0xd9, 0x34, 0x05, 0xae, 0x93,",
                "+\t0x8b, 0xbf, 0xc9, 0x40, 0x49, 0x4c, 0x74, 0x6f, 0x88, 0xd6, 0xa0, 0xea, 0xf0, 0xc6, 0x11, 0x9b,",
                "+\t0x8f, 0xd0, 0xa8, 0x99, 0xee, 0x84, 0x36, 0xa7, 0xf4, 0x8a, 0x18, 0xc2, 0xc8, 0xe8, 0x4f, 0xa0,",
                "+\t0x2c, 0x45, 0x0c, 0x47, 0x9e, 0x30, 0x79, 0x23, 0x2c, 0x20, 0xd8, 0x7f, 0x9b, 0x53, 0x3a, 0x08,",
                "+\t0xf6, 0xfd, 0x91, 0x87, 0x3a, 0x30, 0x2f, 0x07, 0xf3, 0xd9, 0x08, 0x35, 0xb2, 0x4c, 0xca, 0x52,",
                "+\t0x58, 0x4a, 0x7c, 0xa9, 0x36, 0xa7, 0x74, 0x24, 0xc6, 0x2b, 0x9d, 0xaa, 0x4a, 0xde, 0x05, 0x77,",
                "+\t0xde, 0x31, 0x95, 0x3a, 0x17, 0x56, 0x5c, 0xa5, 0xce, 0x85, 0xf5, 0xbc, 0x04, 0x05, 0xd1, 0xc2,",
                "+\t0xff, 0x9e, 0x01, 0x90, 0xab, 0xb1, 0x37, 0x44, 0x1b, 0x50, 0x73, 0x44, 0x2b, 0x64, 0xad, 0xdb,",
                "+\t0x89, 0xd6, 0x12, 0x8b, 0x38, 0xa5, 0x57, 0xe5, 0x20, 0xae, 0xdc, 0x6f, 0xa0, 0xe2, 0x4b, 0x09,",
                "+\t0x0c, 0x76, 0x2b, 0xc1, 0x60, 0xbe, 0x84, 0xb2, 0x1c, 0x40, 0x4d, 0xf6, 0x21, 0x2c, 0xf8, 0xe3,",
                "+\t0x13, 0x6c, 0x76, 0xff, 0x0a, 0x9b, 0xf9, 0x02, 0xe7, 0xa4, 0x04, 0xd5, 0x6a, 0xaa, 0x62, 0x81,",
                "+\t0xd9, 0x6e, 0x25, 0x98, 0x2d, 0xae, 0x18, 0x35, 0x1c, 0xd0, 0x78, 0xc9, 0x9b, 0xf8, 0xff, 0xb3,",
                "+\t0x50, 0x58, 0xb7, 0x07, 0x43, 0xc3, 0xa1, 0xab, 0x91, 0x77, 0x88, 0x3b, 0xea, 0x7b, 0xcc, 0x5c,",
                "+\t0xb5, 0xd5, 0x07, 0x61, 0x89, 0x82, 0x4d, 0xfe, 0xab, 0x33, 0x56, 0x5d, 0x0c, 0xa1, 0x83, 0x45,",
                "+\t0x78, 0xcc, 0xbc, 0xc5, 0x60, 0x11, 0x1c, 0xc5, 0x10, 0x79, 0x90, 0xb3, 0xc1, 0x41, 0x6e, 0x42,",
                "+\t0x61, 0x4c, 0x9c, 0x20, 0xa4, 0x6f, 0x4e, 0xe9, 0x92, 0x80, 0xde, 0x85, 0x99, 0x68, 0x78, 0xc9,",
                "+\t0x09, 0x9e, 0x5a, 0x37, 0x1c, 0x8d, 0x1e, 0x40, 0x25, 0x14, 0xe3, 0xf2, 0x82, 0xaf, 0x3c, 0x50,",
                "+\t0x42, 0xdc, 0x0d, 0xe9, 0x57, 0x69, 0x3c, 0xae, 0x6c, 0x4e, 0x49, 0xcf, 0x7a, 0x43, 0x7a, 0xd6,",
                "+\t0xa2, 0x18, 0x25, 0x7c, 0x6b, 0xc8, 0xc9, 0xfc, 0x36, 0xec, 0x64, 0xf0, 0x6f, 0xa1, 0x1a, 0x32,",
                "+\t0x10, 0x8d, 0x3b, 0xed, 0x0f, 0x0e, 0xd7, 0x76, 0x78, 0x90, 0x7a, 0xc1, 0xe2, 0x92, 0x5e, 0xd7,",
                "+\t0x68, 0xac, 0xdb, 0x69, 0x1f, 0x1c, 0xd4, 0x33, 0xa8, 0x0a, 0xa5, 0xdd, 0xbd, 0xce, 0x11, 0xe7,",
                "+\t0xca, 0xe2, 0x17, 0xbe, 0x04, 0x11, 0xe4, 0x94, 0xd8, 0x36, 0xa5, 0xc4, 0x36, 0x4d, 0xc6, 0xb6,",
                "+\t0x4c, 0x10, 0xdb, 0x58, 0x98, 0xdb, 0x69, 0xaf, 0x1d, 0xb4, 0xeb, 0xd3, 0xcf, 0x6b, 0x50, 0xe1,",
                "+\t0xf6, 0x3d, 0x1a, 0x59, 0x34, 0xd4, 0xfe, 0xb3, 0x06, 0x10, 0x9c, 0x26, 0xd4, 0x82, 0x42, 0x97,",
                "+\t0xe3, 0x34, 0x34, 0xe6, 0x8c, 0x16, 0x12, 0x97, 0x4c, 0x97, 0x5c, 0xe8, 0x97, 0x50, 0x70, 0x47,",
                "+\t0xdd, 0x2e, 0x71, 0x65, 0xc8, 0xbb, 0x19, 0xf5, 0x87, 0xc2, 0x5b, 0xe9, 0x92, 0x8f, 0x0e, 0x39,",
                "+\t0x31, 0xcc, 0xfe, 0x88, 0x05, 0xc0, 0xab, 0x87, 0x08, 0x3e, 0xfc, 0x4f, 0x1a, 0x94, 0x95, 0xcd,",
                "+\t0xfb, 0x03, 0x9d, 0xf0, 0x1d, 0x28, 0x31, 0x1d, 0x48, 0x4f, 0xb8, 0xe1, 0xa2, 0x1e, 0x10, 0xd0,",
                "+\t0x1f, 0x43, 0x49, 0x9e, 0x00, 0xe9, 0x89, 0x1b, 0xc9, 0x62, 0xf7, 0x86, 0x7a, 0xc0, 0x8a, 0xb7,",
                "+\t0x61, 0x96, 0x59, 0xa5, 0x4b, 0x93, 0x6b, 0x69, 0x47, 0x35, 0xfd, 0xd4, 0x22, 0xe9, 0x67, 0x13,",
                "+\t0x8a, 0xc3, 0xb3, 0x4b, 0xd7, 0xec, 0x1a, 0x7d, 0xa1, 0x85, 0xdf, 0xc6, 0xbf, 0x07, 0xa4, 0x0a,",
                "+\t0x9b, 0x64, 0xba, 0xb8, 0x0a, 0xe5, 0x4d, 0xc3, 0x3d, 0x13, 0x2a, 0xe1, 0xa7, 0x50, 0xa5, 0xcd,",
                "+\t0xed, 0x57, 0x6f, 0xa1, 0x23, 0xbb, 0x1c, 0x48, 0xee, 0x89, 0x6c, 0x8e, 0x60, 0xfa, 0xcc, 0x70,",
                "+\t0xcf, 0xd8, 0x44, 0xab, 0x3a, 0xfb, 0x46, 0xef, 0x42, 0xbd, 0xcb, 0x27, 0x79, 0x14, 0xb9, 0x32,",
                "+\t0xcc, 0x08, 0xba, 0x9f, 0x09, 0x7e, 0x04, 0x15, 0x3e, 0x87, 0x1f, 0x5b, 0x09, 0x3c, 0x0b, 0x33,",
                "+\t0x07, 0x96, 0x31, 0x74, 0xcf, 0x6c, 0x19, 0xdd, 0xe8, 0xa4, 0xeb, 0x01, 0x6d, 0x22, 0xc4, 0xc7,",
                "+\t0x30, 0xe3, 0x90, 0x81, 0x61, 0x5a, 0xa6, 0x75, 0x7a, 0x74, 0x7c, 0xe9, 0x11, 0x57, 0x5c, 0x98,",
                "+\t0x6a, 0x3e, 0xf9, 0x39, 0xa5, 0x52, 0xd5, 0x8e, 0xfb, 0xf6, 0xb1, 0x70, 0x73, 0xec, 0x1b, 0x7f,",
                "+\t0xab, 0x41, 0xe5, 0x43, 0xc3, 0xeb, 0xca, 0xa5, 0x43, 0x5b, 0x50, 0xf3, 0x9d, 0x1b, 0xa3, 0x08,",
                "+\t0x5d, 0x22, 0x21, 0x96, 0x8d, 0x91, 0xa9, 0xb4, 0x8c, 0x8e, 0xd5, 0xae, 0x4a, 0x60, 0xa2, 0x0c,",
                "+\t0xab, 0x4b, 0xfa, 0xbe, 0xa8, 0x4c, 0xba, 0x28, 0xc6, 0xa8, 0x8a, 0x52, 0x09, 0xcf, 0x67, 0x82,",
                "+\t0xf4, 0x83, 0xfb, 0x92, 0x6f, 0x33, 0x80, 0xe2, 0x3a, 0x7c, 0xdf, 0x8c, 0xec, 0x11, 0xd4, 0x5c,",
                "+\t0xcf, 0x70, 0x62, 0x7b, 0xa3, 0xca, 0xa8, 0xbe, 0x83, 0x7e, 0x0c, 0x33, 0x43, 0xc7, 0x3e, 0x75,",
                "+\t0x88, 0xeb, 0x1e, 0x59, 0xb6, 0x67, 0x9e, 0x5c, 0x8a, 0xa4, 0xb6, 0x26, 0xc9, 0xbb, 0x8c, 0x8a,",
                "+\t0xda, 0x50, 0x38, 0x31, 0xfb, 0x1e, 0x71, 0xdc, 0x46, 0x6e, 0x29, 0xbb, 0x5c, 0x5b, 0x7d, 0x7a,",
                "+\t0x9d, 0xd5, 0x56, 0x7e, 0xc7, 0xf8, 0x3b, 0x97, 0x43, 0xa2, 0xcb, 0xb1, 0x6a, 0xa2, 0x98, 0x0f,",
                "+\t0x25, 0xcf, 0xb7, 0xa0, 0xf8, 0x9a, 0x8a, 0xa0, 0x97, 0xe2, 0x02, 0xcf, 0xed, 0x58, 0x7b, 0xab,",
                "+\t0x87, 0x1f, 0x01, 0x04, 0xa2, 0xa8, 0x17, 0xde, 0xdd, 0xdb, 0x3f, 0xec, 0xd4, 0xa7, 0x50, 0x05,",
                "+\t0x8a, 0xbb, 0x7b, 0x1b, 0xed, 0x9d, 0x36, 0x75, 0xd9, 0xb8, 0x25, 0xcd, 0xa6, 0x9a, 0x37, 0x24,",
                "+\t0x57, 0x0b, 0xcb, 0xfd, 0xfb, 0x0c, 0x54, 0xc5, 0x06, 0x99, 0x68, 0x97, 0xaa, 0x10, 0x99, 0x10,",
                "+\t0x04, 0x4d, 0x58, 0xf9, 0xc6, 0xe9, 0x89, 0xbc, 0x58, 0x36, 0xa9, 0xdb, 0xe0, 0xfb, 0x80, 0xf4,",
                "+\t0x84, 0xc5, 0xfd, 0x76, 0xe2, 0xc9, 0xce, 0x25, 0x9e, 0x6c, 0xf4, 0x00, 0xaa, 0xfe, 0x46, 0x34,",
                "+\t0x5c, 0x11, 0x86, 0x4b, 0x7a, 0x45, 0xee, 0x31, 0x4a, 0x43, 0x8f, 0x20, 0x4f, 0xc6, 0xc4, 0xf2,",
                "+\t0xdc, 0x46, 0x99, 0x39, 0xe4, 0xaa, 0x4c, 0x8d, 0xdb, 0x94, 0xaa, 0x8b, 0x4e, 0xfc, 0x47, 0x30,",
                "+\t0xcb, 0xae, 0x20, 0x2f, 0x1c, 0xc3, 0x52, 0xef, 0x4a, 0x9d, 0xce, 0x8e, 0x30, 0x1d, 0xfd, 0x44,",
                "+\t0x35, 0xc8, 0x6c, 0x6d, 0x88, 0x89, 0x66, 0xb6, 0x36, 0xf0, 0x17, 0x1a, 0x20, 0x75, 0xdc, 0x44,",
                "+\t0xb6, 0x8c, 0x08, 0x97, 0xf0, 0xd9, 0x00, 0x7e, 0x1e, 0x72, 0xc4, 0x71, 0x6c, 0x87, 0x59, 0xad,",
                "+\t0xa4, 0xf3, 0x06, 0x7e, 0x28, 0x74, 0xd0, 0xc9, 0xd8, 0x3e, 0xf7, 0xcf, 0x0c, 0x97, 0xa6, 0xf9,",
                "+\t0xaa, 0x6e, 0xc3, 0x5c, 0x88, 0x6b, 0xa2, 0xc0, 0xf0, 0x18, 0x16, 0x98, 0xb0, 0x6d, 0x42, 0x86,",
                "+\t0x6b, 0x7d, 0x73, 0x9c, 0x8a, 0x3a, 0x84, 0x1b, 0x51, 0xc6, 0x9f, 0xd6, 0x46, 0xf8, 0x4f, 0x05,",
                "+\t0x62, 0xc7, 0x1c, 0x90, 0x8e, 0xbd, 0x93, 0xae, 0x1b, 0x75, 0x9c, 0xe7, 0xe4, 0xd2, 0x15, 0x11,",
                "+\t0x94, 0x7d, 0xe3, 0x7f, 0xd1, 0xe0, 0x66, 0x6c, 0xf8, 0x4f, 0xbc, 0xaa, 0x8b, 0x00, 0xa7, 0x74,",
                "+\t0xfb, 0x90, 0x1e, 0xed, 0xe0, 0x97, 0x77, 0x85, 0xe2, 0xeb, 0x49, 0x7d, 0x4f, 0x45, 0xe8, 0x39,",
                "+\t0x2f, 0xd6, 0x9c, 0xfd, 0x71, 0x65, 0xf8, 0xb9, 0x0b, 0x65, 0x46, 0x38, 0xf0, 0x0c, 0x6f, 0xe4,",
                "+\t0xc6, 0x16, 0xe3, 0xaf, 0xc5, 0x16, 0x90, 0x83, 0x26, 0x9a, 0xd7, 0x2f, 0x21, 0xcf, 0xf2, 0x56,",
                "+\t0x99, 0xb5, 0x45, 0x2e, 0x0a, 0x8a, 0x1e, 0xba, 0x60, 0xc4, 0x67, 0x90, 0x7f, 0xc9, 0x8a, 0x7d,",
                "+\t0x8a, 0x66, 0xd3, 0x72, 0x29, 0x2c, 0x63, 0xc0, 0x4b, 0x10, 0x25, 0x9d, 0x7d, 0xb3, 0x24, 0x87,",
                "+\t0x10, 0xe7, 0x50, 0xdf, 0xe1, 0xc9, 0x54, 0x49, 0xf7, 0xdb, 0xd4, 0x64, 0xdd, 0xbe, 0x49, 0x2c,",
                "+\t0x8f, 0xf5, 0x4e, 0xb3, 0x5e, 0x85, 0x82, 0x57, 0xa0, 0xce, 0x91, 0xd6, 0x7a, 0x3d, 0x25, 0x59,",
                "+\t0xf1, 0xe5, 0x69, 0x61, 0x79, 0xf8, 0x5f, 0x35, 0x98, 0x55, 0x06, 0x4c, 0x64, 0x98, 0xf7, 0x20,",
                "+\t0xcf, 0x4b, 0x9a, 0x22, 0x2e, 0xce, 0x87, 0x47, 0x71, 0x18, 0x5d, 0xf0, 0xa0, 0x15, 0x28, 0xf0,",
                "+\t0x2f, 0x99, 0x31, 0x26, 0xb3, 0x4b, 0x26, 0xfc, 0x08, 0xe6, 0x04, 0x89, 0x0c, 0xec, 0xa4, 0xbd,",
                "+\t0xcd, 0x0c, 0x8a, 0xff, 0x0a, 0xe6, 0xc3, 0x6c, 0x13, 0x4d, 0x49, 0x51, 0x32, 0xf3, 0x36, 0x4a,",
                "+\t0xae, 0x49, 0x25, 0x0f, 0x87, 0x3d, 0x25, 0x8c, 0x47, 0x57, 0x5d, 0x5d, 0x91, 0x4c, 0x64, 0x45,",
                "+\t0xfc, 0x09, 0x48, 0x11, 0x3f, 0xeb, 0x04, 0xe6, 0xe4, 0x76, 0xd8, 0x31, 0x5d, 0x3f, 0xb9, 0xfb,",
                "+\t0x0c, 0x90, 0x4a, 0xfc, 0xb9, 0x15, 0xda, 0x20, 0x27, 0x8e, 0x71, 0x3a, 0x20, 0x7e, 0x7c, 0xa2,",
                "+\t0xa9, 0xbe, 0x4a, 0x9c, 0xc8, 0xa3, 0xb7, 0x60, 0xf6, 0xa5, 0x3d, 0xa6, 0xae, 0x81, 0x52, 0x83,",
                "+\t0x23, 0xc3, 0xaf, 0x7a, 0xfe, 0xb2, 0xf9, 0x6d, 0x0a, 0xae, 0x0e, 0x98, 0x08, 0xfc, 0xbf, 0x34,",
                "+\t0xa8, 0xac, 0xf5, 0x0d, 0x67, 0x20, 0x81, 0x7f, 0x03, 0x79, 0x7e, 0x81, 0x11, 0x35, 0x83, 0x77,",
                "+\t0xc2, 0x62, 0x54, 0x5e, 0xde, 0x58, 0xe3, 0xd7, 0x1d, 0x31, 0x8a, 0x2a, 0x2e, 0x9e, 0x15, 0x36,",
                "+\t0x22, 0xcf, 0x0c, 0x1b, 0xe8, 0x7d, 0xc8, 0x19, 0x74, 0x08, 0x73, 0xc1, 0xb5, 0xe8, 0xd5, 0x91,",
                "+\t0x49, 0x63, 0x79, 0x1b, 0xe7, 0xc2, 0xbf, 0x86, 0xb2, 0x82, 0x40, 0x2f, 0xc7, 0x2f, 0xda, 0x22,",
                "+\t0x01, 0x5b, 0x5b, 0xef, 0x6c, 0xbd, 0xe2, 0x77, 0xe6, 0x1a, 0xc0, 0x46, 0xdb, 0x6f, 0x67, 0xf0,",
                "+\t0x47, 0x62, 0x94, 0xf0, 0x77, 0xaa, 0x3e, 0x5a, 0x9a, 0x3e, 0x99, 0xb7, 0xd2, 0xe7, 0x02, 0xaa,",
                "+\t0x62, 0xfa, 0x93, 0xba, 0x6f, 0x26, 0x2f, 0xc5, 0x7d, 0x2b, 0xca, 0xeb, 0x82, 0x11, 0xcf, 0x40,",
                "+\t0x55, 0x38, 0x74, 0xb1, 0xff, 0xfe, 0x2d, 0x03, 0x35, 0x49, 0x99, 0xb4, 0xb6, 0x29, 0xcb, 0x32,",
                "+\t0x3c, 0x02, 0xf8, 0x45, 0x99, 0x1b, 0x90, 0xef, 0x1d, 0x1f, 0x98, 0x9f, 0xc9, 0x3a, 0xb4, 0x68,",
                "+\t0x51, 0x7a, 0x9f, 0xe3, 0xf0, 0xc7, 0x20, 0xd1, 0xa2, 0x17, 0x74, 0xc7, 0x38, 0xf1, 0xb6, 0xac,",
                "+\t0x1e, 0xb9, 0x60, 0x79, 0xe3, 0xb4, 0x1e, 0x10, 0xd8, 0x7d, 0x55, 0x3c, 0x1a, 0xb1, 0x64, 0x51,",
                "+\t0x79, 0x44, 0x42, 0x4f, 0xa0, 0x4e, 0xbf, 0xd7, 0x86, 0xc3, 0xbe, 0x49, 0x7a, 0x5c, 0x40, 0x81,",
                "+\t0xf1, 0xc4, 0xe8, 0x14, 0x9d, 0xa5, 0x5e, 0x6e, 0xa3, 0xc8, 0xdc, 0x96, 0x68, 0xa1, 0x25, 0x28,",
                "+\t0x73, 0xfd, 0xb6, 0xac, 0x43, 0x97, 0xb0, 0x97, 0x94, 0xac, 0xae, 0x92, 0xe8, 0x39, 0x5e, 0x1b,",
                "+\t0x79, 0x67, 0x6d, 0xcb, 0x38, 0xee, 0x4b, 0xbf, 0x48, 0x83, 0x39, 0x25, 0x6e, 0x98, 0xae, 0x4a,",
                "+\t0x6d, 0xc3, 0x1c, 0xa5, 0x12, 0xcb, 0x33, 0xbb, 0x8a, 0x13, 0x95, 0xa1, 0x52, 0x8b, 0x84, 0x4a,",
                "+\t0xc3, 0x75, 0x5f, 0xdb, 0x4e, 0x4f, 0x18, 0xd0, 0x6f, 0xe3, 0x0d, 0x2e, 0xfc, 0xd0, 0x0d, 0x05,",
                "+\t0xc3, 0xef, 0x2b, 0x65, 0x39, 0x90, 0xf2, 0x82, 0x78, 0x57, 0x48, 0xc1, 0x4f, 0x61, 0x41, 0x72,",
                "+\t0x8a, 0xea, 0xe2, 0x15, 0xcc, 0x7b, 0x70, 0x57, 0x32, 0xaf, 0x9f, 0xd1, 0xeb, 0xdb, 0xbe, 0x00,",
                "+\t0xfc, 0xa1, 0x7a, 0x3e, 0x87, 0x86, 0xaf, 0x27, 0x4b, 0xc9, 0xed, 0xbe, 0xaa, 0xc0, 0xc8, 0x15,",
                "+\t0x3b, 0xb3, 0xa4, 0xb3, 0x6f, 0x4a, 0x73, 0xec, 0xbe, 0x9f, 0x78, 0xd0, 0x6f, 0xbc, 0x0e, 0xb7,",
                "+\t0xa4, 0x0c, 0x91, 0x2c, 0x87, 0x85, 0xc4, 0x14, 0x4a, 0x12, 0x22, 0x0c, 0x46, 0x87, 0x5e, 0x6d,",
                "+\t0x76, 0x95, 0x33, 0x6c, 0x5a, 0x26, 0x53, 0x53, 0x64, 0x2e, 0xf0, 0x1d, 0x41, 0x15, 0x53, 0xe3,",
                "+\t0x92, 0x20, 0x53, 0x01, 0x2a, 0x59, 0x2c, 0x04, 0x25, 0xc7, 0x16, 0x22, 0x26, 0xfa, 0x13, 0x58,",
                "+\t0xf4, 0x95, 0xa0, 0x76, 0xdb, 0x27, 0xce, 0xc0, 0x74, 0x5d, 0xa5, 0x1e, 0x95, 0x34, 0xf1, 0x77,",
                "+\t0x60, 0x7a, 0x48, 0x84, 0xe7, 0x2a, 0xaf, 0xa2, 0x15, 0xfe, 0x80, 0xbc, 0xa2, 0x0c, 0x66, 0xfd,",
                "+\t0xb8, 0x07, 0xf7, 0xa4, 0x74, 0x6e, 0xd1, 0x44, 0xf1, 0x51, 0xa5, 0xe4, 0xb5, 0x9f, 0x9b, 0x35,",
                "+\t0x7e, 0xed, 0xcf, 0xf2, 0xb5, 0xf7, 0x6b, 0xa4, 0xbf, 0xe7, 0x86, 0x94, 0x67, 0x6b, 0xa2, 0x88,",
                "+\t0xb4, 0xcd, 0x6d, 0xea, 0x1f, 0xc9, 0x89, 0x84, 0x1d, 0xc3, 0x7c, 0xf8, 0x24, 0x4f, 0xe4, 0x2c,",
                "+\t0xe7, 0x21, 0xe7, 0xd9, 0xe7, 0x44, 0xba, 0x4a, 0xde, 0x90, 0x0a, 0xfb, 0xc7, 0x7c, 0x22, 0x85,",
                "+\t0x8d, 0x40, 0x18, 0xdb, 0x92, 0x93, 0xea, 0x4b, 0x57, 0x53, 0xa6, 0x78, 0xbc, 0x81, 0x77, 0xe1,",
                "+\t0x46, 0xd4, 0x4d, 0x4c, 0xa4, 0xf2, 0x2b, 0xbe, 0x81, 0x93, 0x3c, 0xc9, 0x44, 0x72, 0x3f, 0x08,",
                "+\t0x9c, 0x81, 0xe2, 0x50, 0x26, 0x12, 0xa9, 0x43, 0x33, 0xc9, 0xbf, 0xfc, 0x18, 0xfb, 0xd5, 0x77,",
                "+\t0x37, 0x13, 0x09, 0x73, 0x03, 0x61, 0x93, 0x2f, 0x7f, 0xe0, 0x23, 0xb2, 0x57, 0xfa, 0x08, 0x71,",
                "+\t0x48, 0x02, 0x2f, 0xf6, 0x13, 0x6c, 0x3a, 0x81, 0x11, 0x38, 0xd0, 0x49, 0x31, 0x68, 0x0c, 0xf1,",
                "+\t0x31, 0x58, 0x43, 0x6e, 0x6c, 0xd5, 0xed, 0x4e, 0xb4, 0x18, 0x1f, 0x06, 0xbe, 0x33, 0xe6, 0x99,",
                "+\t0x27, 0x12, 0xfc, 0x11, 0x2c, 0xa5, 0x3b, 0xe5, 0x49, 0x24, 0x3f, 0x69, 0x41, 0xc9, 0x4f, 0x5b,",
                "+\t0x95, 0x1f, 0x5f, 0x94, 0xa1, 0xb0, 0xbb, 0x77, 0xb0, 0xbf, 0xb6, 0xde, 0xe6, 0xbf, 0xbe, 0x58,",
                "+\t0xdf, 0xd3, 0xf5, 0xc3, 0xfd, 0x4e, 0x3d, 0xb3, 0xfa, 0x5d, 0x16, 0x32, 0xdb, 0xaf, 0xd0, 0xc7,",
                "+\t0x90, 0xe3, 0x4f, 0x91, 0x57, 0xbc, 0x3f, 0x37, 0xaf, 0x7a, 0x6d, 0xc5, 0x37, 0xbf, 0xf8, 0x9f,",
                "+\t0xef, 0xbe, 0xce, 0xcc, 0xe2, 0x4a, 0x6b, 0xfc, 0xab, 0xd6, 0xf9, 0xb8, 0xc5, 0x62, 0xc3, 0x33,",
                "+\t0xed, 0x09, 0xfa, 0x00, 0xb2, 0xfb, 0x23, 0x0f, 0xa5, 0xbe, 0x4b, 0x37, 0xd3, 0x1f, 0x60, 0xf1,",
                "+\t0x02, 0x13, 0x3a, 0x83, 0x41, 0x08, 0x1d, 0x8e, 0x3c, 0x2a, 0xf2, 0x53, 0x28, 0xab, 0xcf, 0xa7,",
                "+\t0xd7, 0x3e, 0x56, 0x37, 0xaf, 0x7f, 0x9a, 0xc5, 0x77, 0x19, 0xd4, 0x4d, 0x8c, 0x04, 0x14, 0x7f,",
                "+\t0xe0, 0x55, 0x67, 0xd1, 0xb9, 0xb0, 0x50, 0xea, 0x53, 0x76, 0x33, 0xfd, 0xb5, 0x36, 0x36, 0x0b,",
                "+\t0xef, 0xc2, 0xa2, 0x22, 0xff, 0x42, 0x3c, 0xd4, 0x76, 0x3d, 0x74, 0x2f, 0xe1, 0xa1, 0x4e, 0x7d,",
                "+\t0x92, 0x6a, 0x2e, 0xa5, 0x33, 0x08, 0x90, 0x3b, 0x0c, 0xe4, 0x06, 0x9e, 0x15, 0x20, 0x5d, 0x9f,",
                "+\t0xe5, 0x99, 0xf6, 0x64, 0xb5, 0x0b, 0x39, 0x56, 0x73, 0x46, 0x7f, 0x26, 0x3f, 0x9a, 0x09, 0x85,",
                "+\t0xf4, 0x94, 0x85, 0x0e, 0x55, 0xab, 0xf1, 0x3c, 0x03, 0xaa, 0xe1, 0x12, 0x05, 0x62, 0x15, 0xe7,",
                "+\t0x67, 0xda, 0x93, 0x65, 0xed, 0x17, 0xda, 0xea, 0x9b, 0x69, 0xc8, 0xb1, 0xe2, 0x13, 0x3a, 0x07,",
                "+\t0x08, 0x6a, 0xb3, 0xd1, 0xd9, 0xc5, 0xaa, 0xbd, 0xd1, 0xd9, 0xc5, 0xcb, 0xba, 0xb8, 0xc9, 0x40,",
                "+\t0xe7, 0xf1, 0x0c, 0x05, 0x65, 0x35, 0xad, 0x16, 0x2b, 0xd3, 0x51, 0x3b, 0x3a, 0xa2, 0xf4, 0xc6,",
                "+\t0x8f, 0x12, 0x4a, 0x12, 0x16, 0xaa, 0xcf, 0x46, 0x77, 0x43, 0x42, 0x6d, 0x16, 0x2f, 0x32, 0xbc,",
                "+\t0x06, 0x9e, 0x13, 0xd6, 0xe4, 0x90, 0x0e, 0x63, 0xa2, 0x98, 0x9f, 0x43, 0x2d, 0x5c, 0x5c, 0x45,",
                "+\t0x0f, 0x12, 0x84, 0x46, 0x6b, 0xb4, 0xcd, 0x87, 0x57, 0x33, 0x25, 0x81, 0x73, 0xe4, 0x73, 0x42,",
                "+\t0x86, 0x06, 0x65, 0x12, 0xb6, 0x46, 0x5f, 0x68, 0x30, 0x13, 0xa9, 0x96, 0xa2, 0x24, 0xe9, 0xb1,",
                "+\t0x5a, 0x6c, 0xf3, 0xd1, 0x35, 0x5c, 0x42, 0x09, 0xcc, 0x94, 0xb8, 0x83, 0x6f, 0x86, 0x2c, 0xe0,",
                "+\t0x99, 0x03, 0xe2, 0xd9, 0x42, 0x11, 0xdf, 0xf2, 0xbc, 0xaa, 0x99, 0x68, 0xf9, 0x50, 0x95, 0x34,",
                "+\t0xd1, 0xf2, 0xe1, 0x92, 0x68, 0x8a, 0xe5, 0x79, 0x19, 0x93, 0xee, 0x64, 0xf6, 0xfb, 0x06, 0xfe,",
                "+\t0xab, 0x46, 0x64, 0x43, 0xc9, 0x2f, 0x1d, 0xa2, 0xc5, 0xa4, 0x32, 0x4e, 0x70, 0x01, 0x68, 0xde,",
                "+\t0x4b, 0xed, 0x17, 0xc8, 0xf7, 0x19, 0xf2, 0x6d, 0x7c, 0x83, 0x22, 0x8b, 0x1f, 0x4e, 0xb6, 0x78,",
                "+\t0xad, 0xa0, 0x65, 0xf4, 0x7a, 0x74, 0xc2, 0x7f, 0x09, 0x15, 0xb5, 0xb6, 0x87, 0xee, 0x27, 0x96,",
                "+\t0x8e, 0xd4, 0xf2, 0x60, 0x13, 0x5f, 0xc5, 0x22, 0x90, 0x1f, 0x32, 0xe4, 0x45, 0x7c, 0x2b, 0x01,",
                "+\t0xd9, 0x61, 0xac, 0x21, 0x70, 0x5e, 0x97, 0x4b, 0x06, 0x0f, 0x95, 0xfd, 0x92, 0xc1, 0xc3, 0x65,",
                "+\t0xbd, 0x2b, 0xc1, 0x47, 0x8c, 0x95, 0x82, 0xbb, 0x00, 0x41, 0x05, 0x0e, 0x25, 0xda, 0x52, 0xb9,",
                "+\t0x01, 0x45, 0x4f, 0x74, 0xbc, 0x78, 0x17, 0xde, 0x5f, 0x11, 0xd8, 0xbe, 0xe9, 0xd2, 0x93, 0xbd,",
                "+\t0xfa, 0x77, 0x79, 0x28, 0xbf, 0x34, 0x4c, 0xcb, 0x23, 0x96, 0x61, 0x75, 0x09, 0x3a, 0x86, 0x1c,",
                "+\t0x8b, 0x6e, 0x51, 0xe7, 0xa5, 0x16, 0xa5, 0xa2, 0xce, 0x2b, 0x54, 0xb1, 0xc1, 0x4b, 0x0c, 0xb5,",
                "+\t0x89, 0x17, 0x28, 0xea, 0x20, 0x10, 0xdd, 0x62, 0x85, 0x16, 0x3a, 0xd1, 0x13, 0xc8, 0x8b, 0x1a,",
                "+\t0x7e, 0x44, 0x50, 0xa8, 0x00, 0xd3, 0xbc, 0x93, 0xdc, 0x99, 0xb4, 0x95, 0x54, 0x18, 0x97, 0xf1,",
                "+\t0x51, 0x9c, 0x31, 0x40, 0x50, 0x41, 0x8c, 0x1a, 0x34, 0x56, 0x70, 0x6c, 0x2e, 0xa5, 0x33, 0x08,",
                "+\t0xcc, 0x47, 0x0c, 0xf3, 0x1e, 0x6e, 0x46, 0x31, 0x7b, 0x3e, 0x2f, 0xc5, 0xfd, 0x73, 0x98, 0xde,",
                "+\t0x34, 0xdc, 0x33, 0x14, 0x89, 0x57, 0xca, 0x8f, 0x0d, 0x9a, 0xcd, 0xa4, 0x2e, 0x81, 0x72, 0x8f,",
                "+\t0xa1, 0xdc, 0xc2, 0xf3, 0x51, 0x94, 0x33, 0xc3, 0xa5, 0x81, 0x00, 0xf5, 0x20, 0xcf, 0x7f, 0x7b,",
                "+\t0x10, 0xb5, 0x5f, 0xe8, 0xf7, 0x0b, 0x51, 0xfb, 0x85, 0x7f, 0xae, 0x70, 0x3d, 0xca, 0x10, 0x8a,",
                "+\t0xf2, 0xb1, 0x1f, 0xdd, 0x8d, 0x2c, 0x45, 0xf8, 0x87, 0x01, 0xcd, 0xc5, 0xb4, 0x6e, 0x81, 0xf5,",
                "+\t0x80, 0x61, 0xdd, 0xc5, 0x8d, 0xd8, 0x5a, 0x09, 0xce, 0x67, 0xda, 0x93, 0x5f, 0x68, 0xe8, 0x73,",
                "+\t0x80, 0xa0, 0xe8, 0x1a, 0x3b, 0x00, 0xd1, 0xfa, 0x6d, 0xec, 0x00, 0xc4, 0xea, 0xb5, 0x78, 0x85,",
                "+\t0xe1, 0x2e, 0xe3, 0x07, 0x51, 0x5c, 0xcf, 0x31, 0x2c, 0xf7, 0x84, 0x38, 0xef, 0xf3, 0xc2, 0x9a,",
                "+\t0x7b, 0x66, 0x0e, 0xe9, 0x61, 0xf8, 0x8f, 0x19, 0x98, 0xa6, 0x59, 0x23, 0x0d, 0xae, 0xc1, 0x65,",
                "+\t0x3b, 0xaa, 0x49, 0xac, 0xc4, 0x15, 0xd5, 0x24, 0x7e, 0x4f, 0x0f, 0x07, 0x57, 0xf6, 0x73, 0x74,",
                "+\t0xc2, 0x18, 0xa8, 0xa1, 0x6d, 0x28, 0x2b, 0xb7, 0x71, 0x94, 0x20, 0x2c, 0x5c, 0x3b, 0x8b, 0xba,",
                "+\t0xf8, 0x84, 0xab, 0x3c, 0xbe, 0xcd, 0xf0, 0x16, 0x70, 0xdd, 0xc7, 0xeb, 0x71, 0x0e, 0x0a, 0xf8,",
                "+\t0x1a, 0x2a, 0xea, 0x8d, 0x1d, 0x25, 0xc8, 0x8b, 0xd4, 0xe5, 0xa2, 0x5e, 0x2e, 0xe9, 0xc2, 0x1f,",
                "+\t0x3e, 0xf8, 0xfe, 0x4f, 0xee, 0x25, 0x1b, 0x05, 0xee, 0x43, 0x41, 0x5c, 0xe1, 0x93, 0x66, 0x19,",
                "+\t0x2e, 0xe2, 0x25, 0xcd, 0x32, 0x72, 0xff, 0x0f, 0x27, 0x64, 0x0c, 0x91, 0xde, 0x52, 0x64, 0x24,",
                "+\t0x11, 0x68, 0x2f, 0x88, 0x97, 0x86, 0x16, 0x54, 0xa4, 0xd2, 0xd0, 0x94, 0x1b, 0x62, 0x1a, 0xda,",
                "+\t0x29, 0xf1, 0xc4, 0x71, 0x91, 0x37, 0x2f, 0x94, 0x22, 0x4c, 0xf5, 0xde, 0xf8, 0x2a, 0x96, 0xa4,",
                "+\t0x7c, 0x39, 0x00, 0x14, 0xae, 0x1b, 0x5d, 0x00, 0x04, 0x05, 0x86, 0x68, 0x72, 0x94, 0x58, 0xa5,",
                "+\t0x8c, 0x26, 0x47, 0xc9, 0x35, 0x8a, 0xb0, 0x6b, 0x08, 0x70, 0x79, 0xba, 0x4e, 0x91, 0xbf, 0xd2,",
                "+\t0x00, 0xc5, 0x6b, 0x11, 0xe8, 0x69, 0xb2, 0xf4, 0xc4, 0xda, 0x67, 0xf3, 0xbd, 0xb7, 0x63, 0x4e,",
                "+\t0xf2, 0xf6, 0x81, 0x4a, 0x5d, 0xc6, 0x3d, 0x7c, 0x4d, 0x95, 0xfa, 0x1b, 0x0d, 0xaa, 0xa1, 0x42,",
                "+\t0x06, 0x7a, 0x27, 0x65, 0x4d, 0x23, 0xa5, 0xd3, 0xe6, 0xe3, 0x6b, 0xf9, 0x92, 0x12, 0x27, 0x65,",
                "+\t0x07, 0xc8, 0x34, 0xf9, 0x4b, 0x0d, 0x6a, 0xe1, 0xc2, 0x07, 0x4a, 0x91, 0x1d, 0x2b, 0xbd, 0x36,",
                "+\t0x97, 0xaf, 0x67, 0xbc, 0x7a, 0x79, 0x82, 0xcc, 0xb9, 0x0f, 0x05, 0x51, 0x2a, 0x49, 0xda, 0xf8,",
                "+\t0xe1, 0xa2, 0x6d, 0xd2, 0xc6, 0x8f, 0xd4, 0x59, 0x12, 0x36, 0xbe, 0x63, 0xf7, 0x89, 0x72, 0xcc,",
                "+\t0x44, 0x2d, 0x25, 0x0d, 0xed, 0xea, 0x63, 0x16, 0x29, 0xc4, 0xa4, 0xa1, 0x05, 0xc7, 0x4c, 0x16,",
                "+\t0x51, 0x50, 0x8a, 0xb0, 0x6b, 0x8e, 0x59, 0xb4, 0x06, 0x93, 0x70, 0xcc, 0x18, 0xa0, 0x72, 0xcc,",
                "+\t0x82, 0x72, 0x47, 0xd2, 0x31, 0x8b, 0xd5, 0xa0, 0x93, 0x8e, 0x59, 0xbc, 0x62, 0x92, 0xb0, 0x8e,",
                "+\t0x0c, 0x37, 0x74, 0xcc, 0xe6, 0x12, 0x2a, 0x23, 0xe8, 0xbd, 0x14, 0x23, 0x26, 0x96, 0xb6, 0x9b,",
                "+\t0xef, 0xbf, 0x25, 0x77, 0xea, 0x1e, 0xe7, 0xe6, 0x97, 0x7b, 0xfc, 0x1f, 0x34, 0x98, 0x4f, 0xaa,",
                "+\t0xaa, 0xa0, 0x14, 0x9c, 0x94, 0x92, 0x78, 0x73, 0xe5, 0x6d, 0xd9, 0xaf, 0xb6, 0x96, 0xbf, 0xeb,",
                "+\t0x9f, 0xd7, 0xff, 0xf3, 0xcd, 0xa2, 0xf6, 0xdf, 0x6f, 0x16, 0xb5, 0xff, 0x7d, 0xb3, 0xa8, 0xfd,",
                "+\t0xe3, 0xff, 0x2d, 0x4e, 0x1d, 0xe7, 0xd9, 0x7f, 0xe4, 0xfa, 0xd5, 0x1f, 0x02, 0x00, 0x00, 0xff,",
                "+\t0xff, 0xbf, 0x57, 0x39, 0x98, 0x4f, 0x36, 0x00, 0x00,",
                " }"
            ],
            "changed_files": [
                "etcdserver/api/v3election/v3electionpb/v3election.pb.go",
                "etcdserver/etcdserverpb/rpc.pb.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fc30b9844ac6c37e60eccf62bbfbe941239edf1a",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519422502,
            "hunks": 11,
            "message": "etcdctl/check: enable auto compact and defrag for check datascale Running check datascale can create large history of keyspaces and internal fragmentation. Allow user to run auto compact and defrag when run check datascale.",
            "diff": [
                "diff --git a/etcdctl/ctlv3/command/check.go b/etcdctl/ctlv3/command/check.go",
                "index c83cda9bb..204721f66 100644",
                "--- a/etcdctl/ctlv3/command/check.go",
                "+++ b/etcdctl/ctlv3/command/check.go",
                "@@ -38,6 +38,6 @@ var (",
                " \tcheckPerfPrefix      string",
                "-\tcheckPerfAutoCompact bool",
                "-\tcheckPerfAutoDefrag  bool",
                " \tcheckDatascaleLoad   string",
                " \tcheckDatascalePrefix string",
                "+\tautoCompact          bool",
                "+\tautoDefrag           bool",
                " )",
                "@@ -128,4 +128,4 @@ func NewCheckPerfCommand() *cobra.Command {",
                " \tcmd.Flags().StringVar(&checkPerfPrefix, \"prefix\", \"/etcdctl-check-perf/\", \"The prefix for writing the performance check's keys.\")",
                "-\tcmd.Flags().BoolVar(&checkPerfAutoCompact, \"auto-compact\", false, \"Compact storage with last revision after test is finished.\")",
                "-\tcmd.Flags().BoolVar(&checkPerfAutoDefrag, \"auto-defrag\", false, \"Defragment storage after test is finished.\")",
                "+\tcmd.Flags().BoolVar(&autoCompact, \"auto-compact\", false, \"Compact storage with last revision after test is finished.\")",
                "+\tcmd.Flags().BoolVar(&autoDefrag, \"auto-defrag\", false, \"Defragment storage after test is finished.\")",
                "@@ -221,3 +221,3 @@ func newCheckPerfCommand(cmd *cobra.Command, args []string) {",
                "-\tif checkPerfAutoCompact {",
                "+\tif autoCompact {",
                " \t\tcompact(clients[0], dresp.Header.Revision)",
                "@@ -225,3 +225,3 @@ func newCheckPerfCommand(cmd *cobra.Command, args []string) {",
                "-\tif checkPerfAutoDefrag {",
                "+\tif autoDefrag {",
                " \t\tfor _, ep := range clients[0].Endpoints() {",
                "@@ -267,24 +267,2 @@ func newCheckPerfCommand(cmd *cobra.Command, args []string) {",
                "-func compact(c *v3.Client, rev int64) {",
                "-\tfmt.Printf(\"Compacting with revision %d\\n\", rev)",
                "-\tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)",
                "-\t_, err := c.Compact(ctx, rev, v3.WithCompactPhysical())",
                "-\tcancel()",
                "-\tif err != nil {",
                "-\t\tExitWithError(ExitError, err)",
                "-\t}",
                "-\tfmt.Printf(\"Compacted with revision %d\\n\", rev)",
                "-}",
                "-",
                "-func defrag(c *v3.Client, ep string) {",
                "-\tfmt.Printf(\"Defragmenting %q\\n\", ep)",
                "-\tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)",
                "-\t_, err := c.Defragment(ctx, ep)",
                "-\tcancel()",
                "-\tif err != nil {",
                "-\t\tExitWithError(ExitError, err)",
                "-\t}",
                "-\tfmt.Printf(\"Defragmented %q\\n\", ep)",
                "-}",
                "-",
                " // NewCheckDatascaleCommand returns the cobra command for \"check datascale\".",
                "@@ -300,2 +278,4 @@ func NewCheckDatascaleCommand() *cobra.Command {",
                " \tcmd.Flags().StringVar(&checkDatascalePrefix, \"prefix\", \"/etcdctl-check-datascale/\", \"The prefix for writing the datascale check's keys.\")",
                "+\tcmd.Flags().BoolVar(&autoCompact, \"auto-compact\", false, \"Compact storage with last revision after test is finished.\")",
                "+\tcmd.Flags().BoolVar(&autoDefrag, \"auto-defrag\", false, \"Defragment storage after test is finished.\")",
                "@@ -391,6 +371,16 @@ func newCheckDatascaleCommand(cmd *cobra.Command, args []string) {",
                " \tctx, cancel = context.WithCancel(context.Background())",
                "-\t_, err = clients[0].Delete(ctx, checkDatascalePrefix, v3.WithPrefix())",
                "+\tdresp, derr := clients[0].Delete(ctx, checkDatascalePrefix, v3.WithPrefix())",
                " \tdefer cancel()",
                "-\tif err != nil {",
                "-\t\tExitWithError(ExitError, err)",
                "+\tif derr != nil {",
                "+\t\tExitWithError(ExitError, derr)",
                "+\t}",
                "+",
                "+\tif autoCompact {",
                "+\t\tcompact(clients[0], dresp.Header.Revision)",
                "+\t}",
                "+",
                "+\tif autoDefrag {",
                "+\t\tfor _, ep := range clients[0].Endpoints() {",
                "+\t\t\tdefrag(clients[0], ep)",
                "+\t\t}",
                " \t}",
                "diff --git a/etcdctl/ctlv3/command/util.go b/etcdctl/ctlv3/command/util.go",
                "index 64a4a16f4..c47466677 100644",
                "--- a/etcdctl/ctlv3/command/util.go",
                "+++ b/etcdctl/ctlv3/command/util.go",
                "@@ -25,3 +25,5 @@ import (",
                " \t\"strings\"",
                "+\t\"time\"",
                "+\tv3 \"github.com/coreos/etcd/clientv3\"",
                " \tpb \"github.com/coreos/etcd/internal/mvcc/mvccpb\"",
                "@@ -120 +122,25 @@ func endpointMemoryMetrics(host string) float64 {",
                " }",
                "+",
                "+// compact keyspace history to a provided revision",
                "+func compact(c *v3.Client, rev int64) {",
                "+\tfmt.Printf(\"Compacting with revision %d\\n\", rev)",
                "+\tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)",
                "+\t_, err := c.Compact(ctx, rev, v3.WithCompactPhysical())",
                "+\tcancel()",
                "+\tif err != nil {",
                "+\t\tExitWithError(ExitError, err)",
                "+\t}",
                "+\tfmt.Printf(\"Compacted with revision %d\\n\", rev)",
                "+}",
                "+",
                "+// defrag a given endpoint",
                "+func defrag(c *v3.Client, ep string) {",
                "+\tfmt.Printf(\"Defragmenting %q\\n\", ep)",
                "+\tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)",
                "+\t_, err := c.Defragment(ctx, ep)",
                "+\tcancel()",
                "+\tif err != nil {",
                "+\t\tExitWithError(ExitError, err)",
                "+\t}",
                "+\tfmt.Printf(\"Defragmented %q\\n\", ep)",
                "+}"
            ],
            "changed_files": [
                "etcdctl/ctlv3/command/check.go",
                "etcdctl/ctlv3/command/util.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bfb7a155b4a61ee220426c645b5baa4f38e69238",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520460254,
            "hunks": 2,
            "message": "travis: update Go version string Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index ca37df151..a0b0887e6 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -8,3 +8,3 @@ services: docker",
                " go:",
                "-- 1.9.4",
                "+- \"1.9.4\"",
                " - tip",
                "@@ -32,3 +32,3 @@ matrix:",
                "   exclude:",
                "-  - go: 1.9.4",
                "+  - go: \"1.9.4\"",
                "     env: TARGET=amd64-go-tip"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.3.10",
                "v3.3.11",
                "v3.3.12",
                "v3.3.13",
                "v3.3.14",
                "v3.3.14-beta.0",
                "v3.3.14-rc.0",
                "v3.3.15",
                "v3.3.16",
                "v3.3.17",
                "v3.3.18",
                "v3.3.19",
                "v3.3.2",
                "v3.3.20",
                "v3.3.21",
                "v3.3.22",
                "v3.3.23",
                "v3.3.24",
                "v3.3.25",
                "v3.3.26",
                "v3.3.27",
                "v3.3.3",
                "v3.3.4",
                "v3.3.5",
                "v3.3.6",
                "v3.3.7",
                "v3.3.8",
                "v3.3.9"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e1001f934942793788f8e0f1d81e432c012bd916",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519672883,
            "hunks": 2,
            "message": "build: fix compile pass Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/build b/build",
                "index bf17a7ad4..9b3947e13 100755",
                "--- a/build",
                "+++ b/build",
                "@@ -66,17 +66,16 @@ tools_build() {",
                " \tif [ -n \"${BINDIR}\" ]; then out=\"${BINDIR}\"; fi",
                "-\t# shellcheck disable=SC2039",
                "-\ttools=(",
                "-\t\tbenchmark",
                "-\t\tetcd-dump-db",
                "-\t\tetcd-dump-logs",
                "-\t\tfunctional-tester/etcd-agent",
                "-\t\tfunctional-tester/etcd-tester",
                "-\t\tfunctional-tester/etcd-runner",
                "-\t\tlocal-tester/bridge",
                "-\t)",
                "-\t# shellcheck disable=SC2039",
                "-\tfor tool in \"${tools[@]}\"",
                "+\ttools_path=\"benchmark",
                "+\tetcd-dump-db",
                "+\tetcd-dump-logs",
                "+\tfunctional-tester/etcd-agent",
                "+\tfunctional-tester/etcd-tester",
                "+\tfunctional-tester/etcd-runner",
                "+\tlocal-tester/bridge\"",
                "+\tfor tool in ${tools_path}",
                " \tdo",
                "-\t\t# shellcheck disable=SC2086",
                "-\t\tCGO_ENABLED=0 go build $GO_BUILD_FLAGS -installsuffix cgo -ldflags \"$GO_LDFLAGS\" -o \"${out}/${tool}\" \"${REPO_PATH}/tools/${tool}\" || return",
                "+\t\techo \"Building\" \"'${tool}'\"...",
                "+\t\tCGO_ENABLED=0 go build ${GO_BUILD_FLAGS} \\",
                "+\t\t  -installsuffix cgo \\",
                "+\t\t  -ldflags \"${GO_LDFLAGS}\" \\",
                "+\t\t  -o \"${out}/${tool}\" \"${REPO_PATH}/tools/${tool}\" || return",
                " \tdone"
            ],
            "changed_files": [
                "build"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e9969aae7e590fda17e41df4c44a39ec4c35fb3b",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519857265,
            "hunks": 4,
            "message": "hack/scripts-dev/docker-dns: add \"--host-whitelist\" tests Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/docker-dns/certs/run.sh b/hack/scripts-dev/docker-dns/certs/run.sh",
                "index 1ef72d40f..9311c618b 100755",
                "--- a/hack/scripts-dev/docker-dns/certs/run.sh",
                "+++ b/hack/scripts-dev/docker-dns/certs/run.sh",
                "@@ -34,3 +34,2 @@ ETCDCTL_API=3 ./etcdctl \\",
                "-# TODO: add host header check to enforce same-origin-policy",
                " printf \"\\nWriting v2 key...\\n\"",
                "diff --git a/hack/scripts-dev/docker-dns/insecure/Procfile b/hack/scripts-dev/docker-dns/insecure/Procfile",
                "index 0029aeda6..ad87e4191 100644",
                "--- a/hack/scripts-dev/docker-dns/insecure/Procfile",
                "+++ b/hack/scripts-dev/docker-dns/insecure/Procfile",
                "@@ -1,6 +1,6 @@",
                " # Use goreman to run `go get github.com/mattn/goreman`",
                "-etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls http://127.0.0.1:2379 --advertise-client-urls http://m1.etcd.local:2379 --listen-peer-urls http://127.0.0.1:2380 --initial-advertise-peer-urls=http://m1.etcd.local:2380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380",
                "+etcd1: ./etcd --name m1 --data-dir /tmp/m1.data --listen-client-urls http://127.0.0.1:2379 --advertise-client-urls http://m1.etcd.local:2379 --listen-peer-urls http://127.0.0.1:2380 --initial-advertise-peer-urls=http://m1.etcd.local:2380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380 --host-whitelist \"localhost,127.0.0.1,m1.etcd.local\"",
                "-etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls http://127.0.0.1:22379 --advertise-client-urls http://m2.etcd.local:22379 --listen-peer-urls http://127.0.0.1:22380 --initial-advertise-peer-urls=http://m2.etcd.local:22380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380",
                "+etcd2: ./etcd --name m2 --data-dir /tmp/m2.data --listen-client-urls http://127.0.0.1:22379 --advertise-client-urls http://m2.etcd.local:22379 --listen-peer-urls http://127.0.0.1:22380 --initial-advertise-peer-urls=http://m2.etcd.local:22380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380 --host-whitelist \"localhost,127.0.0.1,m1.etcd.local\"",
                "-etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls http://127.0.0.1:32379 --advertise-client-urls http://m3.etcd.local:32379 --listen-peer-urls http://127.0.0.1:32380 --initial-advertise-peer-urls=http://m3.etcd.local:32380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380",
                "\\ No newline at end of file",
                "+etcd3: ./etcd --name m3 --data-dir /tmp/m3.data --listen-client-urls http://127.0.0.1:32379 --advertise-client-urls http://m3.etcd.local:32379 --listen-peer-urls http://127.0.0.1:32380 --initial-advertise-peer-urls=http://m3.etcd.local:32380 --initial-cluster-token tkn --initial-cluster=m1=http://m1.etcd.local:2380,m2=http://m2.etcd.local:22380,m3=http://m3.etcd.local:32380 --host-whitelist \"localhost,127.0.0.1,m1.etcd.local\"",
                "\\ No newline at end of file",
                "diff --git a/hack/scripts-dev/docker-dns/insecure/run.sh b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "index 683329b7e..5f4ca0735 100755",
                "--- a/hack/scripts-dev/docker-dns/insecure/run.sh",
                "+++ b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "@@ -25,3 +25,2 @@ ETCDCTL_API=3 ./etcdctl \\",
                "-# TODO: add host header check to enforce same-origin-policy",
                " printf \"\\nWriting v2 key...\\n\""
            ],
            "changed_files": [
                "hack/scripts-dev/docker-dns/certs/run.sh",
                "hack/scripts-dev/docker-dns/insecure/Procfile",
                "hack/scripts-dev/docker-dns/insecure/run.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d808b4686c76ba0c7fe0a4bf454698937cd501aa",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519668205,
            "hunks": 1,
            "message": "raft: fix typo in raft_test.go Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/raft/raft_test.go b/raft/raft_test.go",
                "index c93935fb7..5ae49bc56 100644",
                "--- a/raft/raft_test.go",
                "+++ b/raft/raft_test.go",
                "@@ -724,3 +724,3 @@ func TestLearnerLogReplication(t *testing.T) {",
                " \tif match != n2.raftLog.committed {",
                "-\t\tt.Errorf(\"progresss 2 of leader 1 wants match %d, but got %d\", n2.raftLog.committed, match)",
                "+\t\tt.Errorf(\"progress 2 of leader 1 wants match %d, but got %d\", n2.raftLog.committed, match)",
                " \t}"
            ],
            "changed_files": [
                "raft/raft_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f6617feb8a51c3563cf35b871f32a4e4da1ce750",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519774074,
            "hunks": 2,
            "message": "embed: rename \"httpWrapper\" Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/embed/serve.go b/embed/serve.go",
                "index 479f680e3..3b8868cb5 100644",
                "--- a/embed/serve.go",
                "+++ b/embed/serve.go",
                "@@ -250,7 +250,11 @@ func (sctx *serveCtx) createMux(gwmux *gw.ServeMux, handler http.Handler) *http.",
                "-// wraps HTTP multiplexer to mute requests to /v3beta",
                "-// TODO: deprecate this in 3.5 release",
                "-func wrapMux(mux *http.ServeMux) http.Handler { return &v3Mutator{mux: mux} }",
                "+// wrapMux wraps HTTP multiplexer:",
                "+// - mutate gRPC gateway request paths",
                "+// - check hostname whitelist",
                "+// client HTTP requests goes here first",
                "+func wrapMux(mux *http.ServeMux) http.Handler {",
                "+\treturn &httpWrapper{mux: mux}",
                "+}",
                "-type v3Mutator struct {",
                "+type httpWrapper struct {",
                " \tmux *http.ServeMux",
                "@@ -258,3 +262,4 @@ type v3Mutator struct {",
                "-func (m *v3Mutator) ServeHTTP(rw http.ResponseWriter, req *http.Request) {",
                "+func (m *httpWrapper) ServeHTTP(rw http.ResponseWriter, req *http.Request) {",
                "+\t// redirect for backward compatibilities",
                " \tif req != nil && req.URL != nil && strings.HasPrefix(req.URL.Path, \"/v3beta/\") {"
            ],
            "changed_files": [
                "embed/serve.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e280f8c3da53fab5bd81499564d89366dfc3ec2f",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520332698,
            "hunks": 4,
            "message": "clientv3/integration: adjust timeouts for TestLeasingReconnectOwnerRevoke Now Restart takes longer, and leasing Get blocks on server restarts anyway, so fix CI failures in slow machines. Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/clientv3/integration/leasing_test.go b/clientv3/integration/leasing_test.go",
                "index b56478361..bfed1ea42 100644",
                "--- a/clientv3/integration/leasing_test.go",
                "+++ b/clientv3/integration/leasing_test.go",
                "@@ -1387,3 +1387,3 @@ func TestLeasingReconnectOwnerRevoke(t *testing.T) {",
                " \t\tdefer close(sdonec)",
                "-\t\tfor i := 0; i < 10 && cctx.Err() == nil; i++ {",
                "+\t\tfor i := 0; i < 3 && cctx.Err() == nil; i++ {",
                " \t\t\tclus.Members[0].Stop(t)",
                "@@ -1398,2 +1398,3 @@ func TestLeasingReconnectOwnerRevoke(t *testing.T) {",
                " \t\t}",
                "+\t\t// blocks until lkv1 connection comes back",
                " \t\tresp, err := lkv1.Get(cctx, \"k\")",
                "@@ -1410,3 +1411,3 @@ func TestLeasingReconnectOwnerRevoke(t *testing.T) {",
                " \t\t<-sdonec",
                "-\tcase <-time.After(10 * time.Second):",
                "+\tcase <-time.After(15 * time.Second):",
                " \t\tcancel()",
                "@@ -1414,3 +1415,3 @@ func TestLeasingReconnectOwnerRevoke(t *testing.T) {",
                " \t\t<-pdonec",
                "-\t\tt.Fatal(\"took to long to revoke and put\")",
                "+\t\tt.Fatal(\"took too long to revoke and put\")",
                " \t}"
            ],
            "changed_files": [
                "clientv3/integration/leasing_test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0179d81f221f58bfb004206fc5f7ad46b9e54db6",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519792102,
            "hunks": 4,
            "message": "etcdmain: add \"--host-whitelist\" flag Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/etcdmain/config.go b/etcdmain/config.go",
                "index 86fff2695..80ca6cb61 100644",
                "--- a/etcdmain/config.go",
                "+++ b/etcdmain/config.go",
                "@@ -87,6 +87,7 @@ type config struct {",
                " type configFlags struct {",
                "-\tflagSet      *flag.FlagSet",
                "-\tclusterState *flags.StringsFlag",
                "-\tfallback     *flags.StringsFlag",
                "-\tproxy        *flags.StringsFlag",
                "+\tflagSet       *flag.FlagSet",
                "+\thostWhitelist string",
                "+\tclusterState  *flags.StringsFlag",
                "+\tfallback      *flags.StringsFlag",
                "+\tproxy         *flags.StringsFlag",
                " }",
                "@@ -191,2 +192,3 @@ func newConfig() *config {",
                " \tfs.StringVar(&cfg.ec.PeerTLSInfo.AllowedCN, \"peer-cert-allowed-cn\", \"\", \"Allowed CN for inter peer authentication.\")",
                "+\tfs.StringVar(&cfg.cf.hostWhitelist, \"host-whitelist\", \"\", \"Comma-separated acceptable hostnames from HTTP client requests, if server is not secure (empty means allow all).\")",
                "@@ -277,2 +279,8 @@ func (cfg *config) configFromCmdLine() error {",
                "+\thosts := strings.Split(cfg.cf.hostWhitelist, \",\")",
                "+\tfor i := range hosts {",
                "+\t\thosts[i] = strings.TrimSpace(hosts[i])",
                "+\t}",
                "+\tcfg.ec.HostWhitelist = hosts",
                "+",
                " \tcfg.ec.ClusterState = cfg.cf.clusterState.String()",
                "diff --git a/etcdmain/help.go b/etcdmain/help.go",
                "index 6349a7e86..600a336f4 100644",
                "--- a/etcdmain/help.go",
                "+++ b/etcdmain/help.go",
                "@@ -160,2 +160,4 @@ security flags:",
                " \t\tpath to the peer certificate revocation list file.",
                "+\t--host-whitelist ''",
                "+\t\tacceptable hostnames from HTTP client requests, if server is not secure (empty means allow all)."
            ],
            "changed_files": [
                "etcdmain/config.go",
                "etcdmain/help.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0850ccbf45c62debf646240ff0156ce09ddcdefa",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519670193,
            "hunks": 48,
            "message": "*: revert \"internal/version\" change Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/client/client.go b/client/client.go",
                "index ec7327230..e68745056 100644",
                "--- a/client/client.go",
                "+++ b/client/client.go",
                "@@ -31,3 +31,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/client/client_test.go b/client/client_test.go",
                "index 20bcf2d86..592987113 100644",
                "--- a/client/client_test.go",
                "+++ b/client/client_test.go",
                "@@ -31,4 +31,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/e2e/ctl_v3_test.go b/e2e/ctl_v3_test.go",
                "index 64d105789..82bcfdac0 100644",
                "--- a/e2e/ctl_v3_test.go",
                "+++ b/e2e/ctl_v3_test.go",
                "@@ -23,5 +23,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/flags\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/e2e/etcd_release_upgrade_test.go b/e2e/etcd_release_upgrade_test.go",
                "index 434f2cbc4..6b1d42323 100644",
                "--- a/e2e/etcd_release_upgrade_test.go",
                "+++ b/e2e/etcd_release_upgrade_test.go",
                "@@ -23,5 +23,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/e2e/metrics_test.go b/e2e/metrics_test.go",
                "index 1984b448d..8c548c920 100644",
                "--- a/e2e/metrics_test.go",
                "+++ b/e2e/metrics_test.go",
                "@@ -20,3 +20,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/etcdctl/ctlv2/ctl.go b/etcdctl/ctlv2/ctl.go",
                "index 781574814..87e7840bb 100644",
                "--- a/etcdctl/ctlv2/ctl.go",
                "+++ b/etcdctl/ctlv2/ctl.go",
                "@@ -23,3 +23,3 @@ import (",
                " \t\"github.com/coreos/etcd/etcdctl/ctlv2/command\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdctl/ctlv3/command/version_command.go b/etcdctl/ctlv3/command/version_command.go",
                "index e5f31843d..89d82a39b 100644",
                "--- a/etcdctl/ctlv3/command/version_command.go",
                "+++ b/etcdctl/ctlv3/command/version_command.go",
                "@@ -19,3 +19,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdctl/ctlv3/help.go b/etcdctl/ctlv3/help.go",
                "index 3d25bfade..c91fd71de 100644",
                "--- a/etcdctl/ctlv3/help.go",
                "+++ b/etcdctl/ctlv3/help.go",
                "@@ -27,3 +27,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdmain/config.go b/etcdmain/config.go",
                "index 471c73480..86fff2695 100644",
                "--- a/etcdmain/config.go",
                "+++ b/etcdmain/config.go",
                "@@ -28,5 +28,5 @@ import (",
                " \t\"github.com/coreos/etcd/embed\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/flags\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdmain/etcd.go b/etcdmain/etcd.go",
                "index 409844923..87e9b25bb 100644",
                "--- a/etcdmain/etcd.go",
                "+++ b/etcdmain/etcd.go",
                "@@ -32,3 +32,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/api/etcdhttp\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/cors\"",
                "@@ -40,2 +39,3 @@ import (",
                " \t\"github.com/coreos/etcd/proxy/httpproxy\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdserver/api/capability.go b/etcdserver/api/capability.go",
                "index 9b73a3d42..c06c67038 100644",
                "--- a/etcdserver/api/capability.go",
                "+++ b/etcdserver/api/capability.go",
                "@@ -19,3 +19,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdserver/api/etcdhttp/base.go b/etcdserver/api/etcdhttp/base.go",
                "index e17029f41..6360ebd14 100644",
                "--- a/etcdserver/api/etcdhttp/base.go",
                "+++ b/etcdserver/api/etcdhttp/base.go",
                "@@ -27,4 +27,4 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/api/v2http/httptypes\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/logutil\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdserver/api/etcdhttp/version_test.go b/etcdserver/api/etcdhttp/version_test.go",
                "index 057dc7abe..fea165950 100644",
                "--- a/etcdserver/api/etcdhttp/version_test.go",
                "+++ b/etcdserver/api/etcdhttp/version_test.go",
                "@@ -22,3 +22,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/etcdserver/api/v3rpc/maintenance.go b/etcdserver/api/v3rpc/maintenance.go",
                "index 5e804ef1b..5d724c3f6 100644",
                "--- a/etcdserver/api/v3rpc/maintenance.go",
                "+++ b/etcdserver/api/v3rpc/maintenance.go",
                "@@ -27,5 +27,5 @@ import (",
                " \t\"github.com/coreos/etcd/internal/mvcc/backend\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                " \t\"github.com/coreos/etcd/raft\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/etcdserver/cluster_util.go b/etcdserver/cluster_util.go",
                "index bcb9f4260..07ad7287b 100644",
                "--- a/etcdserver/cluster_util.go",
                "+++ b/etcdserver/cluster_util.go",
                "@@ -25,4 +25,4 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/membership\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdserver/cluster_util_test.go b/etcdserver/cluster_util_test.go",
                "index 58c039616..62e7d91c6 100644",
                "--- a/etcdserver/cluster_util_test.go",
                "+++ b/etcdserver/cluster_util_test.go",
                "@@ -20,4 +20,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdserver/membership/cluster.go b/etcdserver/membership/cluster.go",
                "index 48e4d4764..84a8ffe79 100644",
                "--- a/etcdserver/membership/cluster.go",
                "+++ b/etcdserver/membership/cluster.go",
                "@@ -31,3 +31,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/store\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/netutil\"",
                "@@ -36,2 +35,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdserver/metrics.go b/etcdserver/metrics.go",
                "index c86d27a81..94d12e8df 100644",
                "--- a/etcdserver/metrics.go",
                "+++ b/etcdserver/metrics.go",
                "@@ -19,4 +19,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/runtime\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/etcdserver/server.go b/etcdserver/server.go",
                "index 25e929445..6a4bcf9ca 100644",
                "--- a/etcdserver/server.go",
                "+++ b/etcdserver/server.go",
                "@@ -46,3 +46,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/store\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/fileutil\"",
                "@@ -57,2 +56,3 @@ import (",
                " \t\"github.com/coreos/etcd/rafthttp\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " \t\"github.com/coreos/etcd/wal\"",
                "diff --git a/rafthttp/http.go b/rafthttp/http.go",
                "index 53bfbbdc2..c3c095f7c 100644",
                "--- a/rafthttp/http.go",
                "+++ b/rafthttp/http.go",
                "@@ -26,7 +26,6 @@ import (",
                " \t\"github.com/coreos/etcd/internal/raftsnap\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \tpioutil \"github.com/coreos/etcd/pkg/ioutil\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "-",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/rafthttp/http_test.go b/rafthttp/http_test.go",
                "index ebf1dcf31..44622c814 100644",
                "--- a/rafthttp/http_test.go",
                "+++ b/rafthttp/http_test.go",
                "@@ -29,3 +29,2 @@ import (",
                " \t\"github.com/coreos/etcd/internal/raftsnap\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/pbutil\"",
                "@@ -33,2 +32,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/rafthttp/pipeline_test.go b/rafthttp/pipeline_test.go",
                "index 5881d82fa..bdcdbc870 100644",
                "--- a/rafthttp/pipeline_test.go",
                "+++ b/rafthttp/pipeline_test.go",
                "@@ -27,3 +27,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "@@ -31,2 +30,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/version\"",
                " )",
                "diff --git a/rafthttp/stream.go b/rafthttp/stream.go",
                "index 0bccccc06..92ad5f7af 100644",
                "--- a/rafthttp/stream.go",
                "+++ b/rafthttp/stream.go",
                "@@ -30,3 +30,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/httputil\"",
                "@@ -35,2 +34,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/rafthttp/stream_test.go b/rafthttp/stream_test.go",
                "index e850ca528..29ceaaafd 100644",
                "--- a/rafthttp/stream_test.go",
                "+++ b/rafthttp/stream_test.go",
                "@@ -29,3 +29,2 @@ import (",
                " \t\"github.com/coreos/etcd/etcdserver/stats\"",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/testutil\"",
                "@@ -33,2 +32,3 @@ import (",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/rafthttp/util.go b/rafthttp/util.go",
                "index 6eeeef464..3e3226357 100644",
                "--- a/rafthttp/util.go",
                "+++ b/rafthttp/util.go",
                "@@ -25,5 +25,5 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/pkg/transport\"",
                " \t\"github.com/coreos/etcd/pkg/types\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/rafthttp/util_test.go b/rafthttp/util_test.go",
                "index 354e48fd3..cc05630c2 100644",
                "--- a/rafthttp/util_test.go",
                "+++ b/rafthttp/util_test.go",
                "@@ -24,4 +24,4 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                " \t\"github.com/coreos/etcd/raft/raftpb\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/tools/functional-tester/etcd-runner/command/help.go b/tools/functional-tester/etcd-runner/command/help.go",
                "index 276fd334a..3767b0e10 100644",
                "--- a/tools/functional-tester/etcd-runner/command/help.go",
                "+++ b/tools/functional-tester/etcd-runner/command/help.go",
                "@@ -27,3 +27,3 @@ import (",
                "-\t\"github.com/coreos/etcd/internal/version\"",
                "+\t\"github.com/coreos/etcd/version\"",
                "diff --git a/version/version.go b/version/version.go",
                "new file mode 100644",
                "index 000000000..c55a83579",
                "--- /dev/null",
                "+++ b/version/version.go",
                "@@ -0,0 +1,56 @@",
                "+// Copyright 2015 The etcd Authors",
                "+//",
                "+// Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+// you may not use this file except in compliance with the License.",
                "+// You may obtain a copy of the License at",
                "+//",
                "+//     http://www.apache.org/licenses/LICENSE-2.0",
                "+//",
                "+// Unless required by applicable law or agreed to in writing, software",
                "+// distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+// See the License for the specific language governing permissions and",
                "+// limitations under the License.",
                "+",
                "+// Package version implements etcd version parsing and contains latest version",
                "+// information.",
                "+package version",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+\t\"strings\"",
                "+",
                "+\t\"github.com/coreos/go-semver/semver\"",
                "+)",
                "+",
                "+var (",
                "+\t// MinClusterVersion is the min cluster version this etcd binary is compatible with.",
                "+\tMinClusterVersion = \"3.0.0\"",
                "+\tVersion           = \"3.3.0+git\"",
                "+\tAPIVersion        = \"unknown\"",
                "+",
                "+\t// Git SHA Value will be set during build",
                "+\tGitSHA = \"Not provided (use ./build instead of go build)\"",
                "+)",
                "+",
                "+func init() {",
                "+\tver, err := semver.NewVersion(Version)",
                "+\tif err == nil {",
                "+\t\tAPIVersion = fmt.Sprintf(\"%d.%d\", ver.Major, ver.Minor)",
                "+\t}",
                "+}",
                "+",
                "+type Versions struct {",
                "+\tServer  string `json:\"etcdserver\"`",
                "+\tCluster string `json:\"etcdcluster\"`",
                "+\t// TODO: raft state machine version",
                "+}",
                "+",
                "+// Cluster only keeps the major.minor.",
                "+func Cluster(v string) string {",
                "+\tvs := strings.Split(v, \".\")",
                "+\tif len(vs) <= 2 {",
                "+\t\treturn v",
                "+\t}",
                "+\treturn fmt.Sprintf(\"%s.%s\", vs[0], vs[1])",
                "+}"
            ],
            "changed_files": [
                "client/client.go",
                "client/client_test.go",
                "e2e/ctl_v3_test.go",
                "e2e/etcd_release_upgrade_test.go",
                "e2e/metrics_test.go",
                "etcdctl/ctlv2/ctl.go",
                "etcdctl/ctlv3/command/version_command.go",
                "etcdctl/ctlv3/help.go",
                "etcdmain/config.go",
                "etcdmain/etcd.go",
                "etcdserver/api/capability.go",
                "etcdserver/api/etcdhttp/base.go",
                "etcdserver/api/etcdhttp/version_test.go",
                "etcdserver/api/v3rpc/maintenance.go",
                "etcdserver/cluster_util.go",
                "etcdserver/cluster_util_test.go",
                "etcdserver/membership/cluster.go",
                "etcdserver/metrics.go",
                "etcdserver/server.go",
                "rafthttp/http.go",
                "rafthttp/http_test.go",
                "rafthttp/pipeline_test.go",
                "rafthttp/stream.go",
                "rafthttp/stream_test.go",
                "rafthttp/util.go",
                "rafthttp/util_test.go",
                "tools/functional-tester/etcd-runner/command/help.go",
                "version/version.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "637487625d6feb2c1f2d4e4d58c392401e9d2d29",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1519888542,
            "hunks": 1,
            "message": "hack/scripts-dev: reproduce election API panic Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/hack/scripts-dev/docker-dns/insecure/run.sh b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "index 5f4ca0735..de7ff68a8 100755",
                "--- a/hack/scripts-dev/docker-dns/insecure/run.sh",
                "+++ b/hack/scripts-dev/docker-dns/insecure/run.sh",
                "@@ -59,2 +59,31 @@ curl \\",
                "+name1=$(base64 <<< \"/election-prefix\")",
                "+val1=$(base64 <<< \"v1\")",
                "+data1=\"{\\\"name\\\":\\\"${name1}\\\", \\\"value\\\":\\\"${val1}\\\"}\"",
                "+",
                "+printf \"\\n\\nCampaign: ${data1}\\n\"",
                "+result1=$(curl -L http://m1.etcd.local:2379/v3/election/campaign -X POST -d \"${data1}\")",
                "+echo ${result1}",
                "+",
                "+# should not panic servers",
                "+val2=$(base64 <<< \"v2\")",
                "+data2=\"{\\\"value\\\": \\\"${val2}\\\"}\"",
                "+printf \"\\n\\nProclaim (wrong-format): ${data2}\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/election/proclaim \\",
                "+  -X POST \\",
                "+  -d \"${data2}\"",
                "+",
                "+printf \"\\n\\nProclaim (wrong-format)...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/election/proclaim \\",
                "+  -X POST \\",
                "+  -d '}'",
                "+",
                "+printf \"\\n\\nProclaim (wrong-format)...\\n\"",
                "+curl \\",
                "+  -L http://m1.etcd.local:2379/v3/election/proclaim \\",
                "+  -X POST \\",
                "+  -d '{\"value\": \"Zm9v\"}'",
                "+",
                " printf \"\\n\\nDone!!!\\n\\n\""
            ],
            "changed_files": [
                "hack/scripts-dev/docker-dns/insecure/run.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "api/v3.5.0",
                "api/v3.5.0-alpha.0",
                "api/v3.5.0-beta.2",
                "api/v3.5.0-beta.3",
                "api/v3.5.0-beta.4",
                "api/v3.5.0-rc.0",
                "api/v3.5.0-rc.1",
                "api/v3.5.1",
                "api/v3.5.10",
                "api/v3.5.11",
                "api/v3.5.12",
                "api/v3.5.13",
                "api/v3.5.14",
                "api/v3.5.2",
                "api/v3.5.3",
                "api/v3.5.4",
                "api/v3.5.5",
                "api/v3.5.6",
                "api/v3.5.7",
                "api/v3.5.8",
                "api/v3.5.9",
                "api/v3.6.0-alpha.0",
                "client/pkg/v3.5.0",
                "client/pkg/v3.5.0-beta.2",
                "client/pkg/v3.5.0-beta.3",
                "client/pkg/v3.5.0-beta.4",
                "client/pkg/v3.5.0-rc.0",
                "client/pkg/v3.5.0-rc.1",
                "client/pkg/v3.5.1",
                "client/pkg/v3.5.10",
                "client/pkg/v3.5.11",
                "client/pkg/v3.5.12",
                "client/pkg/v3.5.13",
                "client/pkg/v3.5.14",
                "client/pkg/v3.5.2",
                "client/pkg/v3.5.3",
                "client/pkg/v3.5.4",
                "client/pkg/v3.5.5",
                "client/pkg/v3.5.6",
                "client/pkg/v3.5.7",
                "client/pkg/v3.5.8",
                "client/pkg/v3.5.9",
                "client/pkg/v3.6.0-alpha.0",
                "client/v2.305.0",
                "client/v2.305.0-alpha.0",
                "client/v2.305.0-beta.2",
                "client/v2.305.0-beta.3",
                "client/v2.305.0-beta.4",
                "client/v2.305.0-rc.0",
                "client/v2.305.0-rc.1",
                "client/v2.305.1",
                "client/v2.305.10",
                "client/v2.305.11",
                "client/v2.305.12",
                "client/v2.305.13",
                "client/v2.305.14",
                "client/v2.305.2",
                "client/v2.305.3",
                "client/v2.305.4",
                "client/v2.305.5",
                "client/v2.305.6",
                "client/v2.305.7",
                "client/v2.305.8",
                "client/v2.305.9",
                "client/v2.306.0-alpha.0",
                "client/v3.5.0",
                "client/v3.5.0-alpha.0",
                "client/v3.5.0-beta.2",
                "client/v3.5.0-beta.3",
                "client/v3.5.0-beta.4",
                "client/v3.5.0-rc.0",
                "client/v3.5.0-rc.1",
                "client/v3.5.1",
                "client/v3.5.10",
                "client/v3.5.11",
                "client/v3.5.12",
                "client/v3.5.13",
                "client/v3.5.14",
                "client/v3.5.2",
                "client/v3.5.3",
                "client/v3.5.4",
                "client/v3.5.5",
                "client/v3.5.6",
                "client/v3.5.7",
                "client/v3.5.8",
                "client/v3.5.9",
                "client/v3.6.0-alpha.0",
                "etcdctl/v3.5.0",
                "etcdctl/v3.5.0-alpha.0",
                "etcdctl/v3.5.0-beta.2",
                "etcdctl/v3.5.0-beta.3",
                "etcdctl/v3.5.0-beta.4",
                "etcdctl/v3.5.0-rc.0",
                "etcdctl/v3.5.0-rc.1",
                "etcdctl/v3.5.1",
                "etcdctl/v3.5.10",
                "etcdctl/v3.5.11",
                "etcdctl/v3.5.12",
                "etcdctl/v3.5.13",
                "etcdctl/v3.5.14",
                "etcdctl/v3.5.2",
                "etcdctl/v3.5.3",
                "etcdctl/v3.5.4",
                "etcdctl/v3.5.5",
                "etcdctl/v3.5.6",
                "etcdctl/v3.5.7",
                "etcdctl/v3.5.8",
                "etcdctl/v3.5.9",
                "etcdctl/v3.6.0-alpha.0",
                "etcdutl/v3.5.0",
                "etcdutl/v3.5.0-beta.2",
                "etcdutl/v3.5.0-beta.3",
                "etcdutl/v3.5.0-beta.4",
                "etcdutl/v3.5.0-rc.0",
                "etcdutl/v3.5.0-rc.1",
                "etcdutl/v3.5.1",
                "etcdutl/v3.5.10",
                "etcdutl/v3.5.11",
                "etcdutl/v3.5.12",
                "etcdutl/v3.5.13",
                "etcdutl/v3.5.14",
                "etcdutl/v3.5.2",
                "etcdutl/v3.5.3",
                "etcdutl/v3.5.4",
                "etcdutl/v3.5.5",
                "etcdutl/v3.5.6",
                "etcdutl/v3.5.7",
                "etcdutl/v3.5.8",
                "etcdutl/v3.5.9",
                "etcdutl/v3.6.0-alpha.0",
                "pkg/v3.5.0",
                "pkg/v3.5.0-alpha.0",
                "pkg/v3.5.0-beta.2",
                "pkg/v3.5.0-beta.3",
                "pkg/v3.5.0-beta.4",
                "pkg/v3.5.0-rc.0",
                "pkg/v3.5.0-rc.1",
                "pkg/v3.5.1",
                "pkg/v3.5.10",
                "pkg/v3.5.11",
                "pkg/v3.5.12",
                "pkg/v3.5.13",
                "pkg/v3.5.14",
                "pkg/v3.5.2",
                "pkg/v3.5.3",
                "pkg/v3.5.4",
                "pkg/v3.5.5",
                "pkg/v3.5.6",
                "pkg/v3.5.7",
                "pkg/v3.5.8",
                "pkg/v3.5.9",
                "pkg/v3.6.0-alpha.0",
                "raft/v3.5.0",
                "raft/v3.5.0-alpha.0",
                "raft/v3.5.0-beta.2",
                "raft/v3.5.0-beta.3",
                "raft/v3.5.0-beta.4",
                "raft/v3.5.0-rc.0",
                "raft/v3.5.0-rc.1",
                "raft/v3.5.1",
                "raft/v3.5.10",
                "raft/v3.5.11",
                "raft/v3.5.12",
                "raft/v3.5.13",
                "raft/v3.5.14",
                "raft/v3.5.2",
                "raft/v3.5.3",
                "raft/v3.5.4",
                "raft/v3.5.5",
                "raft/v3.5.6",
                "raft/v3.5.7",
                "raft/v3.5.8",
                "raft/v3.5.9",
                "raft/v3.6.0-alpha.0",
                "server/v3.5.0",
                "server/v3.5.0-alpha.0",
                "server/v3.5.0-beta.2",
                "server/v3.5.0-beta.3",
                "server/v3.5.0-beta.4",
                "server/v3.5.0-rc.0",
                "server/v3.5.0-rc.1",
                "server/v3.5.1",
                "server/v3.5.10",
                "server/v3.5.11",
                "server/v3.5.12",
                "server/v3.5.13",
                "server/v3.5.14",
                "server/v3.5.2",
                "server/v3.5.3",
                "server/v3.5.4",
                "server/v3.5.5",
                "server/v3.5.6",
                "server/v3.5.7",
                "server/v3.5.8",
                "server/v3.5.9",
                "server/v3.6.0-alpha.0",
                "tests/v3.5.0",
                "tests/v3.5.0-alpha.0",
                "tests/v3.5.0-beta.2",
                "tests/v3.5.0-beta.3",
                "tests/v3.5.0-beta.4",
                "tests/v3.5.0-rc.0",
                "tests/v3.5.0-rc.1",
                "tests/v3.5.1",
                "tests/v3.5.10",
                "tests/v3.5.11",
                "tests/v3.5.12",
                "tests/v3.5.13",
                "tests/v3.5.14",
                "tests/v3.5.2",
                "tests/v3.5.3",
                "tests/v3.5.4",
                "tests/v3.5.5",
                "tests/v3.5.6",
                "tests/v3.5.7",
                "tests/v3.5.8",
                "tests/v3.5.9",
                "tests/v3.6.0-alpha.0",
                "v3.3.9_plus_git",
                "v3.4.0",
                "v3.4.0-rc.0",
                "v3.4.0-rc.1",
                "v3.4.0-rc.2",
                "v3.4.0-rc.3",
                "v3.4.0-rc.4",
                "v3.4.1",
                "v3.4.10",
                "v3.4.11",
                "v3.4.12",
                "v3.4.13",
                "v3.4.14",
                "v3.4.15",
                "v3.4.16",
                "v3.4.17",
                "v3.4.18",
                "v3.4.19",
                "v3.4.2",
                "v3.4.20",
                "v3.4.21",
                "v3.4.22",
                "v3.4.23",
                "v3.4.24",
                "v3.4.25",
                "v3.4.26",
                "v3.4.27",
                "v3.4.28",
                "v3.4.29",
                "v3.4.3",
                "v3.4.30",
                "v3.4.31",
                "v3.4.32",
                "v3.4.33",
                "v3.4.4",
                "v3.4.5",
                "v3.4.6",
                "v3.4.7",
                "v3.4.8",
                "v3.4.9",
                "v3.5.0",
                "v3.5.0-alpha.0",
                "v3.5.0-beta.0",
                "v3.5.0-beta.1",
                "v3.5.0-beta.2",
                "v3.5.0-beta.3",
                "v3.5.0-beta.4",
                "v3.5.0-rc.0",
                "v3.5.0-rc.1",
                "v3.5.1",
                "v3.5.10",
                "v3.5.11",
                "v3.5.12",
                "v3.5.13",
                "v3.5.14",
                "v3.5.2",
                "v3.5.3",
                "v3.5.4",
                "v3.5.5",
                "v3.5.6",
                "v3.5.7",
                "v3.5.8",
                "v3.5.9",
                "v3.6.0-alpha.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "df0b652d6a5ba2e74e44aecb414b809af405e38d",
            "repository": "https://github.com/coreos/etcd",
            "timestamp": 1520461444,
            "hunks": 13,
            "message": "travis: use docker, sync with master Signed-off-by: Gyuho Lee <gyuhox@gmail.com>",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 00421c253..2c4ff0e05 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -1,8 +1,11 @@",
                "-dist: trusty",
                " language: go",
                " go_import_path: github.com/coreos/etcd",
                "-sudo: false",
                "+",
                "+sudo: required",
                "+",
                "+services: docker",
                " go:",
                "-  - 1.8.5",
                "+- \"1.8.7\"",
                "+- tip",
                "@@ -14,7 +17,10 @@ env:",
                "   matrix:",
                "-   - TARGET=amd64",
                "-   - TARGET=arm64",
                "-   - TARGET=arm",
                "-   - TARGET=386",
                "-   - TARGET=ppc64le",
                "+  - TARGET=amd64",
                "+  - TARGET=amd64-go-tip",
                "+  - TARGET=darwin-amd64",
                "+  - TARGET=windows-amd64",
                "+  - TARGET=arm64",
                "+  - TARGET=arm",
                "+  - TARGET=386",
                "+  - TARGET=ppc64le",
                "@@ -23,4 +29,13 @@ matrix:",
                "   allow_failures:",
                "-    - go: tip",
                "+  - go: tip",
                "+    env: TARGET=amd64-go-tip",
                "   exclude:",
                "+  - go: \"1.8.7\"",
                "+    env: TARGET=amd64-go-tip",
                "+  - go: tip",
                "+    env: TARGET=amd64",
                "+  - go: tip",
                "+    env: TARGET=darwin-amd64",
                "+  - go: tip",
                "+    env: TARGET=windows-amd64",
                "   - go: tip",
                "@@ -34,7 +49,10 @@ matrix:",
                "-# disable godep restore override",
                "+before_install:",
                "+- if [[ $TRAVIS_GO_VERSION == 1.* ]]; then docker pull gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION}; fi",
                "+",
                " install:",
                "- - pushd cmd/etcd && go get -t -v ./... && popd",
                "+- pushd cmd/etcd && go get -t -v ./... && popd",
                " script:",
                "+ - echo \"TRAVIS_GO_VERSION=${TRAVIS_GO_VERSION}\"",
                "  - >",
                "@@ -42,6 +60,23 @@ script:",
                "       amd64)",
                "+        docker run --rm \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "+          /bin/bash -c \"GOARCH=amd64 ./test\"",
                "+        ;;",
                "+      amd64-go-tip)",
                "         GOARCH=amd64 ./test",
                "         ;;",
                "+      darwin-amd64)",
                "+        docker run --rm \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "+          /bin/bash -c \"GO_BUILD_FLAGS='-a -v' GOOS=darwin GOARCH=amd64 ./build\"",
                "+        ;;",
                "+      windows-amd64)",
                "+        docker run --rm \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "+          /bin/bash -c \"GO_BUILD_FLAGS='-a -v' GOOS=windows GOARCH=amd64 ./build\"",
                "+        ;;",
                "       386)",
                "-        GOARCH=386 PASSES=\"build unit\" ./test",
                "+        docker run --rm \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "+          /bin/bash -c \"GOARCH=386 PASSES='build unit' ./test\"",
                "         ;;",
                "@@ -49,3 +84,5 @@ script:",
                "         # test building out of gopath",
                "-        GO_BUILD_FLAGS=\"-a -v\" GOPATH=\"\" GOARCH=\"${TARGET}\" ./build",
                "+        docker run --rm \\",
                "+          --volume=`pwd`:/go/src/github.com/coreos/etcd gcr.io/etcd-development/etcd-test:go${TRAVIS_GO_VERSION} \\",
                "+          /bin/bash -c \"GO_BUILD_FLAGS='-a -v' GOARCH='${TARGET}' ./build\"",
                "         ;;"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v3.1.12",
                "v3.1.13",
                "v3.1.14",
                "v3.1.15",
                "v3.1.16",
                "v3.1.17",
                "v3.1.18",
                "v3.1.19",
                "v3.1.20"
            ],
            "matched_rules": []
        }
    ]
}
