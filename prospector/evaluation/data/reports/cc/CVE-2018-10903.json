{
    "advisory_record": {
        "cve_id": "CVE-2018-10903",
        "description": "A flaw was found in python-cryptography versions between >=1.9.0 and <2.3. The finalize_with_tag API did not enforce a minimum tag length. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage.",
        "reserved_timestamp": 1525824000,
        "published_timestamp": 1532962800,
        "updated_timestamp": 1542193022,
        "repository_url": null,
        "references": {
            "": 118,
            "commit::688e0f673bfbf43fa898994326c6877f00ab19ef": 9,
            "https://access.redhat.com/support/": 5,
            "https://access.redhat.com/errata/RHSA-2018:3600": 4,
            "https://access.redhat.com/downloads/": 4,
            "https://access.redhat.com/errata/": 3,
            "https://access.redhat.com/labs/": 3,
            "https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment": 3,
            "commit::53d81370a78c157a5d82d0756b551482dd346c50": 3,
            "https://usn.ubuntu.com/3720-1/": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10903": 2,
            "https://github.com//pyca/cryptography/pull/4342": 2,
            "https://access.redhat.com/management/": 2,
            "https://access.redhat.com/": 2,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 2,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 2,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 2,
            "https://access.redhat.com/products/": 2,
            "https://access.redhat.com/documentation": 2,
            "https://access.redhat.com/product-life-cycles/": 2,
            "https://access.redhat.com/security": 2,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 2,
            "https://access.redhat.com/security/security-updates/#/cve": 2,
            "https://access.redhat.com/support/contact/": 2,
            "https://status.redhat.com": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://access.redhat.com/downloads/content/package-browser": 1,
            "https://catalog.redhat.com/software/containers/explore/": 1,
            "https://access.redhat.com/articles/1202803": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 1,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 1,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 1,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 1,
            "https://access.redhat.com/documentation/": 1,
            "https://access.redhat.com/security/": 1,
            "https://access.redhat.com/security/vulnerabilities": 1,
            "https://access.redhat.com/security/data": 1,
            "https://access.redhat.com/security/security-updates/#/security-labs": 1,
            "https://access.redhat.com/security/updates/backporting/": 1,
            "https://access.redhat.com/support/cases/": 1,
            "https://access.redhat.com/support/cases/#/troubleshoot": 1,
            "https://access.redhat.com/community": 1,
            "https://access.redhat.com/community/": 1,
            "https://access.redhat.com/discussions/": 1,
            "https://access.redhat.com/announcements/": 1,
            "https://access.redhat.com/accelerators/": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 1,
            "https://cloud.redhat.com/insights": 1,
            "https://access.redhat.com/changeLanguage?language=en": 1,
            "https://access.redhat.com/changeLanguage?language=fr": 1,
            "https://access.redhat.com/changeLanguage?language=ko": 1,
            "https://access.redhat.com/changeLanguage?language=ja": 1,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 1,
            "https://access.redhat.com/products/red-hat-satellite/": 1,
            "https://access.redhat.com/products/red-hat-subscription-management/": 1,
            "https://access.redhat.com/products/red-hat-insights/": 1,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 1,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-quay/": 1,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 1,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 1,
            "https://access.redhat.com/products/red-hat-storage/": 1,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 1,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 1,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 1,
            "https://access.redhat.com/products/red-hat-runtimes/": 1,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 1,
            "https://access.redhat.com/products/red-hat-data-grid/": 1,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 1,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 1,
            "https://access.redhat.com/products/spring-boot/": 1,
            "https://access.redhat.com/products/nodejs/": 1,
            "https://access.redhat.com/products/quarkus/": 1,
            "https://access.redhat.com/products/red-hat-application-foundations/": 1,
            "https://access.redhat.com/products/red-hat-fuse/": 1,
            "https://access.redhat.com/products/red-hat-amq/": 1,
            "https://access.redhat.com/products/red-hat-3scale/": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:3600": 1,
            "https://access.redhat.com/articles/11258": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1602931": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10903.html": 1,
            "https://access.redhat.com/security/updates/classification/#moderate": 1,
            "https://access.redhat.com/security/team/contact/": 1,
            "https://redhat.com/en": 1,
            "https://twitter.com/RedHat": 1,
            "https://access.redhat.com/management": 1,
            "https://access.redhat.com/support": 1,
            "https://access.redhat.com/support/customer-service": 1,
            "https://access.redhat.com/articles/33844": 1,
            "https://access.redhat.com/help/login_assistance": 1,
            "https://www.redhat.com/en/trust": 1,
            "https://www.redhat.com/en/about/browser-support": 1,
            "https://www.redhat.com/en/about/digital-accessibility": 1,
            "https://access.redhat.com/recognition/": 1,
            "https://access.redhat.com/help/colophon/": 1,
            "https://www.redhat.com/": 1,
            "http://developers.redhat.com/": 1,
            "https://connect.redhat.com/": 1,
            "https://cloud.redhat.com/": 1,
            "https://access.redhat.com/subscription-value": 1,
            "https://www.redhat.com/about/": 1,
            "http://jobs.redhat.com": 1,
            "https://redhat.com/en/about/company": 1,
            "https://redhat.com/en/jobs": 1,
            "https://redhat.com/en/events": 1,
            "https://redhat.com/en/about/office-locations": 1,
            "https://redhat.com/en/contact": 1,
            "https://redhat.com/en/blog": 1,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 1,
            "https://coolstuff.redhat.com/": 1,
            "https://www.redhat.com/en/summit": 1,
            "https://redhat.com/en/about/privacy-policy": 1,
            "https://redhat.com/en/about/terms-use": 1,
            "https://redhat.com/en/about/all-policies-guidelines": 1,
            "https://redhat.com/en/about/digital-accessibility": 1,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.co/hiddenchars": 1,
            "commit::22098f90d56021374616bb0e2fe0414bfd9fa606": 1,
            "commit::d4378e42937b56f473ddade2667f919ce32208cb": 1,
            "https://github.com/pyca/cryptography/pull/4342#event-1737748479": 1,
            "https://github.com/pyca/cryptography/pull/4342": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "MAC",
            "python-cryptography"
        ],
        "versions": {
            "status": "affected",
            "version": "2.3"
        },
        "files": [
            "API",
            "MAC",
            "finalize_with_tag",
            "GCM",
            "python-cryptography"
        ],
        "keywords": [
            "enforce",
            "cause",
            "input",
            "attacker",
            "find",
            "length",
            "have",
            "forgery",
            "version",
            "leakage",
            "byte",
            "payload",
            "flaw",
            "chance",
            "cryptography",
            "check",
            "craft",
            "pass",
            "validate",
            "user"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "d4378e42937b56f473ddade2667f919ce32208cb",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531835343,
            "hunks": 3,
            "message": "disallow implicit tag truncation with finalize_with_tag (#4342)",
            "diff": [
                "diff --git a/src/cryptography/hazmat/backends/openssl/ciphers.py b/src/cryptography/hazmat/backends/openssl/ciphers.py",
                "index 462ffea25..e0ee06ee2 100644",
                "--- a/src/cryptography/hazmat/backends/openssl/ciphers.py",
                "+++ b/src/cryptography/hazmat/backends/openssl/ciphers.py",
                "@@ -201,2 +201,7 @@ class _CipherContext(object):",
                "             )",
                "+        if len(tag) < self._mode._min_tag_length:",
                "+            raise ValueError(",
                "+                \"Authentication tag must be {0} bytes or longer.\".format(",
                "+                    self._mode._min_tag_length)",
                "+            )",
                "         res = self._backend._lib.EVP_CIPHER_CTX_ctrl(",
                "diff --git a/src/cryptography/hazmat/primitives/ciphers/modes.py b/src/cryptography/hazmat/primitives/ciphers/modes.py",
                "index 598dfaa4a..543015fef 100644",
                "--- a/src/cryptography/hazmat/primitives/ciphers/modes.py",
                "+++ b/src/cryptography/hazmat/primitives/ciphers/modes.py",
                "@@ -222,2 +222,3 @@ class GCM(object):",
                "         self._tag = tag",
                "+        self._min_tag_length = min_tag_length",
                "diff --git a/tests/hazmat/primitives/test_aes.py b/tests/hazmat/primitives/test_aes.py",
                "index d6f83ebc2..4ceccf155 100644",
                "--- a/tests/hazmat/primitives/test_aes.py",
                "+++ b/tests/hazmat/primitives/test_aes.py",
                "@@ -441 +441,17 @@ class TestAESModeGCM(object):",
                "             decryptor.finalize_with_tag(tag)",
                "+",
                "+    @pytest.mark.supported(",
                "+        only_if=lambda backend: (",
                "+            not backend._lib.CRYPTOGRAPHY_OPENSSL_LESS_THAN_102 or",
                "+            backend._lib.CRYPTOGRAPHY_IS_LIBRESSL",
                "+        ),",
                "+        skip_message=\"Not supported on OpenSSL 1.0.1\",",
                "+    )",
                "+    def test_gcm_tag_decrypt_finalize_tag_length(self, backend):",
                "+        decryptor = base.Cipher(",
                "+            algorithms.AES(b\"0\" * 16),",
                "+            modes.GCM(b\"0\" * 12),",
                "+            backend=backend",
                "+        ).decryptor()",
                "+        with pytest.raises(ValueError):",
                "+            decryptor.finalize_with_tag(b\"tagtooshort\")"
            ],
            "changed_files": [
                "src/cryptography/hazmat/backends/openssl/ciphers.py",
                "src/cryptography/hazmat/primitives/ciphers/modes.py",
                "tests/hazmat/primitives/test_aes.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4342": "OpenWrt 18.06 - python-cryptography fails due to Python2.7.1.7 openwrt/packages#10329"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 4342",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: finalize_with_tag",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: finalize_with_tag, GCM",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4342",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "12a1cacb6ae6de51a003dcc884e769854a1345a8",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531839372,
            "hunks": 2,
            "message": "raise ValueError on zero length GCM IV (#4348)",
            "diff": [
                "diff --git a/src/cryptography/hazmat/primitives/ciphers/modes.py b/src/cryptography/hazmat/primitives/ciphers/modes.py",
                "index 543015fef..e82c1a8d6 100644",
                "--- a/src/cryptography/hazmat/primitives/ciphers/modes.py",
                "+++ b/src/cryptography/hazmat/primitives/ciphers/modes.py",
                "@@ -210,2 +210,4 @@ class GCM(object):",
                "             raise TypeError(\"initialization_vector must be bytes\")",
                "+        if len(initialization_vector) == 0:",
                "+            raise ValueError(\"initialization_vector must be at least 1 byte\")",
                "         self._initialization_vector = initialization_vector",
                "diff --git a/tests/hazmat/primitives/test_block.py b/tests/hazmat/primitives/test_block.py",
                "index c053feafb..37158f153 100644",
                "--- a/tests/hazmat/primitives/test_block.py",
                "+++ b/tests/hazmat/primitives/test_block.py",
                "@@ -193,2 +193,6 @@ class TestModeValidation(object):",
                "+    def test_gcm(self):",
                "+        with pytest.raises(ValueError):",
                "+            modes.GCM(b\"\")",
                "+"
            ],
            "changed_files": [
                "src/cryptography/hazmat/primitives/ciphers/modes.py",
                "tests/hazmat/primitives/test_block.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4348": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: GCM",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: GCM",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: length",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4348",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "db62ec9967d95e666eb6898766944d9e50532b2d",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531843570,
            "hunks": 2,
            "message": "also check iv length for GCM nonce in AEAD (#4350) * also check iv length for GCM nonce in AEAD * ugh",
            "diff": [
                "diff --git a/src/cryptography/hazmat/primitives/ciphers/aead.py b/src/cryptography/hazmat/primitives/ciphers/aead.py",
                "index 9794d7682..e5197653f 100644",
                "--- a/src/cryptography/hazmat/primitives/ciphers/aead.py",
                "+++ b/src/cryptography/hazmat/primitives/ciphers/aead.py",
                "@@ -186 +186,3 @@ class AESGCM(object):",
                "         utils._check_bytes(\"associated_data\", associated_data)",
                "+        if len(nonce) == 0:",
                "+            raise ValueError(\"Nonce must be at least 1 byte\")",
                "diff --git a/tests/hazmat/primitives/test_aead.py b/tests/hazmat/primitives/test_aead.py",
                "index a0cc79e14..5a5185583 100644",
                "--- a/tests/hazmat/primitives/test_aead.py",
                "+++ b/tests/hazmat/primitives/test_aead.py",
                "@@ -385,2 +385,8 @@ class TestAESGCM(object):",
                "+    def test_invalid_nonce_length(self, backend):",
                "+        key = AESGCM.generate_key(128)",
                "+        aesgcm = AESGCM(key)",
                "+        with pytest.raises(ValueError):",
                "+            aesgcm.encrypt(b\"\", b\"hi\", None)",
                "+",
                "     def test_bad_key(self, backend):"
            ],
            "changed_files": [
                "src/cryptography/hazmat/primitives/ciphers/aead.py",
                "tests/hazmat/primitives/test_aead.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4350": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: GCM",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: GCM",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: check, length",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4350",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bb23c6c7cbb3f62f1b1b2480f9dc07c6beba3398",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531626316,
            "hunks": 10,
            "message": "document one shot AEAD length restrictions (#4322) * document one shot AEAD length restrictions * write a test that won't consume infinity ram continue to raise OverflowError since that's what cffi did. * this applies to associated_data too * remove unneeded arg * review feedback on docs",
            "diff": [
                "diff --git a/src/cryptography/hazmat/primitives/ciphers/aead.py b/src/cryptography/hazmat/primitives/ciphers/aead.py",
                "index 415a45a95..9794d7682 100644",
                "--- a/src/cryptography/hazmat/primitives/ciphers/aead.py",
                "+++ b/src/cryptography/hazmat/primitives/ciphers/aead.py",
                "@@ -14,2 +14,4 @@ from cryptography.hazmat.backends.openssl.backend import backend",
                " class ChaCha20Poly1305(object):",
                "+    _MAX_SIZE = 2 ** 32",
                "+",
                "     def __init__(self, key):",
                "@@ -35,2 +37,8 @@ class ChaCha20Poly1305(object):",
                "+        if len(data) > self._MAX_SIZE or len(associated_data) > self._MAX_SIZE:",
                "+            # This is OverflowError to match what cffi would raise",
                "+            raise OverflowError(",
                "+                \"Data or associated data too long. Max 2**32 bytes\"",
                "+            )",
                "+",
                "         self._check_params(nonce, data, associated_data)",
                "@@ -58,2 +66,4 @@ class ChaCha20Poly1305(object):",
                " class AESCCM(object):",
                "+    _MAX_SIZE = 2 ** 32",
                "+",
                "     def __init__(self, key, tag_length=16):",
                "@@ -92,2 +102,8 @@ class AESCCM(object):",
                "+        if len(data) > self._MAX_SIZE or len(associated_data) > self._MAX_SIZE:",
                "+            # This is OverflowError to match what cffi would raise",
                "+            raise OverflowError(",
                "+                \"Data or associated data too long. Max 2**32 bytes\"",
                "+            )",
                "+",
                "         self._check_params(nonce, data, associated_data)",
                "@@ -123,2 +139,4 @@ class AESCCM(object):",
                " class AESGCM(object):",
                "+    _MAX_SIZE = 2 ** 32",
                "+",
                "     def __init__(self, key):",
                "@@ -144,2 +162,8 @@ class AESGCM(object):",
                "+        if len(data) > self._MAX_SIZE or len(associated_data) > self._MAX_SIZE:",
                "+            # This is OverflowError to match what cffi would raise",
                "+            raise OverflowError(",
                "+                \"Data or associated data too long. Max 2**32 bytes\"",
                "+            )",
                "+",
                "         self._check_params(nonce, data, associated_data)",
                "diff --git a/tests/hazmat/primitives/test_aead.py b/tests/hazmat/primitives/test_aead.py",
                "index dc2f357b1..a0cc79e14 100644",
                "--- a/tests/hazmat/primitives/test_aead.py",
                "+++ b/tests/hazmat/primitives/test_aead.py",
                "@@ -24,2 +24,7 @@ from ...utils import (",
                "+class FakeData(object):",
                "+    def __len__(self):",
                "+        return 2 ** 32 + 1",
                "+",
                "+",
                " def _aead_supported(cls):",
                "@@ -48,2 +53,13 @@ def test_chacha20poly1305_unsupported_on_older_openssl(backend):",
                " class TestChaCha20Poly1305(object):",
                "+    def test_data_too_large(self):",
                "+        key = ChaCha20Poly1305.generate_key()",
                "+        chacha = ChaCha20Poly1305(key)",
                "+        nonce = b\"0\" * 12",
                "+",
                "+        with pytest.raises(OverflowError):",
                "+            chacha.encrypt(nonce, FakeData(), b\"\")",
                "+",
                "+        with pytest.raises(OverflowError):",
                "+            chacha.encrypt(nonce, b\"\", FakeData())",
                "+",
                "     def test_generate_key(self):",
                "@@ -170,2 +186,13 @@ def test_aesccm_unsupported_on_older_openssl(backend):",
                " class TestAESCCM(object):",
                "+    def test_data_too_large(self):",
                "+        key = AESCCM.generate_key(128)",
                "+        aesccm = AESCCM(key)",
                "+        nonce = b\"0\" * 12",
                "+",
                "+        with pytest.raises(OverflowError):",
                "+            aesccm.encrypt(nonce, FakeData(), b\"\")",
                "+",
                "+        with pytest.raises(OverflowError):",
                "+            aesccm.encrypt(nonce, b\"\", FakeData())",
                "+",
                "     def test_default_tag_length(self, backend):",
                "@@ -311,2 +338,13 @@ def _load_gcm_vectors():",
                " class TestAESGCM(object):",
                "+    def test_data_too_large(self):",
                "+        key = AESGCM.generate_key(128)",
                "+        aesgcm = AESGCM(key)",
                "+        nonce = b\"0\" * 12",
                "+",
                "+        with pytest.raises(OverflowError):",
                "+            aesgcm.encrypt(nonce, FakeData(), b\"\")",
                "+",
                "+        with pytest.raises(OverflowError):",
                "+            aesgcm.encrypt(nonce, b\"\", FakeData())",
                "+",
                "     @pytest.mark.parametrize(\"vector\", _load_gcm_vectors())"
            ],
            "changed_files": [
                "src/cryptography/hazmat/primitives/ciphers/aead.py",
                "tests/hazmat/primitives/test_aead.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4322": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: GCM",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: length",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4322",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "33db1c83b7ccb18e3319dedb5c7eb38edb74d8ab",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531579393,
            "hunks": 7,
            "message": "switch cryptography wheel builders back to pip wheel (#4334)",
            "diff": [
                "diff --git a/.jenkins/Jenkinsfile-cryptography-wheel-builder b/.jenkins/Jenkinsfile-cryptography-wheel-builder",
                "index 1cd764176..5f98276ca 100644",
                "--- a/.jenkins/Jenkinsfile-cryptography-wheel-builder",
                "+++ b/.jenkins/Jenkinsfile-cryptography-wheel-builder",
                "@@ -113,8 +113,5 @@ def build(version, label, imageName) {",
                "                         pip install cffi six idna asn1crypto ipaddress enum34",
                "-                        pip download cryptography==$BUILD_VERSION --no-binary cryptography --no-deps",
                "-                        tar zxf cryptography*",
                "-                        pushd cryptography*",
                "                         REGEX=\"py3([0-9])*\"",
                "                         if [[ \"${version}\" =~ \\$REGEX ]]; then",
                "-                            PY_LIMITED_API=\"--py-limited-api=cp3\\${BASH_REMATCH[1]}\"",
                "+                            PY_LIMITED_API=\"--build-option --py-limited-api=cp3\\${BASH_REMATCH[1]}\"",
                "                         fi",
                "@@ -123,4 +120,3 @@ def build(version, label, imageName) {",
                "                             CFLAGS=\"-I/usr/local/opt/openssl@1.1/include -mmacosx-version-min=10.9\" \\",
                "-                            python setup.py bdist_wheel --dist-dir=../wheelhouse \\$PY_LIMITED_API",
                "-                        popd",
                "+                            pip wheel cryptography==$BUILD_VERSION --wheel-dir=wheelhouse --no-binary cryptography --no-deps \\$PY_LIMITED_API",
                "                         pip install -f wheelhouse cryptography --no-index",
                "@@ -141,4 +137,2 @@ def build(version, label, imageName) {",
                "                     $linux32 /opt/python/$version/bin/pip install cffi six idna asn1crypto ipaddress enum34",
                "-                    $linux32 /opt/python/$version/bin/pip download cryptography==$BUILD_VERSION --no-binary cryptography --no-deps",
                "-                    tar zxf cryptography*",
                "                     # Because we are doing this as root in the container, but we write to a mounted dir that is outside the container",
                "@@ -150,6 +144,5 @@ def build(version, label, imageName) {",
                "-                    pushd cryptography*",
                "                     REGEX=\"cp3([0-9])*\"",
                "                     if [[ \"${version}\" =~ \\$REGEX ]]; then",
                "-                        PY_LIMITED_API=\"--py-limited-api=cp3\\${BASH_REMATCH[1]}\"",
                "+                        PY_LIMITED_API=\"--build-option --py-limited-api=cp3\\${BASH_REMATCH[1]}\"",
                "                     fi",
                "@@ -157,5 +150,3 @@ def build(version, label, imageName) {",
                "                         CFLAGS=\"-I/opt/pyca/cryptography/openssl/include -Wl,--exclude-libs,ALL\" \\",
                "-                        $linux32 /opt/python/$version/bin/python setup.py bdist_wheel --dist-dir=../tmpwheelhouse \\$PY_LIMITED_API",
                "-                    popd",
                "-                    chmod -R 777 cryptography*",
                "+                        $linux32 /opt/python/$version/bin/pip wheel cryptography==$BUILD_VERSION --no-binary cryptography --no-deps --wheel-dir=tmpwheelhouse \\$PY_LIMITED_API",
                "                     $linux32 auditwheel repair tmpwheelhouse/cryptography*.whl -w wheelhouse/"
            ],
            "changed_files": [
                ".jenkins/Jenkinsfile-cryptography-wheel-builder"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4334": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: API",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4334",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4de004955b2d9d0d714fe29ae95b8eff7ee983a1",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531845895,
            "hunks": 2,
            "message": "add wycheproof gcm tests (#4349) * add wycheproof gcm tests * add AEAD test",
            "diff": [
                "diff --git a/tests/wycheproof/test_aes.py b/tests/wycheproof/test_aes.py",
                "index 65db9cdb2..929ad8dc9 100644",
                "--- a/tests/wycheproof/test_aes.py",
                "+++ b/tests/wycheproof/test_aes.py",
                "@@ -15,2 +15,3 @@ from cryptography.hazmat.primitives.ciphers import (",
                " )",
                "+from cryptography.hazmat.primitives.ciphers.aead import AESGCM",
                "@@ -42 +43,54 @@ def test_aes_cbc_pkcs5(backend, wycheproof):",
                "             unpadder.update(padded_msg) + unpadder.finalize()",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=CipherBackend)",
                "+@pytest.mark.wycheproof_tests(\"aes_gcm_test.json\")",
                "+def test_aes_gcm(backend, wycheproof):",
                "+    key = binascii.unhexlify(wycheproof.testcase[\"key\"])",
                "+    iv = binascii.unhexlify(wycheproof.testcase[\"iv\"])",
                "+    aad = binascii.unhexlify(wycheproof.testcase[\"aad\"])",
                "+    msg = binascii.unhexlify(wycheproof.testcase[\"msg\"])",
                "+    ct = binascii.unhexlify(wycheproof.testcase[\"ct\"])",
                "+    tag = binascii.unhexlify(wycheproof.testcase[\"tag\"])",
                "+    if wycheproof.valid or wycheproof.acceptable:",
                "+        enc = Cipher(algorithms.AES(key), modes.GCM(iv), backend).encryptor()",
                "+        enc.authenticate_additional_data(aad)",
                "+        computed_ct = enc.update(msg) + enc.finalize()",
                "+        computed_tag = enc.tag",
                "+        assert computed_ct == ct",
                "+        assert computed_tag == tag",
                "+        dec = Cipher(",
                "+            algorithms.AES(key),",
                "+            modes.GCM(iv, tag, min_tag_length=len(tag)),",
                "+            backend",
                "+        ).decryptor()",
                "+        dec.authenticate_additional_data(aad)",
                "+        computed_msg = dec.update(ct) + dec.finalize()",
                "+        assert computed_msg == msg",
                "+    else:",
                "+        # All invalid GCM tests are IV len 0 right now",
                "+        assert len(iv) == 0",
                "+        with pytest.raises(ValueError):",
                "+            Cipher(algorithms.AES(key), modes.GCM(iv), backend)",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=CipherBackend)",
                "+@pytest.mark.wycheproof_tests(\"aes_gcm_test.json\")",
                "+def test_aes_gcm_aead_api(backend, wycheproof):",
                "+    key = binascii.unhexlify(wycheproof.testcase[\"key\"])",
                "+    iv = binascii.unhexlify(wycheproof.testcase[\"iv\"])",
                "+    aad = binascii.unhexlify(wycheproof.testcase[\"aad\"])",
                "+    msg = binascii.unhexlify(wycheproof.testcase[\"msg\"])",
                "+    ct = binascii.unhexlify(wycheproof.testcase[\"ct\"])",
                "+    tag = binascii.unhexlify(wycheproof.testcase[\"tag\"])",
                "+    aesgcm = AESGCM(key)",
                "+    if wycheproof.valid or wycheproof.acceptable:",
                "+        computed_ct = aesgcm.encrypt(iv, msg, aad)",
                "+        assert computed_ct == ct + tag",
                "+        computed_msg = aesgcm.decrypt(iv, ct + tag, aad)",
                "+        assert computed_msg == msg",
                "+    else:",
                "+        # All invalid GCM tests are IV len 0 right now",
                "+        assert len(iv) == 0",
                "+        with pytest.raises(ValueError):",
                "+            aesgcm.encrypt(iv, msg, aad)"
            ],
            "changed_files": [
                "tests/wycheproof/test_aes.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4349": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: GCM",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4349",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "14faf3ca00d39f12bc379518bed66f9169a891d9",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531838346,
            "hunks": 1,
            "message": "add wycheproof tests for AES CMAC (#4344) * add wycheproof tests for AES CMAC * review feedback",
            "diff": [
                "diff --git a/tests/wycheproof/test_cmac.py b/tests/wycheproof/test_cmac.py",
                "new file mode 100644",
                "index 000000000..bef858395",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_cmac.py",
                "@@ -0,0 +1,36 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import binascii",
                "+",
                "+import pytest",
                "+",
                "+from cryptography.exceptions import InvalidSignature",
                "+from cryptography.hazmat.backends.interfaces import CMACBackend",
                "+from cryptography.hazmat.primitives.ciphers.algorithms import AES",
                "+from cryptography.hazmat.primitives.cmac import CMAC",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=CMACBackend)",
                "+@pytest.mark.wycheproof_tests(\"aes_cmac_test.json\")",
                "+def test_aes_cmac(backend, wycheproof):",
                "+    key = binascii.unhexlify(wycheproof.testcase[\"key\"])",
                "+    msg = binascii.unhexlify(wycheproof.testcase[\"msg\"])",
                "+    tag = binascii.unhexlify(wycheproof.testcase[\"tag\"])",
                "+",
                "+    # skip truncated tags, which we don't support in the API",
                "+    if wycheproof.valid and len(tag) == 16:",
                "+        ctx = CMAC(AES(key), backend)",
                "+        ctx.update(msg)",
                "+        ctx.verify(tag)",
                "+    elif len(key) not in [16, 24, 32]:",
                "+        with pytest.raises(ValueError):",
                "+            CMAC(AES(key), backend)",
                "+    else:",
                "+        ctx = CMAC(AES(key), backend)",
                "+        ctx.update(msg)",
                "+        with pytest.raises(InvalidSignature):",
                "+            ctx.verify(tag)"
            ],
            "changed_files": [
                "tests/wycheproof/test_cmac.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4344": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: API, MAC",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4344",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dd6f4c2977ff03ba0e45e3528f49f126f587f123",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531099243,
            "hunks": 2,
            "message": "Convert a pair of asserts to use openssl_assert (#4318) We have an existence proof that the latter assertion can be triggered, and I bet the former can too.",
            "diff": [
                "diff --git a/src/cryptography/hazmat/backends/openssl/rsa.py b/src/cryptography/hazmat/backends/openssl/rsa.py",
                "index 1b6ebfd77..e7a77312d 100644",
                "--- a/src/cryptography/hazmat/backends/openssl/rsa.py",
                "+++ b/src/cryptography/hazmat/backends/openssl/rsa.py",
                "@@ -131,3 +131,3 @@ def _handle_rsa_enc_dec_error(backend, key):",
                "     errors = backend._consume_errors()",
                "-    assert errors",
                "+    backend.openssl_assert(errors)",
                "     assert errors[0].lib == backend._lib.ERR_LIB_RSA",
                "@@ -267,3 +267,3 @@ def _rsa_sig_verify(backend, padding, algorithm, public_key, signature, data):",
                "         errors = backend._consume_errors()",
                "-        assert errors",
                "+        backend.openssl_assert(errors)",
                "         raise InvalidSignature"
            ],
            "changed_files": [
                "src/cryptography/hazmat/backends/openssl/rsa.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4318": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: have",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4318",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "43d02e7eabc13ed5f01a1e68aa595fd597d91729",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531228485,
            "hunks": 2,
            "message": "we don't actually care about the errstack here, it's an invalid signature (#4325) * we don't actually care about the errstack here, it's an invalid signature We previously had no cases where we could error without getting errors on the error stack, but wycheproof contains test cases that can error without adding anything to the stack. Accordingly, we should clear the stack but raise InvalidSignature no matter what (rather than InternalError if we have no error msgs) * add a test",
            "diff": [
                "diff --git a/src/cryptography/hazmat/backends/openssl/rsa.py b/src/cryptography/hazmat/backends/openssl/rsa.py",
                "index e7a77312d..9a7bfaa57 100644",
                "--- a/src/cryptography/hazmat/backends/openssl/rsa.py",
                "+++ b/src/cryptography/hazmat/backends/openssl/rsa.py",
                "@@ -266,4 +266,3 @@ def _rsa_sig_verify(backend, padding, algorithm, public_key, signature, data):",
                "     if res == 0:",
                "-        errors = backend._consume_errors()",
                "-        backend.openssl_assert(errors)",
                "+        backend._consume_errors()",
                "         raise InvalidSignature",
                "diff --git a/tests/hazmat/primitives/test_rsa.py b/tests/hazmat/primitives/test_rsa.py",
                "index 217c66801..ec08eadec 100644",
                "--- a/tests/hazmat/primitives/test_rsa.py",
                "+++ b/tests/hazmat/primitives/test_rsa.py",
                "@@ -733,2 +733,37 @@ class TestRSAVerification(object):",
                "+    def test_invalid_signature_sequence_removed(self, backend):",
                "+        \"\"\"",
                "+        This test comes from wycheproof",
                "+        \"\"\"",
                "+        key_der = binascii.unhexlify(",
                "+            b\"30820122300d06092a864886f70d01010105000382010f003082010a02820101\"",
                "+            b\"00a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224\"",
                "+            b\"e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac88450\"",
                "+            b\"97b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c9\"",
                "+            b\"8e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9\"",
                "+            b\"814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece\"",
                "+            b\"6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a\"",
                "+            b\"1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1\"",
                "+            b\"a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9\"",
                "+            b\"d50203010001\"",
                "+        )",
                "+        sig = binascii.unhexlify(",
                "+            b\"498209f59a0679a1f926eccf3056da2cba553d7ab3064e7c41ad1d739f038249\"",
                "+            b\"f02f5ad12ee246073d101bc3cdb563e8b6be61562056422b7e6c16ad53deb12a\"",
                "+            b\"f5de744197753a35859833f41bb59c6597f3980132b7478fd0b95fd27dfad64a\"",
                "+            b\"20fd5c25312bbd41a85286cd2a83c8df5efa0779158d01b0747ff165b055eb28\"",
                "+            b\"80ea27095700a295593196d8c5922cf6aa9d7e29b5056db5ded5eb20aeb31b89\"",
                "+            b\"42e26b15a5188a4934cd7e39cfe379a197f49a204343a493452deebca436ee61\"",
                "+            b\"4f4daf989e355544489f7e69ffa8ccc6a1e81cf0ab33c3e6d7591091485a6a31\"",
                "+            b\"bda3b33946490057b9a3003d3fd9daf7c4778b43fd46144d945d815f12628ff4\"",
                "+        )",
                "+        public_key = serialization.load_der_public_key(key_der, backend)",
                "+        with pytest.raises(InvalidSignature):",
                "+            public_key.verify(",
                "+                sig,",
                "+                binascii.unhexlify(b\"313233343030\"),",
                "+                padding.PKCS1v15(),",
                "+                hashes.SHA256()",
                "+            )",
                "+",
                "     @pytest.mark.supported("
            ],
            "changed_files": [
                "src/cryptography/hazmat/backends/openssl/rsa.py",
                "tests/hazmat/primitives/test_rsa.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4325": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: have",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4325",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e74a263112847bf856c12128ce45f8d3ac2d116a",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531273151,
            "hunks": 2,
            "message": "bump to latest libressl versions (#4329)",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 0c6862777..4288eb4e5 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -46,5 +46,5 @@ matrix:",
                "         - python: 3.6",
                "-          env: TOXENV=py36 LIBRESSL=2.6.4",
                "+          env: TOXENV=py36 LIBRESSL=2.6.5",
                "         - python: 3.6",
                "-          env: TOXENV=py36 LIBRESSL=2.7.3",
                "+          env: TOXENV=py36 LIBRESSL=2.7.4",
                "         - python: 3.6"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4329": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4329",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a846e294806478770469219a26cd49dcb5502d7",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531912366,
            "hunks": 2,
            "message": "bump version and changelog for 2.3 release (#4356)",
            "diff": [
                "diff --git a/src/cryptography/__about__.py b/src/cryptography/__about__.py",
                "index b198409d3..935e65609 100644",
                "--- a/src/cryptography/__about__.py",
                "+++ b/src/cryptography/__about__.py",
                "@@ -16,3 +16,3 @@ __uri__ = \"https://github.com/pyca/cryptography\"",
                "-__version__ = \"2.3.dev1\"",
                "+__version__ = \"2.3\"",
                "diff --git a/vectors/cryptography_vectors/__about__.py b/vectors/cryptography_vectors/__about__.py",
                "index d15f1abaf..8f73dc73d 100644",
                "--- a/vectors/cryptography_vectors/__about__.py",
                "+++ b/vectors/cryptography_vectors/__about__.py",
                "@@ -16,3 +16,3 @@ __uri__ = \"https://github.com/pyca/cryptography\"",
                "-__version__ = \"2.3.dev1\"",
                "+__version__ = \"2.3\""
            ],
            "changed_files": [
                "src/cryptography/__about__.py",
                "vectors/cryptography_vectors/__about__.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4356": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4356",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eb49820cd0750319eabb79a582f8a98419b819c5",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1532330088,
            "hunks": 5,
            "message": "Add more SSL_CIPHER_* functions, necessary to implement ctx.get_ciphers() in PyPy (#4364) * Add more SSL_CIPHER_* functions, necessary to implement ctx.get_ciphers() added by Python 3.6.1. * Add placeholders for other versions * Remove parameter names * LibreSSL 2.7 has the new functions * Add entries in _conditional.py * SSL_CIPHER_get_id returns int, not char*",
            "diff": [
                "diff --git a/src/_cffi_src/openssl/ssl.py b/src/_cffi_src/openssl/ssl.py",
                "index a9fc2ff3f..2aa5d0100 100644",
                "--- a/src/_cffi_src/openssl/ssl.py",
                "+++ b/src/_cffi_src/openssl/ssl.py",
                "@@ -31,2 +31,3 @@ static const long Cryptography_HAS_SIGALGS;",
                " static const long Cryptography_HAS_PSK;",
                "+static const long Cryptography_HAS_CIPHER_DETAILS;",
                "@@ -286,2 +287,8 @@ const char *SSL_CIPHER_get_name(const SSL_CIPHER *);",
                " int SSL_CIPHER_get_bits(const SSL_CIPHER *, int *);",
                "+uint32_t SSL_CIPHER_get_id(const SSL_CIPHER *);",
                "+int SSL_CIPHER_is_aead(const SSL_CIPHER *);",
                "+int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *);",
                "+int SSL_CIPHER_get_digest_nid(const SSL_CIPHER *);",
                "+int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *);",
                "+int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *);",
                "@@ -792,2 +799,14 @@ int (*SSL_extension_supported)(unsigned int) = NULL;",
                " #endif",
                "+",
                "+#if CRYPTOGRAPHY_OPENSSL_LESS_THAN_110 && !CRYPTOGRAPHY_LIBRESSL_27_OR_GREATER",
                "+int (*SSL_CIPHER_is_aead)(const SSL_CIPHER *) = NULL;",
                "+int (*SSL_CIPHER_get_cipher_nid)(const SSL_CIPHER *) = NULL;",
                "+int (*SSL_CIPHER_get_digest_nid)(const SSL_CIPHER *) = NULL;",
                "+int (*SSL_CIPHER_get_kx_nid)(const SSL_CIPHER *) = NULL;",
                "+int (*SSL_CIPHER_get_auth_nid)(const SSL_CIPHER *) = NULL;",
                "+static const long Cryptography_HAS_CIPHER_DETAILS = 0;",
                "+#else",
                "+static const long Cryptography_HAS_CIPHER_DETAILS = 1;",
                "+#endif",
                "+",
                " \"\"\"",
                "diff --git a/src/cryptography/hazmat/bindings/openssl/_conditional.py b/src/cryptography/hazmat/bindings/openssl/_conditional.py",
                "index b3e4e8bd6..eb31c1052 100644",
                "--- a/src/cryptography/hazmat/bindings/openssl/_conditional.py",
                "+++ b/src/cryptography/hazmat/bindings/openssl/_conditional.py",
                "@@ -248,2 +248,12 @@ def cryptography_has_openssl_cleanup():",
                "+def cryptography_has_cipher_details():",
                "+    return [",
                "+        \"SSL_CIPHER_is_aead\",",
                "+        \"SSL_CIPHER_get_cipher_nid\",",
                "+        \"SSL_CIPHER_get_digest_nid\",",
                "+        \"SSL_CIPHER_get_kx_nid\",",
                "+        \"SSL_CIPHER_get_auth_nid\",",
                "+    ]",
                "+",
                "+",
                " # This is a mapping of",
                "@@ -301,2 +311,3 @@ CONDITIONAL_NAMES = {",
                "     \"Cryptography_HAS_OPENSSL_CLEANUP\": cryptography_has_openssl_cleanup,",
                "+    \"Cryptography_HAS_CIPHER_DETAILS\": cryptography_has_cipher_details,",
                " }"
            ],
            "changed_files": [
                "src/_cffi_src/openssl/ssl.py",
                "src/cryptography/hazmat/bindings/openssl/_conditional.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4364": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4364",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "162a17e246f51c90f61fe135e1db1006965a3385",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1532346906,
            "hunks": 12,
            "message": "block_size isn't part of our interface and future hashes won't have it (#4366)",
            "diff": [
                "diff --git a/tests/hazmat/primitives/test_hashes.py b/tests/hazmat/primitives/test_hashes.py",
                "index 60950aed6..c2b866f70 100644",
                "--- a/tests/hazmat/primitives/test_hashes.py",
                "+++ b/tests/hazmat/primitives/test_hashes.py",
                "@@ -55,3 +55,2 @@ class TestSHA1(object):",
                "         digest_size=20,",
                "-        block_size=64,",
                "     )",
                "@@ -68,3 +67,2 @@ class TestSHA224(object):",
                "         digest_size=28,",
                "-        block_size=64,",
                "     )",
                "@@ -81,3 +79,2 @@ class TestSHA256(object):",
                "         digest_size=32,",
                "-        block_size=64,",
                "     )",
                "@@ -94,3 +91,2 @@ class TestSHA384(object):",
                "         digest_size=48,",
                "-        block_size=128,",
                "     )",
                "@@ -107,3 +103,2 @@ class TestSHA512(object):",
                "         digest_size=64,",
                "-        block_size=128,",
                "     )",
                "@@ -120,3 +115,2 @@ class TestMD5(object):",
                "         digest_size=16,",
                "-        block_size=64,",
                "     )",
                "@@ -134,3 +128,2 @@ class TestBLAKE2b(object):",
                "         digest_size=64,",
                "-        block_size=128,",
                "     )",
                "@@ -158,3 +151,2 @@ class TestBLAKE2s(object):",
                "         digest_size=32,",
                "-        block_size=64,",
                "     )",
                "diff --git a/tests/hazmat/primitives/utils.py b/tests/hazmat/primitives/utils.py",
                "index b0cc0cffc..811dcf905 100644",
                "--- a/tests/hazmat/primitives/utils.py",
                "+++ b/tests/hazmat/primitives/utils.py",
                "@@ -170,5 +170,5 @@ def hash_test(backend, algorithm, params):",
                "-def generate_base_hash_test(algorithm, digest_size, block_size):",
                "+def generate_base_hash_test(algorithm, digest_size):",
                "     def test_base_hash(self, backend):",
                "-        base_hash_test(backend, algorithm, digest_size, block_size)",
                "+        base_hash_test(backend, algorithm, digest_size)",
                "     return test_base_hash",
                "@@ -176,6 +176,5 @@ def generate_base_hash_test(algorithm, digest_size, block_size):",
                "-def base_hash_test(backend, algorithm, digest_size, block_size):",
                "+def base_hash_test(backend, algorithm, digest_size):",
                "     m = hashes.Hash(algorithm, backend=backend)",
                "     assert m.algorithm.digest_size == digest_size",
                "-    assert m.algorithm.block_size == block_size",
                "     m_copy = m.copy()"
            ],
            "changed_files": [
                "tests/hazmat/primitives/test_hashes.py",
                "tests/hazmat/primitives/utils.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4366": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: have",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4366",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b09b9ecd695187f323c509aecdf517cadcf728d1",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531702137,
            "hunks": 6,
            "message": "Change the exception we raise in keywrap unwrapping on invalid length (#4337) I believe this can reasonably be considered backwards compatible since other invalid inputs already lead to InvalidUnwrap, and clients shouldn't be distinguishing between these two conditions, and ValueError wasn't documented anyways.",
            "diff": [
                "diff --git a/src/cryptography/hazmat/primitives/keywrap.py b/src/cryptography/hazmat/primitives/keywrap.py",
                "index 2b7955f8b..f55c519cf 100644",
                "--- a/src/cryptography/hazmat/primitives/keywrap.py",
                "+++ b/src/cryptography/hazmat/primitives/keywrap.py",
                "@@ -91,3 +91,3 @@ def aes_key_unwrap_with_padding(wrapping_key, wrapped_key, backend):",
                "     if len(wrapped_key) < 16:",
                "-        raise ValueError(\"Must be at least 16 bytes\")",
                "+        raise InvalidUnwrap(\"Must be at least 16 bytes\")",
                "@@ -134,6 +134,6 @@ def aes_key_unwrap(wrapping_key, wrapped_key, backend):",
                "     if len(wrapped_key) < 24:",
                "-        raise ValueError(\"Must be at least 24 bytes\")",
                "+        raise InvalidUnwrap(\"Must be at least 24 bytes\")",
                "     if len(wrapped_key) % 8 != 0:",
                "-        raise ValueError(\"The wrapped key must be a multiple of 8 bytes\")",
                "+        raise InvalidUnwrap(\"The wrapped key must be a multiple of 8 bytes\")",
                "diff --git a/tests/hazmat/primitives/test_keywrap.py b/tests/hazmat/primitives/test_keywrap.py",
                "index 9b1e43e42..c74b144b6 100644",
                "--- a/tests/hazmat/primitives/test_keywrap.py",
                "+++ b/tests/hazmat/primitives/test_keywrap.py",
                "@@ -110,3 +110,3 @@ class TestAESKeyWrap(object):",
                "         # Keys to unwrap must be at least 24 bytes",
                "-        with pytest.raises(ValueError):",
                "+        with pytest.raises(keywrap.InvalidUnwrap):",
                "             keywrap.aes_key_unwrap(b\"sixteen_byte_key\", b\"\\x00\" * 16, backend)",
                "@@ -114,3 +114,3 @@ class TestAESKeyWrap(object):",
                "         # Keys to unwrap must be a multiple of 8 bytes",
                "-        with pytest.raises(ValueError):",
                "+        with pytest.raises(keywrap.InvalidUnwrap):",
                "             keywrap.aes_key_unwrap(b\"sixteen_byte_key\", b\"\\x00\" * 27, backend)",
                "@@ -191,3 +191,5 @@ class TestAESKeyWrapWithPadding(object):",
                "         # Keys to unwrap must be at least 16 bytes",
                "-        with pytest.raises(ValueError, match='Must be at least 16 bytes'):",
                "+        with pytest.raises(",
                "+            keywrap.InvalidUnwrap, match='Must be at least 16 bytes'",
                "+        ):",
                "             keywrap.aes_key_unwrap_with_padding("
            ],
            "changed_files": [
                "src/cryptography/hazmat/primitives/keywrap.py",
                "tests/hazmat/primitives/test_keywrap.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4337": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: input, length",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4337",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dfb332da50ee9358ef9f46b2e8ffb28f1cfd8751",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531908735,
            "hunks": 1,
            "message": "improve skip msg when skipping an ECDH test in test_ec (#4355)",
            "diff": [
                "diff --git a/tests/hazmat/primitives/test_ec.py b/tests/hazmat/primitives/test_ec.py",
                "index d015e84d8..4e61b5d4f 100644",
                "--- a/tests/hazmat/primitives/test_ec.py",
                "+++ b/tests/hazmat/primitives/test_ec.py",
                "@@ -67,4 +67,4 @@ def _skip_exchange_algorithm_unsupported(backend, algorithm, curve):",
                "         pytest.skip(",
                "-            \"Exchange algorithm is not supported by this backend {0}\".format(",
                "-                backend",
                "+            \"Exchange with {0} curve is not supported by {1}\".format(",
                "+                curve.name, backend",
                "             )"
            ],
            "changed_files": [
                "tests/hazmat/primitives/test_ec.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4355": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4355",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2af3d4c51bca6a769a681cdfee10c9eda02b0838",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1532365813,
            "hunks": 3,
            "message": "Fixes #3548 - add a pyproject.toml (#4363)",
            "diff": [
                "diff --git a/MANIFEST.in b/MANIFEST.in",
                "index b05a869c4..373c24202 100644",
                "--- a/MANIFEST.in",
                "+++ b/MANIFEST.in",
                "@@ -8,2 +8,4 @@ include README.rst",
                "+include pyproject.toml",
                "+",
                " recursive-include docs *",
                "diff --git a/pyproject.toml b/pyproject.toml",
                "new file mode 100644",
                "index 000000000..461675f06",
                "--- /dev/null",
                "+++ b/pyproject.toml",
                "@@ -0,0 +1,7 @@",
                "+[build-system]",
                "+# Must be kept in sync with `setup_requirements` in `setup.py`",
                "+requires = [",
                "+    \"setuptools>=18.5\",",
                "+    \"wheel\",",
                "+    \"cffi>=1.7,!=1.11.3; python_implementation != 'PyPy'\",",
                "+]",
                "diff --git a/setup.py b/setup.py",
                "index 2fbbd0469..8bd31bd55 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -45,2 +45,3 @@ VECTORS_DEPENDENCY = \"cryptography_vectors=={0}\".format(about['__version__'])",
                "+# `setup_requirements` must be kept in sync with `pyproject.toml`",
                " setup_requirements = [\"cffi>=1.7,!=1.11.3\"]"
            ],
            "changed_files": [
                "MANIFEST.in",
                "pyproject.toml",
                "setup.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3548": "pip 18: pep518 support causing issues on PyPy pypa/pip#5631",
                "4363": "[DO NOT MERGE] Fixes #3548 - add a pyproject.toml #3610 pip 18: pep518 support causing issues on PyPy pypa/pip#5631"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3548, 4363",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7ca0e46d82606b8a12ff323181065a00885d39dc",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531838402,
            "hunks": 1,
            "message": "add chacha20poly1305 wycheproof tests (#4345) * add chacha20poly1305 wycheproof tests * flake8 * review",
            "diff": [
                "diff --git a/tests/wycheproof/test_chacha20poly1305.py b/tests/wycheproof/test_chacha20poly1305.py",
                "new file mode 100644",
                "index 000000000..deef5a0a7",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_chacha20poly1305.py",
                "@@ -0,0 +1,47 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import binascii",
                "+",
                "+import pytest",
                "+",
                "+from cryptography.exceptions import InvalidTag",
                "+from cryptography.hazmat.backends.interfaces import CipherBackend",
                "+from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305",
                "+",
                "+from ..hazmat.primitives.test_aead import _aead_supported",
                "+",
                "+",
                "+@pytest.mark.skipif(",
                "+    not _aead_supported(ChaCha20Poly1305),",
                "+    reason=\"Requires OpenSSL with ChaCha20Poly1305 support\"",
                "+)",
                "+@pytest.mark.requires_backend_interface(interface=CipherBackend)",
                "+@pytest.mark.wycheproof_tests(\"chacha20_poly1305_test.json\")",
                "+def test_chacha2poly1305(wycheproof):",
                "+    key = binascii.unhexlify(wycheproof.testcase[\"key\"])",
                "+    iv = binascii.unhexlify(wycheproof.testcase[\"iv\"])",
                "+    aad = binascii.unhexlify(wycheproof.testcase[\"aad\"])",
                "+    msg = binascii.unhexlify(wycheproof.testcase[\"msg\"])",
                "+    ct = binascii.unhexlify(wycheproof.testcase[\"ct\"])",
                "+    tag = binascii.unhexlify(wycheproof.testcase[\"tag\"])",
                "+",
                "+    if wycheproof.valid:",
                "+        chacha = ChaCha20Poly1305(key)",
                "+        computed_ct = chacha.encrypt(iv, msg, aad)",
                "+        assert computed_ct == ct + tag",
                "+        computed_msg = chacha.decrypt(iv, ct + tag, aad)",
                "+        assert computed_msg == msg",
                "+    elif len(iv) != 12:",
                "+        chacha = ChaCha20Poly1305(key)",
                "+        with pytest.raises(ValueError):",
                "+            chacha.encrypt(iv, msg, aad)",
                "+        with pytest.raises(ValueError):",
                "+            chacha.decrypt(iv, ct + tag, aad)",
                "+    else:",
                "+        chacha = ChaCha20Poly1305(key)",
                "+        with pytest.raises(InvalidTag):",
                "+            chacha.decrypt(iv, msg + tag, aad)"
            ],
            "changed_files": [
                "tests/wycheproof/test_chacha20poly1305.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4345": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4345",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "feb134586ee6ca56e2c53b35d0ffbb79eb1b5dee",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531909248,
            "hunks": 2,
            "message": "Refs #3331 -- integrated wycheproof ECDH tests (#4354) * Refs #3331 -- integrated wycheproof ECDH tests * flake8 + missing assert * Handle this error case * skip on unsupported * shouldn't need to try here any more",
            "diff": [
                "diff --git a/tests/utils.py b/tests/utils.py",
                "index ccc3b7c1b..b950f8bd9 100644",
                "--- a/tests/utils.py",
                "+++ b/tests/utils.py",
                "@@ -908,2 +908,6 @@ class WycheproofTest(object):",
                "+    @property",
                "+    def invalid(self):",
                "+        return self.testcase[\"result\"] == \"invalid\"",
                "+",
                "     def has_flag(self, flag):",
                "diff --git a/tests/wycheproof/test_ecdh.py b/tests/wycheproof/test_ecdh.py",
                "new file mode 100644",
                "index 000000000..0850b627d",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_ecdh.py",
                "@@ -0,0 +1,83 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import binascii",
                "+",
                "+import pytest",
                "+",
                "+from cryptography.exceptions import UnsupportedAlgorithm",
                "+from cryptography.hazmat.backends.interfaces import EllipticCurveBackend",
                "+from cryptography.hazmat.primitives import serialization",
                "+from cryptography.hazmat.primitives.asymmetric import ec",
                "+",
                "+from ..hazmat.primitives.test_ec import _skip_exchange_algorithm_unsupported",
                "+",
                "+",
                "+_CURVES = {",
                "+    \"secp224r1\": ec.SECP224R1(),",
                "+    \"secp256r1\": ec.SECP256R1(),",
                "+    \"secp384r1\": ec.SECP384R1(),",
                "+    \"secp521r1\": ec.SECP521R1(),",
                "+    \"secp256k1\": ec.SECP256K1(),",
                "+    \"brainpoolP224r1\": None,",
                "+    \"brainpoolP256r1\": ec.BrainpoolP256R1(),",
                "+    \"brainpoolP320r1\": None,",
                "+    \"brainpoolP384r1\": ec.BrainpoolP384R1(),",
                "+    \"brainpoolP512r1\": ec.BrainpoolP512R1(),",
                "+    \"brainpoolP224t1\": None,",
                "+    \"brainpoolP256t1\": None,",
                "+    \"brainpoolP320t1\": None,",
                "+    \"brainpoolP384t1\": None,",
                "+    \"brainpoolP512t1\": None,",
                "+}",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=EllipticCurveBackend)",
                "+@pytest.mark.wycheproof_tests(",
                "+    \"ecdh_test.json\",",
                "+    \"ecdh_brainpoolP224r1_test.json\",",
                "+    \"ecdh_brainpoolP256r1_test.json\",",
                "+    \"ecdh_brainpoolP320r1_test.json\",",
                "+    \"ecdh_brainpoolP384r1_test.json\",",
                "+    \"ecdh_brainpoolP512r1_test.json\",",
                "+    \"ecdh_secp224r1_test.json\",",
                "+    \"ecdh_secp256k1_test.json\",",
                "+    \"ecdh_secp256r1_test.json\",",
                "+    \"ecdh_secp384r1_test.json\",",
                "+    \"ecdh_secp521r1_test.json\",",
                "+)",
                "+def test_ecdh(backend, wycheproof):",
                "+    curve = _CURVES[wycheproof.testcase[\"curve\"]]",
                "+    if curve is None:",
                "+        pytest.skip(",
                "+            \"Unsupported curve ({})\".format(wycheproof.testcase[\"curve\"])",
                "+        )",
                "+    _skip_exchange_algorithm_unsupported(backend, ec.ECDH(), curve)",
                "+",
                "+    private_key = ec.derive_private_key(",
                "+        int(wycheproof.testcase[\"private\"], 16), curve, backend",
                "+    )",
                "+",
                "+    try:",
                "+        public_key = serialization.load_der_public_key(",
                "+            binascii.unhexlify(wycheproof.testcase[\"public\"]), backend",
                "+        )",
                "+    except NotImplementedError:",
                "+        assert wycheproof.has_flag(\"UnnamedCurve\")",
                "+        return",
                "+    except ValueError:",
                "+        assert wycheproof.invalid or wycheproof.acceptable",
                "+        return",
                "+    except UnsupportedAlgorithm:",
                "+        return",
                "+",
                "+    if wycheproof.valid or wycheproof.acceptable:",
                "+        computed_shared = private_key.exchange(ec.ECDH(), public_key)",
                "+        expected_shared = binascii.unhexlify(wycheproof.testcase[\"shared\"])",
                "+        assert computed_shared == expected_shared",
                "+    else:",
                "+        with pytest.raises(ValueError):",
                "+            private_key.exchange(ec.ECDH(), public_key)"
            ],
            "changed_files": [
                "tests/utils.py",
                "tests/wycheproof/test_ecdh.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3331": "add wycheproof tests for AES CMAC #4344 add chacha20poly1305 wycheproof tests #4345 add DSA wycheproof tests #4346 add aes cbc pkcs5 wycheproof tests #4347 add wycheproof gcm tests #4349",
                "4354": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3331, 4354",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "39a3efbfafd0f9ebed9d9ea08a885e68c97e8045",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531953338,
            "hunks": 2,
            "message": "reopen master (#4359)",
            "diff": [
                "diff --git a/src/cryptography/__about__.py b/src/cryptography/__about__.py",
                "index 935e65609..8811cc2ab 100644",
                "--- a/src/cryptography/__about__.py",
                "+++ b/src/cryptography/__about__.py",
                "@@ -16,3 +16,3 @@ __uri__ = \"https://github.com/pyca/cryptography\"",
                "-__version__ = \"2.3\"",
                "+__version__ = \"2.4.dev1\"",
                "diff --git a/vectors/cryptography_vectors/__about__.py b/vectors/cryptography_vectors/__about__.py",
                "index 8f73dc73d..4b46fbee5 100644",
                "--- a/vectors/cryptography_vectors/__about__.py",
                "+++ b/vectors/cryptography_vectors/__about__.py",
                "@@ -16,3 +16,3 @@ __uri__ = \"https://github.com/pyca/cryptography\"",
                "-__version__ = \"2.3\"",
                "+__version__ = \"2.4.dev1\""
            ],
            "changed_files": [
                "src/cryptography/__about__.py",
                "vectors/cryptography_vectors/__about__.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4359": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4359",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d1c73fd7827ea05505b033a0b126c35749430ea9",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531827185,
            "hunks": 1,
            "message": "add DSA wycheproof tests (#4346)",
            "diff": [
                "diff --git a/tests/wycheproof/test_dsa.py b/tests/wycheproof/test_dsa.py",
                "new file mode 100644",
                "index 000000000..3dc3056e1",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_dsa.py",
                "@@ -0,0 +1,49 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import binascii",
                "+",
                "+import pytest",
                "+",
                "+from cryptography.exceptions import InvalidSignature",
                "+from cryptography.hazmat.backends.interfaces import DSABackend",
                "+from cryptography.hazmat.primitives import hashes, serialization",
                "+",
                "+",
                "+_DIGESTS = {",
                "+    \"SHA-1\": hashes.SHA1(),",
                "+    \"SHA-224\": hashes.SHA224(),",
                "+    \"SHA-256\": hashes.SHA256(),",
                "+}",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=DSABackend)",
                "+@pytest.mark.wycheproof_tests(",
                "+    \"dsa_test.json\",",
                "+)",
                "+def test_dsa_signature(backend, wycheproof):",
                "+    key = serialization.load_der_public_key(",
                "+        binascii.unhexlify(wycheproof.testgroup[\"keyDer\"]), backend",
                "+    )",
                "+    digest = _DIGESTS[wycheproof.testgroup[\"sha\"]]",
                "+",
                "+    if (",
                "+        wycheproof.valid or (",
                "+            wycheproof.acceptable and not wycheproof.has_flag(\"NoLeadingZero\")",
                "+        )",
                "+    ):",
                "+        key.verify(",
                "+            binascii.unhexlify(wycheproof.testcase[\"sig\"]),",
                "+            binascii.unhexlify(wycheproof.testcase[\"msg\"]),",
                "+            digest,",
                "+        )",
                "+    else:",
                "+        with pytest.raises(InvalidSignature):",
                "+            key.verify(",
                "+                binascii.unhexlify(wycheproof.testcase[\"sig\"]),",
                "+                binascii.unhexlify(wycheproof.testcase[\"msg\"]),",
                "+                digest,",
                "+            )"
            ],
            "changed_files": [
                "tests/wycheproof/test_dsa.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4346": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4346",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "05affa665700b7dc0e5aff427c943614a436615e",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531243297,
            "hunks": 7,
            "message": "try compiling with asm for our custom openssl (#4328) * try compiling with asm for our custom openssl * we also need to update the cache dir * try actually compiling it",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 40a85a13a..0c6862777 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -8,3 +8,3 @@ cache:",
                "         - $HOME/.cache/pip",
                "-        - $HOME/ossl-1/",
                "+        - $HOME/ossl-2/",
                "diff --git a/.travis/install.sh b/.travis/install.sh",
                "index 6cb0a6b5f..a4aa9a42a 100755",
                "--- a/.travis/install.sh",
                "+++ b/.travis/install.sh",
                "@@ -16,3 +16,3 @@ shlib_sed() {",
                " if [ -n \"${OPENSSL}\" ]; then",
                "-    OPENSSL_DIR=\"ossl-1/${OPENSSL}\"",
                "+    OPENSSL_DIR=\"ossl-2/${OPENSSL}\"",
                "     if [[ ! -f \"$HOME/$OPENSSL_DIR/bin/openssl\" ]]; then",
                "@@ -21,8 +21,9 @@ if [ -n \"${OPENSSL}\" ]; then",
                "         pushd \"openssl-${OPENSSL}\"",
                "-        ./config shared no-asm no-ssl2 no-ssl3 -fPIC --prefix=\"$HOME/$OPENSSL_DIR\"",
                "+        ./config shared no-ssl2 no-ssl3 -fPIC --prefix=\"$HOME/$OPENSSL_DIR\"",
                "         shlib_sed",
                "         make depend",
                "+        make -j\"$(nproc)\"",
                "         # avoid installing the docs",
                "         # https://github.com/openssl/openssl/issues/6685#issuecomment-403838728",
                "-        make -j\"$(nproc)\" install_sw install_ssldirs",
                "+        make install_sw install_ssldirs",
                "         popd",
                "@@ -30,3 +31,3 @@ if [ -n \"${OPENSSL}\" ]; then",
                " elif [ -n \"${LIBRESSL}\" ]; then",
                "-    LIBRESSL_DIR=\"ossl-1/${LIBRESSL}\"",
                "+    LIBRESSL_DIR=\"ossl-2/${LIBRESSL}\"",
                "     if [[ ! -f \"$HOME/$LIBRESSL_DIR/bin/openssl\" ]]; then",
                "diff --git a/.travis/run.sh b/.travis/run.sh",
                "index a68ad1570..32e9874be 100755",
                "--- a/.travis/run.sh",
                "+++ b/.travis/run.sh",
                "@@ -14,3 +14,3 @@ fi",
                " if [ -n \"${OPENSSL}\" ]; then",
                "-    OPENSSL_DIR=\"ossl-1/${OPENSSL}\"",
                "+    OPENSSL_DIR=\"ossl-2/${OPENSSL}\""
            ],
            "changed_files": [
                ".travis.yml",
                ".travis/install.sh",
                ".travis/run.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4328": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4328",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "40baa274f979d29310ef54493d05cd2e52043417",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531220940,
            "hunks": 2,
            "message": "fix a memory leak when calling X25519PrivateKey.public_key() (#4326)",
            "diff": [
                "diff --git a/src/cryptography/hazmat/backends/openssl/x25519.py b/src/cryptography/hazmat/backends/openssl/x25519.py",
                "index f92b184bd..5599c2fd5 100644",
                "--- a/src/cryptography/hazmat/backends/openssl/x25519.py",
                "+++ b/src/cryptography/hazmat/backends/openssl/x25519.py",
                "@@ -44,2 +44,6 @@ class _X25519PrivateKey(object):",
                "         )",
                "+        self._backend.openssl_assert(evp_pkey != self._backend._ffi.NULL)",
                "+        evp_pkey = self._backend._ffi.gc(",
                "+            evp_pkey, self._backend._lib.EVP_PKEY_free",
                "+        )",
                "         return _X25519PublicKey(self._backend, evp_pkey)",
                "diff --git a/tests/hazmat/backends/test_openssl_memleak.py b/tests/hazmat/backends/test_openssl_memleak.py",
                "index cd453541e..5cb7cbc77 100644",
                "--- a/tests/hazmat/backends/test_openssl_memleak.py",
                "+++ b/tests/hazmat/backends/test_openssl_memleak.py",
                "@@ -227 +227,9 @@ class TestOpenSSLMemoryLeaks(object):",
                "         \"\"\"))",
                "+",
                "+    def test_x25519_pubkey_from_private_key(self):",
                "+        assert_no_memory_leaks(textwrap.dedent(\"\"\"",
                "+        def func():",
                "+            from cryptography.hazmat.primitives.asymmetric import x25519",
                "+            private_key = x25519.X25519PrivateKey.generate()",
                "+            private_key.public_key()",
                "+        \"\"\"))"
            ],
            "changed_files": [
                "src/cryptography/hazmat/backends/openssl/x25519.py",
                "tests/hazmat/backends/test_openssl_memleak.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4326": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4326",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9e1873af35a2b530e71e1579b2d62c233b75ba26",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531141878,
            "hunks": 8,
            "message": "Make RelativeDistinguishedName preserve attribtue order (#4306) Duplicate attributes now raise an error instead of silently discarding duplicates.",
            "diff": [
                "diff --git a/src/cryptography/x509/name.py b/src/cryptography/x509/name.py",
                "index 0daa8bbd4..5548eda8b 100644",
                "--- a/src/cryptography/x509/name.py",
                "+++ b/src/cryptography/x509/name.py",
                "@@ -103,3 +103,3 @@ class RelativeDistinguishedName(object):",
                "     def __init__(self, attributes):",
                "-        attributes = frozenset(attributes)",
                "+        attributes = list(attributes)",
                "         if not attributes:",
                "@@ -109,3 +109,8 @@ class RelativeDistinguishedName(object):",
                "+        # Keep list and frozenset to preserve attribute order where it matters",
                "         self._attributes = attributes",
                "+        self._attribute_set = frozenset(attributes)",
                "+",
                "+        if len(self._attribute_set) != len(attributes):",
                "+            raise ValueError(\"duplicate attributes are not allowed\")",
                "@@ -118,3 +123,3 @@ class RelativeDistinguishedName(object):",
                "-        return self._attributes == other._attributes",
                "+        return self._attribute_set == other._attribute_set",
                "@@ -124,3 +129,3 @@ class RelativeDistinguishedName(object):",
                "     def __hash__(self):",
                "-        return hash(self._attributes)",
                "+        return hash(self._attribute_set)",
                "diff --git a/tests/x509/test_x509.py b/tests/x509/test_x509.py",
                "index 335a0fbf5..7f9f1830c 100644",
                "--- a/tests/x509/test_x509.py",
                "+++ b/tests/x509/test_x509.py",
                "@@ -3888,7 +3888,7 @@ class TestRelativeDistinguishedName(object):",
                "     def test_init_duplicate_attribute(self):",
                "-        rdn = x509.RelativeDistinguishedName([",
                "-            x509.NameAttribute(x509.ObjectIdentifier('2.999.1'), u'value1'),",
                "-            x509.NameAttribute(x509.ObjectIdentifier('2.999.1'), u'value1'),",
                "-        ])",
                "-        assert len(rdn) == 1",
                "+        with pytest.raises(ValueError):",
                "+            x509.RelativeDistinguishedName([",
                "+                x509.NameAttribute(x509.ObjectIdentifier('2.999.1'), u'val1'),",
                "+                x509.NameAttribute(x509.ObjectIdentifier('2.999.1'), u'val1'),",
                "+            ])",
                "@@ -3934,4 +3934,7 @@ class TestRelativeDistinguishedName(object):",
                "     def test_iter_input(self):",
                "+        # Order must be preserved too",
                "         attrs = [",
                "-            x509.NameAttribute(x509.ObjectIdentifier('2.999.1'), u'value1')",
                "+            x509.NameAttribute(x509.ObjectIdentifier('2.999.1'), u'value1'),",
                "+            x509.NameAttribute(x509.ObjectIdentifier('2.999.1'), u'value2'),",
                "+            x509.NameAttribute(x509.ObjectIdentifier('2.999.1'), u'value3')",
                "         ]"
            ],
            "changed_files": [
                "src/cryptography/x509/name.py",
                "tests/x509/test_x509.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4306": "Add RFC 4514 Distinguished Name formatting for Name objects (e.g. subject/issuer) #4304"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4306",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "20ae2c8084812bd218d2b1d2972774963c4d2041",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531178702,
            "hunks": 4,
            "message": "fix encoding BMPString in x509 name entries (#4321) Previously we encoded them as UTF-8, but as best I can tell in reality a BMPString is fixed-width basic multilingual plane big endian encoding. This is basically UCS-2 (aka original Unicode). However, Python doesn't support UCS-2 encoding so we need to use utf_16_be. This means you can encode surrogate code points that are invalid in the context of what a BMPString is supposed to be, but in reality I strongly suspect the sane encoding ship has sailed and dozens if not hundreds of implementations both do this and expect other systems to handle their nonsense.",
            "diff": [
                "diff --git a/src/cryptography/hazmat/backends/openssl/encode_asn1.py b/src/cryptography/hazmat/backends/openssl/encode_asn1.py",
                "index 4bea03e6c..a2c7ed73d 100644",
                "--- a/src/cryptography/hazmat/backends/openssl/encode_asn1.py",
                "+++ b/src/cryptography/hazmat/backends/openssl/encode_asn1.py",
                "@@ -16,2 +16,3 @@ from cryptography.hazmat.backends.openssl.decode_asn1 import (",
                " )",
                "+from cryptography.x509.name import _ASN1Type",
                " from cryptography.x509.oid import CRLEntryExtensionOID, ExtensionOID",
                "@@ -118,3 +119,7 @@ def _encode_sk_name_entry(backend, attributes):",
                " def _encode_name_entry(backend, attribute):",
                "-    value = attribute.value.encode('utf8')",
                "+    if attribute._type is _ASN1Type.BMPString:",
                "+        value = attribute.value.encode('utf_16_be')",
                "+    else:",
                "+        value = attribute.value.encode('utf8')",
                "+",
                "     obj = _txt2obj_gc(backend, attribute.oid.dotted_string)",
                "@@ -122,3 +127,3 @@ def _encode_name_entry(backend, attribute):",
                "     name_entry = backend._lib.X509_NAME_ENTRY_create_by_OBJ(",
                "-        backend._ffi.NULL, obj, attribute._type.value, value, -1",
                "+        backend._ffi.NULL, obj, attribute._type.value, value, len(value)",
                "     )",
                "diff --git a/tests/x509/test_x509.py b/tests/x509/test_x509.py",
                "index 7f9f1830c..fe57784a3 100644",
                "--- a/tests/x509/test_x509.py",
                "+++ b/tests/x509/test_x509.py",
                "@@ -4094,2 +4094,20 @@ class TestName(object):",
                "+    @pytest.mark.requires_backend_interface(interface=X509Backend)",
                "+    def test_bmpstring_bytes(self, backend):",
                "+        # For this test we need an odd length string. BMPString is UCS-2",
                "+        # encoded so it will always be even length and OpenSSL will error if",
                "+        # you pass an odd length string without encoding it properly first.",
                "+        name = x509.Name([",
                "+            x509.NameAttribute(",
                "+                NameOID.COMMON_NAME,",
                "+                u'cryptography.io',",
                "+                _ASN1Type.BMPString",
                "+            ),",
                "+            x509.NameAttribute(NameOID.ORGANIZATION_NAME, u'PyCA'),",
                "+        ])",
                "+        assert name.public_bytes(backend) == binascii.unhexlify(",
                "+            b\"30383127302506035504031e1e00630072007900700074006f00670072006100\"",
                "+            b\"7000680079002e0069006f310d300b060355040a0c0450794341\"",
                "+        )",
                "+"
            ],
            "changed_files": [
                "src/cryptography/hazmat/backends/openssl/encode_asn1.py",
                "tests/x509/test_x509.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4321": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4321",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c574e7554c7aa27c56f6478258a4e18f79457652",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531833613,
            "hunks": 1,
            "message": "Refs #3331 -- integrated wycheproof ECDSA tests (#4341) * Refs #3331 -- integrated wycheproof ECDSA tests * Also handle these key loading errors * review * empty commit to trigger jenkins",
            "diff": [
                "diff --git a/tests/wycheproof/test_ecdsa.py b/tests/wycheproof/test_ecdsa.py",
                "new file mode 100644",
                "index 000000000..5214052ec",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_ecdsa.py",
                "@@ -0,0 +1,76 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import binascii",
                "+",
                "+import pytest",
                "+",
                "+from cryptography.exceptions import InvalidSignature, UnsupportedAlgorithm",
                "+from cryptography.hazmat.backends.interfaces import EllipticCurveBackend",
                "+from cryptography.hazmat.primitives import hashes, serialization",
                "+from cryptography.hazmat.primitives.asymmetric import ec",
                "+",
                "+",
                "+_DIGESTS = {",
                "+    \"SHA-1\": hashes.SHA1(),",
                "+    \"SHA-224\": hashes.SHA224(),",
                "+    \"SHA-256\": hashes.SHA256(),",
                "+    \"SHA-384\": hashes.SHA384(),",
                "+    \"SHA-512\": hashes.SHA512(),",
                "+}",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=EllipticCurveBackend)",
                "+@pytest.mark.wycheproof_tests(",
                "+    \"ecdsa_test.json\",",
                "+    \"ecdsa_brainpoolP224r1_sha224_test.json\",",
                "+    \"ecdsa_brainpoolP256r1_sha256_test.json\",",
                "+    \"ecdsa_brainpoolP320r1_sha384_test.json\",",
                "+    \"ecdsa_brainpoolP384r1_sha384_test.json\",",
                "+    \"ecdsa_brainpoolP512r1_sha512_test.json\",",
                "+    \"ecdsa_secp224r1_sha224_test.json\",",
                "+    \"ecdsa_secp224r1_sha256_test.json\",",
                "+    \"ecdsa_secp224r1_sha512_test.json\",",
                "+    \"ecdsa_secp256k1_sha256_test.json\",",
                "+    \"ecdsa_secp256k1_sha512_test.json\",",
                "+    \"ecdsa_secp256r1_sha256_test.json\",",
                "+    \"ecdsa_secp256r1_sha512_test.json\",",
                "+    \"ecdsa_secp384r1_sha384_test.json\",",
                "+    \"ecdsa_secp384r1_sha512_test.json\",",
                "+    \"ecdsa_secp521r1_sha512_test.json\",",
                "+)",
                "+def test_ecdsa_signature(backend, wycheproof):",
                "+    try:",
                "+        key = serialization.load_der_public_key(",
                "+            binascii.unhexlify(wycheproof.testgroup[\"keyDer\"]), backend",
                "+        )",
                "+    except (UnsupportedAlgorithm, ValueError):",
                "+        # In OpenSSL 1.0.1, some keys fail to load with ValueError, instead of",
                "+        # Unsupported Algorithm. We can remove handling for that exception",
                "+        # when we drop support.",
                "+        pytest.skip(",
                "+            \"unable to load key (curve {})\".format(",
                "+                wycheproof.testgroup[\"key\"][\"curve\"]",
                "+            )",
                "+        )",
                "+    digest = _DIGESTS[wycheproof.testgroup[\"sha\"]]",
                "+",
                "+    if (",
                "+        wycheproof.valid or",
                "+        (wycheproof.acceptable and not wycheproof.has_flag(\"MissingZero\"))",
                "+    ):",
                "+        key.verify(",
                "+            binascii.unhexlify(wycheproof.testcase[\"sig\"]),",
                "+            binascii.unhexlify(wycheproof.testcase[\"msg\"]),",
                "+            ec.ECDSA(digest),",
                "+        )",
                "+    else:",
                "+        with pytest.raises(InvalidSignature):",
                "+            key.verify(",
                "+                binascii.unhexlify(wycheproof.testcase[\"sig\"]),",
                "+                binascii.unhexlify(wycheproof.testcase[\"msg\"]),",
                "+                ec.ECDSA(digest),",
                "+            )"
            ],
            "changed_files": [
                "tests/wycheproof/test_ecdsa.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3331": "add wycheproof tests for AES CMAC #4344 add chacha20poly1305 wycheproof tests #4345 add DSA wycheproof tests #4346 add aes cbc pkcs5 wycheproof tests #4347 add wycheproof gcm tests #4349",
                "4341": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3331, 4341",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e722e557e08171e265008711b824df44d4e9ec7d",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1532575620,
            "hunks": 1,
            "message": "Update comment (#4371)",
            "diff": [
                "diff --git a/tests/wycheproof/test_rsa.py b/tests/wycheproof/test_rsa.py",
                "index b8f2e19d0..9de4bc5fb 100644",
                "--- a/tests/wycheproof/test_rsa.py",
                "+++ b/tests/wycheproof/test_rsa.py",
                "@@ -44,4 +44,4 @@ def should_verify(backend, wycheproof):",
                "         # TODO: this also skips on LibreSSL, which is ok for now, since these",
                "-        # don't pass on Libre, but we'll need to fix this after they resolve",
                "-        # it.",
                "+        # don't pass on Libre, but we'll need to fix this when LibreSSL 2.8 is",
                "+        # released.",
                "         not backend._lib.CRYPTOGRAPHY_OPENSSL_LESS_THAN_102"
            ],
            "changed_files": [
                "tests/wycheproof/test_rsa.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4371": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4371",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5d187402775bcb7bc8b0da1d972d36bf9ad9dbff",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531754391,
            "hunks": 5,
            "message": "add crl.get_revoked_certificate method (#4331) * add crl.get_revoked_certificate method * lexicographic is the best ographic * rename",
            "diff": [
                "diff --git a/src/_cffi_src/openssl/x509.py b/src/_cffi_src/openssl/x509.py",
                "index 97ade5bca..59fdbf7e4 100644",
                "--- a/src/_cffi_src/openssl/x509.py",
                "+++ b/src/_cffi_src/openssl/x509.py",
                "@@ -240,2 +240,4 @@ int X509_CRL_get_ext_count(X509_CRL *);",
                "+int X509_CRL_get0_by_serial(X509_CRL *, X509_REVOKED **, ASN1_INTEGER *);",
                "+",
                " /* these CRYPTO_EX_DATA functions became macros in 1.1.0 */",
                "diff --git a/src/cryptography/hazmat/backends/openssl/x509.py b/src/cryptography/hazmat/backends/openssl/x509.py",
                "index 9637fc0e4..b870eeb77 100644",
                "--- a/src/cryptography/hazmat/backends/openssl/x509.py",
                "+++ b/src/cryptography/hazmat/backends/openssl/x509.py",
                "@@ -18,2 +18,5 @@ from cryptography.hazmat.backends.openssl.decode_asn1 import (",
                " )",
                "+from cryptography.hazmat.backends.openssl.encode_asn1 import (",
                "+    _encode_asn1_int_gc",
                "+)",
                " from cryptography.hazmat.primitives import hashes, serialization",
                "@@ -237,2 +240,18 @@ class _CertificateRevocationList(object):",
                "+    def get_revoked_certificate_by_serial_number(self, serial_number):",
                "+        revoked = self._backend._ffi.new(\"X509_REVOKED **\")",
                "+        asn1_int = _encode_asn1_int_gc(self._backend, serial_number)",
                "+        res = self._backend._lib.X509_CRL_get0_by_serial(",
                "+            self._x509_crl, revoked, asn1_int",
                "+        )",
                "+        if res == 0:",
                "+            return None",
                "+        else:",
                "+            self._backend.openssl_assert(",
                "+                revoked[0] != self._backend._ffi.NULL",
                "+            )",
                "+            return _RevokedCertificate(",
                "+                self._backend, self._x509_crl, revoked[0]",
                "+            )",
                "+",
                "     @property",
                "diff --git a/src/cryptography/x509/base.py b/src/cryptography/x509/base.py",
                "index 45b603f0b..b14499c9d 100644",
                "--- a/src/cryptography/x509/base.py",
                "+++ b/src/cryptography/x509/base.py",
                "@@ -191,2 +191,9 @@ class CertificateRevocationList(object):",
                "+    @abc.abstractmethod",
                "+    def get_revoked_certificate_by_serial_number(self, serial_number):",
                "+        \"\"\"",
                "+        Returns an instance of RevokedCertificate or None if the serial_number",
                "+        is not in the CRL.",
                "+        \"\"\"",
                "+",
                "     @abc.abstractproperty",
                "diff --git a/tests/x509/test_x509.py b/tests/x509/test_x509.py",
                "index fe57784a3..5905e335a 100644",
                "--- a/tests/x509/test_x509.py",
                "+++ b/tests/x509/test_x509.py",
                "@@ -183,2 +183,14 @@ class TestCertificateRevocationList(object):",
                "+    def test_get_revoked_certificate_by_serial_number(self, backend):",
                "+        crl = _load_cert(",
                "+            os.path.join(",
                "+                \"x509\", \"PKITS_data\", \"crls\", \"LongSerialNumberCACRL.crl\"),",
                "+            x509.load_der_x509_crl,",
                "+            backend",
                "+        )",
                "+        serial_number = 725064303890588110203033396814564464046290047507",
                "+        revoked = crl.get_revoked_certificate_by_serial_number(serial_number)",
                "+        assert revoked.serial_number == serial_number",
                "+        assert crl.get_revoked_certificate_by_serial_number(500) is None",
                "+",
                "     def test_revoked_cert_retrieval_retain_only_revoked(self, backend):"
            ],
            "changed_files": [
                "src/_cffi_src/openssl/x509.py",
                "src/cryptography/hazmat/backends/openssl/x509.py",
                "src/cryptography/x509/base.py",
                "tests/x509/test_x509.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4331": "get_revoked_certificate_by_serial_number breaks signature validation on CertificateRevocationList #4456"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4331",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d8aba9f3aa657f1241b7a0de3cb025327723b61d",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531240044,
            "hunks": 1,
            "message": "don't install docs when we build openssls...and do it parallel (#4327)",
            "diff": [
                "diff --git a/.travis/install.sh b/.travis/install.sh",
                "index 673ac4b8f..6cb0a6b5f 100755",
                "--- a/.travis/install.sh",
                "+++ b/.travis/install.sh",
                "@@ -24,3 +24,5 @@ if [ -n \"${OPENSSL}\" ]; then",
                "         make depend",
                "-        make install",
                "+        # avoid installing the docs",
                "+        # https://github.com/openssl/openssl/issues/6685#issuecomment-403838728",
                "+        make -j\"$(nproc)\" install_sw install_ssldirs",
                "         popd"
            ],
            "changed_files": [
                ".travis/install.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4327": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4327",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2e85a925b49e566776585f35a7c0653510d84262",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531754313,
            "hunks": 16,
            "message": "Refs #3331 -- added initial wycheproof integration, starting with x25519, rsa, and keywrap (#4310) * Refs #3331 -- added initial wycheproof integration, starting with x25519 tests",
            "diff": [
                "diff --git a/.travis/install.sh b/.travis/install.sh",
                "index a4aa9a42a..e3b20fdb8 100755",
                "--- a/.travis/install.sh",
                "+++ b/.travis/install.sh",
                "@@ -42,2 +42,5 @@ elif [ -n \"${LIBRESSL}\" ]; then",
                " fi",
                "+",
                "+git clone --depth=1 https://github.com/google/wycheproof $HOME/wycheproof",
                "+",
                " pip install virtualenv",
                "diff --git a/.travis/run.sh b/.travis/run.sh",
                "index 32e9874be..38b66528d 100755",
                "--- a/.travis/run.sh",
                "+++ b/.travis/run.sh",
                "@@ -26,3 +26,3 @@ source ~/.venv/bin/activate",
                " if [ -n \"${TOXENV}\" ]; then",
                "-    tox",
                "+    tox -- --wycheproof-root=$HOME/wycheproof",
                " else",
                "diff --git a/Jenkinsfile b/Jenkinsfile",
                "index 2697b8f60..816e9de84 100644",
                "--- a/Jenkinsfile",
                "+++ b/Jenkinsfile",
                "@@ -146,2 +146,12 @@ def build(toxenv, label, imageName, artifacts, artifactExcludes) {",
                "             checkout_git(label)",
                "+            checkout([",
                "+                $class: 'GitSCM',",
                "+                extensions: [[",
                "+                    $class: 'RelativeTargetDirectory',",
                "+                    relativeTargetDir: 'wycheproof',",
                "+                ]],",
                "+                userRemoteConfigs: [[",
                "+                    'url': 'https://github.com/google/wycheproof',",
                "+                ]]",
                "+            ])",
                "@@ -187,3 +197,3 @@ def build(toxenv, label, imageName, artifacts, artifactExcludes) {",
                "                             @set LIB=\"${opensslPaths[label]['lib']}\";%LIB%",
                "-                            tox -r",
                "+                            tox -r -- --wycheproof-root=../wycheproof",
                "                             IF %ERRORLEVEL% NEQ 0 EXIT /B %ERRORLEVEL%",
                "@@ -207,3 +217,3 @@ def build(toxenv, label, imageName, artifacts, artifactExcludes) {",
                "                                     CFLAGS=\"-I/usr/local/opt/openssl\\\\@1.1/include -Werror -Wno-error=deprecated-declarations -Wno-error=incompatible-pointer-types -Wno-error=unused-function -Wno-error=unused-command-line-argument -mmacosx-version-min=10.9\" \\",
                "-                                    tox -r --  --color=yes",
                "+                                    tox -r --  --color=yes --wycheproof-root=../wycheproof",
                "                                 virtualenv .venv",
                "@@ -220,3 +230,3 @@ def build(toxenv, label, imageName, artifacts, artifactExcludes) {",
                "                                 cd cryptography",
                "-                                tox -r -- --color=yes",
                "+                                tox -r -- --color=yes --wycheproof-root=../wycheproof",
                "                                 virtualenv .venv",
                "diff --git a/tests/conftest.py b/tests/conftest.py",
                "index c5efbd36a..583c4099d 100644",
                "--- a/tests/conftest.py",
                "+++ b/tests/conftest.py",
                "@@ -10,3 +10,5 @@ from cryptography.hazmat.backends.openssl import backend as openssl_backend",
                "-from .utils import check_backend_support",
                "+from .utils import (",
                "+    check_backend_support, load_wycheproof_tests, skip_if_wycheproof_none",
                "+)",
                "@@ -17,2 +19,17 @@ def pytest_report_header(config):",
                "+def pytest_addoption(parser):",
                "+    parser.addoption(\"--wycheproof-root\", default=None)",
                "+",
                "+",
                "+def pytest_generate_tests(metafunc):",
                "+    if \"wycheproof\" in metafunc.fixturenames:",
                "+        wycheproof = metafunc.config.getoption(\"--wycheproof-root\")",
                "+        skip_if_wycheproof_none(wycheproof)",
                "+",
                "+        testcases = []",
                "+        for path in metafunc.function.wycheproof_tests.args:",
                "+            testcases.extend(load_wycheproof_tests(wycheproof, path))",
                "+        metafunc.parametrize(\"wycheproof\", testcases)",
                "+",
                "+",
                " @pytest.fixture()",
                "diff --git a/tests/utils.py b/tests/utils.py",
                "index b721f3440..ccc3b7c1b 100644",
                "--- a/tests/utils.py",
                "+++ b/tests/utils.py",
                "@@ -8,3 +8,5 @@ import binascii",
                " import collections",
                "+import json",
                " import math",
                "+import os",
                " import re",
                "@@ -886 +888,40 @@ def load_nist_ccm_vectors(vector_data):",
                "     return data",
                "+",
                "+",
                "+class WycheproofTest(object):",
                "+    def __init__(self, testgroup, testcase):",
                "+        self.testgroup = testgroup",
                "+        self.testcase = testcase",
                "+",
                "+    def __repr__(self):",
                "+        return \"<WycheproofTest({!r}, {!r}, tcId={})>\".format(",
                "+            self.testgroup, self.testcase, self.testcase[\"tcId\"],",
                "+        )",
                "+",
                "+    @property",
                "+    def valid(self):",
                "+        return self.testcase[\"result\"] == \"valid\"",
                "+",
                "+    @property",
                "+    def acceptable(self):",
                "+        return self.testcase[\"result\"] == \"acceptable\"",
                "+",
                "+    def has_flag(self, flag):",
                "+        return flag in self.testcase[\"flags\"]",
                "+",
                "+",
                "+def skip_if_wycheproof_none(wycheproof):",
                "+    # This is factored into its own function so we can easily test both",
                "+    # branches",
                "+    if wycheproof is None:",
                "+        pytest.skip(\"--wycheproof-root not provided\")",
                "+",
                "+",
                "+def load_wycheproof_tests(wycheproof, test_file):",
                "+    path = os.path.join(wycheproof, \"testvectors\", test_file)",
                "+    with open(path) as f:",
                "+        data = json.load(f)",
                "+        for group in data[\"testGroups\"]:",
                "+            cases = group.pop(\"tests\")",
                "+            for c in cases:",
                "+                yield WycheproofTest(group, c)",
                "diff --git a/tests/wycheproof/__init__.py b/tests/wycheproof/__init__.py",
                "new file mode 100644",
                "index 000000000..e69de29bb",
                "diff --git a/tests/wycheproof/test_keywrap.py b/tests/wycheproof/test_keywrap.py",
                "new file mode 100644",
                "index 000000000..5f694e4d3",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_keywrap.py",
                "@@ -0,0 +1,61 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import binascii",
                "+",
                "+import pytest",
                "+",
                "+from cryptography.hazmat.backends.interfaces import CipherBackend",
                "+from cryptography.hazmat.primitives import keywrap",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=CipherBackend)",
                "+@pytest.mark.wycheproof_tests(\"kwp_test.json\")",
                "+def test_keywrap_with_padding(backend, wycheproof):",
                "+    wrapping_key = binascii.unhexlify(wycheproof.testcase[\"key\"])",
                "+    key_to_wrap = binascii.unhexlify(wycheproof.testcase[\"msg\"])",
                "+    expected = binascii.unhexlify(wycheproof.testcase[\"ct\"])",
                "+",
                "+    result = keywrap.aes_key_wrap_with_padding(",
                "+        wrapping_key, key_to_wrap, backend",
                "+    )",
                "+    if wycheproof.valid or wycheproof.acceptable:",
                "+        assert result == expected",
                "+",
                "+    if wycheproof.valid or (wycheproof.acceptable and not len(expected) < 16):",
                "+        result = keywrap.aes_key_unwrap_with_padding(",
                "+            wrapping_key, expected, backend",
                "+        )",
                "+        assert result == key_to_wrap",
                "+    else:",
                "+        with pytest.raises(keywrap.InvalidUnwrap):",
                "+            keywrap.aes_key_unwrap_with_padding(",
                "+                wrapping_key, expected, backend",
                "+            )",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=CipherBackend)",
                "+@pytest.mark.wycheproof_tests(\"kw_test.json\")",
                "+def test_keywrap(backend, wycheproof):",
                "+    wrapping_key = binascii.unhexlify(wycheproof.testcase[\"key\"])",
                "+    key_to_wrap = binascii.unhexlify(wycheproof.testcase[\"msg\"])",
                "+    expected = binascii.unhexlify(wycheproof.testcase[\"ct\"])",
                "+",
                "+    if (",
                "+        wycheproof.valid or (",
                "+            wycheproof.acceptable and",
                "+            wycheproof.testcase[\"comment\"] != \"invalid size of wrapped key\"",
                "+        )",
                "+    ):",
                "+        result = keywrap.aes_key_wrap(wrapping_key, key_to_wrap, backend)",
                "+        assert result == expected",
                "+",
                "+    if wycheproof.valid or wycheproof.acceptable:",
                "+        result = keywrap.aes_key_unwrap(wrapping_key, expected, backend)",
                "+        assert result == key_to_wrap",
                "+    else:",
                "+        with pytest.raises(keywrap.InvalidUnwrap):",
                "+            keywrap.aes_key_unwrap(wrapping_key, expected, backend)",
                "diff --git a/tests/wycheproof/test_rsa.py b/tests/wycheproof/test_rsa.py",
                "new file mode 100644",
                "index 000000000..b8f2e19d0",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_rsa.py",
                "@@ -0,0 +1,85 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import binascii",
                "+",
                "+import pytest",
                "+",
                "+from cryptography.exceptions import InvalidSignature",
                "+from cryptography.hazmat.backends.interfaces import RSABackend",
                "+from cryptography.hazmat.primitives import hashes, serialization",
                "+from cryptography.hazmat.primitives.asymmetric import padding",
                "+",
                "+",
                "+_DIGESTS = {",
                "+    \"SHA-1\": hashes.SHA1(),",
                "+    \"SHA-224\": hashes.SHA224(),",
                "+    \"SHA-256\": hashes.SHA256(),",
                "+    \"SHA-384\": hashes.SHA384(),",
                "+    \"SHA-512\": hashes.SHA512(),",
                "+}",
                "+",
                "+",
                "+def should_verify(backend, wycheproof):",
                "+    if wycheproof.valid:",
                "+        return True",
                "+",
                "+    if wycheproof.acceptable:",
                "+        if (",
                "+            backend._lib.CRYPTOGRAPHY_OPENSSL_110_OR_GREATER and",
                "+            wycheproof.has_flag(\"MissingNull\")",
                "+        ):",
                "+            return False",
                "+        return True",
                "+",
                "+    return False",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=RSABackend)",
                "+@pytest.mark.supported(",
                "+    only_if=lambda backend: (",
                "+        # TODO: this also skips on LibreSSL, which is ok for now, since these",
                "+        # don't pass on Libre, but we'll need to fix this after they resolve",
                "+        # it.",
                "+        not backend._lib.CRYPTOGRAPHY_OPENSSL_LESS_THAN_102",
                "+    ),",
                "+    skip_message=(",
                "+        \"Many of these tests fail on OpenSSL < 1.0.2 and since upstream isn't\"",
                "+        \" maintaining it, they'll never be fixed.\"",
                "+    ),",
                "+)",
                "+@pytest.mark.wycheproof_tests(",
                "+    \"rsa_signature_test.json\",",
                "+    \"rsa_signature_2048_sha224_test.json\",",
                "+    \"rsa_signature_2048_sha256_test.json\",",
                "+    \"rsa_signature_2048_sha512_test.json\",",
                "+    \"rsa_signature_3072_sha256_test.json\",",
                "+    \"rsa_signature_3072_sha384_test.json\",",
                "+    \"rsa_signature_3072_sha512_test.json\",",
                "+    \"rsa_signature_4096_sha384_test.json\",",
                "+    \"rsa_signature_4096_sha512_test.json\",",
                "+)",
                "+def test_rsa_signature(backend, wycheproof):",
                "+    key = serialization.load_der_public_key(",
                "+        binascii.unhexlify(wycheproof.testgroup[\"keyDer\"]), backend",
                "+    )",
                "+    digest = _DIGESTS[wycheproof.testgroup[\"sha\"]]",
                "+",
                "+    if should_verify(backend, wycheproof):",
                "+        key.verify(",
                "+            binascii.unhexlify(wycheproof.testcase[\"sig\"]),",
                "+            binascii.unhexlify(wycheproof.testcase[\"msg\"]),",
                "+            padding.PKCS1v15(),",
                "+            digest,",
                "+        )",
                "+    else:",
                "+        with pytest.raises(InvalidSignature):",
                "+            key.verify(",
                "+                binascii.unhexlify(wycheproof.testcase[\"sig\"]),",
                "+                binascii.unhexlify(wycheproof.testcase[\"msg\"]),",
                "+                padding.PKCS1v15(),",
                "+                digest,",
                "+            )",
                "diff --git a/tests/wycheproof/test_utils.py b/tests/wycheproof/test_utils.py",
                "new file mode 100644",
                "index 000000000..82c0a3596",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_utils.py",
                "@@ -0,0 +1,21 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import pytest",
                "+",
                "+from ..utils import WycheproofTest, skip_if_wycheproof_none",
                "+",
                "+",
                "+def test_wycheproof_test_repr():",
                "+    wycheproof = WycheproofTest({}, {\"tcId\": 3})",
                "+    assert repr(wycheproof) == \"<WycheproofTest({}, {'tcId': 3}, tcId=3)>\"",
                "+",
                "+",
                "+def test_skip_if_wycheproof_none():",
                "+    with pytest.raises(pytest.skip.Exception):",
                "+        skip_if_wycheproof_none(None)",
                "+",
                "+    skip_if_wycheproof_none(\"abc\")",
                "diff --git a/tests/wycheproof/test_x25519.py b/tests/wycheproof/test_x25519.py",
                "new file mode 100644",
                "index 000000000..5e6253ce1",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_x25519.py",
                "@@ -0,0 +1,42 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import binascii",
                "+",
                "+import pytest",
                "+",
                "+from cryptography.hazmat.backends.interfaces import DHBackend",
                "+from cryptography.hazmat.primitives.asymmetric.x25519 import (",
                "+    X25519PrivateKey, X25519PublicKey",
                "+)",
                "+",
                "+",
                "+@pytest.mark.supported(",
                "+    only_if=lambda backend: backend.x25519_supported(),",
                "+    skip_message=\"Requires OpenSSL with X25519 support\"",
                "+)",
                "+@pytest.mark.requires_backend_interface(interface=DHBackend)",
                "+@pytest.mark.wycheproof_tests(\"x25519_test.json\")",
                "+def test_x25519(backend, wycheproof):",
                "+    assert list(wycheproof.testgroup.items()) == [(\"curve\", \"curve25519\")]",
                "+",
                "+    private_key = X25519PrivateKey._from_private_bytes(",
                "+        binascii.unhexlify(wycheproof.testcase[\"private\"])",
                "+    )",
                "+    public_key = X25519PublicKey.from_public_bytes(",
                "+        binascii.unhexlify(wycheproof.testcase[\"public\"])",
                "+    )",
                "+",
                "+    assert wycheproof.valid or wycheproof.acceptable",
                "+",
                "+    expected = binascii.unhexlify(wycheproof.testcase[\"shared\"])",
                "+    if expected == b\"\\x00\" * 32:",
                "+        assert wycheproof.acceptable",
                "+        # OpenSSL returns an error on all zeros shared key",
                "+        with pytest.raises(ValueError):",
                "+            private_key.exchange(public_key)",
                "+    else:",
                "+        assert private_key.exchange(public_key) == expected",
                "diff --git a/tox.ini b/tox.ini",
                "index b76bfc972..cb882a8aa 100644",
                "--- a/tox.ini",
                "+++ b/tox.ini",
                "@@ -91 +91,2 @@ markers =",
                "     supported: parametrized test requiring only_if and skip_message",
                "+    wycheproof_tests: this test runs a wycheproof fixture"
            ],
            "changed_files": [
                ".travis/install.sh",
                ".travis/run.sh",
                "Jenkinsfile",
                "tests/conftest.py",
                "tests/utils.py",
                "tests/wycheproof/__init__.py",
                "tests/wycheproof/test_keywrap.py",
                "tests/wycheproof/test_rsa.py",
                "tests/wycheproof/test_utils.py",
                "tests/wycheproof/test_x25519.py",
                "tox.ini"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3331": "add wycheproof tests for AES CMAC #4344 add chacha20poly1305 wycheproof tests #4345 add DSA wycheproof tests #4346 add aes cbc pkcs5 wycheproof tests #4347 add wycheproof gcm tests #4349",
                "4310": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3331, 4310",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "160c9b20d47fe11311ce1d89aaa70d1d093e37e0",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531830472,
            "hunks": 1,
            "message": "add aes cbc pkcs5 wycheproof tests (#4347)",
            "diff": [
                "diff --git a/tests/wycheproof/test_aes.py b/tests/wycheproof/test_aes.py",
                "new file mode 100644",
                "index 000000000..65db9cdb2",
                "--- /dev/null",
                "+++ b/tests/wycheproof/test_aes.py",
                "@@ -0,0 +1,42 @@",
                "+# This file is dual licensed under the terms of the Apache License, Version",
                "+# 2.0, and the BSD License. See the LICENSE file in the root of this repository",
                "+# for complete details.",
                "+",
                "+from __future__ import absolute_import, division, print_function",
                "+",
                "+import binascii",
                "+",
                "+import pytest",
                "+",
                "+from cryptography.hazmat.backends.interfaces import CipherBackend",
                "+from cryptography.hazmat.primitives import padding",
                "+from cryptography.hazmat.primitives.ciphers import (",
                "+    Cipher, algorithms, modes",
                "+)",
                "+",
                "+",
                "+@pytest.mark.requires_backend_interface(interface=CipherBackend)",
                "+@pytest.mark.wycheproof_tests(\"aes_cbc_pkcs5_test.json\")",
                "+def test_aes_cbc_pkcs5(backend, wycheproof):",
                "+    key = binascii.unhexlify(wycheproof.testcase[\"key\"])",
                "+    iv = binascii.unhexlify(wycheproof.testcase[\"iv\"])",
                "+    msg = binascii.unhexlify(wycheproof.testcase[\"msg\"])",
                "+    ct = binascii.unhexlify(wycheproof.testcase[\"ct\"])",
                "+",
                "+    padder = padding.PKCS7(128).padder()",
                "+",
                "+    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend)",
                "+    enc = cipher.encryptor()",
                "+    computed_ct = enc.update(",
                "+        padder.update(msg) + padder.finalize()) + enc.finalize()",
                "+    dec = cipher.decryptor()",
                "+    padded_msg = dec.update(ct) + dec.finalize()",
                "+    unpadder = padding.PKCS7(128).unpadder()",
                "+    if wycheproof.valid or wycheproof.acceptable:",
                "+        assert computed_ct == ct",
                "+        computed_msg = unpadder.update(padded_msg) + unpadder.finalize()",
                "+        assert computed_msg == msg",
                "+    else:",
                "+        assert computed_ct != ct",
                "+        with pytest.raises(ValueError):",
                "+            unpadder.update(padded_msg) + unpadder.finalize()"
            ],
            "changed_files": [
                "tests/wycheproof/test_aes.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4347": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4347",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0fba4e28de2d0b5b8a262f512b65e487ded0c6e1",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1531414161,
            "hunks": 2,
            "message": "raise valueerror for null x25519 derived keys (#4332) * raise valueerror for null x25519 derived keys OpenSSL errors when it hits this edge case and a null shared key is bad anyway so let's raise an error * empty commit",
            "diff": [
                "diff --git a/src/cryptography/hazmat/backends/openssl/x25519.py b/src/cryptography/hazmat/backends/openssl/x25519.py",
                "index 5599c2fd5..983ece6a9 100644",
                "--- a/src/cryptography/hazmat/backends/openssl/x25519.py",
                "+++ b/src/cryptography/hazmat/backends/openssl/x25519.py",
                "@@ -73,3 +73,7 @@ class _X25519PrivateKey(object):",
                "         res = self._backend._lib.EVP_PKEY_derive(ctx, buf, keylen)",
                "-        self._backend.openssl_assert(res == 1)",
                "+        if res != 1:",
                "+            raise ValueError(",
                "+                \"Null shared key derived from public/private pair.\"",
                "+            )",
                "+",
                "         return self._backend._ffi.buffer(buf, keylen[0])[:]",
                "diff --git a/tests/hazmat/primitives/test_x25519.py b/tests/hazmat/primitives/test_x25519.py",
                "index 22a0ae66f..381be201a 100644",
                "--- a/tests/hazmat/primitives/test_x25519.py",
                "+++ b/tests/hazmat/primitives/test_x25519.py",
                "@@ -78,2 +78,19 @@ class TestX25519Exchange(object):",
                "+    def test_null_shared_key_raises_error(self, backend):",
                "+        \"\"\"",
                "+        The vector used here is taken from wycheproof's x25519 test vectors",
                "+        \"\"\"",
                "+        public = binascii.unhexlify(",
                "+            \"5f9c95bca3508c24b1d0b1559c83ef5b04445cc4581c8e86d8224eddd09f1157\"",
                "+        )",
                "+        private = binascii.unhexlify(",
                "+            \"78f1e8edf14481b389448dac8f59c70b038e7cf92ef2c7eff57a72466e115296\"",
                "+        )",
                "+        private_key = X25519PrivateKey._from_private_bytes(",
                "+            private",
                "+        )",
                "+        public_key = X25519PublicKey.from_public_bytes(public)",
                "+        with pytest.raises(ValueError):",
                "+            private_key.exchange(public_key)",
                "+",
                "     # These vectors are also from RFC 7748"
            ],
            "changed_files": [
                "src/cryptography/hazmat/backends/openssl/x25519.py",
                "tests/hazmat/primitives/test_x25519.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4332": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.3",
                "2.3.1",
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4332",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fcf431a7764fdb93a012466f449a06dc15e53258",
            "repository": "https://github.com/pyca/cryptography",
            "timestamp": 1532144878,
            "hunks": 1,
            "message": "sign is a method (#4362)",
            "diff": [
                "diff --git a/src/cryptography/hazmat/primitives/asymmetric/ec.py b/src/cryptography/hazmat/primitives/asymmetric/ec.py",
                "index 6cbfcab4c..e2e55e9e1 100644",
                "--- a/src/cryptography/hazmat/primitives/asymmetric/ec.py",
                "+++ b/src/cryptography/hazmat/primitives/asymmetric/ec.py",
                "@@ -70,3 +70,3 @@ class EllipticCurvePrivateKey(object):",
                "-    @abc.abstractproperty",
                "+    @abc.abstractmethod",
                "     def sign(self, data, signature_algorithm):"
            ],
            "changed_files": [
                "src/cryptography/hazmat/primitives/asymmetric/ec.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "4362": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.4",
                "2.4.1",
                "2.4.2",
                "2.5",
                "2.6",
                "2.6.1",
                "2.7",
                "2.8",
                "2.9",
                "2.9.1",
                "2.9.2",
                "3.0",
                "3.1",
                "3.1.1",
                "3.2",
                "3.2.1",
                "3.3",
                "3.3.1",
                "3.3.2",
                "3.4",
                "3.4.1",
                "3.4.2",
                "3.4.3",
                "3.4.4",
                "3.4.5",
                "3.4.6",
                "3.4.7",
                "3.4.8",
                "35.0.0",
                "36.0.0",
                "36.0.1",
                "36.0.2",
                "37.0.0",
                "37.0.1",
                "37.0.2",
                "37.0.3",
                "37.0.4",
                "38.0.0",
                "38.0.1",
                "38.0.2",
                "38.0.3",
                "38.0.4",
                "39.0.0",
                "39.0.1",
                "39.0.2",
                "40.0.0",
                "40.0.1",
                "40.0.2",
                "41.0.0",
                "41.0.1",
                "41.0.2",
                "41.0.3",
                "41.0.4",
                "41.0.5",
                "41.0.6",
                "41.0.7",
                "42.0.0",
                "42.0.1",
                "42.0.2",
                "42.0.3",
                "42.0.4",
                "42.0.5",
                "42.0.6",
                "42.0.7",
                "42.0.8"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 4362",
                    "relevance": 2
                }
            ]
        }
    ]
}
